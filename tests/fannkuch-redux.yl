//
// fannkuch-redux.yl
//
// Based on program from the Computer Language Benchmarks Game:
//  http://benchmarksgame.alioth.debian.org/u32/benchmark.php?test=fannkuchredux&lang=lua&id=1&data=u32
//



def fannkuch( n )
{
    var p = []; p.resize( n );
    var q = []; q.resize( n );
    var s = []; s.resize( n );

    var sign = 1;
    var maxflips = 0;
    var sum = 0;

    for ( var i = 0; i < n; ++i )
    {
        p[ i ] = i;
        q[ i ] = i;
        s[ i ] = i;
    }

    while ( true )
    {
        var q0 = p[ 0 ];
        if ( q0 != 0 )
        {
            for ( var i = 1; i < n; ++i )
            {
                q[ i ] = p[ i ];
            }
            var flips = 1;
            while ( true )
            {
                var qq = q[ q0 ];
                if ( qq == 0 )
                {
                    sum += sign * flips;
                    if ( flips > maxflips )
                        maxflips = flips;
                    break;
                }

                q[ q0 ] = q0;
                var i = 1;
                var j = q0 - 1;
                while ( i < j )
                {
                    q[ i ], q[ j ] = q[ j ], q[ i ];
                    ++i;
                    --j;
                }

                q0 = qq;
                ++flips;
            }
        }

        if ( sign == 1 )
        {
            p[ 1 ], p[ 0 ] = p[ 0 ], p[ 1 ];
            sign = -1;
        }
        else
        {
            p[ 1 ], p[ 2 ] = p[ 2 ], p[ 1 ];
            sign = 1;
            for ( var i = 2; i < n; ++i )
            {
                var sx = s[ i ];
                if ( sx != 0 )
                {
                    s[ i ] = sx - 1;
                    break;
                }

                if ( i == n - 1 )
                {
                    printf( "%g\n", sum );
                    return maxflips;
                }

                s[ i ] = i;
                var t = p[ 0 ];
                for ( var j = 0; j <= i; ++j )
                {
                    p[ j ] = p[ j + 1 ];
                }
                p[ i + 1 ] = t;
            }
        }

    }

}




def main( n )
{
    n = n ? atoi( n ) : 7;
//    printf( "%g\nPfannkuchen(%g) = %g\n", fannkuch( n ) ... );
    printf( "Pfannkuchen(%g) = %g\n", n, fannkuch( n ) );
    return 0;
}



return main( ... );





