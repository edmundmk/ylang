//
// fannkuch-redux.xec
//
// Based on program from the Computer Language Benchmarks Game:
//  http://benchmarksgame.alioth.debian.org/u32/benchmark.php?test=fannkuchredux&lang=lua&id=1&data=u32
//


def fannkuch( n )
{
    var max_flips_count = 0;
    var perm_count = 0;
    var checksum = 0;

    var p = []; p.resize( n );
    var q = []; q.resize( n );
    var c = []; c.resize( n );
    
    for ( var i = 0; i < n; ++i )
    {
        p[ i ] = i;
        q[ i ] = i;
        c[ i ] = i;
    }

    var r = n;
    
    while ( true )
    {
        while ( r != 1 )
        {
            c[ r - 1 ] = r;
            r -= 1;
        }
        
        for ( var i = 0; i < n; ++i )
            p[ i ] = q[ i ];
        
        var flips_count = 0;

        var k;
        while ( ( k = p[ 0 ] ) != 0 )
        {
            var k2 = ( k + 1 ) >> 1;
            for ( var i = 0; i < k2; ++i )
                p[ i ], p[ k - i ] = p[ k - i ], p[ i ];
            flips_count += 1;
        }
        
        max_flips_count = max( max_flips_count, flips_count );
        checksum += perm_count % 2 == 0 ? flips_count : -flips_count;
        
        // Use incremental change to generate another permutation.
        while ( true )
        {
            if ( r == n )
            {
                printf( "%d\n", checksum );
                return max_flips_count;
            }
            
            var q0 = q[ 0 ];
            for ( var i = 0; i < r; ++i )
                q[ i ] = q[ i + 1 ];
            q[ r ] = q0;
            c[ r ] = c[ r ] - 1;
            if ( c[ r ] > 0 )
                break;
            
            r += 1;
        }

        perm_count += 1;
    }
}


def main( n )
{
    n = atoi( n, 7 );
    printf( "Pfannkuchen(%d) = %d\n", n, fannkuch( n ) );
    return 0;
}



main( ... );





