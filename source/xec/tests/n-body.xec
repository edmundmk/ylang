//
// n-body.xec
//
// Based on program from the Computer Language Benchmarks Game:
//  http://benchmarksgame.alioth.debian.org/u32/benchmark.php?test=nbody&lang=lua&id=1&data=u32
//


var PI = 3.141592653589793;
var SOLAR_MASS = 4 * PI * PI;
var DAYS_PER_YEAR = 365.24;



object body
{
    function this( x, y, z, vx, vy, vz, mass );

    var x, y, z;
    var vx, vy, vz;
    var mass;
}


function body.this( x, y, z, vx, vy, vz, mass )
{
    this.x, this.y, this.z = x, y, z;
    this.vx, this.vy, this.vz = vx, vy, vz;
    this.mass = mass;
}


var bodies =
[
    // Sun.
    new body( 0, 0, 0, 0, 0, 0, SOLAR_MASS ),
    
    // Jupiter
    new body
    (
        4.84143144246472090e+00,
        -1.16032004402742839e+00,
        -1.03622044471123109e-01,
        1.66007664274403694e-03 * DAYS_PER_YEAR,
        7.69901118419740425e-03 * DAYS_PER_YEAR,
        -6.90460016972063023e-05 * DAYS_PER_YEAR,
        9.54791938424326609e-04 * SOLAR_MASS
    ),
    
    // Saturn
    new body
    (
        8.34336671824457987e+00,
        4.12479856412430479e+00,
        -4.03523417114321381e-01,
        -2.76742510726862411e-03 * DAYS_PER_YEAR,
        4.99852801234917238e-03 * DAYS_PER_YEAR,
        2.30417297573763929e-05 * DAYS_PER_YEAR,
        2.85885980666130812e-04 * SOLAR_MASS
    ),
    
    // Uranus
    new body
    (
        1.28943695621391310e+01,
        -1.51111514016986312e+01,
        -2.23307578892655734e-01,
        2.96460137564761618e-03 * DAYS_PER_YEAR,
        2.37847173959480950e-03 * DAYS_PER_YEAR,
        -2.96589568540237556e-05 * DAYS_PER_YEAR,
        4.36624404335156298e-05 * SOLAR_MASS
    ),
    
    // Neptune
    new body
    (
        1.53796971148509165e+01,
        -2.59193146099879641e+01,
        1.79258772950371181e-01,
        2.68067772490389322e-03 * DAYS_PER_YEAR,
        1.62824170038242295e-03 * DAYS_PER_YEAR,
        -9.51592254519715870e-05 * DAYS_PER_YEAR,
        5.15138902046611451e-05 * SOLAR_MASS
    ),
];


function advance( bodies, dt )
{
    for ( var i = 0; i < bodies.length(); ++i )
    {
        var bi = bodies[ i ];
        for ( var j = i + 1; j < bodies.length(); ++j )
        {
            var bj = bodies[ j ];
            var dx, dy, dz = bi.x - bj.x, bi.y - bj.y, bi.z - bj.z;
            var distance = sqrt( dx * dx + dy * dy + dz * dz );
            var mag = dt / ( distance * distance * distance );
            var bim, bjm = bi.mass * mag, bj.mass * mag;
            bi.vx -= dx * bjm;
            bi.vy -= dy * bjm;
            bi.vz -= dz * bjm;
            bj.vx += dx * bim;
            bj.vy += dy * bim;
            bj.vz += dz * bim;
        }
    }
    for ( var i = 0; i < bodies.length(); ++i )
    {
        var bi = bodies[ i ];
        bi.x += dt * bi.vx;
        bi.y += dt * bi.vy;
        bi.z += dt * bi.vz;
    }
}


function energy( bodies )
{
    var e = 0;
    for ( var i = 0; i < bodies.length(); ++i )
    {
        var bi = bodies[ i ];
        e += 0.5 * bi.mass * ( bi.vx * bi.vx + bi.vy * bi.vy + bi.vz * bi.vz );
        for ( var j = i + 1; j < bodies.length(); ++j )
        {
            var bj = bodies[ j ];
            var dx, dy, dz = bi.x - bj.x, bi.y - bj.y, bi.z - bj.z;
            var distance = sqrt( dx * dx + dy * dy + dz * dz );
            e -= ( bi.mass * bj.mass ) / distance;
        }
    }
    return e;
}


function offset_momentum( bodies )
{
    var px, py, pz = 0, 0, 0;
    for ( var i = 0; i < bodies.length(); ++i )
    {
        var bi = bodies[ i ];
        px += bi.vx * bi.mass;
        py += bi.vy * bi.mass;
        pz += bi.vz * bi.mass;
    }
    var sun = bodies[ 0 ];
    sun.vx -= px / SOLAR_MASS;
    sun.vy -= py / SOLAR_MASS;
    sun.vz -= pz / SOLAR_MASS;
}



function main( n )
{
    n = atoi( n, 1000 );
    offset_momentum( bodies );
    printf( "%0.9f\n", energy( bodies ) );
    for ( var i = 0; i < n; ++i )
        advance( bodies, 0.01 );
    printf( "%0.9f\n", energy( bodies ) );
    return 0;
}


return main( ... );






