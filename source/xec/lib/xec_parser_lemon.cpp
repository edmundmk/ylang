/* Driver template for the LEMON parser generator.
** The author disclaims copyright to this source code.
*/
/* First off, code is included that follows the "include" declaration
** in the input grammar file. */
#include <stdio.h>
#line 7 "xec_parser_lemon.y"

    #include <assert.h>
    #include "xec_parser.h"
    #include "xec_token.h"
#line 13 "xec_parser_lemon.c"
/* Next is all token values, in a form suitable for use by makeheaders.
** This section will be null unless lemon is run with the -m switch.
*/
/* 
** These constants (all generated automatically by the parser generator)
** specify the various kinds of tokens (terminals) that the parser
** understands. 
**
** Each symbol here is a terminal symbol in the grammar.
*/
/* Make sure the INTERFACE macro is defined.
*/
#ifndef INTERFACE
# define INTERFACE 1
#endif
/* The next thing included is series of defines which control
** various aspects of the generated parser.
**    YYCODETYPE         is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 terminals
**                       and nonterminals.  "int" is used otherwise.
**    YYNOCODE           is a number of type YYCODETYPE which corresponds
**                       to no legal terminal or nonterminal number.  This
**                       number is used to fill in empty slots of the hash 
**                       table.
**    YYFALLBACK         If defined, this indicates that one or more tokens
**                       have fall-back values which should be used if the
**                       original value of the token will not parse.
**    YYACTIONTYPE       is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 rules and
**                       states combined.  "int" is used otherwise.
**    XecParseTOKENTYPE     is the data type used for minor tokens given 
**                       directly to the parser from the tokenizer.
**    YYMINORTYPE        is the data type used for all minor tokens.
**                       This is typically a union of many types, one of
**                       which is XecParseTOKENTYPE.  The entry in the union
**                       for base tokens is called "yy0".
**    YYSTACKDEPTH       is the maximum depth of the parser's stack.  If
**                       zero the stack is dynamically sized using realloc()
**    XecParseARG_SDECL     A static variable declaration for the %extra_argument
**    XecParseARG_PDECL     A parameter declaration for the %extra_argument
**    XecParseARG_STORE     Code to store %extra_argument into yypParser
**    XecParseARG_FETCH     Code to extract %extra_argument from yypParser
**    YYNSTATE           the combined number of states.
**    YYNRULE            the number of rules in the grammar
**    YYERRORSYMBOL      is the code number of the error symbol.  If not
**                       defined, then do no error processing.
*/
#define YYCODETYPE unsigned char
#define YYNOCODE 128
#define YYACTIONTYPE unsigned short int
#define XecParseTOKENTYPE void*
typedef union {
  int yyinit;
  XecParseTOKENTYPE yy0;
} YYMINORTYPE;
#ifndef YYSTACKDEPTH
#define YYSTACKDEPTH 100
#endif
#define XecParseARG_SDECL
#define XecParseARG_PDECL
#define XecParseARG_FETCH
#define XecParseARG_STORE
#define YYNSTATE 396
#define YYNRULE 199
#define YY_NO_ACTION      (YYNSTATE+YYNRULE+2)
#define YY_ACCEPT_ACTION  (YYNSTATE+YYNRULE+1)
#define YY_ERROR_ACTION   (YYNSTATE+YYNRULE)

/* The yyzerominor constant is used to initialize instances of
** YYMINORTYPE objects to zero. */
static const YYMINORTYPE yyzerominor = { 0 };

/* Define the yytestcase() macro to be a no-op if is not already defined
** otherwise.
**
** Applications can choose to define yytestcase() in the %include section
** to a macro that can assist in verifying code coverage.  For production
** code the yytestcase() macro should be turned off.  But it is useful
** for testing.
*/
#ifndef yytestcase
# define yytestcase(X)
#endif


/* Next are the tables used to determine what action to take based on the
** current state and lookahead token.  These tables are used to implement
** functions that take a state number and lookahead value and return an
** action integer.  
**
** Suppose the action integer is N.  Then the action is determined as
** follows
**
**   0 <= N < YYNSTATE                  Shift N.  That is, push the lookahead
**                                      token onto the stack and goto state N.
**
**   YYNSTATE <= N < YYNSTATE+YYNRULE   Reduce by rule N-YYNSTATE.
**
**   N == YYNSTATE+YYNRULE              A syntax error has occurred.
**
**   N == YYNSTATE+YYNRULE+1            The parser accepts its input.
**
**   N == YYNSTATE+YYNRULE+2            No such action.  Denotes unused
**                                      slots in the yy_action[] table.
**
** The action table is constructed as a single large table named yy_action[].
** Given state S and lookahead X, the action is computed as
**
**      yy_action[ yy_shift_ofst[S] + X ]
**
** If the index value yy_shift_ofst[S]+X is out of range or if the value
** yy_lookahead[yy_shift_ofst[S]+X] is not equal to X or if yy_shift_ofst[S]
** is equal to YY_SHIFT_USE_DFLT, it means that the action is not in the table
** and that yy_default[S] should be used instead.  
**
** The formula above is for computing the action when the lookahead is
** a terminal symbol.  If the lookahead is a non-terminal (as occurs after
** a reduce action) then the yy_reduce_ofst[] array is used in place of
** the yy_shift_ofst[] array and YY_REDUCE_USE_DFLT is used in place of
** YY_SHIFT_USE_DFLT.
**
** The following are the tables generated in this section:
**
**  yy_action[]        A single table containing all actions.
**  yy_lookahead[]     A table containing the lookahead for each entry in
**                     yy_action.  Used to detect hash collisions.
**  yy_shift_ofst[]    For each state, the offset into yy_action for
**                     shifting terminals.
**  yy_reduce_ofst[]   For each state, the offset into yy_action for
**                     shifting non-terminals after a reduce.
**  yy_default[]       Default action for each state.
*/
static const YYACTIONTYPE yy_action[] = {
 /*     0 */   219,  317,   15,   30,  297,  140,   24,   30,    1,  372,
 /*    10 */   342,  105,  164,   95,  107,  367,  139,   28,   51,  391,
 /*    20 */   369,  360,  349,  347,   93,   92,   91,   90,   89,   94,
 /*    30 */   118,  191,  115,  100,  395,  132,   24,  116,  119,  342,
 /*    40 */   342,  162,  344,  323,  147,  155,  153,  170,  171,  173,
 /*    50 */   143,  187,  138,  101,  263,   71,   72,   73,   74,   75,
 /*    60 */    76,   67,   70,   69,   68,    1,  254,  221,   46,  224,
 /*    70 */   225,    4,  231,   45,  233,  234,   29,   18,   55,  397,
 /*    80 */   219,  141,   15,  136,   48,  140,   24,   33,    1,  137,
 /*    90 */   342,  105,    1,   95,  107,  329,  312,   28,  259,  391,
 /*   100 */   369,  360,  349,  347,   93,   92,   91,   90,   89,   94,
 /*   110 */   118,  370,  115,  127,  395,  126,  136,  116,  119,  293,
 /*   120 */    31,  162,  344,  323,  147,  155,  153,  170,  171,  173,
 /*   130 */   144,   30,  138,  101,  263,  118,  191,  115,    1,  395,
 /*   140 */   346,  345,  116,  119,   54,  375,  324,  221,   46,  224,
 /*   150 */   225,    4,  231,    1,  233,  234,   29,   18,   55,  396,
 /*   160 */   219,  289,   15,  301,  342,  140,   24,   30,    1,  366,
 /*   170 */   342,  105,  166,   95,  107,  367,  316,   28,   47,  391,
 /*   180 */   369,  360,  349,  347,   93,   92,   91,   90,   89,   94,
 /*   190 */   118,  136,  115,  142,  395,   33,  136,  116,  119,  271,
 /*   200 */    34,  162,  344,  323,  147,  155,  153,  170,  171,  181,
 /*   210 */   216,  146,  138,  101,  263,  118,  281,  115,  320,  395,
 /*   220 */   216,  159,  116,  119,   35,   53,  325,  221,   46,  224,
 /*   230 */   225,    4,  231,  308,  233,  234,   29,   18,   55,  219,
 /*   240 */    61,   15,  130,  300,  140,   24,   30,    1,  357,  342,
 /*   250 */   105,  161,   95,  107,  329,  342,   28,   56,  391,  369,
 /*   260 */   360,  349,  347,   93,   92,   91,   90,   89,   94,  118,
 /*   270 */   356,  115,  288,  395,  216,  150,  116,  119,   60,   59,
 /*   280 */   162,  344,  323,  147,  155,  153,  170,  171,  176,  239,
 /*   290 */    14,  138,  101,  263,  118,  352,  115,   62,  395,   84,
 /*   300 */    83,  116,  119,  239,    6,  327,  221,   46,  224,  225,
 /*   310 */     4,  231,  268,  233,  234,   29,   18,   55,  219,  350,
 /*   320 */    15,   64,   58,  140,   24,   30,    1,   96,  342,  195,
 /*   330 */   164,   95,   98,   12,   39,   28,   41,  391,  369,  360,
 /*   340 */   349,  347,   93,   92,   91,   90,   89,   94,  118,   23,
 /*   350 */   115,   26,  395,    9,    5,  116,  119,   11,    7,  162,
 /*   360 */   344,  323,  147,  155,  153,  170,  171,  177,  251,   30,
 /*   370 */   138,  101,  263,  362,  166,  118,   13,  115,   99,  134,
 /*   380 */    47,  128,  116,  119,    1,  221,   46,  224,  225,    4,
 /*   390 */   231,  374,  233,  234,   29,   18,   55,  596,    3,  298,
 /*   400 */   342,  285,   44,  355,  103,  366,  102,  261,  395,  351,
 /*   410 */   343,  114,  120,  340,  336,  162,  344,  323,  147,  155,
 /*   420 */   153,  170,  171,  173,  143,  185,  186,  156,  276,  132,
 /*   430 */    24,   10,  283,  332,  342,  112,  284,  218,  326,   27,
 /*   440 */   339,  330,   16,  391,  369,  360,  349,  347,   97,  104,
 /*   450 */   149,  122,  365,    2,  252,  363,  285,   79,   19,  103,
 /*   460 */    78,  102,  261,  395,  351,  321,  114,  120,  230,   25,
 /*   470 */   162,  344,  323,  147,  155,  153,  170,  171,  173,  143,
 /*   480 */   185,  186,  156,  276,   81,   82,   80,  283,   17,  228,
 /*   490 */   112,  284,  218,  285,   27,  339,  103,   77,  102,  261,
 /*   500 */   395,  319,   21,  114,  120,  131,  309,  162,  344,  323,
 /*   510 */   147,  155,  153,  170,  171,  173,  143,  185,  186,  156,
 /*   520 */   276,  307,   20,   22,  283,    8,  287,  112,  284,  218,
 /*   530 */   274,   27,  306,   66,  191,  129,   30,   65,    1,  285,
 /*   540 */    30,  166,  121,  258,  113,  161,  395,   42,   50,  114,
 /*   550 */   120,   40,  320,  162,  344,  323,  147,  155,  153,  170,
 /*   560 */   171,  173,  143,  185,  186,  156,  276,  255,  250,  253,
 /*   570 */   283,  303,  392,  112,  284,  218,  285,   27,  167,  121,
 /*   580 */   394,  113,  373,  395,  371,  292,  114,  120,  302,  312,
 /*   590 */   162,  344,  323,  147,  155,  153,  170,  171,  173,  143,
 /*   600 */   185,  186,  156,  276,   32,  291,  370,  283,  317,  269,
 /*   610 */   112,  284,  218,  285,   27,  273,  121,  368,  113,  141,
 /*   620 */   395,  361,  259,  114,  120,  275,  151,  162,  344,  323,
 /*   630 */   147,  155,  153,  170,  171,  173,  143,  185,  186,  156,
 /*   640 */   276,   37,  154,   57,  283,  265,  286,  112,  284,  218,
 /*   650 */   285,   27,  295,  121,   96,  113,  256,  395,  304,  597,
 /*   660 */   114,  120,  358,  163,  162,  344,  323,  147,  155,  153,
 /*   670 */   170,  171,  173,  143,  185,  186,  156,  276,  296,  192,
 /*   680 */   267,  283,  597,  597,  112,  284,  218,  285,   27,  322,
 /*   690 */   121,  597,  113,  597,  395,  597,  597,  114,  120,  597,
 /*   700 */   597,  162,  344,  323,  147,  155,  153,  170,  171,  173,
 /*   710 */   143,  185,  186,  156,  276,  597,  597,  597,  283,  597,
 /*   720 */   597,  112,  284,  218,  285,   27,  227,  121,  597,  113,
 /*   730 */   597,  395,  597,  597,  114,  120,  597,  597,  162,  344,
 /*   740 */   323,  147,  155,  153,  170,  171,  173,  143,  185,  186,
 /*   750 */   156,  276,  597,  597,  597,  283,  597,  597,  112,  284,
 /*   760 */   218,  285,   27,  314,  121,  597,  113,  597,  395,  597,
 /*   770 */   597,  114,  120,  597,  597,  162,  344,  323,  147,  155,
 /*   780 */   153,  170,  171,  173,  143,  185,  186,  156,  276,  597,
 /*   790 */   597,  597,  283,  597,  597,  112,  284,  218,  285,   27,
 /*   800 */   328,  121,  597,  113,  597,  395,  597,  597,  114,  120,
 /*   810 */   597,  597,  162,  344,  323,  147,  155,  153,  170,  171,
 /*   820 */   173,  143,  185,  186,  156,  276,  597,  597,  597,  283,
 /*   830 */   597,  597,  112,  284,  218,  285,   27,  106,  121,  597,
 /*   840 */   113,  597,  395,  597,  597,  114,  120,  597,  597,  162,
 /*   850 */   344,  323,  147,  155,  153,  170,  171,  173,  143,  185,
 /*   860 */   186,  156,  276,  597,  597,  597,  283,  597,  597,  112,
 /*   870 */   284,  218,  285,   27,  348,  121,  597,  113,  597,  395,
 /*   880 */   597,  597,  114,  120,  597,  597,  162,  344,  323,  147,
 /*   890 */   155,  153,  170,  171,  173,  143,  185,  186,  156,  276,
 /*   900 */   597,  597,  597,  283,  597,  597,  112,  284,  218,  285,
 /*   910 */    27,  393,  121,  597,  113,  597,  395,  597,  597,  114,
 /*   920 */   120,  597,  597,  162,  344,  323,  147,  155,  153,  170,
 /*   930 */   171,  173,  143,  185,  186,  156,  276,  597,  597,  597,
 /*   940 */   283,  597,  597,  112,  284,  218,  285,   27,  257,  121,
 /*   950 */   597,  113,  597,  395,  597,  597,  114,  120,  597,  597,
 /*   960 */   162,  344,  323,  147,  155,  153,  170,  171,  173,  143,
 /*   970 */   185,  186,  156,  276,  597,  597,  597,  283,  597,  597,
 /*   980 */   112,  284,  218,  285,   27,  310,  121,  597,  113,  597,
 /*   990 */   395,  597,  597,  114,  120,  597,  597,  162,  344,  323,
 /*  1000 */   147,  155,  153,  170,  171,  173,  143,  185,  186,  156,
 /*  1010 */   276,  597,  597,  597,  283,  597,  597,  112,  284,  218,
 /*  1020 */   285,   27,  299,  121,  597,  113,  597,  395,  597,  597,
 /*  1030 */   114,  120,  597,  597,  162,  344,  323,  147,  155,  153,
 /*  1040 */   170,  171,  173,  143,  185,  186,  156,  276,  597,  597,
 /*  1050 */   597,  283,  597,  597,  112,  284,  218,  390,   27,  335,
 /*  1060 */   597,  121,  597,  113,  597,  395,  597,  597,  114,  120,
 /*  1070 */   290,  266,  162,  344,  323,  147,  155,  153,  170,  171,
 /*  1080 */   173,  143,  185,  186,  156,  278,  390,  597,  111,  260,
 /*  1090 */   121,  597,  113,  597,  395,  220,  597,  114,  120,  290,
 /*  1100 */   266,  162,  344,  323,  147,  155,  153,  170,  171,  173,
 /*  1110 */   143,  185,  186,  156,  278,  390,  597,  110,  260,  121,
 /*  1120 */   597,  113,  597,  395,  246,  597,  114,  120,  290,  266,
 /*  1130 */   162,  344,  323,  147,  155,  153,  170,  171,  173,  143,
 /*  1140 */   185,  186,  156,  278,  390,  597,  111,  260,  121,  597,
 /*  1150 */   113,  597,  395,  226,  597,  114,  120,  290,  266,  162,
 /*  1160 */   344,  323,  147,  155,  153,  170,  171,  173,  143,  185,
 /*  1170 */   186,  156,  278,  390,  597,  111,  260,  121,  597,  113,
 /*  1180 */   597,  395,  222,  597,  114,  120,  290,  266,  162,  344,
 /*  1190 */   323,  147,  155,  153,  170,  171,  173,  143,  185,  186,
 /*  1200 */   156,  278,  390,  597,  111,  260,  121,  597,  113,  597,
 /*  1210 */   395,  237,  597,  114,  120,  248,  266,  162,  344,  323,
 /*  1220 */   147,  155,  153,  170,  171,  173,  143,  185,  186,  156,
 /*  1230 */   278,  390,  597,  111,  260,  121,  597,  113,  597,  395,
 /*  1240 */   597,  597,  114,  120,  229,  266,  162,  344,  323,  147,
 /*  1250 */   155,  153,  170,  171,  173,  143,  185,  186,  156,  278,
 /*  1260 */   390,  597,  111,  260,  121,  597,  113,  597,  395,  597,
 /*  1270 */   597,  114,  120,  209,  266,  162,  344,  323,  147,  155,
 /*  1280 */   153,  170,  171,  173,  143,  185,  186,  156,  278,  390,
 /*  1290 */   597,  111,  260,  121,  597,  113,  597,  395,  597,  597,
 /*  1300 */   114,  120,  247,  266,  162,  344,  323,  147,  155,  153,
 /*  1310 */   170,  171,  173,  143,  185,  186,  156,  278,  217,  597,
 /*  1320 */   111,  260,  121,  597,  113,  597,  395,  597,  597,  114,
 /*  1330 */   120,  597,  266,  162,  344,  323,  147,  155,  153,  170,
 /*  1340 */   171,  173,  143,  185,  186,  156,  278,  235,  597,  201,
 /*  1350 */   260,  121,  597,  113,  597,  395,  597,  597,  114,  120,
 /*  1360 */   597,  266,  162,  344,  323,  147,  155,  153,  170,  171,
 /*  1370 */   173,  143,  185,  186,  156,  278,  193,  597,  201,  260,
 /*  1380 */   121,  597,  113,  597,  395,  597,  597,  114,  120,  597,
 /*  1390 */   266,  162,  344,  323,  147,  155,  153,  170,  171,  173,
 /*  1400 */   143,  185,  186,  156,  278,  282,  597,  201,  260,  121,
 /*  1410 */   597,  113,  597,  395,  597,  597,  114,  120,  597,  266,
 /*  1420 */   162,  344,  323,  147,  155,  153,  170,  171,  173,  143,
 /*  1430 */   185,  186,  156,  278,  294,  597,  201,  260,  121,  597,
 /*  1440 */   113,  597,  395,  597,  597,  114,  120,  597,  266,  162,
 /*  1450 */   344,  323,  147,  155,  153,  170,  171,  173,  143,  185,
 /*  1460 */   186,  156,  278,  168,  597,  201,  260,  121,  597,  113,
 /*  1470 */   597,  395,  597,  597,  114,  120,  597,  266,  162,  344,
 /*  1480 */   323,  147,  155,  153,  170,  171,  173,  143,  185,  186,
 /*  1490 */   156,  278,  236,  597,  201,  260,  121,  597,  113,  597,
 /*  1500 */   395,  597,  597,  114,  120,  597,  266,  162,  344,  323,
 /*  1510 */   147,  155,  153,  170,  171,  173,  143,  185,  186,  156,
 /*  1520 */   278,  376,  597,  201,  260,  121,  597,  113,  597,  395,
 /*  1530 */   597,  597,  114,  120,  597,  266,  162,  344,  323,  147,
 /*  1540 */   155,  153,  170,  171,  173,  143,  185,  186,  156,  278,
 /*  1550 */   597,  597,  201,  260,  121,  597,  113,  597,  395,  597,
 /*  1560 */   597,  114,  120,  597,  266,  162,  344,  323,  147,  155,
 /*  1570 */   153,  170,  171,  173,  143,  185,  186,  156,  278,  204,
 /*  1580 */   597,  205,  206,  132,   24,   30,   36,  597,  342,  195,
 /*  1590 */   164,   95,  108,  597,  597,   28,   41,  391,  369,  360,
 /*  1600 */   349,  347,   93,   92,   91,   90,   89,   94,  118,  597,
 /*  1610 */   115,  597,  395,  597,  597,  116,  119,  597,  597,  162,
 /*  1620 */   344,  323,  147,  155,  153,  170,  171,  178,  597,  597,
 /*  1630 */   138,  101,  263,  118,  597,  115,  597,  395,  597,  597,
 /*  1640 */   116,  119,  597,  197,  162,  344,  323,  147,  155,  153,
 /*  1650 */   170,  171,  173,  143,  185,  186,  156,  278,  597,  196,
 /*  1660 */   597,  132,   24,  198,   36,  597,  342,  195,  597,   95,
 /*  1670 */   597,  334,  597,   28,  597,  391,  369,  360,  349,  347,
 /*  1680 */    93,   92,   91,   90,   89,   94,  597,  104,  149,  122,
 /*  1690 */   365,  597,  118,  364,  115,  597,  395,   39,   49,  116,
 /*  1700 */   119,  377,  597,  162,  344,  323,  147,  158,  138,  101,
 /*  1710 */   263,   85,   87,   86,   88,  132,   24,  331,   36,  597,
 /*  1720 */   342,  195,  597,   95,  597,  597,  597,   28,  597,  391,
 /*  1730 */   369,  360,  349,  347,   93,   92,   91,   90,   89,   94,
 /*  1740 */   378,  379,  380,  381,  382,  383,  384,  385,  386,  387,
 /*  1750 */   388,  389,   38,  597,  597,  597,  377,  597,   63,  208,
 /*  1760 */    30,  597,  138,  101,  263,  166,  597,  249,   30,  132,
 /*  1770 */    24,   42,   36,  165,  342,  195,  597,   95,  597,   52,
 /*  1780 */   597,   28,  354,  391,  369,  360,  349,  347,   93,   92,
 /*  1790 */    91,   90,   89,   94,  597,  378,  379,  380,  381,  382,
 /*  1800 */   383,  384,  385,  386,  387,  388,  389,   39,  371,  597,
 /*  1810 */    30,  377,  597,  203,   30,  165,  138,  101,  263,  165,
 /*  1820 */   597,   52,  597,  132,   24,   43,   36,  597,  342,  195,
 /*  1830 */   597,   95,  597,  338,  597,   28,  597,  391,  369,  360,
 /*  1840 */   349,  347,   93,   92,   91,   90,   89,   94,  597,  597,
 /*  1850 */   378,  379,  380,  381,  382,  383,  384,  385,  386,  387,
 /*  1860 */   388,  389,  353,  597,  132,   24,  125,   96,  117,  342,
 /*  1870 */   138,  101,  263,  124,  123,  597,  429,  132,   24,  408,
 /*  1880 */    36,  429,  342,  195,  408,   95,  109,  429,  597,   28,
 /*  1890 */   408,  391,  369,  360,  349,  347,   93,   92,   91,   90,
 /*  1900 */    89,   94,   30,  597,   96,  597,  118,  191,  115,   98,
 /*  1910 */   395,  597,  597,  116,  119,  597,  597,  162,  344,  323,
 /*  1920 */   147,  155,  153,  172,  138,  101,  263,  121,  597,  113,
 /*  1930 */   597,  395,  597,  597,  114,  120,  597,  264,  162,  344,
 /*  1940 */   323,  147,  155,  153,  170,  171,  173,  143,  185,  186,
 /*  1950 */   156,  278,  597,  132,   24,  262,   36,  597,  342,  195,
 /*  1960 */   597,   95,  597,  597,  597,   28,  597,  391,  369,  360,
 /*  1970 */   349,  347,   93,   92,   91,   90,   89,   94,  118,  597,
 /*  1980 */   115,  597,  395,  597,  597,  116,  119,  597,  597,  162,
 /*  1990 */   344,  323,  147,  155,  153,  170,  171,  179,  597,  597,
 /*  2000 */   138,  101,  263,  597,  597,  597,  597,  132,   24,  597,
 /*  2010 */    36,  597,  342,  195,  597,   95,  597,  597,  597,   28,
 /*  2020 */   207,  391,  369,  360,  349,  347,   93,   92,   91,   90,
 /*  2030 */    89,   94,  118,  597,  115,  597,  395,  597,  597,  116,
 /*  2040 */   119,  597,  597,  162,  344,  323,  147,  155,  153,  170,
 /*  2050 */   171,  180,  597,  597,  138,  101,  597,  597,  597,  597,
 /*  2060 */   597,  132,   24,  597,   36,  597,  342,  195,  597,   95,
 /*  2070 */   597,  597,  597,   28,  215,  391,  369,  360,  349,  347,
 /*  2080 */    93,   92,   91,   90,   89,   94,  118,  597,  115,  597,
 /*  2090 */   395,  597,  597,  116,  119,  597,  597,  162,  344,  323,
 /*  2100 */   147,  155,  153,  170,  171,  183,  597,  597,  138,  101,
 /*  2110 */   121,  597,  113,  597,  395,  597,  597,  114,  120,  597,
 /*  2120 */   264,  162,  344,  323,  147,  155,  153,  170,  171,  173,
 /*  2130 */   143,  185,  186,  156,  278,  597,  132,   24,  359,   36,
 /*  2140 */   597,  342,  195,  597,   95,  597,  597,  597,   28,  200,
 /*  2150 */   391,  369,  360,  349,  347,   93,   92,   91,   90,   89,
 /*  2160 */    94,  597,  118,  597,  115,  597,  395,  597,  597,  116,
 /*  2170 */   119,  597,  597,  162,  344,  323,  147,  155,  153,  170,
 /*  2180 */   171,  184,  597,  138,  101,  597,  597,  597,  597,  597,
 /*  2190 */   132,   24,  597,   36,  277,  342,  195,  597,   95,  597,
 /*  2200 */   597,  597,   28,  597,  391,  369,  360,  349,  347,   93,
 /*  2210 */    92,   91,   90,   89,   94,  118,  597,  115,  597,  395,
 /*  2220 */   597,  597,  116,  119,  597,  597,  162,  344,  323,  147,
 /*  2230 */   155,  153,  170,  171,  175,  597,  597,  138,  101,  121,
 /*  2240 */   597,  113,  597,  395,  597,  597,  114,  120,  597,  279,
 /*  2250 */   162,  344,  323,  147,  155,  153,  170,  171,  173,  143,
 /*  2260 */   185,  186,  156,  278,  597,  132,   24,  280,   36,  597,
 /*  2270 */   342,  195,  597,   95,  597,  597,  597,   28,  202,  391,
 /*  2280 */   369,  360,  349,  347,   93,   92,   91,   90,   89,   94,
 /*  2290 */   597,  118,  597,  115,  597,  395,  597,  597,  116,  119,
 /*  2300 */   597,  597,  162,  344,  323,  147,  155,  153,  170,  171,
 /*  2310 */   182,  597,  138,  101,  597,  597,  597,  597,  597,  132,
 /*  2320 */    24,  597,   36,  597,  342,  195,  597,   95,  133,  597,
 /*  2330 */   597,   28,  597,  391,  369,  360,  349,  347,   93,   92,
 /*  2340 */    91,   90,   89,   94,  118,  597,  115,  597,  395,  597,
 /*  2350 */   597,  116,  119,  597,  597,  162,  344,  323,  147,  155,
 /*  2360 */   153,  170,  174,  597,  597,  597,  138,  101,  118,  597,
 /*  2370 */   115,  597,  395,  597,  597,  116,  119,  597,  214,  162,
 /*  2380 */   344,  323,  147,  155,  153,  170,  171,  173,  143,  185,
 /*  2390 */   186,  156,  278,  118,  597,  115,  597,  135,  597,  597,
 /*  2400 */   116,  119,  118,  597,  115,  597,  395,  597,  597,  116,
 /*  2410 */   119,  597,  194,  162,  344,  323,  147,  155,  153,  170,
 /*  2420 */   171,  173,  143,  185,  186,  156,  278,  118,  597,  115,
 /*  2430 */   597,  395,  597,  597,  116,  119,  597,  213,  162,  344,
 /*  2440 */   323,  147,  155,  153,  170,  171,  173,  143,  185,  186,
 /*  2450 */   156,  278,  597,  597,  597,  118,  597,  115,  597,  395,
 /*  2460 */   597,  597,  116,  119,  597,  169,  162,  344,  323,  147,
 /*  2470 */   155,  153,  170,  171,  173,  143,  185,  186,  156,  278,
 /*  2480 */   118,  597,  115,  597,  395,  597,  597,  116,  119,  597,
 /*  2490 */   190,  162,  344,  323,  147,  155,  153,  170,  171,  173,
 /*  2500 */   143,  185,  186,  156,  278,  118,  597,  115,  597,  395,
 /*  2510 */   597,  597,  116,  119,  597,  240,  162,  344,  323,  147,
 /*  2520 */   155,  153,  170,  171,  173,  143,  185,  186,  156,  278,
 /*  2530 */   132,   24,  597,   36,  597,  342,  195,  597,   95,  597,
 /*  2540 */   597,  597,   28,  597,  391,  369,  360,  349,  347,   93,
 /*  2550 */    92,   91,   90,   89,   94,  118,  597,  115,  597,  395,
 /*  2560 */   597,  597,  116,  119,  597,  597,  162,  344,  323,  147,
 /*  2570 */   155,  152,  597,  597,  597,  597,  597,  138,  101,  118,
 /*  2580 */   597,  115,  597,  395,  597,  597,  116,  119,  597,  210,
 /*  2590 */   162,  344,  323,  147,  155,  153,  170,  171,  173,  143,
 /*  2600 */   185,  186,  156,  278,  118,  597,  115,  597,  395,  597,
 /*  2610 */   597,  116,  119,  597,  223,  162,  344,  323,  147,  155,
 /*  2620 */   153,  170,  171,  173,  143,  185,  186,  156,  278,  597,
 /*  2630 */   597,  118,  597,  115,  597,  395,  597,  597,  116,  119,
 /*  2640 */   597,  244,  162,  344,  323,  147,  155,  153,  170,  171,
 /*  2650 */   173,  143,  185,  186,  156,  278,  118,  597,  115,  597,
 /*  2660 */   395,  597,  597,  116,  119,  597,  118,  333,  115,  597,
 /*  2670 */   395,  597,  597,  116,  119,  597,  232,  162,  344,  323,
 /*  2680 */   147,  155,  153,  170,  171,  173,  143,  185,  186,  156,
 /*  2690 */   278,  118,  597,  115,  597,  395,  597,  597,  116,  119,
 /*  2700 */   597,  305,  162,  344,  323,  147,  155,  153,  170,  171,
 /*  2710 */   173,  143,  185,  186,  156,  278,  118,  597,  115,  597,
 /*  2720 */   395,  597,  597,  116,  119,  597,  245,  162,  344,  323,
 /*  2730 */   147,  155,  153,  170,  171,  173,  143,  185,  186,  156,
 /*  2740 */   278,  118,  597,  115,  597,  395,  597,  597,  116,  119,
 /*  2750 */   597,  238,  162,  344,  323,  147,  155,  153,  170,  171,
 /*  2760 */   173,  143,  185,  186,  156,  278,  118,  597,  115,  597,
 /*  2770 */   395,  597,  597,  116,  119,  597,  272,  162,  344,  323,
 /*  2780 */   147,  155,  153,  170,  171,  173,  143,  185,  186,  156,
 /*  2790 */   278,  118,  597,  115,  597,  395,  597,  597,  116,  119,
 /*  2800 */   597,  189,  162,  344,  323,  147,  155,  153,  170,  171,
 /*  2810 */   173,  143,  185,  186,  156,  278,  118,  597,  115,  597,
 /*  2820 */   395,  597,  597,  116,  119,  597,  211,  162,  344,  323,
 /*  2830 */   147,  155,  153,  170,  171,  173,  143,  185,  186,  156,
 /*  2840 */   278,  118,  597,  115,  597,  395,  597,  597,  116,  119,
 /*  2850 */   597,  199,  162,  344,  323,  147,  155,  153,  170,  171,
 /*  2860 */   173,  143,  185,  186,  156,  278,  118,  597,  115,  597,
 /*  2870 */   395,  597,  597,  116,  119,  597,  212,  162,  344,  323,
 /*  2880 */   147,  155,  153,  170,  171,  173,  143,  185,  186,  156,
 /*  2890 */   278,  118,  597,  115,  597,  395,  597,  597,  116,  119,
 /*  2900 */   597,  270,  162,  344,  323,  147,  155,  153,  170,  171,
 /*  2910 */   173,  143,  185,  186,  156,  278,  118,  597,  115,  597,
 /*  2920 */   395,  597,  597,  116,  119,  597,  243,  162,  344,  323,
 /*  2930 */   147,  155,  153,  170,  171,  173,  143,  185,  186,  156,
 /*  2940 */   278,  118,  597,  115,  597,  395,  597,  597,  116,  119,
 /*  2950 */   597,  597,  162,  344,  323,  147,  155,  153,  170,  171,
 /*  2960 */   173,  143,  185,  188,  132,   24,  118,  597,  115,  342,
 /*  2970 */   395,  597,  597,  116,  119,  597,  597,  337,  391,  369,
 /*  2980 */   360,  349,  347,   93,   92,   91,   90,   89,   94,  597,
 /*  2990 */   118,  597,  115,  597,  395,  597,  597,  116,  119,  597,
 /*  3000 */   597,  162,  344,  323,  147,  157,  597,  118,  597,  115,
 /*  3010 */   597,  395,  597,  597,  116,  119,  597,  597,  162,  344,
 /*  3020 */   323,  147,  160,  118,  597,  115,  597,  395,  597,  597,
 /*  3030 */   116,  119,  597,  597,  162,  344,  323,  148,  118,  597,
 /*  3040 */   115,  597,  395,  597,  597,  116,  119,  597,  597,  162,
 /*  3050 */   344,  323,  145,  118,  597,  115,  597,  395,  597,  597,
 /*  3060 */   116,  119,  597,  597,  162,  344,  313,  118,  597,  115,
 /*  3070 */   597,  395,  597,  597,  116,  119,  597,  597,  162,  344,
 /*  3080 */   318,  118,  597,  115,  597,  395,  597,  597,  116,  119,
 /*  3090 */   597,  597,  162,  344,  315,  597,  118,  597,  115,  597,
 /*  3100 */   395,  597,  597,  116,  119,  597,  597,  162,  344,  311,
 /*  3110 */   118,  597,  115,  597,  395,  597,  597,  116,  119,  597,
 /*  3120 */   118,  341,  115,  597,  241,  597,  597,  116,  119,  118,
 /*  3130 */   597,  115,  597,  242,  597,  597,  116,  119,
};
static const YYCODETYPE yy_lookahead[] = {
 /*     0 */     1,   83,    3,    7,   86,    6,    7,    7,    9,   10,
 /*    10 */    11,   12,   12,   14,   15,   16,   83,   18,   18,   20,
 /*    20 */    21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
 /*    30 */    88,   12,   90,   14,   92,    6,    7,   95,   96,   11,
 /*    40 */    11,   99,  100,  101,  102,  103,  104,  105,  106,  107,
 /*    50 */   108,  109,   53,   54,   55,   40,   41,   42,   43,   44,
 /*    60 */    45,   46,   47,   48,   49,    9,   11,   68,   69,   70,
 /*    70 */    71,   72,   73,   18,   75,   76,   77,   78,   79,    0,
 /*    80 */     1,   53,    3,   13,   14,    6,    7,   17,    9,    6,
 /*    90 */    11,   12,    9,   14,   15,   16,   83,   18,   85,   20,
 /*   100 */    21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
 /*   110 */    88,   55,   90,   88,   92,   90,   13,   95,   96,   16,
 /*   120 */    17,   99,  100,  101,  102,  103,  104,  105,  106,  107,
 /*   130 */   108,    7,   53,   54,   55,   88,   12,   90,    9,   92,
 /*   140 */    25,   26,   95,   96,   74,   16,   99,   68,   69,   70,
 /*   150 */    71,   72,   73,    9,   75,   76,   77,   78,   79,    0,
 /*   160 */     1,   85,    3,   10,   11,    6,    7,    7,    9,   16,
 /*   170 */    11,   12,   12,   14,   15,   16,   83,   18,   18,   20,
 /*   180 */    21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
 /*   190 */    88,   13,   90,   83,   92,   17,   13,   95,   96,   16,
 /*   200 */    17,   99,  100,  101,  102,  103,  104,  105,  106,  107,
 /*   210 */    88,   89,   53,   54,   55,   88,   85,   90,   11,   92,
 /*   220 */    88,   89,   95,   96,  117,   18,   99,   68,   69,   70,
 /*   230 */    71,   72,   73,   11,   75,   76,   77,   78,   79,    1,
 /*   240 */    18,    3,  125,  126,    6,    7,    7,    9,   10,   11,
 /*   250 */    12,   12,   14,   15,   16,   11,   18,   18,   20,   21,
 /*   260 */    22,   23,   24,   25,   26,   27,   28,   29,   30,   88,
 /*   270 */    19,   90,   11,   92,   88,   89,   95,   96,   13,   18,
 /*   280 */    99,  100,  101,  102,  103,  104,  105,  106,  107,    4,
 /*   290 */     5,   53,   54,   55,   88,   55,   90,   14,   92,   27,
 /*   300 */    28,   95,   96,    4,    5,   99,   68,   69,   70,   71,
 /*   310 */    72,   73,   55,   75,   76,   77,   78,   79,    1,   55,
 /*   320 */     3,   52,   53,    6,    7,    7,    9,    9,   11,   12,
 /*   330 */    12,   14,   14,    8,   13,   18,   18,   20,   21,   22,
 /*   340 */    23,   24,   25,   26,   27,   28,   29,   30,   88,   16,
 /*   350 */    90,   16,   92,    8,    8,   95,   96,    8,    8,   99,
 /*   360 */   100,  101,  102,  103,  104,  105,  106,  107,    6,    7,
 /*   370 */    53,   54,   55,   86,   12,   88,    8,   90,   14,   92,
 /*   380 */    18,    6,   95,   96,    9,   68,   69,   70,   71,   72,
 /*   390 */    73,   16,   75,   76,   77,   78,   79,   81,   82,   10,
 /*   400 */    11,   85,    7,   16,   88,   16,   90,   91,   92,   93,
 /*   410 */    16,   95,   96,   16,   16,   99,  100,  101,  102,  103,
 /*   420 */   104,  105,  106,  107,  108,  109,  110,  111,  112,    6,
 /*   430 */     7,    2,  116,   16,   11,  119,  120,  121,    8,  123,
 /*   440 */   124,   16,    8,   20,   21,   22,   23,   24,   87,   88,
 /*   450 */    89,   90,   91,   82,   19,   94,   85,   37,    7,   88,
 /*   460 */    38,   90,   91,   92,   93,   16,   95,   96,    8,    7,
 /*   470 */    99,  100,  101,  102,  103,  104,  105,  106,  107,  108,
 /*   480 */   109,  110,  111,  112,   34,   35,   36,  116,    8,   71,
 /*   490 */   119,  120,  121,   85,  123,  124,   88,   39,   90,   91,
 /*   500 */    92,   93,    7,   95,   96,    8,   14,   99,  100,  101,
 /*   510 */   102,  103,  104,  105,  106,  107,  108,  109,  110,  111,
 /*   520 */   112,   14,    7,    7,  116,    8,   16,  119,  120,  121,
 /*   530 */    16,  123,  124,   50,   12,    6,    7,   51,    9,   85,
 /*   540 */     7,   12,   88,   55,   90,   12,   92,   18,   14,   95,
 /*   550 */    96,   18,   11,   99,  100,  101,  102,  103,  104,  105,
 /*   560 */   106,  107,  108,  109,  110,  111,  112,   19,   19,   19,
 /*   570 */   116,   19,   19,  119,  120,  121,   85,  123,  124,   88,
 /*   580 */    19,   90,    8,   92,   55,   16,   95,   96,   83,   83,
 /*   590 */    99,  100,  101,  102,  103,  104,  105,  106,  107,  108,
 /*   600 */   109,  110,  111,  112,  117,   19,   55,  116,   83,   83,
 /*   610 */   119,  120,  121,   85,  123,  124,   88,   55,   90,   53,
 /*   620 */    92,   13,   85,   95,   96,   10,   83,   99,  100,  101,
 /*   630 */   102,  103,  104,  105,  106,  107,  108,  109,  110,  111,
 /*   640 */   112,   13,   83,   14,  116,   85,  126,  119,  120,  121,
 /*   650 */    85,  123,  124,   88,    9,   90,   85,   92,   85,  127,
 /*   660 */    95,   96,   86,   88,   99,  100,  101,  102,  103,  104,
 /*   670 */   105,  106,  107,  108,  109,  110,  111,  112,   86,   88,
 /*   680 */    85,  116,  127,  127,  119,  120,  121,   85,  123,  124,
 /*   690 */    88,  127,   90,  127,   92,  127,  127,   95,   96,  127,
 /*   700 */   127,   99,  100,  101,  102,  103,  104,  105,  106,  107,
 /*   710 */   108,  109,  110,  111,  112,  127,  127,  127,  116,  127,
 /*   720 */   127,  119,  120,  121,   85,  123,  124,   88,  127,   90,
 /*   730 */   127,   92,  127,  127,   95,   96,  127,  127,   99,  100,
 /*   740 */   101,  102,  103,  104,  105,  106,  107,  108,  109,  110,
 /*   750 */   111,  112,  127,  127,  127,  116,  127,  127,  119,  120,
 /*   760 */   121,   85,  123,  124,   88,  127,   90,  127,   92,  127,
 /*   770 */   127,   95,   96,  127,  127,   99,  100,  101,  102,  103,
 /*   780 */   104,  105,  106,  107,  108,  109,  110,  111,  112,  127,
 /*   790 */   127,  127,  116,  127,  127,  119,  120,  121,   85,  123,
 /*   800 */   124,   88,  127,   90,  127,   92,  127,  127,   95,   96,
 /*   810 */   127,  127,   99,  100,  101,  102,  103,  104,  105,  106,
 /*   820 */   107,  108,  109,  110,  111,  112,  127,  127,  127,  116,
 /*   830 */   127,  127,  119,  120,  121,   85,  123,  124,   88,  127,
 /*   840 */    90,  127,   92,  127,  127,   95,   96,  127,  127,   99,
 /*   850 */   100,  101,  102,  103,  104,  105,  106,  107,  108,  109,
 /*   860 */   110,  111,  112,  127,  127,  127,  116,  127,  127,  119,
 /*   870 */   120,  121,   85,  123,  124,   88,  127,   90,  127,   92,
 /*   880 */   127,  127,   95,   96,  127,  127,   99,  100,  101,  102,
 /*   890 */   103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
 /*   900 */   127,  127,  127,  116,  127,  127,  119,  120,  121,   85,
 /*   910 */   123,  124,   88,  127,   90,  127,   92,  127,  127,   95,
 /*   920 */    96,  127,  127,   99,  100,  101,  102,  103,  104,  105,
 /*   930 */   106,  107,  108,  109,  110,  111,  112,  127,  127,  127,
 /*   940 */   116,  127,  127,  119,  120,  121,   85,  123,  124,   88,
 /*   950 */   127,   90,  127,   92,  127,  127,   95,   96,  127,  127,
 /*   960 */    99,  100,  101,  102,  103,  104,  105,  106,  107,  108,
 /*   970 */   109,  110,  111,  112,  127,  127,  127,  116,  127,  127,
 /*   980 */   119,  120,  121,   85,  123,  124,   88,  127,   90,  127,
 /*   990 */    92,  127,  127,   95,   96,  127,  127,   99,  100,  101,
 /*  1000 */   102,  103,  104,  105,  106,  107,  108,  109,  110,  111,
 /*  1010 */   112,  127,  127,  127,  116,  127,  127,  119,  120,  121,
 /*  1020 */    85,  123,  124,   88,  127,   90,  127,   92,  127,  127,
 /*  1030 */    95,   96,  127,  127,   99,  100,  101,  102,  103,  104,
 /*  1040 */   105,  106,  107,  108,  109,  110,  111,  112,  127,  127,
 /*  1050 */   127,  116,  127,  127,  119,  120,  121,   84,  123,  124,
 /*  1060 */   127,   88,  127,   90,  127,   92,  127,  127,   95,   96,
 /*  1070 */    97,   98,   99,  100,  101,  102,  103,  104,  105,  106,
 /*  1080 */   107,  108,  109,  110,  111,  112,   84,  127,  115,  116,
 /*  1090 */    88,  127,   90,  127,   92,  122,  127,   95,   96,   97,
 /*  1100 */    98,   99,  100,  101,  102,  103,  104,  105,  106,  107,
 /*  1110 */   108,  109,  110,  111,  112,   84,  127,  115,  116,   88,
 /*  1120 */   127,   90,  127,   92,  122,  127,   95,   96,   97,   98,
 /*  1130 */    99,  100,  101,  102,  103,  104,  105,  106,  107,  108,
 /*  1140 */   109,  110,  111,  112,   84,  127,  115,  116,   88,  127,
 /*  1150 */    90,  127,   92,  122,  127,   95,   96,   97,   98,   99,
 /*  1160 */   100,  101,  102,  103,  104,  105,  106,  107,  108,  109,
 /*  1170 */   110,  111,  112,   84,  127,  115,  116,   88,  127,   90,
 /*  1180 */   127,   92,  122,  127,   95,   96,   97,   98,   99,  100,
 /*  1190 */   101,  102,  103,  104,  105,  106,  107,  108,  109,  110,
 /*  1200 */   111,  112,   84,  127,  115,  116,   88,  127,   90,  127,
 /*  1210 */    92,  122,  127,   95,   96,   97,   98,   99,  100,  101,
 /*  1220 */   102,  103,  104,  105,  106,  107,  108,  109,  110,  111,
 /*  1230 */   112,   84,  127,  115,  116,   88,  127,   90,  127,   92,
 /*  1240 */   127,  127,   95,   96,   97,   98,   99,  100,  101,  102,
 /*  1250 */   103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
 /*  1260 */    84,  127,  115,  116,   88,  127,   90,  127,   92,  127,
 /*  1270 */   127,   95,   96,   97,   98,   99,  100,  101,  102,  103,
 /*  1280 */   104,  105,  106,  107,  108,  109,  110,  111,  112,   84,
 /*  1290 */   127,  115,  116,   88,  127,   90,  127,   92,  127,  127,
 /*  1300 */    95,   96,   97,   98,   99,  100,  101,  102,  103,  104,
 /*  1310 */   105,  106,  107,  108,  109,  110,  111,  112,   84,  127,
 /*  1320 */   115,  116,   88,  127,   90,  127,   92,  127,  127,   95,
 /*  1330 */    96,  127,   98,   99,  100,  101,  102,  103,  104,  105,
 /*  1340 */   106,  107,  108,  109,  110,  111,  112,   84,  127,  115,
 /*  1350 */   116,   88,  127,   90,  127,   92,  127,  127,   95,   96,
 /*  1360 */   127,   98,   99,  100,  101,  102,  103,  104,  105,  106,
 /*  1370 */   107,  108,  109,  110,  111,  112,   84,  127,  115,  116,
 /*  1380 */    88,  127,   90,  127,   92,  127,  127,   95,   96,  127,
 /*  1390 */    98,   99,  100,  101,  102,  103,  104,  105,  106,  107,
 /*  1400 */   108,  109,  110,  111,  112,   84,  127,  115,  116,   88,
 /*  1410 */   127,   90,  127,   92,  127,  127,   95,   96,  127,   98,
 /*  1420 */    99,  100,  101,  102,  103,  104,  105,  106,  107,  108,
 /*  1430 */   109,  110,  111,  112,   84,  127,  115,  116,   88,  127,
 /*  1440 */    90,  127,   92,  127,  127,   95,   96,  127,   98,   99,
 /*  1450 */   100,  101,  102,  103,  104,  105,  106,  107,  108,  109,
 /*  1460 */   110,  111,  112,   84,  127,  115,  116,   88,  127,   90,
 /*  1470 */   127,   92,  127,  127,   95,   96,  127,   98,   99,  100,
 /*  1480 */   101,  102,  103,  104,  105,  106,  107,  108,  109,  110,
 /*  1490 */   111,  112,   84,  127,  115,  116,   88,  127,   90,  127,
 /*  1500 */    92,  127,  127,   95,   96,  127,   98,   99,  100,  101,
 /*  1510 */   102,  103,  104,  105,  106,  107,  108,  109,  110,  111,
 /*  1520 */   112,   84,  127,  115,  116,   88,  127,   90,  127,   92,
 /*  1530 */   127,  127,   95,   96,  127,   98,   99,  100,  101,  102,
 /*  1540 */   103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
 /*  1550 */   127,  127,  115,  116,   88,  127,   90,  127,   92,  127,
 /*  1560 */   127,   95,   96,  127,   98,   99,  100,  101,  102,  103,
 /*  1570 */   104,  105,  106,  107,  108,  109,  110,  111,  112,  113,
 /*  1580 */   127,  115,  116,    6,    7,    7,    9,  127,   11,   12,
 /*  1590 */    12,   14,   15,  127,  127,   18,   18,   20,   21,   22,
 /*  1600 */    23,   24,   25,   26,   27,   28,   29,   30,   88,  127,
 /*  1610 */    90,  127,   92,  127,  127,   95,   96,  127,  127,   99,
 /*  1620 */   100,  101,  102,  103,  104,  105,  106,  107,  127,  127,
 /*  1630 */    53,   54,   55,   88,  127,   90,  127,   92,  127,  127,
 /*  1640 */    95,   96,  127,   98,   99,  100,  101,  102,  103,  104,
 /*  1650 */   105,  106,  107,  108,  109,  110,  111,  112,  127,  114,
 /*  1660 */   127,    6,    7,  118,    9,  127,   11,   12,  127,   14,
 /*  1670 */   127,   16,  127,   18,  127,   20,   21,   22,   23,   24,
 /*  1680 */    25,   26,   27,   28,   29,   30,  127,   88,   89,   90,
 /*  1690 */    91,  127,   88,   94,   90,  127,   92,   13,   14,   95,
 /*  1700 */    96,   17,  127,   99,  100,  101,  102,  103,   53,   54,
 /*  1710 */    55,   30,   31,   32,   33,    6,    7,    8,    9,  127,
 /*  1720 */    11,   12,  127,   14,  127,  127,  127,   18,  127,   20,
 /*  1730 */    21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
 /*  1740 */    56,   57,   58,   59,   60,   61,   62,   63,   64,   65,
 /*  1750 */    66,   67,   13,  127,  127,  127,   17,  127,   74,    6,
 /*  1760 */     7,  127,   53,   54,   55,   12,  127,    6,    7,    6,
 /*  1770 */     7,   18,    9,   12,   11,   12,  127,   14,  127,   18,
 /*  1780 */   127,   18,   19,   20,   21,   22,   23,   24,   25,   26,
 /*  1790 */    27,   28,   29,   30,  127,   56,   57,   58,   59,   60,
 /*  1800 */    61,   62,   63,   64,   65,   66,   67,   13,   55,  127,
 /*  1810 */     7,   17,  127,    6,    7,   12,   53,   54,   55,   12,
 /*  1820 */   127,   18,  127,    6,    7,   18,    9,  127,   11,   12,
 /*  1830 */   127,   14,  127,   16,  127,   18,  127,   20,   21,   22,
 /*  1840 */    23,   24,   25,   26,   27,   28,   29,   30,  127,  127,
 /*  1850 */    56,   57,   58,   59,   60,   61,   62,   63,   64,   65,
 /*  1860 */    66,   67,   55,  127,    6,    7,   88,    9,   90,   11,
 /*  1870 */    53,   54,   55,   95,   96,  127,    7,    6,    7,    7,
 /*  1880 */     9,   12,   11,   12,   12,   14,   15,   18,  127,   18,
 /*  1890 */    18,   20,   21,   22,   23,   24,   25,   26,   27,   28,
 /*  1900 */    29,   30,    7,  127,    9,  127,   88,   12,   90,   14,
 /*  1910 */    92,  127,  127,   95,   96,  127,  127,   99,  100,  101,
 /*  1920 */   102,  103,  104,  105,   53,   54,   55,   88,  127,   90,
 /*  1930 */   127,   92,  127,  127,   95,   96,  127,   98,   99,  100,
 /*  1940 */   101,  102,  103,  104,  105,  106,  107,  108,  109,  110,
 /*  1950 */   111,  112,  127,    6,    7,  116,    9,  127,   11,   12,
 /*  1960 */   127,   14,  127,  127,  127,   18,  127,   20,   21,   22,
 /*  1970 */    23,   24,   25,   26,   27,   28,   29,   30,   88,  127,
 /*  1980 */    90,  127,   92,  127,  127,   95,   96,  127,  127,   99,
 /*  1990 */   100,  101,  102,  103,  104,  105,  106,  107,  127,  127,
 /*  2000 */    53,   54,   55,  127,  127,  127,  127,    6,    7,  127,
 /*  2010 */     9,  127,   11,   12,  127,   14,  127,  127,  127,   18,
 /*  2020 */    19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
 /*  2030 */    29,   30,   88,  127,   90,  127,   92,  127,  127,   95,
 /*  2040 */    96,  127,  127,   99,  100,  101,  102,  103,  104,  105,
 /*  2050 */   106,  107,  127,  127,   53,   54,  127,  127,  127,  127,
 /*  2060 */   127,    6,    7,  127,    9,  127,   11,   12,  127,   14,
 /*  2070 */   127,  127,  127,   18,   19,   20,   21,   22,   23,   24,
 /*  2080 */    25,   26,   27,   28,   29,   30,   88,  127,   90,  127,
 /*  2090 */    92,  127,  127,   95,   96,  127,  127,   99,  100,  101,
 /*  2100 */   102,  103,  104,  105,  106,  107,  127,  127,   53,   54,
 /*  2110 */    88,  127,   90,  127,   92,  127,  127,   95,   96,  127,
 /*  2120 */    98,   99,  100,  101,  102,  103,  104,  105,  106,  107,
 /*  2130 */   108,  109,  110,  111,  112,  127,    6,    7,  116,    9,
 /*  2140 */   127,   11,   12,  127,   14,  127,  127,  127,   18,   19,
 /*  2150 */    20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
 /*  2160 */    30,  127,   88,  127,   90,  127,   92,  127,  127,   95,
 /*  2170 */    96,  127,  127,   99,  100,  101,  102,  103,  104,  105,
 /*  2180 */   106,  107,  127,   53,   54,  127,  127,  127,  127,  127,
 /*  2190 */     6,    7,  127,    9,   10,   11,   12,  127,   14,  127,
 /*  2200 */   127,  127,   18,  127,   20,   21,   22,   23,   24,   25,
 /*  2210 */    26,   27,   28,   29,   30,   88,  127,   90,  127,   92,
 /*  2220 */   127,  127,   95,   96,  127,  127,   99,  100,  101,  102,
 /*  2230 */   103,  104,  105,  106,  107,  127,  127,   53,   54,   88,
 /*  2240 */   127,   90,  127,   92,  127,  127,   95,   96,  127,   98,
 /*  2250 */    99,  100,  101,  102,  103,  104,  105,  106,  107,  108,
 /*  2260 */   109,  110,  111,  112,  127,    6,    7,  116,    9,  127,
 /*  2270 */    11,   12,  127,   14,  127,  127,  127,   18,   19,   20,
 /*  2280 */    21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
 /*  2290 */   127,   88,  127,   90,  127,   92,  127,  127,   95,   96,
 /*  2300 */   127,  127,   99,  100,  101,  102,  103,  104,  105,  106,
 /*  2310 */   107,  127,   53,   54,  127,  127,  127,  127,  127,    6,
 /*  2320 */     7,  127,    9,  127,   11,   12,  127,   14,   15,  127,
 /*  2330 */   127,   18,  127,   20,   21,   22,   23,   24,   25,   26,
 /*  2340 */    27,   28,   29,   30,   88,  127,   90,  127,   92,  127,
 /*  2350 */   127,   95,   96,  127,  127,   99,  100,  101,  102,  103,
 /*  2360 */   104,  105,  106,  127,  127,  127,   53,   54,   88,  127,
 /*  2370 */    90,  127,   92,  127,  127,   95,   96,  127,   98,   99,
 /*  2380 */   100,  101,  102,  103,  104,  105,  106,  107,  108,  109,
 /*  2390 */   110,  111,  112,   88,  127,   90,  127,   92,  127,  127,
 /*  2400 */    95,   96,   88,  127,   90,  127,   92,  127,  127,   95,
 /*  2410 */    96,  127,   98,   99,  100,  101,  102,  103,  104,  105,
 /*  2420 */   106,  107,  108,  109,  110,  111,  112,   88,  127,   90,
 /*  2430 */   127,   92,  127,  127,   95,   96,  127,   98,   99,  100,
 /*  2440 */   101,  102,  103,  104,  105,  106,  107,  108,  109,  110,
 /*  2450 */   111,  112,  127,  127,  127,   88,  127,   90,  127,   92,
 /*  2460 */   127,  127,   95,   96,  127,   98,   99,  100,  101,  102,
 /*  2470 */   103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
 /*  2480 */    88,  127,   90,  127,   92,  127,  127,   95,   96,  127,
 /*  2490 */    98,   99,  100,  101,  102,  103,  104,  105,  106,  107,
 /*  2500 */   108,  109,  110,  111,  112,   88,  127,   90,  127,   92,
 /*  2510 */   127,  127,   95,   96,  127,   98,   99,  100,  101,  102,
 /*  2520 */   103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
 /*  2530 */     6,    7,  127,    9,  127,   11,   12,  127,   14,  127,
 /*  2540 */   127,  127,   18,  127,   20,   21,   22,   23,   24,   25,
 /*  2550 */    26,   27,   28,   29,   30,   88,  127,   90,  127,   92,
 /*  2560 */   127,  127,   95,   96,  127,  127,   99,  100,  101,  102,
 /*  2570 */   103,  104,  127,  127,  127,  127,  127,   53,   54,   88,
 /*  2580 */   127,   90,  127,   92,  127,  127,   95,   96,  127,   98,
 /*  2590 */    99,  100,  101,  102,  103,  104,  105,  106,  107,  108,
 /*  2600 */   109,  110,  111,  112,   88,  127,   90,  127,   92,  127,
 /*  2610 */   127,   95,   96,  127,   98,   99,  100,  101,  102,  103,
 /*  2620 */   104,  105,  106,  107,  108,  109,  110,  111,  112,  127,
 /*  2630 */   127,   88,  127,   90,  127,   92,  127,  127,   95,   96,
 /*  2640 */   127,   98,   99,  100,  101,  102,  103,  104,  105,  106,
 /*  2650 */   107,  108,  109,  110,  111,  112,   88,  127,   90,  127,
 /*  2660 */    92,  127,  127,   95,   96,  127,   88,   99,   90,  127,
 /*  2670 */    92,  127,  127,   95,   96,  127,   98,   99,  100,  101,
 /*  2680 */   102,  103,  104,  105,  106,  107,  108,  109,  110,  111,
 /*  2690 */   112,   88,  127,   90,  127,   92,  127,  127,   95,   96,
 /*  2700 */   127,   98,   99,  100,  101,  102,  103,  104,  105,  106,
 /*  2710 */   107,  108,  109,  110,  111,  112,   88,  127,   90,  127,
 /*  2720 */    92,  127,  127,   95,   96,  127,   98,   99,  100,  101,
 /*  2730 */   102,  103,  104,  105,  106,  107,  108,  109,  110,  111,
 /*  2740 */   112,   88,  127,   90,  127,   92,  127,  127,   95,   96,
 /*  2750 */   127,   98,   99,  100,  101,  102,  103,  104,  105,  106,
 /*  2760 */   107,  108,  109,  110,  111,  112,   88,  127,   90,  127,
 /*  2770 */    92,  127,  127,   95,   96,  127,   98,   99,  100,  101,
 /*  2780 */   102,  103,  104,  105,  106,  107,  108,  109,  110,  111,
 /*  2790 */   112,   88,  127,   90,  127,   92,  127,  127,   95,   96,
 /*  2800 */   127,   98,   99,  100,  101,  102,  103,  104,  105,  106,
 /*  2810 */   107,  108,  109,  110,  111,  112,   88,  127,   90,  127,
 /*  2820 */    92,  127,  127,   95,   96,  127,   98,   99,  100,  101,
 /*  2830 */   102,  103,  104,  105,  106,  107,  108,  109,  110,  111,
 /*  2840 */   112,   88,  127,   90,  127,   92,  127,  127,   95,   96,
 /*  2850 */   127,   98,   99,  100,  101,  102,  103,  104,  105,  106,
 /*  2860 */   107,  108,  109,  110,  111,  112,   88,  127,   90,  127,
 /*  2870 */    92,  127,  127,   95,   96,  127,   98,   99,  100,  101,
 /*  2880 */   102,  103,  104,  105,  106,  107,  108,  109,  110,  111,
 /*  2890 */   112,   88,  127,   90,  127,   92,  127,  127,   95,   96,
 /*  2900 */   127,   98,   99,  100,  101,  102,  103,  104,  105,  106,
 /*  2910 */   107,  108,  109,  110,  111,  112,   88,  127,   90,  127,
 /*  2920 */    92,  127,  127,   95,   96,  127,   98,   99,  100,  101,
 /*  2930 */   102,  103,  104,  105,  106,  107,  108,  109,  110,  111,
 /*  2940 */   112,   88,  127,   90,  127,   92,  127,  127,   95,   96,
 /*  2950 */   127,  127,   99,  100,  101,  102,  103,  104,  105,  106,
 /*  2960 */   107,  108,  109,  110,    6,    7,   88,  127,   90,   11,
 /*  2970 */    92,  127,  127,   95,   96,  127,  127,   99,   20,   21,
 /*  2980 */    22,   23,   24,   25,   26,   27,   28,   29,   30,  127,
 /*  2990 */    88,  127,   90,  127,   92,  127,  127,   95,   96,  127,
 /*  3000 */   127,   99,  100,  101,  102,  103,  127,   88,  127,   90,
 /*  3010 */   127,   92,  127,  127,   95,   96,  127,  127,   99,  100,
 /*  3020 */   101,  102,  103,   88,  127,   90,  127,   92,  127,  127,
 /*  3030 */    95,   96,  127,  127,   99,  100,  101,  102,   88,  127,
 /*  3040 */    90,  127,   92,  127,  127,   95,   96,  127,  127,   99,
 /*  3050 */   100,  101,  102,   88,  127,   90,  127,   92,  127,  127,
 /*  3060 */    95,   96,  127,  127,   99,  100,  101,   88,  127,   90,
 /*  3070 */   127,   92,  127,  127,   95,   96,  127,  127,   99,  100,
 /*  3080 */   101,   88,  127,   90,  127,   92,  127,  127,   95,   96,
 /*  3090 */   127,  127,   99,  100,  101,  127,   88,  127,   90,  127,
 /*  3100 */    92,  127,  127,   95,   96,  127,  127,   99,  100,  101,
 /*  3110 */    88,  127,   90,  127,   92,  127,  127,   95,   96,  127,
 /*  3120 */    88,   99,   90,  127,   92,  127,  127,   95,   96,   88,
 /*  3130 */   127,   90,  127,   92,  127,  127,   95,   96,
};
#define YY_SHIFT_USE_DFLT (-5)
#define YY_SHIFT_MAX 248
static const short yy_shift_ofst[] = {
 /*     0 */   159,   -1,  238,   79,  317,  317,  317,  317,  317,  317,
 /*    10 */   317,  317,  317,  317,  317,  317,  317,  317, 1577, 1871,
 /*    20 */  1577, 1577, 1577, 1947, 1947, 1947, 1947, 1817, 1763, 1655,
 /*    30 */  1709, 1947, 1947, 1947, 1947, 1947, 2184, 1947, 1947, 1947,
 /*    40 */  2130, 2055, 2001, 2259, 2313, 2524, 2524, 2524, 2524, 2524,
 /*    50 */  2524, 2524, 2524, 2524, 2524, 2524, 2524, 2524, 2524, 2524,
 /*    60 */  2524, 2524, 2524, 2524, 2958, 2958, 2958, 2958, 2958, 2958,
 /*    70 */  2958, 2958, 2958, 2958, 2958, 2958, 2958, 2958, 2958, 2958,
 /*    80 */  2958, 2958, 2958, 2958, 2958, 2958, 2958, 2958, 2958,  423,
 /*    90 */   423,  423,  423,  423,  423, 1858,  153,  389,   29,   29,
 /*   100 */    29,   29,  529,  318, 1895,   28,  299,  244,  244,  244,
 /*   110 */  1684, 1794, 1739, 1753, 1807,  362, 1761,  160,    0,  239,
 /*   120 */   533, 1578,  375,  239, 1803,    0,   83,  124,  129,   56,
 /*   130 */   285,  144,   -4,  244,  645,  645,  244,  144,   -4,  144,
 /*   140 */    -4,   -4,  144,   15,   15, 1681,   70, 1681, 1681,  103,
 /*   150 */   183, 1869,  450,  450, 1872,  272,  269,  272,  272,  178,
 /*   160 */   272,   55,  115,   19,  207,  261,  222,  429,  430,  435,
 /*   170 */   420,  422,  420,  458,  422,  458,  458,  458,  458,  458,
 /*   180 */   458,  458,  458,  458,  458,  483,  486,  483,  486,  534,
 /*   190 */   552,  541,  522,  569,  586,  566,  615,  629,  265,  283,
 /*   200 */   257,  321,  264,  240,  251,  628,  608,  562,  551,  574,
 /*   210 */   553,  561,  549,  550,  548,  488,  522,  514,  510,  516,
 /*   220 */   517,  515,  497,  507,  492,  495,  480,  418,  462,  460,
 /*   230 */   449,  451,  434,  425,  417,  398,  397,  394,  387,  395,
 /*   240 */   364,  368,  350,  349,  346,  345,  335,  333,  325,
};
#define YY_REDUCE_USE_DFLT (-83)
#define YY_REDUCE_MAX 142
static const short yy_reduce_ofst[] = {
 /*     0 */   316,  371,  408,  408,  602,  565,  528,  491,  454,  935,
 /*    10 */   898,  861,  824,  787,  750,  713,  676,  639, 1089, 1002,
 /*    20 */  1060, 1031,  973, 1118, 1176, 1147, 1205, 1408, 1466, 1263,
 /*    30 */  1379, 1292, 1321, 1350, 1234, 1437, 1545, 2022, 2151, 1839,
 /*    40 */  2314, 2339, 2367, 2392, 2417, 2491, 2516, 2367, 2543, 2578,
 /*    50 */  2603, 2339, 2392, 2280, 2628, 2653, 2314, 2678, 2703, 2728,
 /*    60 */  2753, 2778, 2803, 2828, 2853,  -58,   22,  102, 2074, 1998,
 /*    70 */  2203, 2127,  181,  260, 1520, 1890, 1944, 2256, 1818, 2467,
 /*    80 */  2902, 1604, 2919, 2935, 2950, 3008, 2993, 2979, 2965, 2568,
 /*    90 */  2878, 3022,   47,  127,  206,  287,  361, 1599, 2305, 3032,
 /*   100 */  3041, 1778,   13,  -82,  -82,   25,  117,  186,  132,  122,
 /*   110 */   107,  107,  487,  506,  505,  506,  505,  506,  525,  526,
 /*   120 */   526,  525,  537,  543,  505,  559,  560,  525,  571,  571,
 /*   130 */   520,  573,   93,  575,  576,  592,  591,  595,  -67,   76,
 /*   140 */    93,  110,  131,
};
static const YYACTIONTYPE yy_default[] = {
 /*     0 */   595,  595,  595,  595,  595,  595,  595,  595,  595,  595,
 /*    10 */   595,  595,  595,  595,  595,  595,  595,  595,  595,  595,
 /*    20 */   595,  595,  595,  595,  595,  595,  595,  595,  595,  595,
 /*    30 */   595,  595,  595,  595,  595,  595,  595,  544,  595,  595,
 /*    40 */   595,  595,  595,  595,  595,  595,  595,  595,  595,  595,
 /*    50 */   595,  595,  595,  595,  595,  595,  595,  595,  595,  595,
 /*    60 */   549,  595,  595,  595,  595,  595,  595,  595,  595,  595,
 /*    70 */   595,  595,  595,  595,  595,  595,  595,  595,  595,  595,
 /*    80 */   595,  595,  595,  595,  595,  595,  595,  595,  595,  595,
 /*    90 */   595,  595,  595,  595,  595,  595,  595,  595,  595,  595,
 /*   100 */   595,  595,  444,  442,  406,  595,  595,  595,  595,  595,
 /*   110 */   524,  524,  553,  444,  445,  444,  445,  595,  442,  443,
 /*   120 */   443,  442,  595,  595,  595,  595,  595,  595,  595,  446,
 /*   130 */   581,  595,  595,  595,  595,  595,  595,  595,  595,  595,
 /*   140 */   559,  595,  595,  493,  494,  470,  595,  469,  471,  595,
 /*   150 */   595,  502,  477,  476,  501,  472,  499,  475,  473,  595,
 /*   160 */   474,  595,  454,  595,  595,  595,  595,  562,  595,  595,
 /*   170 */   478,  480,  479,  482,  481,  483,  484,  485,  486,  487,
 /*   180 */   488,  489,  490,  491,  492,  495,  497,  496,  498,  595,
 /*   190 */   595,  595,  407,  595,  595,  595,  595,  595,  548,  595,
 /*   200 */   595,  524,  595,  447,  595,  543,  541,  595,  446,  595,
 /*   210 */   595,  595,  595,  595,  595,  595,  406,  595,  595,  595,
 /*   220 */   595,  595,  595,  595,  595,  595,  595,  595,  595,  595,
 /*   230 */   595,  595,  595,  595,  595,  595,  595,  595,  595,  595,
 /*   240 */   595,  595,  595,  595,  595,  595,  595,  595,  595,  447,
 /*   250 */   434,  446,  435,  432,  439,  431,  412,  573,  519,  411,
 /*   260 */   523,  413,  525,  514,  513,  414,  512,  415,  522,  429,
 /*   270 */   547,  416,  546,  586,  417,  511,  550,  510,  509,  551,
 /*   280 */   554,  508,  556,  552,  555,  560,  588,  561,  436,  507,
 /*   290 */   557,  441,  423,  422,  558,  582,  410,  409,  403,  563,
 /*   300 */   587,  402,  428,  438,  564,  500,  592,  565,  433,  566,
 /*   310 */   570,  468,  427,  467,  567,  466,  426,  408,  465,  593,
 /*   320 */   405,  568,  571,  464,  463,  462,  399,  461,  569,  594,
 /*   330 */   574,  398,  575,  460,  576,  572,  577,  459,  578,  589,
 /*   340 */   579,  458,  404,  580,  457,  456,  455,  453,  583,  452,
 /*   350 */   521,  590,  518,  516,  503,  584,  504,  401,  506,  545,
 /*   360 */   451,  542,  505,  424,  425,  419,  418,  591,  520,  450,
 /*   370 */   517,  515,  400,  430,  420,  421,  527,  528,  529,  530,
 /*   380 */   531,  532,  533,  534,  535,  536,  537,  538,  539,  540,
 /*   390 */   526,  449,  440,  585,  437,  448,
};
#define YY_SZ_ACTTAB (int)(sizeof(yy_action)/sizeof(yy_action[0]))

/* The next table maps tokens into fallback tokens.  If a construct
** like the following:
** 
**      %fallback ID X Y Z.
**
** appears in the grammar, then ID becomes a fallback token for X, Y,
** and Z.  Whenever one of the tokens X, Y, or Z is input to the parser
** but it does not parse, the type of the token is changed to ID and
** the parse is retried before an error is thrown.
*/
#ifdef YYFALLBACK
static const YYCODETYPE yyFallback[] = {
};
#endif /* YYFALLBACK */

/* The following structure represents a single element of the
** parser's stack.  Information stored includes:
**
**   +  The state number for the parser at this level of the stack.
**
**   +  The value of the token stored at this level of the stack.
**      (In other words, the "major" token.)
**
**   +  The semantic value stored at this level of the stack.  This is
**      the information used by the action routines in the grammar.
**      It is sometimes called the "minor" token.
*/
struct yyStackEntry {
  YYACTIONTYPE stateno;  /* The state-number */
  YYCODETYPE major;      /* The major token value.  This is the code
                         ** number for the token at this stack level */
  YYMINORTYPE minor;     /* The user-supplied minor token value.  This
                         ** is the value of the token  */
};
typedef struct yyStackEntry yyStackEntry;

/* The state of the parser is completely contained in an instance of
** the following structure */
struct yyParser {
  int yyidx;                    /* Index of top element in stack */
#ifdef YYTRACKMAXSTACKDEPTH
  int yyidxMax;                 /* Maximum value of yyidx */
#endif
  int yyerrcnt;                 /* Shifts left before out of the error */
  XecParseARG_SDECL                /* A place to hold %extra_argument */
#if YYSTACKDEPTH<=0
  int yystksz;                  /* Current side of the stack */
  yyStackEntry *yystack;        /* The parser's stack */
#else
  yyStackEntry yystack[YYSTACKDEPTH];  /* The parser's stack */
#endif
};
typedef struct yyParser yyParser;

#ifndef NDEBUG
#include <stdio.h>
static FILE *yyTraceFILE = 0;
static char *yyTracePrompt = 0;
#endif /* NDEBUG */

#ifndef NDEBUG
/* 
** Turn parser tracing on by giving a stream to which to write the trace
** and a prompt to preface each trace message.  Tracing is turned off
** by making either argument NULL 
**
** Inputs:
** <ul>
** <li> A FILE* to which trace output should be written.
**      If NULL, then tracing is turned off.
** <li> A prefix string written at the beginning of every
**      line of trace output.  If NULL, then tracing is
**      turned off.
** </ul>
**
** Outputs:
** None.
*/
void XecParseTrace(FILE *TraceFILE, char *zTracePrompt){
  yyTraceFILE = TraceFILE;
  yyTracePrompt = zTracePrompt;
  if( yyTraceFILE==0 ) yyTracePrompt = 0;
  else if( yyTracePrompt==0 ) yyTraceFILE = 0;
}
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing shifts, the names of all terminals and nonterminals
** are required.  The following table supplies these names */
static const char *const yyTokenName[] = { 
  "$",             "IF",            "ELSE",          "TRY",         
  "CATCH",         "FINALLY",       "YIELD",         "LPN",         
  "RPN",           "LBR",           "RBR",           "IDENTIFIER",  
  "PERIOD",        "COMMA",         "COLON",         "VAR",         
  "SEMICOLON",     "ASSIGN",        "LSQ",           "RSQ",         
  "NUMBER",        "STRING",        "TRUE",          "FALSE",       
  "NULL",          "INCREMENT",     "DECREMENT",     "PLUS",        
  "MINUS",         "XMARK",         "TILDE",         "ASTERISK",    
  "SOLIDUS",       "PERCENT",       "LSHIFT",        "RSHIFT",      
  "URSHIFT",       "AMPERSAND",     "CARET",         "VBAR",        
  "EQUAL",         "NOTEQUAL",      "LESS",          "GREATER",     
  "LESSEQUAL",     "GREATEREQUAL",  "IN",            "NOTIN",       
  "IS",            "NOTIS",         "LOGICAND",      "LOGICXOR",    
  "LOGICOR",       "QMARK",         "NEW",           "ELLIPSIS",    
  "MULASSIGN",     "DIVASSIGN",     "MODASSIGN",     "INTDIVASSIGN",
  "ADDASSIGN",     "SUBASSIGN",     "LSHIFTASSIGN",  "RSHIFTASSIGN",
  "URSHIFTASSIGN",  "BITANDASSIGN",  "BITXORASSIGN",  "BITORASSIGN", 
  "SWITCH",        "CASE",          "DEFAULT",       "WHILE",       
  "DO",            "FOR",           "EACHKEY",       "CONTINUE",    
  "BREAK",         "RETURN",        "USING",         "THROW",       
  "error",         "script",        "stmt_list",     "expr_paren",  
  "expr_list",     "stmt_brace",    "odecl_brace",   "odecl_list",  
  "name",          "name_list",     "proto",         "decl_common", 
  "expr_simple",   "decl",          "odecl",         "expr_call",   
  "expr_postfix",  "expr_assign",   "expr_value",    "expr_basic",  
  "expr_suffix",   "expr_unary",    "expr_mul",      "expr_add",    
  "expr_shift",    "expr_bitand",   "expr_bitxor",   "expr_bitor",  
  "expr_compare",  "expr_and",      "expr_xor",      "expr_or",     
  "expr_nolbr",    "value_list",    "keyval_list",   "expr_lbody",  
  "expr_final",    "assign_op",     "keyval_lbody",  "sexpr_lbody", 
  "sexpr_list",    "sexpr_assign",  "condition",     "stmt_yield",  
  "stmt",          "catch_list",    "catch",       
};
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing reduce actions, the names of all rules are required.
*/
static const char *const yyRuleName[] = {
 /*   0 */ "script ::=",
 /*   1 */ "script ::= stmt_list",
 /*   2 */ "expr_paren ::= LPN RPN",
 /*   3 */ "expr_paren ::= LPN expr_list RPN",
 /*   4 */ "stmt_brace ::= LBR RBR",
 /*   5 */ "stmt_brace ::= LBR stmt_list RBR",
 /*   6 */ "odecl_brace ::= LBR RBR",
 /*   7 */ "odecl_brace ::= LBR odecl_list RBR",
 /*   8 */ "name ::= IDENTIFIER",
 /*   9 */ "name ::= name PERIOD IDENTIFIER",
 /*  10 */ "name_list ::= name",
 /*  11 */ "name_list ::= name_list COMMA name",
 /*  12 */ "proto ::= name expr_paren",
 /*  13 */ "decl_common ::= name odecl_brace",
 /*  14 */ "decl_common ::= name COLON expr_simple odecl_brace",
 /*  15 */ "decl_common ::= proto stmt_brace",
 /*  16 */ "decl_common ::= proto YIELD stmt_brace",
 /*  17 */ "decl ::= decl_common",
 /*  18 */ "decl ::= PERIOD proto stmt_brace",
 /*  19 */ "decl ::= PERIOD proto YIELD stmt_brace",
 /*  20 */ "decl ::= VAR name_list SEMICOLON",
 /*  21 */ "decl ::= VAR name_list ASSIGN expr_list SEMICOLON",
 /*  22 */ "odecl ::= SEMICOLON",
 /*  23 */ "odecl ::= decl_common",
 /*  24 */ "odecl ::= proto SEMICOLON",
 /*  25 */ "odecl ::= proto YIELD SEMICOLON",
 /*  26 */ "odecl ::= name_list SEMICOLON",
 /*  27 */ "odecl ::= name_list ASSIGN expr_list SEMICOLON",
 /*  28 */ "odecl_list ::= odecl",
 /*  29 */ "odecl_list ::= odecl_list odecl",
 /*  30 */ "expr_call ::= YIELD expr_paren",
 /*  31 */ "expr_call ::= proto expr_paren",
 /*  32 */ "expr_call ::= expr_call expr_paren",
 /*  33 */ "expr_call ::= expr_postfix expr_paren",
 /*  34 */ "expr_postfix ::= LPN expr_assign RPN",
 /*  35 */ "expr_postfix ::= name PERIOD LSQ expr_value RSQ",
 /*  36 */ "expr_postfix ::= name LSQ expr_value RSQ",
 /*  37 */ "expr_postfix ::= proto PERIOD IDENTIFIER",
 /*  38 */ "expr_postfix ::= proto PERIOD LSQ expr_value RSQ",
 /*  39 */ "expr_postfix ::= proto LSQ expr_value RSQ",
 /*  40 */ "expr_postfix ::= expr_call PERIOD IDENTIFIER",
 /*  41 */ "expr_postfix ::= expr_call PERIOD LSQ expr_value RSQ",
 /*  42 */ "expr_postfix ::= expr_call LSQ expr_value RSQ",
 /*  43 */ "expr_postfix ::= expr_postfix PERIOD IDENTIFIER",
 /*  44 */ "expr_postfix ::= expr_postfix PERIOD LSQ expr_value RSQ",
 /*  45 */ "expr_postfix ::= expr_postfix LSQ expr_value RSQ",
 /*  46 */ "expr_simple ::= name",
 /*  47 */ "expr_simple ::= expr_postfix",
 /*  48 */ "expr_simple ::= proto",
 /*  49 */ "expr_simple ::= expr_call",
 /*  50 */ "expr_simple ::= proto YIELD",
 /*  51 */ "expr_simple ::= expr_call YIELD",
 /*  52 */ "expr_basic ::= expr_simple",
 /*  53 */ "expr_basic ::= NUMBER",
 /*  54 */ "expr_basic ::= STRING",
 /*  55 */ "expr_basic ::= TRUE",
 /*  56 */ "expr_basic ::= FALSE",
 /*  57 */ "expr_basic ::= NULL",
 /*  58 */ "expr_suffix ::= expr_basic",
 /*  59 */ "expr_suffix ::= expr_basic INCREMENT",
 /*  60 */ "expr_suffix ::= expr_basic DECREMENT",
 /*  61 */ "expr_unary ::= expr_suffix",
 /*  62 */ "expr_unary ::= PLUS expr_basic",
 /*  63 */ "expr_unary ::= MINUS expr_basic",
 /*  64 */ "expr_unary ::= XMARK expr_basic",
 /*  65 */ "expr_unary ::= TILDE expr_basic",
 /*  66 */ "expr_unary ::= INCREMENT expr_basic",
 /*  67 */ "expr_unary ::= DECREMENT expr_basic",
 /*  68 */ "expr_mul ::= expr_unary",
 /*  69 */ "expr_mul ::= expr_mul ASTERISK expr_unary",
 /*  70 */ "expr_mul ::= expr_mul SOLIDUS expr_unary",
 /*  71 */ "expr_mul ::= expr_mul PERCENT expr_unary",
 /*  72 */ "expr_mul ::= expr_mul TILDE expr_unary",
 /*  73 */ "expr_add ::= expr_mul",
 /*  74 */ "expr_add ::= expr_add PLUS expr_mul",
 /*  75 */ "expr_add ::= expr_add MINUS expr_mul",
 /*  76 */ "expr_shift ::= expr_add",
 /*  77 */ "expr_shift ::= expr_shift LSHIFT expr_add",
 /*  78 */ "expr_shift ::= expr_shift RSHIFT expr_add",
 /*  79 */ "expr_shift ::= expr_shift URSHIFT expr_add",
 /*  80 */ "expr_bitand ::= expr_shift",
 /*  81 */ "expr_bitand ::= expr_bitand AMPERSAND expr_shift",
 /*  82 */ "expr_bitxor ::= expr_bitand",
 /*  83 */ "expr_bitxor ::= expr_bitxor CARET expr_bitand",
 /*  84 */ "expr_bitor ::= expr_bitxor",
 /*  85 */ "expr_bitor ::= expr_bitor VBAR expr_bitxor",
 /*  86 */ "expr_compare ::= expr_bitor",
 /*  87 */ "expr_compare ::= expr_compare EQUAL expr_bitor",
 /*  88 */ "expr_compare ::= expr_compare NOTEQUAL expr_bitor",
 /*  89 */ "expr_compare ::= expr_compare LESS expr_bitor",
 /*  90 */ "expr_compare ::= expr_compare GREATER expr_bitor",
 /*  91 */ "expr_compare ::= expr_compare LESSEQUAL expr_bitor",
 /*  92 */ "expr_compare ::= expr_compare GREATEREQUAL expr_bitor",
 /*  93 */ "expr_compare ::= expr_compare IN expr_bitor",
 /*  94 */ "expr_compare ::= expr_compare NOTIN expr_bitor",
 /*  95 */ "expr_compare ::= expr_compare IS expr_bitor",
 /*  96 */ "expr_compare ::= expr_compare NOTIS expr_bitor",
 /*  97 */ "expr_and ::= expr_compare",
 /*  98 */ "expr_and ::= expr_and LOGICAND expr_compare",
 /*  99 */ "expr_xor ::= expr_and",
 /* 100 */ "expr_xor ::= expr_xor LOGICXOR expr_and",
 /* 101 */ "expr_or ::= expr_xor",
 /* 102 */ "expr_or ::= expr_or LOGICOR expr_xor",
 /* 103 */ "expr_nolbr ::= expr_or",
 /* 104 */ "expr_nolbr ::= expr_or QMARK expr_value COLON expr_value",
 /* 105 */ "expr_nolbr ::= NEW name expr_paren",
 /* 106 */ "expr_nolbr ::= NEW expr_postfix expr_paren",
 /* 107 */ "expr_nolbr ::= LSQ RSQ",
 /* 108 */ "expr_nolbr ::= LSQ value_list RSQ",
 /* 109 */ "expr_nolbr ::= COLON odecl_brace",
 /* 110 */ "expr_nolbr ::= COLON expr_simple odecl_brace",
 /* 111 */ "expr_nolbr ::= QMARK expr_paren stmt_brace",
 /* 112 */ "expr_nolbr ::= PERIOD QMARK expr_paren stmt_brace",
 /* 113 */ "expr_value ::= expr_nolbr",
 /* 114 */ "expr_value ::= LBR RBR",
 /* 115 */ "expr_value ::= LBR keyval_list RBR",
 /* 116 */ "expr_lbody ::= expr_value",
 /* 117 */ "expr_lbody ::= expr_lbody COMMA expr_value",
 /* 118 */ "expr_final ::= ELLIPSIS",
 /* 119 */ "expr_final ::= proto ELLIPSIS",
 /* 120 */ "expr_final ::= expr_call ELLIPSIS",
 /* 121 */ "expr_final ::= proto YIELD ELLIPSIS",
 /* 122 */ "expr_final ::= expr_call YIELD ELLIPSIS",
 /* 123 */ "expr_final ::= name LSQ RSQ ELLIPSIS",
 /* 124 */ "expr_final ::= proto LSQ RSQ ELLIPSIS",
 /* 125 */ "expr_final ::= expr_call LSQ RSQ ELLIPSIS",
 /* 126 */ "expr_final ::= expr_postfix LSQ RSQ ELLIPSIS",
 /* 127 */ "expr_list ::= expr_final",
 /* 128 */ "expr_list ::= expr_lbody",
 /* 129 */ "expr_list ::= expr_lbody COMMA expr_final",
 /* 130 */ "expr_assign ::= expr_list",
 /* 131 */ "expr_assign ::= expr_lbody assign_op expr_list",
 /* 132 */ "assign_op ::= ASSIGN",
 /* 133 */ "assign_op ::= MULASSIGN",
 /* 134 */ "assign_op ::= DIVASSIGN",
 /* 135 */ "assign_op ::= MODASSIGN",
 /* 136 */ "assign_op ::= INTDIVASSIGN",
 /* 137 */ "assign_op ::= ADDASSIGN",
 /* 138 */ "assign_op ::= SUBASSIGN",
 /* 139 */ "assign_op ::= LSHIFTASSIGN",
 /* 140 */ "assign_op ::= RSHIFTASSIGN",
 /* 141 */ "assign_op ::= URSHIFTASSIGN",
 /* 142 */ "assign_op ::= BITANDASSIGN",
 /* 143 */ "assign_op ::= BITXORASSIGN",
 /* 144 */ "assign_op ::= BITORASSIGN",
 /* 145 */ "value_list ::= expr_final",
 /* 146 */ "value_list ::= expr_final COMMA",
 /* 147 */ "value_list ::= expr_lbody",
 /* 148 */ "value_list ::= expr_lbody COMMA",
 /* 149 */ "value_list ::= expr_lbody COMMA expr_final",
 /* 150 */ "keyval_lbody ::= expr_value COLON expr_value",
 /* 151 */ "keyval_lbody ::= keyval_lbody COMMA expr_value COLON expr_value",
 /* 152 */ "keyval_list ::= keyval_lbody",
 /* 153 */ "keyval_list ::= keyval_lbody COMMA",
 /* 154 */ "sexpr_lbody ::= expr_nolbr",
 /* 155 */ "sexpr_lbody ::= sexpr_lbody COMMA expr_value",
 /* 156 */ "sexpr_list ::= expr_final",
 /* 157 */ "sexpr_list ::= sexpr_lbody",
 /* 158 */ "sexpr_list ::= sexpr_lbody COMMA expr_final",
 /* 159 */ "sexpr_assign ::= sexpr_list",
 /* 160 */ "sexpr_assign ::= sexpr_lbody assign_op expr_list",
 /* 161 */ "condition ::= expr_assign",
 /* 162 */ "condition ::= VAR name_list ASSIGN expr_list",
 /* 163 */ "stmt_yield ::= YIELD",
 /* 164 */ "stmt ::= stmt_brace",
 /* 165 */ "stmt ::= sexpr_assign SEMICOLON",
 /* 166 */ "stmt ::= IF LPN condition RPN stmt",
 /* 167 */ "stmt ::= IF LPN condition RPN stmt ELSE stmt",
 /* 168 */ "stmt ::= SWITCH LPN condition RPN stmt_brace",
 /* 169 */ "stmt ::= CASE expr_value COLON",
 /* 170 */ "stmt ::= DEFAULT COLON",
 /* 171 */ "stmt ::= WHILE LPN condition RPN stmt",
 /* 172 */ "stmt ::= DO stmt WHILE LPN expr_assign RPN SEMICOLON",
 /* 173 */ "stmt ::= FOR LPN expr_lbody COLON expr_value RPN stmt",
 /* 174 */ "stmt ::= FOR LPN expr_lbody EACHKEY expr_value RPN stmt",
 /* 175 */ "stmt ::= FOR LPN VAR name_list COLON expr_value RPN stmt",
 /* 176 */ "stmt ::= FOR LPN VAR name_list EACHKEY expr_value RPN stmt",
 /* 177 */ "stmt ::= FOR LPN condition SEMICOLON expr_assign SEMICOLON expr_assign RPN stmt",
 /* 178 */ "stmt ::= CONTINUE SEMICOLON",
 /* 179 */ "stmt ::= BREAK SEMICOLON",
 /* 180 */ "stmt ::= RETURN SEMICOLON",
 /* 181 */ "stmt ::= RETURN expr_list SEMICOLON",
 /* 182 */ "stmt ::= stmt_yield SEMICOLON",
 /* 183 */ "stmt ::= stmt_yield expr_list SEMICOLON",
 /* 184 */ "stmt ::= USING condition SEMICOLON",
 /* 185 */ "stmt ::= TRY stmt catch_list",
 /* 186 */ "stmt ::= TRY stmt FINALLY stmt",
 /* 187 */ "stmt ::= TRY stmt catch_list FINALLY stmt",
 /* 188 */ "stmt ::= THROW expr_value SEMICOLON",
 /* 189 */ "catch ::= CATCH LPN expr_value COLON expr_simple RPN stmt",
 /* 190 */ "catch ::= CATCH LPN VAR name COLON expr_simple RPN stmt",
 /* 191 */ "catch_list ::= catch",
 /* 192 */ "catch_list ::= catch_list catch",
 /* 193 */ "stmt_list ::= stmt",
 /* 194 */ "stmt_list ::= decl",
 /* 195 */ "stmt_list ::= SEMICOLON",
 /* 196 */ "stmt_list ::= stmt_list stmt",
 /* 197 */ "stmt_list ::= stmt_list decl",
 /* 198 */ "stmt_list ::= stmt_list SEMICOLON",
};
#endif /* NDEBUG */


#if YYSTACKDEPTH<=0
/*
** Try to increase the size of the parser stack.
*/
static void yyGrowStack(yyParser *p){
  int newSize;
  yyStackEntry *pNew;

  newSize = p->yystksz*2 + 100;
  pNew = realloc(p->yystack, newSize*sizeof(pNew[0]));
  if( pNew ){
    p->yystack = pNew;
    p->yystksz = newSize;
#ifndef NDEBUG
    if( yyTraceFILE ){
      fprintf(yyTraceFILE,"%sStack grows to %d entries!\n",
              yyTracePrompt, p->yystksz);
    }
#endif
  }
}
#endif

/* 
** This function allocates a new parser.
** The only argument is a pointer to a function which works like
** malloc.
**
** Inputs:
** A pointer to the function used to allocate memory.
**
** Outputs:
** A pointer to a parser.  This pointer is used in subsequent calls
** to XecParse and XecParseFree.
*/
void *XecParseAlloc(void *(*mallocProc)(size_t)){
  yyParser *pParser;
  pParser = (yyParser*)(*mallocProc)( (size_t)sizeof(yyParser) );
  if( pParser ){
    pParser->yyidx = -1;
#ifdef YYTRACKMAXSTACKDEPTH
    pParser->yyidxMax = 0;
#endif
#if YYSTACKDEPTH<=0
    pParser->yystack = NULL;
    pParser->yystksz = 0;
    yyGrowStack(pParser);
#endif
  }
  return pParser;
}

/* The following function deletes the value associated with a
** symbol.  The symbol can be either a terminal or nonterminal.
** "yymajor" is the symbol code, and "yypminor" is a pointer to
** the value.
*/
static void yy_destructor(
  yyParser *yypParser,    /* The parser */
  YYCODETYPE yymajor,     /* Type code for object to destroy */
  YYMINORTYPE *yypminor   /* The object to be destroyed */
){
  XecParseARG_FETCH;
  switch( yymajor ){
    /* Here is inserted the actions which take place when a
    ** terminal or non-terminal is destroyed.  This can happen
    ** when the symbol is popped from the stack during a
    ** reduce or during error processing or when a parser is 
    ** being destroyed before it is finished parsing.
    **
    ** Note: during a reduce, the only symbols destroyed are those
    ** which appear on the RHS of the rule, but which are not used
    ** inside the C code.
    */
    default:  break;   /* If no destructor action specified: do nothing */
  }
}

/*
** Pop the parser's stack once.
**
** If there is a destructor routine associated with the token which
** is popped from the stack, then call it.
**
** Return the major token number for the symbol popped.
*/
static int yy_pop_parser_stack(yyParser *pParser){
  YYCODETYPE yymajor;
  yyStackEntry *yytos = &pParser->yystack[pParser->yyidx];

  if( pParser->yyidx<0 ) return 0;
#ifndef NDEBUG
  if( yyTraceFILE && pParser->yyidx>=0 ){
    fprintf(yyTraceFILE,"%sPopping %s\n",
      yyTracePrompt,
      yyTokenName[yytos->major]);
  }
#endif
  yymajor = yytos->major;
  yy_destructor(pParser, yymajor, &yytos->minor);
  pParser->yyidx--;
  return yymajor;
}

/* 
** Deallocate and destroy a parser.  Destructors are all called for
** all stack elements before shutting the parser down.
**
** Inputs:
** <ul>
** <li>  A pointer to the parser.  This should be a pointer
**       obtained from XecParseAlloc.
** <li>  A pointer to a function used to reclaim memory obtained
**       from malloc.
** </ul>
*/
void XecParseFree(
  void *p,                    /* The parser to be deleted */
  void (*freeProc)(void*)     /* Function used to reclaim memory */
){
  yyParser *pParser = (yyParser*)p;
  if( pParser==0 ) return;
  while( pParser->yyidx>=0 ) yy_pop_parser_stack(pParser);
#if YYSTACKDEPTH<=0
  free(pParser->yystack);
#endif
  (*freeProc)((void*)pParser);
}

/*
** Return the peak depth of the stack for a parser.
*/
#ifdef YYTRACKMAXSTACKDEPTH
int XecParseStackPeak(void *p){
  yyParser *pParser = (yyParser*)p;
  return pParser->yyidxMax;
}
#endif

/*
** Find the appropriate action for a parser given the terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
static int yy_find_shift_action(
  yyParser *pParser,        /* The parser */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
  int stateno = pParser->yystack[pParser->yyidx].stateno;
 
  if( stateno>YY_SHIFT_MAX || (i = yy_shift_ofst[stateno])==YY_SHIFT_USE_DFLT ){
    return yy_default[stateno];
  }
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
  if( i<0 || i>=YY_SZ_ACTTAB || yy_lookahead[i]!=iLookAhead ){
    if( iLookAhead>0 ){
#ifdef YYFALLBACK
      YYCODETYPE iFallback;            /* Fallback token */
      if( iLookAhead<sizeof(yyFallback)/sizeof(yyFallback[0])
             && (iFallback = yyFallback[iLookAhead])!=0 ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE, "%sFALLBACK %s => %s\n",
             yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[iFallback]);
        }
#endif
        return yy_find_shift_action(pParser, iFallback);
      }
#endif
#ifdef YYWILDCARD
      {
        int j = i - iLookAhead + YYWILDCARD;
        if( j>=0 && j<YY_SZ_ACTTAB && yy_lookahead[j]==YYWILDCARD ){
#ifndef NDEBUG
          if( yyTraceFILE ){
            fprintf(yyTraceFILE, "%sWILDCARD %s => %s\n",
               yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[YYWILDCARD]);
          }
#endif /* NDEBUG */
          return yy_action[j];
        }
      }
#endif /* YYWILDCARD */
    }
    return yy_default[stateno];
  }else{
    return yy_action[i];
  }
}

/*
** Find the appropriate action for a parser given the non-terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
static int yy_find_reduce_action(
  int stateno,              /* Current state number */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
#ifdef YYERRORSYMBOL
  if( stateno>YY_REDUCE_MAX ){
    return yy_default[stateno];
  }
#else
  assert( stateno<=YY_REDUCE_MAX );
#endif
  i = yy_reduce_ofst[stateno];
  assert( i!=YY_REDUCE_USE_DFLT );
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
#ifdef YYERRORSYMBOL
  if( i<0 || i>=YY_SZ_ACTTAB || yy_lookahead[i]!=iLookAhead ){
    return yy_default[stateno];
  }
#else
  assert( i>=0 && i<YY_SZ_ACTTAB );
  assert( yy_lookahead[i]==iLookAhead );
#endif
  return yy_action[i];
}

/*
** The following routine is called if the stack overflows.
*/
static void yyStackOverflow(yyParser *yypParser, YYMINORTYPE *yypMinor){
   XecParseARG_FETCH;
   yypParser->yyidx--;
#ifndef NDEBUG
   if( yyTraceFILE ){
     fprintf(yyTraceFILE,"%sStack Overflow!\n",yyTracePrompt);
   }
#endif
   while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
   /* Here code is inserted which will execute if the parser
   ** stack every overflows */
   XecParseARG_STORE; /* Suppress warning about unused %extra_argument var */
}

/*
** Perform a shift action.
*/
static void yy_shift(
  yyParser *yypParser,          /* The parser to be shifted */
  int yyNewState,               /* The new state to shift in */
  int yyMajor,                  /* The major token to shift in */
  YYMINORTYPE *yypMinor         /* Pointer to the minor token to shift in */
){
  yyStackEntry *yytos;
  yypParser->yyidx++;
#ifdef YYTRACKMAXSTACKDEPTH
  if( yypParser->yyidx>yypParser->yyidxMax ){
    yypParser->yyidxMax = yypParser->yyidx;
  }
#endif
#if YYSTACKDEPTH>0 
  if( yypParser->yyidx>=YYSTACKDEPTH ){
    yyStackOverflow(yypParser, yypMinor);
    return;
  }
#else
  if( yypParser->yyidx>=yypParser->yystksz ){
    yyGrowStack(yypParser);
    if( yypParser->yyidx>=yypParser->yystksz ){
      yyStackOverflow(yypParser, yypMinor);
      return;
    }
  }
#endif
  yytos = &yypParser->yystack[yypParser->yyidx];
  yytos->stateno = (YYACTIONTYPE)yyNewState;
  yytos->major = (YYCODETYPE)yyMajor;
  yytos->minor = *yypMinor;
#ifndef NDEBUG
  if( yyTraceFILE && yypParser->yyidx>0 ){
    int i;
    fprintf(yyTraceFILE,"%sShift %d\n",yyTracePrompt,yyNewState);
    fprintf(yyTraceFILE,"%sStack:",yyTracePrompt);
    for(i=1; i<=yypParser->yyidx; i++)
      fprintf(yyTraceFILE," %s",yyTokenName[yypParser->yystack[i].major]);
    fprintf(yyTraceFILE,"\n");
  }
#endif
}

/* The following table contains information about every rule that
** is used during the reduce.
*/
static const struct {
  YYCODETYPE lhs;         /* Symbol on the left-hand side of the rule */
  unsigned char nrhs;     /* Number of right-hand side symbols in the rule */
} yyRuleInfo[] = {
  { 81, 0 },
  { 81, 1 },
  { 83, 2 },
  { 83, 3 },
  { 85, 2 },
  { 85, 3 },
  { 86, 2 },
  { 86, 3 },
  { 88, 1 },
  { 88, 3 },
  { 89, 1 },
  { 89, 3 },
  { 90, 2 },
  { 91, 2 },
  { 91, 4 },
  { 91, 2 },
  { 91, 3 },
  { 93, 1 },
  { 93, 3 },
  { 93, 4 },
  { 93, 3 },
  { 93, 5 },
  { 94, 1 },
  { 94, 1 },
  { 94, 2 },
  { 94, 3 },
  { 94, 2 },
  { 94, 4 },
  { 87, 1 },
  { 87, 2 },
  { 95, 2 },
  { 95, 2 },
  { 95, 2 },
  { 95, 2 },
  { 96, 3 },
  { 96, 5 },
  { 96, 4 },
  { 96, 3 },
  { 96, 5 },
  { 96, 4 },
  { 96, 3 },
  { 96, 5 },
  { 96, 4 },
  { 96, 3 },
  { 96, 5 },
  { 96, 4 },
  { 92, 1 },
  { 92, 1 },
  { 92, 1 },
  { 92, 1 },
  { 92, 2 },
  { 92, 2 },
  { 99, 1 },
  { 99, 1 },
  { 99, 1 },
  { 99, 1 },
  { 99, 1 },
  { 99, 1 },
  { 100, 1 },
  { 100, 2 },
  { 100, 2 },
  { 101, 1 },
  { 101, 2 },
  { 101, 2 },
  { 101, 2 },
  { 101, 2 },
  { 101, 2 },
  { 101, 2 },
  { 102, 1 },
  { 102, 3 },
  { 102, 3 },
  { 102, 3 },
  { 102, 3 },
  { 103, 1 },
  { 103, 3 },
  { 103, 3 },
  { 104, 1 },
  { 104, 3 },
  { 104, 3 },
  { 104, 3 },
  { 105, 1 },
  { 105, 3 },
  { 106, 1 },
  { 106, 3 },
  { 107, 1 },
  { 107, 3 },
  { 108, 1 },
  { 108, 3 },
  { 108, 3 },
  { 108, 3 },
  { 108, 3 },
  { 108, 3 },
  { 108, 3 },
  { 108, 3 },
  { 108, 3 },
  { 108, 3 },
  { 108, 3 },
  { 109, 1 },
  { 109, 3 },
  { 110, 1 },
  { 110, 3 },
  { 111, 1 },
  { 111, 3 },
  { 112, 1 },
  { 112, 5 },
  { 112, 3 },
  { 112, 3 },
  { 112, 2 },
  { 112, 3 },
  { 112, 2 },
  { 112, 3 },
  { 112, 3 },
  { 112, 4 },
  { 98, 1 },
  { 98, 2 },
  { 98, 3 },
  { 115, 1 },
  { 115, 3 },
  { 116, 1 },
  { 116, 2 },
  { 116, 2 },
  { 116, 3 },
  { 116, 3 },
  { 116, 4 },
  { 116, 4 },
  { 116, 4 },
  { 116, 4 },
  { 84, 1 },
  { 84, 1 },
  { 84, 3 },
  { 97, 1 },
  { 97, 3 },
  { 117, 1 },
  { 117, 1 },
  { 117, 1 },
  { 117, 1 },
  { 117, 1 },
  { 117, 1 },
  { 117, 1 },
  { 117, 1 },
  { 117, 1 },
  { 117, 1 },
  { 117, 1 },
  { 117, 1 },
  { 117, 1 },
  { 113, 1 },
  { 113, 2 },
  { 113, 1 },
  { 113, 2 },
  { 113, 3 },
  { 118, 3 },
  { 118, 5 },
  { 114, 1 },
  { 114, 2 },
  { 119, 1 },
  { 119, 3 },
  { 120, 1 },
  { 120, 1 },
  { 120, 3 },
  { 121, 1 },
  { 121, 3 },
  { 122, 1 },
  { 122, 4 },
  { 123, 1 },
  { 124, 1 },
  { 124, 2 },
  { 124, 5 },
  { 124, 7 },
  { 124, 5 },
  { 124, 3 },
  { 124, 2 },
  { 124, 5 },
  { 124, 7 },
  { 124, 7 },
  { 124, 7 },
  { 124, 8 },
  { 124, 8 },
  { 124, 9 },
  { 124, 2 },
  { 124, 2 },
  { 124, 2 },
  { 124, 3 },
  { 124, 2 },
  { 124, 3 },
  { 124, 3 },
  { 124, 3 },
  { 124, 4 },
  { 124, 5 },
  { 124, 3 },
  { 126, 7 },
  { 126, 8 },
  { 125, 1 },
  { 125, 2 },
  { 82, 1 },
  { 82, 1 },
  { 82, 1 },
  { 82, 2 },
  { 82, 2 },
  { 82, 2 },
};

static void yy_accept(yyParser*);  /* Forward Declaration */

/*
** Perform a reduce action and the shift that must immediately
** follow the reduce.
*/
static void yy_reduce(
  yyParser *yypParser,         /* The parser */
  int yyruleno                 /* Number of the rule by which to reduce */
){
  int yygoto;                     /* The next state */
  int yyact;                      /* The next action */
  YYMINORTYPE yygotominor;        /* The LHS of the rule reduced */
  yyStackEntry *yymsp;            /* The top of the parser's stack */
  int yysize;                     /* Amount to pop the stack */
  XecParseARG_FETCH;
  yymsp = &yypParser->yystack[yypParser->yyidx];
#ifndef NDEBUG
  if( yyTraceFILE && yyruleno>=0 
        && yyruleno<(int)(sizeof(yyRuleName)/sizeof(yyRuleName[0])) ){
    fprintf(yyTraceFILE, "%sReduce [%s].\n", yyTracePrompt,
      yyRuleName[yyruleno]);
  }
#endif /* NDEBUG */

  /* Silence complaints from purify about yygotominor being uninitialized
  ** in some cases when it is copied into the stack after the following
  ** switch.  yygotominor is uninitialized when a rule reduces that does
  ** not set the value of its left-hand side nonterminal.  Leaving the
  ** value of the nonterminal uninitialized is utterly harmless as long
  ** as the value is never used.  So really the only thing this code
  ** accomplishes is to quieten purify.  
  **
  ** 2007-01-16:  The wireshark project (www.wireshark.org) reports that
  ** without this code, their parser segfaults.  I'm not sure what there
  ** parser is doing to make this happen.  This is the second bug report
  ** from wireshark this week.  Clearly they are stressing Lemon in ways
  ** that it has not been previously stressed...  (SQLite ticket #2172)
  */
  /*memset(&yygotominor, 0, sizeof(yygotominor));*/
  yygotominor = yyzerominor;


  switch( yyruleno ){
  /* Beginning here are the reduction cases.  A typical example
  ** follows:
  **   case 0:
  **  #line <lineno> <grammarfile>
  **     { ... }           // User supplied code
  **  #line <lineno> <thisfile>
  **     break;
  */
      default:
      /* (0) script ::= */ yytestcase(yyruleno==0);
      /* (1) script ::= stmt_list */ yytestcase(yyruleno==1);
      /* (2) expr_paren ::= LPN RPN */ yytestcase(yyruleno==2);
      /* (3) expr_paren ::= LPN expr_list RPN */ yytestcase(yyruleno==3);
      /* (4) stmt_brace ::= LBR RBR */ yytestcase(yyruleno==4);
      /* (5) stmt_brace ::= LBR stmt_list RBR */ yytestcase(yyruleno==5);
      /* (6) odecl_brace ::= LBR RBR */ yytestcase(yyruleno==6);
      /* (7) odecl_brace ::= LBR odecl_list RBR */ yytestcase(yyruleno==7);
      /* (8) name ::= IDENTIFIER */ yytestcase(yyruleno==8);
      /* (9) name ::= name PERIOD IDENTIFIER */ yytestcase(yyruleno==9);
      /* (10) name_list ::= name */ yytestcase(yyruleno==10);
      /* (11) name_list ::= name_list COMMA name */ yytestcase(yyruleno==11);
      /* (12) proto ::= name expr_paren */ yytestcase(yyruleno==12);
      /* (13) decl_common ::= name odecl_brace */ yytestcase(yyruleno==13);
      /* (14) decl_common ::= name COLON expr_simple odecl_brace */ yytestcase(yyruleno==14);
      /* (15) decl_common ::= proto stmt_brace */ yytestcase(yyruleno==15);
      /* (16) decl_common ::= proto YIELD stmt_brace */ yytestcase(yyruleno==16);
      /* (17) decl ::= decl_common */ yytestcase(yyruleno==17);
      /* (18) decl ::= PERIOD proto stmt_brace */ yytestcase(yyruleno==18);
      /* (19) decl ::= PERIOD proto YIELD stmt_brace */ yytestcase(yyruleno==19);
      /* (20) decl ::= VAR name_list SEMICOLON */ yytestcase(yyruleno==20);
      /* (21) decl ::= VAR name_list ASSIGN expr_list SEMICOLON */ yytestcase(yyruleno==21);
      /* (22) odecl ::= SEMICOLON */ yytestcase(yyruleno==22);
      /* (23) odecl ::= decl_common */ yytestcase(yyruleno==23);
      /* (24) odecl ::= proto SEMICOLON */ yytestcase(yyruleno==24);
      /* (25) odecl ::= proto YIELD SEMICOLON */ yytestcase(yyruleno==25);
      /* (26) odecl ::= name_list SEMICOLON */ yytestcase(yyruleno==26);
      /* (27) odecl ::= name_list ASSIGN expr_list SEMICOLON */ yytestcase(yyruleno==27);
      /* (28) odecl_list ::= odecl */ yytestcase(yyruleno==28);
      /* (29) odecl_list ::= odecl_list odecl */ yytestcase(yyruleno==29);
      /* (30) expr_call ::= YIELD expr_paren */ yytestcase(yyruleno==30);
      /* (31) expr_call ::= proto expr_paren */ yytestcase(yyruleno==31);
      /* (32) expr_call ::= expr_call expr_paren */ yytestcase(yyruleno==32);
      /* (33) expr_call ::= expr_postfix expr_paren */ yytestcase(yyruleno==33);
      /* (34) expr_postfix ::= LPN expr_assign RPN */ yytestcase(yyruleno==34);
      /* (35) expr_postfix ::= name PERIOD LSQ expr_value RSQ */ yytestcase(yyruleno==35);
      /* (36) expr_postfix ::= name LSQ expr_value RSQ */ yytestcase(yyruleno==36);
      /* (37) expr_postfix ::= proto PERIOD IDENTIFIER */ yytestcase(yyruleno==37);
      /* (38) expr_postfix ::= proto PERIOD LSQ expr_value RSQ */ yytestcase(yyruleno==38);
      /* (39) expr_postfix ::= proto LSQ expr_value RSQ */ yytestcase(yyruleno==39);
      /* (40) expr_postfix ::= expr_call PERIOD IDENTIFIER */ yytestcase(yyruleno==40);
      /* (41) expr_postfix ::= expr_call PERIOD LSQ expr_value RSQ */ yytestcase(yyruleno==41);
      /* (42) expr_postfix ::= expr_call LSQ expr_value RSQ */ yytestcase(yyruleno==42);
      /* (43) expr_postfix ::= expr_postfix PERIOD IDENTIFIER */ yytestcase(yyruleno==43);
      /* (44) expr_postfix ::= expr_postfix PERIOD LSQ expr_value RSQ */ yytestcase(yyruleno==44);
      /* (45) expr_postfix ::= expr_postfix LSQ expr_value RSQ */ yytestcase(yyruleno==45);
      /* (46) expr_simple ::= name */ yytestcase(yyruleno==46);
      /* (47) expr_simple ::= expr_postfix */ yytestcase(yyruleno==47);
      /* (48) expr_simple ::= proto */ yytestcase(yyruleno==48);
      /* (49) expr_simple ::= expr_call */ yytestcase(yyruleno==49);
      /* (50) expr_simple ::= proto YIELD */ yytestcase(yyruleno==50);
      /* (51) expr_simple ::= expr_call YIELD */ yytestcase(yyruleno==51);
      /* (52) expr_basic ::= expr_simple */ yytestcase(yyruleno==52);
      /* (53) expr_basic ::= NUMBER */ yytestcase(yyruleno==53);
      /* (54) expr_basic ::= STRING */ yytestcase(yyruleno==54);
      /* (55) expr_basic ::= TRUE */ yytestcase(yyruleno==55);
      /* (56) expr_basic ::= FALSE */ yytestcase(yyruleno==56);
      /* (57) expr_basic ::= NULL */ yytestcase(yyruleno==57);
      /* (58) expr_suffix ::= expr_basic */ yytestcase(yyruleno==58);
      /* (59) expr_suffix ::= expr_basic INCREMENT */ yytestcase(yyruleno==59);
      /* (60) expr_suffix ::= expr_basic DECREMENT */ yytestcase(yyruleno==60);
      /* (61) expr_unary ::= expr_suffix */ yytestcase(yyruleno==61);
      /* (62) expr_unary ::= PLUS expr_basic */ yytestcase(yyruleno==62);
      /* (63) expr_unary ::= MINUS expr_basic */ yytestcase(yyruleno==63);
      /* (64) expr_unary ::= XMARK expr_basic */ yytestcase(yyruleno==64);
      /* (65) expr_unary ::= TILDE expr_basic */ yytestcase(yyruleno==65);
      /* (66) expr_unary ::= INCREMENT expr_basic */ yytestcase(yyruleno==66);
      /* (67) expr_unary ::= DECREMENT expr_basic */ yytestcase(yyruleno==67);
      /* (68) expr_mul ::= expr_unary */ yytestcase(yyruleno==68);
      /* (69) expr_mul ::= expr_mul ASTERISK expr_unary */ yytestcase(yyruleno==69);
      /* (70) expr_mul ::= expr_mul SOLIDUS expr_unary */ yytestcase(yyruleno==70);
      /* (71) expr_mul ::= expr_mul PERCENT expr_unary */ yytestcase(yyruleno==71);
      /* (72) expr_mul ::= expr_mul TILDE expr_unary */ yytestcase(yyruleno==72);
      /* (73) expr_add ::= expr_mul */ yytestcase(yyruleno==73);
      /* (74) expr_add ::= expr_add PLUS expr_mul */ yytestcase(yyruleno==74);
      /* (75) expr_add ::= expr_add MINUS expr_mul */ yytestcase(yyruleno==75);
      /* (76) expr_shift ::= expr_add */ yytestcase(yyruleno==76);
      /* (77) expr_shift ::= expr_shift LSHIFT expr_add */ yytestcase(yyruleno==77);
      /* (78) expr_shift ::= expr_shift RSHIFT expr_add */ yytestcase(yyruleno==78);
      /* (79) expr_shift ::= expr_shift URSHIFT expr_add */ yytestcase(yyruleno==79);
      /* (80) expr_bitand ::= expr_shift */ yytestcase(yyruleno==80);
      /* (81) expr_bitand ::= expr_bitand AMPERSAND expr_shift */ yytestcase(yyruleno==81);
      /* (82) expr_bitxor ::= expr_bitand */ yytestcase(yyruleno==82);
      /* (83) expr_bitxor ::= expr_bitxor CARET expr_bitand */ yytestcase(yyruleno==83);
      /* (84) expr_bitor ::= expr_bitxor */ yytestcase(yyruleno==84);
      /* (85) expr_bitor ::= expr_bitor VBAR expr_bitxor */ yytestcase(yyruleno==85);
      /* (86) expr_compare ::= expr_bitor */ yytestcase(yyruleno==86);
      /* (87) expr_compare ::= expr_compare EQUAL expr_bitor */ yytestcase(yyruleno==87);
      /* (88) expr_compare ::= expr_compare NOTEQUAL expr_bitor */ yytestcase(yyruleno==88);
      /* (89) expr_compare ::= expr_compare LESS expr_bitor */ yytestcase(yyruleno==89);
      /* (90) expr_compare ::= expr_compare GREATER expr_bitor */ yytestcase(yyruleno==90);
      /* (91) expr_compare ::= expr_compare LESSEQUAL expr_bitor */ yytestcase(yyruleno==91);
      /* (92) expr_compare ::= expr_compare GREATEREQUAL expr_bitor */ yytestcase(yyruleno==92);
      /* (93) expr_compare ::= expr_compare IN expr_bitor */ yytestcase(yyruleno==93);
      /* (94) expr_compare ::= expr_compare NOTIN expr_bitor */ yytestcase(yyruleno==94);
      /* (95) expr_compare ::= expr_compare IS expr_bitor */ yytestcase(yyruleno==95);
      /* (96) expr_compare ::= expr_compare NOTIS expr_bitor */ yytestcase(yyruleno==96);
      /* (97) expr_and ::= expr_compare */ yytestcase(yyruleno==97);
      /* (98) expr_and ::= expr_and LOGICAND expr_compare */ yytestcase(yyruleno==98);
      /* (99) expr_xor ::= expr_and */ yytestcase(yyruleno==99);
      /* (100) expr_xor ::= expr_xor LOGICXOR expr_and */ yytestcase(yyruleno==100);
      /* (101) expr_or ::= expr_xor */ yytestcase(yyruleno==101);
      /* (102) expr_or ::= expr_or LOGICOR expr_xor */ yytestcase(yyruleno==102);
      /* (103) expr_nolbr ::= expr_or */ yytestcase(yyruleno==103);
      /* (104) expr_nolbr ::= expr_or QMARK expr_value COLON expr_value */ yytestcase(yyruleno==104);
      /* (105) expr_nolbr ::= NEW name expr_paren */ yytestcase(yyruleno==105);
      /* (106) expr_nolbr ::= NEW expr_postfix expr_paren */ yytestcase(yyruleno==106);
      /* (107) expr_nolbr ::= LSQ RSQ */ yytestcase(yyruleno==107);
      /* (108) expr_nolbr ::= LSQ value_list RSQ */ yytestcase(yyruleno==108);
      /* (109) expr_nolbr ::= COLON odecl_brace */ yytestcase(yyruleno==109);
      /* (110) expr_nolbr ::= COLON expr_simple odecl_brace */ yytestcase(yyruleno==110);
      /* (111) expr_nolbr ::= QMARK expr_paren stmt_brace */ yytestcase(yyruleno==111);
      /* (112) expr_nolbr ::= PERIOD QMARK expr_paren stmt_brace */ yytestcase(yyruleno==112);
      /* (113) expr_value ::= expr_nolbr */ yytestcase(yyruleno==113);
      /* (114) expr_value ::= LBR RBR */ yytestcase(yyruleno==114);
      /* (115) expr_value ::= LBR keyval_list RBR */ yytestcase(yyruleno==115);
      /* (116) expr_lbody ::= expr_value */ yytestcase(yyruleno==116);
      /* (117) expr_lbody ::= expr_lbody COMMA expr_value */ yytestcase(yyruleno==117);
      /* (118) expr_final ::= ELLIPSIS */ yytestcase(yyruleno==118);
      /* (119) expr_final ::= proto ELLIPSIS */ yytestcase(yyruleno==119);
      /* (120) expr_final ::= expr_call ELLIPSIS */ yytestcase(yyruleno==120);
      /* (121) expr_final ::= proto YIELD ELLIPSIS */ yytestcase(yyruleno==121);
      /* (122) expr_final ::= expr_call YIELD ELLIPSIS */ yytestcase(yyruleno==122);
      /* (123) expr_final ::= name LSQ RSQ ELLIPSIS */ yytestcase(yyruleno==123);
      /* (124) expr_final ::= proto LSQ RSQ ELLIPSIS */ yytestcase(yyruleno==124);
      /* (125) expr_final ::= expr_call LSQ RSQ ELLIPSIS */ yytestcase(yyruleno==125);
      /* (126) expr_final ::= expr_postfix LSQ RSQ ELLIPSIS */ yytestcase(yyruleno==126);
      /* (127) expr_list ::= expr_final */ yytestcase(yyruleno==127);
      /* (128) expr_list ::= expr_lbody */ yytestcase(yyruleno==128);
      /* (129) expr_list ::= expr_lbody COMMA expr_final */ yytestcase(yyruleno==129);
      /* (130) expr_assign ::= expr_list */ yytestcase(yyruleno==130);
      /* (131) expr_assign ::= expr_lbody assign_op expr_list */ yytestcase(yyruleno==131);
      /* (132) assign_op ::= ASSIGN */ yytestcase(yyruleno==132);
      /* (133) assign_op ::= MULASSIGN */ yytestcase(yyruleno==133);
      /* (134) assign_op ::= DIVASSIGN */ yytestcase(yyruleno==134);
      /* (135) assign_op ::= MODASSIGN */ yytestcase(yyruleno==135);
      /* (136) assign_op ::= INTDIVASSIGN */ yytestcase(yyruleno==136);
      /* (137) assign_op ::= ADDASSIGN */ yytestcase(yyruleno==137);
      /* (138) assign_op ::= SUBASSIGN */ yytestcase(yyruleno==138);
      /* (139) assign_op ::= LSHIFTASSIGN */ yytestcase(yyruleno==139);
      /* (140) assign_op ::= RSHIFTASSIGN */ yytestcase(yyruleno==140);
      /* (141) assign_op ::= URSHIFTASSIGN */ yytestcase(yyruleno==141);
      /* (142) assign_op ::= BITANDASSIGN */ yytestcase(yyruleno==142);
      /* (143) assign_op ::= BITXORASSIGN */ yytestcase(yyruleno==143);
      /* (144) assign_op ::= BITORASSIGN */ yytestcase(yyruleno==144);
      /* (145) value_list ::= expr_final */ yytestcase(yyruleno==145);
      /* (146) value_list ::= expr_final COMMA */ yytestcase(yyruleno==146);
      /* (147) value_list ::= expr_lbody */ yytestcase(yyruleno==147);
      /* (148) value_list ::= expr_lbody COMMA */ yytestcase(yyruleno==148);
      /* (149) value_list ::= expr_lbody COMMA expr_final */ yytestcase(yyruleno==149);
      /* (150) keyval_lbody ::= expr_value COLON expr_value */ yytestcase(yyruleno==150);
      /* (151) keyval_lbody ::= keyval_lbody COMMA expr_value COLON expr_value */ yytestcase(yyruleno==151);
      /* (152) keyval_list ::= keyval_lbody */ yytestcase(yyruleno==152);
      /* (153) keyval_list ::= keyval_lbody COMMA */ yytestcase(yyruleno==153);
      /* (154) sexpr_lbody ::= expr_nolbr */ yytestcase(yyruleno==154);
      /* (155) sexpr_lbody ::= sexpr_lbody COMMA expr_value */ yytestcase(yyruleno==155);
      /* (156) sexpr_list ::= expr_final */ yytestcase(yyruleno==156);
      /* (157) sexpr_list ::= sexpr_lbody */ yytestcase(yyruleno==157);
      /* (158) sexpr_list ::= sexpr_lbody COMMA expr_final */ yytestcase(yyruleno==158);
      /* (159) sexpr_assign ::= sexpr_list */ yytestcase(yyruleno==159);
      /* (160) sexpr_assign ::= sexpr_lbody assign_op expr_list */ yytestcase(yyruleno==160);
      /* (161) condition ::= expr_assign */ yytestcase(yyruleno==161);
      /* (162) condition ::= VAR name_list ASSIGN expr_list */ yytestcase(yyruleno==162);
      /* (163) stmt_yield ::= YIELD */ yytestcase(yyruleno==163);
      /* (164) stmt ::= stmt_brace */ yytestcase(yyruleno==164);
      /* (165) stmt ::= sexpr_assign SEMICOLON */ yytestcase(yyruleno==165);
      /* (166) stmt ::= IF LPN condition RPN stmt */ yytestcase(yyruleno==166);
      /* (167) stmt ::= IF LPN condition RPN stmt ELSE stmt */ yytestcase(yyruleno==167);
      /* (168) stmt ::= SWITCH LPN condition RPN stmt_brace */ yytestcase(yyruleno==168);
      /* (169) stmt ::= CASE expr_value COLON */ yytestcase(yyruleno==169);
      /* (170) stmt ::= DEFAULT COLON */ yytestcase(yyruleno==170);
      /* (171) stmt ::= WHILE LPN condition RPN stmt */ yytestcase(yyruleno==171);
      /* (172) stmt ::= DO stmt WHILE LPN expr_assign RPN SEMICOLON */ yytestcase(yyruleno==172);
      /* (173) stmt ::= FOR LPN expr_lbody COLON expr_value RPN stmt */ yytestcase(yyruleno==173);
      /* (174) stmt ::= FOR LPN expr_lbody EACHKEY expr_value RPN stmt */ yytestcase(yyruleno==174);
      /* (175) stmt ::= FOR LPN VAR name_list COLON expr_value RPN stmt */ yytestcase(yyruleno==175);
      /* (176) stmt ::= FOR LPN VAR name_list EACHKEY expr_value RPN stmt */ yytestcase(yyruleno==176);
      /* (177) stmt ::= FOR LPN condition SEMICOLON expr_assign SEMICOLON expr_assign RPN stmt */ yytestcase(yyruleno==177);
      /* (178) stmt ::= CONTINUE SEMICOLON */ yytestcase(yyruleno==178);
      /* (179) stmt ::= BREAK SEMICOLON */ yytestcase(yyruleno==179);
      /* (180) stmt ::= RETURN SEMICOLON */ yytestcase(yyruleno==180);
      /* (181) stmt ::= RETURN expr_list SEMICOLON */ yytestcase(yyruleno==181);
      /* (182) stmt ::= stmt_yield SEMICOLON */ yytestcase(yyruleno==182);
      /* (183) stmt ::= stmt_yield expr_list SEMICOLON */ yytestcase(yyruleno==183);
      /* (184) stmt ::= USING condition SEMICOLON */ yytestcase(yyruleno==184);
      /* (185) stmt ::= TRY stmt catch_list */ yytestcase(yyruleno==185);
      /* (186) stmt ::= TRY stmt FINALLY stmt */ yytestcase(yyruleno==186);
      /* (187) stmt ::= TRY stmt catch_list FINALLY stmt */ yytestcase(yyruleno==187);
      /* (188) stmt ::= THROW expr_value SEMICOLON */ yytestcase(yyruleno==188);
      /* (189) catch ::= CATCH LPN expr_value COLON expr_simple RPN stmt */ yytestcase(yyruleno==189);
      /* (190) catch ::= CATCH LPN VAR name COLON expr_simple RPN stmt */ yytestcase(yyruleno==190);
      /* (191) catch_list ::= catch */ yytestcase(yyruleno==191);
      /* (192) catch_list ::= catch_list catch */ yytestcase(yyruleno==192);
      /* (193) stmt_list ::= stmt */ yytestcase(yyruleno==193);
      /* (194) stmt_list ::= decl */ yytestcase(yyruleno==194);
      /* (195) stmt_list ::= SEMICOLON */ yytestcase(yyruleno==195);
      /* (196) stmt_list ::= stmt_list stmt */ yytestcase(yyruleno==196);
      /* (197) stmt_list ::= stmt_list decl */ yytestcase(yyruleno==197);
      /* (198) stmt_list ::= stmt_list SEMICOLON */ yytestcase(yyruleno==198);
        break;
  };
  yygoto = yyRuleInfo[yyruleno].lhs;
  yysize = yyRuleInfo[yyruleno].nrhs;
  yypParser->yyidx -= yysize;
  yyact = yy_find_reduce_action(yymsp[-yysize].stateno,(YYCODETYPE)yygoto);
  if( yyact < YYNSTATE ){
#ifdef NDEBUG
    /* If we are not debugging and the reduce action popped at least
    ** one element off the stack, then we can push the new element back
    ** onto the stack here, and skip the stack overflow test in yy_shift().
    ** That gives a significant speed improvement. */
    if( yysize ){
      yypParser->yyidx++;
      yymsp -= yysize-1;
      yymsp->stateno = (YYACTIONTYPE)yyact;
      yymsp->major = (YYCODETYPE)yygoto;
      yymsp->minor = yygotominor;
    }else
#endif
    {
      yy_shift(yypParser,yyact,yygoto,&yygotominor);
    }
  }else{
    assert( yyact == YYNSTATE + YYNRULE + 1 );
    yy_accept(yypParser);
  }
}

/*
** The following code executes when the parse fails
*/
#ifndef YYNOERRORRECOVERY
static void yy_parse_failed(
  yyParser *yypParser           /* The parser */
){
  XecParseARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sFail!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser fails */
  XecParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}
#endif /* YYNOERRORRECOVERY */

/*
** The following code executes when a syntax error first occurs.
*/
static void yy_syntax_error(
  yyParser *yypParser,           /* The parser */
  int yymajor,                   /* The major type of the error token */
  YYMINORTYPE yyminor            /* The minor type of the error token */
){
  XecParseARG_FETCH;
#define TOKEN (yyminor.yy0)
  XecParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/*
** The following is executed when the parser accepts
*/
static void yy_accept(
  yyParser *yypParser           /* The parser */
){
  XecParseARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sAccept!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser accepts */
  XecParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/* The main parser program.
** The first argument is a pointer to a structure obtained from
** "XecParseAlloc" which describes the current state of the parser.
** The second argument is the major token number.  The third is
** the minor token.  The fourth optional argument is whatever the
** user wants (and specified in the grammar) and is available for
** use by the action routines.
**
** Inputs:
** <ul>
** <li> A pointer to the parser (an opaque structure.)
** <li> The major token number.
** <li> The minor token number.
** <li> An option argument of a grammar-specified type.
** </ul>
**
** Outputs:
** None.
*/
void XecParse(
  void *yyp,                   /* The parser */
  int yymajor,                 /* The major token code number */
  XecParseTOKENTYPE yyminor       /* The value for the token */
  XecParseARG_PDECL               /* Optional %extra_argument parameter */
){
  YYMINORTYPE yyminorunion;
  int yyact;            /* The parser action. */
  int yyendofinput;     /* True if we are at the end of input */
#ifdef YYERRORSYMBOL
  int yyerrorhit = 0;   /* True if yymajor has invoked an error */
#endif
  yyParser *yypParser;  /* The parser */

  /* (re)initialize the parser, if necessary */
  yypParser = (yyParser*)yyp;
  if( yypParser->yyidx<0 ){
#if YYSTACKDEPTH<=0
    if( yypParser->yystksz <=0 ){
      /*memset(&yyminorunion, 0, sizeof(yyminorunion));*/
      yyminorunion = yyzerominor;
      yyStackOverflow(yypParser, &yyminorunion);
      return;
    }
#endif
    yypParser->yyidx = 0;
    yypParser->yyerrcnt = -1;
    yypParser->yystack[0].stateno = 0;
    yypParser->yystack[0].major = 0;
  }
  yyminorunion.yy0 = yyminor;
  yyendofinput = (yymajor==0);
  XecParseARG_STORE;

#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sInput %s\n",yyTracePrompt,yyTokenName[yymajor]);
  }
#endif

  do{
    yyact = yy_find_shift_action(yypParser,(YYCODETYPE)yymajor);
    if( yyact<YYNSTATE ){
      assert( !yyendofinput );  /* Impossible to shift the $ token */
      yy_shift(yypParser,yyact,yymajor,&yyminorunion);
      yypParser->yyerrcnt--;
      yymajor = YYNOCODE;
    }else if( yyact < YYNSTATE + YYNRULE ){
      yy_reduce(yypParser,yyact-YYNSTATE);
    }else{
      assert( yyact == YY_ERROR_ACTION );
#ifdef YYERRORSYMBOL
      int yymx;
#endif
#ifndef NDEBUG
      if( yyTraceFILE ){
        fprintf(yyTraceFILE,"%sSyntax Error!\n",yyTracePrompt);
      }
#endif
#ifdef YYERRORSYMBOL
      /* A syntax error has occurred.
      ** The response to an error depends upon whether or not the
      ** grammar defines an error token "ERROR".  
      **
      ** This is what we do if the grammar does define ERROR:
      **
      **  * Call the %syntax_error function.
      **
      **  * Begin popping the stack until we enter a state where
      **    it is legal to shift the error symbol, then shift
      **    the error symbol.
      **
      **  * Set the error count to three.
      **
      **  * Begin accepting and shifting new tokens.  No new error
      **    processing will occur until three tokens have been
      **    shifted successfully.
      **
      */
      if( yypParser->yyerrcnt<0 ){
        yy_syntax_error(yypParser,yymajor,yyminorunion);
      }
      yymx = yypParser->yystack[yypParser->yyidx].major;
      if( yymx==YYERRORSYMBOL || yyerrorhit ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE,"%sDiscard input token %s\n",
             yyTracePrompt,yyTokenName[yymajor]);
        }
#endif
        yy_destructor(yypParser, (YYCODETYPE)yymajor,&yyminorunion);
        yymajor = YYNOCODE;
      }else{
         while(
          yypParser->yyidx >= 0 &&
          yymx != YYERRORSYMBOL &&
          (yyact = yy_find_reduce_action(
                        yypParser->yystack[yypParser->yyidx].stateno,
                        YYERRORSYMBOL)) >= YYNSTATE
        ){
          yy_pop_parser_stack(yypParser);
        }
        if( yypParser->yyidx < 0 || yymajor==0 ){
          yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
          yy_parse_failed(yypParser);
          yymajor = YYNOCODE;
        }else if( yymx!=YYERRORSYMBOL ){
          YYMINORTYPE u2;
          u2.YYERRSYMDT = 0;
          yy_shift(yypParser,yyact,YYERRORSYMBOL,&u2);
        }
      }
      yypParser->yyerrcnt = 3;
      yyerrorhit = 1;
#elif defined(YYNOERRORRECOVERY)
      /* If the YYNOERRORRECOVERY macro is defined, then do not attempt to
      ** do any kind of error recovery.  Instead, simply invoke the syntax
      ** error routine and continue going as if nothing had happened.
      **
      ** Applications can set this macro (for example inside %include) if
      ** they intend to abandon the parse upon the first syntax error seen.
      */
      yy_syntax_error(yypParser,yymajor,yyminorunion);
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      yymajor = YYNOCODE;
      
#else  /* YYERRORSYMBOL is not defined */
      /* This is what we do if the grammar does not define ERROR:
      **
      **  * Report an error message, and throw away the input token.
      **
      **  * If the input token is $, then fail the parse.
      **
      ** As before, subsequent error messages are suppressed until
      ** three input tokens have been successfully shifted.
      */
      if( yypParser->yyerrcnt<=0 ){
        yy_syntax_error(yypParser,yymajor,yyminorunion);
      }
      yypParser->yyerrcnt = 3;
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      if( yyendofinput ){
        yy_parse_failed(yypParser);
      }
      yymajor = YYNOCODE;
#endif
    }
  }while( yymajor!=YYNOCODE && yypParser->yyidx>=0 );
  return;
}
