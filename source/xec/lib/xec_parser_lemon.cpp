/* Driver template for the LEMON parser generator.
** The author disclaims copyright to this source code.
*/
/* First off, code is included that follows the "include" declaration
** in the input grammar file. */
#include <stdio.h>
#line 19 "../../toolbox/source/xec/lib/xec_parser_lemon.y"

    #include <assert.h>
    #include "xec_parser.h"
    #include "xec_token.h"
    #include <xec/ast/xec_expression.h>
    #include <xec/ast/xec_constructor.h>
    #include <xec/ast/xec_declaration.h>
    #include <xec/ast/xec_statement.h>
#line 35 "../../toolbox/source/xec/lib/xec_parser_lemon.y"



void xec_parser::destroy( xec_token* token )
{
    token->~xec_token();
    recycle_tokens.push_back( token );
}


#line 28 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
/* Next is all token values, in a form suitable for use by makeheaders.
** This section will be null unless lemon is run with the -m switch.
*/
/* 
** These constants (all generated automatically by the parser generator)
** specify the various kinds of tokens (terminals) that the parser
** understands. 
**
** Each symbol here is a terminal symbol in the grammar.
*/
/* Make sure the INTERFACE macro is defined.
*/
#ifndef INTERFACE
# define INTERFACE 1
#endif
/* The next thing included is series of defines which control
** various aspects of the generated parser.
**    YYCODETYPE         is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 terminals
**                       and nonterminals.  "int" is used otherwise.
**    YYNOCODE           is a number of type YYCODETYPE which corresponds
**                       to no legal terminal or nonterminal number.  This
**                       number is used to fill in empty slots of the hash 
**                       table.
**    YYFALLBACK         If defined, this indicates that one or more tokens
**                       have fall-back values which should be used if the
**                       original value of the token will not parse.
**    YYACTIONTYPE       is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 rules and
**                       states combined.  "int" is used otherwise.
**    XecParseTOKENTYPE     is the data type used for minor tokens given 
**                       directly to the parser from the tokenizer.
**    YYMINORTYPE        is the data type used for all minor tokens.
**                       This is typically a union of many types, one of
**                       which is XecParseTOKENTYPE.  The entry in the union
**                       for base tokens is called "yy0".
**    YYSTACKDEPTH       is the maximum depth of the parser's stack.  If
**                       zero the stack is dynamically sized using realloc()
**    XecParseARG_SDECL     A static variable declaration for the %extra_argument
**    XecParseARG_PDECL     A parameter declaration for the %extra_argument
**    XecParseARG_STORE     Code to store %extra_argument into yypParser
**    XecParseARG_FETCH     Code to extract %extra_argument from yypParser
**    YYNSTATE           the combined number of states.
**    YYNRULE            the number of rules in the grammar
**    YYERRORSYMBOL      is the code number of the error symbol.  If not
**                       defined, then do no error processing.
*/
#define YYCODETYPE unsigned char
#define YYNOCODE 135
#define YYACTIONTYPE unsigned short int
#define XecParseTOKENTYPE  xec_token* 
typedef union {
  int yyinit;
  XecParseTOKENTYPE yy0;
  xec_statement_try* yy1;
  xec_token* yy15;
  xec_declaration_object* yy18;
  xec_statement_compound* yy31;
  xec_constructor_table* yy32;
  xec_declaration* yy52;
  xec_statement* yy95;
  xec_constructor_list* yy103;
  xec_expression* yy154;
  xec_expression_list* yy193;
  xec_expression_call* yy225;
  xec_statement_catch* yy241;
} YYMINORTYPE;
#ifndef YYSTACKDEPTH
#define YYSTACKDEPTH 100
#endif
#define XecParseARG_SDECL  xec_parser* p ;
#define XecParseARG_PDECL , xec_parser* p 
#define XecParseARG_FETCH  xec_parser* p  = yypParser->p 
#define XecParseARG_STORE yypParser->p  = p 
#define YYNSTATE 448
#define YYNRULE 224
#define YY_NO_ACTION      (YYNSTATE+YYNRULE+2)
#define YY_ACCEPT_ACTION  (YYNSTATE+YYNRULE+1)
#define YY_ERROR_ACTION   (YYNSTATE+YYNRULE)

/* The yyzerominor constant is used to initialize instances of
** YYMINORTYPE objects to zero. */
static const YYMINORTYPE yyzerominor = { 0 };

/* Define the yytestcase() macro to be a no-op if is not already defined
** otherwise.
**
** Applications can choose to define yytestcase() in the %include section
** to a macro that can assist in verifying code coverage.  For production
** code the yytestcase() macro should be turned off.  But it is useful
** for testing.
*/
#ifndef yytestcase
# define yytestcase(X)
#endif


/* Next are the tables used to determine what action to take based on the
** current state and lookahead token.  These tables are used to implement
** functions that take a state number and lookahead value and return an
** action integer.  
**
** Suppose the action integer is N.  Then the action is determined as
** follows
**
**   0 <= N < YYNSTATE                  Shift N.  That is, push the lookahead
**                                      token onto the stack and goto state N.
**
**   YYNSTATE <= N < YYNSTATE+YYNRULE   Reduce by rule N-YYNSTATE.
**
**   N == YYNSTATE+YYNRULE              A syntax error has occurred.
**
**   N == YYNSTATE+YYNRULE+1            The parser accepts its input.
**
**   N == YYNSTATE+YYNRULE+2            No such action.  Denotes unused
**                                      slots in the yy_action[] table.
**
** The action table is constructed as a single large table named yy_action[].
** Given state S and lookahead X, the action is computed as
**
**      yy_action[ yy_shift_ofst[S] + X ]
**
** If the index value yy_shift_ofst[S]+X is out of range or if the value
** yy_lookahead[yy_shift_ofst[S]+X] is not equal to X or if yy_shift_ofst[S]
** is equal to YY_SHIFT_USE_DFLT, it means that the action is not in the table
** and that yy_default[S] should be used instead.  
**
** The formula above is for computing the action when the lookahead is
** a terminal symbol.  If the lookahead is a non-terminal (as occurs after
** a reduce action) then the yy_reduce_ofst[] array is used in place of
** the yy_shift_ofst[] array and YY_REDUCE_USE_DFLT is used in place of
** YY_SHIFT_USE_DFLT.
**
** The following are the tables generated in this section:
**
**  yy_action[]        A single table containing all actions.
**  yy_lookahead[]     A table containing the lookahead for each entry in
**                     yy_action.  Used to detect hash collisions.
**  yy_shift_ofst[]    For each state, the offset into yy_action for
**                     shifting terminals.
**  yy_reduce_ofst[]   For each state, the offset into yy_action for
**                     shifting non-terminals after a reduce.
**  yy_default[]       Default action for each state.
*/
static const YYACTIONTYPE yy_action[] = {
 /*     0 */   449,  244,   74,   17,    1,  339,  158,  239,   26,   32,
 /*    10 */     1,  363,  317,  190,  174,  109,  123,  309,  317,   34,
 /*    20 */    44,  120,  403,  400,  399,  396,  386,  107,  100,  108,
 /*    30 */    99,  102,  106,  140,  284,  130,  373,  362,  429,  138,
 /*    40 */   135,  133,  131,  132,  377,  178,  338,  163,  179,  168,
 /*    50 */   241,  240,  237,  235,  162,  208,  159,  409,  383,   80,
 /*    60 */    83,   85,   84,   82,   86,   89,   88,   81,   87,   27,
 /*    70 */    42,  247,   69,  250,  251,    6,  257,   28,  259,  260,
 /*    80 */    35,   70,  244,  394,   17,  374,  419,  158,  239,   26,
 /*    90 */    32,    1,  378,  317,  190,  171,  109,  123,  334,  366,
 /*   100 */    34,   50,  120,  403,  400,  399,  396,  386,  107,  100,
 /*   110 */   108,   99,  102,  106,  140,  286,  130,  358,  149,  429,
 /*   120 */   138,  135,  133,  131,  132,  377,  178,  338,  163,  179,
 /*   130 */   168,  241,  240,  237,  235,  161,  417,  159,  409,  140,
 /*   140 */   320,  130,   97,   98,  145,  138,  135,  133,  131,  132,
 /*   150 */   313,   42,  247,   69,  250,  251,    6,  257,  137,  259,
 /*   160 */   260,   35,   70,  244,  136,   17,   77,   76,  158,  239,
 /*   170 */    26,   32,    1,  342,  317,  190,  177,  109,  123,  309,
 /*   180 */   283,   34,   62,  120,  403,  400,  399,  396,  386,  107,
 /*   190 */   100,  108,   99,  102,  106,  140,  365,  130,  266,   19,
 /*   200 */   429,  138,  135,  133,  131,  132,  377,  178,  338,  163,
 /*   210 */   179,  168,  241,  240,  237,  225,  310,  417,  159,  409,
 /*   220 */   140,  394,  130,   12,  114,  156,  138,  135,  133,  131,
 /*   230 */   132,    1,   42,  247,   69,  250,  251,    6,  257,  312,
 /*   240 */   259,  260,   35,   70,  448,  244,   67,   17,  314,  325,
 /*   250 */   158,  239,   26,   32,    1,   63,  317,  190,  175,  109,
 /*   260 */   123,  334,  331,   34,   56,  120,  403,  400,  399,  396,
 /*   270 */   386,  107,  100,  108,   99,  102,  106,  140,  423,  130,
 /*   280 */   320,  366,  429,  138,  135,  133,  131,  132,  377,  178,
 /*   290 */   338,  163,  179,  168,  241,  240,  237,  215,  282,  155,
 /*   300 */   159,  409,  140,   37,  130,  266,   16,  160,  138,  135,
 /*   310 */   133,  131,  132,  349,   42,  247,   69,  250,  251,    6,
 /*   320 */   257,  364,  259,  260,   35,   70,  244,  359,   17,  189,
 /*   330 */   169,  158,  239,   26,   32,    1,  114,  317,  190,  171,
 /*   340 */   109,  111,  189,  164,   34,   50,  120,  403,  400,  399,
 /*   350 */   396,  386,  107,  100,  108,   99,  102,  106,  140,    1,
 /*   360 */   130,  189,  184,  429,  138,  135,  133,  131,  132,  377,
 /*   370 */   178,  338,  163,  179,  168,  241,  240,  237,  233,  289,
 /*   380 */   150,  159,  409,  140,    1,  130,   71,  371,  268,  138,
 /*   390 */   135,  133,  131,  132,   55,   42,  247,   69,  250,  251,
 /*   400 */     6,  257,  367,  259,  260,   35,   70,  673,    2,  118,
 /*   410 */   333,  141,  412,  414,  117,   32,  116,  328,  185,  429,
 /*   420 */   139,  129,  143,  127,  142,  377,  178,  338,  163,  179,
 /*   430 */   168,  241,  240,  237,  235,  162,  213,  186,  183,  315,
 /*   440 */   153,  152,  322,   26,    1,  114,  340,  317,  147,  125,
 /*   450 */   323,  243,    1,   33,   20,  324,  120,  115,  118,  360,
 /*   460 */   141,  412,  416,  439,  285,   32,    3,  361,  333,   26,
 /*   470 */   176,   73,  117,  317,  116,  328,   54,  429,  139,  129,
 /*   480 */   143,  127,  142,  377,  178,  338,  163,  179,  168,  241,
 /*   490 */   240,  237,  235,  162,  213,  186,  183,  315,  401,   32,
 /*   500 */   322,  114,  144,  188,  194,   72,  111,  125,  323,  243,
 /*   510 */   333,   33,   20,  324,  117,  114,  116,  443,  351,  429,
 /*   520 */   139,  129,  143,  127,  142,  377,  178,  338,  163,  179,
 /*   530 */   168,  241,  240,  237,  235,  162,  213,  186,  183,  315,
 /*   540 */   155,  447,  322,  418,   36,  210,  369,   32,   75,  125,
 /*   550 */   323,  243,  173,   33,   20,  440,  148,   78,   47,  333,
 /*   560 */   356,  384,  317,  134,  194,  128,  123,  415,  429,  139,
 /*   570 */   129,  143,  127,  142,  377,  178,  338,  163,  179,  168,
 /*   580 */   241,  240,  237,  235,  162,  213,  186,  183,  315,  154,
 /*   590 */   372,  322,  105,  101,  103,  104,  424,   65,  125,  323,
 /*   600 */   243,  333,   33,   20,  390,  134,  194,  128,  112,   61,
 /*   610 */   429,  139,  129,  143,  127,  142,  377,  178,  338,  163,
 /*   620 */   179,  168,  241,  240,  237,  235,  162,  213,  186,  183,
 /*   630 */   315,  401,   59,  322,  382,  387,  202,  389,   32,   51,
 /*   640 */   125,  323,  243,  176,   33,   20,  388,  385,  393,   43,
 /*   650 */   333,  395,  379,  317,  134,  397,  128,  123,  413,  429,
 /*   660 */   139,  129,  143,  127,  142,  377,  178,  338,  163,  179,
 /*   670 */   168,  241,  240,  237,  235,  162,  213,  186,  183,  315,
 /*   680 */   155,   66,  322,  402,   37,   40,  404,  398,   79,  125,
 /*   690 */   323,  243,  333,   33,   20,  407,  134,  421,  128,  423,
 /*   700 */   427,  429,  139,  129,  143,  127,  142,  377,  178,  338,
 /*   710 */   163,  179,  168,  241,  240,  237,  235,  162,  213,  186,
 /*   720 */   183,  315,   39,  152,  322,   26,   96,   95,   94,  317,
 /*   730 */   434,  125,  323,  243,   90,   33,   20,  288,  120,  437,
 /*   740 */   441,  333,  444,   68,  280,  134,  287,  128,  306,  308,
 /*   750 */   429,  139,  129,  143,  127,  142,  377,  178,  338,  163,
 /*   760 */   179,  168,  241,  240,  237,  235,  162,  213,  186,  183,
 /*   770 */   315,  311,   91,  322,   92,   93,   23,  335,   18,   22,
 /*   780 */   125,  323,  243,  333,   33,   20,  119,  134,   10,  128,
 /*   790 */    24,    9,  429,  139,  129,  143,  127,  142,  377,  178,
 /*   800 */   338,  163,  179,  168,  241,  240,  237,  235,  162,  213,
 /*   810 */   186,  183,  315,  157,  354,  322,  357,   25,  281,    4,
 /*   820 */    32,  254,  125,  323,  243,  173,   33,   20,  316,   32,
 /*   830 */    31,   57,  333,  256,  174,  392,  134,   21,  128,    7,
 /*   840 */    58,  429,  139,  129,  143,  127,  142,  377,  178,  338,
 /*   850 */   163,  179,  168,  241,  240,  237,  235,  162,  213,  186,
 /*   860 */   183,  315,  420,  426,  322,  435,  442,  436,  446,  307,
 /*   870 */    46,  125,  323,  243,  333,   33,   20,  433,  134,  113,
 /*   880 */   128,   15,    8,  429,  139,  129,  143,  127,  142,  377,
 /*   890 */   178,  338,  163,  179,  168,  241,  240,  237,  235,  162,
 /*   900 */   213,  186,  183,  315,  344,   32,  322,   13,  381,   11,
 /*   910 */   172,  422,    5,  125,  323,  243,   53,   33,   20,  246,
 /*   920 */    14,   30,   29,  333,  353,  674,  674,  134,  674,  128,
 /*   930 */   674,  674,  429,  139,  129,  143,  127,  142,  377,  178,
 /*   940 */   338,  163,  179,  168,  241,  240,  237,  235,  162,  213,
 /*   950 */   186,  183,  315,  674,  674,  322,  674,  674,  674,  674,
 /*   960 */   674,  674,  125,  323,  243,  333,   33,   20,  346,  134,
 /*   970 */   674,  128,  674,  674,  429,  139,  129,  143,  127,  142,
 /*   980 */   377,  178,  338,  163,  179,  168,  241,  240,  237,  235,
 /*   990 */   162,  213,  186,  183,  315,  674,   32,  322,  674,  674,
 /*  1000 */   674,  171,  674,  674,  125,  323,  243,   64,   33,   20,
 /*  1010 */   347,  674,  674,  674,  333,  674,  674,  674,  134,  674,
 /*  1020 */   128,  674,  674,  429,  139,  129,  143,  127,  142,  377,
 /*  1030 */   178,  338,  163,  179,  168,  241,  240,  237,  235,  162,
 /*  1040 */   213,  186,  183,  315,  674,  674,  322,  674,  674,  674,
 /*  1050 */   674,  674,  674,  125,  323,  243,  333,   33,   20,  406,
 /*  1060 */   134,  674,  128,  674,  674,  429,  139,  129,  143,  127,
 /*  1070 */   142,  377,  178,  338,  163,  179,  168,  241,  240,  237,
 /*  1080 */   235,  162,  213,  186,  183,  315,  674,   32,  322,  674,
 /*  1090 */   674,  674,  172,  674,  674,  125,  323,  243,   45,   33,
 /*  1100 */    20,  253,  674,  674,  674,  333,  674,  674,  674,  134,
 /*  1110 */   674,  128,  674,  674,  429,  139,  129,  143,  127,  142,
 /*  1120 */   377,  178,  338,  163,  179,  168,  241,  240,  237,  235,
 /*  1130 */   162,  213,  186,  183,  315,  674,  674,  322,  674,  674,
 /*  1140 */   674,  674,  674,  674,  125,  323,  243,  333,   33,   20,
 /*  1150 */   305,  134,  674,  128,  674,  674,  429,  139,  129,  143,
 /*  1160 */   127,  142,  377,  178,  338,  163,  179,  168,  241,  240,
 /*  1170 */   237,  235,  162,  213,  186,  183,  315,  674,   32,  322,
 /*  1180 */   674,  674,  674,  177,  674,  674,  125,  323,  243,   49,
 /*  1190 */    33,   20,  376,  674,  674,  674,  333,  674,  674,  674,
 /*  1200 */   134,  674,  128,  674,  674,  429,  139,  129,  143,  127,
 /*  1210 */   142,  377,  178,  338,  163,  179,  168,  241,  240,  237,
 /*  1220 */   235,  162,  213,  186,  183,  315,  674,  674,  322,  674,
 /*  1230 */   674,  674,  674,  674,  674,  125,  323,  243,  333,   33,
 /*  1240 */    20,  355,  134,  674,  128,  674,  674,  429,  139,  129,
 /*  1250 */   143,  127,  142,  377,  178,  338,  163,  179,  168,  241,
 /*  1260 */   240,  237,  235,  162,  213,  186,  183,  315,  674,   32,
 /*  1270 */   322,  674,  674,  674,  175,  674,  674,  125,  323,  243,
 /*  1280 */    48,   33,   20,  327,  674,  290,  674,  134,  674,  128,
 /*  1290 */   674,  674,  429,  139,  129,  143,  127,  142,  377,  178,
 /*  1300 */   338,  163,  179,  168,  241,  240,  237,  235,  162,  213,
 /*  1310 */   186,  183,  368,  405,  126,  411,  326,  674,  674,  674,
 /*  1320 */   674,  674,  674,  674,  290,  248,  134,  674,  128,  674,
 /*  1330 */   674,  429,  139,  129,  143,  127,  142,  377,  178,  338,
 /*  1340 */   163,  179,  168,  241,  240,  237,  235,  162,  213,  186,
 /*  1350 */   183,  368,  405,  126,  411,  326,  674,  674,  674,  290,
 /*  1360 */   674,  134,  674,  128,  252,  674,  429,  139,  129,  143,
 /*  1370 */   127,  142,  377,  178,  338,  163,  179,  168,  241,  240,
 /*  1380 */   237,  235,  162,  213,  186,  183,  368,  405,  124,  411,
 /*  1390 */   326,  674,  674,  290,  674,  134,  674,  128,  674,  276,
 /*  1400 */   429,  139,  129,  143,  127,  142,  377,  178,  338,  163,
 /*  1410 */   179,  168,  241,  240,  237,  235,  162,  213,  186,  183,
 /*  1420 */   368,  405,  126,  411,  326,  674,  674,  290,  674,  134,
 /*  1430 */   674,  128,  674,  245,  429,  139,  129,  143,  127,  142,
 /*  1440 */   377,  178,  338,  163,  179,  168,  241,  240,  237,  235,
 /*  1450 */   162,  213,  186,  183,  368,  405,  126,  411,  326,  674,
 /*  1460 */   674,  290,  674,  134,  674,  128,  674,  242,  429,  139,
 /*  1470 */   129,  143,  127,  142,  377,  178,  338,  163,  179,  168,
 /*  1480 */   241,  240,  237,  235,  162,  213,  186,  183,  368,  405,
 /*  1490 */   126,  411,  326,  674,  674,  290,  674,  134,  674,  128,
 /*  1500 */   674,  264,  429,  139,  129,  143,  127,  142,  377,  178,
 /*  1510 */   338,  163,  179,  168,  241,  240,  237,  235,  162,  213,
 /*  1520 */   186,  183,  368,  405,  126,  411,  321,  290,  674,  134,
 /*  1530 */   674,  128,  674,  674,  429,  139,  129,  143,  127,  142,
 /*  1540 */   377,  178,  338,  163,  179,  168,  241,  240,  237,  235,
 /*  1550 */   162,  213,  186,  183,  368,  405,  126,  411,  255,  290,
 /*  1560 */   674,  134,  674,  128,  674,  674,  429,  139,  129,  143,
 /*  1570 */   127,  142,  377,  178,  338,  163,  179,  168,  241,  240,
 /*  1580 */   237,  235,  162,  213,  186,  183,  368,  405,  126,  411,
 /*  1590 */   278,  290,  674,  134,  674,  128,  674,  674,  429,  139,
 /*  1600 */   129,  143,  127,  142,  377,  178,  338,  163,  179,  168,
 /*  1610 */   241,  240,  237,  235,  162,  213,  186,  183,  368,  405,
 /*  1620 */   126,  411,  272,  290,  674,  134,  674,  128,  674,  674,
 /*  1630 */   429,  139,  129,  143,  127,  142,  377,  178,  338,  163,
 /*  1640 */   179,  168,  241,  240,  237,  235,  162,  213,  186,  183,
 /*  1650 */   368,  405,  126,  411,  277,  290,  674,  134,  674,  128,
 /*  1660 */   674,  674,  429,  139,  129,  143,  127,  142,  377,  178,
 /*  1670 */   338,  163,  179,  168,  241,  240,  237,  235,  162,  213,
 /*  1680 */   186,  183,  368,  405,  126,  411,  291,  674,  674,  134,
 /*  1690 */   674,  128,  674,  674,  429,  139,  129,  143,  127,  142,
 /*  1700 */   377,  178,  338,  163,  179,  168,  241,  240,  237,  235,
 /*  1710 */   162,  213,  186,  183,  368,  428,  674,  214,  674,  674,
 /*  1720 */   212,  211,  261,  674,  134,  674,  128,  674,  674,  429,
 /*  1730 */   139,  129,  143,  127,  142,  377,  178,  338,  163,  179,
 /*  1740 */   168,  241,  240,  237,  235,  162,  213,  186,  183,  368,
 /*  1750 */   405,  207,  411,  330,  674,  134,  674,  128,  674,  674,
 /*  1760 */   429,  139,  129,  143,  127,  142,  377,  178,  338,  163,
 /*  1770 */   179,  168,  241,  240,  237,  235,  162,  213,  186,  183,
 /*  1780 */   368,  405,  207,  411,  279,  674,  134,  674,  128,  674,
 /*  1790 */   674,  429,  139,  129,  143,  127,  142,  377,  178,  338,
 /*  1800 */   163,  179,  168,  241,  240,  237,  235,  162,  213,  186,
 /*  1810 */   183,  368,  405,  207,  411,  274,  674,  134,  674,  128,
 /*  1820 */   674,  674,  429,  139,  129,  143,  127,  142,  377,  178,
 /*  1830 */   338,  163,  179,  168,  241,  240,  237,  235,  162,  213,
 /*  1840 */   186,  183,  368,  405,  207,  411,  262,  674,  134,  674,
 /*  1850 */   128,  674,  674,  429,  139,  129,  143,  127,  142,  377,
 /*  1860 */   178,  338,  163,  179,  168,  241,  240,  237,  235,  162,
 /*  1870 */   213,  186,  183,  368,  405,  207,  411,  140,  674,  130,
 /*  1880 */   674,  674,  429,  138,  135,  133,  131,  132,  377,  178,
 /*  1890 */   338,  163,  179,  168,  241,  240,  237,  235,  162,  213,
 /*  1900 */   186,  183,  368,  192,  674,  674,  674,  674,  674,  674,
 /*  1910 */   193,  191,  674,  140,  674,  130,  674,  674,  429,  138,
 /*  1920 */   135,  133,  131,  132,  377,  178,  338,  163,  179,  168,
 /*  1930 */   241,  240,  237,  235,  162,  213,  186,  183,  368,  405,
 /*  1940 */   170,  134,  674,  128,  674,  674,  429,  139,  129,  143,
 /*  1950 */   127,  142,  377,  178,  338,  163,  179,  168,  241,  240,
 /*  1960 */   237,  235,  162,  213,  186,  183,  368,  408,  134,  410,
 /*  1970 */   128,  674,  674,  429,  139,  129,  143,  127,  142,  377,
 /*  1980 */   178,  338,  163,  179,  168,  241,  240,  237,  235,  162,
 /*  1990 */   213,  186,  183,  368,  431,  674,  432,  674,  674,  674,
 /*  2000 */   674,  134,  674,  128,  674,  674,  429,  139,  129,  143,
 /*  2010 */   127,  142,  377,  178,  338,  163,  179,  168,  241,  240,
 /*  2020 */   237,  235,  162,  213,  186,  183,  368,  318,  140,  319,
 /*  2030 */   130,  674,  674,  429,  138,  135,  133,  131,  132,  377,
 /*  2040 */   178,  338,  163,  179,  168,  241,  240,  237,  235,  162,
 /*  2050 */   213,  186,  183,  368,  222,  140,  674,  130,  674,  674,
 /*  2060 */   429,  138,  135,  133,  131,  132,  377,  178,  338,  163,
 /*  2070 */   179,  168,  241,  240,  237,  235,  162,  213,  186,  183,
 /*  2080 */   368,  229,  140,  674,  130,  674,  674,  429,  138,  135,
 /*  2090 */   133,  131,  132,  377,  178,  338,  163,  179,  168,  241,
 /*  2100 */   240,  237,  235,  162,  213,  186,  183,  368,  375,  140,
 /*  2110 */   674,  130,  674,  674,  429,  138,  135,  133,  131,  132,
 /*  2120 */   377,  178,  338,  163,  179,  168,  241,  240,  237,  235,
 /*  2130 */   162,  213,  186,  183,  368,  273,  140,  674,  130,  674,
 /*  2140 */   674,  429,  138,  135,  133,  131,  132,  377,  178,  338,
 /*  2150 */   163,  179,  168,  241,  240,  237,  235,  162,  213,  186,
 /*  2160 */   183,  368,  220,  140,  674,  130,  674,  674,  429,  138,
 /*  2170 */   135,  133,  131,  132,  377,  178,  338,  163,  179,  168,
 /*  2180 */   241,  240,  237,  235,  162,  213,  186,  183,  368,  275,
 /*  2190 */   140,  674,  130,  674,  674,  429,  138,  135,  133,  131,
 /*  2200 */   132,  377,  178,  338,  163,  179,  168,  241,  240,  237,
 /*  2210 */   235,  162,  213,  186,  183,  368,  249,  140,  674,  130,
 /*  2220 */   674,  674,  429,  138,  135,  133,  131,  132,  377,  178,
 /*  2230 */   338,  163,  179,  168,  241,  240,  237,  235,  162,  213,
 /*  2240 */   186,  183,  368,  265,  140,  674,  130,  674,  674,  429,
 /*  2250 */   138,  135,  133,  131,  132,  377,  178,  338,  163,  179,
 /*  2260 */   168,  241,  240,  237,  235,  162,  213,  186,  183,  368,
 /*  2270 */   218,  140,  674,  130,  674,  674,  429,  138,  135,  133,
 /*  2280 */   131,  132,  377,  178,  338,  163,  179,  168,  241,  240,
 /*  2290 */   237,  235,  162,  213,  186,  183,  368,  230,  140,  674,
 /*  2300 */   130,  674,  674,  429,  138,  135,  133,  131,  132,  377,
 /*  2310 */   178,  338,  163,  179,  168,  241,  240,  237,  235,  162,
 /*  2320 */   213,  186,  183,  368,  216,  140,  674,  130,  674,  674,
 /*  2330 */   429,  138,  135,  133,  131,  132,  377,  178,  338,  163,
 /*  2340 */   179,  168,  241,  240,  237,  235,  162,  213,  186,  183,
 /*  2350 */   368,  408,  140,  674,  130,  674,  674,  429,  138,  135,
 /*  2360 */   133,  131,  132,  377,  178,  338,  163,  179,  168,  241,
 /*  2370 */   240,  237,  235,  162,  213,  186,  183,  368,  263,  140,
 /*  2380 */   674,  130,  674,  674,  429,  138,  135,  133,  131,  132,
 /*  2390 */   377,  178,  338,  163,  179,  168,  241,  240,  237,  235,
 /*  2400 */   162,  213,  186,  183,  368,  203,  140,  674,  130,  674,
 /*  2410 */   674,  429,  138,  135,  133,  131,  132,  377,  178,  338,
 /*  2420 */   163,  179,  168,  241,  240,  237,  235,  162,  213,  186,
 /*  2430 */   183,  368,  200,  140,  674,  130,  674,  674,  429,  138,
 /*  2440 */   135,  133,  131,  132,  377,  178,  338,  163,  179,  168,
 /*  2450 */   241,  240,  237,  235,  162,  213,  186,  183,  368,  187,
 /*  2460 */   140,  674,  130,  674,  674,  429,  138,  135,  133,  131,
 /*  2470 */   132,  377,  178,  338,  163,  179,  168,  241,  240,  237,
 /*  2480 */   235,  162,  213,  186,  183,  368,  270,  140,  674,  130,
 /*  2490 */   674,  674,  429,  138,  135,  133,  131,  132,  377,  178,
 /*  2500 */   338,  163,  179,  168,  241,  240,  237,  235,  162,  213,
 /*  2510 */   186,  183,  368,  267,  140,  674,  130,  674,  674,  429,
 /*  2520 */   138,  135,  133,  131,  132,  377,  178,  338,  163,  179,
 /*  2530 */   168,  241,  240,  237,  235,  162,  213,  186,  183,  368,
 /*  2540 */   199,  140,  674,  130,  674,  674,  429,  138,  135,  133,
 /*  2550 */   131,  132,  377,  178,  338,  163,  179,  168,  241,  240,
 /*  2560 */   237,  235,  162,  213,  186,  183,  368,  197,  140,  674,
 /*  2570 */   130,  674,  674,  429,  138,  135,  133,  131,  132,  377,
 /*  2580 */   178,  338,  163,  179,  168,  241,  240,  237,  235,  162,
 /*  2590 */   213,  186,  183,  368,  205,  140,  674,  130,  674,  674,
 /*  2600 */   429,  138,  135,  133,  131,  132,  377,  178,  338,  163,
 /*  2610 */   179,  168,  241,  240,  237,  235,  162,  213,  186,  183,
 /*  2620 */   368,  391,  140,  674,  130,  674,  674,  429,  138,  135,
 /*  2630 */   133,  131,  132,  377,  178,  338,  163,  179,  168,  241,
 /*  2640 */   240,  237,  235,  162,  213,  186,  183,  368,  258,  140,
 /*  2650 */   674,  130,  674,  674,  429,  138,  135,  133,  131,  132,
 /*  2660 */   377,  178,  338,  163,  179,  168,  241,  240,  237,  235,
 /*  2670 */   162,  213,  186,  183,  368,  224,  140,  674,  130,  674,
 /*  2680 */   674,  429,  138,  135,  133,  131,  132,  377,  178,  338,
 /*  2690 */   163,  179,  168,  241,  240,  237,  235,  162,  213,  186,
 /*  2700 */   183,  368,  380,  140,  674,  130,  674,  674,  429,  138,
 /*  2710 */   135,  133,  131,  132,  377,  178,  338,  163,  179,  168,
 /*  2720 */   241,  240,  237,  235,  162,  213,  186,  183,  368,  271,
 /*  2730 */   140,  674,  130,  674,  674,  429,  138,  135,  133,  131,
 /*  2740 */   132,  377,  178,  338,  163,  179,  168,  241,  240,  237,
 /*  2750 */   235,  162,  213,  186,  183,  368,  195,  152,  674,   26,
 /*  2760 */   674,   38,  674,  317,  190,  674,  109,  122,  674,  674,
 /*  2770 */    34,  674,  120,  403,  400,  399,  396,  386,  107,  100,
 /*  2780 */   108,   99,  102,  106,  140,  674,  130,  674,  674,  429,
 /*  2790 */   138,  135,  133,  131,  132,  377,  178,  338,  163,  179,
 /*  2800 */   168,  241,  240,  237,  219,  674,  674,  159,  409,  674,
 /*  2810 */   674,  674,  674,  674,  152,  674,   26,  445,   38,  674,
 /*  2820 */   317,  190,  674,  109,  674,  674,  674,   34,  674,  120,
 /*  2830 */   403,  400,  399,  396,  386,  107,  100,  108,   99,  102,
 /*  2840 */   106,  674,  140,  674,  130,  674,  674,  429,  138,  135,
 /*  2850 */   133,  131,  132,  377,  178,  338,  163,  179,  168,  241,
 /*  2860 */   240,  237,  231,  674,  159,  409,  674,  674,  674,  674,
 /*  2870 */   674,  152,  674,   26,  674,   38,  674,  317,  190,  674,
 /*  2880 */   109,  121,  674,  674,   34,  674,  120,  403,  400,  399,
 /*  2890 */   396,  386,  107,  100,  108,   99,  102,  106,  674,  140,
 /*  2900 */   674,  130,  674,  674,  429,  138,  135,  133,  131,  132,
 /*  2910 */   377,  178,  338,  163,  179,  168,  241,  240,  237,  221,
 /*  2920 */   674,  159,  409,  674,  674,  674,  674,  674,  152,  674,
 /*  2930 */    26,  674,   38,  674,  317,  190,  674,  109,  674,  430,
 /*  2940 */   674,   34,  674,  120,  403,  400,  399,  396,  386,  107,
 /*  2950 */   100,  108,   99,  102,  106,  674,  140,  674,  130,  674,
 /*  2960 */   674,  429,  138,  135,  133,  131,  132,  377,  178,  338,
 /*  2970 */   163,  179,  168,  241,  240,  237,  223,  674,  159,  409,
 /*  2980 */   674,  674,  674,  674,  674,  152,  674,   26,  674,   38,
 /*  2990 */   674,  317,  190,  674,  109,  674,  674,  674,   34,  425,
 /*  3000 */   120,  403,  400,  399,  396,  386,  107,  100,  108,   99,
 /*  3010 */   102,  106,  674,  140,  674,  130,  674,  674,  429,  138,
 /*  3020 */   135,  133,  131,  132,  377,  178,  338,  163,  179,  168,
 /*  3030 */   241,  240,  237,  227,  674,  159,  409,  674,  674,  674,
 /*  3040 */   674,  674,  152,  674,   26,  674,   38,  674,  317,  190,
 /*  3050 */   674,  109,  674,  438,  674,   34,  674,  120,  403,  400,
 /*  3060 */   399,  396,  386,  107,  100,  108,   99,  102,  106,  674,
 /*  3070 */   140,  674,  130,  674,  674,  429,  138,  135,  133,  131,
 /*  3080 */   132,  377,  178,  338,  163,  179,  168,  241,  240,  237,
 /*  3090 */   217,  674,  159,  409,  674,  674,  674,  674,  674,  152,
 /*  3100 */   674,   26,  674,   38,  674,  317,  190,  674,  109,  674,
 /*  3110 */   674,  674,   34,  674,  120,  403,  400,  399,  396,  386,
 /*  3120 */   107,  100,  108,   99,  102,  106,  674,  140,  674,  130,
 /*  3130 */   674,  674,  429,  138,  135,  133,  131,  132,  377,  178,
 /*  3140 */   338,  163,  179,  168,  241,  240,  237,  228,  674,  159,
 /*  3150 */   409,  674,  674,  674,  674,  674,  152,  674,   26,  674,
 /*  3160 */    38,  674,  317,  190,  674,  109,  674,  674,  674,   34,
 /*  3170 */   201,  120,  403,  400,  399,  396,  386,  107,  100,  108,
 /*  3180 */    99,  102,  106,  674,  140,  674,  130,  674,  674,  429,
 /*  3190 */   138,  135,  133,  131,  132,  377,  178,  338,  163,  179,
 /*  3200 */   168,  241,  240,  234,   40,   52,  159,  674,  292,  674,
 /*  3210 */   674,  674,  674,  152,  674,   26,  674,   38,  674,  317,
 /*  3220 */   190,  674,  109,  674,  674,  674,   34,  196,  120,  403,
 /*  3230 */   400,  399,  396,  386,  107,  100,  108,   99,  102,  106,
 /*  3240 */   674,  674,  674,  674,  674,  674,  674,  674,  293,  294,
 /*  3250 */   295,  296,  297,  298,  299,  300,  301,  302,  303,  304,
 /*  3260 */   674,  674,  674,  159,  674,  674,  674,   60,  674,  674,
 /*  3270 */   152,  674,   26,  674,   38,  674,  317,  190,  674,  109,
 /*  3280 */   674,  674,  674,   34,  226,  120,  403,  400,  399,  396,
 /*  3290 */   386,  107,  100,  108,   99,  102,  106,  674,  674,  140,
 /*  3300 */   674,  130,  674,  674,  429,  138,  135,  133,  131,  132,
 /*  3310 */   377,  178,  338,  163,  179,  168,  241,  236,  674,  674,
 /*  3320 */   159,  674,  674,  674,  674,  674,  674,  152,  674,   26,
 /*  3330 */   674,   38,  674,  317,  190,  674,  110,  151,  674,  674,
 /*  3340 */    34,  674,  120,  403,  400,  399,  396,  386,  107,  100,
 /*  3350 */   108,   99,  102,  106,  674,  674,  674,  674,  140,  674,
 /*  3360 */   130,  674,  674,  429,  138,  135,  133,  131,  132,  377,
 /*  3370 */   178,  338,  163,  179,  168,  238,  674,  159,   41,  674,
 /*  3380 */   674,  674,  292,  674,  152,  674,   26,  674,   38,  674,
 /*  3390 */   317,  190,  674,  109,  674,  674,  674,   34,  209,  120,
 /*  3400 */   403,  400,  399,  396,  386,  107,  100,  108,   99,  102,
 /*  3410 */   106,  674,  674,  674,  674,  674,  674,  674,  674,  674,
 /*  3420 */   674,  674,  293,  294,  295,  296,  297,  298,  299,  300,
 /*  3430 */   301,  302,  303,  304,  159,  674,  674,  674,  674,  674,
 /*  3440 */   674,  152,  674,   26,  674,   38,  674,  317,  190,  674,
 /*  3450 */   109,  674,  674,  674,   34,  198,  120,  403,  400,  399,
 /*  3460 */   396,  386,  107,  100,  108,   99,  102,  106,  674,  140,
 /*  3470 */   674,  130,  674,  674,  429,  138,  135,  133,  131,  132,
 /*  3480 */   377,  178,  338,  163,  179,  167,   40,  674,  674,  674,
 /*  3490 */   292,  159,  674,  674,  674,  674,  674,  674,  152,  674,
 /*  3500 */    26,  674,   38,  674,  317,  190,  674,  109,  674,  674,
 /*  3510 */   674,   34,  206,  120,  403,  400,  399,  396,  386,  107,
 /*  3520 */   100,  108,   99,  102,  106,  674,  674,  674,  674,  674,
 /*  3530 */   293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
 /*  3540 */   303,  304,  674,  674,  674,  674,  674,  674,  159,  674,
 /*  3550 */   674,  674,  674,  674,  674,  152,  674,   26,  674,   38,
 /*  3560 */   674,  317,  190,  674,  109,  674,  674,  674,   34,  232,
 /*  3570 */   120,  403,  400,  399,  396,  386,  107,  100,  108,   99,
 /*  3580 */   102,  106,  674,  674,  674,  674,  674,  674,  674,  140,
 /*  3590 */   674,  130,  674,  674,  269,  138,  135,  133,  131,  132,
 /*  3600 */   674,  674,  140,  674,  130,  159,  674,  429,  138,  135,
 /*  3610 */   133,  131,  132,  377,  178,  338,  163,  179,  168,  241,
 /*  3620 */   240,  237,  235,  162,  213,  204,  152,  674,   26,  674,
 /*  3630 */    38,  370,  317,  190,  674,  109,  674,  674,  674,   34,
 /*  3640 */   674,  120,  403,  400,  399,  396,  386,  107,  100,  108,
 /*  3650 */    99,  102,  106,  140,  674,  130,  674,  674,  429,  138,
 /*  3660 */   135,  133,  131,  132,  377,  178,  338,  163,  181,  674,
 /*  3670 */   674,  674,  674,  674,  674,  674,  159,  674,  674,  674,
 /*  3680 */   674,  674,  674,  152,  674,   26,  674,   38,  674,  317,
 /*  3690 */   190,  674,  109,  674,  674,  674,   34,  674,  120,  403,
 /*  3700 */   400,  399,  396,  386,  107,  100,  108,   99,  102,  106,
 /*  3710 */   674,  140,  674,  130,  674,  674,  429,  138,  135,  133,
 /*  3720 */   131,  132,  377,  178,  338,  163,  180,  674,  674,  674,
 /*  3730 */   674,  674,  674,  159,  674,  674,  674,  674,  674,  674,
 /*  3740 */   152,  674,   26,  674,  674,  674,  317,  674,  674,  674,
 /*  3750 */   674,  674,  674,  674,  674,  120,  403,  400,  399,  396,
 /*  3760 */   386,  107,  100,  108,   99,  102,  106,  674,  674,  674,
 /*  3770 */   674,  674,  674,  674,  140,  674,  130,  674,  674,  429,
 /*  3780 */   138,  135,  133,  131,  132,  377,  178,  338,  163,  182,
 /*  3790 */   140,  674,  130,  674,  674,  429,  138,  135,  133,  131,
 /*  3800 */   132,  377,  178,  338,  166,  674,  674,  140,  674,  130,
 /*  3810 */   674,  674,  429,  138,  135,  133,  131,  132,  377,  178,
 /*  3820 */   338,  165,  674,  674,  674,  674,  674,  674,  674,  674,
 /*  3830 */   674,  140,  674,  130,  674,  674,  429,  138,  135,  133,
 /*  3840 */   131,  132,  377,  178,  337,  674,  140,  674,  130,  674,
 /*  3850 */   674,  429,  138,  135,  133,  131,  132,  377,  178,  343,
 /*  3860 */   674,  674,  674,  674,  674,  140,  674,  130,  674,  674,
 /*  3870 */   429,  138,  135,  133,  131,  132,  377,  178,  348,  140,
 /*  3880 */   674,  130,  674,  674,  429,  138,  135,  133,  131,  132,
 /*  3890 */   377,  178,  336,  140,  674,  130,  674,  674,  429,  138,
 /*  3900 */   135,  133,  131,  132,  377,  178,  352,  140,  674,  130,
 /*  3910 */   674,  674,  429,  138,  135,  133,  131,  132,  377,  178,
 /*  3920 */   332,  674,  140,  674,  130,  674,  674,  429,  138,  135,
 /*  3930 */   133,  131,  132,  377,  178,  329,  674,  140,  674,  130,
 /*  3940 */   674,  674,  429,  138,  135,  133,  131,  132,  377,  178,
 /*  3950 */   345,  674,  674,  674,  674,  674,  140,  674,  130,  674,
 /*  3960 */   674,  429,  138,  135,  133,  131,  132,  377,  178,  341,
 /*  3970 */   140,  674,  130,  674,  674,  429,  138,  135,  133,  131,
 /*  3980 */   132,  377,  178,  350,  146,  674,   32,  674,    1,  674,
 /*  3990 */   674,  173,  674,  674,  674,  674,  674,   47,  674,  674,
 /*  4000 */   674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
 /*  4010 */   674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
 /*  4020 */   674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
 /*  4030 */   674,  674,  674,  674,  674,  424,
};
static const YYCODETYPE yy_lookahead[] = {
 /*     0 */     0,    1,   14,    3,   10,   17,    6,    7,    8,    8,
 /*    10 */    10,   17,   12,   13,   13,   15,   16,   17,   12,   19,
 /*    20 */    19,   21,   22,   23,   24,   25,   26,   27,   28,   29,
 /*    30 */    30,   31,   32,   90,   20,   92,   27,   28,   95,   96,
 /*    40 */    97,   98,   99,  100,  101,  102,  103,  104,  105,  106,
 /*    50 */   107,  108,  109,  110,  111,  112,   56,   57,   57,   43,
 /*    60 */    44,   45,   46,   47,   48,   49,   50,   51,   52,  120,
 /*    70 */    70,   71,   72,   73,   74,   75,   76,  120,   78,   79,
 /*    80 */    80,   81,    1,   85,    3,   87,   87,    6,    7,    8,
 /*    90 */     8,   10,   11,   12,   13,   13,   15,   16,   17,   86,
 /*   100 */    19,   19,   21,   22,   23,   24,   25,   26,   27,   28,
 /*   110 */    29,   30,   31,   32,   90,   85,   92,  132,  133,   95,
 /*   120 */    96,   97,   98,   99,  100,  101,  102,  103,  104,  105,
 /*   130 */   106,  107,  108,  109,  110,  111,   87,   56,   57,   90,
 /*   140 */    85,   92,   29,   30,   95,   96,   97,   98,   99,  100,
 /*   150 */    85,   70,   71,   72,   73,   74,   75,   76,   90,   78,
 /*   160 */    79,   80,   81,    1,   96,    3,   55,   56,    6,    7,
 /*   170 */     8,    8,   10,   11,   12,   13,   13,   15,   16,   17,
 /*   180 */    85,   19,   19,   21,   22,   23,   24,   25,   26,   27,
 /*   190 */    28,   29,   30,   31,   32,   90,   86,   92,    4,    5,
 /*   200 */    95,   96,   97,   98,   99,  100,  101,  102,  103,  104,
 /*   210 */   105,  106,  107,  108,  109,  110,   85,   87,   56,   57,
 /*   220 */    90,   85,   92,    9,   10,   95,   96,   97,   98,   99,
 /*   230 */   100,   10,   70,   71,   72,   73,   74,   75,   76,   12,
 /*   240 */    78,   79,   80,   81,    0,    1,   19,    3,   12,   85,
 /*   250 */     6,    7,    8,    8,   10,   19,   12,   13,   13,   15,
 /*   260 */    16,   17,   85,   19,   19,   21,   22,   23,   24,   25,
 /*   270 */    26,   27,   28,   29,   30,   31,   32,   90,   57,   92,
 /*   280 */    85,   86,   95,   96,   97,   98,   99,  100,  101,  102,
 /*   290 */   103,  104,  105,  106,  107,  108,  109,  110,   85,   14,
 /*   300 */    56,   57,   90,   18,   92,    4,    5,   95,   96,   97,
 /*   310 */    98,   99,  100,  132,   70,   71,   72,   73,   74,   75,
 /*   320 */    76,   86,   78,   79,   80,   81,    1,   86,    3,   90,
 /*   330 */    91,    6,    7,    8,    8,   10,   10,   12,   13,   13,
 /*   340 */    15,   15,   90,   91,   19,   19,   21,   22,   23,   24,
 /*   350 */    25,   26,   27,   28,   29,   30,   31,   32,   90,   10,
 /*   360 */    92,   90,   91,   95,   96,   97,   98,   99,  100,  101,
 /*   370 */   102,  103,  104,  105,  106,  107,  108,  109,  110,   12,
 /*   380 */     6,   56,   57,   90,   10,   92,   19,   12,   95,   96,
 /*   390 */    97,   98,   99,  100,   19,   70,   71,   72,   73,   74,
 /*   400 */    75,   76,   86,   78,   79,   80,   81,   83,   84,   90,
 /*   410 */    86,   92,   93,   94,   90,    8,   92,   93,   90,   95,
 /*   420 */    96,   97,   98,   99,  100,  101,  102,  103,  104,  105,
 /*   430 */   106,  107,  108,  109,  110,  111,  112,  113,  114,  115,
 /*   440 */     6,    6,  118,    8,   10,   10,   85,   12,    6,  125,
 /*   450 */   126,  127,   10,  129,  130,  131,   21,   89,   90,   17,
 /*   460 */    92,   93,   94,    6,   12,    8,   84,   86,   86,    8,
 /*   470 */    13,   19,   90,   12,   92,   93,   19,   95,   96,   97,
 /*   480 */    98,   99,  100,  101,  102,  103,  104,  105,  106,  107,
 /*   490 */   108,  109,  110,  111,  112,  113,  114,  115,   12,    8,
 /*   500 */   118,   10,   85,   90,   13,   19,   15,  125,  126,  127,
 /*   510 */    86,  129,  130,  131,   90,   10,   92,   93,   86,   95,
 /*   520 */    96,   97,   98,   99,  100,  101,  102,  103,  104,  105,
 /*   530 */   106,  107,  108,  109,  110,  111,  112,  113,  114,  115,
 /*   540 */    14,   12,  118,   17,   18,    6,   87,    8,   19,  125,
 /*   550 */   126,  127,   13,  129,  130,  131,   85,   54,   19,   86,
 /*   560 */    20,   11,   12,   90,   13,   92,   16,   17,   95,   96,
 /*   570 */    97,   98,   99,  100,  101,  102,  103,  104,  105,  106,
 /*   580 */   107,  108,  109,  110,  111,  112,  113,  114,  115,   56,
 /*   590 */    11,  118,   32,   33,   34,   35,   57,   15,  125,  126,
 /*   600 */   127,   86,  129,  130,  131,   90,   13,   92,   15,   14,
 /*   610 */    95,   96,   97,   98,   99,  100,  101,  102,  103,  104,
 /*   620 */   105,  106,  107,  108,  109,  110,  111,  112,  113,  114,
 /*   630 */   115,   12,   15,  118,   57,   20,    6,   57,    8,   15,
 /*   640 */   125,  126,  127,   13,  129,  130,  131,   20,   20,   19,
 /*   650 */    86,   57,   11,   12,   90,   57,   92,   16,   17,   95,
 /*   660 */    96,   97,   98,   99,  100,  101,  102,  103,  104,  105,
 /*   670 */   106,  107,  108,  109,  110,  111,  112,  113,  114,  115,
 /*   680 */    14,   15,  118,   20,   18,   14,   57,   57,   53,  125,
 /*   690 */   126,  127,   86,  129,  130,  131,   90,   57,   92,   57,
 /*   700 */    20,   95,   96,   97,   98,   99,  100,  101,  102,  103,
 /*   710 */   104,  105,  106,  107,  108,  109,  110,  111,  112,  113,
 /*   720 */   114,  115,   14,    6,  118,    8,   36,   37,   38,   12,
 /*   730 */    14,  125,  126,  127,   42,  129,  130,  131,   21,   20,
 /*   740 */    20,   86,   20,   77,   20,   90,   57,   92,   20,   20,
 /*   750 */    95,   96,   97,   98,   99,  100,  101,  102,  103,  104,
 /*   760 */   105,  106,  107,  108,  109,  110,  111,  112,  113,  114,
 /*   770 */   115,   57,   41,  118,   40,   39,    8,   17,    9,    8,
 /*   780 */   125,  126,  127,   86,  129,  130,  131,   90,    9,   92,
 /*   790 */     8,    2,   95,   96,   97,   98,   99,  100,  101,  102,
 /*   800 */   103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
 /*   810 */   113,  114,  115,    9,   15,  118,   15,    8,    6,    9,
 /*   820 */     8,   74,  125,  126,  127,   13,  129,  130,  131,    8,
 /*   830 */     8,   19,   86,    9,   13,   17,   90,    8,   92,    9,
 /*   840 */    19,   95,   96,   97,   98,   99,  100,  101,  102,  103,
 /*   850 */   104,  105,  106,  107,  108,  109,  110,  111,  112,  113,
 /*   860 */   114,  115,   17,   17,  118,   17,   17,   20,   17,   17,
 /*   870 */     8,  125,  126,  127,   86,  129,  130,  131,   90,   15,
 /*   880 */    92,    9,    9,   95,   96,   97,   98,   99,  100,  101,
 /*   890 */   102,  103,  104,  105,  106,  107,  108,  109,  110,  111,
 /*   900 */   112,  113,  114,  115,   20,    8,  118,    9,    9,    9,
 /*   910 */    13,    9,    9,  125,  126,  127,   19,  129,  130,  131,
 /*   920 */     9,   17,   17,   86,   17,  134,  134,   90,  134,   92,
 /*   930 */   134,  134,   95,   96,   97,   98,   99,  100,  101,  102,
 /*   940 */   103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
 /*   950 */   113,  114,  115,  134,  134,  118,  134,  134,  134,  134,
 /*   960 */   134,  134,  125,  126,  127,   86,  129,  130,  131,   90,
 /*   970 */   134,   92,  134,  134,   95,   96,   97,   98,   99,  100,
 /*   980 */   101,  102,  103,  104,  105,  106,  107,  108,  109,  110,
 /*   990 */   111,  112,  113,  114,  115,  134,    8,  118,  134,  134,
 /*  1000 */   134,   13,  134,  134,  125,  126,  127,   19,  129,  130,
 /*  1010 */   131,  134,  134,  134,   86,  134,  134,  134,   90,  134,
 /*  1020 */    92,  134,  134,   95,   96,   97,   98,   99,  100,  101,
 /*  1030 */   102,  103,  104,  105,  106,  107,  108,  109,  110,  111,
 /*  1040 */   112,  113,  114,  115,  134,  134,  118,  134,  134,  134,
 /*  1050 */   134,  134,  134,  125,  126,  127,   86,  129,  130,  131,
 /*  1060 */    90,  134,   92,  134,  134,   95,   96,   97,   98,   99,
 /*  1070 */   100,  101,  102,  103,  104,  105,  106,  107,  108,  109,
 /*  1080 */   110,  111,  112,  113,  114,  115,  134,    8,  118,  134,
 /*  1090 */   134,  134,   13,  134,  134,  125,  126,  127,   19,  129,
 /*  1100 */   130,  131,  134,  134,  134,   86,  134,  134,  134,   90,
 /*  1110 */   134,   92,  134,  134,   95,   96,   97,   98,   99,  100,
 /*  1120 */   101,  102,  103,  104,  105,  106,  107,  108,  109,  110,
 /*  1130 */   111,  112,  113,  114,  115,  134,  134,  118,  134,  134,
 /*  1140 */   134,  134,  134,  134,  125,  126,  127,   86,  129,  130,
 /*  1150 */   131,   90,  134,   92,  134,  134,   95,   96,   97,   98,
 /*  1160 */    99,  100,  101,  102,  103,  104,  105,  106,  107,  108,
 /*  1170 */   109,  110,  111,  112,  113,  114,  115,  134,    8,  118,
 /*  1180 */   134,  134,  134,   13,  134,  134,  125,  126,  127,   19,
 /*  1190 */   129,  130,  131,  134,  134,  134,   86,  134,  134,  134,
 /*  1200 */    90,  134,   92,  134,  134,   95,   96,   97,   98,   99,
 /*  1210 */   100,  101,  102,  103,  104,  105,  106,  107,  108,  109,
 /*  1220 */   110,  111,  112,  113,  114,  115,  134,  134,  118,  134,
 /*  1230 */   134,  134,  134,  134,  134,  125,  126,  127,   86,  129,
 /*  1240 */   130,  131,   90,  134,   92,  134,  134,   95,   96,   97,
 /*  1250 */    98,   99,  100,  101,  102,  103,  104,  105,  106,  107,
 /*  1260 */   108,  109,  110,  111,  112,  113,  114,  115,  134,    8,
 /*  1270 */   118,  134,  134,  134,   13,  134,  134,  125,  126,  127,
 /*  1280 */    19,  129,  130,  131,  134,   88,  134,   90,  134,   92,
 /*  1290 */   134,  134,   95,   96,   97,   98,   99,  100,  101,  102,
 /*  1300 */   103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
 /*  1310 */   113,  114,  115,  116,  117,  118,  119,  134,  134,  134,
 /*  1320 */   134,  134,  134,  134,   88,  128,   90,  134,   92,  134,
 /*  1330 */   134,   95,   96,   97,   98,   99,  100,  101,  102,  103,
 /*  1340 */   104,  105,  106,  107,  108,  109,  110,  111,  112,  113,
 /*  1350 */   114,  115,  116,  117,  118,  119,  134,  134,  134,   88,
 /*  1360 */   134,   90,  134,   92,  128,  134,   95,   96,   97,   98,
 /*  1370 */    99,  100,  101,  102,  103,  104,  105,  106,  107,  108,
 /*  1380 */   109,  110,  111,  112,  113,  114,  115,  116,  117,  118,
 /*  1390 */   119,  134,  134,   88,  134,   90,  134,   92,  134,  128,
 /*  1400 */    95,   96,   97,   98,   99,  100,  101,  102,  103,  104,
 /*  1410 */   105,  106,  107,  108,  109,  110,  111,  112,  113,  114,
 /*  1420 */   115,  116,  117,  118,  119,  134,  134,   88,  134,   90,
 /*  1430 */   134,   92,  134,  128,   95,   96,   97,   98,   99,  100,
 /*  1440 */   101,  102,  103,  104,  105,  106,  107,  108,  109,  110,
 /*  1450 */   111,  112,  113,  114,  115,  116,  117,  118,  119,  134,
 /*  1460 */   134,   88,  134,   90,  134,   92,  134,  128,   95,   96,
 /*  1470 */    97,   98,   99,  100,  101,  102,  103,  104,  105,  106,
 /*  1480 */   107,  108,  109,  110,  111,  112,  113,  114,  115,  116,
 /*  1490 */   117,  118,  119,  134,  134,   88,  134,   90,  134,   92,
 /*  1500 */   134,  128,   95,   96,   97,   98,   99,  100,  101,  102,
 /*  1510 */   103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
 /*  1520 */   113,  114,  115,  116,  117,  118,  119,   88,  134,   90,
 /*  1530 */   134,   92,  134,  134,   95,   96,   97,   98,   99,  100,
 /*  1540 */   101,  102,  103,  104,  105,  106,  107,  108,  109,  110,
 /*  1550 */   111,  112,  113,  114,  115,  116,  117,  118,  119,   88,
 /*  1560 */   134,   90,  134,   92,  134,  134,   95,   96,   97,   98,
 /*  1570 */    99,  100,  101,  102,  103,  104,  105,  106,  107,  108,
 /*  1580 */   109,  110,  111,  112,  113,  114,  115,  116,  117,  118,
 /*  1590 */   119,   88,  134,   90,  134,   92,  134,  134,   95,   96,
 /*  1600 */    97,   98,   99,  100,  101,  102,  103,  104,  105,  106,
 /*  1610 */   107,  108,  109,  110,  111,  112,  113,  114,  115,  116,
 /*  1620 */   117,  118,  119,   88,  134,   90,  134,   92,  134,  134,
 /*  1630 */    95,   96,   97,   98,   99,  100,  101,  102,  103,  104,
 /*  1640 */   105,  106,  107,  108,  109,  110,  111,  112,  113,  114,
 /*  1650 */   115,  116,  117,  118,  119,   88,  134,   90,  134,   92,
 /*  1660 */   134,  134,   95,   96,   97,   98,   99,  100,  101,  102,
 /*  1670 */   103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
 /*  1680 */   113,  114,  115,  116,  117,  118,  119,  134,  134,   90,
 /*  1690 */   134,   92,  134,  134,   95,   96,   97,   98,   99,  100,
 /*  1700 */   101,  102,  103,  104,  105,  106,  107,  108,  109,  110,
 /*  1710 */   111,  112,  113,  114,  115,  116,  134,  118,  134,  134,
 /*  1720 */   121,  122,   88,  134,   90,  134,   92,  134,  134,   95,
 /*  1730 */    96,   97,   98,   99,  100,  101,  102,  103,  104,  105,
 /*  1740 */   106,  107,  108,  109,  110,  111,  112,  113,  114,  115,
 /*  1750 */   116,  117,  118,   88,  134,   90,  134,   92,  134,  134,
 /*  1760 */    95,   96,   97,   98,   99,  100,  101,  102,  103,  104,
 /*  1770 */   105,  106,  107,  108,  109,  110,  111,  112,  113,  114,
 /*  1780 */   115,  116,  117,  118,   88,  134,   90,  134,   92,  134,
 /*  1790 */   134,   95,   96,   97,   98,   99,  100,  101,  102,  103,
 /*  1800 */   104,  105,  106,  107,  108,  109,  110,  111,  112,  113,
 /*  1810 */   114,  115,  116,  117,  118,   88,  134,   90,  134,   92,
 /*  1820 */   134,  134,   95,   96,   97,   98,   99,  100,  101,  102,
 /*  1830 */   103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
 /*  1840 */   113,  114,  115,  116,  117,  118,   88,  134,   90,  134,
 /*  1850 */    92,  134,  134,   95,   96,   97,   98,   99,  100,  101,
 /*  1860 */   102,  103,  104,  105,  106,  107,  108,  109,  110,  111,
 /*  1870 */   112,  113,  114,  115,  116,  117,  118,   90,  134,   92,
 /*  1880 */   134,  134,   95,   96,   97,   98,   99,  100,  101,  102,
 /*  1890 */   103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
 /*  1900 */   113,  114,  115,  116,  134,  134,  134,  134,  134,  134,
 /*  1910 */   123,  124,  134,   90,  134,   92,  134,  134,   95,   96,
 /*  1920 */    97,   98,   99,  100,  101,  102,  103,  104,  105,  106,
 /*  1930 */   107,  108,  109,  110,  111,  112,  113,  114,  115,  116,
 /*  1940 */   117,   90,  134,   92,  134,  134,   95,   96,   97,   98,
 /*  1950 */    99,  100,  101,  102,  103,  104,  105,  106,  107,  108,
 /*  1960 */   109,  110,  111,  112,  113,  114,  115,  116,   90,  118,
 /*  1970 */    92,  134,  134,   95,   96,   97,   98,   99,  100,  101,
 /*  1980 */   102,  103,  104,  105,  106,  107,  108,  109,  110,  111,
 /*  1990 */   112,  113,  114,  115,  116,  134,  118,  134,  134,  134,
 /*  2000 */   134,   90,  134,   92,  134,  134,   95,   96,   97,   98,
 /*  2010 */    99,  100,  101,  102,  103,  104,  105,  106,  107,  108,
 /*  2020 */   109,  110,  111,  112,  113,  114,  115,  116,   90,  118,
 /*  2030 */    92,  134,  134,   95,   96,   97,   98,   99,  100,  101,
 /*  2040 */   102,  103,  104,  105,  106,  107,  108,  109,  110,  111,
 /*  2050 */   112,  113,  114,  115,  116,   90,  134,   92,  134,  134,
 /*  2060 */    95,   96,   97,   98,   99,  100,  101,  102,  103,  104,
 /*  2070 */   105,  106,  107,  108,  109,  110,  111,  112,  113,  114,
 /*  2080 */   115,  116,   90,  134,   92,  134,  134,   95,   96,   97,
 /*  2090 */    98,   99,  100,  101,  102,  103,  104,  105,  106,  107,
 /*  2100 */   108,  109,  110,  111,  112,  113,  114,  115,  116,   90,
 /*  2110 */   134,   92,  134,  134,   95,   96,   97,   98,   99,  100,
 /*  2120 */   101,  102,  103,  104,  105,  106,  107,  108,  109,  110,
 /*  2130 */   111,  112,  113,  114,  115,  116,   90,  134,   92,  134,
 /*  2140 */   134,   95,   96,   97,   98,   99,  100,  101,  102,  103,
 /*  2150 */   104,  105,  106,  107,  108,  109,  110,  111,  112,  113,
 /*  2160 */   114,  115,  116,   90,  134,   92,  134,  134,   95,   96,
 /*  2170 */    97,   98,   99,  100,  101,  102,  103,  104,  105,  106,
 /*  2180 */   107,  108,  109,  110,  111,  112,  113,  114,  115,  116,
 /*  2190 */    90,  134,   92,  134,  134,   95,   96,   97,   98,   99,
 /*  2200 */   100,  101,  102,  103,  104,  105,  106,  107,  108,  109,
 /*  2210 */   110,  111,  112,  113,  114,  115,  116,   90,  134,   92,
 /*  2220 */   134,  134,   95,   96,   97,   98,   99,  100,  101,  102,
 /*  2230 */   103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
 /*  2240 */   113,  114,  115,  116,   90,  134,   92,  134,  134,   95,
 /*  2250 */    96,   97,   98,   99,  100,  101,  102,  103,  104,  105,
 /*  2260 */   106,  107,  108,  109,  110,  111,  112,  113,  114,  115,
 /*  2270 */   116,   90,  134,   92,  134,  134,   95,   96,   97,   98,
 /*  2280 */    99,  100,  101,  102,  103,  104,  105,  106,  107,  108,
 /*  2290 */   109,  110,  111,  112,  113,  114,  115,  116,   90,  134,
 /*  2300 */    92,  134,  134,   95,   96,   97,   98,   99,  100,  101,
 /*  2310 */   102,  103,  104,  105,  106,  107,  108,  109,  110,  111,
 /*  2320 */   112,  113,  114,  115,  116,   90,  134,   92,  134,  134,
 /*  2330 */    95,   96,   97,   98,   99,  100,  101,  102,  103,  104,
 /*  2340 */   105,  106,  107,  108,  109,  110,  111,  112,  113,  114,
 /*  2350 */   115,  116,   90,  134,   92,  134,  134,   95,   96,   97,
 /*  2360 */    98,   99,  100,  101,  102,  103,  104,  105,  106,  107,
 /*  2370 */   108,  109,  110,  111,  112,  113,  114,  115,  116,   90,
 /*  2380 */   134,   92,  134,  134,   95,   96,   97,   98,   99,  100,
 /*  2390 */   101,  102,  103,  104,  105,  106,  107,  108,  109,  110,
 /*  2400 */   111,  112,  113,  114,  115,  116,   90,  134,   92,  134,
 /*  2410 */   134,   95,   96,   97,   98,   99,  100,  101,  102,  103,
 /*  2420 */   104,  105,  106,  107,  108,  109,  110,  111,  112,  113,
 /*  2430 */   114,  115,  116,   90,  134,   92,  134,  134,   95,   96,
 /*  2440 */    97,   98,   99,  100,  101,  102,  103,  104,  105,  106,
 /*  2450 */   107,  108,  109,  110,  111,  112,  113,  114,  115,  116,
 /*  2460 */    90,  134,   92,  134,  134,   95,   96,   97,   98,   99,
 /*  2470 */   100,  101,  102,  103,  104,  105,  106,  107,  108,  109,
 /*  2480 */   110,  111,  112,  113,  114,  115,  116,   90,  134,   92,
 /*  2490 */   134,  134,   95,   96,   97,   98,   99,  100,  101,  102,
 /*  2500 */   103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
 /*  2510 */   113,  114,  115,  116,   90,  134,   92,  134,  134,   95,
 /*  2520 */    96,   97,   98,   99,  100,  101,  102,  103,  104,  105,
 /*  2530 */   106,  107,  108,  109,  110,  111,  112,  113,  114,  115,
 /*  2540 */   116,   90,  134,   92,  134,  134,   95,   96,   97,   98,
 /*  2550 */    99,  100,  101,  102,  103,  104,  105,  106,  107,  108,
 /*  2560 */   109,  110,  111,  112,  113,  114,  115,  116,   90,  134,
 /*  2570 */    92,  134,  134,   95,   96,   97,   98,   99,  100,  101,
 /*  2580 */   102,  103,  104,  105,  106,  107,  108,  109,  110,  111,
 /*  2590 */   112,  113,  114,  115,  116,   90,  134,   92,  134,  134,
 /*  2600 */    95,   96,   97,   98,   99,  100,  101,  102,  103,  104,
 /*  2610 */   105,  106,  107,  108,  109,  110,  111,  112,  113,  114,
 /*  2620 */   115,  116,   90,  134,   92,  134,  134,   95,   96,   97,
 /*  2630 */    98,   99,  100,  101,  102,  103,  104,  105,  106,  107,
 /*  2640 */   108,  109,  110,  111,  112,  113,  114,  115,  116,   90,
 /*  2650 */   134,   92,  134,  134,   95,   96,   97,   98,   99,  100,
 /*  2660 */   101,  102,  103,  104,  105,  106,  107,  108,  109,  110,
 /*  2670 */   111,  112,  113,  114,  115,  116,   90,  134,   92,  134,
 /*  2680 */   134,   95,   96,   97,   98,   99,  100,  101,  102,  103,
 /*  2690 */   104,  105,  106,  107,  108,  109,  110,  111,  112,  113,
 /*  2700 */   114,  115,  116,   90,  134,   92,  134,  134,   95,   96,
 /*  2710 */    97,   98,   99,  100,  101,  102,  103,  104,  105,  106,
 /*  2720 */   107,  108,  109,  110,  111,  112,  113,  114,  115,  116,
 /*  2730 */    90,  134,   92,  134,  134,   95,   96,   97,   98,   99,
 /*  2740 */   100,  101,  102,  103,  104,  105,  106,  107,  108,  109,
 /*  2750 */   110,  111,  112,  113,  114,  115,  116,    6,  134,    8,
 /*  2760 */   134,   10,  134,   12,   13,  134,   15,   16,  134,  134,
 /*  2770 */    19,  134,   21,   22,   23,   24,   25,   26,   27,   28,
 /*  2780 */    29,   30,   31,   32,   90,  134,   92,  134,  134,   95,
 /*  2790 */    96,   97,   98,   99,  100,  101,  102,  103,  104,  105,
 /*  2800 */   106,  107,  108,  109,  110,  134,  134,   56,   57,  134,
 /*  2810 */   134,  134,  134,  134,    6,  134,    8,    9,   10,  134,
 /*  2820 */    12,   13,  134,   15,  134,  134,  134,   19,  134,   21,
 /*  2830 */    22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
 /*  2840 */    32,  134,   90,  134,   92,  134,  134,   95,   96,   97,
 /*  2850 */    98,   99,  100,  101,  102,  103,  104,  105,  106,  107,
 /*  2860 */   108,  109,  110,  134,   56,   57,  134,  134,  134,  134,
 /*  2870 */   134,    6,  134,    8,  134,   10,  134,   12,   13,  134,
 /*  2880 */    15,   16,  134,  134,   19,  134,   21,   22,   23,   24,
 /*  2890 */    25,   26,   27,   28,   29,   30,   31,   32,  134,   90,
 /*  2900 */   134,   92,  134,  134,   95,   96,   97,   98,   99,  100,
 /*  2910 */   101,  102,  103,  104,  105,  106,  107,  108,  109,  110,
 /*  2920 */   134,   56,   57,  134,  134,  134,  134,  134,    6,  134,
 /*  2930 */     8,  134,   10,  134,   12,   13,  134,   15,  134,   17,
 /*  2940 */   134,   19,  134,   21,   22,   23,   24,   25,   26,   27,
 /*  2950 */    28,   29,   30,   31,   32,  134,   90,  134,   92,  134,
 /*  2960 */   134,   95,   96,   97,   98,   99,  100,  101,  102,  103,
 /*  2970 */   104,  105,  106,  107,  108,  109,  110,  134,   56,   57,
 /*  2980 */   134,  134,  134,  134,  134,    6,  134,    8,  134,   10,
 /*  2990 */   134,   12,   13,  134,   15,  134,  134,  134,   19,   20,
 /*  3000 */    21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
 /*  3010 */    31,   32,  134,   90,  134,   92,  134,  134,   95,   96,
 /*  3020 */    97,   98,   99,  100,  101,  102,  103,  104,  105,  106,
 /*  3030 */   107,  108,  109,  110,  134,   56,   57,  134,  134,  134,
 /*  3040 */   134,  134,    6,  134,    8,  134,   10,  134,   12,   13,
 /*  3050 */   134,   15,  134,   17,  134,   19,  134,   21,   22,   23,
 /*  3060 */    24,   25,   26,   27,   28,   29,   30,   31,   32,  134,
 /*  3070 */    90,  134,   92,  134,  134,   95,   96,   97,   98,   99,
 /*  3080 */   100,  101,  102,  103,  104,  105,  106,  107,  108,  109,
 /*  3090 */   110,  134,   56,   57,  134,  134,  134,  134,  134,    6,
 /*  3100 */   134,    8,  134,   10,  134,   12,   13,  134,   15,  134,
 /*  3110 */   134,  134,   19,  134,   21,   22,   23,   24,   25,   26,
 /*  3120 */    27,   28,   29,   30,   31,   32,  134,   90,  134,   92,
 /*  3130 */   134,  134,   95,   96,   97,   98,   99,  100,  101,  102,
 /*  3140 */   103,  104,  105,  106,  107,  108,  109,  110,  134,   56,
 /*  3150 */    57,  134,  134,  134,  134,  134,    6,  134,    8,  134,
 /*  3160 */    10,  134,   12,   13,  134,   15,  134,  134,  134,   19,
 /*  3170 */    20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
 /*  3180 */    30,   31,   32,  134,   90,  134,   92,  134,  134,   95,
 /*  3190 */    96,   97,   98,   99,  100,  101,  102,  103,  104,  105,
 /*  3200 */   106,  107,  108,  109,   14,   15,   56,  134,   18,  134,
 /*  3210 */   134,  134,  134,    6,  134,    8,  134,   10,  134,   12,
 /*  3220 */    13,  134,   15,  134,  134,  134,   19,   20,   21,   22,
 /*  3230 */    23,   24,   25,   26,   27,   28,   29,   30,   31,   32,
 /*  3240 */   134,  134,  134,  134,  134,  134,  134,  134,   58,   59,
 /*  3250 */    60,   61,   62,   63,   64,   65,   66,   67,   68,   69,
 /*  3260 */   134,  134,  134,   56,  134,  134,  134,   77,  134,  134,
 /*  3270 */     6,  134,    8,  134,   10,  134,   12,   13,  134,   15,
 /*  3280 */   134,  134,  134,   19,   20,   21,   22,   23,   24,   25,
 /*  3290 */    26,   27,   28,   29,   30,   31,   32,  134,  134,   90,
 /*  3300 */   134,   92,  134,  134,   95,   96,   97,   98,   99,  100,
 /*  3310 */   101,  102,  103,  104,  105,  106,  107,  108,  134,  134,
 /*  3320 */    56,  134,  134,  134,  134,  134,  134,    6,  134,    8,
 /*  3330 */   134,   10,  134,   12,   13,  134,   15,   16,  134,  134,
 /*  3340 */    19,  134,   21,   22,   23,   24,   25,   26,   27,   28,
 /*  3350 */    29,   30,   31,   32,  134,  134,  134,  134,   90,  134,
 /*  3360 */    92,  134,  134,   95,   96,   97,   98,   99,  100,  101,
 /*  3370 */   102,  103,  104,  105,  106,  107,  134,   56,   14,  134,
 /*  3380 */   134,  134,   18,  134,    6,  134,    8,  134,   10,  134,
 /*  3390 */    12,   13,  134,   15,  134,  134,  134,   19,   20,   21,
 /*  3400 */    22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
 /*  3410 */    32,  134,  134,  134,  134,  134,  134,  134,  134,  134,
 /*  3420 */   134,  134,   58,   59,   60,   61,   62,   63,   64,   65,
 /*  3430 */    66,   67,   68,   69,   56,  134,  134,  134,  134,  134,
 /*  3440 */   134,    6,  134,    8,  134,   10,  134,   12,   13,  134,
 /*  3450 */    15,  134,  134,  134,   19,   20,   21,   22,   23,   24,
 /*  3460 */    25,   26,   27,   28,   29,   30,   31,   32,  134,   90,
 /*  3470 */   134,   92,  134,  134,   95,   96,   97,   98,   99,  100,
 /*  3480 */   101,  102,  103,  104,  105,  106,   14,  134,  134,  134,
 /*  3490 */    18,   56,  134,  134,  134,  134,  134,  134,    6,  134,
 /*  3500 */     8,  134,   10,  134,   12,   13,  134,   15,  134,  134,
 /*  3510 */   134,   19,   20,   21,   22,   23,   24,   25,   26,   27,
 /*  3520 */    28,   29,   30,   31,   32,  134,  134,  134,  134,  134,
 /*  3530 */    58,   59,   60,   61,   62,   63,   64,   65,   66,   67,
 /*  3540 */    68,   69,  134,  134,  134,  134,  134,  134,   56,  134,
 /*  3550 */   134,  134,  134,  134,  134,    6,  134,    8,  134,   10,
 /*  3560 */   134,   12,   13,  134,   15,  134,  134,  134,   19,   20,
 /*  3570 */    21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
 /*  3580 */    31,   32,  134,  134,  134,  134,  134,  134,  134,   90,
 /*  3590 */   134,   92,  134,  134,   95,   96,   97,   98,   99,  100,
 /*  3600 */   134,  134,   90,  134,   92,   56,  134,   95,   96,   97,
 /*  3610 */    98,   99,  100,  101,  102,  103,  104,  105,  106,  107,
 /*  3620 */   108,  109,  110,  111,  112,  113,    6,  134,    8,  134,
 /*  3630 */    10,   11,   12,   13,  134,   15,  134,  134,  134,   19,
 /*  3640 */   134,   21,   22,   23,   24,   25,   26,   27,   28,   29,
 /*  3650 */    30,   31,   32,   90,  134,   92,  134,  134,   95,   96,
 /*  3660 */    97,   98,   99,  100,  101,  102,  103,  104,  105,  134,
 /*  3670 */   134,  134,  134,  134,  134,  134,   56,  134,  134,  134,
 /*  3680 */   134,  134,  134,    6,  134,    8,  134,   10,  134,   12,
 /*  3690 */    13,  134,   15,  134,  134,  134,   19,  134,   21,   22,
 /*  3700 */    23,   24,   25,   26,   27,   28,   29,   30,   31,   32,
 /*  3710 */   134,   90,  134,   92,  134,  134,   95,   96,   97,   98,
 /*  3720 */    99,  100,  101,  102,  103,  104,  105,  134,  134,  134,
 /*  3730 */   134,  134,  134,   56,  134,  134,  134,  134,  134,  134,
 /*  3740 */     6,  134,    8,  134,  134,  134,   12,  134,  134,  134,
 /*  3750 */   134,  134,  134,  134,  134,   21,   22,   23,   24,   25,
 /*  3760 */    26,   27,   28,   29,   30,   31,   32,  134,  134,  134,
 /*  3770 */   134,  134,  134,  134,   90,  134,   92,  134,  134,   95,
 /*  3780 */    96,   97,   98,   99,  100,  101,  102,  103,  104,  105,
 /*  3790 */    90,  134,   92,  134,  134,   95,   96,   97,   98,   99,
 /*  3800 */   100,  101,  102,  103,  104,  134,  134,   90,  134,   92,
 /*  3810 */   134,  134,   95,   96,   97,   98,   99,  100,  101,  102,
 /*  3820 */   103,  104,  134,  134,  134,  134,  134,  134,  134,  134,
 /*  3830 */   134,   90,  134,   92,  134,  134,   95,   96,   97,   98,
 /*  3840 */    99,  100,  101,  102,  103,  134,   90,  134,   92,  134,
 /*  3850 */   134,   95,   96,   97,   98,   99,  100,  101,  102,  103,
 /*  3860 */   134,  134,  134,  134,  134,   90,  134,   92,  134,  134,
 /*  3870 */    95,   96,   97,   98,   99,  100,  101,  102,  103,   90,
 /*  3880 */   134,   92,  134,  134,   95,   96,   97,   98,   99,  100,
 /*  3890 */   101,  102,  103,   90,  134,   92,  134,  134,   95,   96,
 /*  3900 */    97,   98,   99,  100,  101,  102,  103,   90,  134,   92,
 /*  3910 */   134,  134,   95,   96,   97,   98,   99,  100,  101,  102,
 /*  3920 */   103,  134,   90,  134,   92,  134,  134,   95,   96,   97,
 /*  3930 */    98,   99,  100,  101,  102,  103,  134,   90,  134,   92,
 /*  3940 */   134,  134,   95,   96,   97,   98,   99,  100,  101,  102,
 /*  3950 */   103,  134,  134,  134,  134,  134,   90,  134,   92,  134,
 /*  3960 */   134,   95,   96,   97,   98,   99,  100,  101,  102,  103,
 /*  3970 */    90,  134,   92,  134,  134,   95,   96,   97,   98,   99,
 /*  3980 */   100,  101,  102,  103,    6,  134,    8,  134,   10,  134,
 /*  3990 */   134,   13,  134,  134,  134,  134,  134,   19,  134,  134,
 /*  4000 */   134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
 /*  4010 */   134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
 /*  4020 */   134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
 /*  4030 */   134,  134,  134,  134,  134,   57,
};
#define YY_SHIFT_USE_DFLT (-13)
#define YY_SHIFT_MAX 279
static const short yy_shift_ofst[] = {
 /*     0 */   244,   81,    0,  162,  325,  325,  325,  325,  325,  325,
 /*    10 */   325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
 /*    20 */  2865, 2751, 2865, 2865, 2865, 2865, 3093, 3093, 3093, 3093,
 /*    30 */  3093, 3093, 2808, 3036, 2979, 2922, 3093, 3093, 3620, 3093,
 /*    40 */  3093, 3093, 3677, 3150, 3207, 3264, 3321, 3378, 3435, 3492,
 /*    50 */  3549, 3677, 3677, 3677, 3677, 3677, 3677, 3677, 3677, 3677,
 /*    60 */  3677, 3677, 3677, 3677, 3677, 3677, 3677, 3677, 3677, 3677,
 /*    70 */  3677, 3677, 3677, 3677, 3677, 3677, 3677, 3734, 3734, 3734,
 /*    80 */  3734, 3734, 3734, 3734, 3734, 3734, 3734, 3734, 3734, 3734,
 /*    90 */  3734, 3734, 3734, 3734, 3734, 3734, 3734, 3734, 3734, 3734,
 /*   100 */  3734, 3734, 3734, 3734, 3734, 3734, 3734, 3734, 3734,  435,
 /*   110 */   435,  717,  717,  717,  550,  641, 3978,  326,  491,  301,
 /*   120 */   461,    6,    6,    6, 3190, 3364, 3472,  630,  539,    1,
 /*   130 */   812,  457,  163,  245,   82,  821,  897,  988,  897, 1079,
 /*   140 */   988,  442, 1170, 1261,  374,  214,  221,   -6,  434,  194,
 /*   150 */   349,    6,  407,  349,  407,    6,  505,  349,  407,  407,
 /*   160 */   505,   16,   16,  560,  666,  560,  560,  690,  690,  526,
 /*   170 */   -12,  486,  375,  236,  227,  367,  452,  529,    9,  113,
 /*   180 */   113,  113,  113,  111,  285,  593,  503,  540,  551,  551,
 /*   190 */   533,  579,  582,  595,  619,  617,  577,  615,  580,  627,
 /*   200 */   628,  594,  598,  624,  503,  663,  629,  671,  635,  640,
 /*   210 */   642,  680,  708,  635,  716,  692,  719,  692,  720,  692,
 /*   220 */   722,  692,  724,  692,   14,  692,  689,  692,  692,  728,
 /*   230 */   729,  692,  714,  692,  731,  692,  734,  731,  736,  768,
 /*   240 */   734,  736,  769,  760,  771,  779,  789,  782,  804,  799,
 /*   250 */   801,  809,  810,  747,  822,  824,  818,  829,  830,  845,
 /*   260 */   846,  848,  849,  847,  851,  852,  862,  864,  872,  873,
 /*   270 */   884,  898,  899,  900,  902,  903,  904,  905,  911,  907,
};
#define YY_REDUCE_USE_DFLT (-58)
#define YY_REDUCE_MAX 160
static const short yy_reduce_ofst[] = {
 /*     0 */   324,  382,  424,  424, 1061, 1019,  970,  928,  879,  837,
 /*    10 */   788,  746,  697,  515,  473, 1152, 1110,  655,  564,  606,
 /*    20 */  1373, 1271, 1305, 1339, 1197, 1236, 1503, 1567, 1407, 1471,
 /*    30 */  1535, 1439, 1727, 1758, 1599, 1634, 1696, 1665, 1787, 1878,
 /*    40 */  1851, 1911, 1823, 2316, 2343, 2370, 2397, 2424, 2451, 2478,
 /*    50 */  1965, 2505, 2532, 2370, 2316, 2559, 2451, 2424, 2343, 2586,
 /*    60 */  2613, 2640, 2478, 1938, 1965, 1992, 2019, 2046, 2073, 2100,
 /*    70 */  2127, 2154, 2181, 2208, 2235, 2262, 2289, 3512,  -57,   24,
 /*    80 */   268, 2980,  105, 2752, 2923, 3037, 2866,  187, 2694, 2809,
 /*    90 */  3094, 3209, 3268, 3379, 3684, 3563, 3621, 3717, 3700, 3880,
 /*   100 */  3866, 3741, 3775, 3789, 3817, 3832, 3847, 3756, 3803,  130,
 /*   110 */    49,  212, 3499,  293,  368,  319,  195,   -2,   -2,  -15,
 /*   120 */    68,  271,  252,  239,  -51,  -43,  -51,   30,   55,   65,
 /*   130 */    55,   30,   95,  131,  136,   65,  164,  177,  213,  213,
 /*   140 */   136,   13,   95,  131,  110,   -1,  235,  235,  241,  181,
 /*   150 */   316,  328,  361,  381,  417,  413,   -1,  432,  361,  471,
 /*   160 */   459,
};
static const YYACTIONTYPE yy_default[] = {
 /*     0 */   672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
 /*    10 */   672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
 /*    20 */   672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
 /*    30 */   672,  672,  672,  672,  672,  672,  672,  672,  672,  617,
 /*    40 */   672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
 /*    50 */   672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
 /*    60 */   672,  622,  672,  672,  672,  672,  672,  672,  672,  672,
 /*    70 */   672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
 /*    80 */   672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
 /*    90 */   672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
 /*   100 */   672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
 /*   110 */   672,  672,  672,  672,  672,  672,  505,  504,  672,  672,
 /*   120 */   672,  672,  672,  672,  595,  626,  595,  509,  505,  507,
 /*   130 */   505,  509,  510,  508,  504,  507,  672,  672,  506,  506,
 /*   140 */   504,  672,  510,  508,  672,  672,  511,  672,  672,  657,
 /*   150 */   672,  672,  672,  672,  672,  672,  672,  672,  632,  672,
 /*   160 */   672,  561,  560,  534,  672,  535,  536,  542,  541,  672,
 /*   170 */   672,  672,  672,  672,  672,  672,  672,  672,  522,  537,
 /*   180 */   538,  539,  540,  566,  672,  672,  564,  672,  459,  458,
 /*   190 */   672,  672,  672,  621,  672,  672,  672,  672,  672,  672,
 /*   200 */   672,  672,  512,  672,  565,  672,  672,  595,  563,  672,
 /*   210 */   511,  672,  616,  562,  614,  559,  672,  558,  672,  557,
 /*   220 */   672,  556,  672,  555,  672,  554,  672,  553,  552,  672,
 /*   230 */   672,  551,  672,  550,  548,  549,  546,  547,  544,  633,
 /*   240 */   545,  543,  672,  672,  672,  672,  637,  672,  672,  672,
 /*   250 */   672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
 /*   260 */   672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
 /*   270 */   672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
 /*   280 */   490,  511,  484,  488,  478,  498,  487,  589,  659,  495,
 /*   290 */   597,  598,  599,  600,  601,  602,  603,  604,  605,  606,
 /*   300 */   607,  608,  609,  610,  611,  647,  476,  660,  475,  671,
 /*   310 */   486,  587,  492,  485,  489,  623,  661,  456,  624,  627,
 /*   320 */   483,  629,  625,  628,  666,  482,  630,  662,  667,  533,
 /*   330 */   631,  481,  532,  634,  668,  635,  531,  530,  529,  636,
 /*   340 */   480,  528,  453,  527,  479,  526,  638,  663,  525,  665,
 /*   350 */   524,  639,  523,  466,  640,  658,  494,  641,  664,  572,
 /*   360 */   468,  574,  521,  469,  464,  573,  463,  575,  576,  462,
 /*   370 */   577,  477,  578,  520,  461,  619,  642,  519,  452,  455,
 /*   380 */   620,  474,  590,  584,  454,  491,  518,  497,  645,  591,
 /*   390 */   648,  567,  643,  500,  460,  592,  517,  586,  583,  516,
 /*   400 */   515,  457,  503,  514,  593,  579,  644,  655,  580,  581,
 /*   410 */   596,  594,  467,  472,  473,  470,  471,  570,  465,  571,
 /*   420 */   649,  588,  451,  585,  582,  568,  650,  569,  612,  513,
 /*   430 */   651,  613,  618,  646,  615,  652,  502,  499,  653,  512,
 /*   440 */   669,  496,  654,  670,  493,  450,  656,  501,
};
#define YY_SZ_ACTTAB (int)(sizeof(yy_action)/sizeof(yy_action[0]))

/* The next table maps tokens into fallback tokens.  If a construct
** like the following:
** 
**      %fallback ID X Y Z.
**
** appears in the grammar, then ID becomes a fallback token for X, Y,
** and Z.  Whenever one of the tokens X, Y, or Z is input to the parser
** but it does not parse, the type of the token is changed to ID and
** the parse is retried before an error is thrown.
*/
#ifdef YYFALLBACK
static const YYCODETYPE yyFallback[] = {
};
#endif /* YYFALLBACK */

/* The following structure represents a single element of the
** parser's stack.  Information stored includes:
**
**   +  The state number for the parser at this level of the stack.
**
**   +  The value of the token stored at this level of the stack.
**      (In other words, the "major" token.)
**
**   +  The semantic value stored at this level of the stack.  This is
**      the information used by the action routines in the grammar.
**      It is sometimes called the "minor" token.
*/
struct yyStackEntry {
  YYACTIONTYPE stateno;  /* The state-number */
  YYCODETYPE major;      /* The major token value.  This is the code
                         ** number for the token at this stack level */
  YYMINORTYPE minor;     /* The user-supplied minor token value.  This
                         ** is the value of the token  */
};
typedef struct yyStackEntry yyStackEntry;

/* The state of the parser is completely contained in an instance of
** the following structure */
struct yyParser {
  int yyidx;                    /* Index of top element in stack */
#ifdef YYTRACKMAXSTACKDEPTH
  int yyidxMax;                 /* Maximum value of yyidx */
#endif
  int yyerrcnt;                 /* Shifts left before out of the error */
  XecParseARG_SDECL                /* A place to hold %extra_argument */
#if YYSTACKDEPTH<=0
  int yystksz;                  /* Current side of the stack */
  yyStackEntry *yystack;        /* The parser's stack */
#else
  yyStackEntry yystack[YYSTACKDEPTH];  /* The parser's stack */
#endif
};
typedef struct yyParser yyParser;

#ifndef NDEBUG
#include <stdio.h>
static FILE *yyTraceFILE = 0;
static char *yyTracePrompt = 0;
#endif /* NDEBUG */

#ifndef NDEBUG
/* 
** Turn parser tracing on by giving a stream to which to write the trace
** and a prompt to preface each trace message.  Tracing is turned off
** by making either argument NULL 
**
** Inputs:
** <ul>
** <li> A FILE* to which trace output should be written.
**      If NULL, then tracing is turned off.
** <li> A prefix string written at the beginning of every
**      line of trace output.  If NULL, then tracing is
**      turned off.
** </ul>
**
** Outputs:
** None.
*/
void XecParseTrace(FILE *TraceFILE, char *zTracePrompt){
  yyTraceFILE = TraceFILE;
  yyTracePrompt = zTracePrompt;
  if( yyTraceFILE==0 ) yyTracePrompt = 0;
  else if( yyTracePrompt==0 ) yyTraceFILE = 0;
}
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing shifts, the names of all terminals and nonterminals
** are required.  The following table supplies these names */
static const char *const yyTokenName[] = { 
  "$",             "IF",            "ELSE",          "TRY",         
  "CATCH",         "FINALLY",       "YIELD",         "USING",       
  "LPN",           "RPN",           "LBR",           "RBR",         
  "IDENTIFIER",    "PERIOD",        "COMMA",         "COLON",       
  "VAR",           "SEMICOLON",     "ASSIGN",        "LSQ",         
  "RSQ",           "NEW",           "NUMBER",        "STRING",      
  "TRUE",          "FALSE",         "NULL",          "INCREMENT",   
  "DECREMENT",     "PLUS",          "MINUS",         "XMARK",       
  "TILDE",         "ASTERISK",      "SOLIDUS",       "PERCENT",     
  "LSHIFT",        "RSHIFT",        "URSHIFT",       "AMPERSAND",   
  "CARET",         "VBAR",          "CONCATENATE",   "EQUAL",       
  "NOTEQUAL",      "LESS",          "GREATER",       "LESSEQUAL",   
  "GREATEREQUAL",  "IN",            "NOTIN",         "IS",          
  "NOTIS",         "LOGICAND",      "LOGICXOR",      "LOGICOR",     
  "QMARK",         "ELLIPSIS",      "MULASSIGN",     "DIVASSIGN",   
  "MODASSIGN",     "INTDIVASSIGN",  "ADDASSIGN",     "SUBASSIGN",   
  "LSHIFTASSIGN",  "RSHIFTASSIGN",  "URSHIFTASSIGN",  "BITANDASSIGN",
  "BITXORASSIGN",  "BITORASSIGN",   "DELETE",        "SWITCH",      
  "CASE",          "DEFAULT",       "WHILE",         "DO",          
  "FOR",           "EACHKEY",       "CONTINUE",      "BREAK",       
  "RETURN",        "THROW",         "error",         "script",      
  "stmt_list",     "expr_paren",    "stmt_brace",    "odecl_brace", 
  "expr_list",     "odecl_list",    "name",          "name_list",   
  "proto",         "decl",          "odecl",         "expr_simple", 
  "expr_index",    "expr_yield",    "expr_new",      "expr_call",   
  "expr_postfix",  "expr_literal",  "expr_suffix",   "expr_unary",  
  "expr_mul",      "expr_add",      "expr_shift",    "expr_bitand", 
  "expr_bitxor",   "expr_bitor",    "expr_concat",   "expr_compare",
  "expr_and",      "expr_xor",      "expr_or",       "expr_nolbr",  
  "expr_value",    "expr_lbody",    "expr_final",    "expr_assign", 
  "assign_op",     "value_lbody",   "value_list",    "keyval_lbody",
  "keyval_list",   "sexpr_lbody",   "sexpr_list",    "sexpr_assign",
  "condition",     "stmt_yield",    "stmt_using",    "stmt",        
  "catch",         "catch_list",  
};
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing reduce actions, the names of all rules are required.
*/
static const char *const yyRuleName[] = {
 /*   0 */ "script ::=",
 /*   1 */ "script ::= stmt_list",
 /*   2 */ "expr_paren ::= LPN RPN",
 /*   3 */ "expr_paren ::= LPN expr_list RPN",
 /*   4 */ "stmt_brace ::= LBR RBR",
 /*   5 */ "stmt_brace ::= LBR stmt_list RBR",
 /*   6 */ "odecl_brace ::= LBR RBR",
 /*   7 */ "odecl_brace ::= LBR odecl_list RBR",
 /*   8 */ "name ::= IDENTIFIER",
 /*   9 */ "name ::= name PERIOD IDENTIFIER",
 /*  10 */ "name_list ::= name",
 /*  11 */ "name_list ::= name_list COMMA name",
 /*  12 */ "proto ::= name expr_paren",
 /*  13 */ "decl ::= name odecl_brace",
 /*  14 */ "decl ::= name COLON expr_simple odecl_brace",
 /*  15 */ "decl ::= proto stmt_brace",
 /*  16 */ "decl ::= proto YIELD stmt_brace",
 /*  17 */ "decl ::= VAR name_list SEMICOLON",
 /*  18 */ "decl ::= VAR name_list ASSIGN expr_list SEMICOLON",
 /*  19 */ "odecl ::= decl",
 /*  20 */ "odecl ::= proto SEMICOLON",
 /*  21 */ "odecl ::= proto YIELD SEMICOLON",
 /*  22 */ "odecl_list ::= SEMICOLON",
 /*  23 */ "odecl_list ::= odecl",
 /*  24 */ "odecl_list ::= odecl_list SEMICOLON",
 /*  25 */ "odecl_list ::= odecl_list odecl",
 /*  26 */ "expr_index ::= LPN expr_assign RPN",
 /*  27 */ "expr_index ::= name PERIOD LSQ expr_value RSQ",
 /*  28 */ "expr_index ::= name LSQ expr_value RSQ",
 /*  29 */ "expr_index ::= expr_index PERIOD IDENTIFIER",
 /*  30 */ "expr_index ::= expr_index PERIOD LSQ expr_value RSQ",
 /*  31 */ "expr_index ::= expr_index LSQ expr_value RSQ",
 /*  32 */ "expr_yield ::= YIELD expr_paren",
 /*  33 */ "expr_new ::= NEW name expr_paren",
 /*  34 */ "expr_new ::= NEW expr_index expr_paren",
 /*  35 */ "expr_call ::= proto expr_paren",
 /*  36 */ "expr_call ::= expr_index expr_paren",
 /*  37 */ "expr_call ::= expr_yield expr_paren",
 /*  38 */ "expr_call ::= expr_new expr_paren",
 /*  39 */ "expr_call ::= expr_call expr_paren",
 /*  40 */ "expr_call ::= expr_postfix expr_paren",
 /*  41 */ "expr_postfix ::= proto PERIOD IDENTIFIER",
 /*  42 */ "expr_postfix ::= proto PERIOD LSQ expr_value RSQ",
 /*  43 */ "expr_postfix ::= proto LSQ expr_value RSQ",
 /*  44 */ "expr_postfix ::= expr_yield PERIOD IDENTIFIER",
 /*  45 */ "expr_postfix ::= expr_yield PERIOD LSQ expr_value RSQ",
 /*  46 */ "expr_postfix ::= expr_yield LSQ expr_value RSQ",
 /*  47 */ "expr_postfix ::= expr_new PERIOD IDENTIFIER",
 /*  48 */ "expr_postfix ::= expr_new PERIOD LSQ expr_value RSQ",
 /*  49 */ "expr_postfix ::= expr_new LSQ expr_value RSQ",
 /*  50 */ "expr_postfix ::= expr_call PERIOD IDENTIFIER",
 /*  51 */ "expr_postfix ::= expr_call PERIOD LSQ expr_value RSQ",
 /*  52 */ "expr_postfix ::= expr_call LSQ expr_value RSQ",
 /*  53 */ "expr_postfix ::= expr_postfix PERIOD IDENTIFIER",
 /*  54 */ "expr_postfix ::= expr_postfix PERIOD LSQ expr_value RSQ",
 /*  55 */ "expr_postfix ::= expr_postfix LSQ expr_value RSQ",
 /*  56 */ "expr_simple ::= name",
 /*  57 */ "expr_simple ::= proto",
 /*  58 */ "expr_simple ::= expr_index",
 /*  59 */ "expr_simple ::= expr_yield",
 /*  60 */ "expr_simple ::= expr_new",
 /*  61 */ "expr_simple ::= expr_call",
 /*  62 */ "expr_simple ::= expr_postfix",
 /*  63 */ "expr_simple ::= proto YIELD",
 /*  64 */ "expr_simple ::= expr_call YIELD",
 /*  65 */ "expr_literal ::= expr_simple",
 /*  66 */ "expr_literal ::= NUMBER",
 /*  67 */ "expr_literal ::= STRING",
 /*  68 */ "expr_literal ::= TRUE",
 /*  69 */ "expr_literal ::= FALSE",
 /*  70 */ "expr_literal ::= NULL",
 /*  71 */ "expr_suffix ::= expr_literal",
 /*  72 */ "expr_suffix ::= expr_suffix INCREMENT",
 /*  73 */ "expr_suffix ::= expr_suffix DECREMENT",
 /*  74 */ "expr_unary ::= expr_suffix",
 /*  75 */ "expr_unary ::= PLUS expr_unary",
 /*  76 */ "expr_unary ::= MINUS expr_unary",
 /*  77 */ "expr_unary ::= XMARK expr_unary",
 /*  78 */ "expr_unary ::= TILDE expr_unary",
 /*  79 */ "expr_unary ::= INCREMENT expr_unary",
 /*  80 */ "expr_unary ::= DECREMENT expr_unary",
 /*  81 */ "expr_mul ::= expr_unary",
 /*  82 */ "expr_mul ::= expr_mul ASTERISK expr_unary",
 /*  83 */ "expr_mul ::= expr_mul SOLIDUS expr_unary",
 /*  84 */ "expr_mul ::= expr_mul PERCENT expr_unary",
 /*  85 */ "expr_mul ::= expr_mul TILDE expr_unary",
 /*  86 */ "expr_add ::= expr_mul",
 /*  87 */ "expr_add ::= expr_add PLUS expr_mul",
 /*  88 */ "expr_add ::= expr_add MINUS expr_mul",
 /*  89 */ "expr_shift ::= expr_add",
 /*  90 */ "expr_shift ::= expr_shift LSHIFT expr_add",
 /*  91 */ "expr_shift ::= expr_shift RSHIFT expr_add",
 /*  92 */ "expr_shift ::= expr_shift URSHIFT expr_add",
 /*  93 */ "expr_bitand ::= expr_shift",
 /*  94 */ "expr_bitand ::= expr_bitand AMPERSAND expr_shift",
 /*  95 */ "expr_bitxor ::= expr_bitand",
 /*  96 */ "expr_bitxor ::= expr_bitxor CARET expr_bitand",
 /*  97 */ "expr_bitor ::= expr_bitxor",
 /*  98 */ "expr_bitor ::= expr_bitor VBAR expr_bitxor",
 /*  99 */ "expr_concat ::= expr_bitor",
 /* 100 */ "expr_concat ::= expr_concat CONCATENATE expr_bitor",
 /* 101 */ "expr_compare ::= expr_concat",
 /* 102 */ "expr_compare ::= expr_compare EQUAL expr_concat",
 /* 103 */ "expr_compare ::= expr_compare NOTEQUAL expr_concat",
 /* 104 */ "expr_compare ::= expr_compare LESS expr_concat",
 /* 105 */ "expr_compare ::= expr_compare GREATER expr_concat",
 /* 106 */ "expr_compare ::= expr_compare LESSEQUAL expr_concat",
 /* 107 */ "expr_compare ::= expr_compare GREATEREQUAL expr_concat",
 /* 108 */ "expr_compare ::= expr_compare IN expr_concat",
 /* 109 */ "expr_compare ::= expr_compare NOTIN expr_concat",
 /* 110 */ "expr_compare ::= expr_compare IS expr_concat",
 /* 111 */ "expr_compare ::= expr_compare NOTIS expr_concat",
 /* 112 */ "expr_and ::= expr_compare",
 /* 113 */ "expr_and ::= expr_and LOGICAND expr_compare",
 /* 114 */ "expr_xor ::= expr_and",
 /* 115 */ "expr_xor ::= expr_xor LOGICXOR expr_and",
 /* 116 */ "expr_or ::= expr_xor",
 /* 117 */ "expr_or ::= expr_or LOGICOR expr_xor",
 /* 118 */ "expr_nolbr ::= expr_or",
 /* 119 */ "expr_nolbr ::= expr_or QMARK expr_value COLON expr_value",
 /* 120 */ "expr_nolbr ::= LSQ RSQ",
 /* 121 */ "expr_nolbr ::= LSQ value_list RSQ",
 /* 122 */ "expr_nolbr ::= COLON odecl_brace",
 /* 123 */ "expr_nolbr ::= COLON expr_simple odecl_brace",
 /* 124 */ "expr_nolbr ::= QMARK expr_paren stmt_brace",
 /* 125 */ "expr_nolbr ::= PERIOD QMARK expr_paren stmt_brace",
 /* 126 */ "expr_nolbr ::= QMARK expr_paren YIELD stmt_brace",
 /* 127 */ "expr_nolbr ::= PERIOD QMARK expr_paren YIELD stmt_brace",
 /* 128 */ "expr_value ::= expr_nolbr",
 /* 129 */ "expr_value ::= LBR RBR",
 /* 130 */ "expr_value ::= LBR keyval_list RBR",
 /* 131 */ "expr_lbody ::= expr_value",
 /* 132 */ "expr_lbody ::= expr_lbody COMMA expr_value",
 /* 133 */ "expr_final ::= ELLIPSIS",
 /* 134 */ "expr_final ::= proto ELLIPSIS",
 /* 135 */ "expr_final ::= expr_call ELLIPSIS",
 /* 136 */ "expr_final ::= expr_yield ELLIPSIS",
 /* 137 */ "expr_final ::= proto YIELD ELLIPSIS",
 /* 138 */ "expr_final ::= expr_call YIELD ELLIPSIS",
 /* 139 */ "expr_final ::= name LSQ RSQ ELLIPSIS",
 /* 140 */ "expr_final ::= proto LSQ RSQ ELLIPSIS",
 /* 141 */ "expr_final ::= expr_index LSQ RSQ ELLIPSIS",
 /* 142 */ "expr_final ::= expr_yield LSQ RSQ ELLIPSIS",
 /* 143 */ "expr_final ::= expr_new LSQ RSQ ELLIPSIS",
 /* 144 */ "expr_final ::= expr_call LSQ RSQ ELLIPSIS",
 /* 145 */ "expr_final ::= expr_postfix LSQ RSQ ELLIPSIS",
 /* 146 */ "expr_list ::= expr_final",
 /* 147 */ "expr_list ::= expr_lbody",
 /* 148 */ "expr_list ::= expr_lbody COMMA expr_final",
 /* 149 */ "expr_assign ::= expr_list",
 /* 150 */ "expr_assign ::= expr_lbody assign_op expr_assign",
 /* 151 */ "assign_op ::= ASSIGN",
 /* 152 */ "assign_op ::= MULASSIGN",
 /* 153 */ "assign_op ::= DIVASSIGN",
 /* 154 */ "assign_op ::= MODASSIGN",
 /* 155 */ "assign_op ::= INTDIVASSIGN",
 /* 156 */ "assign_op ::= ADDASSIGN",
 /* 157 */ "assign_op ::= SUBASSIGN",
 /* 158 */ "assign_op ::= LSHIFTASSIGN",
 /* 159 */ "assign_op ::= RSHIFTASSIGN",
 /* 160 */ "assign_op ::= URSHIFTASSIGN",
 /* 161 */ "assign_op ::= BITANDASSIGN",
 /* 162 */ "assign_op ::= BITXORASSIGN",
 /* 163 */ "assign_op ::= BITORASSIGN",
 /* 164 */ "value_lbody ::= expr_value",
 /* 165 */ "value_lbody ::= value_lbody COMMA expr_value",
 /* 166 */ "value_list ::= expr_final",
 /* 167 */ "value_list ::= expr_final COMMA",
 /* 168 */ "value_list ::= value_lbody",
 /* 169 */ "value_list ::= value_lbody COMMA",
 /* 170 */ "value_list ::= value_lbody COMMA expr_final",
 /* 171 */ "keyval_lbody ::= expr_value COLON expr_value",
 /* 172 */ "keyval_lbody ::= keyval_lbody COMMA expr_value COLON expr_value",
 /* 173 */ "keyval_list ::= keyval_lbody",
 /* 174 */ "keyval_list ::= keyval_lbody COMMA",
 /* 175 */ "sexpr_lbody ::= expr_nolbr",
 /* 176 */ "sexpr_lbody ::= sexpr_lbody COMMA expr_value",
 /* 177 */ "sexpr_list ::= expr_final",
 /* 178 */ "sexpr_list ::= sexpr_lbody",
 /* 179 */ "sexpr_list ::= sexpr_lbody COMMA expr_final",
 /* 180 */ "sexpr_assign ::= sexpr_list",
 /* 181 */ "sexpr_assign ::= sexpr_lbody assign_op expr_assign",
 /* 182 */ "condition ::= expr_assign",
 /* 183 */ "condition ::= VAR name_list ASSIGN expr_list",
 /* 184 */ "stmt_yield ::= YIELD",
 /* 185 */ "stmt_using ::= USING",
 /* 186 */ "stmt ::= stmt_brace",
 /* 187 */ "stmt ::= sexpr_assign SEMICOLON",
 /* 188 */ "stmt ::= DELETE expr_lbody SEMICOLON",
 /* 189 */ "stmt ::= IF LPN condition RPN stmt",
 /* 190 */ "stmt ::= IF LPN condition RPN stmt ELSE stmt",
 /* 191 */ "stmt ::= SWITCH LPN condition RPN stmt_brace",
 /* 192 */ "stmt ::= CASE expr_value COLON",
 /* 193 */ "stmt ::= DEFAULT COLON",
 /* 194 */ "stmt ::= WHILE LPN condition RPN stmt",
 /* 195 */ "stmt ::= DO stmt WHILE LPN expr_assign RPN SEMICOLON",
 /* 196 */ "stmt ::= FOR LPN expr_lbody COLON expr_value RPN stmt",
 /* 197 */ "stmt ::= FOR LPN expr_lbody EACHKEY expr_value RPN stmt",
 /* 198 */ "stmt ::= FOR LPN VAR name_list COLON expr_value RPN stmt",
 /* 199 */ "stmt ::= FOR LPN VAR name_list EACHKEY expr_value RPN stmt",
 /* 200 */ "stmt ::= FOR LPN condition SEMICOLON expr_assign SEMICOLON expr_assign RPN stmt",
 /* 201 */ "stmt ::= CONTINUE SEMICOLON",
 /* 202 */ "stmt ::= BREAK SEMICOLON",
 /* 203 */ "stmt ::= RETURN SEMICOLON",
 /* 204 */ "stmt ::= RETURN expr_list SEMICOLON",
 /* 205 */ "stmt ::= stmt_yield SEMICOLON",
 /* 206 */ "stmt ::= stmt_yield expr_list SEMICOLON",
 /* 207 */ "stmt ::= USING LPN condition RPN stmt",
 /* 208 */ "stmt ::= stmt_using condition SEMICOLON",
 /* 209 */ "stmt ::= TRY stmt catch_list",
 /* 210 */ "stmt ::= TRY stmt FINALLY stmt",
 /* 211 */ "stmt ::= TRY stmt catch_list FINALLY stmt",
 /* 212 */ "stmt ::= THROW expr_value SEMICOLON",
 /* 213 */ "catch ::= CATCH LPN COLON expr_simple RPN stmt",
 /* 214 */ "catch ::= CATCH LPN expr_value COLON expr_simple RPN stmt",
 /* 215 */ "catch ::= CATCH LPN VAR name COLON expr_simple RPN stmt",
 /* 216 */ "catch_list ::= catch",
 /* 217 */ "catch_list ::= catch_list catch",
 /* 218 */ "stmt_list ::= stmt",
 /* 219 */ "stmt_list ::= decl",
 /* 220 */ "stmt_list ::= SEMICOLON",
 /* 221 */ "stmt_list ::= stmt_list stmt",
 /* 222 */ "stmt_list ::= stmt_list decl",
 /* 223 */ "stmt_list ::= stmt_list SEMICOLON",
};
#endif /* NDEBUG */


#if YYSTACKDEPTH<=0
/*
** Try to increase the size of the parser stack.
*/
static void yyGrowStack(yyParser *p){
  int newSize;
  yyStackEntry *pNew;

  newSize = p->yystksz*2 + 100;
  pNew = realloc(p->yystack, newSize*sizeof(pNew[0]));
  if( pNew ){
    p->yystack = pNew;
    p->yystksz = newSize;
#ifndef NDEBUG
    if( yyTraceFILE ){
      fprintf(yyTraceFILE,"%sStack grows to %d entries!\n",
              yyTracePrompt, p->yystksz);
    }
#endif
  }
}
#endif

/* 
** This function allocates a new parser.
** The only argument is a pointer to a function which works like
** malloc.
**
** Inputs:
** A pointer to the function used to allocate memory.
**
** Outputs:
** A pointer to a parser.  This pointer is used in subsequent calls
** to XecParse and XecParseFree.
*/
void *XecParseAlloc(void *(*mallocProc)(size_t)){
  yyParser *pParser;
  pParser = (yyParser*)(*mallocProc)( (size_t)sizeof(yyParser) );
  if( pParser ){
    pParser->yyidx = -1;
#ifdef YYTRACKMAXSTACKDEPTH
    pParser->yyidxMax = 0;
#endif
#if YYSTACKDEPTH<=0
    pParser->yystack = NULL;
    pParser->yystksz = 0;
    yyGrowStack(pParser);
#endif
  }
  return pParser;
}

/* The following function deletes the value associated with a
** symbol.  The symbol can be either a terminal or nonterminal.
** "yymajor" is the symbol code, and "yypminor" is a pointer to
** the value.
*/
static void yy_destructor(
  yyParser *yypParser,    /* The parser */
  YYCODETYPE yymajor,     /* Type code for object to destroy */
  YYMINORTYPE *yypminor   /* The object to be destroyed */
){
  XecParseARG_FETCH;
  switch( yymajor ){
    /* Here is inserted the actions which take place when a
    ** terminal or non-terminal is destroyed.  This can happen
    ** when the symbol is popped from the stack during a
    ** reduce or during error processing or when a parser is 
    ** being destroyed before it is finished parsing.
    **
    ** Note: during a reduce, the only symbols destroyed are those
    ** which appear on the RHS of the rule, but which are not used
    ** inside the C code.
    */
      /* TERMINAL Destructor */
    case 1: /* IF */
    case 2: /* ELSE */
    case 3: /* TRY */
    case 4: /* CATCH */
    case 5: /* FINALLY */
    case 6: /* YIELD */
    case 7: /* USING */
    case 8: /* LPN */
    case 9: /* RPN */
    case 10: /* LBR */
    case 11: /* RBR */
    case 12: /* IDENTIFIER */
    case 13: /* PERIOD */
    case 14: /* COMMA */
    case 15: /* COLON */
    case 16: /* VAR */
    case 17: /* SEMICOLON */
    case 18: /* ASSIGN */
    case 19: /* LSQ */
    case 20: /* RSQ */
    case 21: /* NEW */
    case 22: /* NUMBER */
    case 23: /* STRING */
    case 24: /* TRUE */
    case 25: /* FALSE */
    case 26: /* NULL */
    case 27: /* INCREMENT */
    case 28: /* DECREMENT */
    case 29: /* PLUS */
    case 30: /* MINUS */
    case 31: /* XMARK */
    case 32: /* TILDE */
    case 33: /* ASTERISK */
    case 34: /* SOLIDUS */
    case 35: /* PERCENT */
    case 36: /* LSHIFT */
    case 37: /* RSHIFT */
    case 38: /* URSHIFT */
    case 39: /* AMPERSAND */
    case 40: /* CARET */
    case 41: /* VBAR */
    case 42: /* CONCATENATE */
    case 43: /* EQUAL */
    case 44: /* NOTEQUAL */
    case 45: /* LESS */
    case 46: /* GREATER */
    case 47: /* LESSEQUAL */
    case 48: /* GREATEREQUAL */
    case 49: /* IN */
    case 50: /* NOTIN */
    case 51: /* IS */
    case 52: /* NOTIS */
    case 53: /* LOGICAND */
    case 54: /* LOGICXOR */
    case 55: /* LOGICOR */
    case 56: /* QMARK */
    case 57: /* ELLIPSIS */
    case 58: /* MULASSIGN */
    case 59: /* DIVASSIGN */
    case 60: /* MODASSIGN */
    case 61: /* INTDIVASSIGN */
    case 62: /* ADDASSIGN */
    case 63: /* SUBASSIGN */
    case 64: /* LSHIFTASSIGN */
    case 65: /* RSHIFTASSIGN */
    case 66: /* URSHIFTASSIGN */
    case 67: /* BITANDASSIGN */
    case 68: /* BITXORASSIGN */
    case 69: /* BITORASSIGN */
    case 70: /* DELETE */
    case 71: /* SWITCH */
    case 72: /* CASE */
    case 73: /* DEFAULT */
    case 74: /* WHILE */
    case 75: /* DO */
    case 76: /* FOR */
    case 77: /* EACHKEY */
    case 78: /* CONTINUE */
    case 79: /* BREAK */
    case 80: /* RETURN */
    case 81: /* THROW */
{
#line 54 "../../toolbox/source/xec/lib/xec_parser_lemon.y"

    p->destroy( (yypminor->yy0) );

#line 1609 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
}
      break;
      /* Default NON-TERMINAL Destructor */
    case 82: /* error */
    case 83: /* script */
    case 84: /* stmt_list */
    case 85: /* expr_paren */
    case 86: /* stmt_brace */
    case 87: /* odecl_brace */
    case 88: /* expr_list */
    case 89: /* odecl_list */
    case 90: /* name */
    case 91: /* name_list */
    case 92: /* proto */
    case 93: /* decl */
    case 94: /* odecl */
    case 95: /* expr_simple */
    case 96: /* expr_index */
    case 97: /* expr_yield */
    case 98: /* expr_new */
    case 99: /* expr_call */
    case 100: /* expr_postfix */
    case 101: /* expr_literal */
    case 102: /* expr_suffix */
    case 103: /* expr_unary */
    case 104: /* expr_mul */
    case 105: /* expr_add */
    case 106: /* expr_shift */
    case 107: /* expr_bitand */
    case 108: /* expr_bitxor */
    case 109: /* expr_bitor */
    case 110: /* expr_concat */
    case 111: /* expr_compare */
    case 112: /* expr_and */
    case 113: /* expr_xor */
    case 114: /* expr_or */
    case 115: /* expr_nolbr */
    case 116: /* expr_value */
    case 117: /* expr_lbody */
    case 118: /* expr_final */
    case 119: /* expr_assign */
    case 120: /* assign_op */
    case 121: /* value_lbody */
    case 122: /* value_list */
    case 123: /* keyval_lbody */
    case 124: /* keyval_list */
    case 125: /* sexpr_lbody */
    case 126: /* sexpr_list */
    case 127: /* sexpr_assign */
    case 128: /* condition */
    case 129: /* stmt_yield */
    case 130: /* stmt_using */
    case 131: /* stmt */
    case 132: /* catch */
    case 133: /* catch_list */
{
#line 49 "../../toolbox/source/xec/lib/xec_parser_lemon.y"

    delete (yypminor->yy1);

#line 1670 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
}
      break;
    default:  break;   /* If no destructor action specified: do nothing */
  }
}

/*
** Pop the parser's stack once.
**
** If there is a destructor routine associated with the token which
** is popped from the stack, then call it.
**
** Return the major token number for the symbol popped.
*/
static int yy_pop_parser_stack(yyParser *pParser){
  YYCODETYPE yymajor;
  yyStackEntry *yytos = &pParser->yystack[pParser->yyidx];

  if( pParser->yyidx<0 ) return 0;
#ifndef NDEBUG
  if( yyTraceFILE && pParser->yyidx>=0 ){
    fprintf(yyTraceFILE,"%sPopping %s\n",
      yyTracePrompt,
      yyTokenName[yytos->major]);
  }
#endif
  yymajor = yytos->major;
  yy_destructor(pParser, yymajor, &yytos->minor);
  pParser->yyidx--;
  return yymajor;
}

/* 
** Deallocate and destroy a parser.  Destructors are all called for
** all stack elements before shutting the parser down.
**
** Inputs:
** <ul>
** <li>  A pointer to the parser.  This should be a pointer
**       obtained from XecParseAlloc.
** <li>  A pointer to a function used to reclaim memory obtained
**       from malloc.
** </ul>
*/
void XecParseFree(
  void *p,                    /* The parser to be deleted */
  void (*freeProc)(void*)     /* Function used to reclaim memory */
){
  yyParser *pParser = (yyParser*)p;
  if( pParser==0 ) return;
  while( pParser->yyidx>=0 ) yy_pop_parser_stack(pParser);
#if YYSTACKDEPTH<=0
  free(pParser->yystack);
#endif
  (*freeProc)((void*)pParser);
}

/*
** Return the peak depth of the stack for a parser.
*/
#ifdef YYTRACKMAXSTACKDEPTH
int XecParseStackPeak(void *p){
  yyParser *pParser = (yyParser*)p;
  return pParser->yyidxMax;
}
#endif

/*
** Find the appropriate action for a parser given the terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
static int yy_find_shift_action(
  yyParser *pParser,        /* The parser */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
  int stateno = pParser->yystack[pParser->yyidx].stateno;
 
  if( stateno>YY_SHIFT_MAX || (i = yy_shift_ofst[stateno])==YY_SHIFT_USE_DFLT ){
    return yy_default[stateno];
  }
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
  if( i<0 || i>=YY_SZ_ACTTAB || yy_lookahead[i]!=iLookAhead ){
    if( iLookAhead>0 ){
#ifdef YYFALLBACK
      YYCODETYPE iFallback;            /* Fallback token */
      if( iLookAhead<sizeof(yyFallback)/sizeof(yyFallback[0])
             && (iFallback = yyFallback[iLookAhead])!=0 ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE, "%sFALLBACK %s => %s\n",
             yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[iFallback]);
        }
#endif
        return yy_find_shift_action(pParser, iFallback);
      }
#endif
#ifdef YYWILDCARD
      {
        int j = i - iLookAhead + YYWILDCARD;
        if( j>=0 && j<YY_SZ_ACTTAB && yy_lookahead[j]==YYWILDCARD ){
#ifndef NDEBUG
          if( yyTraceFILE ){
            fprintf(yyTraceFILE, "%sWILDCARD %s => %s\n",
               yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[YYWILDCARD]);
          }
#endif /* NDEBUG */
          return yy_action[j];
        }
      }
#endif /* YYWILDCARD */
    }
    return yy_default[stateno];
  }else{
    return yy_action[i];
  }
}

/*
** Find the appropriate action for a parser given the non-terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
static int yy_find_reduce_action(
  int stateno,              /* Current state number */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
#ifdef YYERRORSYMBOL
  if( stateno>YY_REDUCE_MAX ){
    return yy_default[stateno];
  }
#else
  assert( stateno<=YY_REDUCE_MAX );
#endif
  i = yy_reduce_ofst[stateno];
  assert( i!=YY_REDUCE_USE_DFLT );
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
#ifdef YYERRORSYMBOL
  if( i<0 || i>=YY_SZ_ACTTAB || yy_lookahead[i]!=iLookAhead ){
    return yy_default[stateno];
  }
#else
  assert( i>=0 && i<YY_SZ_ACTTAB );
  assert( yy_lookahead[i]==iLookAhead );
#endif
  return yy_action[i];
}

/*
** The following routine is called if the stack overflows.
*/
static void yyStackOverflow(yyParser *yypParser, YYMINORTYPE *yypMinor){
   XecParseARG_FETCH;
   yypParser->yyidx--;
#ifndef NDEBUG
   if( yyTraceFILE ){
     fprintf(yyTraceFILE,"%sStack Overflow!\n",yyTracePrompt);
   }
#endif
   while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
   /* Here code is inserted which will execute if the parser
   ** stack every overflows */
   XecParseARG_STORE; /* Suppress warning about unused %extra_argument var */
}

/*
** Perform a shift action.
*/
static void yy_shift(
  yyParser *yypParser,          /* The parser to be shifted */
  int yyNewState,               /* The new state to shift in */
  int yyMajor,                  /* The major token to shift in */
  YYMINORTYPE *yypMinor         /* Pointer to the minor token to shift in */
){
  yyStackEntry *yytos;
  yypParser->yyidx++;
#ifdef YYTRACKMAXSTACKDEPTH
  if( yypParser->yyidx>yypParser->yyidxMax ){
    yypParser->yyidxMax = yypParser->yyidx;
  }
#endif
#if YYSTACKDEPTH>0 
  if( yypParser->yyidx>=YYSTACKDEPTH ){
    yyStackOverflow(yypParser, yypMinor);
    return;
  }
#else
  if( yypParser->yyidx>=yypParser->yystksz ){
    yyGrowStack(yypParser);
    if( yypParser->yyidx>=yypParser->yystksz ){
      yyStackOverflow(yypParser, yypMinor);
      return;
    }
  }
#endif
  yytos = &yypParser->yystack[yypParser->yyidx];
  yytos->stateno = (YYACTIONTYPE)yyNewState;
  yytos->major = (YYCODETYPE)yyMajor;
  yytos->minor = *yypMinor;
#ifndef NDEBUG
  if( yyTraceFILE && yypParser->yyidx>0 ){
    int i;
    fprintf(yyTraceFILE,"%sShift %d\n",yyTracePrompt,yyNewState);
    fprintf(yyTraceFILE,"%sStack:",yyTracePrompt);
    for(i=1; i<=yypParser->yyidx; i++)
      fprintf(yyTraceFILE," %s",yyTokenName[yypParser->yystack[i].major]);
    fprintf(yyTraceFILE,"\n");
  }
#endif
}

/* The following table contains information about every rule that
** is used during the reduce.
*/
static const struct {
  YYCODETYPE lhs;         /* Symbol on the left-hand side of the rule */
  unsigned char nrhs;     /* Number of right-hand side symbols in the rule */
} yyRuleInfo[] = {
  { 83, 0 },
  { 83, 1 },
  { 85, 2 },
  { 85, 3 },
  { 86, 2 },
  { 86, 3 },
  { 87, 2 },
  { 87, 3 },
  { 90, 1 },
  { 90, 3 },
  { 91, 1 },
  { 91, 3 },
  { 92, 2 },
  { 93, 2 },
  { 93, 4 },
  { 93, 2 },
  { 93, 3 },
  { 93, 3 },
  { 93, 5 },
  { 94, 1 },
  { 94, 2 },
  { 94, 3 },
  { 89, 1 },
  { 89, 1 },
  { 89, 2 },
  { 89, 2 },
  { 96, 3 },
  { 96, 5 },
  { 96, 4 },
  { 96, 3 },
  { 96, 5 },
  { 96, 4 },
  { 97, 2 },
  { 98, 3 },
  { 98, 3 },
  { 99, 2 },
  { 99, 2 },
  { 99, 2 },
  { 99, 2 },
  { 99, 2 },
  { 99, 2 },
  { 100, 3 },
  { 100, 5 },
  { 100, 4 },
  { 100, 3 },
  { 100, 5 },
  { 100, 4 },
  { 100, 3 },
  { 100, 5 },
  { 100, 4 },
  { 100, 3 },
  { 100, 5 },
  { 100, 4 },
  { 100, 3 },
  { 100, 5 },
  { 100, 4 },
  { 95, 1 },
  { 95, 1 },
  { 95, 1 },
  { 95, 1 },
  { 95, 1 },
  { 95, 1 },
  { 95, 1 },
  { 95, 2 },
  { 95, 2 },
  { 101, 1 },
  { 101, 1 },
  { 101, 1 },
  { 101, 1 },
  { 101, 1 },
  { 101, 1 },
  { 102, 1 },
  { 102, 2 },
  { 102, 2 },
  { 103, 1 },
  { 103, 2 },
  { 103, 2 },
  { 103, 2 },
  { 103, 2 },
  { 103, 2 },
  { 103, 2 },
  { 104, 1 },
  { 104, 3 },
  { 104, 3 },
  { 104, 3 },
  { 104, 3 },
  { 105, 1 },
  { 105, 3 },
  { 105, 3 },
  { 106, 1 },
  { 106, 3 },
  { 106, 3 },
  { 106, 3 },
  { 107, 1 },
  { 107, 3 },
  { 108, 1 },
  { 108, 3 },
  { 109, 1 },
  { 109, 3 },
  { 110, 1 },
  { 110, 3 },
  { 111, 1 },
  { 111, 3 },
  { 111, 3 },
  { 111, 3 },
  { 111, 3 },
  { 111, 3 },
  { 111, 3 },
  { 111, 3 },
  { 111, 3 },
  { 111, 3 },
  { 111, 3 },
  { 112, 1 },
  { 112, 3 },
  { 113, 1 },
  { 113, 3 },
  { 114, 1 },
  { 114, 3 },
  { 115, 1 },
  { 115, 5 },
  { 115, 2 },
  { 115, 3 },
  { 115, 2 },
  { 115, 3 },
  { 115, 3 },
  { 115, 4 },
  { 115, 4 },
  { 115, 5 },
  { 116, 1 },
  { 116, 2 },
  { 116, 3 },
  { 117, 1 },
  { 117, 3 },
  { 118, 1 },
  { 118, 2 },
  { 118, 2 },
  { 118, 2 },
  { 118, 3 },
  { 118, 3 },
  { 118, 4 },
  { 118, 4 },
  { 118, 4 },
  { 118, 4 },
  { 118, 4 },
  { 118, 4 },
  { 118, 4 },
  { 88, 1 },
  { 88, 1 },
  { 88, 3 },
  { 119, 1 },
  { 119, 3 },
  { 120, 1 },
  { 120, 1 },
  { 120, 1 },
  { 120, 1 },
  { 120, 1 },
  { 120, 1 },
  { 120, 1 },
  { 120, 1 },
  { 120, 1 },
  { 120, 1 },
  { 120, 1 },
  { 120, 1 },
  { 120, 1 },
  { 121, 1 },
  { 121, 3 },
  { 122, 1 },
  { 122, 2 },
  { 122, 1 },
  { 122, 2 },
  { 122, 3 },
  { 123, 3 },
  { 123, 5 },
  { 124, 1 },
  { 124, 2 },
  { 125, 1 },
  { 125, 3 },
  { 126, 1 },
  { 126, 1 },
  { 126, 3 },
  { 127, 1 },
  { 127, 3 },
  { 128, 1 },
  { 128, 4 },
  { 129, 1 },
  { 130, 1 },
  { 131, 1 },
  { 131, 2 },
  { 131, 3 },
  { 131, 5 },
  { 131, 7 },
  { 131, 5 },
  { 131, 3 },
  { 131, 2 },
  { 131, 5 },
  { 131, 7 },
  { 131, 7 },
  { 131, 7 },
  { 131, 8 },
  { 131, 8 },
  { 131, 9 },
  { 131, 2 },
  { 131, 2 },
  { 131, 2 },
  { 131, 3 },
  { 131, 2 },
  { 131, 3 },
  { 131, 5 },
  { 131, 3 },
  { 131, 3 },
  { 131, 4 },
  { 131, 5 },
  { 131, 3 },
  { 132, 6 },
  { 132, 7 },
  { 132, 8 },
  { 133, 1 },
  { 133, 2 },
  { 84, 1 },
  { 84, 1 },
  { 84, 1 },
  { 84, 2 },
  { 84, 2 },
  { 84, 2 },
};

static void yy_accept(yyParser*);  /* Forward Declaration */

/*
** Perform a reduce action and the shift that must immediately
** follow the reduce.
*/
static void yy_reduce(
  yyParser *yypParser,         /* The parser */
  int yyruleno                 /* Number of the rule by which to reduce */
){
  int yygoto;                     /* The next state */
  int yyact;                      /* The next action */
  YYMINORTYPE yygotominor;        /* The LHS of the rule reduced */
  yyStackEntry *yymsp;            /* The top of the parser's stack */
  int yysize;                     /* Amount to pop the stack */
  XecParseARG_FETCH;
  yymsp = &yypParser->yystack[yypParser->yyidx];
#ifndef NDEBUG
  if( yyTraceFILE && yyruleno>=0 
        && yyruleno<(int)(sizeof(yyRuleName)/sizeof(yyRuleName[0])) ){
    fprintf(yyTraceFILE, "%sReduce [%s].\n", yyTracePrompt,
      yyRuleName[yyruleno]);
  }
#endif /* NDEBUG */

  /* Silence complaints from purify about yygotominor being uninitialized
  ** in some cases when it is copied into the stack after the following
  ** switch.  yygotominor is uninitialized when a rule reduces that does
  ** not set the value of its left-hand side nonterminal.  Leaving the
  ** value of the nonterminal uninitialized is utterly harmless as long
  ** as the value is never used.  So really the only thing this code
  ** accomplishes is to quieten purify.  
  **
  ** 2007-01-16:  The wireshark project (www.wireshark.org) reports that
  ** without this code, their parser segfaults.  I'm not sure what there
  ** parser is doing to make this happen.  This is the second bug report
  ** from wireshark this week.  Clearly they are stressing Lemon in ways
  ** that it has not been previously stressed...  (SQLite ticket #2172)
  */
  /*memset(&yygotominor, 0, sizeof(yygotominor));*/
  yygotominor = yyzerominor;


  switch( yyruleno ){
  /* Beginning here are the reduction cases.  A typical example
  ** follows:
  **   case 0:
  **  #line <lineno> <grammarfile>
  **     { ... }           // User supplied code
  **  #line <lineno> <thisfile>
  **     break;
  */
      case 0: /* script ::= */
#line 95 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    p->set_root( NULL );
                }
#line 2182 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 1: /* script ::= stmt_list */
#line 99 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    p->set_root( yymsp[0].minor.yy31 );
                }
#line 2189 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 2: /* expr_paren ::= LPN RPN */
#line 115 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy193 = new xec_expression_list();
                  yy_destructor(yypParser,8,&yymsp[-1].minor);
  yy_destructor(yypParser,9,&yymsp[0].minor);
}
#line 2198 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 3: /* expr_paren ::= LPN expr_list RPN */
#line 119 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy193 = yymsp[-1].minor.yy154->as_list();
                  yy_destructor(yypParser,8,&yymsp[-2].minor);
  yy_destructor(yypParser,9,&yymsp[0].minor);
}
#line 2207 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 4: /* stmt_brace ::= LBR RBR */
#line 124 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy31 = new xec_statement_compound();
                    yygotominor.yy31->set_token( yymsp[-1].minor.yy0 );
                  yy_destructor(yypParser,11,&yymsp[0].minor);
}
#line 2216 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 5: /* stmt_brace ::= LBR stmt_list RBR */
#line 129 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy31 = yymsp[-1].minor.yy31;
                    yygotominor.yy31->set_token( yymsp[-2].minor.yy0 );
                  yy_destructor(yypParser,11,&yymsp[0].minor);
}
#line 2225 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 6: /* odecl_brace ::= LBR RBR */
#line 135 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy18 = new xec_declaration_object();
                  yy_destructor(yypParser,10,&yymsp[-1].minor);
  yy_destructor(yypParser,11,&yymsp[0].minor);
}
#line 2234 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 7: /* odecl_brace ::= LBR odecl_list RBR */
#line 139 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy18 = yymsp[-1].minor.yy18;
                  yy_destructor(yypParser,10,&yymsp[-2].minor);
  yy_destructor(yypParser,11,&yymsp[0].minor);
}
#line 2243 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 8: /* name ::= IDENTIFIER */
#line 159 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy154 = new xec_expression_identifier( yymsp[0].minor.yy0 );
                }
#line 2250 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 9: /* name ::= name PERIOD IDENTIFIER */
      case 29: /* expr_index ::= expr_index PERIOD IDENTIFIER */ yytestcase(yyruleno==29);
      case 44: /* expr_postfix ::= expr_yield PERIOD IDENTIFIER */ yytestcase(yyruleno==44);
      case 47: /* expr_postfix ::= expr_new PERIOD IDENTIFIER */ yytestcase(yyruleno==47);
      case 53: /* expr_postfix ::= expr_postfix PERIOD IDENTIFIER */ yytestcase(yyruleno==53);
#line 163 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy154 = new xec_expression_lookup( yymsp[-2].minor.yy154, yymsp[0].minor.yy0 );
                  yy_destructor(yypParser,13,&yymsp[-1].minor);
}
#line 2262 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 10: /* name_list ::= name */
      case 56: /* expr_simple ::= name */ yytestcase(yyruleno==56);
      case 58: /* expr_simple ::= expr_index */ yytestcase(yyruleno==58);
      case 59: /* expr_simple ::= expr_yield */ yytestcase(yyruleno==59);
      case 60: /* expr_simple ::= expr_new */ yytestcase(yyruleno==60);
      case 62: /* expr_simple ::= expr_postfix */ yytestcase(yyruleno==62);
      case 65: /* expr_literal ::= expr_simple */ yytestcase(yyruleno==65);
      case 71: /* expr_suffix ::= expr_literal */ yytestcase(yyruleno==71);
      case 74: /* expr_unary ::= expr_suffix */ yytestcase(yyruleno==74);
      case 81: /* expr_mul ::= expr_unary */ yytestcase(yyruleno==81);
      case 86: /* expr_add ::= expr_mul */ yytestcase(yyruleno==86);
      case 89: /* expr_shift ::= expr_add */ yytestcase(yyruleno==89);
      case 93: /* expr_bitand ::= expr_shift */ yytestcase(yyruleno==93);
      case 95: /* expr_bitxor ::= expr_bitand */ yytestcase(yyruleno==95);
      case 97: /* expr_bitor ::= expr_bitxor */ yytestcase(yyruleno==97);
      case 99: /* expr_concat ::= expr_bitor */ yytestcase(yyruleno==99);
      case 101: /* expr_compare ::= expr_concat */ yytestcase(yyruleno==101);
      case 112: /* expr_and ::= expr_compare */ yytestcase(yyruleno==112);
      case 114: /* expr_xor ::= expr_and */ yytestcase(yyruleno==114);
      case 116: /* expr_or ::= expr_xor */ yytestcase(yyruleno==116);
      case 118: /* expr_nolbr ::= expr_or */ yytestcase(yyruleno==118);
      case 128: /* expr_value ::= expr_nolbr */ yytestcase(yyruleno==128);
      case 131: /* expr_lbody ::= expr_value */ yytestcase(yyruleno==131);
      case 146: /* expr_list ::= expr_final */ yytestcase(yyruleno==146);
      case 147: /* expr_list ::= expr_lbody */ yytestcase(yyruleno==147);
      case 149: /* expr_assign ::= expr_list */ yytestcase(yyruleno==149);
      case 175: /* sexpr_lbody ::= expr_nolbr */ yytestcase(yyruleno==175);
      case 177: /* sexpr_list ::= expr_final */ yytestcase(yyruleno==177);
      case 178: /* sexpr_list ::= sexpr_lbody */ yytestcase(yyruleno==178);
      case 180: /* sexpr_assign ::= sexpr_list */ yytestcase(yyruleno==180);
      case 182: /* condition ::= expr_assign */ yytestcase(yyruleno==182);
#line 170 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy154 = yymsp[0].minor.yy154;
                }
#line 2299 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 11: /* name_list ::= name_list COMMA name */
      case 132: /* expr_lbody ::= expr_lbody COMMA expr_value */ yytestcase(yyruleno==132);
      case 176: /* sexpr_lbody ::= sexpr_lbody COMMA expr_value */ yytestcase(yyruleno==176);
#line 174 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    xec_expression_list* list;
                    yygotominor.yy154 = list = yymsp[-2].minor.yy154->as_list();
                    list->append_expression( yymsp[0].minor.yy154 );
                  yy_destructor(yypParser,14,&yymsp[-1].minor);
}
#line 2311 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 12: /* proto ::= name expr_paren */
      case 36: /* expr_call ::= expr_index expr_paren */ yytestcase(yyruleno==36);
      case 37: /* expr_call ::= expr_yield expr_paren */ yytestcase(yyruleno==37);
      case 38: /* expr_call ::= expr_new expr_paren */ yytestcase(yyruleno==38);
      case 40: /* expr_call ::= expr_postfix expr_paren */ yytestcase(yyruleno==40);
#line 183 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy225 = new xec_expression_call( yymsp[-1].minor.yy154, yymsp[0].minor.yy193 );
                }
#line 2322 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 13: /* decl ::= name odecl_brace */
#line 190 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yymsp[0].minor.yy18->set_name( yymsp[-1].minor.yy154 );
                    yygotominor.yy52 = yymsp[0].minor.yy18;
                }
#line 2330 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 14: /* decl ::= name COLON expr_simple odecl_brace */
#line 195 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    // yymsp[0].minor.yy18 already constructed by odecl_brace.
                    yymsp[0].minor.yy18->set_name( yymsp[-3].minor.yy154 );
                    yymsp[0].minor.yy18->set_proto( yymsp[-1].minor.yy154 );
                    yygotominor.yy52 = yymsp[0].minor.yy18;
                  yy_destructor(yypParser,15,&yymsp[-2].minor);
}
#line 2341 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 15: /* decl ::= proto stmt_brace */
#line 202 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    // Convert call expression to function declaration.
                    xec_declaration_function* value;
                    yygotominor.yy52 = value = yymsp[-1].minor.yy225->as_function();
                    value->set_body( yymsp[0].minor.yy31 );
                    delete yymsp[-1].minor.yy225;
                }
#line 2352 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 16: /* decl ::= proto YIELD stmt_brace */
#line 210 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    // Convert call expression to coroutine declaration.
                    xec_declaration_function* value;
                    yygotominor.yy52 = value = yymsp[-2].minor.yy225->as_function();
                    value->set_coroutine( true );
                    value->set_body( yymsp[0].minor.yy31 );
                    delete yymsp[-2].minor.yy225;
                  yy_destructor(yypParser,6,&yymsp[-1].minor);
}
#line 2365 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 17: /* decl ::= VAR name_list SEMICOLON */
#line 219 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy52 = new xec_declaration_var(
                        yymsp[-2].minor.yy0, yymsp[-1].minor.yy154->as_list(), NULL );
                  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 2374 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 18: /* decl ::= VAR name_list ASSIGN expr_list SEMICOLON */
#line 225 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy52 = new xec_declaration_var(
                        yymsp[-4].minor.yy0, yymsp[-3].minor.yy154->as_list(), yymsp[-1].minor.yy154->as_list() );
                  yy_destructor(yypParser,18,&yymsp[-2].minor);
  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 2384 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 19: /* odecl ::= decl */
#line 233 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy52 = yymsp[0].minor.yy52;
                }
#line 2391 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 20: /* odecl ::= proto SEMICOLON */
#line 237 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    // Convert call expression to prototype declaration.
                    yygotominor.yy52 = yymsp[-1].minor.yy225->as_prototype();
                    delete yymsp[-1].minor.yy225;
                  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 2401 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 21: /* odecl ::= proto YIELD SEMICOLON */
#line 243 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    // Call expression becomes coroutine prototype declaration.
                    xec_declaration_prototype* decl;
                    yygotominor.yy52 = decl = yymsp[-2].minor.yy225->as_prototype();
                    decl->set_coroutine( true );
                    delete yymsp[-2].minor.yy225;
                  yy_destructor(yypParser,6,&yymsp[-1].minor);
  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 2414 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 22: /* odecl_list ::= SEMICOLON */
#line 253 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy18 = new xec_declaration_object();
                  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 2422 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 23: /* odecl_list ::= odecl */
#line 257 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy18 = new xec_declaration_object();
                    yymsp[0].minor.yy52->set_thiscall( true );
                    yygotominor.yy18->add_member( yymsp[0].minor.yy52 );
                }
#line 2431 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 24: /* odecl_list ::= odecl_list SEMICOLON */
#line 263 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy18 = yymsp[-1].minor.yy18;
                  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 2439 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 25: /* odecl_list ::= odecl_list odecl */
#line 267 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy18 = yymsp[-1].minor.yy18;
                    yymsp[0].minor.yy52->set_thiscall( true );
                    yygotominor.yy18->add_member( yymsp[0].minor.yy52 );
                }
#line 2448 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 26: /* expr_index ::= LPN expr_assign RPN */
#line 314 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    // Multiple values in brackets collapse to a single value.
                    yygotominor.yy154 = yymsp[-1].minor.yy154->as_mono();
                  yy_destructor(yypParser,8,&yymsp[-2].minor);
  yy_destructor(yypParser,9,&yymsp[0].minor);
}
#line 2458 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 27: /* expr_index ::= name PERIOD LSQ expr_value RSQ */
      case 30: /* expr_index ::= expr_index PERIOD LSQ expr_value RSQ */ yytestcase(yyruleno==30);
      case 45: /* expr_postfix ::= expr_yield PERIOD LSQ expr_value RSQ */ yytestcase(yyruleno==45);
      case 48: /* expr_postfix ::= expr_new PERIOD LSQ expr_value RSQ */ yytestcase(yyruleno==48);
      case 54: /* expr_postfix ::= expr_postfix PERIOD LSQ expr_value RSQ */ yytestcase(yyruleno==54);
#line 319 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy154 = new xec_expression_indexkey( yymsp[-4].minor.yy154, yymsp[-1].minor.yy154 );
                  yy_destructor(yypParser,13,&yymsp[-3].minor);
  yy_destructor(yypParser,19,&yymsp[-2].minor);
  yy_destructor(yypParser,20,&yymsp[0].minor);
}
#line 2472 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 28: /* expr_index ::= name LSQ expr_value RSQ */
      case 31: /* expr_index ::= expr_index LSQ expr_value RSQ */ yytestcase(yyruleno==31);
      case 46: /* expr_postfix ::= expr_yield LSQ expr_value RSQ */ yytestcase(yyruleno==46);
      case 49: /* expr_postfix ::= expr_new LSQ expr_value RSQ */ yytestcase(yyruleno==49);
      case 55: /* expr_postfix ::= expr_postfix LSQ expr_value RSQ */ yytestcase(yyruleno==55);
#line 323 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy154 = new xec_expression_index( yymsp[-3].minor.yy154, yymsp[-1].minor.yy154 );
                  yy_destructor(yypParser,19,&yymsp[-2].minor);
  yy_destructor(yypParser,20,&yymsp[0].minor);
}
#line 2485 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 32: /* expr_yield ::= YIELD expr_paren */
#line 341 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy154 = new xec_expression_yield( yymsp[-1].minor.yy0, yymsp[0].minor.yy193 );
                }
#line 2492 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 33: /* expr_new ::= NEW name expr_paren */
      case 34: /* expr_new ::= NEW expr_index expr_paren */ yytestcase(yyruleno==34);
#line 347 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy154 = new xec_constructor_new( yymsp[-2].minor.yy0, yymsp[-1].minor.yy154, yymsp[0].minor.yy193 );
                }
#line 2500 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 35: /* expr_call ::= proto expr_paren */
      case 39: /* expr_call ::= expr_call expr_paren */ yytestcase(yyruleno==39);
#line 357 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy225 = new xec_expression_call( yymsp[-1].minor.yy225, yymsp[0].minor.yy193 );
                }
#line 2508 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 41: /* expr_postfix ::= proto PERIOD IDENTIFIER */
      case 50: /* expr_postfix ::= expr_call PERIOD IDENTIFIER */ yytestcase(yyruleno==50);
#line 383 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy154 = new xec_expression_lookup( yymsp[-2].minor.yy225, yymsp[0].minor.yy0 );
                  yy_destructor(yypParser,13,&yymsp[-1].minor);
}
#line 2517 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 42: /* expr_postfix ::= proto PERIOD LSQ expr_value RSQ */
      case 51: /* expr_postfix ::= expr_call PERIOD LSQ expr_value RSQ */ yytestcase(yyruleno==51);
#line 387 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy154 = new xec_expression_indexkey( yymsp[-4].minor.yy225, yymsp[-1].minor.yy154 );
                  yy_destructor(yypParser,13,&yymsp[-3].minor);
  yy_destructor(yypParser,19,&yymsp[-2].minor);
  yy_destructor(yypParser,20,&yymsp[0].minor);
}
#line 2528 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 43: /* expr_postfix ::= proto LSQ expr_value RSQ */
      case 52: /* expr_postfix ::= expr_call LSQ expr_value RSQ */ yytestcase(yyruleno==52);
#line 391 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy154 = new xec_expression_index( yymsp[-3].minor.yy225, yymsp[-1].minor.yy154 );
                  yy_destructor(yypParser,19,&yymsp[-2].minor);
  yy_destructor(yypParser,20,&yymsp[0].minor);
}
#line 2538 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 57: /* expr_simple ::= proto */
      case 61: /* expr_simple ::= expr_call */ yytestcase(yyruleno==61);
#line 453 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy154 = yymsp[0].minor.yy225;
                }
#line 2546 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 63: /* expr_simple ::= proto YIELD */
      case 64: /* expr_simple ::= expr_call YIELD */ yytestcase(yyruleno==64);
#line 477 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy225->set_yieldcall( true );
                    yygotominor.yy154 = yymsp[-1].minor.yy225;
                  yy_destructor(yypParser,6,&yymsp[0].minor);
}
#line 2556 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 66: /* expr_literal ::= NUMBER */
#line 492 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy154 = new xec_expression_number( yymsp[0].minor.yy0 );
                }
#line 2563 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 67: /* expr_literal ::= STRING */
#line 496 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy154 = new xec_expression_string( yymsp[0].minor.yy0 );
                }
#line 2570 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 68: /* expr_literal ::= TRUE */
      case 69: /* expr_literal ::= FALSE */ yytestcase(yyruleno==69);
#line 500 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy154 = new xec_expression_bool( yymsp[0].minor.yy0 );
                }
#line 2578 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 70: /* expr_literal ::= NULL */
#line 508 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy154 = new xec_expression_null( yymsp[0].minor.yy0 );
                }
#line 2585 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 72: /* expr_suffix ::= expr_suffix INCREMENT */
      case 73: /* expr_suffix ::= expr_suffix DECREMENT */ yytestcase(yyruleno==73);
#line 517 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy154 = new xec_expression_unary( yymsp[-1].minor.yy154, yymsp[0].minor.yy0 );
                }
#line 2593 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 75: /* expr_unary ::= PLUS expr_unary */
      case 76: /* expr_unary ::= MINUS expr_unary */ yytestcase(yyruleno==76);
      case 77: /* expr_unary ::= XMARK expr_unary */ yytestcase(yyruleno==77);
      case 78: /* expr_unary ::= TILDE expr_unary */ yytestcase(yyruleno==78);
      case 79: /* expr_unary ::= INCREMENT expr_unary */ yytestcase(yyruleno==79);
      case 80: /* expr_unary ::= DECREMENT expr_unary */ yytestcase(yyruleno==80);
#line 530 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy154 = new xec_expression_unary( yymsp[0].minor.yy154, yymsp[-1].minor.yy0 );
                }
#line 2605 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 82: /* expr_mul ::= expr_mul ASTERISK expr_unary */
      case 83: /* expr_mul ::= expr_mul SOLIDUS expr_unary */ yytestcase(yyruleno==83);
      case 84: /* expr_mul ::= expr_mul PERCENT expr_unary */ yytestcase(yyruleno==84);
      case 85: /* expr_mul ::= expr_mul TILDE expr_unary */ yytestcase(yyruleno==85);
      case 87: /* expr_add ::= expr_add PLUS expr_mul */ yytestcase(yyruleno==87);
      case 88: /* expr_add ::= expr_add MINUS expr_mul */ yytestcase(yyruleno==88);
      case 90: /* expr_shift ::= expr_shift LSHIFT expr_add */ yytestcase(yyruleno==90);
      case 91: /* expr_shift ::= expr_shift RSHIFT expr_add */ yytestcase(yyruleno==91);
      case 92: /* expr_shift ::= expr_shift URSHIFT expr_add */ yytestcase(yyruleno==92);
      case 94: /* expr_bitand ::= expr_bitand AMPERSAND expr_shift */ yytestcase(yyruleno==94);
      case 96: /* expr_bitxor ::= expr_bitxor CARET expr_bitand */ yytestcase(yyruleno==96);
      case 98: /* expr_bitor ::= expr_bitor VBAR expr_bitxor */ yytestcase(yyruleno==98);
      case 100: /* expr_concat ::= expr_concat CONCATENATE expr_bitor */ yytestcase(yyruleno==100);
#line 559 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy154 = new xec_expression_binary( yymsp[-2].minor.yy154, yymsp[-1].minor.yy0, yymsp[0].minor.yy154 );
                }
#line 2624 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 102: /* expr_compare ::= expr_compare EQUAL expr_concat */
      case 103: /* expr_compare ::= expr_compare NOTEQUAL expr_concat */ yytestcase(yyruleno==103);
      case 104: /* expr_compare ::= expr_compare LESS expr_concat */ yytestcase(yyruleno==104);
      case 105: /* expr_compare ::= expr_compare GREATER expr_concat */ yytestcase(yyruleno==105);
      case 106: /* expr_compare ::= expr_compare LESSEQUAL expr_concat */ yytestcase(yyruleno==106);
      case 107: /* expr_compare ::= expr_compare GREATEREQUAL expr_concat */ yytestcase(yyruleno==107);
      case 108: /* expr_compare ::= expr_compare IN expr_concat */ yytestcase(yyruleno==108);
      case 109: /* expr_compare ::= expr_compare NOTIN expr_concat */ yytestcase(yyruleno==109);
      case 110: /* expr_compare ::= expr_compare IS expr_concat */ yytestcase(yyruleno==110);
      case 111: /* expr_compare ::= expr_compare NOTIS expr_concat */ yytestcase(yyruleno==111);
#line 646 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    xec_expression_comparison* comparison;
                    yygotominor.yy154 = comparison = yymsp[-2].minor.yy154->as_comparison();
                    comparison->add_comparison( yymsp[-1].minor.yy0, yymsp[0].minor.yy154 );
                }
#line 2642 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 113: /* expr_and ::= expr_and LOGICAND expr_compare */
      case 115: /* expr_xor ::= expr_xor LOGICXOR expr_and */ yytestcase(yyruleno==115);
      case 117: /* expr_or ::= expr_or LOGICOR expr_xor */ yytestcase(yyruleno==117);
#line 712 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy154 = new xec_expression_logical( yymsp[-2].minor.yy154, yymsp[-1].minor.yy0, yymsp[0].minor.yy154 );
                }
#line 2651 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 119: /* expr_nolbr ::= expr_or QMARK expr_value COLON expr_value */
#line 741 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy154 = new xec_expression_conditional(
                                    yymsp[-4].minor.yy154, yymsp[-2].minor.yy154, yymsp[0].minor.yy154 );
                  yy_destructor(yypParser,56,&yymsp[-3].minor);
  yy_destructor(yypParser,15,&yymsp[-1].minor);
}
#line 2661 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 120: /* expr_nolbr ::= LSQ RSQ */
#line 746 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    xec_constructor_list* list;
                    yygotominor.yy154 = list = new xec_constructor_list();
                    list->set_token( yymsp[-1].minor.yy0 );
                  yy_destructor(yypParser,20,&yymsp[0].minor);
}
#line 2671 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 121: /* expr_nolbr ::= LSQ value_list RSQ */
#line 752 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy154 = yymsp[-1].minor.yy103;
                    yymsp[-1].minor.yy103->set_token( yymsp[-2].minor.yy0 );
                  yy_destructor(yypParser,20,&yymsp[0].minor);
}
#line 2680 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 122: /* expr_nolbr ::= COLON odecl_brace */
#line 757 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy154 = yymsp[0].minor.yy18->as_constructor( yymsp[-1].minor.yy0 );
                }
#line 2687 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 123: /* expr_nolbr ::= COLON expr_simple odecl_brace */
#line 761 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yymsp[0].minor.yy18->set_proto( yymsp[-1].minor.yy154 );
                    yygotominor.yy154 = yymsp[0].minor.yy18->as_constructor( yymsp[-2].minor.yy0 );
                }
#line 2695 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 124: /* expr_nolbr ::= QMARK expr_paren stmt_brace */
#line 766 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy154 = new xec_constructor_function( yymsp[-2].minor.yy0, yymsp[-1].minor.yy193, yymsp[0].minor.yy31 );
                }
#line 2702 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 125: /* expr_nolbr ::= PERIOD QMARK expr_paren stmt_brace */
#line 770 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    xec_constructor_function* func;
                    yygotominor.yy154 = func = new xec_constructor_function(
                                    yymsp[-3].minor.yy0, yymsp[-1].minor.yy193, yymsp[0].minor.yy31 );
                    func->set_thiscall( true );
                  yy_destructor(yypParser,56,&yymsp[-2].minor);
}
#line 2713 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 126: /* expr_nolbr ::= QMARK expr_paren YIELD stmt_brace */
#line 777 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    xec_constructor_function* func;
                    yygotominor.yy154 = func = new xec_constructor_function(
                                    yymsp[-3].minor.yy0, yymsp[-2].minor.yy193, yymsp[0].minor.yy31 );
                    func->set_coroutine( true );
                  yy_destructor(yypParser,6,&yymsp[-1].minor);
}
#line 2724 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 127: /* expr_nolbr ::= PERIOD QMARK expr_paren YIELD stmt_brace */
#line 785 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    xec_constructor_function* func;
                    yygotominor.yy154 = func = new xec_constructor_function(
                                    yymsp[-4].minor.yy0, yymsp[-2].minor.yy193, yymsp[0].minor.yy31 );
                    func->set_thiscall( true );
                    func->set_coroutine( true );
                  yy_destructor(yypParser,56,&yymsp[-3].minor);
  yy_destructor(yypParser,6,&yymsp[-1].minor);
}
#line 2737 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 129: /* expr_value ::= LBR RBR */
#line 799 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    xec_constructor_table* table;
                    yygotominor.yy154 = table = new xec_constructor_table();
                    table->set_token( yymsp[-1].minor.yy0 );
                  yy_destructor(yypParser,11,&yymsp[0].minor);
}
#line 2747 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 130: /* expr_value ::= LBR keyval_list RBR */
#line 805 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy154 = yymsp[-1].minor.yy32;
                    yymsp[-1].minor.yy32->set_token( yymsp[-2].minor.yy0 );
                  yy_destructor(yypParser,11,&yymsp[0].minor);
}
#line 2756 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 133: /* expr_final ::= ELLIPSIS */
#line 823 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy154 = new xec_expression_varargs( yymsp[0].minor.yy0 );
                }
#line 2763 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 134: /* expr_final ::= proto ELLIPSIS */
      case 135: /* expr_final ::= expr_call ELLIPSIS */ yytestcase(yyruleno==135);
#line 827 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy225->set_unpack( true );
                    yygotominor.yy154 = yymsp[-1].minor.yy225;
                  yy_destructor(yypParser,57,&yymsp[0].minor);
}
#line 2773 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 136: /* expr_final ::= expr_yield ELLIPSIS */
#line 837 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy154 = yymsp[-1].minor.yy154;
                  yy_destructor(yypParser,57,&yymsp[0].minor);
}
#line 2781 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 137: /* expr_final ::= proto YIELD ELLIPSIS */
      case 138: /* expr_final ::= expr_call YIELD ELLIPSIS */ yytestcase(yyruleno==138);
#line 841 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yymsp[-2].minor.yy225->set_yieldcall( true );
                    yymsp[-2].minor.yy225->set_unpack( true );
                    yygotominor.yy154 = yymsp[-2].minor.yy225;
                  yy_destructor(yypParser,6,&yymsp[-1].minor);
  yy_destructor(yypParser,57,&yymsp[0].minor);
}
#line 2793 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 139: /* expr_final ::= name LSQ RSQ ELLIPSIS */
      case 141: /* expr_final ::= expr_index LSQ RSQ ELLIPSIS */ yytestcase(yyruleno==141);
      case 142: /* expr_final ::= expr_yield LSQ RSQ ELLIPSIS */ yytestcase(yyruleno==142);
      case 143: /* expr_final ::= expr_new LSQ RSQ ELLIPSIS */ yytestcase(yyruleno==143);
      case 145: /* expr_final ::= expr_postfix LSQ RSQ ELLIPSIS */ yytestcase(yyruleno==145);
#line 853 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy154 = new xec_expression_unpack( yymsp[-3].minor.yy154 );
                  yy_destructor(yypParser,19,&yymsp[-2].minor);
  yy_destructor(yypParser,20,&yymsp[-1].minor);
  yy_destructor(yypParser,57,&yymsp[0].minor);
}
#line 2807 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 140: /* expr_final ::= proto LSQ RSQ ELLIPSIS */
      case 144: /* expr_final ::= expr_call LSQ RSQ ELLIPSIS */ yytestcase(yyruleno==144);
#line 857 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy154 = new xec_expression_unpack( yymsp[-3].minor.yy225 );
                  yy_destructor(yypParser,19,&yymsp[-2].minor);
  yy_destructor(yypParser,20,&yymsp[-1].minor);
  yy_destructor(yypParser,57,&yymsp[0].minor);
}
#line 2818 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 148: /* expr_list ::= expr_lbody COMMA expr_final */
      case 179: /* sexpr_list ::= sexpr_lbody COMMA expr_final */ yytestcase(yyruleno==179);
#line 890 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    xec_expression_list* list;
                    yygotominor.yy154 = list = yymsp[-2].minor.yy154->as_list();
                    list->append_final( yymsp[0].minor.yy154 );
                  yy_destructor(yypParser,14,&yymsp[-1].minor);
}
#line 2829 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 150: /* expr_assign ::= expr_lbody assign_op expr_assign */
      case 181: /* sexpr_assign ::= sexpr_lbody assign_op expr_assign */ yytestcase(yyruleno==181);
#line 901 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy154 = new xec_expression_assign( yymsp[-2].minor.yy154, yymsp[-1].minor.yy15, yymsp[0].minor.yy154 );
                }
#line 2837 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 151: /* assign_op ::= ASSIGN */
      case 152: /* assign_op ::= MULASSIGN */ yytestcase(yyruleno==152);
      case 153: /* assign_op ::= DIVASSIGN */ yytestcase(yyruleno==153);
      case 154: /* assign_op ::= MODASSIGN */ yytestcase(yyruleno==154);
      case 155: /* assign_op ::= INTDIVASSIGN */ yytestcase(yyruleno==155);
      case 156: /* assign_op ::= ADDASSIGN */ yytestcase(yyruleno==156);
      case 157: /* assign_op ::= SUBASSIGN */ yytestcase(yyruleno==157);
      case 158: /* assign_op ::= LSHIFTASSIGN */ yytestcase(yyruleno==158);
      case 159: /* assign_op ::= RSHIFTASSIGN */ yytestcase(yyruleno==159);
      case 160: /* assign_op ::= URSHIFTASSIGN */ yytestcase(yyruleno==160);
      case 161: /* assign_op ::= BITANDASSIGN */ yytestcase(yyruleno==161);
      case 162: /* assign_op ::= BITXORASSIGN */ yytestcase(yyruleno==162);
      case 163: /* assign_op ::= BITORASSIGN */ yytestcase(yyruleno==163);
      case 184: /* stmt_yield ::= YIELD */ yytestcase(yyruleno==184);
      case 185: /* stmt_using ::= USING */ yytestcase(yyruleno==185);
#line 907 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy15 = yymsp[0].minor.yy0;
                }
#line 2858 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 164: /* value_lbody ::= expr_value */
#line 961 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy103 = new xec_constructor_list();
                    yygotominor.yy103->append_value( yymsp[0].minor.yy154 );
                }
#line 2866 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 165: /* value_lbody ::= value_lbody COMMA expr_value */
#line 966 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy103 = yymsp[-2].minor.yy103;
                    yygotominor.yy103->append_value( yymsp[0].minor.yy154 );
                  yy_destructor(yypParser,14,&yymsp[-1].minor);
}
#line 2875 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 166: /* value_list ::= expr_final */
#line 972 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy103 = new xec_constructor_list();
                    yygotominor.yy103->append_final( yymsp[0].minor.yy154 );
                }
#line 2883 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 167: /* value_list ::= expr_final COMMA */
#line 977 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy103 = new xec_constructor_list();
                    yygotominor.yy103->append_final( yymsp[-1].minor.yy154 );
                  yy_destructor(yypParser,14,&yymsp[0].minor);
}
#line 2892 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 168: /* value_list ::= value_lbody */
#line 982 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy103 = yymsp[0].minor.yy103;
                }
#line 2899 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 169: /* value_list ::= value_lbody COMMA */
#line 986 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy103 = yymsp[-1].minor.yy103;
                  yy_destructor(yypParser,14,&yymsp[0].minor);
}
#line 2907 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 170: /* value_list ::= value_lbody COMMA expr_final */
#line 990 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy103 = yymsp[-2].minor.yy103;
                    yygotominor.yy103->append_final( yymsp[0].minor.yy154 );
                  yy_destructor(yypParser,14,&yymsp[-1].minor);
}
#line 2916 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 171: /* keyval_lbody ::= expr_value COLON expr_value */
#line 997 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy32 = new xec_constructor_table();
                    yygotominor.yy32->append_keyval( yymsp[-2].minor.yy154, yymsp[0].minor.yy154 );
                  yy_destructor(yypParser,15,&yymsp[-1].minor);
}
#line 2925 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 172: /* keyval_lbody ::= keyval_lbody COMMA expr_value COLON expr_value */
#line 1003 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy32 = yymsp[-4].minor.yy32;
                    yygotominor.yy32->append_keyval( yymsp[-2].minor.yy154, yymsp[0].minor.yy154 );
                  yy_destructor(yypParser,14,&yymsp[-3].minor);
  yy_destructor(yypParser,15,&yymsp[-1].minor);
}
#line 2935 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 173: /* keyval_list ::= keyval_lbody */
#line 1009 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy32 = yymsp[0].minor.yy32;
                }
#line 2942 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 174: /* keyval_list ::= keyval_lbody COMMA */
#line 1013 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy32 = yymsp[-1].minor.yy32;
                  yy_destructor(yypParser,14,&yymsp[0].minor);
}
#line 2950 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 183: /* condition ::= VAR name_list ASSIGN expr_list */
#line 1084 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy154 = new xec_expression_declare( yymsp[-3].minor.yy0,
                                yymsp[-2].minor.yy154->as_list(), yymsp[0].minor.yy154->as_list() );
                  yy_destructor(yypParser,18,&yymsp[-1].minor);
}
#line 2959 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 186: /* stmt ::= stmt_brace */
#line 1103 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy95 = yymsp[0].minor.yy31;
                }
#line 2966 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 187: /* stmt ::= sexpr_assign SEMICOLON */
#line 1107 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy95 = new xec_statement_expression( yymsp[-1].minor.yy154 );
                  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 2974 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 188: /* stmt ::= DELETE expr_lbody SEMICOLON */
#line 1111 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy95 = new xec_statement_delete( yymsp[-2].minor.yy0, yymsp[-1].minor.yy154->as_list() );
                  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 2982 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 189: /* stmt ::= IF LPN condition RPN stmt */
#line 1115 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy95 = new xec_statement_if( yymsp[-4].minor.yy0, yymsp[-2].minor.yy154, yymsp[0].minor.yy95, NULL );
                  yy_destructor(yypParser,8,&yymsp[-3].minor);
  yy_destructor(yypParser,9,&yymsp[-1].minor);
}
#line 2991 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 190: /* stmt ::= IF LPN condition RPN stmt ELSE stmt */
#line 1120 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy95 = new xec_statement_if( yymsp[-6].minor.yy0, yymsp[-4].minor.yy154, yymsp[-2].minor.yy95, yymsp[0].minor.yy95 );
                  yy_destructor(yypParser,8,&yymsp[-5].minor);
  yy_destructor(yypParser,9,&yymsp[-3].minor);
  yy_destructor(yypParser,2,&yymsp[-1].minor);
}
#line 3001 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 191: /* stmt ::= SWITCH LPN condition RPN stmt_brace */
#line 1124 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy95 = new xec_statement_switch( yymsp[-4].minor.yy0, yymsp[-2].minor.yy154, yymsp[0].minor.yy31 );
                  yy_destructor(yypParser,8,&yymsp[-3].minor);
  yy_destructor(yypParser,9,&yymsp[-1].minor);
}
#line 3010 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 192: /* stmt ::= CASE expr_value COLON */
#line 1128 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy95 = new xec_statement_case( yymsp[-2].minor.yy0, yymsp[-1].minor.yy154 );
                  yy_destructor(yypParser,15,&yymsp[0].minor);
}
#line 3018 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 193: /* stmt ::= DEFAULT COLON */
#line 1132 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy95 = new xec_statement_case( yymsp[-1].minor.yy0, NULL );
                  yy_destructor(yypParser,15,&yymsp[0].minor);
}
#line 3026 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 194: /* stmt ::= WHILE LPN condition RPN stmt */
#line 1136 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy95 = new xec_statement_while( yymsp[-4].minor.yy0, yymsp[-2].minor.yy154, yymsp[0].minor.yy95 );
                  yy_destructor(yypParser,8,&yymsp[-3].minor);
  yy_destructor(yypParser,9,&yymsp[-1].minor);
}
#line 3035 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 195: /* stmt ::= DO stmt WHILE LPN expr_assign RPN SEMICOLON */
#line 1141 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy95 = new xec_statement_do( yymsp[-6].minor.yy0, yymsp[-5].minor.yy95, yymsp[-2].minor.yy154 );
                  yy_destructor(yypParser,74,&yymsp[-4].minor);
  yy_destructor(yypParser,8,&yymsp[-3].minor);
  yy_destructor(yypParser,9,&yymsp[-1].minor);
  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 3046 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 196: /* stmt ::= FOR LPN expr_lbody COLON expr_value RPN stmt */
#line 1146 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy95 = new xec_statement_foreach( yymsp[-6].minor.yy0,
                                    yymsp[-4].minor.yy154->as_list(), yymsp[-2].minor.yy154, yymsp[0].minor.yy95 );
                  yy_destructor(yypParser,8,&yymsp[-5].minor);
  yy_destructor(yypParser,15,&yymsp[-3].minor);
  yy_destructor(yypParser,9,&yymsp[-1].minor);
}
#line 3057 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 197: /* stmt ::= FOR LPN expr_lbody EACHKEY expr_value RPN stmt */
#line 1152 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    xec_statement_foreach* stmt;
                    yygotominor.yy95 = stmt = new xec_statement_foreach( yymsp[-6].minor.yy0,
                                    yymsp[-4].minor.yy154->as_list(), yymsp[-2].minor.yy154, yymsp[0].minor.yy95 );
                    stmt->set_eachkey( true );
                  yy_destructor(yypParser,8,&yymsp[-5].minor);
  yy_destructor(yypParser,77,&yymsp[-3].minor);
  yy_destructor(yypParser,9,&yymsp[-1].minor);
}
#line 3070 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 198: /* stmt ::= FOR LPN VAR name_list COLON expr_value RPN stmt */
#line 1160 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    xec_statement_foreach* stmt;
                    yygotominor.yy95 = stmt = new xec_statement_foreach( yymsp[-7].minor.yy0,
                                        yymsp[-4].minor.yy154->as_list(), yymsp[-2].minor.yy154, yymsp[0].minor.yy95 );
                    stmt->set_declare( true );
                  yy_destructor(yypParser,8,&yymsp[-6].minor);
  yy_destructor(yypParser,16,&yymsp[-5].minor);
  yy_destructor(yypParser,15,&yymsp[-3].minor);
  yy_destructor(yypParser,9,&yymsp[-1].minor);
}
#line 3084 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 199: /* stmt ::= FOR LPN VAR name_list EACHKEY expr_value RPN stmt */
#line 1168 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    xec_statement_foreach* stmt;
                    yygotominor.yy95 = stmt = new xec_statement_foreach( yymsp[-7].minor.yy0,
                                        yymsp[-4].minor.yy154->as_list(), yymsp[-2].minor.yy154, yymsp[0].minor.yy95 );
                    stmt->set_declare( true );
                    stmt->set_eachkey( true );
                  yy_destructor(yypParser,8,&yymsp[-6].minor);
  yy_destructor(yypParser,16,&yymsp[-5].minor);
  yy_destructor(yypParser,77,&yymsp[-3].minor);
  yy_destructor(yypParser,9,&yymsp[-1].minor);
}
#line 3099 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 200: /* stmt ::= FOR LPN condition SEMICOLON expr_assign SEMICOLON expr_assign RPN stmt */
#line 1177 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy95 = new xec_statement_for(
                                        yymsp[-8].minor.yy0, yymsp[-6].minor.yy154, yymsp[-4].minor.yy154, yymsp[-2].minor.yy154, yymsp[0].minor.yy95 );
                  yy_destructor(yypParser,8,&yymsp[-7].minor);
  yy_destructor(yypParser,17,&yymsp[-5].minor);
  yy_destructor(yypParser,17,&yymsp[-3].minor);
  yy_destructor(yypParser,9,&yymsp[-1].minor);
}
#line 3111 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 201: /* stmt ::= CONTINUE SEMICOLON */
#line 1182 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy95 = new xec_statement_continue( yymsp[-1].minor.yy0 );
                  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 3119 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 202: /* stmt ::= BREAK SEMICOLON */
#line 1186 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy95 = new xec_statement_break( yymsp[-1].minor.yy0 );
                  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 3127 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 203: /* stmt ::= RETURN SEMICOLON */
#line 1190 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy95 = new xec_statement_return( yymsp[-1].minor.yy0, NULL );
                  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 3135 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 204: /* stmt ::= RETURN expr_list SEMICOLON */
#line 1194 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy95 = new xec_statement_return( yymsp[-2].minor.yy0, yymsp[-1].minor.yy154->as_list() );
                  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 3143 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 205: /* stmt ::= stmt_yield SEMICOLON */
#line 1198 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy95 = new xec_statement_yield( yymsp[-1].minor.yy15, NULL );
                  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 3151 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 206: /* stmt ::= stmt_yield expr_list SEMICOLON */
#line 1202 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy95 = new xec_statement_yield( yymsp[-2].minor.yy15, yymsp[-1].minor.yy154->as_list() );
                  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 3159 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 207: /* stmt ::= USING LPN condition RPN stmt */
#line 1206 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy95 = new xec_statement_usingscope( yymsp[-4].minor.yy0, yymsp[-2].minor.yy154, yymsp[0].minor.yy95 );
                  yy_destructor(yypParser,8,&yymsp[-3].minor);
  yy_destructor(yypParser,9,&yymsp[-1].minor);
}
#line 3168 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 208: /* stmt ::= stmt_using condition SEMICOLON */
#line 1210 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy95 = new xec_statement_using( yymsp[-2].minor.yy15, yymsp[-1].minor.yy154 );
                  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 3176 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 209: /* stmt ::= TRY stmt catch_list */
#line 1214 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy95 = yymsp[0].minor.yy1;
                    yymsp[0].minor.yy1->set_body( yymsp[-2].minor.yy0, yymsp[-1].minor.yy95 );
                }
#line 3184 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 210: /* stmt ::= TRY stmt FINALLY stmt */
#line 1219 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    xec_statement_try* stmt;
                    yygotominor.yy95 = stmt = new xec_statement_try();
                    stmt->set_body( yymsp[-3].minor.yy0, yymsp[-2].minor.yy95 );
                    stmt->set_finally( yymsp[-1].minor.yy0, yymsp[0].minor.yy95 );
                }
#line 3194 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 211: /* stmt ::= TRY stmt catch_list FINALLY stmt */
#line 1227 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy95 = yymsp[-2].minor.yy1;
                    yymsp[-2].minor.yy1->set_body( yymsp[-4].minor.yy0, yymsp[-3].minor.yy95 );
                    yymsp[-2].minor.yy1->set_finally( yymsp[-1].minor.yy0, yymsp[0].minor.yy95 );
                }
#line 3203 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 212: /* stmt ::= THROW expr_value SEMICOLON */
#line 1233 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy95 = new xec_statement_throw( yymsp[-2].minor.yy0, yymsp[-1].minor.yy154 );
                  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 3211 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 213: /* catch ::= CATCH LPN COLON expr_simple RPN stmt */
#line 1239 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy241 = new xec_statement_catch( yymsp[-5].minor.yy0, NULL, yymsp[-2].minor.yy154, yymsp[0].minor.yy95 );
                  yy_destructor(yypParser,8,&yymsp[-4].minor);
  yy_destructor(yypParser,15,&yymsp[-3].minor);
  yy_destructor(yypParser,9,&yymsp[-1].minor);
}
#line 3221 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 214: /* catch ::= CATCH LPN expr_value COLON expr_simple RPN stmt */
#line 1244 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy241 = new xec_statement_catch( yymsp[-6].minor.yy0, yymsp[-4].minor.yy154, yymsp[-2].minor.yy154, yymsp[0].minor.yy95 );
                  yy_destructor(yypParser,8,&yymsp[-5].minor);
  yy_destructor(yypParser,15,&yymsp[-3].minor);
  yy_destructor(yypParser,9,&yymsp[-1].minor);
}
#line 3231 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 215: /* catch ::= CATCH LPN VAR name COLON expr_simple RPN stmt */
#line 1249 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy241 = new xec_statement_catch( yymsp[-7].minor.yy0, yymsp[-4].minor.yy154, yymsp[-2].minor.yy154, yymsp[0].minor.yy95 );
                    yygotominor.yy241->set_declare( true );
                  yy_destructor(yypParser,8,&yymsp[-6].minor);
  yy_destructor(yypParser,16,&yymsp[-5].minor);
  yy_destructor(yypParser,15,&yymsp[-3].minor);
  yy_destructor(yypParser,9,&yymsp[-1].minor);
}
#line 3243 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 216: /* catch_list ::= catch */
#line 1255 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy1 = new xec_statement_try();
                    yygotominor.yy1->append_catch( yymsp[0].minor.yy241 );
                }
#line 3251 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 217: /* catch_list ::= catch_list catch */
#line 1260 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy1 = yymsp[-1].minor.yy1;
                    yygotominor.yy1->append_catch( yymsp[0].minor.yy241 );
                }
#line 3259 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 218: /* stmt_list ::= stmt */
#line 1267 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy31 = new xec_statement_compound();
                    yygotominor.yy31->append_statement( yymsp[0].minor.yy95 );
                }
#line 3267 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 219: /* stmt_list ::= decl */
#line 1272 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy31 = new xec_statement_compound();
                    xec_statement_declaration* stmt =
                                    new xec_statement_declaration( yymsp[0].minor.yy52 );
                    yygotominor.yy31->append_statement( stmt );
                }
#line 3277 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 220: /* stmt_list ::= SEMICOLON */
#line 1279 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy31 = new xec_statement_compound();
                  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 3285 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 221: /* stmt_list ::= stmt_list stmt */
#line 1283 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy31 = yymsp[-1].minor.yy31;
                    yygotominor.yy31->append_statement( yymsp[0].minor.yy95 );
                }
#line 3293 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 222: /* stmt_list ::= stmt_list decl */
#line 1288 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy31 = yymsp[-1].minor.yy31;
                    xec_statement_declaration* stmt =
                                    new xec_statement_declaration( yymsp[0].minor.yy52 );
                    yygotominor.yy31->append_statement( stmt );
                }
#line 3303 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 223: /* stmt_list ::= stmt_list SEMICOLON */
#line 1295 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy31 = yymsp[-1].minor.yy31;
                  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 3311 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      default:
        break;
  };
  yygoto = yyRuleInfo[yyruleno].lhs;
  yysize = yyRuleInfo[yyruleno].nrhs;
  yypParser->yyidx -= yysize;
  yyact = yy_find_reduce_action(yymsp[-yysize].stateno,(YYCODETYPE)yygoto);
  if( yyact < YYNSTATE ){
#ifdef NDEBUG
    /* If we are not debugging and the reduce action popped at least
    ** one element off the stack, then we can push the new element back
    ** onto the stack here, and skip the stack overflow test in yy_shift().
    ** That gives a significant speed improvement. */
    if( yysize ){
      yypParser->yyidx++;
      yymsp -= yysize-1;
      yymsp->stateno = (YYACTIONTYPE)yyact;
      yymsp->major = (YYCODETYPE)yygoto;
      yymsp->minor = yygotominor;
    }else
#endif
    {
      yy_shift(yypParser,yyact,yygoto,&yygotominor);
    }
  }else{
    assert( yyact == YYNSTATE + YYNRULE + 1 );
    yy_accept(yypParser);
  }
}

/*
** The following code executes when the parse fails
*/
#ifndef YYNOERRORRECOVERY
static void yy_parse_failed(
  yyParser *yypParser           /* The parser */
){
  XecParseARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sFail!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser fails */
  XecParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}
#endif /* YYNOERRORRECOVERY */

/*
** The following code executes when a syntax error first occurs.
*/
static void yy_syntax_error(
  yyParser *yypParser,           /* The parser */
  int yymajor,                   /* The major type of the error token */
  YYMINORTYPE yyminor            /* The minor type of the error token */
){
  XecParseARG_FETCH;
#define TOKEN (yyminor.yy0)
  XecParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/*
** The following is executed when the parser accepts
*/
static void yy_accept(
  yyParser *yypParser           /* The parser */
){
  XecParseARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sAccept!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser accepts */
  XecParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/* The main parser program.
** The first argument is a pointer to a structure obtained from
** "XecParseAlloc" which describes the current state of the parser.
** The second argument is the major token number.  The third is
** the minor token.  The fourth optional argument is whatever the
** user wants (and specified in the grammar) and is available for
** use by the action routines.
**
** Inputs:
** <ul>
** <li> A pointer to the parser (an opaque structure.)
** <li> The major token number.
** <li> The minor token number.
** <li> An option argument of a grammar-specified type.
** </ul>
**
** Outputs:
** None.
*/
void XecParse(
  void *yyp,                   /* The parser */
  int yymajor,                 /* The major token code number */
  XecParseTOKENTYPE yyminor       /* The value for the token */
  XecParseARG_PDECL               /* Optional %extra_argument parameter */
){
  YYMINORTYPE yyminorunion;
  int yyact;            /* The parser action. */
  int yyendofinput;     /* True if we are at the end of input */
#ifdef YYERRORSYMBOL
  int yyerrorhit = 0;   /* True if yymajor has invoked an error */
#endif
  yyParser *yypParser;  /* The parser */

  /* (re)initialize the parser, if necessary */
  yypParser = (yyParser*)yyp;
  if( yypParser->yyidx<0 ){
#if YYSTACKDEPTH<=0
    if( yypParser->yystksz <=0 ){
      /*memset(&yyminorunion, 0, sizeof(yyminorunion));*/
      yyminorunion = yyzerominor;
      yyStackOverflow(yypParser, &yyminorunion);
      return;
    }
#endif
    yypParser->yyidx = 0;
    yypParser->yyerrcnt = -1;
    yypParser->yystack[0].stateno = 0;
    yypParser->yystack[0].major = 0;
  }
  yyminorunion.yy0 = yyminor;
  yyendofinput = (yymajor==0);
  XecParseARG_STORE;

#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sInput %s\n",yyTracePrompt,yyTokenName[yymajor]);
  }
#endif

  do{
    yyact = yy_find_shift_action(yypParser,(YYCODETYPE)yymajor);
    if( yyact<YYNSTATE ){
      assert( !yyendofinput );  /* Impossible to shift the $ token */
      yy_shift(yypParser,yyact,yymajor,&yyminorunion);
      yypParser->yyerrcnt--;
      yymajor = YYNOCODE;
    }else if( yyact < YYNSTATE + YYNRULE ){
      yy_reduce(yypParser,yyact-YYNSTATE);
    }else{
      assert( yyact == YY_ERROR_ACTION );
#ifdef YYERRORSYMBOL
      int yymx;
#endif
#ifndef NDEBUG
      if( yyTraceFILE ){
        fprintf(yyTraceFILE,"%sSyntax Error!\n",yyTracePrompt);
      }
#endif
#ifdef YYERRORSYMBOL
      /* A syntax error has occurred.
      ** The response to an error depends upon whether or not the
      ** grammar defines an error token "ERROR".  
      **
      ** This is what we do if the grammar does define ERROR:
      **
      **  * Call the %syntax_error function.
      **
      **  * Begin popping the stack until we enter a state where
      **    it is legal to shift the error symbol, then shift
      **    the error symbol.
      **
      **  * Set the error count to three.
      **
      **  * Begin accepting and shifting new tokens.  No new error
      **    processing will occur until three tokens have been
      **    shifted successfully.
      **
      */
      if( yypParser->yyerrcnt<0 ){
        yy_syntax_error(yypParser,yymajor,yyminorunion);
      }
      yymx = yypParser->yystack[yypParser->yyidx].major;
      if( yymx==YYERRORSYMBOL || yyerrorhit ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE,"%sDiscard input token %s\n",
             yyTracePrompt,yyTokenName[yymajor]);
        }
#endif
        yy_destructor(yypParser, (YYCODETYPE)yymajor,&yyminorunion);
        yymajor = YYNOCODE;
      }else{
         while(
          yypParser->yyidx >= 0 &&
          yymx != YYERRORSYMBOL &&
          (yyact = yy_find_reduce_action(
                        yypParser->yystack[yypParser->yyidx].stateno,
                        YYERRORSYMBOL)) >= YYNSTATE
        ){
          yy_pop_parser_stack(yypParser);
        }
        if( yypParser->yyidx < 0 || yymajor==0 ){
          yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
          yy_parse_failed(yypParser);
          yymajor = YYNOCODE;
        }else if( yymx!=YYERRORSYMBOL ){
          YYMINORTYPE u2;
          u2.YYERRSYMDT = 0;
          yy_shift(yypParser,yyact,YYERRORSYMBOL,&u2);
        }
      }
      yypParser->yyerrcnt = 3;
      yyerrorhit = 1;
#elif defined(YYNOERRORRECOVERY)
      /* If the YYNOERRORRECOVERY macro is defined, then do not attempt to
      ** do any kind of error recovery.  Instead, simply invoke the syntax
      ** error routine and continue going as if nothing had happened.
      **
      ** Applications can set this macro (for example inside %include) if
      ** they intend to abandon the parse upon the first syntax error seen.
      */
      yy_syntax_error(yypParser,yymajor,yyminorunion);
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      yymajor = YYNOCODE;
      
#else  /* YYERRORSYMBOL is not defined */
      /* This is what we do if the grammar does not define ERROR:
      **
      **  * Report an error message, and throw away the input token.
      **
      **  * If the input token is $, then fail the parse.
      **
      ** As before, subsequent error messages are suppressed until
      ** three input tokens have been successfully shifted.
      */
      if( yypParser->yyerrcnt<=0 ){
        yy_syntax_error(yypParser,yymajor,yyminorunion);
      }
      yypParser->yyerrcnt = 3;
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      if( yyendofinput ){
        yy_parse_failed(yypParser);
      }
      yymajor = YYNOCODE;
#endif
    }
  }while( yymajor!=YYNOCODE && yypParser->yyidx>=0 );
  return;
}
