/* Driver template for the LEMON parser generator.
** The author disclaims copyright to this source code.
*/
/* First off, code is included that follows the "include" declaration
** in the input grammar file. */
#include <stdio.h>
#line 19 "../../toolbox/source/xec/lib/xec_parser_lemon.y"

    #include <assert.h>
    #include "xec_parser.h"
    #include "xec_token.h"
#line 31 "../../toolbox/source/xec/lib/xec_parser_lemon.y"



void xec_parser::destroy( xec_token* token )
{
    token->~xec_token();
    recycle_tokens.push_back( token );
}


#line 24 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
/* Next is all token values, in a form suitable for use by makeheaders.
** This section will be null unless lemon is run with the -m switch.
*/
/* 
** These constants (all generated automatically by the parser generator)
** specify the various kinds of tokens (terminals) that the parser
** understands. 
**
** Each symbol here is a terminal symbol in the grammar.
*/
/* Make sure the INTERFACE macro is defined.
*/
#ifndef INTERFACE
# define INTERFACE 1
#endif
/* The next thing included is series of defines which control
** various aspects of the generated parser.
**    YYCODETYPE         is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 terminals
**                       and nonterminals.  "int" is used otherwise.
**    YYNOCODE           is a number of type YYCODETYPE which corresponds
**                       to no legal terminal or nonterminal number.  This
**                       number is used to fill in empty slots of the hash 
**                       table.
**    YYFALLBACK         If defined, this indicates that one or more tokens
**                       have fall-back values which should be used if the
**                       original value of the token will not parse.
**    YYACTIONTYPE       is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 rules and
**                       states combined.  "int" is used otherwise.
**    XecParseTOKENTYPE     is the data type used for minor tokens given 
**                       directly to the parser from the tokenizer.
**    YYMINORTYPE        is the data type used for all minor tokens.
**                       This is typically a union of many types, one of
**                       which is XecParseTOKENTYPE.  The entry in the union
**                       for base tokens is called "yy0".
**    YYSTACKDEPTH       is the maximum depth of the parser's stack.  If
**                       zero the stack is dynamically sized using realloc()
**    XecParseARG_SDECL     A static variable declaration for the %extra_argument
**    XecParseARG_PDECL     A parameter declaration for the %extra_argument
**    XecParseARG_STORE     Code to store %extra_argument into yypParser
**    XecParseARG_FETCH     Code to extract %extra_argument from yypParser
**    YYNSTATE           the combined number of states.
**    YYNRULE            the number of rules in the grammar
**    YYERRORSYMBOL      is the code number of the error symbol.  If not
**                       defined, then do no error processing.
*/
#define YYCODETYPE unsigned char
#define YYNOCODE 129
#define YYACTIONTYPE unsigned short int
#define XecParseTOKENTYPE  xec_token* 
typedef union {
  int yyinit;
  XecParseTOKENTYPE yy0;
} YYMINORTYPE;
#ifndef YYSTACKDEPTH
#define YYSTACKDEPTH 100
#endif
#define XecParseARG_SDECL  xec_parser* p ;
#define XecParseARG_PDECL , xec_parser* p 
#define XecParseARG_FETCH  xec_parser* p  = yypParser->p 
#define XecParseARG_STORE yypParser->p  = p 
#define YYNSTATE 417
#define YYNRULE 208
#define YY_NO_ACTION      (YYNSTATE+YYNRULE+2)
#define YY_ACCEPT_ACTION  (YYNSTATE+YYNRULE+1)
#define YY_ERROR_ACTION   (YYNSTATE+YYNRULE)

/* The yyzerominor constant is used to initialize instances of
** YYMINORTYPE objects to zero. */
static const YYMINORTYPE yyzerominor = { 0 };

/* Define the yytestcase() macro to be a no-op if is not already defined
** otherwise.
**
** Applications can choose to define yytestcase() in the %include section
** to a macro that can assist in verifying code coverage.  For production
** code the yytestcase() macro should be turned off.  But it is useful
** for testing.
*/
#ifndef yytestcase
# define yytestcase(X)
#endif


/* Next are the tables used to determine what action to take based on the
** current state and lookahead token.  These tables are used to implement
** functions that take a state number and lookahead value and return an
** action integer.  
**
** Suppose the action integer is N.  Then the action is determined as
** follows
**
**   0 <= N < YYNSTATE                  Shift N.  That is, push the lookahead
**                                      token onto the stack and goto state N.
**
**   YYNSTATE <= N < YYNSTATE+YYNRULE   Reduce by rule N-YYNSTATE.
**
**   N == YYNSTATE+YYNRULE              A syntax error has occurred.
**
**   N == YYNSTATE+YYNRULE+1            The parser accepts its input.
**
**   N == YYNSTATE+YYNRULE+2            No such action.  Denotes unused
**                                      slots in the yy_action[] table.
**
** The action table is constructed as a single large table named yy_action[].
** Given state S and lookahead X, the action is computed as
**
**      yy_action[ yy_shift_ofst[S] + X ]
**
** If the index value yy_shift_ofst[S]+X is out of range or if the value
** yy_lookahead[yy_shift_ofst[S]+X] is not equal to X or if yy_shift_ofst[S]
** is equal to YY_SHIFT_USE_DFLT, it means that the action is not in the table
** and that yy_default[S] should be used instead.  
**
** The formula above is for computing the action when the lookahead is
** a terminal symbol.  If the lookahead is a non-terminal (as occurs after
** a reduce action) then the yy_reduce_ofst[] array is used in place of
** the yy_shift_ofst[] array and YY_REDUCE_USE_DFLT is used in place of
** YY_SHIFT_USE_DFLT.
**
** The following are the tables generated in this section:
**
**  yy_action[]        A single table containing all actions.
**  yy_lookahead[]     A table containing the lookahead for each entry in
**                     yy_action.  Used to detect hash collisions.
**  yy_shift_ofst[]    For each state, the offset into yy_action for
**                     shifting terminals.
**  yy_reduce_ofst[]   For each state, the offset into yy_action for
**                     shifting non-terminals after a reduce.
**  yy_default[]       Default action for each state.
*/
static const YYACTIONTYPE yy_action[] = {
 /*     0 */   418,  220,  274,   14,  365,  296,  147,  253,   30,  137,
 /*    10 */     1,  131,  284,  243,   99,  284,  101,  114,  304,  270,
 /*    20 */    35,  298,  401,  400,  397,  395,  393,   98,   96,   97,
 /*    30 */   100,   95,  126,   38,  123,  145,  403,   30,  122,  127,
 /*    40 */    39,  284,  168,  389,  368,  151,  172,  156,  223,  246,
 /*    50 */   193,  149,  226,  225,  144,  108,  310,  265,   77,   76,
 /*    60 */    75,   74,   73,   79,   81,   80,   82,   78,  270,   44,
 /*    70 */   204,   61,  257,  259,    8,  183,  298,  190,  192,   34,
 /*    80 */    50,  220,  274,   14,  134,  276,  147,  253,   30,  413,
 /*    90 */     1,  286,  284,  243,   99,  160,  101,  114,  362,  279,
 /*   100 */    35,  236,  401,  400,  397,  395,  393,   98,   96,   97,
 /*   110 */   100,   95,  126,  268,  123,  215,  403,    1,  122,  127,
 /*   120 */   344,   57,  168,  389,  368,  151,  172,  156,  223,  246,
 /*   130 */   193,  149,  256,  157,  144,  108,  310,  126,    1,  123,
 /*   140 */    33,  403,  103,  122,  127,  165,  346,  381,  104,   44,
 /*   150 */   204,   61,  257,  259,    8,  183,  345,  190,  192,   34,
 /*   160 */    50,  417,  220,  365,   14,  175,  152,  147,  253,   30,
 /*   170 */   273,    1,    1,  284,  243,   99,  299,  101,  114,  362,
 /*   180 */   300,   35,  351,  401,  400,  397,  395,  393,   98,   96,
 /*   190 */    97,  100,   95,  126,  407,  123,  186,  403,  165,  122,
 /*   200 */   127,  106,   60,  168,  389,  368,  151,  172,  156,  223,
 /*   210 */   246,  193,  150,    1,   33,  144,  108,  310,  126,  161,
 /*   220 */   123,  396,  403,  141,  122,  127,   48,   37,  378,  185,
 /*   230 */    44,  204,   61,  257,  259,    8,  183,  103,  190,  192,
 /*   240 */    34,   50,  220,   33,   14,  175,  158,  147,  253,   30,
 /*   250 */    29,    1,  285,  284,  243,   99,   28,  101,  114,  304,
 /*   260 */   289,   35,  297,  401,  400,  397,  395,  393,   98,   96,
 /*   270 */    97,  100,   95,  126,  279,  123,  236,  403,  171,  122,
 /*   280 */   127,  352,   55,  168,  389,  368,  151,  172,  156,  223,
 /*   290 */   246,  229,  212,   84,   33,  144,  108,  310,  126,  162,
 /*   300 */   123,   21,  403,   83,  122,  127,   46,  399,  386,   72,
 /*   310 */    44,  204,   61,  257,  259,    8,  183,  379,  190,  192,
 /*   320 */    34,   50,  220,  306,   14,  175,  166,  147,  253,   30,
 /*   330 */    23,    1,   16,  284,  243,   99,  377,  101,   87,   88,
 /*   340 */    86,   35,  366,  401,  400,  397,  395,  393,   98,   96,
 /*   350 */    97,  100,   95,  126,   27,  123,    7,  403,  141,  122,
 /*   360 */   127,  302,   36,  168,  389,  368,  151,  172,  156,  223,
 /*   370 */   246,  206,  373,   41,   33,  144,  108,  310,  126,  155,
 /*   380 */   123,  263,  403,  205,  122,  127,   64,  165,  380,   58,
 /*   390 */    44,  204,   61,  257,  259,    8,  183,   26,  190,  192,
 /*   400 */    34,   50,  626,    3,  107,  111,  387,  124,  341,  110,
 /*   410 */   349,  109,  360,  403,  376,  120,  130,   70,   51,  168,
 /*   420 */   389,  368,  151,  172,  156,  223,  246,  193,  149,  226,
 /*   430 */   199,  173,  311,  145,  228,   30,  353,  337,   31,  284,
 /*   440 */   119,  338,   12,   32,   24,  343,   89,   90,  178,  401,
 /*   450 */   400,  397,  395,  393,  126,  398,  123,  143,  403,    2,
 /*   460 */   122,  127,  387,   62,  384,  110,  391,  109,  360,  403,
 /*   470 */   280,  120,  130,  392,  390,  168,  389,  368,  151,  172,
 /*   480 */   156,  223,  246,  193,  149,  226,  199,  173,  311,  181,
 /*   490 */   228,  141,   53,  337,  135,   37,  119,  338,    1,   32,
 /*   500 */    24,  343,  387,  213,   15,  110,  347,  109,  292,  403,
 /*   510 */   405,  120,  130,   19,  103,  168,  389,  368,  151,  172,
 /*   520 */   156,  223,  246,  193,  149,  226,  199,  173,  311,  111,
 /*   530 */   228,  124,  341,  337,  348,  374,  119,  338,   33,   32,
 /*   540 */    24,  291,   33,  165,  103,  293,  387,  159,    9,  125,
 /*   550 */   104,  121,   52,  403,   49,  120,  130,  213,   17,  168,
 /*   560 */   389,  368,  151,  172,  156,  223,  246,  193,  149,  226,
 /*   570 */   199,  173,  311,   25,  228,  138,  339,  337,  404,    1,
 /*   580 */   119,  338,  308,   32,   24,  278,  387,  301,  145,  125,
 /*   590 */    30,  121,  103,  403,  284,  120,  130,   11,  406,  168,
 /*   600 */   389,  368,  151,  172,  156,  223,  246,  193,  149,  226,
 /*   610 */   199,  173,  311,   10,  228,  277,  356,  337,   13,  372,
 /*   620 */   119,  338,  305,   32,   24,  288,  387,   43,  409,  125,
 /*   630 */    65,  121,  371,  403,  410,  120,  130,  140,   69,  168,
 /*   640 */   389,  368,  151,  172,  156,  223,  246,  193,  149,  226,
 /*   650 */   199,  173,  311,  388,  228,  412,   18,  337,  359,  303,
 /*   660 */   119,  338,  415,   32,   24,  112,   33,  387,   85,   71,
 /*   670 */   125,  155,  121,  327,  403,   66,  120,  130,   64,    4,
 /*   680 */   168,  389,  368,  151,  172,  156,  223,  246,  193,  149,
 /*   690 */   226,  199,  173,  311,  262,  228,   20,   22,  337,  105,
 /*   700 */     5,  119,  338,  416,   32,   24,  272,  387,  367,    6,
 /*   710 */   125,  364,  121,  267,  403,   45,  120,  130,  627,   67,
 /*   720 */   168,  389,  368,  151,  172,  156,  223,  246,  193,  149,
 /*   730 */   226,  199,  173,  311,  266,  228,  627,  627,  337,  627,
 /*   740 */   627,  119,  338,  627,   32,   24,  283,  387,  627,  627,
 /*   750 */   125,  627,  121,  627,  403,  627,  120,  130,  627,  627,
 /*   760 */   168,  389,  368,  151,  172,  156,  223,  246,  193,  149,
 /*   770 */   226,  199,  173,  311,  627,  228,  627,  627,  337,  627,
 /*   780 */   627,  119,  338,  627,   32,   24,  402,   33,  387,  627,
 /*   790 */   627,  125,  161,  121,  627,  403,  627,  120,  130,   63,
 /*   800 */   627,  168,  389,  368,  151,  172,  156,  223,  246,  193,
 /*   810 */   149,  226,  199,  173,  311,  627,  228,  627,  627,  337,
 /*   820 */   627,  627,  119,  338,  627,   32,   24,  208,  387,  627,
 /*   830 */   627,  125,  627,  121,  627,  403,  627,  120,  130,  627,
 /*   840 */   627,  168,  389,  368,  151,  172,  156,  223,  246,  193,
 /*   850 */   149,  226,  199,  173,  311,  627,  228,  627,  627,  337,
 /*   860 */   627,  627,  119,  338,  627,   32,   24,  177,  387,  627,
 /*   870 */   627,  125,  627,  121,  627,  403,  627,  120,  130,  627,
 /*   880 */   627,  168,  389,  368,  151,  172,  156,  223,  246,  193,
 /*   890 */   149,  226,  199,  173,  311,  627,  228,  627,  627,  337,
 /*   900 */   627,  627,  119,  338,  627,   32,   24,  394,  430,  387,
 /*   910 */   627,  627,  125,  430,  121,  627,  403,  627,  120,  130,
 /*   920 */   430,  627,  168,  389,  368,  151,  172,  156,  223,  246,
 /*   930 */   193,  149,  226,  199,  173,  311,  627,  228,  627,  627,
 /*   940 */   337,  627,  627,  119,  338,  627,   32,   24,  408,  387,
 /*   950 */   627,  627,  125,  627,  121,  627,  403,  627,  120,  130,
 /*   960 */   627,  627,  168,  389,  368,  151,  172,  156,  223,  246,
 /*   970 */   193,  149,  226,  199,  173,  311,  627,  228,  627,  627,
 /*   980 */   337,  627,  627,  119,  338,  627,   32,   24,  271,  387,
 /*   990 */   627,  627,  125,  627,  121,  627,  403,  627,  120,  130,
 /*  1000 */   627,  627,  168,  389,  368,  151,  172,  156,  223,  246,
 /*  1010 */   193,  149,  226,  199,  173,  311,  627,  228,  627,  627,
 /*  1020 */   337,  627,  627,  119,  338,  627,   32,   24,  281,  450,
 /*  1030 */   387,  627,  627,  125,  450,  121,  627,  403,  627,  120,
 /*  1040 */   130,  450,  627,  168,  389,  368,  151,  172,  156,  223,
 /*  1050 */   246,  193,  149,  226,  199,  173,  311,  627,  228,  627,
 /*  1060 */   627,  337,  627,  627,  119,  338,  627,   32,   24,  264,
 /*  1070 */   387,  627,  627,  125,  627,  121,  627,  403,  627,  120,
 /*  1080 */   130,  627,  627,  168,  389,  368,  151,  172,  156,  223,
 /*  1090 */   246,  193,  149,  226,  199,  173,  311,  627,  228,  627,
 /*  1100 */   627,  337,  627,  627,  119,  338,  627,   32,   24,  287,
 /*  1110 */   387,  627,  627,  125,  627,  121,  627,  403,  627,  120,
 /*  1120 */   130,  627,  627,  168,  389,  368,  151,  172,  156,  223,
 /*  1130 */   246,  193,  149,  226,  199,  173,  311,  627,  228,  627,
 /*  1140 */   627,  337,  627,  627,  119,  338,  627,   32,   24,  269,
 /*  1150 */    33,  387,  627,  627,  125,  159,  121,  627,  403,  627,
 /*  1160 */   120,  130,   49,  627,  168,  389,  368,  151,  172,  156,
 /*  1170 */   223,  246,  193,  149,  226,  199,  173,  311,  627,  228,
 /*  1180 */   627,  627,  337,  627,  627,  119,  338,  370,   32,   24,
 /*  1190 */   275,  125,  627,  121,  627,  403,  627,  120,  130,  382,
 /*  1200 */   332,  168,  389,  368,  151,  172,  156,  223,  246,  193,
 /*  1210 */   149,  226,  199,  173,  325,  627,  627,  370,  117,  335,
 /*  1220 */   627,  125,  627,  121,  248,  403,  627,  120,  130,  382,
 /*  1230 */   332,  168,  389,  368,  151,  172,  156,  223,  246,  193,
 /*  1240 */   149,  226,  199,  173,  325,  627,  627,  370,  118,  335,
 /*  1250 */   627,  125,  627,  121,  194,  403,  627,  120,  130,  382,
 /*  1260 */   332,  168,  389,  368,  151,  172,  156,  223,  246,  193,
 /*  1270 */   149,  226,  199,  173,  325,  627,  627,  370,  118,  335,
 /*  1280 */   627,  125,  627,  121,  203,  403,  627,  120,  130,  382,
 /*  1290 */   332,  168,  389,  368,  151,  172,  156,  223,  246,  193,
 /*  1300 */   149,  226,  199,  173,  325,  627,  627,  370,  118,  335,
 /*  1310 */   627,  125,  627,  121,  216,  403,  627,  120,  130,  382,
 /*  1320 */   332,  168,  389,  368,  151,  172,  156,  223,  246,  193,
 /*  1330 */   149,  226,  199,  173,  325,  627,  627,  370,  118,  335,
 /*  1340 */   627,  125,  627,  121,  238,  403,  627,  120,  130,  382,
 /*  1350 */   332,  168,  389,  368,  151,  172,  156,  223,  246,  193,
 /*  1360 */   149,  226,  199,  173,  325,  627,   33,  627,  118,  335,
 /*  1370 */   309,  159,  627,  125,  174,  121,  627,  403,   56,  120,
 /*  1380 */   130,  627,  627,  168,  389,  368,  151,  172,  156,  223,
 /*  1390 */   246,  193,  149,  226,  199,  173,  311,  627,  239,  627,
 /*  1400 */   627,  337,  627,  370,  119,  338,  627,  125,  627,  121,
 /*  1410 */   627,  403,  627,  120,  130,  250,  332,  168,  389,  368,
 /*  1420 */   151,  172,  156,  223,  246,  193,  149,  226,  199,  173,
 /*  1430 */   325,  627,  627,  370,  118,  335,  627,  125,  627,  121,
 /*  1440 */   627,  403,  627,  120,  130,  218,  332,  168,  389,  368,
 /*  1450 */   151,  172,  156,  223,  246,  193,  149,  226,  199,  173,
 /*  1460 */   325,  627,  627,  370,  118,  335,  627,  125,  627,  121,
 /*  1470 */   627,  403,  627,  120,  130,  180,  332,  168,  389,  368,
 /*  1480 */   151,  172,  156,  223,  246,  193,  149,  226,  199,  173,
 /*  1490 */   325,  128,  627,  129,  118,  335,  307,  132,  133,  125,
 /*  1500 */   627,  121,  627,  403,  627,  120,  130,  627,  627,  168,
 /*  1510 */   389,  368,  151,  172,  156,  223,  246,  193,  149,  226,
 /*  1520 */   199,  173,  311,  627,  254,  627,  627,  337,  627,  370,
 /*  1530 */   119,  338,  627,  125,  627,  121,  627,  403,  627,  120,
 /*  1540 */   130,  252,  332,  168,  389,  368,  151,  172,  156,  223,
 /*  1550 */   246,  193,  149,  226,  199,  173,  325,  627,  627,  385,
 /*  1560 */   118,  335,  627,  125,  627,  121,  627,  403,  627,  120,
 /*  1570 */   130,  627,  332,  168,  389,  368,  151,  172,  156,  223,
 /*  1580 */   246,  193,  149,  226,  199,  173,  325,  627,  627,  198,
 /*  1590 */   249,  335,  627,  125,  627,  121,  627,  403,  627,  120,
 /*  1600 */   130,  627,  332,  168,  389,  368,  151,  172,  156,  223,
 /*  1610 */   246,  193,  149,  226,  199,  173,  325,  627,  627,  369,
 /*  1620 */   249,  335,  627,  125,  627,  121,  627,  403,  627,  120,
 /*  1630 */   130,  627,  332,  168,  389,  368,  151,  172,  156,  223,
 /*  1640 */   246,  193,  149,  226,  199,  173,  325,  627,  627,  336,
 /*  1650 */   249,  335,  627,  125,  627,  121,  627,  403,  627,  120,
 /*  1660 */   130,  627,  332,  168,  389,  368,  151,  172,  156,  223,
 /*  1670 */   246,  193,  149,  226,  199,  173,  325,  627,  627,  200,
 /*  1680 */   249,  335,  627,  125,  627,  121,  627,  403,  627,  120,
 /*  1690 */   130,  627,  332,  168,  389,  368,  151,  172,  156,  223,
 /*  1700 */   246,  193,  149,  226,  199,  173,  325,  627,  627,  244,
 /*  1710 */   249,  335,  627,  125,  627,  121,  627,  403,  627,  120,
 /*  1720 */   130,  627,  332,  168,  389,  368,  151,  172,  156,  223,
 /*  1730 */   246,  193,  149,  226,  199,  173,  325,  627,  627,  196,
 /*  1740 */   249,  335,  627,  125,  627,  121,  627,  403,  627,  120,
 /*  1750 */   130,  627,  332,  168,  389,  368,  151,  172,  156,  223,
 /*  1760 */   246,  193,  149,  226,  199,  173,  325,  176,  627,   33,
 /*  1770 */   249,  335,  627,  125,  155,  121,  627,  403,  627,  120,
 /*  1780 */   130,   47,  332,  168,  389,  368,  151,  172,  156,  223,
 /*  1790 */   246,  193,  149,  226,  199,  173,  325,  188,  627,  627,
 /*  1800 */   191,  197,  145,  627,   30,  627,   40,  627,  284,  243,
 /*  1810 */    99,  627,  101,  116,  627,  627,   35,  354,  401,  400,
 /*  1820 */   397,  395,  393,   98,   96,   97,  100,   95,  350,  627,
 /*  1830 */   126,  627,  123,  627,  142,   92,  122,  127,  627,  627,
 /*  1840 */   627,   41,   59,  627,   33,  312,  627,  627,  627,  162,
 /*  1850 */   144,  108,  310,   93,   94,   91,   68,  145,  627,   30,
 /*  1860 */   282,   40,  627,  284,  243,   99,  627,  101,  627,  627,
 /*  1870 */   627,   35,  627,  401,  400,  397,  395,  393,   98,   96,
 /*  1880 */    97,  100,   95,  313,  314,  315,  316,  317,  318,  319,
 /*  1890 */   320,  321,  322,  323,  324,  627,  136,  375,   33,   33,
 /*  1900 */     1,  627,   54,  162,  162,  144,  108,  310,  627,  627,
 /*  1910 */    46,   68,  145,  627,   30,  627,   40,  627,  284,  243,
 /*  1920 */    99,  627,  101,  113,  627,  627,   35,  627,  401,  400,
 /*  1930 */   397,  395,  393,   98,   96,   97,  100,   95,  627,  627,
 /*  1940 */   627,  126,  627,  123,  627,  403,  366,  122,  127,  627,
 /*  1950 */   627,  168,  389,  368,  151,  172,  156,  223,  246,  207,
 /*  1960 */   144,  108,  310,  126,  627,  123,  627,  403,  627,  122,
 /*  1970 */   127,  627,  210,  168,  389,  368,  151,  172,  156,  223,
 /*  1980 */   246,  193,  149,  226,  199,  173,  325,  627,  145,  202,
 /*  1990 */    30,  627,   40,  222,  284,  243,   99,  627,  101,  627,
 /*  2000 */   627,  627,   35,  355,  401,  400,  397,  395,  393,   98,
 /*  2010 */    96,   97,  100,   95,  627,  627,  126,  627,  123,  627,
 /*  2020 */   403,  627,  122,  127,  627,  627,  168,  389,  368,  151,
 /*  2030 */   172,  156,  223,  246,  201,  627,  144,  108,  310,  627,
 /*  2040 */   627,  627,  627,  145,  627,   30,  627,   40,  627,  284,
 /*  2050 */   243,   99,  627,  101,  627,  414,  627,   35,  627,  401,
 /*  2060 */   400,  397,  395,  393,   98,   96,   97,  100,   95,  126,
 /*  2070 */   627,  123,  627,  403,  627,  122,  127,  627,  627,  168,
 /*  2080 */   389,  368,  151,  172,  156,  223,  246,  237,  627,  627,
 /*  2090 */   627,  144,  108,  310,  627,  627,  627,  627,  145,  627,
 /*  2100 */    30,  627,   40,  627,  284,  243,   99,  627,  101,  627,
 /*  2110 */   411,  627,   35,  627,  401,  400,  397,  395,  393,   98,
 /*  2120 */    96,   97,  100,   95,  126,  627,  123,  627,  403,  627,
 /*  2130 */   122,  127,  627,  627,  168,  389,  368,  151,  172,  156,
 /*  2140 */   223,  246,  224,  627,  627,  627,  144,  108,  310,  627,
 /*  2150 */   627,  627,  627,  145,  627,   30,  627,   40,  627,  284,
 /*  2160 */   243,   99,  627,  101,  627,  627,  627,   35,  627,  401,
 /*  2170 */   400,  397,  395,  393,   98,   96,   97,  100,   95,  627,
 /*  2180 */   627,  627,  126,  627,  123,  627,  403,  627,  122,  127,
 /*  2190 */   627,  627,  168,  389,  368,  151,  172,  156,  223,  246,
 /*  2200 */   231,  144,  108,  310,  627,  627,  627,  627,  145,  627,
 /*  2210 */    30,  627,   40,  326,  284,  243,   99,  627,  101,  627,
 /*  2220 */   627,  627,   35,  627,  401,  400,  397,  395,  393,   98,
 /*  2230 */    96,   97,  100,   95,  627,  627,  627,  627,  126,  627,
 /*  2240 */   123,  627,  403,  627,  122,  127,  627,   42,  168,  389,
 /*  2250 */   342,  312,  294,  284,  627,  115,  144,  108,  114,  340,
 /*  2260 */   627,  627,  627,  145,  627,   30,  627,    1,  627,  284,
 /*  2270 */   243,   99,  627,  101,  627,  627,  627,   35,  627,  401,
 /*  2280 */   400,  397,  395,  393,   98,   96,   97,  100,   95,  313,
 /*  2290 */   314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
 /*  2300 */   324,  350,   41,  126,  627,  123,  312,  139,  627,  122,
 /*  2310 */   127,  144,  108,  310,  627,  627,  627,  627,  145,  627,
 /*  2320 */    30,  627,   40,  627,  284,  243,   99,  627,  102,  148,
 /*  2330 */   627,  627,   35,  627,  401,  400,  397,  395,  393,   98,
 /*  2340 */    96,   97,  100,   95,  313,  314,  315,  316,  317,  318,
 /*  2350 */   319,  320,  321,  322,  323,  324,  627,  126,  627,  123,
 /*  2360 */   627,  227,  627,  122,  127,  627,  144,  108,  627,  627,
 /*  2370 */   627,  627,  627,  145,  627,   30,  627,   40,  627,  284,
 /*  2380 */   243,   99,  627,  101,  627,  627,  627,   35,  209,  401,
 /*  2390 */   400,  397,  395,  393,   98,   96,   97,  100,   95,  627,
 /*  2400 */   627,  627,  126,  627,  123,  627,  403,  627,  122,  127,
 /*  2410 */   627,  627,  168,  389,  368,  151,  172,  156,  223,  246,
 /*  2420 */   189,  144,  108,  627,  126,  627,  123,  627,  403,  627,
 /*  2430 */   122,  127,  627,  332,  168,  389,  368,  151,  172,  156,
 /*  2440 */   223,  246,  193,  149,  226,  199,  173,  325,  627,  295,
 /*  2450 */   284,  167,  115,  627,  627,  114,  340,  125,  627,  121,
 /*  2460 */   627,  403,  627,  120,  130,  627,  333,  168,  389,  368,
 /*  2470 */   151,  172,  156,  223,  246,  193,  149,  226,  199,  173,
 /*  2480 */   325,  627,  145,  627,   30,  358,   40,  627,  284,  243,
 /*  2490 */    99,  627,  101,  627,  627,  627,   35,  261,  401,  400,
 /*  2500 */   397,  395,  393,   98,   96,   97,  100,   95,  126,  627,
 /*  2510 */   123,  627,  403,  627,  122,  127,  627,  627,  168,  389,
 /*  2520 */   368,  151,  172,  156,  223,  246,  258,  627,  627,  627,
 /*  2530 */   144,  108,  627,  627,  627,  627,  627,  145,  627,   30,
 /*  2540 */   627,   40,  627,  284,  243,   99,  627,  101,  627,  627,
 /*  2550 */   627,   35,  240,  401,  400,  397,  395,  393,   98,   96,
 /*  2560 */    97,  100,   95,  126,  627,  123,  627,  403,  627,  122,
 /*  2570 */   127,  627,  627,  168,  389,  368,  151,  172,  156,  223,
 /*  2580 */   246,  214,  627,  627,  627,  144,  108,  125,  627,  121,
 /*  2590 */   627,  403,  627,  120,  130,  627,  330,  168,  389,  368,
 /*  2600 */   151,  172,  156,  223,  246,  193,  149,  226,  199,  173,
 /*  2610 */   325,  627,  145,  627,   30,  331,   40,  627,  284,  243,
 /*  2620 */    99,  627,  101,  627,  627,  627,   35,  255,  401,  400,
 /*  2630 */   397,  395,  393,   98,   96,   97,  100,   95,  627,  627,
 /*  2640 */   627,  126,  627,  123,  627,  403,  627,  122,  127,  627,
 /*  2650 */   627,  168,  389,  368,  151,  172,  156,  223,  260,  627,
 /*  2660 */   144,  108,  627,  126,  627,  123,  627,  403,  627,  122,
 /*  2670 */   127,  627,  627,  383,  627,  125,  627,  121,  627,  403,
 /*  2680 */   627,  120,  130,  627,  333,  168,  389,  368,  151,  172,
 /*  2690 */   156,  223,  246,  193,  149,  226,  199,  173,  325,  627,
 /*  2700 */   126,  627,  123,  334,  403,  627,  122,  127,  627,  242,
 /*  2710 */   168,  389,  368,  151,  172,  156,  223,  246,  193,  149,
 /*  2720 */   226,  199,  173,  325,  145,  627,   30,  627,   40,  627,
 /*  2730 */   284,  243,   99,  627,  101,  627,  627,  627,   35,  627,
 /*  2740 */   401,  400,  397,  395,  393,   98,   96,   97,  100,   95,
 /*  2750 */   126,  627,  123,  627,  403,  627,  122,  127,  627,  627,
 /*  2760 */   168,  389,  368,  151,  172,  156,  217,  627,  627,  627,
 /*  2770 */   627,  627,  144,  108,  126,  627,  123,  627,  403,  627,
 /*  2780 */   122,  127,  627,  219,  168,  389,  368,  151,  172,  156,
 /*  2790 */   223,  246,  193,  149,  226,  199,  173,  325,  627,  126,
 /*  2800 */   627,  123,  627,  403,  627,  122,  127,  627,  184,  168,
 /*  2810 */   389,  368,  151,  172,  156,  223,  246,  193,  149,  226,
 /*  2820 */   199,  173,  325,  627,  126,  627,  123,  627,  403,  627,
 /*  2830 */   122,  127,  627,  182,  168,  389,  368,  151,  172,  156,
 /*  2840 */   223,  246,  193,  149,  226,  199,  173,  325,  627,  627,
 /*  2850 */   126,  627,  123,  627,  221,  627,  122,  127,  627,  627,
 /*  2860 */   627,  627,  126,  627,  123,  627,  403,  627,  122,  127,
 /*  2870 */   627,  233,  168,  389,  368,  151,  172,  156,  223,  246,
 /*  2880 */   193,  149,  226,  199,  173,  325,  126,  627,  123,  627,
 /*  2890 */   403,  627,  122,  127,  627,  247,  168,  389,  368,  151,
 /*  2900 */   172,  156,  223,  246,  193,  149,  226,  199,  173,  325,
 /*  2910 */   126,  627,  123,  627,  403,  627,  122,  127,  627,  211,
 /*  2920 */   168,  389,  368,  151,  172,  156,  223,  246,  193,  149,
 /*  2930 */   226,  199,  173,  325,  126,  627,  123,  627,  403,  627,
 /*  2940 */   122,  127,  627,  195,  168,  389,  368,  151,  172,  156,
 /*  2950 */   223,  246,  193,  149,  226,  199,  173,  325,  126,  627,
 /*  2960 */   123,  627,  403,  627,  122,  127,  627,  245,  168,  389,
 /*  2970 */   368,  151,  172,  156,  223,  246,  193,  149,  226,  199,
 /*  2980 */   173,  325,  126,  627,  123,  627,  403,  627,  122,  127,
 /*  2990 */   627,  241,  168,  389,  368,  151,  172,  156,  223,  246,
 /*  3000 */   193,  149,  226,  199,  173,  325,  126,  627,  123,  627,
 /*  3010 */   403,  627,  122,  127,  627,  235,  168,  389,  368,  151,
 /*  3020 */   172,  156,  223,  246,  193,  149,  226,  199,  173,  325,
 /*  3030 */   126,  627,  123,  627,  403,  627,  122,  127,  627,  251,
 /*  3040 */   168,  389,  368,  151,  172,  156,  223,  246,  193,  149,
 /*  3050 */   226,  199,  173,  325,  126,  627,  123,  627,  403,  627,
 /*  3060 */   122,  127,  627,  234,  168,  389,  368,  151,  172,  156,
 /*  3070 */   223,  246,  193,  149,  226,  199,  173,  325,  126,  627,
 /*  3080 */   123,  627,  403,  627,  122,  127,  627,  187,  168,  389,
 /*  3090 */   368,  151,  172,  156,  223,  246,  193,  149,  226,  199,
 /*  3100 */   173,  325,  126,  627,  123,  627,  403,  627,  122,  127,
 /*  3110 */   627,  232,  168,  389,  368,  151,  172,  156,  223,  246,
 /*  3120 */   193,  149,  226,  199,  173,  325,  126,  627,  123,  627,
 /*  3130 */   403,  627,  122,  127,  627,  179,  168,  389,  368,  151,
 /*  3140 */   172,  156,  223,  246,  193,  149,  226,  199,  173,  325,
 /*  3150 */   126,  627,  123,  627,  403,  627,  122,  127,  627,  333,
 /*  3160 */   168,  389,  368,  151,  172,  156,  223,  246,  193,  149,
 /*  3170 */   226,  199,  173,  325,  126,  627,  123,  627,  403,  627,
 /*  3180 */   122,  127,  627,  329,  168,  389,  368,  151,  172,  156,
 /*  3190 */   223,  246,  193,  149,  226,  199,  173,  325,  126,  627,
 /*  3200 */   123,  627,  403,  627,  122,  127,  627,  230,  168,  389,
 /*  3210 */   368,  151,  172,  156,  223,  246,  193,  149,  226,  199,
 /*  3220 */   173,  325,  126,  627,  123,  627,  403,  627,  122,  127,
 /*  3230 */   627,  328,  168,  389,  368,  151,  172,  156,  223,  246,
 /*  3240 */   193,  149,  226,  199,  173,  325,  126,  627,  123,  627,
 /*  3250 */   403,  627,  122,  127,  627,  290,  168,  389,  368,  151,
 /*  3260 */   172,  156,  223,  246,  193,  149,  226,  199,  173,  325,
 /*  3270 */   145,  627,   30,  126,  627,  123,  284,  403,   99,  122,
 /*  3280 */   127,  627,  627,  168,  389,  363,  401,  400,  397,  395,
 /*  3290 */   393,   98,   96,   97,  100,   95,  627,  126,  627,  123,
 /*  3300 */   627,  403,  627,  122,  127,  627,  627,  168,  389,  368,
 /*  3310 */   151,  172,  163,  627,  126,  627,  123,  627,  403,  627,
 /*  3320 */   122,  127,  627,  627,  168,  389,  368,  151,  170,  126,
 /*  3330 */   627,  123,  627,  403,  627,  122,  127,  627,  627,  168,
 /*  3340 */   389,  368,  151,  169,  627,  126,  627,  123,  627,  403,
 /*  3350 */   627,  122,  127,  627,  627,  168,  389,  368,  151,  164,
 /*  3360 */   126,  627,  123,  627,  403,  627,  122,  127,  627,  627,
 /*  3370 */   168,  389,  368,  153,  627,  627,  126,  627,  123,  627,
 /*  3380 */   403,  627,  122,  127,  627,  627,  168,  389,  368,  154,
 /*  3390 */   627,  126,  627,  123,  627,  403,  627,  122,  127,  627,
 /*  3400 */   627,  168,  389,  361,  126,  627,  123,  627,  403,  627,
 /*  3410 */   122,  127,  627,  627,  168,  389,  357,  126,  627,  123,
 /*  3420 */   627,  146,  627,  122,  127,
};
static const YYCODETYPE yy_lookahead[] = {
 /*     0 */     0,    1,   84,    3,   56,   87,    6,    7,    8,   89,
 /*    10 */    10,   91,   12,   13,   14,   12,   16,   17,   18,   84,
 /*    20 */    20,   86,   22,   23,   24,   25,   26,   27,   28,   29,
 /*    30 */    30,   31,   89,  118,   91,    6,   93,    8,   95,   96,
 /*    40 */   118,   12,   99,  100,  101,  102,  103,  104,  105,  106,
 /*    50 */   107,  108,  109,  110,   54,   55,   56,   84,   41,   42,
 /*    60 */    43,   44,   45,   46,   47,   48,   49,   50,   84,   69,
 /*    70 */    70,   71,   72,   73,   74,   75,   86,   77,   78,   79,
 /*    80 */    80,    1,   84,    3,  126,  127,    6,    7,    8,   84,
 /*    90 */    10,   11,   12,   13,   14,   84,   16,   17,   18,   12,
 /*   100 */    20,   14,   22,   23,   24,   25,   26,   27,   28,   29,
 /*   110 */    30,   31,   89,   12,   91,   14,   93,   10,   95,   96,
 /*   120 */    86,   20,   99,  100,  101,  102,  103,  104,  105,  106,
 /*   130 */   107,  108,  109,   84,   54,   55,   56,   89,   10,   91,
 /*   140 */     8,   93,   10,   95,   96,   13,   18,   99,   16,   69,
 /*   150 */    70,   71,   72,   73,   74,   75,   86,   77,   78,   79,
 /*   160 */    80,    0,    1,   56,    3,   89,   90,    6,    7,    8,
 /*   170 */   127,   10,   10,   12,   13,   14,   86,   16,   17,   18,
 /*   180 */    18,   20,   87,   22,   23,   24,   25,   26,   27,   28,
 /*   190 */    29,   30,   31,   89,   12,   91,   14,   93,   13,   95,
 /*   200 */    96,   16,   20,   99,  100,  101,  102,  103,  104,  105,
 /*   210 */   106,  107,  108,   10,    8,   54,   55,   56,   89,   13,
 /*   220 */    91,   86,   93,   15,   95,   96,   20,   19,   99,   89,
 /*   230 */    69,   70,   71,   72,   73,   74,   75,   10,   77,   78,
 /*   240 */    79,   80,    1,    8,    3,   89,   90,    6,    7,    8,
 /*   250 */    84,   10,   11,   12,   13,   14,   84,   16,   17,   18,
 /*   260 */    84,   20,   87,   22,   23,   24,   25,   26,   27,   28,
 /*   270 */    29,   30,   31,   89,   12,   91,   14,   93,   89,   95,
 /*   280 */    96,   56,   20,   99,  100,  101,  102,  103,  104,  105,
 /*   290 */   106,  107,    6,   39,    8,   54,   55,   56,   89,   13,
 /*   300 */    91,    8,   93,   40,   95,   96,   20,   16,   99,   51,
 /*   310 */    69,   70,   71,   72,   73,   74,   75,   56,   77,   78,
 /*   320 */    79,   80,    1,   18,    3,   89,   90,    6,    7,    8,
 /*   330 */     8,   10,    9,   12,   13,   14,   21,   16,   35,   36,
 /*   340 */    37,   20,   56,   22,   23,   24,   25,   26,   27,   28,
 /*   350 */    29,   30,   31,   89,   18,   91,    9,   93,   15,   95,
 /*   360 */    96,   18,   19,   99,  100,  101,  102,  103,  104,  105,
 /*   370 */   106,  107,    6,   15,    8,   54,   55,   56,   89,   13,
 /*   380 */    91,   12,   93,   14,   95,   96,   20,   13,   99,   20,
 /*   390 */    69,   70,   71,   72,   73,   74,   75,   18,   77,   78,
 /*   400 */    79,   80,   82,   83,   88,   89,   86,   91,   92,   89,
 /*   410 */    94,   91,   92,   93,   21,   95,   96,   53,   54,   99,
 /*   420 */   100,  101,  102,  103,  104,  105,  106,  107,  108,  109,
 /*   430 */   110,  111,  112,    6,  114,    8,   56,  117,    8,   12,
 /*   440 */   120,  121,    9,  123,  124,  125,   29,   30,   73,   22,
 /*   450 */    23,   24,   25,   26,   89,   16,   91,   54,   93,   83,
 /*   460 */    95,   96,   86,   15,   99,   89,   18,   91,   92,   93,
 /*   470 */     9,   95,   96,   27,   28,   99,  100,  101,  102,  103,
 /*   480 */   104,  105,  106,  107,  108,  109,  110,  111,  112,    9,
 /*   490 */   114,   15,   16,  117,    6,   19,  120,  121,   10,  123,
 /*   500 */   124,  125,   86,    4,    5,   89,   18,   91,   92,   93,
 /*   510 */    18,   95,   96,    9,   10,   99,  100,  101,  102,  103,
 /*   520 */   104,  105,  106,  107,  108,  109,  110,  111,  112,   89,
 /*   530 */   114,   91,   92,  117,   94,   21,  120,  121,    8,  123,
 /*   540 */   124,  125,    8,   13,   10,   21,   86,   13,    9,   89,
 /*   550 */    16,   91,   76,   93,   20,   95,   96,    4,    5,   99,
 /*   560 */   100,  101,  102,  103,  104,  105,  106,  107,  108,  109,
 /*   570 */   110,  111,  112,    8,  114,    6,   56,  117,   21,   10,
 /*   580 */   120,  121,   18,  123,  124,  125,   86,   18,    6,   89,
 /*   590 */     8,   91,   10,   93,   12,   95,   96,    9,   12,   99,
 /*   600 */   100,  101,  102,  103,  104,  105,  106,  107,  108,  109,
 /*   610 */   110,  111,  112,    9,  114,   12,   21,  117,    9,   21,
 /*   620 */   120,  121,   21,  123,  124,  125,   86,   15,   18,   89,
 /*   630 */    16,   91,   21,   93,   18,   95,   96,    9,   16,   99,
 /*   640 */   100,  101,  102,  103,  104,  105,  106,  107,  108,  109,
 /*   650 */   110,  111,  112,   18,  114,   18,    9,  117,   15,   18,
 /*   660 */   120,  121,   18,  123,  124,  125,    8,   86,   38,   52,
 /*   670 */    89,   13,   91,   11,   93,   15,   95,   96,   20,    9,
 /*   680 */    99,  100,  101,  102,  103,  104,  105,  106,  107,  108,
 /*   690 */   109,  110,  111,  112,   18,  114,    8,    8,  117,   16,
 /*   700 */     2,  120,  121,   12,  123,  124,  125,   86,    9,    9,
 /*   710 */    89,   56,   91,   12,   93,    8,   95,   96,  128,   16,
 /*   720 */    99,  100,  101,  102,  103,  104,  105,  106,  107,  108,
 /*   730 */   109,  110,  111,  112,   18,  114,  128,  128,  117,  128,
 /*   740 */   128,  120,  121,  128,  123,  124,  125,   86,  128,  128,
 /*   750 */    89,  128,   91,  128,   93,  128,   95,   96,  128,  128,
 /*   760 */    99,  100,  101,  102,  103,  104,  105,  106,  107,  108,
 /*   770 */   109,  110,  111,  112,  128,  114,  128,  128,  117,  128,
 /*   780 */   128,  120,  121,  128,  123,  124,  125,    8,   86,  128,
 /*   790 */   128,   89,   13,   91,  128,   93,  128,   95,   96,   20,
 /*   800 */   128,   99,  100,  101,  102,  103,  104,  105,  106,  107,
 /*   810 */   108,  109,  110,  111,  112,  128,  114,  128,  128,  117,
 /*   820 */   128,  128,  120,  121,  128,  123,  124,  125,   86,  128,
 /*   830 */   128,   89,  128,   91,  128,   93,  128,   95,   96,  128,
 /*   840 */   128,   99,  100,  101,  102,  103,  104,  105,  106,  107,
 /*   850 */   108,  109,  110,  111,  112,  128,  114,  128,  128,  117,
 /*   860 */   128,  128,  120,  121,  128,  123,  124,  125,   86,  128,
 /*   870 */   128,   89,  128,   91,  128,   93,  128,   95,   96,  128,
 /*   880 */   128,   99,  100,  101,  102,  103,  104,  105,  106,  107,
 /*   890 */   108,  109,  110,  111,  112,  128,  114,  128,  128,  117,
 /*   900 */   128,  128,  120,  121,  128,  123,  124,  125,    8,   86,
 /*   910 */   128,  128,   89,   13,   91,  128,   93,  128,   95,   96,
 /*   920 */    20,  128,   99,  100,  101,  102,  103,  104,  105,  106,
 /*   930 */   107,  108,  109,  110,  111,  112,  128,  114,  128,  128,
 /*   940 */   117,  128,  128,  120,  121,  128,  123,  124,  125,   86,
 /*   950 */   128,  128,   89,  128,   91,  128,   93,  128,   95,   96,
 /*   960 */   128,  128,   99,  100,  101,  102,  103,  104,  105,  106,
 /*   970 */   107,  108,  109,  110,  111,  112,  128,  114,  128,  128,
 /*   980 */   117,  128,  128,  120,  121,  128,  123,  124,  125,   86,
 /*   990 */   128,  128,   89,  128,   91,  128,   93,  128,   95,   96,
 /*  1000 */   128,  128,   99,  100,  101,  102,  103,  104,  105,  106,
 /*  1010 */   107,  108,  109,  110,  111,  112,  128,  114,  128,  128,
 /*  1020 */   117,  128,  128,  120,  121,  128,  123,  124,  125,    8,
 /*  1030 */    86,  128,  128,   89,   13,   91,  128,   93,  128,   95,
 /*  1040 */    96,   20,  128,   99,  100,  101,  102,  103,  104,  105,
 /*  1050 */   106,  107,  108,  109,  110,  111,  112,  128,  114,  128,
 /*  1060 */   128,  117,  128,  128,  120,  121,  128,  123,  124,  125,
 /*  1070 */    86,  128,  128,   89,  128,   91,  128,   93,  128,   95,
 /*  1080 */    96,  128,  128,   99,  100,  101,  102,  103,  104,  105,
 /*  1090 */   106,  107,  108,  109,  110,  111,  112,  128,  114,  128,
 /*  1100 */   128,  117,  128,  128,  120,  121,  128,  123,  124,  125,
 /*  1110 */    86,  128,  128,   89,  128,   91,  128,   93,  128,   95,
 /*  1120 */    96,  128,  128,   99,  100,  101,  102,  103,  104,  105,
 /*  1130 */   106,  107,  108,  109,  110,  111,  112,  128,  114,  128,
 /*  1140 */   128,  117,  128,  128,  120,  121,  128,  123,  124,  125,
 /*  1150 */     8,   86,  128,  128,   89,   13,   91,  128,   93,  128,
 /*  1160 */    95,   96,   20,  128,   99,  100,  101,  102,  103,  104,
 /*  1170 */   105,  106,  107,  108,  109,  110,  111,  112,  128,  114,
 /*  1180 */   128,  128,  117,  128,  128,  120,  121,   85,  123,  124,
 /*  1190 */   125,   89,  128,   91,  128,   93,  128,   95,   96,   97,
 /*  1200 */    98,   99,  100,  101,  102,  103,  104,  105,  106,  107,
 /*  1210 */   108,  109,  110,  111,  112,  128,  128,   85,  116,  117,
 /*  1220 */   128,   89,  128,   91,  122,   93,  128,   95,   96,   97,
 /*  1230 */    98,   99,  100,  101,  102,  103,  104,  105,  106,  107,
 /*  1240 */   108,  109,  110,  111,  112,  128,  128,   85,  116,  117,
 /*  1250 */   128,   89,  128,   91,  122,   93,  128,   95,   96,   97,
 /*  1260 */    98,   99,  100,  101,  102,  103,  104,  105,  106,  107,
 /*  1270 */   108,  109,  110,  111,  112,  128,  128,   85,  116,  117,
 /*  1280 */   128,   89,  128,   91,  122,   93,  128,   95,   96,   97,
 /*  1290 */    98,   99,  100,  101,  102,  103,  104,  105,  106,  107,
 /*  1300 */   108,  109,  110,  111,  112,  128,  128,   85,  116,  117,
 /*  1310 */   128,   89,  128,   91,  122,   93,  128,   95,   96,   97,
 /*  1320 */    98,   99,  100,  101,  102,  103,  104,  105,  106,  107,
 /*  1330 */   108,  109,  110,  111,  112,  128,  128,   85,  116,  117,
 /*  1340 */   128,   89,  128,   91,  122,   93,  128,   95,   96,   97,
 /*  1350 */    98,   99,  100,  101,  102,  103,  104,  105,  106,  107,
 /*  1360 */   108,  109,  110,  111,  112,  128,    8,  128,  116,  117,
 /*  1370 */    86,   13,  128,   89,  122,   91,  128,   93,   20,   95,
 /*  1380 */    96,  128,  128,   99,  100,  101,  102,  103,  104,  105,
 /*  1390 */   106,  107,  108,  109,  110,  111,  112,  128,  114,  128,
 /*  1400 */   128,  117,  128,   85,  120,  121,  128,   89,  128,   91,
 /*  1410 */   128,   93,  128,   95,   96,   97,   98,   99,  100,  101,
 /*  1420 */   102,  103,  104,  105,  106,  107,  108,  109,  110,  111,
 /*  1430 */   112,  128,  128,   85,  116,  117,  128,   89,  128,   91,
 /*  1440 */   128,   93,  128,   95,   96,   97,   98,   99,  100,  101,
 /*  1450 */   102,  103,  104,  105,  106,  107,  108,  109,  110,  111,
 /*  1460 */   112,  128,  128,   85,  116,  117,  128,   89,  128,   91,
 /*  1470 */   128,   93,  128,   95,   96,   97,   98,   99,  100,  101,
 /*  1480 */   102,  103,  104,  105,  106,  107,  108,  109,  110,  111,
 /*  1490 */   112,   89,  128,   91,  116,  117,   86,   95,   96,   89,
 /*  1500 */   128,   91,  128,   93,  128,   95,   96,  128,  128,   99,
 /*  1510 */   100,  101,  102,  103,  104,  105,  106,  107,  108,  109,
 /*  1520 */   110,  111,  112,  128,  114,  128,  128,  117,  128,   85,
 /*  1530 */   120,  121,  128,   89,  128,   91,  128,   93,  128,   95,
 /*  1540 */    96,   97,   98,   99,  100,  101,  102,  103,  104,  105,
 /*  1550 */   106,  107,  108,  109,  110,  111,  112,  128,  128,   85,
 /*  1560 */   116,  117,  128,   89,  128,   91,  128,   93,  128,   95,
 /*  1570 */    96,  128,   98,   99,  100,  101,  102,  103,  104,  105,
 /*  1580 */   106,  107,  108,  109,  110,  111,  112,  128,  128,   85,
 /*  1590 */   116,  117,  128,   89,  128,   91,  128,   93,  128,   95,
 /*  1600 */    96,  128,   98,   99,  100,  101,  102,  103,  104,  105,
 /*  1610 */   106,  107,  108,  109,  110,  111,  112,  128,  128,   85,
 /*  1620 */   116,  117,  128,   89,  128,   91,  128,   93,  128,   95,
 /*  1630 */    96,  128,   98,   99,  100,  101,  102,  103,  104,  105,
 /*  1640 */   106,  107,  108,  109,  110,  111,  112,  128,  128,   85,
 /*  1650 */   116,  117,  128,   89,  128,   91,  128,   93,  128,   95,
 /*  1660 */    96,  128,   98,   99,  100,  101,  102,  103,  104,  105,
 /*  1670 */   106,  107,  108,  109,  110,  111,  112,  128,  128,   85,
 /*  1680 */   116,  117,  128,   89,  128,   91,  128,   93,  128,   95,
 /*  1690 */    96,  128,   98,   99,  100,  101,  102,  103,  104,  105,
 /*  1700 */   106,  107,  108,  109,  110,  111,  112,  128,  128,   85,
 /*  1710 */   116,  117,  128,   89,  128,   91,  128,   93,  128,   95,
 /*  1720 */    96,  128,   98,   99,  100,  101,  102,  103,  104,  105,
 /*  1730 */   106,  107,  108,  109,  110,  111,  112,  128,  128,   85,
 /*  1740 */   116,  117,  128,   89,  128,   91,  128,   93,  128,   95,
 /*  1750 */    96,  128,   98,   99,  100,  101,  102,  103,  104,  105,
 /*  1760 */   106,  107,  108,  109,  110,  111,  112,    6,  128,    8,
 /*  1770 */   116,  117,  128,   89,   13,   91,  128,   93,  128,   95,
 /*  1780 */    96,   20,   98,   99,  100,  101,  102,  103,  104,  105,
 /*  1790 */   106,  107,  108,  109,  110,  111,  112,  113,  128,  128,
 /*  1800 */   116,  117,    6,  128,    8,  128,   10,  128,   12,   13,
 /*  1810 */    14,  128,   16,   17,  128,  128,   20,   56,   22,   23,
 /*  1820 */    24,   25,   26,   27,   28,   29,   30,   31,   87,  128,
 /*  1830 */    89,  128,   91,  128,   93,   14,   95,   96,  128,  128,
 /*  1840 */   128,   15,   16,  128,    8,   19,  128,  128,  128,   13,
 /*  1850 */    54,   55,   56,   32,   33,   34,   20,    6,  128,    8,
 /*  1860 */     9,   10,  128,   12,   13,   14,  128,   16,  128,  128,
 /*  1870 */   128,   20,  128,   22,   23,   24,   25,   26,   27,   28,
 /*  1880 */    29,   30,   31,   57,   58,   59,   60,   61,   62,   63,
 /*  1890 */    64,   65,   66,   67,   68,  128,    6,    6,    8,    8,
 /*  1900 */    10,  128,   76,   13,   13,   54,   55,   56,  128,  128,
 /*  1910 */    20,   20,    6,  128,    8,  128,   10,  128,   12,   13,
 /*  1920 */    14,  128,   16,   17,  128,  128,   20,  128,   22,   23,
 /*  1930 */    24,   25,   26,   27,   28,   29,   30,   31,  128,  128,
 /*  1940 */   128,   89,  128,   91,  128,   93,   56,   95,   96,  128,
 /*  1950 */   128,   99,  100,  101,  102,  103,  104,  105,  106,  107,
 /*  1960 */    54,   55,   56,   89,  128,   91,  128,   93,  128,   95,
 /*  1970 */    96,  128,   98,   99,  100,  101,  102,  103,  104,  105,
 /*  1980 */   106,  107,  108,  109,  110,  111,  112,  128,    6,  115,
 /*  1990 */     8,  128,   10,  119,   12,   13,   14,  128,   16,  128,
 /*  2000 */   128,  128,   20,   21,   22,   23,   24,   25,   26,   27,
 /*  2010 */    28,   29,   30,   31,  128,  128,   89,  128,   91,  128,
 /*  2020 */    93,  128,   95,   96,  128,  128,   99,  100,  101,  102,
 /*  2030 */   103,  104,  105,  106,  107,  128,   54,   55,   56,  128,
 /*  2040 */   128,  128,  128,    6,  128,    8,  128,   10,  128,   12,
 /*  2050 */    13,   14,  128,   16,  128,   18,  128,   20,  128,   22,
 /*  2060 */    23,   24,   25,   26,   27,   28,   29,   30,   31,   89,
 /*  2070 */   128,   91,  128,   93,  128,   95,   96,  128,  128,   99,
 /*  2080 */   100,  101,  102,  103,  104,  105,  106,  107,  128,  128,
 /*  2090 */   128,   54,   55,   56,  128,  128,  128,  128,    6,  128,
 /*  2100 */     8,  128,   10,  128,   12,   13,   14,  128,   16,  128,
 /*  2110 */    18,  128,   20,  128,   22,   23,   24,   25,   26,   27,
 /*  2120 */    28,   29,   30,   31,   89,  128,   91,  128,   93,  128,
 /*  2130 */    95,   96,  128,  128,   99,  100,  101,  102,  103,  104,
 /*  2140 */   105,  106,  107,  128,  128,  128,   54,   55,   56,  128,
 /*  2150 */   128,  128,  128,    6,  128,    8,  128,   10,  128,   12,
 /*  2160 */    13,   14,  128,   16,  128,  128,  128,   20,  128,   22,
 /*  2170 */    23,   24,   25,   26,   27,   28,   29,   30,   31,  128,
 /*  2180 */   128,  128,   89,  128,   91,  128,   93,  128,   95,   96,
 /*  2190 */   128,  128,   99,  100,  101,  102,  103,  104,  105,  106,
 /*  2200 */   107,   54,   55,   56,  128,  128,  128,  128,    6,  128,
 /*  2210 */     8,  128,   10,   11,   12,   13,   14,  128,   16,  128,
 /*  2220 */   128,  128,   20,  128,   22,   23,   24,   25,   26,   27,
 /*  2230 */    28,   29,   30,   31,  128,  128,  128,  128,   89,  128,
 /*  2240 */    91,  128,   93,  128,   95,   96,  128,   15,   99,  100,
 /*  2250 */   101,   19,   11,   12,  128,   14,   54,   55,   17,   18,
 /*  2260 */   128,  128,  128,    6,  128,    8,  128,   10,  128,   12,
 /*  2270 */    13,   14,  128,   16,  128,  128,  128,   20,  128,   22,
 /*  2280 */    23,   24,   25,   26,   27,   28,   29,   30,   31,   57,
 /*  2290 */    58,   59,   60,   61,   62,   63,   64,   65,   66,   67,
 /*  2300 */    68,   87,   15,   89,  128,   91,   19,   93,  128,   95,
 /*  2310 */    96,   54,   55,   56,  128,  128,  128,  128,    6,  128,
 /*  2320 */     8,  128,   10,  128,   12,   13,   14,  128,   16,   17,
 /*  2330 */   128,  128,   20,  128,   22,   23,   24,   25,   26,   27,
 /*  2340 */    28,   29,   30,   31,   57,   58,   59,   60,   61,   62,
 /*  2350 */    63,   64,   65,   66,   67,   68,  128,   89,  128,   91,
 /*  2360 */   128,   93,  128,   95,   96,  128,   54,   55,  128,  128,
 /*  2370 */   128,  128,  128,    6,  128,    8,  128,   10,  128,   12,
 /*  2380 */    13,   14,  128,   16,  128,  128,  128,   20,   21,   22,
 /*  2390 */    23,   24,   25,   26,   27,   28,   29,   30,   31,  128,
 /*  2400 */   128,  128,   89,  128,   91,  128,   93,  128,   95,   96,
 /*  2410 */   128,  128,   99,  100,  101,  102,  103,  104,  105,  106,
 /*  2420 */   107,   54,   55,  128,   89,  128,   91,  128,   93,  128,
 /*  2430 */    95,   96,  128,   98,   99,  100,  101,  102,  103,  104,
 /*  2440 */   105,  106,  107,  108,  109,  110,  111,  112,  128,   11,
 /*  2450 */    12,  116,   14,  128,  128,   17,   18,   89,  128,   91,
 /*  2460 */   128,   93,  128,   95,   96,  128,   98,   99,  100,  101,
 /*  2470 */   102,  103,  104,  105,  106,  107,  108,  109,  110,  111,
 /*  2480 */   112,  128,    6,  128,    8,  117,   10,  128,   12,   13,
 /*  2490 */    14,  128,   16,  128,  128,  128,   20,   21,   22,   23,
 /*  2500 */    24,   25,   26,   27,   28,   29,   30,   31,   89,  128,
 /*  2510 */    91,  128,   93,  128,   95,   96,  128,  128,   99,  100,
 /*  2520 */   101,  102,  103,  104,  105,  106,  107,  128,  128,  128,
 /*  2530 */    54,   55,  128,  128,  128,  128,  128,    6,  128,    8,
 /*  2540 */   128,   10,  128,   12,   13,   14,  128,   16,  128,  128,
 /*  2550 */   128,   20,   21,   22,   23,   24,   25,   26,   27,   28,
 /*  2560 */    29,   30,   31,   89,  128,   91,  128,   93,  128,   95,
 /*  2570 */    96,  128,  128,   99,  100,  101,  102,  103,  104,  105,
 /*  2580 */   106,  107,  128,  128,  128,   54,   55,   89,  128,   91,
 /*  2590 */   128,   93,  128,   95,   96,  128,   98,   99,  100,  101,
 /*  2600 */   102,  103,  104,  105,  106,  107,  108,  109,  110,  111,
 /*  2610 */   112,  128,    6,  128,    8,  117,   10,  128,   12,   13,
 /*  2620 */    14,  128,   16,  128,  128,  128,   20,   21,   22,   23,
 /*  2630 */    24,   25,   26,   27,   28,   29,   30,   31,  128,  128,
 /*  2640 */   128,   89,  128,   91,  128,   93,  128,   95,   96,  128,
 /*  2650 */   128,   99,  100,  101,  102,  103,  104,  105,  106,  128,
 /*  2660 */    54,   55,  128,   89,  128,   91,  128,   93,  128,   95,
 /*  2670 */    96,  128,  128,   99,  128,   89,  128,   91,  128,   93,
 /*  2680 */   128,   95,   96,  128,   98,   99,  100,  101,  102,  103,
 /*  2690 */   104,  105,  106,  107,  108,  109,  110,  111,  112,  128,
 /*  2700 */    89,  128,   91,  117,   93,  128,   95,   96,  128,   98,
 /*  2710 */    99,  100,  101,  102,  103,  104,  105,  106,  107,  108,
 /*  2720 */   109,  110,  111,  112,    6,  128,    8,  128,   10,  128,
 /*  2730 */    12,   13,   14,  128,   16,  128,  128,  128,   20,  128,
 /*  2740 */    22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
 /*  2750 */    89,  128,   91,  128,   93,  128,   95,   96,  128,  128,
 /*  2760 */    99,  100,  101,  102,  103,  104,  105,  128,  128,  128,
 /*  2770 */   128,  128,   54,   55,   89,  128,   91,  128,   93,  128,
 /*  2780 */    95,   96,  128,   98,   99,  100,  101,  102,  103,  104,
 /*  2790 */   105,  106,  107,  108,  109,  110,  111,  112,  128,   89,
 /*  2800 */   128,   91,  128,   93,  128,   95,   96,  128,   98,   99,
 /*  2810 */   100,  101,  102,  103,  104,  105,  106,  107,  108,  109,
 /*  2820 */   110,  111,  112,  128,   89,  128,   91,  128,   93,  128,
 /*  2830 */    95,   96,  128,   98,   99,  100,  101,  102,  103,  104,
 /*  2840 */   105,  106,  107,  108,  109,  110,  111,  112,  128,  128,
 /*  2850 */    89,  128,   91,  128,   93,  128,   95,   96,  128,  128,
 /*  2860 */   128,  128,   89,  128,   91,  128,   93,  128,   95,   96,
 /*  2870 */   128,   98,   99,  100,  101,  102,  103,  104,  105,  106,
 /*  2880 */   107,  108,  109,  110,  111,  112,   89,  128,   91,  128,
 /*  2890 */    93,  128,   95,   96,  128,   98,   99,  100,  101,  102,
 /*  2900 */   103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
 /*  2910 */    89,  128,   91,  128,   93,  128,   95,   96,  128,   98,
 /*  2920 */    99,  100,  101,  102,  103,  104,  105,  106,  107,  108,
 /*  2930 */   109,  110,  111,  112,   89,  128,   91,  128,   93,  128,
 /*  2940 */    95,   96,  128,   98,   99,  100,  101,  102,  103,  104,
 /*  2950 */   105,  106,  107,  108,  109,  110,  111,  112,   89,  128,
 /*  2960 */    91,  128,   93,  128,   95,   96,  128,   98,   99,  100,
 /*  2970 */   101,  102,  103,  104,  105,  106,  107,  108,  109,  110,
 /*  2980 */   111,  112,   89,  128,   91,  128,   93,  128,   95,   96,
 /*  2990 */   128,   98,   99,  100,  101,  102,  103,  104,  105,  106,
 /*  3000 */   107,  108,  109,  110,  111,  112,   89,  128,   91,  128,
 /*  3010 */    93,  128,   95,   96,  128,   98,   99,  100,  101,  102,
 /*  3020 */   103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
 /*  3030 */    89,  128,   91,  128,   93,  128,   95,   96,  128,   98,
 /*  3040 */    99,  100,  101,  102,  103,  104,  105,  106,  107,  108,
 /*  3050 */   109,  110,  111,  112,   89,  128,   91,  128,   93,  128,
 /*  3060 */    95,   96,  128,   98,   99,  100,  101,  102,  103,  104,
 /*  3070 */   105,  106,  107,  108,  109,  110,  111,  112,   89,  128,
 /*  3080 */    91,  128,   93,  128,   95,   96,  128,   98,   99,  100,
 /*  3090 */   101,  102,  103,  104,  105,  106,  107,  108,  109,  110,
 /*  3100 */   111,  112,   89,  128,   91,  128,   93,  128,   95,   96,
 /*  3110 */   128,   98,   99,  100,  101,  102,  103,  104,  105,  106,
 /*  3120 */   107,  108,  109,  110,  111,  112,   89,  128,   91,  128,
 /*  3130 */    93,  128,   95,   96,  128,   98,   99,  100,  101,  102,
 /*  3140 */   103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
 /*  3150 */    89,  128,   91,  128,   93,  128,   95,   96,  128,   98,
 /*  3160 */    99,  100,  101,  102,  103,  104,  105,  106,  107,  108,
 /*  3170 */   109,  110,  111,  112,   89,  128,   91,  128,   93,  128,
 /*  3180 */    95,   96,  128,   98,   99,  100,  101,  102,  103,  104,
 /*  3190 */   105,  106,  107,  108,  109,  110,  111,  112,   89,  128,
 /*  3200 */    91,  128,   93,  128,   95,   96,  128,   98,   99,  100,
 /*  3210 */   101,  102,  103,  104,  105,  106,  107,  108,  109,  110,
 /*  3220 */   111,  112,   89,  128,   91,  128,   93,  128,   95,   96,
 /*  3230 */   128,   98,   99,  100,  101,  102,  103,  104,  105,  106,
 /*  3240 */   107,  108,  109,  110,  111,  112,   89,  128,   91,  128,
 /*  3250 */    93,  128,   95,   96,  128,   98,   99,  100,  101,  102,
 /*  3260 */   103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
 /*  3270 */     6,  128,    8,   89,  128,   91,   12,   93,   14,   95,
 /*  3280 */    96,  128,  128,   99,  100,  101,   22,   23,   24,   25,
 /*  3290 */    26,   27,   28,   29,   30,   31,  128,   89,  128,   91,
 /*  3300 */   128,   93,  128,   95,   96,  128,  128,   99,  100,  101,
 /*  3310 */   102,  103,  104,  128,   89,  128,   91,  128,   93,  128,
 /*  3320 */    95,   96,  128,  128,   99,  100,  101,  102,  103,   89,
 /*  3330 */   128,   91,  128,   93,  128,   95,   96,  128,  128,   99,
 /*  3340 */   100,  101,  102,  103,  128,   89,  128,   91,  128,   93,
 /*  3350 */   128,   95,   96,  128,  128,   99,  100,  101,  102,  103,
 /*  3360 */    89,  128,   91,  128,   93,  128,   95,   96,  128,  128,
 /*  3370 */    99,  100,  101,  102,  128,  128,   89,  128,   91,  128,
 /*  3380 */    93,  128,   95,   96,  128,  128,   99,  100,  101,  102,
 /*  3390 */   128,   89,  128,   91,  128,   93,  128,   95,   96,  128,
 /*  3400 */   128,   99,  100,  101,   89,  128,   91,  128,   93,  128,
 /*  3410 */    95,   96,  128,  128,   99,  100,  101,   89,  128,   91,
 /*  3420 */   128,   93,  128,   95,   96,
};
#define YY_SHIFT_USE_DFLT (-53)
#define YY_SHIFT_MAX 261
static const short yy_shift_ofst[] = {
 /*     0 */   161,   80,  241,    0,  321,  321,  321,  321,  321,  321,
 /*    10 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*    20 */  1796, 1796, 1796, 1796, 1796, 1906, 2147, 2147, 2257, 2257,
 /*    30 */  2147, 2147, 2037, 1851, 2092, 1982, 2147, 2147, 2147, 2147,
 /*    40 */  2202, 2147, 2147, 2147, 2718, 2312, 2367, 2476, 2531, 2606,
 /*    50 */  2718, 2718, 2718, 2718, 2718, 2718, 2718, 2718, 2718, 2718,
 /*    60 */  2718, 2718, 2718, 2718, 2718, 2718, 2718, 2718, 2718, 2718,
 /*    70 */  3264, 3264, 3264, 3264, 3264, 3264, 3264, 3264, 3264, 3264,
 /*    80 */  3264, 3264, 3264, 3264, 3264, 3264, 3264, 3264, 3264, 3264,
 /*    90 */  3264, 3264, 3264, 3264, 3264,  427,  427,  427,  427,  427,
 /*   100 */   427,  582,  582, 2241,   29,   29,   29, 2438,   29, 1890,
 /*   110 */   534,  132,  553,    3,    3,    3,    3, 1826, 2287, 2232,
 /*   120 */  1761,  286,  366, 1891,  569, 1142, 1358,  779, 1358, 1836,
 /*   130 */   206,  488,  658,  779,  499,  128,  107,  530,  162,  504,
 /*   140 */   203,    3,  227,  235,  235,  235,  227,  235,    3,   17,
 /*   150 */    17, 1821,  476, 1821, 1821,  369,  303, 1021,  343,  262,
 /*   160 */   900,  182,  101,  303,  417,   87,  208,  448,  446,  417,
 /*   170 */   417,  185,  417,  364,  347,  374,  380,  375,  430,  439,
 /*   180 */   480,  492,  524,  565,  557,  374,  586,  604,  595,  263,
 /*   190 */   610,  612,  616,  263,  628,  622,  637,  643,  641,  617,
 /*   200 */   644,  263,  662,  676,  689,  691,  263,  263,  698,  655,
 /*   210 */   703,  716,  -52,  707,  263,  701,  700,  630,  699,  683,
 /*   220 */   688,  670,  660,  630,  263,  617,  258,  647,  635,  263,
 /*   230 */   614,  263,  611,  601,  598,  609,  603,  263,  588,  564,
 /*   240 */   520,  539,  514,  403,  461,  433,  254,  393,  379,  358,
 /*   250 */   336,  315,  323,  322,  305,  261,  258,  291,  263,  293,
 /*   260 */   254,  225,
};
#define YY_REDUCE_USE_DFLT (-86)
#define YY_REDUCE_MAX 148
static const short yy_reduce_ofst[] = {
 /*     0 */   320,  376,  416,  416,  863,  782,  702,  661,  742,  903,
 /*    10 */   823,  500,  621,  460,  540,  944,  984, 1065,  581, 1024,
 /*    20 */  1192, 1252, 1132, 1222, 1162, 1102, 1318, 1444, 1410, 1284,
 /*    30 */  1348, 1378, 1594, 1624, 1654, 1684, 1504, 1474, 1534, 1564,
 /*    40 */  1874, 2586, 2498, 2368, 2335, 2685, 2710, 2735, 2773, 2797,
 /*    50 */  2821, 2845, 2869, 2893, 2917, 2941, 2797, 2611, 2965, 2989,
 /*    60 */  3013, 3037, 3061, 2773, 2735, 3085, 3109, 3133, 2710, 3157,
 /*    70 */   -57,   23,  104, 2419, 2313,  264, 2474,  184, 1927, 1852,
 /*    80 */  2093, 2035, 1980, 2552, 2661, 3208, 3240, 3256, 3225, 3287,
 /*    90 */  3271, 3315, 2149, 3184, 3302, 2574,  129,  209,  289,   48,
 /*   100 */   365, 1741, 2214,  316, 3328, 2761, 2268,  440, 1402,  -65,
 /*   110 */   -82,  -82,  -42,   76,  156,  -80,  236,  -85,  -85,  -78,
 /*   120 */   -27,  -16,  -27,  -16,  -10,   -2,   -2,    5,   11,  -16,
 /*   130 */     5,   34,  -27,   49,   43,   70,   90,   -2,   90,   95,
 /*   140 */   135,  140,   95,  166,  172,  176,  175,  176,  189,
};
static const YYACTIONTYPE yy_default[] = {
 /*     0 */   625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
 /*    10 */   625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
 /*    20 */   625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
 /*    30 */   625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
 /*    40 */   625,  625,  625,  570,  625,  625,  625,  625,  625,  625,
 /*    50 */   625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
 /*    60 */   625,  625,  625,  625,  625,  625,  575,  625,  625,  625,
 /*    70 */   625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
 /*    80 */   625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
 /*    90 */   625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
 /*   100 */   625,  625,  625,  625,  625,  625,  625,  625,  625,  468,
 /*   110 */   466,  625,  625,  625,  625,  625,  625,  550,  550,  579,
 /*   120 */   469,  468,  469,  468,  625,  466,  466,  467,  625,  625,
 /*   130 */   467,  625,  625,  625,  610,  625,  470,  625,  625,  625,
 /*   140 */   625,  625,  625,  625,  625,  625,  625,  585,  625,  517,
 /*   150 */   518,  493,  625,  495,  494,  625,  500,  526,  625,  625,
 /*   160 */   525,  625,  625,  501,  497,  625,  625,  625,  478,  499,
 /*   170 */   498,  625,  496,  523,  625,  428,  471,  625,  625,  625,
 /*   180 */   625,  625,  625,  625,  625,  429,  625,  625,  625,  510,
 /*   190 */   625,  569,  625,  506,  625,  625,  625,  567,  625,  521,
 /*   200 */   625,  516,  625,  625,  625,  625,  509,  512,  590,  625,
 /*   210 */   625,  625,  470,  625,  508,  625,  625,  503,  625,  625,
 /*   220 */   625,  625,  574,  502,  513,  522,  519,  625,  625,  507,
 /*   230 */   625,  514,  625,  625,  625,  625,  625,  515,  625,  625,
 /*   240 */   625,  625,  625,  625,  625,  625,  504,  625,  625,  550,
 /*   250 */   625,  625,  625,  586,  625,  625,  520,  625,  511,  625,
 /*   260 */   505,  625,  609,  458,  612,  449,  613,  455,  454,  614,
 /*   270 */   448,  615,  616,  618,  430,  611,  617,  427,  598,  426,
 /*   280 */   420,  599,  419,  600,  425,  422,  421,  601,  608,  447,
 /*   290 */   524,  622,  623,  461,  423,  424,  431,  432,  433,  434,
 /*   300 */   440,  439,  435,  436,  624,  465,  531,  532,  533,  534,
 /*   310 */   540,  576,  554,  555,  556,  557,  558,  559,  560,  561,
 /*   320 */   562,  563,  564,  565,  566,  535,  536,  537,  572,  573,
 /*   330 */   577,  580,  538,  539,  551,  549,  582,  578,  581,  548,
 /*   340 */   437,  438,  492,  619,  441,  442,  444,  443,  446,  445,
 /*   350 */   529,  530,  547,  544,  542,  527,  528,  491,  571,  568,
 /*   360 */   620,  490,  621,  489,  546,  543,  541,  451,  488,  553,
 /*   370 */   552,  464,  460,  471,  456,  470,  453,  452,  487,  545,
 /*   380 */   486,  485,  583,  484,  483,  584,  482,  587,  588,  481,
 /*   390 */   480,  589,  479,  477,  591,  476,  592,  475,  593,  594,
 /*   400 */   474,  473,  595,  472,  457,  596,  463,  462,  597,  602,
 /*   410 */   603,  604,  605,  450,  606,  607,  459,
};
#define YY_SZ_ACTTAB (int)(sizeof(yy_action)/sizeof(yy_action[0]))

/* The next table maps tokens into fallback tokens.  If a construct
** like the following:
** 
**      %fallback ID X Y Z.
**
** appears in the grammar, then ID becomes a fallback token for X, Y,
** and Z.  Whenever one of the tokens X, Y, or Z is input to the parser
** but it does not parse, the type of the token is changed to ID and
** the parse is retried before an error is thrown.
*/
#ifdef YYFALLBACK
static const YYCODETYPE yyFallback[] = {
};
#endif /* YYFALLBACK */

/* The following structure represents a single element of the
** parser's stack.  Information stored includes:
**
**   +  The state number for the parser at this level of the stack.
**
**   +  The value of the token stored at this level of the stack.
**      (In other words, the "major" token.)
**
**   +  The semantic value stored at this level of the stack.  This is
**      the information used by the action routines in the grammar.
**      It is sometimes called the "minor" token.
*/
struct yyStackEntry {
  YYACTIONTYPE stateno;  /* The state-number */
  YYCODETYPE major;      /* The major token value.  This is the code
                         ** number for the token at this stack level */
  YYMINORTYPE minor;     /* The user-supplied minor token value.  This
                         ** is the value of the token  */
};
typedef struct yyStackEntry yyStackEntry;

/* The state of the parser is completely contained in an instance of
** the following structure */
struct yyParser {
  int yyidx;                    /* Index of top element in stack */
#ifdef YYTRACKMAXSTACKDEPTH
  int yyidxMax;                 /* Maximum value of yyidx */
#endif
  int yyerrcnt;                 /* Shifts left before out of the error */
  XecParseARG_SDECL                /* A place to hold %extra_argument */
#if YYSTACKDEPTH<=0
  int yystksz;                  /* Current side of the stack */
  yyStackEntry *yystack;        /* The parser's stack */
#else
  yyStackEntry yystack[YYSTACKDEPTH];  /* The parser's stack */
#endif
};
typedef struct yyParser yyParser;

#ifndef NDEBUG
#include <stdio.h>
static FILE *yyTraceFILE = 0;
static char *yyTracePrompt = 0;
#endif /* NDEBUG */

#ifndef NDEBUG
/* 
** Turn parser tracing on by giving a stream to which to write the trace
** and a prompt to preface each trace message.  Tracing is turned off
** by making either argument NULL 
**
** Inputs:
** <ul>
** <li> A FILE* to which trace output should be written.
**      If NULL, then tracing is turned off.
** <li> A prefix string written at the beginning of every
**      line of trace output.  If NULL, then tracing is
**      turned off.
** </ul>
**
** Outputs:
** None.
*/
void XecParseTrace(FILE *TraceFILE, char *zTracePrompt){
  yyTraceFILE = TraceFILE;
  yyTracePrompt = zTracePrompt;
  if( yyTraceFILE==0 ) yyTracePrompt = 0;
  else if( yyTracePrompt==0 ) yyTraceFILE = 0;
}
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing shifts, the names of all terminals and nonterminals
** are required.  The following table supplies these names */
static const char *const yyTokenName[] = { 
  "$",             "IF",            "ELSE",          "TRY",         
  "CATCH",         "FINALLY",       "YIELD",         "USING",       
  "LPN",           "RPN",           "LBR",           "RBR",         
  "IDENTIFIER",    "PERIOD",        "TILDE",         "COMMA",       
  "COLON",         "VAR",           "SEMICOLON",     "ASSIGN",      
  "LSQ",           "RSQ",           "NUMBER",        "STRING",      
  "TRUE",          "FALSE",         "NULL",          "INCREMENT",   
  "DECREMENT",     "PLUS",          "MINUS",         "XMARK",       
  "ASTERISK",      "SOLIDUS",       "PERCENT",       "LSHIFT",      
  "RSHIFT",        "URSHIFT",       "AMPERSAND",     "CARET",       
  "VBAR",          "EQUAL",         "NOTEQUAL",      "LESS",        
  "GREATER",       "LESSEQUAL",     "GREATEREQUAL",  "IN",          
  "NOTIN",         "IS",            "NOTIS",         "LOGICAND",    
  "LOGICXOR",      "LOGICOR",       "QMARK",         "NEW",         
  "ELLIPSIS",      "MULASSIGN",     "DIVASSIGN",     "MODASSIGN",   
  "INTDIVASSIGN",  "ADDASSIGN",     "SUBASSIGN",     "LSHIFTASSIGN",
  "RSHIFTASSIGN",  "URSHIFTASSIGN",  "BITANDASSIGN",  "BITXORASSIGN",
  "BITORASSIGN",   "DELETE",        "SWITCH",        "CASE",        
  "DEFAULT",       "WHILE",         "DO",            "FOR",         
  "EACHKEY",       "CONTINUE",      "BREAK",         "RETURN",      
  "THROW",         "error",         "script",        "stmt_list",   
  "expr_paren",    "expr_list",     "stmt_brace",    "odecl_brace", 
  "odecl_list",    "name",          "name_list",     "proto",       
  "decl",          "expr_simple",   "odecl",         "expr_call",   
  "expr_postfix",  "expr_assign",   "expr_value",    "expr_basic",  
  "expr_suffix",   "expr_unary",    "expr_mul",      "expr_add",    
  "expr_shift",    "expr_bitand",   "expr_bitxor",   "expr_bitor",  
  "expr_compare",  "expr_and",      "expr_xor",      "expr_or",     
  "expr_nolbr",    "value_list",    "sexpr_assign",  "keyval_list", 
  "expr_lbody",    "expr_final",    "assign_op",     "keyval_lbody",
  "sexpr_lbody",   "sexpr_list",    "condition",     "stmt_yield",  
  "stmt_using",    "stmt",          "catch_list",    "catch",       
};
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing reduce actions, the names of all rules are required.
*/
static const char *const yyRuleName[] = {
 /*   0 */ "script ::=",
 /*   1 */ "script ::= stmt_list",
 /*   2 */ "expr_paren ::= LPN RPN",
 /*   3 */ "expr_paren ::= LPN expr_list RPN",
 /*   4 */ "stmt_brace ::= LBR RBR",
 /*   5 */ "stmt_brace ::= LBR stmt_list RBR",
 /*   6 */ "odecl_brace ::= LBR RBR",
 /*   7 */ "odecl_brace ::= LBR odecl_list RBR",
 /*   8 */ "name ::= IDENTIFIER",
 /*   9 */ "name ::= name PERIOD IDENTIFIER",
 /*  10 */ "name ::= name PERIOD TILDE IDENTIFIER",
 /*  11 */ "name_list ::= name",
 /*  12 */ "name_list ::= name_list COMMA name",
 /*  13 */ "proto ::= name expr_paren",
 /*  14 */ "decl ::= name odecl_brace",
 /*  15 */ "decl ::= name COLON expr_simple odecl_brace",
 /*  16 */ "decl ::= proto stmt_brace",
 /*  17 */ "decl ::= proto YIELD stmt_brace",
 /*  18 */ "decl ::= VAR name_list SEMICOLON",
 /*  19 */ "decl ::= VAR name_list ASSIGN expr_list SEMICOLON",
 /*  20 */ "odecl ::= SEMICOLON",
 /*  21 */ "odecl ::= decl",
 /*  22 */ "odecl ::= proto SEMICOLON",
 /*  23 */ "odecl ::= proto YIELD SEMICOLON",
 /*  24 */ "odecl ::= TILDE proto stmt_brace",
 /*  25 */ "odecl ::= TILDE proto YIELD stmt_brace",
 /*  26 */ "odecl ::= TILDE proto SEMICOLON",
 /*  27 */ "odecl ::= TILDE proto YIELD SEMICOLON",
 /*  28 */ "odecl_list ::= odecl",
 /*  29 */ "odecl_list ::= odecl_list odecl",
 /*  30 */ "expr_call ::= YIELD expr_paren",
 /*  31 */ "expr_call ::= proto expr_paren",
 /*  32 */ "expr_call ::= expr_call expr_paren",
 /*  33 */ "expr_call ::= expr_postfix expr_paren",
 /*  34 */ "expr_postfix ::= LPN expr_assign RPN",
 /*  35 */ "expr_postfix ::= name PERIOD LSQ expr_value RSQ",
 /*  36 */ "expr_postfix ::= name LSQ expr_value RSQ",
 /*  37 */ "expr_postfix ::= proto PERIOD IDENTIFIER",
 /*  38 */ "expr_postfix ::= proto PERIOD TILDE IDENTIFIER",
 /*  39 */ "expr_postfix ::= proto PERIOD LSQ expr_value RSQ",
 /*  40 */ "expr_postfix ::= proto LSQ expr_value RSQ",
 /*  41 */ "expr_postfix ::= expr_call PERIOD IDENTIFIER",
 /*  42 */ "expr_postfix ::= expr_call PERIOD TILDE IDENTIFIER",
 /*  43 */ "expr_postfix ::= expr_call PERIOD LSQ expr_value RSQ",
 /*  44 */ "expr_postfix ::= expr_call LSQ expr_value RSQ",
 /*  45 */ "expr_postfix ::= expr_postfix PERIOD IDENTIFIER",
 /*  46 */ "expr_postfix ::= expr_postfix PERIOD TILDE IDENTIFIER",
 /*  47 */ "expr_postfix ::= expr_postfix PERIOD LSQ expr_value RSQ",
 /*  48 */ "expr_postfix ::= expr_postfix LSQ expr_value RSQ",
 /*  49 */ "expr_simple ::= name",
 /*  50 */ "expr_simple ::= expr_postfix",
 /*  51 */ "expr_simple ::= proto",
 /*  52 */ "expr_simple ::= expr_call",
 /*  53 */ "expr_simple ::= proto YIELD",
 /*  54 */ "expr_simple ::= expr_call YIELD",
 /*  55 */ "expr_basic ::= expr_simple",
 /*  56 */ "expr_basic ::= NUMBER",
 /*  57 */ "expr_basic ::= STRING",
 /*  58 */ "expr_basic ::= TRUE",
 /*  59 */ "expr_basic ::= FALSE",
 /*  60 */ "expr_basic ::= NULL",
 /*  61 */ "expr_suffix ::= expr_basic",
 /*  62 */ "expr_suffix ::= expr_basic INCREMENT",
 /*  63 */ "expr_suffix ::= expr_basic DECREMENT",
 /*  64 */ "expr_unary ::= expr_suffix",
 /*  65 */ "expr_unary ::= PLUS expr_basic",
 /*  66 */ "expr_unary ::= MINUS expr_basic",
 /*  67 */ "expr_unary ::= XMARK expr_basic",
 /*  68 */ "expr_unary ::= TILDE expr_basic",
 /*  69 */ "expr_unary ::= INCREMENT expr_basic",
 /*  70 */ "expr_unary ::= DECREMENT expr_basic",
 /*  71 */ "expr_mul ::= expr_unary",
 /*  72 */ "expr_mul ::= expr_mul ASTERISK expr_unary",
 /*  73 */ "expr_mul ::= expr_mul SOLIDUS expr_unary",
 /*  74 */ "expr_mul ::= expr_mul PERCENT expr_unary",
 /*  75 */ "expr_mul ::= expr_mul TILDE expr_unary",
 /*  76 */ "expr_add ::= expr_mul",
 /*  77 */ "expr_add ::= expr_add PLUS expr_mul",
 /*  78 */ "expr_add ::= expr_add MINUS expr_mul",
 /*  79 */ "expr_shift ::= expr_add",
 /*  80 */ "expr_shift ::= expr_shift LSHIFT expr_add",
 /*  81 */ "expr_shift ::= expr_shift RSHIFT expr_add",
 /*  82 */ "expr_shift ::= expr_shift URSHIFT expr_add",
 /*  83 */ "expr_bitand ::= expr_shift",
 /*  84 */ "expr_bitand ::= expr_bitand AMPERSAND expr_shift",
 /*  85 */ "expr_bitxor ::= expr_bitand",
 /*  86 */ "expr_bitxor ::= expr_bitxor CARET expr_bitand",
 /*  87 */ "expr_bitor ::= expr_bitxor",
 /*  88 */ "expr_bitor ::= expr_bitor VBAR expr_bitxor",
 /*  89 */ "expr_compare ::= expr_bitor",
 /*  90 */ "expr_compare ::= expr_compare EQUAL expr_bitor",
 /*  91 */ "expr_compare ::= expr_compare NOTEQUAL expr_bitor",
 /*  92 */ "expr_compare ::= expr_compare LESS expr_bitor",
 /*  93 */ "expr_compare ::= expr_compare GREATER expr_bitor",
 /*  94 */ "expr_compare ::= expr_compare LESSEQUAL expr_bitor",
 /*  95 */ "expr_compare ::= expr_compare GREATEREQUAL expr_bitor",
 /*  96 */ "expr_compare ::= expr_compare IN expr_bitor",
 /*  97 */ "expr_compare ::= expr_compare NOTIN expr_bitor",
 /*  98 */ "expr_compare ::= expr_compare IS expr_bitor",
 /*  99 */ "expr_compare ::= expr_compare NOTIS expr_bitor",
 /* 100 */ "expr_and ::= expr_compare",
 /* 101 */ "expr_and ::= expr_and LOGICAND expr_compare",
 /* 102 */ "expr_xor ::= expr_and",
 /* 103 */ "expr_xor ::= expr_xor LOGICXOR expr_and",
 /* 104 */ "expr_or ::= expr_xor",
 /* 105 */ "expr_or ::= expr_or LOGICOR expr_xor",
 /* 106 */ "expr_nolbr ::= expr_or",
 /* 107 */ "expr_nolbr ::= expr_or QMARK expr_value COLON expr_value",
 /* 108 */ "expr_nolbr ::= NEW name expr_paren",
 /* 109 */ "expr_nolbr ::= NEW expr_postfix expr_paren",
 /* 110 */ "expr_nolbr ::= LSQ RSQ",
 /* 111 */ "expr_nolbr ::= LSQ value_list RSQ",
 /* 112 */ "expr_nolbr ::= COLON odecl_brace",
 /* 113 */ "expr_nolbr ::= COLON expr_simple odecl_brace",
 /* 114 */ "expr_nolbr ::= QMARK expr_paren sexpr_assign SEMICOLON",
 /* 115 */ "expr_nolbr ::= QMARK expr_paren stmt_brace",
 /* 116 */ "expr_nolbr ::= PERIOD QMARK expr_paren sexpr_assign SEMICOLON",
 /* 117 */ "expr_nolbr ::= PERIOD QMARK expr_paren stmt_brace",
 /* 118 */ "expr_value ::= expr_nolbr",
 /* 119 */ "expr_value ::= LBR RBR",
 /* 120 */ "expr_value ::= LBR keyval_list RBR",
 /* 121 */ "expr_lbody ::= expr_value",
 /* 122 */ "expr_lbody ::= expr_lbody COMMA expr_value",
 /* 123 */ "expr_final ::= ELLIPSIS",
 /* 124 */ "expr_final ::= proto ELLIPSIS",
 /* 125 */ "expr_final ::= expr_call ELLIPSIS",
 /* 126 */ "expr_final ::= proto YIELD ELLIPSIS",
 /* 127 */ "expr_final ::= expr_call YIELD ELLIPSIS",
 /* 128 */ "expr_final ::= name LSQ RSQ ELLIPSIS",
 /* 129 */ "expr_final ::= proto LSQ RSQ ELLIPSIS",
 /* 130 */ "expr_final ::= expr_call LSQ RSQ ELLIPSIS",
 /* 131 */ "expr_final ::= expr_postfix LSQ RSQ ELLIPSIS",
 /* 132 */ "expr_list ::= expr_final",
 /* 133 */ "expr_list ::= expr_lbody",
 /* 134 */ "expr_list ::= expr_lbody COMMA expr_final",
 /* 135 */ "expr_assign ::= expr_list",
 /* 136 */ "expr_assign ::= expr_lbody assign_op expr_list",
 /* 137 */ "assign_op ::= ASSIGN",
 /* 138 */ "assign_op ::= MULASSIGN",
 /* 139 */ "assign_op ::= DIVASSIGN",
 /* 140 */ "assign_op ::= MODASSIGN",
 /* 141 */ "assign_op ::= INTDIVASSIGN",
 /* 142 */ "assign_op ::= ADDASSIGN",
 /* 143 */ "assign_op ::= SUBASSIGN",
 /* 144 */ "assign_op ::= LSHIFTASSIGN",
 /* 145 */ "assign_op ::= RSHIFTASSIGN",
 /* 146 */ "assign_op ::= URSHIFTASSIGN",
 /* 147 */ "assign_op ::= BITANDASSIGN",
 /* 148 */ "assign_op ::= BITXORASSIGN",
 /* 149 */ "assign_op ::= BITORASSIGN",
 /* 150 */ "value_list ::= expr_final",
 /* 151 */ "value_list ::= expr_final COMMA",
 /* 152 */ "value_list ::= expr_lbody",
 /* 153 */ "value_list ::= expr_lbody COMMA",
 /* 154 */ "value_list ::= expr_lbody COMMA expr_final",
 /* 155 */ "keyval_lbody ::= expr_value COLON expr_value",
 /* 156 */ "keyval_lbody ::= keyval_lbody COMMA expr_value COLON expr_value",
 /* 157 */ "keyval_list ::= keyval_lbody",
 /* 158 */ "keyval_list ::= keyval_lbody COMMA",
 /* 159 */ "sexpr_lbody ::= expr_nolbr",
 /* 160 */ "sexpr_lbody ::= sexpr_lbody COMMA expr_value",
 /* 161 */ "sexpr_list ::= expr_final",
 /* 162 */ "sexpr_list ::= sexpr_lbody",
 /* 163 */ "sexpr_list ::= sexpr_lbody COMMA expr_final",
 /* 164 */ "sexpr_assign ::= sexpr_list",
 /* 165 */ "sexpr_assign ::= sexpr_lbody assign_op expr_list",
 /* 166 */ "condition ::= expr_assign",
 /* 167 */ "condition ::= VAR name_list ASSIGN expr_list",
 /* 168 */ "stmt_yield ::= YIELD",
 /* 169 */ "stmt_using ::= USING",
 /* 170 */ "stmt ::= stmt_brace",
 /* 171 */ "stmt ::= sexpr_assign SEMICOLON",
 /* 172 */ "stmt ::= DELETE expr_lbody SEMICOLON",
 /* 173 */ "stmt ::= IF LPN condition RPN stmt",
 /* 174 */ "stmt ::= IF LPN condition RPN stmt ELSE stmt",
 /* 175 */ "stmt ::= SWITCH LPN condition RPN stmt_brace",
 /* 176 */ "stmt ::= CASE expr_value COLON",
 /* 177 */ "stmt ::= DEFAULT COLON",
 /* 178 */ "stmt ::= WHILE LPN condition RPN stmt",
 /* 179 */ "stmt ::= DO stmt WHILE LPN expr_assign RPN SEMICOLON",
 /* 180 */ "stmt ::= FOR LPN expr_lbody COLON expr_value RPN stmt",
 /* 181 */ "stmt ::= FOR LPN expr_lbody EACHKEY expr_value RPN stmt",
 /* 182 */ "stmt ::= FOR LPN VAR name_list COLON expr_value RPN stmt",
 /* 183 */ "stmt ::= FOR LPN VAR name_list EACHKEY expr_value RPN stmt",
 /* 184 */ "stmt ::= FOR LPN condition SEMICOLON expr_assign SEMICOLON expr_assign RPN stmt",
 /* 185 */ "stmt ::= CONTINUE SEMICOLON",
 /* 186 */ "stmt ::= BREAK SEMICOLON",
 /* 187 */ "stmt ::= RETURN SEMICOLON",
 /* 188 */ "stmt ::= RETURN expr_list SEMICOLON",
 /* 189 */ "stmt ::= stmt_yield SEMICOLON",
 /* 190 */ "stmt ::= stmt_yield expr_list SEMICOLON",
 /* 191 */ "stmt ::= USING LPN condition RPN stmt",
 /* 192 */ "stmt ::= stmt_using condition SEMICOLON",
 /* 193 */ "stmt ::= TRY stmt catch_list",
 /* 194 */ "stmt ::= TRY stmt FINALLY stmt",
 /* 195 */ "stmt ::= TRY stmt catch_list FINALLY stmt",
 /* 196 */ "stmt ::= THROW expr_value SEMICOLON",
 /* 197 */ "catch ::= CATCH LPN COLON expr_simple RPN stmt",
 /* 198 */ "catch ::= CATCH LPN expr_value COLON expr_simple RPN stmt",
 /* 199 */ "catch ::= CATCH LPN VAR name COLON expr_simple RPN stmt",
 /* 200 */ "catch_list ::= catch",
 /* 201 */ "catch_list ::= catch_list catch",
 /* 202 */ "stmt_list ::= stmt",
 /* 203 */ "stmt_list ::= decl",
 /* 204 */ "stmt_list ::= SEMICOLON",
 /* 205 */ "stmt_list ::= stmt_list stmt",
 /* 206 */ "stmt_list ::= stmt_list decl",
 /* 207 */ "stmt_list ::= stmt_list SEMICOLON",
};
#endif /* NDEBUG */


#if YYSTACKDEPTH<=0
/*
** Try to increase the size of the parser stack.
*/
static void yyGrowStack(yyParser *p){
  int newSize;
  yyStackEntry *pNew;

  newSize = p->yystksz*2 + 100;
  pNew = realloc(p->yystack, newSize*sizeof(pNew[0]));
  if( pNew ){
    p->yystack = pNew;
    p->yystksz = newSize;
#ifndef NDEBUG
    if( yyTraceFILE ){
      fprintf(yyTraceFILE,"%sStack grows to %d entries!\n",
              yyTracePrompt, p->yystksz);
    }
#endif
  }
}
#endif

/* 
** This function allocates a new parser.
** The only argument is a pointer to a function which works like
** malloc.
**
** Inputs:
** A pointer to the function used to allocate memory.
**
** Outputs:
** A pointer to a parser.  This pointer is used in subsequent calls
** to XecParse and XecParseFree.
*/
void *XecParseAlloc(void *(*mallocProc)(size_t)){
  yyParser *pParser;
  pParser = (yyParser*)(*mallocProc)( (size_t)sizeof(yyParser) );
  if( pParser ){
    pParser->yyidx = -1;
#ifdef YYTRACKMAXSTACKDEPTH
    pParser->yyidxMax = 0;
#endif
#if YYSTACKDEPTH<=0
    pParser->yystack = NULL;
    pParser->yystksz = 0;
    yyGrowStack(pParser);
#endif
  }
  return pParser;
}

/* The following function deletes the value associated with a
** symbol.  The symbol can be either a terminal or nonterminal.
** "yymajor" is the symbol code, and "yypminor" is a pointer to
** the value.
*/
static void yy_destructor(
  yyParser *yypParser,    /* The parser */
  YYCODETYPE yymajor,     /* Type code for object to destroy */
  YYMINORTYPE *yypminor   /* The object to be destroyed */
){
  XecParseARG_FETCH;
  switch( yymajor ){
    /* Here is inserted the actions which take place when a
    ** terminal or non-terminal is destroyed.  This can happen
    ** when the symbol is popped from the stack during a
    ** reduce or during error processing or when a parser is 
    ** being destroyed before it is finished parsing.
    **
    ** Note: during a reduce, the only symbols destroyed are those
    ** which appear on the RHS of the rule, but which are not used
    ** inside the C code.
    */
      /* TERMINAL Destructor */
    case 1: /* IF */
    case 2: /* ELSE */
    case 3: /* TRY */
    case 4: /* CATCH */
    case 5: /* FINALLY */
    case 6: /* YIELD */
    case 7: /* USING */
    case 8: /* LPN */
    case 9: /* RPN */
    case 10: /* LBR */
    case 11: /* RBR */
    case 12: /* IDENTIFIER */
    case 13: /* PERIOD */
    case 14: /* TILDE */
    case 15: /* COMMA */
    case 16: /* COLON */
    case 17: /* VAR */
    case 18: /* SEMICOLON */
    case 19: /* ASSIGN */
    case 20: /* LSQ */
    case 21: /* RSQ */
    case 22: /* NUMBER */
    case 23: /* STRING */
    case 24: /* TRUE */
    case 25: /* FALSE */
    case 26: /* NULL */
    case 27: /* INCREMENT */
    case 28: /* DECREMENT */
    case 29: /* PLUS */
    case 30: /* MINUS */
    case 31: /* XMARK */
    case 32: /* ASTERISK */
    case 33: /* SOLIDUS */
    case 34: /* PERCENT */
    case 35: /* LSHIFT */
    case 36: /* RSHIFT */
    case 37: /* URSHIFT */
    case 38: /* AMPERSAND */
    case 39: /* CARET */
    case 40: /* VBAR */
    case 41: /* EQUAL */
    case 42: /* NOTEQUAL */
    case 43: /* LESS */
    case 44: /* GREATER */
    case 45: /* LESSEQUAL */
    case 46: /* GREATEREQUAL */
    case 47: /* IN */
    case 48: /* NOTIN */
    case 49: /* IS */
    case 50: /* NOTIS */
    case 51: /* LOGICAND */
    case 52: /* LOGICXOR */
    case 53: /* LOGICOR */
    case 54: /* QMARK */
    case 55: /* NEW */
    case 56: /* ELLIPSIS */
    case 57: /* MULASSIGN */
    case 58: /* DIVASSIGN */
    case 59: /* MODASSIGN */
    case 60: /* INTDIVASSIGN */
    case 61: /* ADDASSIGN */
    case 62: /* SUBASSIGN */
    case 63: /* LSHIFTASSIGN */
    case 64: /* RSHIFTASSIGN */
    case 65: /* URSHIFTASSIGN */
    case 66: /* BITANDASSIGN */
    case 67: /* BITXORASSIGN */
    case 68: /* BITORASSIGN */
    case 69: /* DELETE */
    case 70: /* SWITCH */
    case 71: /* CASE */
    case 72: /* DEFAULT */
    case 73: /* WHILE */
    case 74: /* DO */
    case 75: /* FOR */
    case 76: /* EACHKEY */
    case 77: /* CONTINUE */
    case 78: /* BREAK */
    case 79: /* RETURN */
    case 80: /* THROW */
{
#line 45 "../../toolbox/source/xec/lib/xec_parser_lemon.y"

    p->destroy( (yypminor->yy0) );

#line 1446 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
}
      break;
    default:  break;   /* If no destructor action specified: do nothing */
  }
}

/*
** Pop the parser's stack once.
**
** If there is a destructor routine associated with the token which
** is popped from the stack, then call it.
**
** Return the major token number for the symbol popped.
*/
static int yy_pop_parser_stack(yyParser *pParser){
  YYCODETYPE yymajor;
  yyStackEntry *yytos = &pParser->yystack[pParser->yyidx];

  if( pParser->yyidx<0 ) return 0;
#ifndef NDEBUG
  if( yyTraceFILE && pParser->yyidx>=0 ){
    fprintf(yyTraceFILE,"%sPopping %s\n",
      yyTracePrompt,
      yyTokenName[yytos->major]);
  }
#endif
  yymajor = yytos->major;
  yy_destructor(pParser, yymajor, &yytos->minor);
  pParser->yyidx--;
  return yymajor;
}

/* 
** Deallocate and destroy a parser.  Destructors are all called for
** all stack elements before shutting the parser down.
**
** Inputs:
** <ul>
** <li>  A pointer to the parser.  This should be a pointer
**       obtained from XecParseAlloc.
** <li>  A pointer to a function used to reclaim memory obtained
**       from malloc.
** </ul>
*/
void XecParseFree(
  void *p,                    /* The parser to be deleted */
  void (*freeProc)(void*)     /* Function used to reclaim memory */
){
  yyParser *pParser = (yyParser*)p;
  if( pParser==0 ) return;
  while( pParser->yyidx>=0 ) yy_pop_parser_stack(pParser);
#if YYSTACKDEPTH<=0
  free(pParser->yystack);
#endif
  (*freeProc)((void*)pParser);
}

/*
** Return the peak depth of the stack for a parser.
*/
#ifdef YYTRACKMAXSTACKDEPTH
int XecParseStackPeak(void *p){
  yyParser *pParser = (yyParser*)p;
  return pParser->yyidxMax;
}
#endif

/*
** Find the appropriate action for a parser given the terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
static int yy_find_shift_action(
  yyParser *pParser,        /* The parser */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
  int stateno = pParser->yystack[pParser->yyidx].stateno;
 
  if( stateno>YY_SHIFT_MAX || (i = yy_shift_ofst[stateno])==YY_SHIFT_USE_DFLT ){
    return yy_default[stateno];
  }
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
  if( i<0 || i>=YY_SZ_ACTTAB || yy_lookahead[i]!=iLookAhead ){
    if( iLookAhead>0 ){
#ifdef YYFALLBACK
      YYCODETYPE iFallback;            /* Fallback token */
      if( iLookAhead<sizeof(yyFallback)/sizeof(yyFallback[0])
             && (iFallback = yyFallback[iLookAhead])!=0 ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE, "%sFALLBACK %s => %s\n",
             yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[iFallback]);
        }
#endif
        return yy_find_shift_action(pParser, iFallback);
      }
#endif
#ifdef YYWILDCARD
      {
        int j = i - iLookAhead + YYWILDCARD;
        if( j>=0 && j<YY_SZ_ACTTAB && yy_lookahead[j]==YYWILDCARD ){
#ifndef NDEBUG
          if( yyTraceFILE ){
            fprintf(yyTraceFILE, "%sWILDCARD %s => %s\n",
               yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[YYWILDCARD]);
          }
#endif /* NDEBUG */
          return yy_action[j];
        }
      }
#endif /* YYWILDCARD */
    }
    return yy_default[stateno];
  }else{
    return yy_action[i];
  }
}

/*
** Find the appropriate action for a parser given the non-terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
static int yy_find_reduce_action(
  int stateno,              /* Current state number */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
#ifdef YYERRORSYMBOL
  if( stateno>YY_REDUCE_MAX ){
    return yy_default[stateno];
  }
#else
  assert( stateno<=YY_REDUCE_MAX );
#endif
  i = yy_reduce_ofst[stateno];
  assert( i!=YY_REDUCE_USE_DFLT );
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
#ifdef YYERRORSYMBOL
  if( i<0 || i>=YY_SZ_ACTTAB || yy_lookahead[i]!=iLookAhead ){
    return yy_default[stateno];
  }
#else
  assert( i>=0 && i<YY_SZ_ACTTAB );
  assert( yy_lookahead[i]==iLookAhead );
#endif
  return yy_action[i];
}

/*
** The following routine is called if the stack overflows.
*/
static void yyStackOverflow(yyParser *yypParser, YYMINORTYPE *yypMinor){
   XecParseARG_FETCH;
   yypParser->yyidx--;
#ifndef NDEBUG
   if( yyTraceFILE ){
     fprintf(yyTraceFILE,"%sStack Overflow!\n",yyTracePrompt);
   }
#endif
   while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
   /* Here code is inserted which will execute if the parser
   ** stack every overflows */
   XecParseARG_STORE; /* Suppress warning about unused %extra_argument var */
}

/*
** Perform a shift action.
*/
static void yy_shift(
  yyParser *yypParser,          /* The parser to be shifted */
  int yyNewState,               /* The new state to shift in */
  int yyMajor,                  /* The major token to shift in */
  YYMINORTYPE *yypMinor         /* Pointer to the minor token to shift in */
){
  yyStackEntry *yytos;
  yypParser->yyidx++;
#ifdef YYTRACKMAXSTACKDEPTH
  if( yypParser->yyidx>yypParser->yyidxMax ){
    yypParser->yyidxMax = yypParser->yyidx;
  }
#endif
#if YYSTACKDEPTH>0 
  if( yypParser->yyidx>=YYSTACKDEPTH ){
    yyStackOverflow(yypParser, yypMinor);
    return;
  }
#else
  if( yypParser->yyidx>=yypParser->yystksz ){
    yyGrowStack(yypParser);
    if( yypParser->yyidx>=yypParser->yystksz ){
      yyStackOverflow(yypParser, yypMinor);
      return;
    }
  }
#endif
  yytos = &yypParser->yystack[yypParser->yyidx];
  yytos->stateno = (YYACTIONTYPE)yyNewState;
  yytos->major = (YYCODETYPE)yyMajor;
  yytos->minor = *yypMinor;
#ifndef NDEBUG
  if( yyTraceFILE && yypParser->yyidx>0 ){
    int i;
    fprintf(yyTraceFILE,"%sShift %d\n",yyTracePrompt,yyNewState);
    fprintf(yyTraceFILE,"%sStack:",yyTracePrompt);
    for(i=1; i<=yypParser->yyidx; i++)
      fprintf(yyTraceFILE," %s",yyTokenName[yypParser->yystack[i].major]);
    fprintf(yyTraceFILE,"\n");
  }
#endif
}

/* The following table contains information about every rule that
** is used during the reduce.
*/
static const struct {
  YYCODETYPE lhs;         /* Symbol on the left-hand side of the rule */
  unsigned char nrhs;     /* Number of right-hand side symbols in the rule */
} yyRuleInfo[] = {
  { 82, 0 },
  { 82, 1 },
  { 84, 2 },
  { 84, 3 },
  { 86, 2 },
  { 86, 3 },
  { 87, 2 },
  { 87, 3 },
  { 89, 1 },
  { 89, 3 },
  { 89, 4 },
  { 90, 1 },
  { 90, 3 },
  { 91, 2 },
  { 92, 2 },
  { 92, 4 },
  { 92, 2 },
  { 92, 3 },
  { 92, 3 },
  { 92, 5 },
  { 94, 1 },
  { 94, 1 },
  { 94, 2 },
  { 94, 3 },
  { 94, 3 },
  { 94, 4 },
  { 94, 3 },
  { 94, 4 },
  { 88, 1 },
  { 88, 2 },
  { 95, 2 },
  { 95, 2 },
  { 95, 2 },
  { 95, 2 },
  { 96, 3 },
  { 96, 5 },
  { 96, 4 },
  { 96, 3 },
  { 96, 4 },
  { 96, 5 },
  { 96, 4 },
  { 96, 3 },
  { 96, 4 },
  { 96, 5 },
  { 96, 4 },
  { 96, 3 },
  { 96, 4 },
  { 96, 5 },
  { 96, 4 },
  { 93, 1 },
  { 93, 1 },
  { 93, 1 },
  { 93, 1 },
  { 93, 2 },
  { 93, 2 },
  { 99, 1 },
  { 99, 1 },
  { 99, 1 },
  { 99, 1 },
  { 99, 1 },
  { 99, 1 },
  { 100, 1 },
  { 100, 2 },
  { 100, 2 },
  { 101, 1 },
  { 101, 2 },
  { 101, 2 },
  { 101, 2 },
  { 101, 2 },
  { 101, 2 },
  { 101, 2 },
  { 102, 1 },
  { 102, 3 },
  { 102, 3 },
  { 102, 3 },
  { 102, 3 },
  { 103, 1 },
  { 103, 3 },
  { 103, 3 },
  { 104, 1 },
  { 104, 3 },
  { 104, 3 },
  { 104, 3 },
  { 105, 1 },
  { 105, 3 },
  { 106, 1 },
  { 106, 3 },
  { 107, 1 },
  { 107, 3 },
  { 108, 1 },
  { 108, 3 },
  { 108, 3 },
  { 108, 3 },
  { 108, 3 },
  { 108, 3 },
  { 108, 3 },
  { 108, 3 },
  { 108, 3 },
  { 108, 3 },
  { 108, 3 },
  { 109, 1 },
  { 109, 3 },
  { 110, 1 },
  { 110, 3 },
  { 111, 1 },
  { 111, 3 },
  { 112, 1 },
  { 112, 5 },
  { 112, 3 },
  { 112, 3 },
  { 112, 2 },
  { 112, 3 },
  { 112, 2 },
  { 112, 3 },
  { 112, 4 },
  { 112, 3 },
  { 112, 5 },
  { 112, 4 },
  { 98, 1 },
  { 98, 2 },
  { 98, 3 },
  { 116, 1 },
  { 116, 3 },
  { 117, 1 },
  { 117, 2 },
  { 117, 2 },
  { 117, 3 },
  { 117, 3 },
  { 117, 4 },
  { 117, 4 },
  { 117, 4 },
  { 117, 4 },
  { 85, 1 },
  { 85, 1 },
  { 85, 3 },
  { 97, 1 },
  { 97, 3 },
  { 118, 1 },
  { 118, 1 },
  { 118, 1 },
  { 118, 1 },
  { 118, 1 },
  { 118, 1 },
  { 118, 1 },
  { 118, 1 },
  { 118, 1 },
  { 118, 1 },
  { 118, 1 },
  { 118, 1 },
  { 118, 1 },
  { 113, 1 },
  { 113, 2 },
  { 113, 1 },
  { 113, 2 },
  { 113, 3 },
  { 119, 3 },
  { 119, 5 },
  { 115, 1 },
  { 115, 2 },
  { 120, 1 },
  { 120, 3 },
  { 121, 1 },
  { 121, 1 },
  { 121, 3 },
  { 114, 1 },
  { 114, 3 },
  { 122, 1 },
  { 122, 4 },
  { 123, 1 },
  { 124, 1 },
  { 125, 1 },
  { 125, 2 },
  { 125, 3 },
  { 125, 5 },
  { 125, 7 },
  { 125, 5 },
  { 125, 3 },
  { 125, 2 },
  { 125, 5 },
  { 125, 7 },
  { 125, 7 },
  { 125, 7 },
  { 125, 8 },
  { 125, 8 },
  { 125, 9 },
  { 125, 2 },
  { 125, 2 },
  { 125, 2 },
  { 125, 3 },
  { 125, 2 },
  { 125, 3 },
  { 125, 5 },
  { 125, 3 },
  { 125, 3 },
  { 125, 4 },
  { 125, 5 },
  { 125, 3 },
  { 127, 6 },
  { 127, 7 },
  { 127, 8 },
  { 126, 1 },
  { 126, 2 },
  { 83, 1 },
  { 83, 1 },
  { 83, 1 },
  { 83, 2 },
  { 83, 2 },
  { 83, 2 },
};

static void yy_accept(yyParser*);  /* Forward Declaration */

/*
** Perform a reduce action and the shift that must immediately
** follow the reduce.
*/
static void yy_reduce(
  yyParser *yypParser,         /* The parser */
  int yyruleno                 /* Number of the rule by which to reduce */
){
  int yygoto;                     /* The next state */
  int yyact;                      /* The next action */
  YYMINORTYPE yygotominor;        /* The LHS of the rule reduced */
  yyStackEntry *yymsp;            /* The top of the parser's stack */
  int yysize;                     /* Amount to pop the stack */
  XecParseARG_FETCH;
  yymsp = &yypParser->yystack[yypParser->yyidx];
#ifndef NDEBUG
  if( yyTraceFILE && yyruleno>=0 
        && yyruleno<(int)(sizeof(yyRuleName)/sizeof(yyRuleName[0])) ){
    fprintf(yyTraceFILE, "%sReduce [%s].\n", yyTracePrompt,
      yyRuleName[yyruleno]);
  }
#endif /* NDEBUG */

  /* Silence complaints from purify about yygotominor being uninitialized
  ** in some cases when it is copied into the stack after the following
  ** switch.  yygotominor is uninitialized when a rule reduces that does
  ** not set the value of its left-hand side nonterminal.  Leaving the
  ** value of the nonterminal uninitialized is utterly harmless as long
  ** as the value is never used.  So really the only thing this code
  ** accomplishes is to quieten purify.  
  **
  ** 2007-01-16:  The wireshark project (www.wireshark.org) reports that
  ** without this code, their parser segfaults.  I'm not sure what there
  ** parser is doing to make this happen.  This is the second bug report
  ** from wireshark this week.  Clearly they are stressing Lemon in ways
  ** that it has not been previously stressed...  (SQLite ticket #2172)
  */
  /*memset(&yygotominor, 0, sizeof(yygotominor));*/
  yygotominor = yyzerominor;


  switch( yyruleno ){
  /* Beginning here are the reduction cases.  A typical example
  ** follows:
  **   case 0:
  **  #line <lineno> <grammarfile>
  **     { ... }           // User supplied code
  **  #line <lineno> <thisfile>
  **     break;
  */
      case 2: /* expr_paren ::= LPN RPN */
#line 94 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,8,&yymsp[-1].minor);
  yy_destructor(yypParser,9,&yymsp[0].minor);
}
#line 1943 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 3: /* expr_paren ::= LPN expr_list RPN */
      case 34: /* expr_postfix ::= LPN expr_assign RPN */ yytestcase(yyruleno==34);
#line 95 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,8,&yymsp[-2].minor);
  yy_destructor(yypParser,9,&yymsp[0].minor);
}
#line 1952 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 4: /* stmt_brace ::= LBR RBR */
      case 6: /* odecl_brace ::= LBR RBR */ yytestcase(yyruleno==6);
      case 119: /* expr_value ::= LBR RBR */ yytestcase(yyruleno==119);
#line 97 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,10,&yymsp[-1].minor);
  yy_destructor(yypParser,11,&yymsp[0].minor);
}
#line 1962 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 5: /* stmt_brace ::= LBR stmt_list RBR */
      case 7: /* odecl_brace ::= LBR odecl_list RBR */ yytestcase(yyruleno==7);
      case 120: /* expr_value ::= LBR keyval_list RBR */ yytestcase(yyruleno==120);
#line 98 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,10,&yymsp[-2].minor);
  yy_destructor(yypParser,11,&yymsp[0].minor);
}
#line 1972 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 8: /* name ::= IDENTIFIER */
#line 109 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,12,&yymsp[0].minor);
}
#line 1979 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 9: /* name ::= name PERIOD IDENTIFIER */
      case 37: /* expr_postfix ::= proto PERIOD IDENTIFIER */ yytestcase(yyruleno==37);
      case 41: /* expr_postfix ::= expr_call PERIOD IDENTIFIER */ yytestcase(yyruleno==41);
      case 45: /* expr_postfix ::= expr_postfix PERIOD IDENTIFIER */ yytestcase(yyruleno==45);
#line 110 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,13,&yymsp[-1].minor);
  yy_destructor(yypParser,12,&yymsp[0].minor);
}
#line 1990 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 10: /* name ::= name PERIOD TILDE IDENTIFIER */
      case 38: /* expr_postfix ::= proto PERIOD TILDE IDENTIFIER */ yytestcase(yyruleno==38);
      case 42: /* expr_postfix ::= expr_call PERIOD TILDE IDENTIFIER */ yytestcase(yyruleno==42);
      case 46: /* expr_postfix ::= expr_postfix PERIOD TILDE IDENTIFIER */ yytestcase(yyruleno==46);
#line 111 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,13,&yymsp[-2].minor);
  yy_destructor(yypParser,14,&yymsp[-1].minor);
  yy_destructor(yypParser,12,&yymsp[0].minor);
}
#line 2002 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 12: /* name_list ::= name_list COMMA name */
      case 122: /* expr_lbody ::= expr_lbody COMMA expr_value */ yytestcase(yyruleno==122);
      case 134: /* expr_list ::= expr_lbody COMMA expr_final */ yytestcase(yyruleno==134);
      case 154: /* value_list ::= expr_lbody COMMA expr_final */ yytestcase(yyruleno==154);
      case 160: /* sexpr_lbody ::= sexpr_lbody COMMA expr_value */ yytestcase(yyruleno==160);
      case 163: /* sexpr_list ::= sexpr_lbody COMMA expr_final */ yytestcase(yyruleno==163);
#line 114 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,15,&yymsp[-1].minor);
}
#line 2014 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 15: /* decl ::= name COLON expr_simple odecl_brace */
      case 113: /* expr_nolbr ::= COLON expr_simple odecl_brace */ yytestcase(yyruleno==113);
#line 119 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,16,&yymsp[-2].minor);
}
#line 2022 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 17: /* decl ::= proto YIELD stmt_brace */
      case 30: /* expr_call ::= YIELD expr_paren */ yytestcase(yyruleno==30);
#line 121 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,6,&yymsp[-1].minor);
}
#line 2030 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 18: /* decl ::= VAR name_list SEMICOLON */
#line 122 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,17,&yymsp[-2].minor);
  yy_destructor(yypParser,18,&yymsp[0].minor);
}
#line 2038 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 19: /* decl ::= VAR name_list ASSIGN expr_list SEMICOLON */
#line 123 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,17,&yymsp[-4].minor);
  yy_destructor(yypParser,19,&yymsp[-2].minor);
  yy_destructor(yypParser,18,&yymsp[0].minor);
}
#line 2047 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 20: /* odecl ::= SEMICOLON */
      case 22: /* odecl ::= proto SEMICOLON */ yytestcase(yyruleno==22);
      case 171: /* stmt ::= sexpr_assign SEMICOLON */ yytestcase(yyruleno==171);
      case 189: /* stmt ::= stmt_yield SEMICOLON */ yytestcase(yyruleno==189);
      case 190: /* stmt ::= stmt_yield expr_list SEMICOLON */ yytestcase(yyruleno==190);
      case 192: /* stmt ::= stmt_using condition SEMICOLON */ yytestcase(yyruleno==192);
      case 204: /* stmt_list ::= SEMICOLON */ yytestcase(yyruleno==204);
      case 207: /* stmt_list ::= stmt_list SEMICOLON */ yytestcase(yyruleno==207);
#line 125 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,18,&yymsp[0].minor);
}
#line 2061 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 23: /* odecl ::= proto YIELD SEMICOLON */
#line 128 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,6,&yymsp[-1].minor);
  yy_destructor(yypParser,18,&yymsp[0].minor);
}
#line 2069 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 24: /* odecl ::= TILDE proto stmt_brace */
#line 129 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,14,&yymsp[-2].minor);
}
#line 2076 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 25: /* odecl ::= TILDE proto YIELD stmt_brace */
#line 130 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,14,&yymsp[-3].minor);
  yy_destructor(yypParser,6,&yymsp[-1].minor);
}
#line 2084 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 26: /* odecl ::= TILDE proto SEMICOLON */
#line 131 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,14,&yymsp[-2].minor);
  yy_destructor(yypParser,18,&yymsp[0].minor);
}
#line 2092 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 27: /* odecl ::= TILDE proto YIELD SEMICOLON */
#line 132 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,14,&yymsp[-3].minor);
  yy_destructor(yypParser,6,&yymsp[-1].minor);
  yy_destructor(yypParser,18,&yymsp[0].minor);
}
#line 2101 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 35: /* expr_postfix ::= name PERIOD LSQ expr_value RSQ */
      case 39: /* expr_postfix ::= proto PERIOD LSQ expr_value RSQ */ yytestcase(yyruleno==39);
      case 43: /* expr_postfix ::= expr_call PERIOD LSQ expr_value RSQ */ yytestcase(yyruleno==43);
      case 47: /* expr_postfix ::= expr_postfix PERIOD LSQ expr_value RSQ */ yytestcase(yyruleno==47);
#line 149 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,13,&yymsp[-3].minor);
  yy_destructor(yypParser,20,&yymsp[-2].minor);
  yy_destructor(yypParser,21,&yymsp[0].minor);
}
#line 2113 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 36: /* expr_postfix ::= name LSQ expr_value RSQ */
      case 40: /* expr_postfix ::= proto LSQ expr_value RSQ */ yytestcase(yyruleno==40);
      case 44: /* expr_postfix ::= expr_call LSQ expr_value RSQ */ yytestcase(yyruleno==44);
      case 48: /* expr_postfix ::= expr_postfix LSQ expr_value RSQ */ yytestcase(yyruleno==48);
      case 111: /* expr_nolbr ::= LSQ value_list RSQ */ yytestcase(yyruleno==111);
#line 150 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,20,&yymsp[-2].minor);
  yy_destructor(yypParser,21,&yymsp[0].minor);
}
#line 2125 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 53: /* expr_simple ::= proto YIELD */
      case 54: /* expr_simple ::= expr_call YIELD */ yytestcase(yyruleno==54);
      case 168: /* stmt_yield ::= YIELD */ yytestcase(yyruleno==168);
#line 168 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,6,&yymsp[0].minor);
}
#line 2134 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 56: /* expr_basic ::= NUMBER */
#line 172 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,22,&yymsp[0].minor);
}
#line 2141 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 57: /* expr_basic ::= STRING */
#line 173 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,23,&yymsp[0].minor);
}
#line 2148 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 58: /* expr_basic ::= TRUE */
#line 174 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,24,&yymsp[0].minor);
}
#line 2155 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 59: /* expr_basic ::= FALSE */
#line 175 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,25,&yymsp[0].minor);
}
#line 2162 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 60: /* expr_basic ::= NULL */
#line 176 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,26,&yymsp[0].minor);
}
#line 2169 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 62: /* expr_suffix ::= expr_basic INCREMENT */
#line 179 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,27,&yymsp[0].minor);
}
#line 2176 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 63: /* expr_suffix ::= expr_basic DECREMENT */
#line 180 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,28,&yymsp[0].minor);
}
#line 2183 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 65: /* expr_unary ::= PLUS expr_basic */
      case 77: /* expr_add ::= expr_add PLUS expr_mul */ yytestcase(yyruleno==77);
#line 183 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,29,&yymsp[-1].minor);
}
#line 2191 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 66: /* expr_unary ::= MINUS expr_basic */
      case 78: /* expr_add ::= expr_add MINUS expr_mul */ yytestcase(yyruleno==78);
#line 184 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,30,&yymsp[-1].minor);
}
#line 2199 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 67: /* expr_unary ::= XMARK expr_basic */
#line 185 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,31,&yymsp[-1].minor);
}
#line 2206 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 68: /* expr_unary ::= TILDE expr_basic */
      case 75: /* expr_mul ::= expr_mul TILDE expr_unary */ yytestcase(yyruleno==75);
#line 186 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,14,&yymsp[-1].minor);
}
#line 2214 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 69: /* expr_unary ::= INCREMENT expr_basic */
#line 187 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,27,&yymsp[-1].minor);
}
#line 2221 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 70: /* expr_unary ::= DECREMENT expr_basic */
#line 188 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,28,&yymsp[-1].minor);
}
#line 2228 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 72: /* expr_mul ::= expr_mul ASTERISK expr_unary */
#line 191 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,32,&yymsp[-1].minor);
}
#line 2235 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 73: /* expr_mul ::= expr_mul SOLIDUS expr_unary */
#line 192 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,33,&yymsp[-1].minor);
}
#line 2242 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 74: /* expr_mul ::= expr_mul PERCENT expr_unary */
#line 193 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,34,&yymsp[-1].minor);
}
#line 2249 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 80: /* expr_shift ::= expr_shift LSHIFT expr_add */
#line 201 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,35,&yymsp[-1].minor);
}
#line 2256 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 81: /* expr_shift ::= expr_shift RSHIFT expr_add */
#line 202 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,36,&yymsp[-1].minor);
}
#line 2263 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 82: /* expr_shift ::= expr_shift URSHIFT expr_add */
#line 203 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,37,&yymsp[-1].minor);
}
#line 2270 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 84: /* expr_bitand ::= expr_bitand AMPERSAND expr_shift */
#line 206 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,38,&yymsp[-1].minor);
}
#line 2277 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 86: /* expr_bitxor ::= expr_bitxor CARET expr_bitand */
#line 209 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,39,&yymsp[-1].minor);
}
#line 2284 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 88: /* expr_bitor ::= expr_bitor VBAR expr_bitxor */
#line 212 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,40,&yymsp[-1].minor);
}
#line 2291 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 90: /* expr_compare ::= expr_compare EQUAL expr_bitor */
#line 215 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,41,&yymsp[-1].minor);
}
#line 2298 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 91: /* expr_compare ::= expr_compare NOTEQUAL expr_bitor */
#line 216 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,42,&yymsp[-1].minor);
}
#line 2305 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 92: /* expr_compare ::= expr_compare LESS expr_bitor */
#line 217 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,43,&yymsp[-1].minor);
}
#line 2312 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 93: /* expr_compare ::= expr_compare GREATER expr_bitor */
#line 218 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,44,&yymsp[-1].minor);
}
#line 2319 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 94: /* expr_compare ::= expr_compare LESSEQUAL expr_bitor */
#line 219 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,45,&yymsp[-1].minor);
}
#line 2326 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 95: /* expr_compare ::= expr_compare GREATEREQUAL expr_bitor */
#line 220 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,46,&yymsp[-1].minor);
}
#line 2333 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 96: /* expr_compare ::= expr_compare IN expr_bitor */
#line 221 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,47,&yymsp[-1].minor);
}
#line 2340 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 97: /* expr_compare ::= expr_compare NOTIN expr_bitor */
#line 222 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,48,&yymsp[-1].minor);
}
#line 2347 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 98: /* expr_compare ::= expr_compare IS expr_bitor */
#line 223 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,49,&yymsp[-1].minor);
}
#line 2354 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 99: /* expr_compare ::= expr_compare NOTIS expr_bitor */
#line 224 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,50,&yymsp[-1].minor);
}
#line 2361 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 101: /* expr_and ::= expr_and LOGICAND expr_compare */
#line 227 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,51,&yymsp[-1].minor);
}
#line 2368 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 103: /* expr_xor ::= expr_xor LOGICXOR expr_and */
#line 230 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,52,&yymsp[-1].minor);
}
#line 2375 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 105: /* expr_or ::= expr_or LOGICOR expr_xor */
#line 233 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,53,&yymsp[-1].minor);
}
#line 2382 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 107: /* expr_nolbr ::= expr_or QMARK expr_value COLON expr_value */
#line 236 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,54,&yymsp[-3].minor);
  yy_destructor(yypParser,16,&yymsp[-1].minor);
}
#line 2390 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 108: /* expr_nolbr ::= NEW name expr_paren */
      case 109: /* expr_nolbr ::= NEW expr_postfix expr_paren */ yytestcase(yyruleno==109);
#line 237 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,55,&yymsp[-2].minor);
}
#line 2398 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 110: /* expr_nolbr ::= LSQ RSQ */
#line 239 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,20,&yymsp[-1].minor);
  yy_destructor(yypParser,21,&yymsp[0].minor);
}
#line 2406 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 112: /* expr_nolbr ::= COLON odecl_brace */
      case 155: /* keyval_lbody ::= expr_value COLON expr_value */ yytestcase(yyruleno==155);
#line 241 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,16,&yymsp[-1].minor);
}
#line 2414 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 114: /* expr_nolbr ::= QMARK expr_paren sexpr_assign SEMICOLON */
#line 243 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,54,&yymsp[-3].minor);
  yy_destructor(yypParser,18,&yymsp[0].minor);
}
#line 2422 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 115: /* expr_nolbr ::= QMARK expr_paren stmt_brace */
#line 244 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,54,&yymsp[-2].minor);
}
#line 2429 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 116: /* expr_nolbr ::= PERIOD QMARK expr_paren sexpr_assign SEMICOLON */
#line 245 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,13,&yymsp[-4].minor);
  yy_destructor(yypParser,54,&yymsp[-3].minor);
  yy_destructor(yypParser,18,&yymsp[0].minor);
}
#line 2438 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 117: /* expr_nolbr ::= PERIOD QMARK expr_paren stmt_brace */
#line 246 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,13,&yymsp[-3].minor);
  yy_destructor(yypParser,54,&yymsp[-2].minor);
}
#line 2446 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 123: /* expr_final ::= ELLIPSIS */
      case 124: /* expr_final ::= proto ELLIPSIS */ yytestcase(yyruleno==124);
      case 125: /* expr_final ::= expr_call ELLIPSIS */ yytestcase(yyruleno==125);
#line 255 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,56,&yymsp[0].minor);
}
#line 2455 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 126: /* expr_final ::= proto YIELD ELLIPSIS */
      case 127: /* expr_final ::= expr_call YIELD ELLIPSIS */ yytestcase(yyruleno==127);
#line 258 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,6,&yymsp[-1].minor);
  yy_destructor(yypParser,56,&yymsp[0].minor);
}
#line 2464 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 128: /* expr_final ::= name LSQ RSQ ELLIPSIS */
      case 129: /* expr_final ::= proto LSQ RSQ ELLIPSIS */ yytestcase(yyruleno==129);
      case 130: /* expr_final ::= expr_call LSQ RSQ ELLIPSIS */ yytestcase(yyruleno==130);
      case 131: /* expr_final ::= expr_postfix LSQ RSQ ELLIPSIS */ yytestcase(yyruleno==131);
#line 260 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,20,&yymsp[-2].minor);
  yy_destructor(yypParser,21,&yymsp[-1].minor);
  yy_destructor(yypParser,56,&yymsp[0].minor);
}
#line 2476 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 137: /* assign_op ::= ASSIGN */
#line 272 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,19,&yymsp[0].minor);
}
#line 2483 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 138: /* assign_op ::= MULASSIGN */
#line 273 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,57,&yymsp[0].minor);
}
#line 2490 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 139: /* assign_op ::= DIVASSIGN */
#line 274 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,58,&yymsp[0].minor);
}
#line 2497 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 140: /* assign_op ::= MODASSIGN */
#line 275 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,59,&yymsp[0].minor);
}
#line 2504 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 141: /* assign_op ::= INTDIVASSIGN */
#line 276 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,60,&yymsp[0].minor);
}
#line 2511 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 142: /* assign_op ::= ADDASSIGN */
#line 277 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,61,&yymsp[0].minor);
}
#line 2518 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 143: /* assign_op ::= SUBASSIGN */
#line 278 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,62,&yymsp[0].minor);
}
#line 2525 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 144: /* assign_op ::= LSHIFTASSIGN */
#line 279 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,63,&yymsp[0].minor);
}
#line 2532 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 145: /* assign_op ::= RSHIFTASSIGN */
#line 280 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,64,&yymsp[0].minor);
}
#line 2539 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 146: /* assign_op ::= URSHIFTASSIGN */
#line 281 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,65,&yymsp[0].minor);
}
#line 2546 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 147: /* assign_op ::= BITANDASSIGN */
#line 282 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,66,&yymsp[0].minor);
}
#line 2553 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 148: /* assign_op ::= BITXORASSIGN */
#line 283 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,67,&yymsp[0].minor);
}
#line 2560 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 149: /* assign_op ::= BITORASSIGN */
#line 284 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,68,&yymsp[0].minor);
}
#line 2567 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 151: /* value_list ::= expr_final COMMA */
      case 153: /* value_list ::= expr_lbody COMMA */ yytestcase(yyruleno==153);
      case 158: /* keyval_list ::= keyval_lbody COMMA */ yytestcase(yyruleno==158);
#line 287 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,15,&yymsp[0].minor);
}
#line 2576 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 156: /* keyval_lbody ::= keyval_lbody COMMA expr_value COLON expr_value */
#line 293 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,15,&yymsp[-3].minor);
  yy_destructor(yypParser,16,&yymsp[-1].minor);
}
#line 2584 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 167: /* condition ::= VAR name_list ASSIGN expr_list */
#line 322 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,17,&yymsp[-3].minor);
  yy_destructor(yypParser,19,&yymsp[-1].minor);
}
#line 2592 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 169: /* stmt_using ::= USING */
#line 326 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,7,&yymsp[0].minor);
}
#line 2599 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 172: /* stmt ::= DELETE expr_lbody SEMICOLON */
#line 330 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,69,&yymsp[-2].minor);
  yy_destructor(yypParser,18,&yymsp[0].minor);
}
#line 2607 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 173: /* stmt ::= IF LPN condition RPN stmt */
#line 331 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,1,&yymsp[-4].minor);
  yy_destructor(yypParser,8,&yymsp[-3].minor);
  yy_destructor(yypParser,9,&yymsp[-1].minor);
}
#line 2616 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 174: /* stmt ::= IF LPN condition RPN stmt ELSE stmt */
#line 332 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,1,&yymsp[-6].minor);
  yy_destructor(yypParser,8,&yymsp[-5].minor);
  yy_destructor(yypParser,9,&yymsp[-3].minor);
  yy_destructor(yypParser,2,&yymsp[-1].minor);
}
#line 2626 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 175: /* stmt ::= SWITCH LPN condition RPN stmt_brace */
#line 333 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,70,&yymsp[-4].minor);
  yy_destructor(yypParser,8,&yymsp[-3].minor);
  yy_destructor(yypParser,9,&yymsp[-1].minor);
}
#line 2635 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 176: /* stmt ::= CASE expr_value COLON */
#line 334 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,71,&yymsp[-2].minor);
  yy_destructor(yypParser,16,&yymsp[0].minor);
}
#line 2643 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 177: /* stmt ::= DEFAULT COLON */
#line 335 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,72,&yymsp[-1].minor);
  yy_destructor(yypParser,16,&yymsp[0].minor);
}
#line 2651 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 178: /* stmt ::= WHILE LPN condition RPN stmt */
#line 336 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,73,&yymsp[-4].minor);
  yy_destructor(yypParser,8,&yymsp[-3].minor);
  yy_destructor(yypParser,9,&yymsp[-1].minor);
}
#line 2660 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 179: /* stmt ::= DO stmt WHILE LPN expr_assign RPN SEMICOLON */
#line 337 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,74,&yymsp[-6].minor);
  yy_destructor(yypParser,73,&yymsp[-4].minor);
  yy_destructor(yypParser,8,&yymsp[-3].minor);
  yy_destructor(yypParser,9,&yymsp[-1].minor);
  yy_destructor(yypParser,18,&yymsp[0].minor);
}
#line 2671 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 180: /* stmt ::= FOR LPN expr_lbody COLON expr_value RPN stmt */
#line 338 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,75,&yymsp[-6].minor);
  yy_destructor(yypParser,8,&yymsp[-5].minor);
  yy_destructor(yypParser,16,&yymsp[-3].minor);
  yy_destructor(yypParser,9,&yymsp[-1].minor);
}
#line 2681 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 181: /* stmt ::= FOR LPN expr_lbody EACHKEY expr_value RPN stmt */
#line 339 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,75,&yymsp[-6].minor);
  yy_destructor(yypParser,8,&yymsp[-5].minor);
  yy_destructor(yypParser,76,&yymsp[-3].minor);
  yy_destructor(yypParser,9,&yymsp[-1].minor);
}
#line 2691 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 182: /* stmt ::= FOR LPN VAR name_list COLON expr_value RPN stmt */
#line 340 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,75,&yymsp[-7].minor);
  yy_destructor(yypParser,8,&yymsp[-6].minor);
  yy_destructor(yypParser,17,&yymsp[-5].minor);
  yy_destructor(yypParser,16,&yymsp[-3].minor);
  yy_destructor(yypParser,9,&yymsp[-1].minor);
}
#line 2702 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 183: /* stmt ::= FOR LPN VAR name_list EACHKEY expr_value RPN stmt */
#line 341 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,75,&yymsp[-7].minor);
  yy_destructor(yypParser,8,&yymsp[-6].minor);
  yy_destructor(yypParser,17,&yymsp[-5].minor);
  yy_destructor(yypParser,76,&yymsp[-3].minor);
  yy_destructor(yypParser,9,&yymsp[-1].minor);
}
#line 2713 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 184: /* stmt ::= FOR LPN condition SEMICOLON expr_assign SEMICOLON expr_assign RPN stmt */
#line 343 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,75,&yymsp[-8].minor);
  yy_destructor(yypParser,8,&yymsp[-7].minor);
  yy_destructor(yypParser,18,&yymsp[-5].minor);
  yy_destructor(yypParser,18,&yymsp[-3].minor);
  yy_destructor(yypParser,9,&yymsp[-1].minor);
}
#line 2724 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 185: /* stmt ::= CONTINUE SEMICOLON */
#line 344 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,77,&yymsp[-1].minor);
  yy_destructor(yypParser,18,&yymsp[0].minor);
}
#line 2732 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 186: /* stmt ::= BREAK SEMICOLON */
#line 345 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,78,&yymsp[-1].minor);
  yy_destructor(yypParser,18,&yymsp[0].minor);
}
#line 2740 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 187: /* stmt ::= RETURN SEMICOLON */
#line 346 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,79,&yymsp[-1].minor);
  yy_destructor(yypParser,18,&yymsp[0].minor);
}
#line 2748 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 188: /* stmt ::= RETURN expr_list SEMICOLON */
#line 347 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,79,&yymsp[-2].minor);
  yy_destructor(yypParser,18,&yymsp[0].minor);
}
#line 2756 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 191: /* stmt ::= USING LPN condition RPN stmt */
#line 350 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,7,&yymsp[-4].minor);
  yy_destructor(yypParser,8,&yymsp[-3].minor);
  yy_destructor(yypParser,9,&yymsp[-1].minor);
}
#line 2765 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 193: /* stmt ::= TRY stmt catch_list */
#line 352 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,3,&yymsp[-2].minor);
}
#line 2772 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 194: /* stmt ::= TRY stmt FINALLY stmt */
#line 353 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,3,&yymsp[-3].minor);
  yy_destructor(yypParser,5,&yymsp[-1].minor);
}
#line 2780 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 195: /* stmt ::= TRY stmt catch_list FINALLY stmt */
#line 354 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,3,&yymsp[-4].minor);
  yy_destructor(yypParser,5,&yymsp[-1].minor);
}
#line 2788 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 196: /* stmt ::= THROW expr_value SEMICOLON */
#line 355 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,80,&yymsp[-2].minor);
  yy_destructor(yypParser,18,&yymsp[0].minor);
}
#line 2796 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 197: /* catch ::= CATCH LPN COLON expr_simple RPN stmt */
#line 357 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,4,&yymsp[-5].minor);
  yy_destructor(yypParser,8,&yymsp[-4].minor);
  yy_destructor(yypParser,16,&yymsp[-3].minor);
  yy_destructor(yypParser,9,&yymsp[-1].minor);
}
#line 2806 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 198: /* catch ::= CATCH LPN expr_value COLON expr_simple RPN stmt */
#line 358 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,4,&yymsp[-6].minor);
  yy_destructor(yypParser,8,&yymsp[-5].minor);
  yy_destructor(yypParser,16,&yymsp[-3].minor);
  yy_destructor(yypParser,9,&yymsp[-1].minor);
}
#line 2816 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 199: /* catch ::= CATCH LPN VAR name COLON expr_simple RPN stmt */
#line 359 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
  yy_destructor(yypParser,4,&yymsp[-7].minor);
  yy_destructor(yypParser,8,&yymsp[-6].minor);
  yy_destructor(yypParser,17,&yymsp[-5].minor);
  yy_destructor(yypParser,16,&yymsp[-3].minor);
  yy_destructor(yypParser,9,&yymsp[-1].minor);
}
#line 2827 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      default:
      /* (0) script ::= */ yytestcase(yyruleno==0);
      /* (1) script ::= stmt_list */ yytestcase(yyruleno==1);
      /* (11) name_list ::= name */ yytestcase(yyruleno==11);
      /* (13) proto ::= name expr_paren */ yytestcase(yyruleno==13);
      /* (14) decl ::= name odecl_brace */ yytestcase(yyruleno==14);
      /* (16) decl ::= proto stmt_brace */ yytestcase(yyruleno==16);
      /* (21) odecl ::= decl */ yytestcase(yyruleno==21);
      /* (28) odecl_list ::= odecl */ yytestcase(yyruleno==28);
      /* (29) odecl_list ::= odecl_list odecl */ yytestcase(yyruleno==29);
      /* (31) expr_call ::= proto expr_paren */ yytestcase(yyruleno==31);
      /* (32) expr_call ::= expr_call expr_paren */ yytestcase(yyruleno==32);
      /* (33) expr_call ::= expr_postfix expr_paren */ yytestcase(yyruleno==33);
      /* (49) expr_simple ::= name */ yytestcase(yyruleno==49);
      /* (50) expr_simple ::= expr_postfix */ yytestcase(yyruleno==50);
      /* (51) expr_simple ::= proto */ yytestcase(yyruleno==51);
      /* (52) expr_simple ::= expr_call */ yytestcase(yyruleno==52);
      /* (55) expr_basic ::= expr_simple */ yytestcase(yyruleno==55);
      /* (61) expr_suffix ::= expr_basic */ yytestcase(yyruleno==61);
      /* (64) expr_unary ::= expr_suffix */ yytestcase(yyruleno==64);
      /* (71) expr_mul ::= expr_unary */ yytestcase(yyruleno==71);
      /* (76) expr_add ::= expr_mul */ yytestcase(yyruleno==76);
      /* (79) expr_shift ::= expr_add */ yytestcase(yyruleno==79);
      /* (83) expr_bitand ::= expr_shift */ yytestcase(yyruleno==83);
      /* (85) expr_bitxor ::= expr_bitand */ yytestcase(yyruleno==85);
      /* (87) expr_bitor ::= expr_bitxor */ yytestcase(yyruleno==87);
      /* (89) expr_compare ::= expr_bitor */ yytestcase(yyruleno==89);
      /* (100) expr_and ::= expr_compare */ yytestcase(yyruleno==100);
      /* (102) expr_xor ::= expr_and */ yytestcase(yyruleno==102);
      /* (104) expr_or ::= expr_xor */ yytestcase(yyruleno==104);
      /* (106) expr_nolbr ::= expr_or */ yytestcase(yyruleno==106);
      /* (118) expr_value ::= expr_nolbr */ yytestcase(yyruleno==118);
      /* (121) expr_lbody ::= expr_value */ yytestcase(yyruleno==121);
      /* (132) expr_list ::= expr_final */ yytestcase(yyruleno==132);
      /* (133) expr_list ::= expr_lbody */ yytestcase(yyruleno==133);
      /* (135) expr_assign ::= expr_list */ yytestcase(yyruleno==135);
      /* (136) expr_assign ::= expr_lbody assign_op expr_list */ yytestcase(yyruleno==136);
      /* (150) value_list ::= expr_final */ yytestcase(yyruleno==150);
      /* (152) value_list ::= expr_lbody */ yytestcase(yyruleno==152);
      /* (157) keyval_list ::= keyval_lbody */ yytestcase(yyruleno==157);
      /* (159) sexpr_lbody ::= expr_nolbr */ yytestcase(yyruleno==159);
      /* (161) sexpr_list ::= expr_final */ yytestcase(yyruleno==161);
      /* (162) sexpr_list ::= sexpr_lbody */ yytestcase(yyruleno==162);
      /* (164) sexpr_assign ::= sexpr_list */ yytestcase(yyruleno==164);
      /* (165) sexpr_assign ::= sexpr_lbody assign_op expr_list */ yytestcase(yyruleno==165);
      /* (166) condition ::= expr_assign */ yytestcase(yyruleno==166);
      /* (170) stmt ::= stmt_brace */ yytestcase(yyruleno==170);
      /* (200) catch_list ::= catch */ yytestcase(yyruleno==200);
      /* (201) catch_list ::= catch_list catch */ yytestcase(yyruleno==201);
      /* (202) stmt_list ::= stmt */ yytestcase(yyruleno==202);
      /* (203) stmt_list ::= decl */ yytestcase(yyruleno==203);
      /* (205) stmt_list ::= stmt_list stmt */ yytestcase(yyruleno==205);
      /* (206) stmt_list ::= stmt_list decl */ yytestcase(yyruleno==206);
        break;
  };
  yygoto = yyRuleInfo[yyruleno].lhs;
  yysize = yyRuleInfo[yyruleno].nrhs;
  yypParser->yyidx -= yysize;
  yyact = yy_find_reduce_action(yymsp[-yysize].stateno,(YYCODETYPE)yygoto);
  if( yyact < YYNSTATE ){
#ifdef NDEBUG
    /* If we are not debugging and the reduce action popped at least
    ** one element off the stack, then we can push the new element back
    ** onto the stack here, and skip the stack overflow test in yy_shift().
    ** That gives a significant speed improvement. */
    if( yysize ){
      yypParser->yyidx++;
      yymsp -= yysize-1;
      yymsp->stateno = (YYACTIONTYPE)yyact;
      yymsp->major = (YYCODETYPE)yygoto;
      yymsp->minor = yygotominor;
    }else
#endif
    {
      yy_shift(yypParser,yyact,yygoto,&yygotominor);
    }
  }else{
    assert( yyact == YYNSTATE + YYNRULE + 1 );
    yy_accept(yypParser);
  }
}

/*
** The following code executes when the parse fails
*/
#ifndef YYNOERRORRECOVERY
static void yy_parse_failed(
  yyParser *yypParser           /* The parser */
){
  XecParseARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sFail!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser fails */
  XecParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}
#endif /* YYNOERRORRECOVERY */

/*
** The following code executes when a syntax error first occurs.
*/
static void yy_syntax_error(
  yyParser *yypParser,           /* The parser */
  int yymajor,                   /* The major type of the error token */
  YYMINORTYPE yyminor            /* The minor type of the error token */
){
  XecParseARG_FETCH;
#define TOKEN (yyminor.yy0)
  XecParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/*
** The following is executed when the parser accepts
*/
static void yy_accept(
  yyParser *yypParser           /* The parser */
){
  XecParseARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sAccept!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser accepts */
  XecParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/* The main parser program.
** The first argument is a pointer to a structure obtained from
** "XecParseAlloc" which describes the current state of the parser.
** The second argument is the major token number.  The third is
** the minor token.  The fourth optional argument is whatever the
** user wants (and specified in the grammar) and is available for
** use by the action routines.
**
** Inputs:
** <ul>
** <li> A pointer to the parser (an opaque structure.)
** <li> The major token number.
** <li> The minor token number.
** <li> An option argument of a grammar-specified type.
** </ul>
**
** Outputs:
** None.
*/
void XecParse(
  void *yyp,                   /* The parser */
  int yymajor,                 /* The major token code number */
  XecParseTOKENTYPE yyminor       /* The value for the token */
  XecParseARG_PDECL               /* Optional %extra_argument parameter */
){
  YYMINORTYPE yyminorunion;
  int yyact;            /* The parser action. */
  int yyendofinput;     /* True if we are at the end of input */
#ifdef YYERRORSYMBOL
  int yyerrorhit = 0;   /* True if yymajor has invoked an error */
#endif
  yyParser *yypParser;  /* The parser */

  /* (re)initialize the parser, if necessary */
  yypParser = (yyParser*)yyp;
  if( yypParser->yyidx<0 ){
#if YYSTACKDEPTH<=0
    if( yypParser->yystksz <=0 ){
      /*memset(&yyminorunion, 0, sizeof(yyminorunion));*/
      yyminorunion = yyzerominor;
      yyStackOverflow(yypParser, &yyminorunion);
      return;
    }
#endif
    yypParser->yyidx = 0;
    yypParser->yyerrcnt = -1;
    yypParser->yystack[0].stateno = 0;
    yypParser->yystack[0].major = 0;
  }
  yyminorunion.yy0 = yyminor;
  yyendofinput = (yymajor==0);
  XecParseARG_STORE;

#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sInput %s\n",yyTracePrompt,yyTokenName[yymajor]);
  }
#endif

  do{
    yyact = yy_find_shift_action(yypParser,(YYCODETYPE)yymajor);
    if( yyact<YYNSTATE ){
      assert( !yyendofinput );  /* Impossible to shift the $ token */
      yy_shift(yypParser,yyact,yymajor,&yyminorunion);
      yypParser->yyerrcnt--;
      yymajor = YYNOCODE;
    }else if( yyact < YYNSTATE + YYNRULE ){
      yy_reduce(yypParser,yyact-YYNSTATE);
    }else{
      assert( yyact == YY_ERROR_ACTION );
#ifdef YYERRORSYMBOL
      int yymx;
#endif
#ifndef NDEBUG
      if( yyTraceFILE ){
        fprintf(yyTraceFILE,"%sSyntax Error!\n",yyTracePrompt);
      }
#endif
#ifdef YYERRORSYMBOL
      /* A syntax error has occurred.
      ** The response to an error depends upon whether or not the
      ** grammar defines an error token "ERROR".  
      **
      ** This is what we do if the grammar does define ERROR:
      **
      **  * Call the %syntax_error function.
      **
      **  * Begin popping the stack until we enter a state where
      **    it is legal to shift the error symbol, then shift
      **    the error symbol.
      **
      **  * Set the error count to three.
      **
      **  * Begin accepting and shifting new tokens.  No new error
      **    processing will occur until three tokens have been
      **    shifted successfully.
      **
      */
      if( yypParser->yyerrcnt<0 ){
        yy_syntax_error(yypParser,yymajor,yyminorunion);
      }
      yymx = yypParser->yystack[yypParser->yyidx].major;
      if( yymx==YYERRORSYMBOL || yyerrorhit ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE,"%sDiscard input token %s\n",
             yyTracePrompt,yyTokenName[yymajor]);
        }
#endif
        yy_destructor(yypParser, (YYCODETYPE)yymajor,&yyminorunion);
        yymajor = YYNOCODE;
      }else{
         while(
          yypParser->yyidx >= 0 &&
          yymx != YYERRORSYMBOL &&
          (yyact = yy_find_reduce_action(
                        yypParser->yystack[yypParser->yyidx].stateno,
                        YYERRORSYMBOL)) >= YYNSTATE
        ){
          yy_pop_parser_stack(yypParser);
        }
        if( yypParser->yyidx < 0 || yymajor==0 ){
          yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
          yy_parse_failed(yypParser);
          yymajor = YYNOCODE;
        }else if( yymx!=YYERRORSYMBOL ){
          YYMINORTYPE u2;
          u2.YYERRSYMDT = 0;
          yy_shift(yypParser,yyact,YYERRORSYMBOL,&u2);
        }
      }
      yypParser->yyerrcnt = 3;
      yyerrorhit = 1;
#elif defined(YYNOERRORRECOVERY)
      /* If the YYNOERRORRECOVERY macro is defined, then do not attempt to
      ** do any kind of error recovery.  Instead, simply invoke the syntax
      ** error routine and continue going as if nothing had happened.
      **
      ** Applications can set this macro (for example inside %include) if
      ** they intend to abandon the parse upon the first syntax error seen.
      */
      yy_syntax_error(yypParser,yymajor,yyminorunion);
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      yymajor = YYNOCODE;
      
#else  /* YYERRORSYMBOL is not defined */
      /* This is what we do if the grammar does not define ERROR:
      **
      **  * Report an error message, and throw away the input token.
      **
      **  * If the input token is $, then fail the parse.
      **
      ** As before, subsequent error messages are suppressed until
      ** three input tokens have been successfully shifted.
      */
      if( yypParser->yyerrcnt<=0 ){
        yy_syntax_error(yypParser,yymajor,yyminorunion);
      }
      yypParser->yyerrcnt = 3;
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      if( yyendofinput ){
        yy_parse_failed(yypParser);
      }
      yymajor = YYNOCODE;
#endif
    }
  }while( yymajor!=YYNOCODE && yypParser->yyidx>=0 );
  return;
}
