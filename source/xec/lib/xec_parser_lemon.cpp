/* Driver template for the LEMON parser generator.
** The author disclaims copyright to this source code.
*/
/* First off, code is included that follows the "include" declaration
** in the input grammar file. */
#include <stdio.h>
#line 19 "../../toolbox/source/xec/lib/xec_parser_lemon.y"

    #include <assert.h>
    #include "xec_parser.h"
    #include "xec_token.h"
    #include <xec/ast/xec_expression.h>
    #include <xec/ast/xec_constructor.h>
    #include <xec/ast/xec_declaration.h>
    #include <xec/ast/xec_statement.h>
#line 35 "../../toolbox/source/xec/lib/xec_parser_lemon.y"



void xec_parser::destroy( xec_token* token )
{
    token->~xec_token();
    recycle_tokens.push_back( token );
}


#line 28 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
/* Next is all token values, in a form suitable for use by makeheaders.
** This section will be null unless lemon is run with the -m switch.
*/
/* 
** These constants (all generated automatically by the parser generator)
** specify the various kinds of tokens (terminals) that the parser
** understands. 
**
** Each symbol here is a terminal symbol in the grammar.
*/
/* Make sure the INTERFACE macro is defined.
*/
#ifndef INTERFACE
# define INTERFACE 1
#endif
/* The next thing included is series of defines which control
** various aspects of the generated parser.
**    YYCODETYPE         is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 terminals
**                       and nonterminals.  "int" is used otherwise.
**    YYNOCODE           is a number of type YYCODETYPE which corresponds
**                       to no legal terminal or nonterminal number.  This
**                       number is used to fill in empty slots of the hash 
**                       table.
**    YYFALLBACK         If defined, this indicates that one or more tokens
**                       have fall-back values which should be used if the
**                       original value of the token will not parse.
**    YYACTIONTYPE       is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 rules and
**                       states combined.  "int" is used otherwise.
**    XecParseTOKENTYPE     is the data type used for minor tokens given 
**                       directly to the parser from the tokenizer.
**    YYMINORTYPE        is the data type used for all minor tokens.
**                       This is typically a union of many types, one of
**                       which is XecParseTOKENTYPE.  The entry in the union
**                       for base tokens is called "yy0".
**    YYSTACKDEPTH       is the maximum depth of the parser's stack.  If
**                       zero the stack is dynamically sized using realloc()
**    XecParseARG_SDECL     A static variable declaration for the %extra_argument
**    XecParseARG_PDECL     A parameter declaration for the %extra_argument
**    XecParseARG_STORE     Code to store %extra_argument into yypParser
**    XecParseARG_FETCH     Code to extract %extra_argument from yypParser
**    YYNSTATE           the combined number of states.
**    YYNRULE            the number of rules in the grammar
**    YYERRORSYMBOL      is the code number of the error symbol.  If not
**                       defined, then do no error processing.
*/
#define YYCODETYPE unsigned char
#define YYNOCODE 133
#define YYACTIONTYPE unsigned short int
#define XecParseTOKENTYPE  xec_token* 
typedef union {
  int yyinit;
  XecParseTOKENTYPE yy0;
  xec_statement_try* yy5;
  xec_expression_call* yy9;
  xec_constructor_list* yy27;
  xec_declaration_object* yy38;
  xec_token* yy43;
  xec_expression_list* yy57;
  xec_statement* yy67;
  xec_statement_catch* yy97;
  xec_declaration* yy116;
  xec_constructor_table* yy127;
  xec_statement_compound* yy163;
  xec_expression* yy218;
} YYMINORTYPE;
#ifndef YYSTACKDEPTH
#define YYSTACKDEPTH 100
#endif
#define XecParseARG_SDECL  xec_parser* p ;
#define XecParseARG_PDECL , xec_parser* p 
#define XecParseARG_FETCH  xec_parser* p  = yypParser->p 
#define XecParseARG_STORE yypParser->p  = p 
#define YYNSTATE 445
#define YYNRULE 222
#define YY_NO_ACTION      (YYNSTATE+YYNRULE+2)
#define YY_ACCEPT_ACTION  (YYNSTATE+YYNRULE+1)
#define YY_ERROR_ACTION   (YYNSTATE+YYNRULE)

/* The yyzerominor constant is used to initialize instances of
** YYMINORTYPE objects to zero. */
static const YYMINORTYPE yyzerominor = { 0 };

/* Define the yytestcase() macro to be a no-op if is not already defined
** otherwise.
**
** Applications can choose to define yytestcase() in the %include section
** to a macro that can assist in verifying code coverage.  For production
** code the yytestcase() macro should be turned off.  But it is useful
** for testing.
*/
#ifndef yytestcase
# define yytestcase(X)
#endif


/* Next are the tables used to determine what action to take based on the
** current state and lookahead token.  These tables are used to implement
** functions that take a state number and lookahead value and return an
** action integer.  
**
** Suppose the action integer is N.  Then the action is determined as
** follows
**
**   0 <= N < YYNSTATE                  Shift N.  That is, push the lookahead
**                                      token onto the stack and goto state N.
**
**   YYNSTATE <= N < YYNSTATE+YYNRULE   Reduce by rule N-YYNSTATE.
**
**   N == YYNSTATE+YYNRULE              A syntax error has occurred.
**
**   N == YYNSTATE+YYNRULE+1            The parser accepts its input.
**
**   N == YYNSTATE+YYNRULE+2            No such action.  Denotes unused
**                                      slots in the yy_action[] table.
**
** The action table is constructed as a single large table named yy_action[].
** Given state S and lookahead X, the action is computed as
**
**      yy_action[ yy_shift_ofst[S] + X ]
**
** If the index value yy_shift_ofst[S]+X is out of range or if the value
** yy_lookahead[yy_shift_ofst[S]+X] is not equal to X or if yy_shift_ofst[S]
** is equal to YY_SHIFT_USE_DFLT, it means that the action is not in the table
** and that yy_default[S] should be used instead.  
**
** The formula above is for computing the action when the lookahead is
** a terminal symbol.  If the lookahead is a non-terminal (as occurs after
** a reduce action) then the yy_reduce_ofst[] array is used in place of
** the yy_shift_ofst[] array and YY_REDUCE_USE_DFLT is used in place of
** YY_SHIFT_USE_DFLT.
**
** The following are the tables generated in this section:
**
**  yy_action[]        A single table containing all actions.
**  yy_lookahead[]     A table containing the lookahead for each entry in
**                     yy_action.  Used to detect hash collisions.
**  yy_shift_ofst[]    For each state, the offset into yy_action for
**                     shifting terminals.
**  yy_reduce_ofst[]   For each state, the offset into yy_action for
**                     shifting non-terminals after a reduce.
**  yy_default[]       Default action for each state.
*/
static const YYACTIONTYPE yy_action[] = {
 /*     0 */   445,  254,  337,    8,  368,  134,  151,  232,   28,   30,
 /*    10 */     1,  136,  343,  230,  173,  109,  121,  327,  383,   31,
 /*    20 */    47,  119,  300,  299,  298,  297,  295,  101,  102,  106,
 /*    30 */   107,   99,  100,  133,  373,  128,  228,   15,  304,  132,
 /*    40 */   141,  140,  130,  139,  294,  177,  279,  162,  178,  166,
 /*    50 */   237,  233,  223,  160,  203,  154,  386,  371,   80,   88,
 /*    60 */    87,   86,   85,   84,   83,   82,   81,   89,   40,   42,
 /*    70 */   266,   64,  275,  186,    5,  198,    4,  205,  207,   32,
 /*    80 */    59,  254,   79,    8,  292,  291,  151,  232,   28,   30,
 /*    90 */     1,  344,  343,  230,  171,  109,  121,  350,   76,   31,
 /*   100 */    46,  119,  300,  299,  298,  297,  295,  101,  102,  106,
 /*   110 */   107,   99,  100,  133,  190,  128,  110,   75,  304,  132,
 /*   120 */   141,  140,  130,  139,  294,  177,  279,  162,  178,  166,
 /*   130 */   237,  233,  223,  161,  394,  154,  386,  133,  112,  128,
 /*   140 */    97,   96,  145,  132,  141,  140,  130,  139,    1,   42,
 /*   150 */   266,   64,  275,  186,    5,  198,  302,  205,  207,   32,
 /*   160 */    59,  254,  429,    8,   77,   73,  151,  232,   28,   30,
 /*   170 */     1,  345,  343,  230,  173,  109,  121,  327,  430,   31,
 /*   180 */    68,  119,  300,  299,  298,  297,  295,  101,  102,  106,
 /*   190 */   107,   99,  100,  133,  397,  128,  228,   12,  304,  132,
 /*   200 */   141,  140,  130,  139,  294,  177,  279,  162,  178,  166,
 /*   210 */   237,  233,  216,  338,  394,  154,  386,  133,   65,  128,
 /*   220 */    52,  280,  155,  132,  141,  140,  130,  139,   92,   42,
 /*   230 */   266,   64,  275,  186,    5,  198,  334,  205,  207,   32,
 /*   240 */    59,  446,  254,   55,    8,  249,  165,  151,  232,   28,
 /*   250 */    30,    1,  321,  343,  230,  171,  109,  121,  350,   57,
 /*   260 */    31,   56,  119,  300,  299,  298,  297,  295,  101,  102,
 /*   270 */   106,  107,   99,  100,  133,  303,  128,  249,  183,  304,
 /*   280 */   132,  141,  140,  130,  139,  294,  177,  279,  162,  178,
 /*   290 */   166,  237,  233,  220,  333,  148,  154,  386,  133,  317,
 /*   300 */   128,   39,  319,  236,  132,  141,  140,  130,  139,   58,
 /*   310 */    42,  266,   64,  275,  186,    5,  198,   91,  205,  207,
 /*   320 */    32,   59,  254,  374,    8,  249,  168,  151,  232,   28,
 /*   330 */    30,    1,  113,  343,  230,  170,  109,  111,    9,  113,
 /*   340 */    31,   43,  119,  300,  299,  298,  297,  295,  101,  102,
 /*   350 */   106,  107,   99,  100,  133,  404,  128,  323,  365,  304,
 /*   360 */   132,  141,  140,  130,  139,  294,  177,  279,  162,  178,
 /*   370 */   166,  237,  233,  243,  316,  157,  154,  386,  133,   36,
 /*   380 */   128,   60,  313,  242,  132,  141,  140,  130,  139,   61,
 /*   390 */    42,  266,   64,  275,  186,    5,  198,   23,  205,  207,
 /*   400 */    32,   59,  668,    2,  117,  443,  137,  389,  391,  116,
 /*   410 */   306,  115,  439,   90,  304,  131,  129,  135,  126,  138,
 /*   420 */   294,  177,  279,  162,  178,  166,  237,  233,  223,  160,
 /*   430 */   229,  221,  182,  432,   28,  150,  436,   28,  343,  113,
 /*   440 */   405,  343,  146,  124,  437,  245,    1,   33,   20,  351,
 /*   450 */   119,  114,  117,  357,  137,  389,  393,  406,  431,   30,
 /*   460 */     3,  158,  443,  152,  175,    1,  116,    1,  115,  439,
 /*   470 */    70,  304,  131,  129,  135,  126,  138,  294,  177,  279,
 /*   480 */   162,  178,  166,  237,  233,  223,  160,  229,  221,  182,
 /*   490 */   432,  372,  343,  436,   45,  157,  121,  390,  354,   37,
 /*   500 */   124,  437,  245,  443,   33,   20,  351,  116,   74,  115,
 /*   510 */   349,  407,  304,  131,  129,  135,  126,  138,  294,  177,
 /*   520 */   279,  162,  178,  166,  237,  233,  223,  160,  229,  221,
 /*   530 */   182,  432,   29,   30,  436,  113,  309,  410,  190,   30,
 /*   540 */   111,  124,  437,  245,  172,   33,   20,  348,  443,    1,
 /*   550 */    67,  379,  142,   26,  127,   78,  359,  304,  131,  129,
 /*   560 */   135,  126,  138,  294,  177,  279,  162,  178,  166,  237,
 /*   570 */   233,  223,  160,  229,  221,  182,  432,  311,   21,  436,
 /*   580 */   105,   98,  103,  104,   62,   17,  124,  437,  245,  443,
 /*   590 */    33,   20,  322,  142,  153,  127,  413,  149,  304,  131,
 /*   600 */   129,  135,  126,  138,  294,  177,  279,  162,  178,  166,
 /*   610 */   237,  233,  223,  160,  229,  221,  182,  432,  157,   72,
 /*   620 */   436,   51,   36,  307,  150,  289,   28,  124,  437,  245,
 /*   630 */   343,   33,   20,  346,  443,  190,  375,  343,  142,  119,
 /*   640 */   127,  121,  392,  304,  131,  129,  135,  126,  138,  294,
 /*   650 */   177,  279,  162,  178,  166,  237,  233,  223,  160,  229,
 /*   660 */   221,  182,  432,  310,  396,  436,   93,   94,   95,  343,
 /*   670 */    34,   35,  124,  437,  245,  443,   33,   20,  340,  142,
 /*   680 */    66,  127,  314,  323,  304,  131,  129,  135,  126,  138,
 /*   690 */   294,  177,  279,  162,  178,  166,  237,  233,  223,  160,
 /*   700 */   229,  221,  182,  432,  320,   30,  436,  411,  337,  331,
 /*   710 */   170,  326,  318,  124,  437,  245,   53,   33,   20,  336,
 /*   720 */   443,  324,  395,  365,  142,  312,  127,  355,  362,  304,
 /*   730 */   131,  129,  135,  126,  138,  294,  177,  279,  162,  178,
 /*   740 */   166,  237,  233,  223,  160,  229,  221,  182,  432,  358,
 /*   750 */    30,  436,  147,  328,    1,  356,  287,  143,  124,  437,
 /*   760 */   245,  443,   33,   20,  301,  142,  113,  127,  367,  274,
 /*   770 */   304,  131,  129,  135,  126,  138,  294,  177,  279,  162,
 /*   780 */   178,  166,  237,  233,  223,  160,  229,  221,  182,  432,
 /*   790 */   360,   30,  436,  184,   19,    6,  174,  339,   14,  124,
 /*   800 */   437,  245,   49,   33,   20,  192,  443,   18,  370,   25,
 /*   810 */   142,  335,  127,  412,  378,  304,  131,  129,  135,  126,
 /*   820 */   138,  294,  177,  279,  162,  178,  166,  237,  233,  223,
 /*   830 */   160,  229,  221,  182,  432,   16,  377,  436,  329,  330,
 /*   840 */   444,   22,  409,    7,  124,  437,  245,  443,   33,   20,
 /*   850 */   315,  142,  376,  127,   11,  397,  304,  131,  129,  135,
 /*   860 */   126,  138,  294,  177,  279,  162,  178,  166,  237,  233,
 /*   870 */   223,  160,  229,  221,  182,  432,  338,   30,  436,  382,
 /*   880 */   290,   10,  176,  193,  364,  124,  437,  245,   48,   33,
 /*   890 */    20,  284,  443,   27,  352,  408,  142,  196,  127,  296,
 /*   900 */   400,  304,  131,  129,  135,  126,  138,  294,  177,  279,
 /*   910 */   162,  178,  166,  237,  233,  223,  160,  229,  221,  182,
 /*   920 */   432,   24,  669,  436,   13,  669,  669,  669,  669,  669,
 /*   930 */   124,  437,  245,  443,   33,   20,  342,  142,  669,  127,
 /*   940 */   669,  669,  304,  131,  129,  135,  126,  138,  294,  177,
 /*   950 */   279,  162,  178,  166,  237,  233,  223,  160,  229,  221,
 /*   960 */   182,  432,  669,   30,  436,  669,  669,  669,  176,  669,
 /*   970 */   669,  124,  437,  245,   71,   33,   20,  261,  443,  669,
 /*   980 */   669,  669,  142,  669,  127,  669,  669,  304,  131,  129,
 /*   990 */   135,  126,  138,  294,  177,  279,  162,  178,  166,  237,
 /*  1000 */   233,  223,  160,  229,  221,  182,  432,  669,  669,  436,
 /*  1010 */   669,  669,  669,  669,  669,  669,  124,  437,  245,  443,
 /*  1020 */    33,   20,  325,  142,  669,  127,  669,  669,  304,  131,
 /*  1030 */   129,  135,  126,  138,  294,  177,  279,  162,  178,  166,
 /*  1040 */   237,  233,  223,  160,  229,  221,  182,  432,  669,   30,
 /*  1050 */   436,  669,  669,  669,  170,  669,  669,  124,  437,  245,
 /*  1060 */    43,   33,   20,  293,  443,  669,  669,  669,  142,  669,
 /*  1070 */   127,  669,  669,  304,  131,  129,  135,  126,  138,  294,
 /*  1080 */   177,  279,  162,  178,  166,  237,  233,  223,  160,  229,
 /*  1090 */   221,  182,  432,  669,  669,  436,  669,  669,  669,  669,
 /*  1100 */   669,  669,  124,  437,  245,  443,   33,   20,  332,  142,
 /*  1110 */   669,  127,  669,  669,  304,  131,  129,  135,  126,  138,
 /*  1120 */   294,  177,  279,  162,  178,  166,  237,  233,  223,  160,
 /*  1130 */   229,  221,  182,  432,  669,   30,  436,  669,  669,  669,
 /*  1140 */   174,  669,  669,  124,  437,  245,   69,   33,   20,  353,
 /*  1150 */   443,  669,  669,  669,  142,  669,  127,  669,  669,  304,
 /*  1160 */   131,  129,  135,  126,  138,  294,  177,  279,  162,  178,
 /*  1170 */   166,  237,  233,  223,  160,  229,  221,  182,  432,  669,
 /*  1180 */   669,  436,  669,  669,  669,  669,  669,  669,  124,  437,
 /*  1190 */   245,  443,   33,   20,  347,  142,  669,  127,  669,  669,
 /*  1200 */   304,  131,  129,  135,  126,  138,  294,  177,  279,  162,
 /*  1210 */   178,  166,  237,  233,  223,  160,  229,  221,  182,  432,
 /*  1220 */   669,  669,  436,  669,  669,  669,  669,  669,  669,  124,
 /*  1230 */   437,  245,  669,   33,   20,  118,  428,  669,  142,  669,
 /*  1240 */   127,  669,  669,  304,  131,  129,  135,  126,  138,  294,
 /*  1250 */   177,  279,  162,  178,  166,  237,  233,  223,  160,  229,
 /*  1260 */   221,  182,  361,  384,  125,  388,  438,  669,  669,  428,
 /*  1270 */   669,  142,  669,  127,  669,  218,  304,  131,  129,  135,
 /*  1280 */   126,  138,  294,  177,  279,  162,  178,  166,  237,  233,
 /*  1290 */   223,  160,  229,  221,  182,  361,  384,  125,  388,  438,
 /*  1300 */   669,  669,  428,  669,  142,  669,  127,  669,  188,  304,
 /*  1310 */   131,  129,  135,  126,  138,  294,  177,  279,  162,  178,
 /*  1320 */   166,  237,  233,  223,  160,  229,  221,  182,  361,  384,
 /*  1330 */   123,  388,  438,  669,  669,  428,  669,  142,  669,  127,
 /*  1340 */   669,  263,  304,  131,  129,  135,  126,  138,  294,  177,
 /*  1350 */   279,  162,  178,  166,  237,  233,  223,  160,  229,  221,
 /*  1360 */   182,  361,  384,  125,  388,  438,  669,  669,  428,  669,
 /*  1370 */   142,  669,  127,  669,  269,  304,  131,  129,  135,  126,
 /*  1380 */   138,  294,  177,  279,  162,  178,  166,  237,  233,  223,
 /*  1390 */   160,  229,  221,  182,  361,  384,  125,  388,  438,  669,
 /*  1400 */   669,  428,  669,  142,  669,  127,  669,  241,  304,  131,
 /*  1410 */   129,  135,  126,  138,  294,  177,  279,  162,  178,  166,
 /*  1420 */   237,  233,  223,  160,  229,  221,  182,  361,  384,  125,
 /*  1430 */   388,  438,  669,  669,  428,  669,  142,  669,  127,  669,
 /*  1440 */   257,  304,  131,  129,  135,  126,  138,  294,  177,  279,
 /*  1450 */   162,  178,  166,  237,  233,  223,  160,  229,  221,  182,
 /*  1460 */   361,  384,  125,  388,  253,  428,  669,  142,  669,  127,
 /*  1470 */   669,  669,  304,  131,  129,  135,  126,  138,  294,  177,
 /*  1480 */   279,  162,  178,  166,  237,  233,  223,  160,  229,  221,
 /*  1490 */   182,  361,  384,  125,  388,  267,  428,  669,  142,  669,
 /*  1500 */   127,  669,  669,  304,  131,  129,  135,  126,  138,  294,
 /*  1510 */   177,  279,  162,  178,  166,  237,  233,  223,  160,  229,
 /*  1520 */   221,  182,  361,  384,  125,  388,  195,  669,  428,  669,
 /*  1530 */   142,  669,  127,  669,  669,  304,  131,  129,  135,  126,
 /*  1540 */   138,  294,  177,  279,  162,  178,  166,  237,  233,  223,
 /*  1550 */   160,  229,  221,  182,  361,  384,  125,  388,  265,  669,
 /*  1560 */   211,  669,  142,  669,  127,  669,  669,  304,  131,  129,
 /*  1570 */   135,  126,  138,  294,  177,  279,  162,  178,  166,  237,
 /*  1580 */   233,  223,  160,  229,  221,  182,  361,  384,  208,  388,
 /*  1590 */   669,  259,  669,  142,  669,  127,  669,  669,  304,  131,
 /*  1600 */   129,  135,  126,  138,  294,  177,  279,  162,  178,  166,
 /*  1610 */   237,  233,  223,  160,  229,  221,  182,  361,  384,  208,
 /*  1620 */   388,  669,  669,  215,  669,  142,  669,  127,  669,  669,
 /*  1630 */   304,  131,  129,  135,  126,  138,  294,  177,  279,  162,
 /*  1640 */   178,  166,  237,  233,  223,  160,  229,  221,  182,  361,
 /*  1650 */   384,  208,  388,  669,  669,  441,  669,  142,  669,  127,
 /*  1660 */   669,  669,  304,  131,  129,  135,  126,  138,  294,  177,
 /*  1670 */   279,  162,  178,  166,  237,  233,  223,  160,  229,  221,
 /*  1680 */   182,  361,  384,  208,  388,  142,  669,  127,  669,  669,
 /*  1690 */   304,  131,  129,  135,  126,  138,  294,  177,  279,  162,
 /*  1700 */   178,  166,  237,  233,  223,  160,  229,  221,  182,  361,
 /*  1710 */   401,  669,  210,  669,  669,  201,  197,  669,  194,  669,
 /*  1720 */   142,  669,  127,  669,  669,  304,  131,  129,  135,  126,
 /*  1730 */   138,  294,  177,  279,  162,  178,  166,  237,  233,  223,
 /*  1740 */   160,  229,  221,  182,  361,  384,  208,  388,  669,  669,
 /*  1750 */   414,  669,  142,  669,  127,  669,  669,  304,  131,  129,
 /*  1760 */   135,  126,  138,  294,  177,  279,  162,  178,  166,  237,
 /*  1770 */   233,  223,  160,  229,  221,  182,  361,  384,  208,  388,
 /*  1780 */   435,  669,  142,  669,  127,  669,  669,  304,  131,  129,
 /*  1790 */   135,  126,  138,  294,  177,  279,  162,  178,  166,  237,
 /*  1800 */   233,  223,  160,  229,  221,  182,  361,  384,  208,  388,
 /*  1810 */   133,  669,  128,  669,  669,  304,  132,  141,  140,  130,
 /*  1820 */   139,  294,  177,  279,  162,  178,  166,  237,  233,  223,
 /*  1830 */   160,  229,  221,  182,  361,  271,  669,  669,  669,  669,
 /*  1840 */   669,  669,  204,  240,  133,  669,  128,  669,  669,  304,
 /*  1850 */   132,  141,  140,  130,  139,  294,  177,  279,  162,  178,
 /*  1860 */   166,  237,  233,  223,  160,  229,  221,  182,  361,  384,
 /*  1870 */   169,  669,  142,  669,  127,  669,  669,  304,  131,  129,
 /*  1880 */   135,  126,  138,  294,  177,  279,  162,  178,  166,  237,
 /*  1890 */   233,  223,  160,  229,  221,  182,  361,  402,  142,  403,
 /*  1900 */   127,  669,  669,  304,  131,  129,  135,  126,  138,  294,
 /*  1910 */   177,  279,  162,  178,  166,  237,  233,  223,  160,  229,
 /*  1920 */   221,  182,  361,  385,  142,  387,  127,  669,  669,  304,
 /*  1930 */   131,  129,  135,  126,  138,  294,  177,  279,  162,  178,
 /*  1940 */   166,  237,  233,  223,  160,  229,  221,  182,  361,  433,
 /*  1950 */   133,  434,  128,  669,  669,  304,  132,  141,  140,  130,
 /*  1960 */   139,  294,  177,  279,  162,  178,  166,  237,  233,  223,
 /*  1970 */   160,  229,  221,  182,  361,  217,  133,  669,  128,  669,
 /*  1980 */   669,  304,  132,  141,  140,  130,  139,  294,  177,  279,
 /*  1990 */   162,  178,  166,  237,  233,  223,  160,  229,  221,  182,
 /*  2000 */   361,  206,  133,  669,  128,  669,  669,  304,  132,  141,
 /*  2010 */   140,  130,  139,  294,  177,  279,  162,  178,  166,  237,
 /*  2020 */   233,  223,  160,  229,  221,  182,  361,  187,  133,  669,
 /*  2030 */   128,  669,  669,  304,  132,  141,  140,  130,  139,  294,
 /*  2040 */   177,  279,  162,  178,  166,  237,  233,  223,  160,  229,
 /*  2050 */   221,  182,  361,  234,  133,  669,  128,  669,  669,  304,
 /*  2060 */   132,  141,  140,  130,  139,  294,  177,  279,  162,  178,
 /*  2070 */   166,  237,  233,  223,  160,  229,  221,  182,  361,  246,
 /*  2080 */   133,  669,  128,  669,  669,  304,  132,  141,  140,  130,
 /*  2090 */   139,  294,  177,  279,  162,  178,  166,  237,  233,  223,
 /*  2100 */   160,  229,  221,  182,  361,  185,  133,  669,  128,  669,
 /*  2110 */   669,  304,  132,  141,  140,  130,  139,  294,  177,  279,
 /*  2120 */   162,  178,  166,  237,  233,  223,  160,  229,  221,  182,
 /*  2130 */   361,  191,  133,  669,  128,  669,  669,  304,  132,  141,
 /*  2140 */   140,  130,  139,  294,  177,  279,  162,  178,  166,  237,
 /*  2150 */   233,  223,  160,  229,  221,  182,  361,  200,  133,  669,
 /*  2160 */   128,  669,  669,  304,  132,  141,  140,  130,  139,  294,
 /*  2170 */   177,  279,  162,  178,  166,  237,  233,  223,  160,  229,
 /*  2180 */   221,  182,  361,  247,  133,  669,  128,  669,  669,  304,
 /*  2190 */   132,  141,  140,  130,  139,  294,  177,  279,  162,  178,
 /*  2200 */   166,  237,  233,  223,  160,  229,  221,  182,  361,  366,
 /*  2210 */   133,  669,  128,  669,  669,  304,  132,  141,  140,  130,
 /*  2220 */   139,  294,  177,  279,  162,  178,  166,  237,  233,  223,
 /*  2230 */   160,  229,  221,  182,  361,  209,  133,  669,  128,  669,
 /*  2240 */   669,  304,  132,  141,  140,  130,  139,  294,  177,  279,
 /*  2250 */   162,  178,  166,  237,  233,  223,  160,  229,  221,  182,
 /*  2260 */   361,  250,  133,  669,  128,  669,  669,  304,  132,  141,
 /*  2270 */   140,  130,  139,  294,  177,  279,  162,  178,  166,  237,
 /*  2280 */   233,  223,  160,  229,  221,  182,  361,  252,  133,  669,
 /*  2290 */   128,  669,  669,  304,  132,  141,  140,  130,  139,  294,
 /*  2300 */   177,  279,  162,  178,  166,  237,  233,  223,  160,  229,
 /*  2310 */   221,  182,  361,  244,  133,  669,  128,  669,  669,  304,
 /*  2320 */   132,  141,  140,  130,  139,  294,  177,  279,  162,  178,
 /*  2330 */   166,  237,  233,  223,  160,  229,  221,  182,  361,  239,
 /*  2340 */   133,  669,  128,  669,  669,  304,  132,  141,  140,  130,
 /*  2350 */   139,  294,  177,  279,  162,  178,  166,  237,  233,  223,
 /*  2360 */   160,  229,  221,  182,  361,  226,  133,  669,  128,  669,
 /*  2370 */   669,  304,  132,  141,  140,  130,  139,  294,  177,  279,
 /*  2380 */   162,  178,  166,  237,  233,  223,  160,  229,  221,  182,
 /*  2390 */   361,  231,  133,  669,  128,  669,  669,  304,  132,  141,
 /*  2400 */   140,  130,  139,  294,  177,  279,  162,  178,  166,  237,
 /*  2410 */   233,  223,  160,  229,  221,  182,  361,  224,  133,  669,
 /*  2420 */   128,  669,  669,  304,  132,  141,  140,  130,  139,  294,
 /*  2430 */   177,  279,  162,  178,  166,  237,  233,  223,  160,  229,
 /*  2440 */   221,  182,  361,  202,  133,  669,  128,  669,  669,  304,
 /*  2450 */   132,  141,  140,  130,  139,  294,  177,  279,  162,  178,
 /*  2460 */   166,  237,  233,  223,  160,  229,  221,  182,  361,  273,
 /*  2470 */   133,  669,  128,  669,  669,  304,  132,  141,  140,  130,
 /*  2480 */   139,  294,  177,  279,  162,  178,  166,  237,  233,  223,
 /*  2490 */   160,  229,  221,  182,  361,  385,  133,  669,  128,  669,
 /*  2500 */   669,  304,  132,  141,  140,  130,  139,  294,  177,  279,
 /*  2510 */   162,  178,  166,  237,  233,  223,  160,  229,  221,  182,
 /*  2520 */   361,  260,  133,  669,  128,  669,  669,  304,  132,  141,
 /*  2530 */   140,  130,  139,  294,  177,  279,  162,  178,  166,  237,
 /*  2540 */   233,  223,  160,  229,  221,  182,  361,  256,  133,  669,
 /*  2550 */   128,  669,  669,  304,  132,  141,  140,  130,  139,  294,
 /*  2560 */   177,  279,  162,  178,  166,  237,  233,  223,  160,  229,
 /*  2570 */   221,  182,  361,  214,  133,  669,  128,  669,  669,  304,
 /*  2580 */   132,  141,  140,  130,  139,  294,  177,  279,  162,  178,
 /*  2590 */   166,  237,  233,  223,  160,  229,  221,  182,  361,  381,
 /*  2600 */   133,  669,  128,  669,  669,  304,  132,  141,  140,  130,
 /*  2610 */   139,  294,  177,  279,  162,  178,  166,  237,  233,  223,
 /*  2620 */   160,  229,  221,  182,  361,  369,  133,  669,  128,  669,
 /*  2630 */   669,  304,  132,  141,  140,  130,  139,  294,  177,  279,
 /*  2640 */   162,  178,  166,  237,  233,  223,  160,  229,  221,  182,
 /*  2650 */   361,  235,  150,  669,   28,  669,   38,  669,  343,  230,
 /*  2660 */   669,  109,  120,  669,  669,   31,  669,  119,  300,  299,
 /*  2670 */   298,  297,  295,  101,  102,  106,  107,   99,  100,  133,
 /*  2680 */   669,  128,  669,  669,  304,  132,  141,  140,  130,  139,
 /*  2690 */   294,  177,  279,  162,  178,  166,  237,  233,  248,  669,
 /*  2700 */   669,  154,  386,  669,  669,  669,  669,  669,  150,  669,
 /*  2710 */    28,  669,   38,  669,  343,  230,  669,  109,  122,  669,
 /*  2720 */   669,   31,  669,  119,  300,  299,  298,  297,  295,  101,
 /*  2730 */   102,  106,  107,   99,  100,  669,  133,  669,  128,  669,
 /*  2740 */   669,  304,  132,  141,  140,  130,  139,  294,  177,  279,
 /*  2750 */   162,  178,  166,  237,  233,  219,  669,  154,  386,  669,
 /*  2760 */   669,  669,  669,  669,  150,  669,   28,  341,   38,  669,
 /*  2770 */   343,  230,  669,  109,  669,  669,  669,   31,  669,  119,
 /*  2780 */   300,  299,  298,  297,  295,  101,  102,  106,  107,   99,
 /*  2790 */   100,  669,  133,  669,  128,  669,  669,  304,  132,  141,
 /*  2800 */   140,  130,  139,  294,  177,  279,  162,  178,  166,  237,
 /*  2810 */   233,  258,  669,  154,  386,  669,  669,  669,  669,  669,
 /*  2820 */   150,  669,   28,  669,   38,  669,  343,  230,  669,  109,
 /*  2830 */   669,  308,  669,   31,  669,  119,  300,  299,  298,  297,
 /*  2840 */   295,  101,  102,  106,  107,   99,  100,  669,  133,  669,
 /*  2850 */   128,  669,  669,  304,  132,  141,  140,  130,  139,  294,
 /*  2860 */   177,  279,  162,  178,  166,  237,  233,  270,  669,  154,
 /*  2870 */   386,  669,  669,  669,  669,  669,  150,  669,   28,  669,
 /*  2880 */    38,  669,  343,  230,  669,  109,  669,  669,  669,   31,
 /*  2890 */   399,  119,  300,  299,  298,  297,  295,  101,  102,  106,
 /*  2900 */   107,   99,  100,  669,  133,  669,  128,  669,  669,  304,
 /*  2910 */   132,  141,  140,  130,  139,  294,  177,  279,  162,  178,
 /*  2920 */   166,  237,  233,  212,  669,  154,  386,  669,  669,  669,
 /*  2930 */   669,  669,  150,  669,   28,  669,   38,  669,  343,  230,
 /*  2940 */   669,  109,  669,  305,  669,   31,  669,  119,  300,  299,
 /*  2950 */   298,  297,  295,  101,  102,  106,  107,   99,  100,  669,
 /*  2960 */   133,  669,  128,  669,  669,  304,  132,  141,  140,  130,
 /*  2970 */   139,  294,  177,  279,  162,  178,  166,  237,  233,  268,
 /*  2980 */   669,  154,  386,  669,  669,  669,  669,  669,  150,  669,
 /*  2990 */    28,  669,   38,  669,  343,  230,  669,  109,  669,  669,
 /*  3000 */   669,   31,  276,  119,  300,  299,  298,  297,  295,  101,
 /*  3010 */   102,  106,  107,   99,  100,  669,  133,  669,  128,  669,
 /*  3020 */   669,  304,  132,  141,  140,  130,  139,  294,  177,  279,
 /*  3030 */   162,  178,  166,  237,  233,  238,  669,  154,  669,  669,
 /*  3040 */   669,  669,  669,  669,  150,  669,   28,  669,   38,  669,
 /*  3050 */   343,  230,  669,  109,  669,  669,  669,   31,  669,  119,
 /*  3060 */   300,  299,  298,  297,  295,  101,  102,  106,  107,   99,
 /*  3070 */   100,  669,  133,  669,  128,  669,  669,  304,  132,  141,
 /*  3080 */   140,  130,  139,  294,  177,  279,  162,  178,  166,  237,
 /*  3090 */   222,  669,  669,  154,  386,  669,  669,  669,  669,  669,
 /*  3100 */   150,  144,   28,   30,   38,    1,  343,  230,  172,  108,
 /*  3110 */   159,  669,  669,   31,   44,  119,  300,  299,  298,  297,
 /*  3120 */   295,  101,  102,  106,  107,   99,  100,  669,  669,  669,
 /*  3130 */   669,  669,  669,  669,  669,  669,  669,  669,  669,  669,
 /*  3140 */    39,   63,  669,  669,  415,  669,  669,  669,  264,  154,
 /*  3150 */    30,  398,  669,  669,  669,  175,  150,  669,   28,  669,
 /*  3160 */    38,   50,  343,  230,  669,  109,  669,  669,  669,   31,
 /*  3170 */   262,  119,  300,  299,  298,  297,  295,  101,  102,  106,
 /*  3180 */   107,   99,  100,  416,  417,  418,  419,  420,  421,  422,
 /*  3190 */   423,  424,  425,  426,  427,  669,   41,  669,  380,  669,
 /*  3200 */   415,  669,   54,  669,  669,  154,  669,  669,  669,  669,
 /*  3210 */   669,  669,  150,  669,   28,  669,   38,  669,  343,  230,
 /*  3220 */   669,  109,  669,  669,  669,   31,  255,  119,  300,  299,
 /*  3230 */   298,  297,  295,  101,  102,  106,  107,   99,  100,  416,
 /*  3240 */   417,  418,  419,  420,  421,  422,  423,  424,  425,  426,
 /*  3250 */   427,  669,   39,  669,  669,  669,  415,  669,  669,  669,
 /*  3260 */   669,  154,  669,  669,  669,  669,  669,  669,  150,  669,
 /*  3270 */    28,  669,   38,  669,  343,  230,  669,  109,  669,  669,
 /*  3280 */   669,   31,  199,  119,  300,  299,  298,  297,  295,  101,
 /*  3290 */   102,  106,  107,   99,  100,  416,  417,  418,  419,  420,
 /*  3300 */   421,  422,  423,  424,  425,  426,  427,  189,  669,   30,
 /*  3310 */   669,  669,  669,  669,  172,  669,  669,  154,  669,  669,
 /*  3320 */    44,  669,  669,  669,  150,  669,   28,  669,   38,  669,
 /*  3330 */   343,  230,  669,  109,  669,  669,  669,   31,  225,  119,
 /*  3340 */   300,  299,  298,  297,  295,  101,  102,  106,  107,   99,
 /*  3350 */   100,  669,  669,  669,  669,  669,  669,  398,  133,  669,
 /*  3360 */   128,  669,  669,  304,  132,  141,  140,  130,  139,  294,
 /*  3370 */   177,  279,  163,  154,  669,  669,  669,  669,  669,  669,
 /*  3380 */   150,  669,   28,  669,   38,  669,  343,  230,  669,  109,
 /*  3390 */   669,  669,  669,   31,  251,  119,  300,  299,  298,  297,
 /*  3400 */   295,  101,  102,  106,  107,   99,  100,  669,  669,  669,
 /*  3410 */   669,  669,  669,  669,  133,  669,  128,  669,  669,  304,
 /*  3420 */   132,  141,  140,  130,  139,  294,  177,  279,  164,  154,
 /*  3430 */   669,  669,  669,  669,  669,  669,  150,  669,   28,  669,
 /*  3440 */    38,  363,  343,  230,  669,  109,  669,  669,  669,   31,
 /*  3450 */   669,  119,  300,  299,  298,  297,  295,  101,  102,  106,
 /*  3460 */   107,   99,  100,  669,  669,  669,  669,  669,  669,  669,
 /*  3470 */   133,  669,  128,  669,  669,  304,  132,  141,  140,  130,
 /*  3480 */   139,  294,  177,  286,  669,  154,  669,  669,  669,  669,
 /*  3490 */   669,  669,  150,  669,   28,  669,   38,  669,  343,  230,
 /*  3500 */   669,  109,  669,  669,  669,   31,  213,  119,  300,  299,
 /*  3510 */   298,  297,  295,  101,  102,  106,  107,   99,  100,  669,
 /*  3520 */   669,  669,  669,  669,  669,  669,  133,  669,  128,  669,
 /*  3530 */   669,  304,  132,  141,  140,  130,  139,  294,  177,  285,
 /*  3540 */   669,  154,  669,  669,  669,  669,  669,  669,  150,  669,
 /*  3550 */    28,  669,   38,  669,  343,  230,  669,  109,  669,  669,
 /*  3560 */   669,   31,  669,  119,  300,  299,  298,  297,  295,  101,
 /*  3570 */   102,  106,  107,   99,  100,  669,  669,  669,  669,  669,
 /*  3580 */   669,  669,  133,  669,  128,  669,  669,  304,  132,  141,
 /*  3590 */   140,  130,  139,  294,  177,  278,  133,  154,  128,  669,
 /*  3600 */   669,  304,  132,  141,  140,  130,  139,  294,  177,  279,
 /*  3610 */   162,  178,  166,  237,  233,  223,  160,  229,  272,  150,
 /*  3620 */   669,   28,  133,  669,  128,  343,  669,  156,  132,  141,
 /*  3630 */   140,  130,  139,  669,  119,  300,  299,  298,  297,  295,
 /*  3640 */   101,  102,  106,  107,   99,  100,  669,  133,  669,  128,
 /*  3650 */   669,  669,  304,  132,  141,  140,  130,  139,  294,  177,
 /*  3660 */   279,  162,  178,  166,  227,  669,  669,  669,  669,  669,
 /*  3670 */   669,  669,  133,  669,  128,  669,  669,  304,  132,  141,
 /*  3680 */   140,  130,  139,  294,  177,  282,  133,  669,  128,  669,
 /*  3690 */   669,  304,  132,  141,  140,  130,  139,  294,  177,  279,
 /*  3700 */   162,  178,  167,  133,  669,  128,  669,  669,  304,  132,
 /*  3710 */   141,  140,  130,  139,  294,  177,  279,  162,  179,  669,
 /*  3720 */   669,  669,  669,  669,  133,  669,  128,  669,  669,  304,
 /*  3730 */   132,  141,  140,  130,  139,  294,  177,  279,  162,  181,
 /*  3740 */   669,  669,  133,  669,  128,  669,  669,  304,  132,  141,
 /*  3750 */   140,  130,  139,  294,  177,  279,  162,  180,  669,  669,
 /*  3760 */   669,  669,  133,  669,  128,  669,  669,  304,  132,  141,
 /*  3770 */   140,  130,  139,  294,  177,  281,  133,  669,  128,  669,
 /*  3780 */   669,  304,  132,  141,  140,  130,  139,  294,  177,  277,
 /*  3790 */   133,  669,  128,  669,  669,  304,  132,  141,  140,  130,
 /*  3800 */   139,  294,  177,  442,  133,  669,  128,  669,  669,  304,
 /*  3810 */   132,  141,  140,  130,  139,  294,  177,  440,  669,  133,
 /*  3820 */   669,  128,  669,  669,  304,  132,  141,  140,  130,  139,
 /*  3830 */   294,  177,  288,  669,  133,  669,  128,  669,  669,  304,
 /*  3840 */   132,  141,  140,  130,  139,  294,  177,  283,
};
static const YYCODETYPE yy_lookahead[] = {
 /*     0 */     0,    1,   84,    3,   86,   89,    6,    7,    8,    8,
 /*    10 */    10,   95,   12,   13,   13,   15,   16,   17,   56,   19,
 /*    20 */    19,   21,   22,   23,   24,   25,   26,   27,   28,   29,
 /*    30 */    30,   31,   32,   89,   20,   91,    4,    5,   94,   95,
 /*    40 */    96,   97,   98,   99,  100,  101,  102,  103,  104,  105,
 /*    50 */   106,  107,  108,  109,  110,   55,   56,   56,   42,   43,
 /*    60 */    44,   45,   46,   47,   48,   49,   50,   51,   14,   69,
 /*    70 */    70,   71,   72,   73,   74,   75,    9,   77,   78,   79,
 /*    80 */    80,    1,   52,    3,   27,   28,    6,    7,    8,    8,
 /*    90 */    10,   11,   12,   13,   13,   15,   16,   17,   14,   19,
 /*   100 */    19,   21,   22,   23,   24,   25,   26,   27,   28,   29,
 /*   110 */    30,   31,   32,   89,   13,   91,   15,   15,   94,   95,
 /*   120 */    96,   97,   98,   99,  100,  101,  102,  103,  104,  105,
 /*   130 */   106,  107,  108,  109,   86,   55,   56,   89,   15,   91,
 /*   140 */    29,   30,   94,   95,   96,   97,   98,   99,   10,   69,
 /*   150 */    70,   71,   72,   73,   74,   75,   17,   77,   78,   79,
 /*   160 */    80,    1,   20,    3,   54,   55,    6,    7,    8,    8,
 /*   170 */    10,   11,   12,   13,   13,   15,   16,   17,   20,   19,
 /*   180 */    19,   21,   22,   23,   24,   25,   26,   27,   28,   29,
 /*   190 */    30,   31,   32,   89,   56,   91,    4,    5,   94,   95,
 /*   200 */    96,   97,   98,   99,  100,  101,  102,  103,  104,  105,
 /*   210 */   106,  107,  108,   12,   86,   55,   56,   89,   14,   91,
 /*   220 */    19,   17,   94,   95,   96,   97,   98,   99,   39,   69,
 /*   230 */    70,   71,   72,   73,   74,   75,   12,   77,   78,   79,
 /*   240 */    80,    0,    1,   19,    3,   89,   90,    6,    7,    8,
 /*   250 */     8,   10,   12,   12,   13,   13,   15,   16,   17,   19,
 /*   260 */    19,   19,   21,   22,   23,   24,   25,   26,   27,   28,
 /*   270 */    29,   30,   31,   32,   89,   17,   91,   89,   90,   94,
 /*   280 */    95,   96,   97,   98,   99,  100,  101,  102,  103,  104,
 /*   290 */   105,  106,  107,  108,  130,  131,   55,   56,   89,   17,
 /*   300 */    91,   14,   12,   94,   95,   96,   97,   98,   99,   19,
 /*   310 */    69,   70,   71,   72,   73,   74,   75,   40,   77,   78,
 /*   320 */    79,   80,    1,   56,    3,   89,   90,    6,    7,    8,
 /*   330 */     8,   10,   10,   12,   13,   13,   15,   15,    9,   10,
 /*   340 */    19,   19,   21,   22,   23,   24,   25,   26,   27,   28,
 /*   350 */    29,   30,   31,   32,   89,   14,   91,   84,   85,   94,
 /*   360 */    95,   96,   97,   98,   99,  100,  101,  102,  103,  104,
 /*   370 */   105,  106,  107,  108,   12,   14,   55,   56,   89,   18,
 /*   380 */    91,   19,   12,   94,   95,   96,   97,   98,   99,   19,
 /*   390 */    69,   70,   71,   72,   73,   74,   75,    8,   77,   78,
 /*   400 */    79,   80,   82,   83,   89,   85,   91,   92,   93,   89,
 /*   410 */    17,   91,   92,   41,   94,   95,   96,   97,   98,   99,
 /*   420 */   100,  101,  102,  103,  104,  105,  106,  107,  108,  109,
 /*   430 */   110,  111,  112,  113,    8,    6,  116,    8,   12,   10,
 /*   440 */    20,   12,    6,  123,  124,  125,   10,  127,  128,  129,
 /*   450 */    21,   88,   89,   17,   91,   92,   93,    6,   56,    8,
 /*   460 */    83,    6,   85,    6,   13,   10,   89,   10,   91,   92,
 /*   470 */    19,   94,   95,   96,   97,   98,   99,  100,  101,  102,
 /*   480 */   103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
 /*   490 */   113,   11,   12,  116,    8,   14,   16,   17,   17,   18,
 /*   500 */   123,  124,  125,   85,  127,  128,  129,   89,   15,   91,
 /*   510 */    92,   20,   94,   95,   96,   97,   98,   99,  100,  101,
 /*   520 */   102,  103,  104,  105,  106,  107,  108,  109,  110,  111,
 /*   530 */   112,  113,   17,    8,  116,   10,   17,    6,   13,    8,
 /*   540 */    15,  123,  124,  125,   13,  127,  128,  129,   85,   10,
 /*   550 */    19,   56,   89,   17,   91,   53,   17,   94,   95,   96,
 /*   560 */    97,   98,   99,  100,  101,  102,  103,  104,  105,  106,
 /*   570 */   107,  108,  109,  110,  111,  112,  113,   12,    8,  116,
 /*   580 */    32,   33,   34,   35,   19,    9,  123,  124,  125,   85,
 /*   590 */   127,  128,  129,   89,    9,   91,   56,   55,   94,   95,
 /*   600 */    96,   97,   98,   99,  100,  101,  102,  103,  104,  105,
 /*   610 */   106,  107,  108,  109,  110,  111,  112,  113,   14,   15,
 /*   620 */   116,   15,   18,   20,    6,   15,    8,  123,  124,  125,
 /*   630 */    12,  127,  128,  129,   85,   13,   11,   12,   89,   21,
 /*   640 */    91,   16,   17,   94,   95,   96,   97,   98,   99,  100,
 /*   650 */   101,  102,  103,  104,  105,  106,  107,  108,  109,  110,
 /*   660 */   111,  112,  113,   17,   56,  116,   36,   37,   38,   12,
 /*   670 */   118,  118,  123,  124,  125,   85,  127,  128,  129,   89,
 /*   680 */    76,   91,   84,   84,   94,   95,   96,   97,   98,   99,
 /*   690 */   100,  101,  102,  103,  104,  105,  106,  107,  108,  109,
 /*   700 */   110,  111,  112,  113,   84,    8,  116,   84,   84,  130,
 /*   710 */    13,   84,   84,  123,  124,  125,   19,  127,  128,  129,
 /*   720 */    85,   84,   86,   85,   89,   84,   91,   85,   85,   94,
 /*   730 */    95,   96,   97,   98,   99,  100,  101,  102,  103,  104,
 /*   740 */   105,  106,  107,  108,  109,  110,  111,  112,  113,   85,
 /*   750 */     8,  116,   84,   84,   10,   85,   85,   84,  123,  124,
 /*   760 */   125,   85,  127,  128,  129,   89,   10,   91,   86,   89,
 /*   770 */    94,   95,   96,   97,   98,   99,  100,  101,  102,  103,
 /*   780 */   104,  105,  106,  107,  108,  109,  110,  111,  112,  113,
 /*   790 */    85,    8,  116,   89,    2,    9,   13,    9,    9,  123,
 /*   800 */   124,  125,   19,  127,  128,  129,   85,    9,   56,    8,
 /*   810 */    89,    9,   91,   20,   56,   94,   95,   96,   97,   98,
 /*   820 */    99,  100,  101,  102,  103,  104,  105,  106,  107,  108,
 /*   830 */   109,  110,  111,  112,  113,    9,   20,  116,   20,   20,
 /*   840 */    17,    8,   20,    9,  123,  124,  125,   85,  127,  128,
 /*   850 */   129,   89,   20,   91,    9,   56,   94,   95,   96,   97,
 /*   860 */    98,   99,  100,  101,  102,  103,  104,  105,  106,  107,
 /*   870 */   108,  109,  110,  111,  112,  113,   12,    8,  116,   20,
 /*   880 */    15,    9,   13,   73,   11,  123,  124,  125,   19,  127,
 /*   890 */   128,  129,   85,    8,   17,   20,   89,    9,   91,   17,
 /*   900 */    20,   94,   95,   96,   97,   98,   99,  100,  101,  102,
 /*   910 */   103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
 /*   920 */   113,    8,  132,  116,    9,  132,  132,  132,  132,  132,
 /*   930 */   123,  124,  125,   85,  127,  128,  129,   89,  132,   91,
 /*   940 */   132,  132,   94,   95,   96,   97,   98,   99,  100,  101,
 /*   950 */   102,  103,  104,  105,  106,  107,  108,  109,  110,  111,
 /*   960 */   112,  113,  132,    8,  116,  132,  132,  132,   13,  132,
 /*   970 */   132,  123,  124,  125,   19,  127,  128,  129,   85,  132,
 /*   980 */   132,  132,   89,  132,   91,  132,  132,   94,   95,   96,
 /*   990 */    97,   98,   99,  100,  101,  102,  103,  104,  105,  106,
 /*  1000 */   107,  108,  109,  110,  111,  112,  113,  132,  132,  116,
 /*  1010 */   132,  132,  132,  132,  132,  132,  123,  124,  125,   85,
 /*  1020 */   127,  128,  129,   89,  132,   91,  132,  132,   94,   95,
 /*  1030 */    96,   97,   98,   99,  100,  101,  102,  103,  104,  105,
 /*  1040 */   106,  107,  108,  109,  110,  111,  112,  113,  132,    8,
 /*  1050 */   116,  132,  132,  132,   13,  132,  132,  123,  124,  125,
 /*  1060 */    19,  127,  128,  129,   85,  132,  132,  132,   89,  132,
 /*  1070 */    91,  132,  132,   94,   95,   96,   97,   98,   99,  100,
 /*  1080 */   101,  102,  103,  104,  105,  106,  107,  108,  109,  110,
 /*  1090 */   111,  112,  113,  132,  132,  116,  132,  132,  132,  132,
 /*  1100 */   132,  132,  123,  124,  125,   85,  127,  128,  129,   89,
 /*  1110 */   132,   91,  132,  132,   94,   95,   96,   97,   98,   99,
 /*  1120 */   100,  101,  102,  103,  104,  105,  106,  107,  108,  109,
 /*  1130 */   110,  111,  112,  113,  132,    8,  116,  132,  132,  132,
 /*  1140 */    13,  132,  132,  123,  124,  125,   19,  127,  128,  129,
 /*  1150 */    85,  132,  132,  132,   89,  132,   91,  132,  132,   94,
 /*  1160 */    95,   96,   97,   98,   99,  100,  101,  102,  103,  104,
 /*  1170 */   105,  106,  107,  108,  109,  110,  111,  112,  113,  132,
 /*  1180 */   132,  116,  132,  132,  132,  132,  132,  132,  123,  124,
 /*  1190 */   125,   85,  127,  128,  129,   89,  132,   91,  132,  132,
 /*  1200 */    94,   95,   96,   97,   98,   99,  100,  101,  102,  103,
 /*  1210 */   104,  105,  106,  107,  108,  109,  110,  111,  112,  113,
 /*  1220 */   132,  132,  116,  132,  132,  132,  132,  132,  132,  123,
 /*  1230 */   124,  125,  132,  127,  128,  129,   87,  132,   89,  132,
 /*  1240 */    91,  132,  132,   94,   95,   96,   97,   98,   99,  100,
 /*  1250 */   101,  102,  103,  104,  105,  106,  107,  108,  109,  110,
 /*  1260 */   111,  112,  113,  114,  115,  116,  117,  132,  132,   87,
 /*  1270 */   132,   89,  132,   91,  132,  126,   94,   95,   96,   97,
 /*  1280 */    98,   99,  100,  101,  102,  103,  104,  105,  106,  107,
 /*  1290 */   108,  109,  110,  111,  112,  113,  114,  115,  116,  117,
 /*  1300 */   132,  132,   87,  132,   89,  132,   91,  132,  126,   94,
 /*  1310 */    95,   96,   97,   98,   99,  100,  101,  102,  103,  104,
 /*  1320 */   105,  106,  107,  108,  109,  110,  111,  112,  113,  114,
 /*  1330 */   115,  116,  117,  132,  132,   87,  132,   89,  132,   91,
 /*  1340 */   132,  126,   94,   95,   96,   97,   98,   99,  100,  101,
 /*  1350 */   102,  103,  104,  105,  106,  107,  108,  109,  110,  111,
 /*  1360 */   112,  113,  114,  115,  116,  117,  132,  132,   87,  132,
 /*  1370 */    89,  132,   91,  132,  126,   94,   95,   96,   97,   98,
 /*  1380 */    99,  100,  101,  102,  103,  104,  105,  106,  107,  108,
 /*  1390 */   109,  110,  111,  112,  113,  114,  115,  116,  117,  132,
 /*  1400 */   132,   87,  132,   89,  132,   91,  132,  126,   94,   95,
 /*  1410 */    96,   97,   98,   99,  100,  101,  102,  103,  104,  105,
 /*  1420 */   106,  107,  108,  109,  110,  111,  112,  113,  114,  115,
 /*  1430 */   116,  117,  132,  132,   87,  132,   89,  132,   91,  132,
 /*  1440 */   126,   94,   95,   96,   97,   98,   99,  100,  101,  102,
 /*  1450 */   103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
 /*  1460 */   113,  114,  115,  116,  117,   87,  132,   89,  132,   91,
 /*  1470 */   132,  132,   94,   95,   96,   97,   98,   99,  100,  101,
 /*  1480 */   102,  103,  104,  105,  106,  107,  108,  109,  110,  111,
 /*  1490 */   112,  113,  114,  115,  116,  117,   87,  132,   89,  132,
 /*  1500 */    91,  132,  132,   94,   95,   96,   97,   98,   99,  100,
 /*  1510 */   101,  102,  103,  104,  105,  106,  107,  108,  109,  110,
 /*  1520 */   111,  112,  113,  114,  115,  116,  117,  132,   87,  132,
 /*  1530 */    89,  132,   91,  132,  132,   94,   95,   96,   97,   98,
 /*  1540 */    99,  100,  101,  102,  103,  104,  105,  106,  107,  108,
 /*  1550 */   109,  110,  111,  112,  113,  114,  115,  116,  117,  132,
 /*  1560 */    87,  132,   89,  132,   91,  132,  132,   94,   95,   96,
 /*  1570 */    97,   98,   99,  100,  101,  102,  103,  104,  105,  106,
 /*  1580 */   107,  108,  109,  110,  111,  112,  113,  114,  115,  116,
 /*  1590 */   132,   87,  132,   89,  132,   91,  132,  132,   94,   95,
 /*  1600 */    96,   97,   98,   99,  100,  101,  102,  103,  104,  105,
 /*  1610 */   106,  107,  108,  109,  110,  111,  112,  113,  114,  115,
 /*  1620 */   116,  132,  132,   87,  132,   89,  132,   91,  132,  132,
 /*  1630 */    94,   95,   96,   97,   98,   99,  100,  101,  102,  103,
 /*  1640 */   104,  105,  106,  107,  108,  109,  110,  111,  112,  113,
 /*  1650 */   114,  115,  116,  132,  132,   87,  132,   89,  132,   91,
 /*  1660 */   132,  132,   94,   95,   96,   97,   98,   99,  100,  101,
 /*  1670 */   102,  103,  104,  105,  106,  107,  108,  109,  110,  111,
 /*  1680 */   112,  113,  114,  115,  116,   89,  132,   91,  132,  132,
 /*  1690 */    94,   95,   96,   97,   98,   99,  100,  101,  102,  103,
 /*  1700 */   104,  105,  106,  107,  108,  109,  110,  111,  112,  113,
 /*  1710 */   114,  132,  116,  132,  132,  119,  120,  132,   87,  132,
 /*  1720 */    89,  132,   91,  132,  132,   94,   95,   96,   97,   98,
 /*  1730 */    99,  100,  101,  102,  103,  104,  105,  106,  107,  108,
 /*  1740 */   109,  110,  111,  112,  113,  114,  115,  116,  132,  132,
 /*  1750 */    87,  132,   89,  132,   91,  132,  132,   94,   95,   96,
 /*  1760 */    97,   98,   99,  100,  101,  102,  103,  104,  105,  106,
 /*  1770 */   107,  108,  109,  110,  111,  112,  113,  114,  115,  116,
 /*  1780 */    87,  132,   89,  132,   91,  132,  132,   94,   95,   96,
 /*  1790 */    97,   98,   99,  100,  101,  102,  103,  104,  105,  106,
 /*  1800 */   107,  108,  109,  110,  111,  112,  113,  114,  115,  116,
 /*  1810 */    89,  132,   91,  132,  132,   94,   95,   96,   97,   98,
 /*  1820 */    99,  100,  101,  102,  103,  104,  105,  106,  107,  108,
 /*  1830 */   109,  110,  111,  112,  113,  114,  132,  132,  132,  132,
 /*  1840 */   132,  132,  121,  122,   89,  132,   91,  132,  132,   94,
 /*  1850 */    95,   96,   97,   98,   99,  100,  101,  102,  103,  104,
 /*  1860 */   105,  106,  107,  108,  109,  110,  111,  112,  113,  114,
 /*  1870 */   115,  132,   89,  132,   91,  132,  132,   94,   95,   96,
 /*  1880 */    97,   98,   99,  100,  101,  102,  103,  104,  105,  106,
 /*  1890 */   107,  108,  109,  110,  111,  112,  113,  114,   89,  116,
 /*  1900 */    91,  132,  132,   94,   95,   96,   97,   98,   99,  100,
 /*  1910 */   101,  102,  103,  104,  105,  106,  107,  108,  109,  110,
 /*  1920 */   111,  112,  113,  114,   89,  116,   91,  132,  132,   94,
 /*  1930 */    95,   96,   97,   98,   99,  100,  101,  102,  103,  104,
 /*  1940 */   105,  106,  107,  108,  109,  110,  111,  112,  113,  114,
 /*  1950 */    89,  116,   91,  132,  132,   94,   95,   96,   97,   98,
 /*  1960 */    99,  100,  101,  102,  103,  104,  105,  106,  107,  108,
 /*  1970 */   109,  110,  111,  112,  113,  114,   89,  132,   91,  132,
 /*  1980 */   132,   94,   95,   96,   97,   98,   99,  100,  101,  102,
 /*  1990 */   103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
 /*  2000 */   113,  114,   89,  132,   91,  132,  132,   94,   95,   96,
 /*  2010 */    97,   98,   99,  100,  101,  102,  103,  104,  105,  106,
 /*  2020 */   107,  108,  109,  110,  111,  112,  113,  114,   89,  132,
 /*  2030 */    91,  132,  132,   94,   95,   96,   97,   98,   99,  100,
 /*  2040 */   101,  102,  103,  104,  105,  106,  107,  108,  109,  110,
 /*  2050 */   111,  112,  113,  114,   89,  132,   91,  132,  132,   94,
 /*  2060 */    95,   96,   97,   98,   99,  100,  101,  102,  103,  104,
 /*  2070 */   105,  106,  107,  108,  109,  110,  111,  112,  113,  114,
 /*  2080 */    89,  132,   91,  132,  132,   94,   95,   96,   97,   98,
 /*  2090 */    99,  100,  101,  102,  103,  104,  105,  106,  107,  108,
 /*  2100 */   109,  110,  111,  112,  113,  114,   89,  132,   91,  132,
 /*  2110 */   132,   94,   95,   96,   97,   98,   99,  100,  101,  102,
 /*  2120 */   103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
 /*  2130 */   113,  114,   89,  132,   91,  132,  132,   94,   95,   96,
 /*  2140 */    97,   98,   99,  100,  101,  102,  103,  104,  105,  106,
 /*  2150 */   107,  108,  109,  110,  111,  112,  113,  114,   89,  132,
 /*  2160 */    91,  132,  132,   94,   95,   96,   97,   98,   99,  100,
 /*  2170 */   101,  102,  103,  104,  105,  106,  107,  108,  109,  110,
 /*  2180 */   111,  112,  113,  114,   89,  132,   91,  132,  132,   94,
 /*  2190 */    95,   96,   97,   98,   99,  100,  101,  102,  103,  104,
 /*  2200 */   105,  106,  107,  108,  109,  110,  111,  112,  113,  114,
 /*  2210 */    89,  132,   91,  132,  132,   94,   95,   96,   97,   98,
 /*  2220 */    99,  100,  101,  102,  103,  104,  105,  106,  107,  108,
 /*  2230 */   109,  110,  111,  112,  113,  114,   89,  132,   91,  132,
 /*  2240 */   132,   94,   95,   96,   97,   98,   99,  100,  101,  102,
 /*  2250 */   103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
 /*  2260 */   113,  114,   89,  132,   91,  132,  132,   94,   95,   96,
 /*  2270 */    97,   98,   99,  100,  101,  102,  103,  104,  105,  106,
 /*  2280 */   107,  108,  109,  110,  111,  112,  113,  114,   89,  132,
 /*  2290 */    91,  132,  132,   94,   95,   96,   97,   98,   99,  100,
 /*  2300 */   101,  102,  103,  104,  105,  106,  107,  108,  109,  110,
 /*  2310 */   111,  112,  113,  114,   89,  132,   91,  132,  132,   94,
 /*  2320 */    95,   96,   97,   98,   99,  100,  101,  102,  103,  104,
 /*  2330 */   105,  106,  107,  108,  109,  110,  111,  112,  113,  114,
 /*  2340 */    89,  132,   91,  132,  132,   94,   95,   96,   97,   98,
 /*  2350 */    99,  100,  101,  102,  103,  104,  105,  106,  107,  108,
 /*  2360 */   109,  110,  111,  112,  113,  114,   89,  132,   91,  132,
 /*  2370 */   132,   94,   95,   96,   97,   98,   99,  100,  101,  102,
 /*  2380 */   103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
 /*  2390 */   113,  114,   89,  132,   91,  132,  132,   94,   95,   96,
 /*  2400 */    97,   98,   99,  100,  101,  102,  103,  104,  105,  106,
 /*  2410 */   107,  108,  109,  110,  111,  112,  113,  114,   89,  132,
 /*  2420 */    91,  132,  132,   94,   95,   96,   97,   98,   99,  100,
 /*  2430 */   101,  102,  103,  104,  105,  106,  107,  108,  109,  110,
 /*  2440 */   111,  112,  113,  114,   89,  132,   91,  132,  132,   94,
 /*  2450 */    95,   96,   97,   98,   99,  100,  101,  102,  103,  104,
 /*  2460 */   105,  106,  107,  108,  109,  110,  111,  112,  113,  114,
 /*  2470 */    89,  132,   91,  132,  132,   94,   95,   96,   97,   98,
 /*  2480 */    99,  100,  101,  102,  103,  104,  105,  106,  107,  108,
 /*  2490 */   109,  110,  111,  112,  113,  114,   89,  132,   91,  132,
 /*  2500 */   132,   94,   95,   96,   97,   98,   99,  100,  101,  102,
 /*  2510 */   103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
 /*  2520 */   113,  114,   89,  132,   91,  132,  132,   94,   95,   96,
 /*  2530 */    97,   98,   99,  100,  101,  102,  103,  104,  105,  106,
 /*  2540 */   107,  108,  109,  110,  111,  112,  113,  114,   89,  132,
 /*  2550 */    91,  132,  132,   94,   95,   96,   97,   98,   99,  100,
 /*  2560 */   101,  102,  103,  104,  105,  106,  107,  108,  109,  110,
 /*  2570 */   111,  112,  113,  114,   89,  132,   91,  132,  132,   94,
 /*  2580 */    95,   96,   97,   98,   99,  100,  101,  102,  103,  104,
 /*  2590 */   105,  106,  107,  108,  109,  110,  111,  112,  113,  114,
 /*  2600 */    89,  132,   91,  132,  132,   94,   95,   96,   97,   98,
 /*  2610 */    99,  100,  101,  102,  103,  104,  105,  106,  107,  108,
 /*  2620 */   109,  110,  111,  112,  113,  114,   89,  132,   91,  132,
 /*  2630 */   132,   94,   95,   96,   97,   98,   99,  100,  101,  102,
 /*  2640 */   103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
 /*  2650 */   113,  114,    6,  132,    8,  132,   10,  132,   12,   13,
 /*  2660 */   132,   15,   16,  132,  132,   19,  132,   21,   22,   23,
 /*  2670 */    24,   25,   26,   27,   28,   29,   30,   31,   32,   89,
 /*  2680 */   132,   91,  132,  132,   94,   95,   96,   97,   98,   99,
 /*  2690 */   100,  101,  102,  103,  104,  105,  106,  107,  108,  132,
 /*  2700 */   132,   55,   56,  132,  132,  132,  132,  132,    6,  132,
 /*  2710 */     8,  132,   10,  132,   12,   13,  132,   15,   16,  132,
 /*  2720 */   132,   19,  132,   21,   22,   23,   24,   25,   26,   27,
 /*  2730 */    28,   29,   30,   31,   32,  132,   89,  132,   91,  132,
 /*  2740 */   132,   94,   95,   96,   97,   98,   99,  100,  101,  102,
 /*  2750 */   103,  104,  105,  106,  107,  108,  132,   55,   56,  132,
 /*  2760 */   132,  132,  132,  132,    6,  132,    8,    9,   10,  132,
 /*  2770 */    12,   13,  132,   15,  132,  132,  132,   19,  132,   21,
 /*  2780 */    22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
 /*  2790 */    32,  132,   89,  132,   91,  132,  132,   94,   95,   96,
 /*  2800 */    97,   98,   99,  100,  101,  102,  103,  104,  105,  106,
 /*  2810 */   107,  108,  132,   55,   56,  132,  132,  132,  132,  132,
 /*  2820 */     6,  132,    8,  132,   10,  132,   12,   13,  132,   15,
 /*  2830 */   132,   17,  132,   19,  132,   21,   22,   23,   24,   25,
 /*  2840 */    26,   27,   28,   29,   30,   31,   32,  132,   89,  132,
 /*  2850 */    91,  132,  132,   94,   95,   96,   97,   98,   99,  100,
 /*  2860 */   101,  102,  103,  104,  105,  106,  107,  108,  132,   55,
 /*  2870 */    56,  132,  132,  132,  132,  132,    6,  132,    8,  132,
 /*  2880 */    10,  132,   12,   13,  132,   15,  132,  132,  132,   19,
 /*  2890 */    20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
 /*  2900 */    30,   31,   32,  132,   89,  132,   91,  132,  132,   94,
 /*  2910 */    95,   96,   97,   98,   99,  100,  101,  102,  103,  104,
 /*  2920 */   105,  106,  107,  108,  132,   55,   56,  132,  132,  132,
 /*  2930 */   132,  132,    6,  132,    8,  132,   10,  132,   12,   13,
 /*  2940 */   132,   15,  132,   17,  132,   19,  132,   21,   22,   23,
 /*  2950 */    24,   25,   26,   27,   28,   29,   30,   31,   32,  132,
 /*  2960 */    89,  132,   91,  132,  132,   94,   95,   96,   97,   98,
 /*  2970 */    99,  100,  101,  102,  103,  104,  105,  106,  107,  108,
 /*  2980 */   132,   55,   56,  132,  132,  132,  132,  132,    6,  132,
 /*  2990 */     8,  132,   10,  132,   12,   13,  132,   15,  132,  132,
 /*  3000 */   132,   19,   20,   21,   22,   23,   24,   25,   26,   27,
 /*  3010 */    28,   29,   30,   31,   32,  132,   89,  132,   91,  132,
 /*  3020 */   132,   94,   95,   96,   97,   98,   99,  100,  101,  102,
 /*  3030 */   103,  104,  105,  106,  107,  108,  132,   55,  132,  132,
 /*  3040 */   132,  132,  132,  132,    6,  132,    8,  132,   10,  132,
 /*  3050 */    12,   13,  132,   15,  132,  132,  132,   19,  132,   21,
 /*  3060 */    22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
 /*  3070 */    32,  132,   89,  132,   91,  132,  132,   94,   95,   96,
 /*  3080 */    97,   98,   99,  100,  101,  102,  103,  104,  105,  106,
 /*  3090 */   107,  132,  132,   55,   56,  132,  132,  132,  132,  132,
 /*  3100 */     6,    6,    8,    8,   10,   10,   12,   13,   13,   15,
 /*  3110 */    16,  132,  132,   19,   19,   21,   22,   23,   24,   25,
 /*  3120 */    26,   27,   28,   29,   30,   31,   32,  132,  132,  132,
 /*  3130 */   132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
 /*  3140 */    14,   15,  132,  132,   18,  132,  132,  132,    6,   55,
 /*  3150 */     8,   56,  132,  132,  132,   13,    6,  132,    8,  132,
 /*  3160 */    10,   19,   12,   13,  132,   15,  132,  132,  132,   19,
 /*  3170 */    20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
 /*  3180 */    30,   31,   32,   57,   58,   59,   60,   61,   62,   63,
 /*  3190 */    64,   65,   66,   67,   68,  132,   14,  132,   56,  132,
 /*  3200 */    18,  132,   76,  132,  132,   55,  132,  132,  132,  132,
 /*  3210 */   132,  132,    6,  132,    8,  132,   10,  132,   12,   13,
 /*  3220 */   132,   15,  132,  132,  132,   19,   20,   21,   22,   23,
 /*  3230 */    24,   25,   26,   27,   28,   29,   30,   31,   32,   57,
 /*  3240 */    58,   59,   60,   61,   62,   63,   64,   65,   66,   67,
 /*  3250 */    68,  132,   14,  132,  132,  132,   18,  132,  132,  132,
 /*  3260 */   132,   55,  132,  132,  132,  132,  132,  132,    6,  132,
 /*  3270 */     8,  132,   10,  132,   12,   13,  132,   15,  132,  132,
 /*  3280 */   132,   19,   20,   21,   22,   23,   24,   25,   26,   27,
 /*  3290 */    28,   29,   30,   31,   32,   57,   58,   59,   60,   61,
 /*  3300 */    62,   63,   64,   65,   66,   67,   68,    6,  132,    8,
 /*  3310 */   132,  132,  132,  132,   13,  132,  132,   55,  132,  132,
 /*  3320 */    19,  132,  132,  132,    6,  132,    8,  132,   10,  132,
 /*  3330 */    12,   13,  132,   15,  132,  132,  132,   19,   20,   21,
 /*  3340 */    22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
 /*  3350 */    32,  132,  132,  132,  132,  132,  132,   56,   89,  132,
 /*  3360 */    91,  132,  132,   94,   95,   96,   97,   98,   99,  100,
 /*  3370 */   101,  102,  103,   55,  132,  132,  132,  132,  132,  132,
 /*  3380 */     6,  132,    8,  132,   10,  132,   12,   13,  132,   15,
 /*  3390 */   132,  132,  132,   19,   20,   21,   22,   23,   24,   25,
 /*  3400 */    26,   27,   28,   29,   30,   31,   32,  132,  132,  132,
 /*  3410 */   132,  132,  132,  132,   89,  132,   91,  132,  132,   94,
 /*  3420 */    95,   96,   97,   98,   99,  100,  101,  102,  103,   55,
 /*  3430 */   132,  132,  132,  132,  132,  132,    6,  132,    8,  132,
 /*  3440 */    10,   11,   12,   13,  132,   15,  132,  132,  132,   19,
 /*  3450 */   132,   21,   22,   23,   24,   25,   26,   27,   28,   29,
 /*  3460 */    30,   31,   32,  132,  132,  132,  132,  132,  132,  132,
 /*  3470 */    89,  132,   91,  132,  132,   94,   95,   96,   97,   98,
 /*  3480 */    99,  100,  101,  102,  132,   55,  132,  132,  132,  132,
 /*  3490 */   132,  132,    6,  132,    8,  132,   10,  132,   12,   13,
 /*  3500 */   132,   15,  132,  132,  132,   19,   20,   21,   22,   23,
 /*  3510 */    24,   25,   26,   27,   28,   29,   30,   31,   32,  132,
 /*  3520 */   132,  132,  132,  132,  132,  132,   89,  132,   91,  132,
 /*  3530 */   132,   94,   95,   96,   97,   98,   99,  100,  101,  102,
 /*  3540 */   132,   55,  132,  132,  132,  132,  132,  132,    6,  132,
 /*  3550 */     8,  132,   10,  132,   12,   13,  132,   15,  132,  132,
 /*  3560 */   132,   19,  132,   21,   22,   23,   24,   25,   26,   27,
 /*  3570 */    28,   29,   30,   31,   32,  132,  132,  132,  132,  132,
 /*  3580 */   132,  132,   89,  132,   91,  132,  132,   94,   95,   96,
 /*  3590 */    97,   98,   99,  100,  101,  102,   89,   55,   91,  132,
 /*  3600 */   132,   94,   95,   96,   97,   98,   99,  100,  101,  102,
 /*  3610 */   103,  104,  105,  106,  107,  108,  109,  110,  111,    6,
 /*  3620 */   132,    8,   89,  132,   91,   12,  132,   94,   95,   96,
 /*  3630 */    97,   98,   99,  132,   21,   22,   23,   24,   25,   26,
 /*  3640 */    27,   28,   29,   30,   31,   32,  132,   89,  132,   91,
 /*  3650 */   132,  132,   94,   95,   96,   97,   98,   99,  100,  101,
 /*  3660 */   102,  103,  104,  105,  106,  132,  132,  132,  132,  132,
 /*  3670 */   132,  132,   89,  132,   91,  132,  132,   94,   95,   96,
 /*  3680 */    97,   98,   99,  100,  101,  102,   89,  132,   91,  132,
 /*  3690 */   132,   94,   95,   96,   97,   98,   99,  100,  101,  102,
 /*  3700 */   103,  104,  105,   89,  132,   91,  132,  132,   94,   95,
 /*  3710 */    96,   97,   98,   99,  100,  101,  102,  103,  104,  132,
 /*  3720 */   132,  132,  132,  132,   89,  132,   91,  132,  132,   94,
 /*  3730 */    95,   96,   97,   98,   99,  100,  101,  102,  103,  104,
 /*  3740 */   132,  132,   89,  132,   91,  132,  132,   94,   95,   96,
 /*  3750 */    97,   98,   99,  100,  101,  102,  103,  104,  132,  132,
 /*  3760 */   132,  132,   89,  132,   91,  132,  132,   94,   95,   96,
 /*  3770 */    97,   98,   99,  100,  101,  102,   89,  132,   91,  132,
 /*  3780 */   132,   94,   95,   96,   97,   98,   99,  100,  101,  102,
 /*  3790 */    89,  132,   91,  132,  132,   94,   95,   96,   97,   98,
 /*  3800 */    99,  100,  101,  102,   89,  132,   91,  132,  132,   94,
 /*  3810 */    95,   96,   97,   98,   99,  100,  101,  102,  132,   89,
 /*  3820 */   132,   91,  132,  132,   94,   95,   96,   97,   98,   99,
 /*  3830 */   100,  101,  102,  132,   89,  132,   91,  132,  132,   94,
 /*  3840 */    95,   96,   97,   98,   99,  100,  101,  102,
};
#define YY_SHIFT_USE_DFLT (-39)
#define YY_SHIFT_MAX 276
static const short yy_shift_ofst[] = {
 /*     0 */     0,  160,  241,   80,  321,  321,  321,  321,  321,  321,
 /*    10 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*    20 */  2702, 2702, 2702, 2702, 2646, 2702, 3038, 3038, 3038, 3038,
 /*    30 */  2758, 2870, 2926, 2814, 3038, 3038, 3038, 3038, 3430, 3038,
 /*    40 */  3038, 3038, 3542, 3486, 2982, 3094, 3150, 3206, 3262, 3318,
 /*    50 */  3374, 3542, 3542, 3542, 3542, 3542, 3542, 3542, 3542, 3542,
 /*    60 */  3542, 3542, 3542, 3542, 3542, 3542, 3542, 3542, 3542, 3542,
 /*    70 */  3542, 3542, 3542, 3542, 3542, 3542, 3542, 3613, 3613, 3613,
 /*    80 */  3613, 3613, 3613, 3613, 3613, 3613, 3613, 3613, 3613, 3613,
 /*    90 */  3613, 3613, 3613, 3613, 3613, 3613, 3613, 3613, 3613, 3613,
 /*   100 */  3613, 3613, 3613, 3613, 3613, 3613, 3613, 3613,  429,  429,
 /*   110 */   618,  618,  618,  625,  480, 3095,  322,  525,  192,  426,
 /*   120 */   657,  657,  657, 3126, 3182, 3238, 3142, 3301,  531,    1,
 /*   130 */   451,   81,  242,  697,  697,  783,  242,  436,  869,  955,
 /*   140 */  1127,  161, 1041,  457,  138,  329,  539,  455,   32,  742,
 /*   150 */   742,  742,  744,  744,  742,  756,  756,  657,  744,  657,
 /*   160 */    16,   16,  548,  548,  548,  604,  630,  630,  481,  204,
 /*   170 */   201,  224,  240,  290,  362,  370,  565,   57,  111,  111,
 /*   180 */   111,  111,  110,  361,  101,  819,  833,  832,  834,  799,
 /*   190 */   864,  859,  810,  885,  877,  888,  882,  880,  913,  -38,
 /*   200 */    14,   54,   67,   30,   84,  139,  142,  258,  287,  158,
 /*   210 */   341,  393,  372,  402,  493,  519,  372,  603,  646,  372,
 /*   220 */   372,  502,  277,  372,  420,  267,  282,  189,  486,   30,
 /*   230 */   542,  491,  389,  277,  123,  102,  915,  189,  372,  875,
 /*   240 */   873,  872,  845,  372,  822,  823,  818,  816,  372,  622,
 /*   250 */   826,  758,  793,  802,  801,  752,  798,  789,  372,  788,
 /*   260 */   786,  792,  540,  515,  495,  536,  570,  576,  372,  585,
 /*   270 */   372,  606,  502,  610,  622,  865,  608,
};
#define YY_REDUCE_USE_DFLT (-85)
#define YY_REDUCE_MAX 159
static const short yy_reduce_ofst[] = {
 /*     0 */   320,  377,  418,  418,  635,  676,  807,  934, 1106,  463,
 /*    10 */  1065, 1020,  979,  893,  848,  721,  590,  504,  549,  762,
 /*    20 */  1149, 1248, 1182, 1281, 1215, 1314, 1378, 1409, 1347, 1441,
 /*    30 */  1504, 1596, 1473, 1536, 1663, 1693, 1568, 1631, 1721, 1809,
 /*    40 */  1783, 1835, 1755, 1887, 1913, 1939, 1965, 1991, 2017, 2043,
 /*    50 */  2069, 2095, 2121, 1887, 2147, 2173, 1965, 2199, 2225, 2251,
 /*    60 */  2277, 2303, 1861, 2329, 2355, 2381, 2407, 1913, 1991, 2043,
 /*    70 */  2069, 2017, 2433, 2459, 2485, 2511, 2537, 3507,  -56,   24,
 /*    80 */   185,  265, 2590, 2703, 2871, 2759, 2815,  104, 2647, 2927,
 /*    90 */  2983, 3558, 3597, 3614, 3653, 3635, 3269, 3325, 3493, 3437,
 /*   100 */  3745, 3583, 3673, 3687, 3701, 3715, 3730, 3381,   48,  128,
 /*   110 */   289, 3533,  209,  363,  315,  273,  -82,  -82,  164,  -84,
 /*   120 */   156,  236,  188,  552,  553,  552,  598,  599,  599,  620,
 /*   130 */   598,  623,  623,  624,  627,  628,  637,  638,  641,  641,
 /*   140 */   628,  620,  624,  642,  643,  636,  643,  664,  579,  668,
 /*   150 */   669,  669,  670,  671,  673,  636,  682,  680,  705,  704,
};
static const YYACTIONTYPE yy_default[] = {
 /*     0 */   667,  667,  667,  667,  667,  667,  667,  667,  667,  667,
 /*    10 */   667,  667,  667,  667,  667,  667,  667,  667,  667,  667,
 /*    20 */   667,  667,  667,  667,  667,  667,  667,  667,  667,  667,
 /*    30 */   667,  667,  667,  667,  667,  667,  667,  667,  667,  667,
 /*    40 */   612,  667,  667,  667,  667,  667,  667,  667,  667,  667,
 /*    50 */   667,  667,  667,  667,  667,  667,  667,  667,  667,  667,
 /*    60 */   667,  667,  667,  667,  667,  667,  667,  667,  667,  667,
 /*    70 */   667,  667,  667,  667,  667,  667,  617,  667,  667,  667,
 /*    80 */   667,  667,  667,  667,  667,  667,  667,  667,  667,  667,
 /*    90 */   667,  667,  667,  667,  667,  667,  667,  667,  667,  667,
 /*   100 */   667,  667,  667,  667,  667,  667,  667,  667,  667,  667,
 /*   110 */   667,  667,  667,  667,  667,  502,  501,  667,  667,  667,
 /*   120 */   667,  667,  667,  590,  621,  590,  506,  502,  502,  504,
 /*   130 */   506,  503,  503,  501,  667,  505,  667,  667,  507,  507,
 /*   140 */   505,  504,  501,  667,  508,  667,  667,  667,  652,  667,
 /*   150 */   667,  627,  667,  667,  667,  667,  667,  667,  667,  667,
 /*   160 */   555,  556,  531,  533,  532,  667,  538,  539,  667,  667,
 /*   170 */   667,  667,  667,  667,  667,  667,  667,  519,  534,  535,
 /*   180 */   536,  537,  561,  667,  667,  667,  667,  667,  667,  508,
 /*   190 */   667,  667,  667,  667,  667,  667,  667,  667,  667,  667,
 /*   200 */   667,  611,  667,  558,  616,  667,  667,  667,  590,  667,
 /*   210 */   609,  667,  548,  667,  667,  667,  547,  667,  667,  546,
 /*   220 */   545,  559,  543,  544,  667,  667,  667,  541,  667,  557,
 /*   230 */   667,  667,  628,  542,  667,  667,  667,  540,  554,  667,
 /*   240 */   667,  667,  667,  553,  667,  667,  667,  667,  552,  455,
 /*   250 */   667,  667,  667,  667,  667,  667,  667,  667,  551,  667,
 /*   260 */   667,  632,  667,  667,  509,  667,  667,  667,  550,  667,
 /*   270 */   549,  667,  560,  667,  456,  667,  667,  528,  527,  526,
 /*   280 */   631,  525,  524,  523,  633,  522,  521,  634,  520,  635,
 /*   290 */   636,  518,  517,  637,  516,  515,  638,  514,  513,  512,
 /*   300 */   511,  639,  644,  645,  510,  646,  647,  499,  648,  649,
 /*   310 */   651,  498,  485,  495,  484,  654,  492,  655,  483,  489,
 /*   320 */   482,  486,  656,  480,  479,  657,  478,  663,  477,  476,
 /*   330 */   491,  660,  653,  659,  474,  471,  640,  457,  454,  448,
 /*   340 */   641,  447,  642,  453,  450,  449,  643,  650,  664,  665,
 /*   350 */   666,  661,  463,  658,  462,  567,  569,  465,  568,  466,
 /*   360 */   570,  571,  461,  572,  573,  460,  614,  459,  458,  615,
 /*   370 */   585,  579,  452,  494,  586,  451,  488,  497,  587,  581,
 /*   380 */   578,  562,  500,  588,  574,  575,  576,  591,  589,  464,
 /*   390 */   469,  470,  467,  468,  565,  566,  583,  580,  577,  563,
 /*   400 */   564,  607,  608,  613,  610,  496,  509,  493,  490,  487,
 /*   410 */   508,  481,  475,  584,  593,  594,  595,  596,  597,  598,
 /*   420 */   599,  600,  601,  602,  603,  604,  605,  606,  592,  473,
 /*   430 */   472,  582,  618,  619,  622,  624,  620,  623,  625,  662,
 /*   440 */   530,  626,  529,  629,  630,
};
#define YY_SZ_ACTTAB (int)(sizeof(yy_action)/sizeof(yy_action[0]))

/* The next table maps tokens into fallback tokens.  If a construct
** like the following:
** 
**      %fallback ID X Y Z.
**
** appears in the grammar, then ID becomes a fallback token for X, Y,
** and Z.  Whenever one of the tokens X, Y, or Z is input to the parser
** but it does not parse, the type of the token is changed to ID and
** the parse is retried before an error is thrown.
*/
#ifdef YYFALLBACK
static const YYCODETYPE yyFallback[] = {
};
#endif /* YYFALLBACK */

/* The following structure represents a single element of the
** parser's stack.  Information stored includes:
**
**   +  The state number for the parser at this level of the stack.
**
**   +  The value of the token stored at this level of the stack.
**      (In other words, the "major" token.)
**
**   +  The semantic value stored at this level of the stack.  This is
**      the information used by the action routines in the grammar.
**      It is sometimes called the "minor" token.
*/
struct yyStackEntry {
  YYACTIONTYPE stateno;  /* The state-number */
  YYCODETYPE major;      /* The major token value.  This is the code
                         ** number for the token at this stack level */
  YYMINORTYPE minor;     /* The user-supplied minor token value.  This
                         ** is the value of the token  */
};
typedef struct yyStackEntry yyStackEntry;

/* The state of the parser is completely contained in an instance of
** the following structure */
struct yyParser {
  int yyidx;                    /* Index of top element in stack */
#ifdef YYTRACKMAXSTACKDEPTH
  int yyidxMax;                 /* Maximum value of yyidx */
#endif
  int yyerrcnt;                 /* Shifts left before out of the error */
  XecParseARG_SDECL                /* A place to hold %extra_argument */
#if YYSTACKDEPTH<=0
  int yystksz;                  /* Current side of the stack */
  yyStackEntry *yystack;        /* The parser's stack */
#else
  yyStackEntry yystack[YYSTACKDEPTH];  /* The parser's stack */
#endif
};
typedef struct yyParser yyParser;

#ifndef NDEBUG
#include <stdio.h>
static FILE *yyTraceFILE = 0;
static char *yyTracePrompt = 0;
#endif /* NDEBUG */

#ifndef NDEBUG
/* 
** Turn parser tracing on by giving a stream to which to write the trace
** and a prompt to preface each trace message.  Tracing is turned off
** by making either argument NULL 
**
** Inputs:
** <ul>
** <li> A FILE* to which trace output should be written.
**      If NULL, then tracing is turned off.
** <li> A prefix string written at the beginning of every
**      line of trace output.  If NULL, then tracing is
**      turned off.
** </ul>
**
** Outputs:
** None.
*/
void XecParseTrace(FILE *TraceFILE, char *zTracePrompt){
  yyTraceFILE = TraceFILE;
  yyTracePrompt = zTracePrompt;
  if( yyTraceFILE==0 ) yyTracePrompt = 0;
  else if( yyTracePrompt==0 ) yyTraceFILE = 0;
}
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing shifts, the names of all terminals and nonterminals
** are required.  The following table supplies these names */
static const char *const yyTokenName[] = { 
  "$",             "IF",            "ELSE",          "TRY",         
  "CATCH",         "FINALLY",       "YIELD",         "USING",       
  "LPN",           "RPN",           "LBR",           "RBR",         
  "IDENTIFIER",    "PERIOD",        "COMMA",         "COLON",       
  "VAR",           "SEMICOLON",     "ASSIGN",        "LSQ",         
  "RSQ",           "NEW",           "NUMBER",        "STRING",      
  "TRUE",          "FALSE",         "NULL",          "INCREMENT",   
  "DECREMENT",     "PLUS",          "MINUS",         "XMARK",       
  "TILDE",         "ASTERISK",      "SOLIDUS",       "PERCENT",     
  "LSHIFT",        "RSHIFT",        "URSHIFT",       "AMPERSAND",   
  "CARET",         "VBAR",          "EQUAL",         "NOTEQUAL",    
  "LESS",          "GREATER",       "LESSEQUAL",     "GREATEREQUAL",
  "IN",            "NOTIN",         "IS",            "NOTIS",       
  "LOGICAND",      "LOGICXOR",      "LOGICOR",       "QMARK",       
  "ELLIPSIS",      "MULASSIGN",     "DIVASSIGN",     "MODASSIGN",   
  "INTDIVASSIGN",  "ADDASSIGN",     "SUBASSIGN",     "LSHIFTASSIGN",
  "RSHIFTASSIGN",  "URSHIFTASSIGN",  "BITANDASSIGN",  "BITXORASSIGN",
  "BITORASSIGN",   "DELETE",        "SWITCH",        "CASE",        
  "DEFAULT",       "WHILE",         "DO",            "FOR",         
  "EACHKEY",       "CONTINUE",      "BREAK",         "RETURN",      
  "THROW",         "error",         "script",        "stmt_list",   
  "expr_paren",    "stmt_brace",    "odecl_brace",   "expr_list",   
  "odecl_list",    "name",          "name_list",     "proto",       
  "decl",          "odecl",         "expr_simple",   "expr_index",  
  "expr_yield",    "expr_new",      "expr_call",     "expr_postfix",
  "expr_literal",  "expr_suffix",   "expr_unary",    "expr_mul",    
  "expr_add",      "expr_shift",    "expr_bitand",   "expr_bitxor", 
  "expr_bitor",    "expr_compare",  "expr_and",      "expr_xor",    
  "expr_or",       "expr_nolbr",    "expr_value",    "expr_lbody",  
  "expr_final",    "expr_assign",   "assign_op",     "value_lbody", 
  "value_list",    "keyval_lbody",  "keyval_list",   "sexpr_lbody", 
  "sexpr_list",    "sexpr_assign",  "condition",     "stmt_yield",  
  "stmt_using",    "stmt",          "catch",         "catch_list",  
};
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing reduce actions, the names of all rules are required.
*/
static const char *const yyRuleName[] = {
 /*   0 */ "script ::=",
 /*   1 */ "script ::= stmt_list",
 /*   2 */ "expr_paren ::= LPN RPN",
 /*   3 */ "expr_paren ::= LPN expr_list RPN",
 /*   4 */ "stmt_brace ::= LBR RBR",
 /*   5 */ "stmt_brace ::= LBR stmt_list RBR",
 /*   6 */ "odecl_brace ::= LBR RBR",
 /*   7 */ "odecl_brace ::= LBR odecl_list RBR",
 /*   8 */ "name ::= IDENTIFIER",
 /*   9 */ "name ::= name PERIOD IDENTIFIER",
 /*  10 */ "name_list ::= name",
 /*  11 */ "name_list ::= name_list COMMA name",
 /*  12 */ "proto ::= name expr_paren",
 /*  13 */ "decl ::= name odecl_brace",
 /*  14 */ "decl ::= name COLON expr_simple odecl_brace",
 /*  15 */ "decl ::= proto stmt_brace",
 /*  16 */ "decl ::= proto YIELD stmt_brace",
 /*  17 */ "decl ::= VAR name_list SEMICOLON",
 /*  18 */ "decl ::= VAR name_list ASSIGN expr_list SEMICOLON",
 /*  19 */ "odecl ::= decl",
 /*  20 */ "odecl ::= proto SEMICOLON",
 /*  21 */ "odecl ::= proto YIELD SEMICOLON",
 /*  22 */ "odecl_list ::= SEMICOLON",
 /*  23 */ "odecl_list ::= odecl",
 /*  24 */ "odecl_list ::= odecl_list SEMICOLON",
 /*  25 */ "odecl_list ::= odecl_list odecl",
 /*  26 */ "expr_index ::= LPN expr_assign RPN",
 /*  27 */ "expr_index ::= name PERIOD LSQ expr_value RSQ",
 /*  28 */ "expr_index ::= name LSQ expr_value RSQ",
 /*  29 */ "expr_index ::= expr_index PERIOD IDENTIFIER",
 /*  30 */ "expr_index ::= expr_index PERIOD LSQ expr_value RSQ",
 /*  31 */ "expr_index ::= expr_index LSQ expr_value RSQ",
 /*  32 */ "expr_yield ::= YIELD expr_paren",
 /*  33 */ "expr_new ::= NEW name expr_paren",
 /*  34 */ "expr_new ::= NEW expr_index expr_paren",
 /*  35 */ "expr_call ::= proto expr_paren",
 /*  36 */ "expr_call ::= expr_index expr_paren",
 /*  37 */ "expr_call ::= expr_yield expr_paren",
 /*  38 */ "expr_call ::= expr_new expr_paren",
 /*  39 */ "expr_call ::= expr_call expr_paren",
 /*  40 */ "expr_call ::= expr_postfix expr_paren",
 /*  41 */ "expr_postfix ::= proto PERIOD IDENTIFIER",
 /*  42 */ "expr_postfix ::= proto PERIOD LSQ expr_value RSQ",
 /*  43 */ "expr_postfix ::= proto LSQ expr_value RSQ",
 /*  44 */ "expr_postfix ::= expr_yield PERIOD IDENTIFIER",
 /*  45 */ "expr_postfix ::= expr_yield PERIOD LSQ expr_value RSQ",
 /*  46 */ "expr_postfix ::= expr_yield LSQ expr_value RSQ",
 /*  47 */ "expr_postfix ::= expr_new PERIOD IDENTIFIER",
 /*  48 */ "expr_postfix ::= expr_new PERIOD LSQ expr_value RSQ",
 /*  49 */ "expr_postfix ::= expr_new LSQ expr_value RSQ",
 /*  50 */ "expr_postfix ::= expr_call PERIOD IDENTIFIER",
 /*  51 */ "expr_postfix ::= expr_call PERIOD LSQ expr_value RSQ",
 /*  52 */ "expr_postfix ::= expr_call LSQ expr_value RSQ",
 /*  53 */ "expr_postfix ::= expr_postfix PERIOD IDENTIFIER",
 /*  54 */ "expr_postfix ::= expr_postfix PERIOD LSQ expr_value RSQ",
 /*  55 */ "expr_postfix ::= expr_postfix LSQ expr_value RSQ",
 /*  56 */ "expr_simple ::= name",
 /*  57 */ "expr_simple ::= proto",
 /*  58 */ "expr_simple ::= expr_index",
 /*  59 */ "expr_simple ::= expr_yield",
 /*  60 */ "expr_simple ::= expr_new",
 /*  61 */ "expr_simple ::= expr_call",
 /*  62 */ "expr_simple ::= expr_postfix",
 /*  63 */ "expr_simple ::= proto YIELD",
 /*  64 */ "expr_simple ::= expr_call YIELD",
 /*  65 */ "expr_literal ::= expr_simple",
 /*  66 */ "expr_literal ::= NUMBER",
 /*  67 */ "expr_literal ::= STRING",
 /*  68 */ "expr_literal ::= TRUE",
 /*  69 */ "expr_literal ::= FALSE",
 /*  70 */ "expr_literal ::= NULL",
 /*  71 */ "expr_suffix ::= expr_literal",
 /*  72 */ "expr_suffix ::= expr_suffix INCREMENT",
 /*  73 */ "expr_suffix ::= expr_suffix DECREMENT",
 /*  74 */ "expr_unary ::= expr_suffix",
 /*  75 */ "expr_unary ::= PLUS expr_unary",
 /*  76 */ "expr_unary ::= MINUS expr_unary",
 /*  77 */ "expr_unary ::= XMARK expr_unary",
 /*  78 */ "expr_unary ::= TILDE expr_unary",
 /*  79 */ "expr_unary ::= INCREMENT expr_unary",
 /*  80 */ "expr_unary ::= DECREMENT expr_unary",
 /*  81 */ "expr_mul ::= expr_unary",
 /*  82 */ "expr_mul ::= expr_mul ASTERISK expr_unary",
 /*  83 */ "expr_mul ::= expr_mul SOLIDUS expr_unary",
 /*  84 */ "expr_mul ::= expr_mul PERCENT expr_unary",
 /*  85 */ "expr_mul ::= expr_mul TILDE expr_unary",
 /*  86 */ "expr_add ::= expr_mul",
 /*  87 */ "expr_add ::= expr_add PLUS expr_mul",
 /*  88 */ "expr_add ::= expr_add MINUS expr_mul",
 /*  89 */ "expr_shift ::= expr_add",
 /*  90 */ "expr_shift ::= expr_shift LSHIFT expr_add",
 /*  91 */ "expr_shift ::= expr_shift RSHIFT expr_add",
 /*  92 */ "expr_shift ::= expr_shift URSHIFT expr_add",
 /*  93 */ "expr_bitand ::= expr_shift",
 /*  94 */ "expr_bitand ::= expr_bitand AMPERSAND expr_shift",
 /*  95 */ "expr_bitxor ::= expr_bitand",
 /*  96 */ "expr_bitxor ::= expr_bitxor CARET expr_bitand",
 /*  97 */ "expr_bitor ::= expr_bitxor",
 /*  98 */ "expr_bitor ::= expr_bitor VBAR expr_bitxor",
 /*  99 */ "expr_compare ::= expr_bitor",
 /* 100 */ "expr_compare ::= expr_compare EQUAL expr_bitor",
 /* 101 */ "expr_compare ::= expr_compare NOTEQUAL expr_bitor",
 /* 102 */ "expr_compare ::= expr_compare LESS expr_bitor",
 /* 103 */ "expr_compare ::= expr_compare GREATER expr_bitor",
 /* 104 */ "expr_compare ::= expr_compare LESSEQUAL expr_bitor",
 /* 105 */ "expr_compare ::= expr_compare GREATEREQUAL expr_bitor",
 /* 106 */ "expr_compare ::= expr_compare IN expr_bitor",
 /* 107 */ "expr_compare ::= expr_compare NOTIN expr_bitor",
 /* 108 */ "expr_compare ::= expr_compare IS expr_bitor",
 /* 109 */ "expr_compare ::= expr_compare NOTIS expr_bitor",
 /* 110 */ "expr_and ::= expr_compare",
 /* 111 */ "expr_and ::= expr_and LOGICAND expr_compare",
 /* 112 */ "expr_xor ::= expr_and",
 /* 113 */ "expr_xor ::= expr_xor LOGICXOR expr_and",
 /* 114 */ "expr_or ::= expr_xor",
 /* 115 */ "expr_or ::= expr_or LOGICOR expr_xor",
 /* 116 */ "expr_nolbr ::= expr_or",
 /* 117 */ "expr_nolbr ::= expr_or QMARK expr_value COLON expr_value",
 /* 118 */ "expr_nolbr ::= LSQ RSQ",
 /* 119 */ "expr_nolbr ::= LSQ value_list RSQ",
 /* 120 */ "expr_nolbr ::= COLON odecl_brace",
 /* 121 */ "expr_nolbr ::= COLON expr_simple odecl_brace",
 /* 122 */ "expr_nolbr ::= QMARK expr_paren stmt_brace",
 /* 123 */ "expr_nolbr ::= PERIOD QMARK expr_paren stmt_brace",
 /* 124 */ "expr_nolbr ::= QMARK expr_paren YIELD stmt_brace",
 /* 125 */ "expr_nolbr ::= PERIOD QMARK expr_paren YIELD stmt_brace",
 /* 126 */ "expr_value ::= expr_nolbr",
 /* 127 */ "expr_value ::= LBR RBR",
 /* 128 */ "expr_value ::= LBR keyval_list RBR",
 /* 129 */ "expr_lbody ::= expr_value",
 /* 130 */ "expr_lbody ::= expr_lbody COMMA expr_value",
 /* 131 */ "expr_final ::= ELLIPSIS",
 /* 132 */ "expr_final ::= proto ELLIPSIS",
 /* 133 */ "expr_final ::= expr_call ELLIPSIS",
 /* 134 */ "expr_final ::= expr_yield ELLIPSIS",
 /* 135 */ "expr_final ::= proto YIELD ELLIPSIS",
 /* 136 */ "expr_final ::= expr_call YIELD ELLIPSIS",
 /* 137 */ "expr_final ::= name LSQ RSQ ELLIPSIS",
 /* 138 */ "expr_final ::= proto LSQ RSQ ELLIPSIS",
 /* 139 */ "expr_final ::= expr_index LSQ RSQ ELLIPSIS",
 /* 140 */ "expr_final ::= expr_yield LSQ RSQ ELLIPSIS",
 /* 141 */ "expr_final ::= expr_new LSQ RSQ ELLIPSIS",
 /* 142 */ "expr_final ::= expr_call LSQ RSQ ELLIPSIS",
 /* 143 */ "expr_final ::= expr_postfix LSQ RSQ ELLIPSIS",
 /* 144 */ "expr_list ::= expr_final",
 /* 145 */ "expr_list ::= expr_lbody",
 /* 146 */ "expr_list ::= expr_lbody COMMA expr_final",
 /* 147 */ "expr_assign ::= expr_list",
 /* 148 */ "expr_assign ::= expr_lbody assign_op expr_list",
 /* 149 */ "assign_op ::= ASSIGN",
 /* 150 */ "assign_op ::= MULASSIGN",
 /* 151 */ "assign_op ::= DIVASSIGN",
 /* 152 */ "assign_op ::= MODASSIGN",
 /* 153 */ "assign_op ::= INTDIVASSIGN",
 /* 154 */ "assign_op ::= ADDASSIGN",
 /* 155 */ "assign_op ::= SUBASSIGN",
 /* 156 */ "assign_op ::= LSHIFTASSIGN",
 /* 157 */ "assign_op ::= RSHIFTASSIGN",
 /* 158 */ "assign_op ::= URSHIFTASSIGN",
 /* 159 */ "assign_op ::= BITANDASSIGN",
 /* 160 */ "assign_op ::= BITXORASSIGN",
 /* 161 */ "assign_op ::= BITORASSIGN",
 /* 162 */ "value_lbody ::= expr_value",
 /* 163 */ "value_lbody ::= value_lbody COMMA expr_value",
 /* 164 */ "value_list ::= expr_final",
 /* 165 */ "value_list ::= expr_final COMMA",
 /* 166 */ "value_list ::= value_lbody",
 /* 167 */ "value_list ::= value_lbody COMMA",
 /* 168 */ "value_list ::= value_lbody COMMA expr_final",
 /* 169 */ "keyval_lbody ::= expr_value COLON expr_value",
 /* 170 */ "keyval_lbody ::= keyval_lbody COMMA expr_value COLON expr_value",
 /* 171 */ "keyval_list ::= keyval_lbody",
 /* 172 */ "keyval_list ::= keyval_lbody COMMA",
 /* 173 */ "sexpr_lbody ::= expr_nolbr",
 /* 174 */ "sexpr_lbody ::= sexpr_lbody COMMA expr_value",
 /* 175 */ "sexpr_list ::= expr_final",
 /* 176 */ "sexpr_list ::= sexpr_lbody",
 /* 177 */ "sexpr_list ::= sexpr_lbody COMMA expr_final",
 /* 178 */ "sexpr_assign ::= sexpr_list",
 /* 179 */ "sexpr_assign ::= sexpr_lbody assign_op expr_list",
 /* 180 */ "condition ::= expr_assign",
 /* 181 */ "condition ::= VAR name_list ASSIGN expr_list",
 /* 182 */ "stmt_yield ::= YIELD",
 /* 183 */ "stmt_using ::= USING",
 /* 184 */ "stmt ::= stmt_brace",
 /* 185 */ "stmt ::= sexpr_assign SEMICOLON",
 /* 186 */ "stmt ::= DELETE expr_lbody SEMICOLON",
 /* 187 */ "stmt ::= IF LPN condition RPN stmt",
 /* 188 */ "stmt ::= IF LPN condition RPN stmt ELSE stmt",
 /* 189 */ "stmt ::= SWITCH LPN condition RPN stmt_brace",
 /* 190 */ "stmt ::= CASE expr_value COLON",
 /* 191 */ "stmt ::= DEFAULT COLON",
 /* 192 */ "stmt ::= WHILE LPN condition RPN stmt",
 /* 193 */ "stmt ::= DO stmt WHILE LPN expr_assign RPN SEMICOLON",
 /* 194 */ "stmt ::= FOR LPN expr_lbody COLON expr_value RPN stmt",
 /* 195 */ "stmt ::= FOR LPN expr_lbody EACHKEY expr_value RPN stmt",
 /* 196 */ "stmt ::= FOR LPN VAR name_list COLON expr_value RPN stmt",
 /* 197 */ "stmt ::= FOR LPN VAR name_list EACHKEY expr_value RPN stmt",
 /* 198 */ "stmt ::= FOR LPN condition SEMICOLON expr_assign SEMICOLON expr_assign RPN stmt",
 /* 199 */ "stmt ::= CONTINUE SEMICOLON",
 /* 200 */ "stmt ::= BREAK SEMICOLON",
 /* 201 */ "stmt ::= RETURN SEMICOLON",
 /* 202 */ "stmt ::= RETURN expr_list SEMICOLON",
 /* 203 */ "stmt ::= stmt_yield SEMICOLON",
 /* 204 */ "stmt ::= stmt_yield expr_list SEMICOLON",
 /* 205 */ "stmt ::= USING LPN condition RPN stmt",
 /* 206 */ "stmt ::= stmt_using condition SEMICOLON",
 /* 207 */ "stmt ::= TRY stmt catch_list",
 /* 208 */ "stmt ::= TRY stmt FINALLY stmt",
 /* 209 */ "stmt ::= TRY stmt catch_list FINALLY stmt",
 /* 210 */ "stmt ::= THROW expr_value SEMICOLON",
 /* 211 */ "catch ::= CATCH LPN COLON expr_simple RPN stmt",
 /* 212 */ "catch ::= CATCH LPN expr_value COLON expr_simple RPN stmt",
 /* 213 */ "catch ::= CATCH LPN VAR name COLON expr_simple RPN stmt",
 /* 214 */ "catch_list ::= catch",
 /* 215 */ "catch_list ::= catch_list catch",
 /* 216 */ "stmt_list ::= stmt",
 /* 217 */ "stmt_list ::= decl",
 /* 218 */ "stmt_list ::= SEMICOLON",
 /* 219 */ "stmt_list ::= stmt_list stmt",
 /* 220 */ "stmt_list ::= stmt_list decl",
 /* 221 */ "stmt_list ::= stmt_list SEMICOLON",
};
#endif /* NDEBUG */


#if YYSTACKDEPTH<=0
/*
** Try to increase the size of the parser stack.
*/
static void yyGrowStack(yyParser *p){
  int newSize;
  yyStackEntry *pNew;

  newSize = p->yystksz*2 + 100;
  pNew = realloc(p->yystack, newSize*sizeof(pNew[0]));
  if( pNew ){
    p->yystack = pNew;
    p->yystksz = newSize;
#ifndef NDEBUG
    if( yyTraceFILE ){
      fprintf(yyTraceFILE,"%sStack grows to %d entries!\n",
              yyTracePrompt, p->yystksz);
    }
#endif
  }
}
#endif

/* 
** This function allocates a new parser.
** The only argument is a pointer to a function which works like
** malloc.
**
** Inputs:
** A pointer to the function used to allocate memory.
**
** Outputs:
** A pointer to a parser.  This pointer is used in subsequent calls
** to XecParse and XecParseFree.
*/
void *XecParseAlloc(void *(*mallocProc)(size_t)){
  yyParser *pParser;
  pParser = (yyParser*)(*mallocProc)( (size_t)sizeof(yyParser) );
  if( pParser ){
    pParser->yyidx = -1;
#ifdef YYTRACKMAXSTACKDEPTH
    pParser->yyidxMax = 0;
#endif
#if YYSTACKDEPTH<=0
    pParser->yystack = NULL;
    pParser->yystksz = 0;
    yyGrowStack(pParser);
#endif
  }
  return pParser;
}

/* The following function deletes the value associated with a
** symbol.  The symbol can be either a terminal or nonterminal.
** "yymajor" is the symbol code, and "yypminor" is a pointer to
** the value.
*/
static void yy_destructor(
  yyParser *yypParser,    /* The parser */
  YYCODETYPE yymajor,     /* Type code for object to destroy */
  YYMINORTYPE *yypminor   /* The object to be destroyed */
){
  XecParseARG_FETCH;
  switch( yymajor ){
    /* Here is inserted the actions which take place when a
    ** terminal or non-terminal is destroyed.  This can happen
    ** when the symbol is popped from the stack during a
    ** reduce or during error processing or when a parser is 
    ** being destroyed before it is finished parsing.
    **
    ** Note: during a reduce, the only symbols destroyed are those
    ** which appear on the RHS of the rule, but which are not used
    ** inside the C code.
    */
      /* TERMINAL Destructor */
    case 1: /* IF */
    case 2: /* ELSE */
    case 3: /* TRY */
    case 4: /* CATCH */
    case 5: /* FINALLY */
    case 6: /* YIELD */
    case 7: /* USING */
    case 8: /* LPN */
    case 9: /* RPN */
    case 10: /* LBR */
    case 11: /* RBR */
    case 12: /* IDENTIFIER */
    case 13: /* PERIOD */
    case 14: /* COMMA */
    case 15: /* COLON */
    case 16: /* VAR */
    case 17: /* SEMICOLON */
    case 18: /* ASSIGN */
    case 19: /* LSQ */
    case 20: /* RSQ */
    case 21: /* NEW */
    case 22: /* NUMBER */
    case 23: /* STRING */
    case 24: /* TRUE */
    case 25: /* FALSE */
    case 26: /* NULL */
    case 27: /* INCREMENT */
    case 28: /* DECREMENT */
    case 29: /* PLUS */
    case 30: /* MINUS */
    case 31: /* XMARK */
    case 32: /* TILDE */
    case 33: /* ASTERISK */
    case 34: /* SOLIDUS */
    case 35: /* PERCENT */
    case 36: /* LSHIFT */
    case 37: /* RSHIFT */
    case 38: /* URSHIFT */
    case 39: /* AMPERSAND */
    case 40: /* CARET */
    case 41: /* VBAR */
    case 42: /* EQUAL */
    case 43: /* NOTEQUAL */
    case 44: /* LESS */
    case 45: /* GREATER */
    case 46: /* LESSEQUAL */
    case 47: /* GREATEREQUAL */
    case 48: /* IN */
    case 49: /* NOTIN */
    case 50: /* IS */
    case 51: /* NOTIS */
    case 52: /* LOGICAND */
    case 53: /* LOGICXOR */
    case 54: /* LOGICOR */
    case 55: /* QMARK */
    case 56: /* ELLIPSIS */
    case 57: /* MULASSIGN */
    case 58: /* DIVASSIGN */
    case 59: /* MODASSIGN */
    case 60: /* INTDIVASSIGN */
    case 61: /* ADDASSIGN */
    case 62: /* SUBASSIGN */
    case 63: /* LSHIFTASSIGN */
    case 64: /* RSHIFTASSIGN */
    case 65: /* URSHIFTASSIGN */
    case 66: /* BITANDASSIGN */
    case 67: /* BITXORASSIGN */
    case 68: /* BITORASSIGN */
    case 69: /* DELETE */
    case 70: /* SWITCH */
    case 71: /* CASE */
    case 72: /* DEFAULT */
    case 73: /* WHILE */
    case 74: /* DO */
    case 75: /* FOR */
    case 76: /* EACHKEY */
    case 77: /* CONTINUE */
    case 78: /* BREAK */
    case 79: /* RETURN */
    case 80: /* THROW */
{
#line 54 "../../toolbox/source/xec/lib/xec_parser_lemon.y"

    p->destroy( (yypminor->yy0) );

#line 1566 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
}
      break;
      /* Default NON-TERMINAL Destructor */
    case 81: /* error */
    case 82: /* script */
    case 83: /* stmt_list */
    case 84: /* expr_paren */
    case 85: /* stmt_brace */
    case 86: /* odecl_brace */
    case 87: /* expr_list */
    case 88: /* odecl_list */
    case 89: /* name */
    case 90: /* name_list */
    case 91: /* proto */
    case 92: /* decl */
    case 93: /* odecl */
    case 94: /* expr_simple */
    case 95: /* expr_index */
    case 96: /* expr_yield */
    case 97: /* expr_new */
    case 98: /* expr_call */
    case 99: /* expr_postfix */
    case 100: /* expr_literal */
    case 101: /* expr_suffix */
    case 102: /* expr_unary */
    case 103: /* expr_mul */
    case 104: /* expr_add */
    case 105: /* expr_shift */
    case 106: /* expr_bitand */
    case 107: /* expr_bitxor */
    case 108: /* expr_bitor */
    case 109: /* expr_compare */
    case 110: /* expr_and */
    case 111: /* expr_xor */
    case 112: /* expr_or */
    case 113: /* expr_nolbr */
    case 114: /* expr_value */
    case 115: /* expr_lbody */
    case 116: /* expr_final */
    case 117: /* expr_assign */
    case 118: /* assign_op */
    case 119: /* value_lbody */
    case 120: /* value_list */
    case 121: /* keyval_lbody */
    case 122: /* keyval_list */
    case 123: /* sexpr_lbody */
    case 124: /* sexpr_list */
    case 125: /* sexpr_assign */
    case 126: /* condition */
    case 127: /* stmt_yield */
    case 128: /* stmt_using */
    case 129: /* stmt */
    case 130: /* catch */
    case 131: /* catch_list */
{
#line 49 "../../toolbox/source/xec/lib/xec_parser_lemon.y"

    delete (yypminor->yy5);

#line 1626 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
}
      break;
    default:  break;   /* If no destructor action specified: do nothing */
  }
}

/*
** Pop the parser's stack once.
**
** If there is a destructor routine associated with the token which
** is popped from the stack, then call it.
**
** Return the major token number for the symbol popped.
*/
static int yy_pop_parser_stack(yyParser *pParser){
  YYCODETYPE yymajor;
  yyStackEntry *yytos = &pParser->yystack[pParser->yyidx];

  if( pParser->yyidx<0 ) return 0;
#ifndef NDEBUG
  if( yyTraceFILE && pParser->yyidx>=0 ){
    fprintf(yyTraceFILE,"%sPopping %s\n",
      yyTracePrompt,
      yyTokenName[yytos->major]);
  }
#endif
  yymajor = yytos->major;
  yy_destructor(pParser, yymajor, &yytos->minor);
  pParser->yyidx--;
  return yymajor;
}

/* 
** Deallocate and destroy a parser.  Destructors are all called for
** all stack elements before shutting the parser down.
**
** Inputs:
** <ul>
** <li>  A pointer to the parser.  This should be a pointer
**       obtained from XecParseAlloc.
** <li>  A pointer to a function used to reclaim memory obtained
**       from malloc.
** </ul>
*/
void XecParseFree(
  void *p,                    /* The parser to be deleted */
  void (*freeProc)(void*)     /* Function used to reclaim memory */
){
  yyParser *pParser = (yyParser*)p;
  if( pParser==0 ) return;
  while( pParser->yyidx>=0 ) yy_pop_parser_stack(pParser);
#if YYSTACKDEPTH<=0
  free(pParser->yystack);
#endif
  (*freeProc)((void*)pParser);
}

/*
** Return the peak depth of the stack for a parser.
*/
#ifdef YYTRACKMAXSTACKDEPTH
int XecParseStackPeak(void *p){
  yyParser *pParser = (yyParser*)p;
  return pParser->yyidxMax;
}
#endif

/*
** Find the appropriate action for a parser given the terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
static int yy_find_shift_action(
  yyParser *pParser,        /* The parser */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
  int stateno = pParser->yystack[pParser->yyidx].stateno;
 
  if( stateno>YY_SHIFT_MAX || (i = yy_shift_ofst[stateno])==YY_SHIFT_USE_DFLT ){
    return yy_default[stateno];
  }
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
  if( i<0 || i>=YY_SZ_ACTTAB || yy_lookahead[i]!=iLookAhead ){
    if( iLookAhead>0 ){
#ifdef YYFALLBACK
      YYCODETYPE iFallback;            /* Fallback token */
      if( iLookAhead<sizeof(yyFallback)/sizeof(yyFallback[0])
             && (iFallback = yyFallback[iLookAhead])!=0 ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE, "%sFALLBACK %s => %s\n",
             yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[iFallback]);
        }
#endif
        return yy_find_shift_action(pParser, iFallback);
      }
#endif
#ifdef YYWILDCARD
      {
        int j = i - iLookAhead + YYWILDCARD;
        if( j>=0 && j<YY_SZ_ACTTAB && yy_lookahead[j]==YYWILDCARD ){
#ifndef NDEBUG
          if( yyTraceFILE ){
            fprintf(yyTraceFILE, "%sWILDCARD %s => %s\n",
               yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[YYWILDCARD]);
          }
#endif /* NDEBUG */
          return yy_action[j];
        }
      }
#endif /* YYWILDCARD */
    }
    return yy_default[stateno];
  }else{
    return yy_action[i];
  }
}

/*
** Find the appropriate action for a parser given the non-terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
static int yy_find_reduce_action(
  int stateno,              /* Current state number */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
#ifdef YYERRORSYMBOL
  if( stateno>YY_REDUCE_MAX ){
    return yy_default[stateno];
  }
#else
  assert( stateno<=YY_REDUCE_MAX );
#endif
  i = yy_reduce_ofst[stateno];
  assert( i!=YY_REDUCE_USE_DFLT );
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
#ifdef YYERRORSYMBOL
  if( i<0 || i>=YY_SZ_ACTTAB || yy_lookahead[i]!=iLookAhead ){
    return yy_default[stateno];
  }
#else
  assert( i>=0 && i<YY_SZ_ACTTAB );
  assert( yy_lookahead[i]==iLookAhead );
#endif
  return yy_action[i];
}

/*
** The following routine is called if the stack overflows.
*/
static void yyStackOverflow(yyParser *yypParser, YYMINORTYPE *yypMinor){
   XecParseARG_FETCH;
   yypParser->yyidx--;
#ifndef NDEBUG
   if( yyTraceFILE ){
     fprintf(yyTraceFILE,"%sStack Overflow!\n",yyTracePrompt);
   }
#endif
   while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
   /* Here code is inserted which will execute if the parser
   ** stack every overflows */
   XecParseARG_STORE; /* Suppress warning about unused %extra_argument var */
}

/*
** Perform a shift action.
*/
static void yy_shift(
  yyParser *yypParser,          /* The parser to be shifted */
  int yyNewState,               /* The new state to shift in */
  int yyMajor,                  /* The major token to shift in */
  YYMINORTYPE *yypMinor         /* Pointer to the minor token to shift in */
){
  yyStackEntry *yytos;
  yypParser->yyidx++;
#ifdef YYTRACKMAXSTACKDEPTH
  if( yypParser->yyidx>yypParser->yyidxMax ){
    yypParser->yyidxMax = yypParser->yyidx;
  }
#endif
#if YYSTACKDEPTH>0 
  if( yypParser->yyidx>=YYSTACKDEPTH ){
    yyStackOverflow(yypParser, yypMinor);
    return;
  }
#else
  if( yypParser->yyidx>=yypParser->yystksz ){
    yyGrowStack(yypParser);
    if( yypParser->yyidx>=yypParser->yystksz ){
      yyStackOverflow(yypParser, yypMinor);
      return;
    }
  }
#endif
  yytos = &yypParser->yystack[yypParser->yyidx];
  yytos->stateno = (YYACTIONTYPE)yyNewState;
  yytos->major = (YYCODETYPE)yyMajor;
  yytos->minor = *yypMinor;
#ifndef NDEBUG
  if( yyTraceFILE && yypParser->yyidx>0 ){
    int i;
    fprintf(yyTraceFILE,"%sShift %d\n",yyTracePrompt,yyNewState);
    fprintf(yyTraceFILE,"%sStack:",yyTracePrompt);
    for(i=1; i<=yypParser->yyidx; i++)
      fprintf(yyTraceFILE," %s",yyTokenName[yypParser->yystack[i].major]);
    fprintf(yyTraceFILE,"\n");
  }
#endif
}

/* The following table contains information about every rule that
** is used during the reduce.
*/
static const struct {
  YYCODETYPE lhs;         /* Symbol on the left-hand side of the rule */
  unsigned char nrhs;     /* Number of right-hand side symbols in the rule */
} yyRuleInfo[] = {
  { 82, 0 },
  { 82, 1 },
  { 84, 2 },
  { 84, 3 },
  { 85, 2 },
  { 85, 3 },
  { 86, 2 },
  { 86, 3 },
  { 89, 1 },
  { 89, 3 },
  { 90, 1 },
  { 90, 3 },
  { 91, 2 },
  { 92, 2 },
  { 92, 4 },
  { 92, 2 },
  { 92, 3 },
  { 92, 3 },
  { 92, 5 },
  { 93, 1 },
  { 93, 2 },
  { 93, 3 },
  { 88, 1 },
  { 88, 1 },
  { 88, 2 },
  { 88, 2 },
  { 95, 3 },
  { 95, 5 },
  { 95, 4 },
  { 95, 3 },
  { 95, 5 },
  { 95, 4 },
  { 96, 2 },
  { 97, 3 },
  { 97, 3 },
  { 98, 2 },
  { 98, 2 },
  { 98, 2 },
  { 98, 2 },
  { 98, 2 },
  { 98, 2 },
  { 99, 3 },
  { 99, 5 },
  { 99, 4 },
  { 99, 3 },
  { 99, 5 },
  { 99, 4 },
  { 99, 3 },
  { 99, 5 },
  { 99, 4 },
  { 99, 3 },
  { 99, 5 },
  { 99, 4 },
  { 99, 3 },
  { 99, 5 },
  { 99, 4 },
  { 94, 1 },
  { 94, 1 },
  { 94, 1 },
  { 94, 1 },
  { 94, 1 },
  { 94, 1 },
  { 94, 1 },
  { 94, 2 },
  { 94, 2 },
  { 100, 1 },
  { 100, 1 },
  { 100, 1 },
  { 100, 1 },
  { 100, 1 },
  { 100, 1 },
  { 101, 1 },
  { 101, 2 },
  { 101, 2 },
  { 102, 1 },
  { 102, 2 },
  { 102, 2 },
  { 102, 2 },
  { 102, 2 },
  { 102, 2 },
  { 102, 2 },
  { 103, 1 },
  { 103, 3 },
  { 103, 3 },
  { 103, 3 },
  { 103, 3 },
  { 104, 1 },
  { 104, 3 },
  { 104, 3 },
  { 105, 1 },
  { 105, 3 },
  { 105, 3 },
  { 105, 3 },
  { 106, 1 },
  { 106, 3 },
  { 107, 1 },
  { 107, 3 },
  { 108, 1 },
  { 108, 3 },
  { 109, 1 },
  { 109, 3 },
  { 109, 3 },
  { 109, 3 },
  { 109, 3 },
  { 109, 3 },
  { 109, 3 },
  { 109, 3 },
  { 109, 3 },
  { 109, 3 },
  { 109, 3 },
  { 110, 1 },
  { 110, 3 },
  { 111, 1 },
  { 111, 3 },
  { 112, 1 },
  { 112, 3 },
  { 113, 1 },
  { 113, 5 },
  { 113, 2 },
  { 113, 3 },
  { 113, 2 },
  { 113, 3 },
  { 113, 3 },
  { 113, 4 },
  { 113, 4 },
  { 113, 5 },
  { 114, 1 },
  { 114, 2 },
  { 114, 3 },
  { 115, 1 },
  { 115, 3 },
  { 116, 1 },
  { 116, 2 },
  { 116, 2 },
  { 116, 2 },
  { 116, 3 },
  { 116, 3 },
  { 116, 4 },
  { 116, 4 },
  { 116, 4 },
  { 116, 4 },
  { 116, 4 },
  { 116, 4 },
  { 116, 4 },
  { 87, 1 },
  { 87, 1 },
  { 87, 3 },
  { 117, 1 },
  { 117, 3 },
  { 118, 1 },
  { 118, 1 },
  { 118, 1 },
  { 118, 1 },
  { 118, 1 },
  { 118, 1 },
  { 118, 1 },
  { 118, 1 },
  { 118, 1 },
  { 118, 1 },
  { 118, 1 },
  { 118, 1 },
  { 118, 1 },
  { 119, 1 },
  { 119, 3 },
  { 120, 1 },
  { 120, 2 },
  { 120, 1 },
  { 120, 2 },
  { 120, 3 },
  { 121, 3 },
  { 121, 5 },
  { 122, 1 },
  { 122, 2 },
  { 123, 1 },
  { 123, 3 },
  { 124, 1 },
  { 124, 1 },
  { 124, 3 },
  { 125, 1 },
  { 125, 3 },
  { 126, 1 },
  { 126, 4 },
  { 127, 1 },
  { 128, 1 },
  { 129, 1 },
  { 129, 2 },
  { 129, 3 },
  { 129, 5 },
  { 129, 7 },
  { 129, 5 },
  { 129, 3 },
  { 129, 2 },
  { 129, 5 },
  { 129, 7 },
  { 129, 7 },
  { 129, 7 },
  { 129, 8 },
  { 129, 8 },
  { 129, 9 },
  { 129, 2 },
  { 129, 2 },
  { 129, 2 },
  { 129, 3 },
  { 129, 2 },
  { 129, 3 },
  { 129, 5 },
  { 129, 3 },
  { 129, 3 },
  { 129, 4 },
  { 129, 5 },
  { 129, 3 },
  { 130, 6 },
  { 130, 7 },
  { 130, 8 },
  { 131, 1 },
  { 131, 2 },
  { 83, 1 },
  { 83, 1 },
  { 83, 1 },
  { 83, 2 },
  { 83, 2 },
  { 83, 2 },
};

static void yy_accept(yyParser*);  /* Forward Declaration */

/*
** Perform a reduce action and the shift that must immediately
** follow the reduce.
*/
static void yy_reduce(
  yyParser *yypParser,         /* The parser */
  int yyruleno                 /* Number of the rule by which to reduce */
){
  int yygoto;                     /* The next state */
  int yyact;                      /* The next action */
  YYMINORTYPE yygotominor;        /* The LHS of the rule reduced */
  yyStackEntry *yymsp;            /* The top of the parser's stack */
  int yysize;                     /* Amount to pop the stack */
  XecParseARG_FETCH;
  yymsp = &yypParser->yystack[yypParser->yyidx];
#ifndef NDEBUG
  if( yyTraceFILE && yyruleno>=0 
        && yyruleno<(int)(sizeof(yyRuleName)/sizeof(yyRuleName[0])) ){
    fprintf(yyTraceFILE, "%sReduce [%s].\n", yyTracePrompt,
      yyRuleName[yyruleno]);
  }
#endif /* NDEBUG */

  /* Silence complaints from purify about yygotominor being uninitialized
  ** in some cases when it is copied into the stack after the following
  ** switch.  yygotominor is uninitialized when a rule reduces that does
  ** not set the value of its left-hand side nonterminal.  Leaving the
  ** value of the nonterminal uninitialized is utterly harmless as long
  ** as the value is never used.  So really the only thing this code
  ** accomplishes is to quieten purify.  
  **
  ** 2007-01-16:  The wireshark project (www.wireshark.org) reports that
  ** without this code, their parser segfaults.  I'm not sure what there
  ** parser is doing to make this happen.  This is the second bug report
  ** from wireshark this week.  Clearly they are stressing Lemon in ways
  ** that it has not been previously stressed...  (SQLite ticket #2172)
  */
  /*memset(&yygotominor, 0, sizeof(yygotominor));*/
  yygotominor = yyzerominor;


  switch( yyruleno ){
  /* Beginning here are the reduction cases.  A typical example
  ** follows:
  **   case 0:
  **  #line <lineno> <grammarfile>
  **     { ... }           // User supplied code
  **  #line <lineno> <thisfile>
  **     break;
  */
      case 0: /* script ::= */
#line 95 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    p->set_root( NULL );
                }
#line 2136 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 1: /* script ::= stmt_list */
#line 99 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    p->set_root( yymsp[0].minor.yy163 );
                }
#line 2143 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 2: /* expr_paren ::= LPN RPN */
#line 115 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy57 = new xec_expression_list();
                  yy_destructor(yypParser,8,&yymsp[-1].minor);
  yy_destructor(yypParser,9,&yymsp[0].minor);
}
#line 2152 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 3: /* expr_paren ::= LPN expr_list RPN */
#line 119 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy57 = yymsp[-1].minor.yy218->as_list();
                  yy_destructor(yypParser,8,&yymsp[-2].minor);
  yy_destructor(yypParser,9,&yymsp[0].minor);
}
#line 2161 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 4: /* stmt_brace ::= LBR RBR */
#line 124 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy163 = new xec_statement_compound();
                  yy_destructor(yypParser,10,&yymsp[-1].minor);
  yy_destructor(yypParser,11,&yymsp[0].minor);
}
#line 2170 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 5: /* stmt_brace ::= LBR stmt_list RBR */
#line 128 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy163 = yymsp[-1].minor.yy163;
                  yy_destructor(yypParser,10,&yymsp[-2].minor);
  yy_destructor(yypParser,11,&yymsp[0].minor);
}
#line 2179 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 6: /* odecl_brace ::= LBR RBR */
#line 133 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy38 = new xec_declaration_object();
                  yy_destructor(yypParser,10,&yymsp[-1].minor);
  yy_destructor(yypParser,11,&yymsp[0].minor);
}
#line 2188 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 7: /* odecl_brace ::= LBR odecl_list RBR */
#line 137 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy38 = yymsp[-1].minor.yy38;
                  yy_destructor(yypParser,10,&yymsp[-2].minor);
  yy_destructor(yypParser,11,&yymsp[0].minor);
}
#line 2197 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 8: /* name ::= IDENTIFIER */
#line 157 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy218 = new xec_expression_identifier( yymsp[0].minor.yy0 );
                }
#line 2204 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 9: /* name ::= name PERIOD IDENTIFIER */
      case 29: /* expr_index ::= expr_index PERIOD IDENTIFIER */ yytestcase(yyruleno==29);
      case 44: /* expr_postfix ::= expr_yield PERIOD IDENTIFIER */ yytestcase(yyruleno==44);
      case 47: /* expr_postfix ::= expr_new PERIOD IDENTIFIER */ yytestcase(yyruleno==47);
      case 53: /* expr_postfix ::= expr_postfix PERIOD IDENTIFIER */ yytestcase(yyruleno==53);
#line 161 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy218 = new xec_expression_lookup( yymsp[-2].minor.yy218, yymsp[0].minor.yy0 );
                  yy_destructor(yypParser,13,&yymsp[-1].minor);
}
#line 2216 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 10: /* name_list ::= name */
      case 56: /* expr_simple ::= name */ yytestcase(yyruleno==56);
      case 58: /* expr_simple ::= expr_index */ yytestcase(yyruleno==58);
      case 59: /* expr_simple ::= expr_yield */ yytestcase(yyruleno==59);
      case 60: /* expr_simple ::= expr_new */ yytestcase(yyruleno==60);
      case 62: /* expr_simple ::= expr_postfix */ yytestcase(yyruleno==62);
      case 65: /* expr_literal ::= expr_simple */ yytestcase(yyruleno==65);
      case 71: /* expr_suffix ::= expr_literal */ yytestcase(yyruleno==71);
      case 74: /* expr_unary ::= expr_suffix */ yytestcase(yyruleno==74);
      case 81: /* expr_mul ::= expr_unary */ yytestcase(yyruleno==81);
      case 86: /* expr_add ::= expr_mul */ yytestcase(yyruleno==86);
      case 89: /* expr_shift ::= expr_add */ yytestcase(yyruleno==89);
      case 93: /* expr_bitand ::= expr_shift */ yytestcase(yyruleno==93);
      case 95: /* expr_bitxor ::= expr_bitand */ yytestcase(yyruleno==95);
      case 97: /* expr_bitor ::= expr_bitxor */ yytestcase(yyruleno==97);
      case 99: /* expr_compare ::= expr_bitor */ yytestcase(yyruleno==99);
      case 110: /* expr_and ::= expr_compare */ yytestcase(yyruleno==110);
      case 112: /* expr_xor ::= expr_and */ yytestcase(yyruleno==112);
      case 114: /* expr_or ::= expr_xor */ yytestcase(yyruleno==114);
      case 116: /* expr_nolbr ::= expr_or */ yytestcase(yyruleno==116);
      case 126: /* expr_value ::= expr_nolbr */ yytestcase(yyruleno==126);
      case 129: /* expr_lbody ::= expr_value */ yytestcase(yyruleno==129);
      case 144: /* expr_list ::= expr_final */ yytestcase(yyruleno==144);
      case 145: /* expr_list ::= expr_lbody */ yytestcase(yyruleno==145);
      case 147: /* expr_assign ::= expr_list */ yytestcase(yyruleno==147);
      case 173: /* sexpr_lbody ::= expr_nolbr */ yytestcase(yyruleno==173);
      case 175: /* sexpr_list ::= expr_final */ yytestcase(yyruleno==175);
      case 176: /* sexpr_list ::= sexpr_lbody */ yytestcase(yyruleno==176);
      case 178: /* sexpr_assign ::= sexpr_list */ yytestcase(yyruleno==178);
      case 180: /* condition ::= expr_assign */ yytestcase(yyruleno==180);
#line 168 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy218 = yymsp[0].minor.yy218;
                }
#line 2252 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 11: /* name_list ::= name_list COMMA name */
      case 130: /* expr_lbody ::= expr_lbody COMMA expr_value */ yytestcase(yyruleno==130);
      case 174: /* sexpr_lbody ::= sexpr_lbody COMMA expr_value */ yytestcase(yyruleno==174);
#line 172 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    xec_expression_list* list;
                    yygotominor.yy218 = list = yymsp[-2].minor.yy218->as_list();
                    list->append_expression( yymsp[0].minor.yy218 );
                  yy_destructor(yypParser,14,&yymsp[-1].minor);
}
#line 2264 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 12: /* proto ::= name expr_paren */
      case 36: /* expr_call ::= expr_index expr_paren */ yytestcase(yyruleno==36);
      case 37: /* expr_call ::= expr_yield expr_paren */ yytestcase(yyruleno==37);
      case 38: /* expr_call ::= expr_new expr_paren */ yytestcase(yyruleno==38);
      case 40: /* expr_call ::= expr_postfix expr_paren */ yytestcase(yyruleno==40);
#line 181 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy9 = new xec_expression_call( yymsp[-1].minor.yy218, yymsp[0].minor.yy57 );
                }
#line 2275 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 13: /* decl ::= name odecl_brace */
#line 188 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yymsp[0].minor.yy38->set_name( yymsp[-1].minor.yy218 );
                    yygotominor.yy116 = yymsp[0].minor.yy38;
                }
#line 2283 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 14: /* decl ::= name COLON expr_simple odecl_brace */
#line 193 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    // yymsp[0].minor.yy38 already constructed by odecl_brace.
                    yymsp[0].minor.yy38->set_name( yymsp[-3].minor.yy218 );
                    yymsp[0].minor.yy38->set_prototype( yymsp[-1].minor.yy218 );
                    yygotominor.yy116 = yymsp[0].minor.yy38;
                  yy_destructor(yypParser,15,&yymsp[-2].minor);
}
#line 2294 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 15: /* decl ::= proto stmt_brace */
#line 200 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    // Convert call expression to function declaration.
                    xec_declaration_function* value;
                    yygotominor.yy116 = value = yymsp[-1].minor.yy9->as_function();
                    value->set_body( yymsp[0].minor.yy163 );
                    delete yymsp[-1].minor.yy9;
                }
#line 2305 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 16: /* decl ::= proto YIELD stmt_brace */
#line 208 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    // Convert call expression to coroutine declaration.
                    xec_declaration_function* value;
                    yygotominor.yy116 = value = yymsp[-2].minor.yy9->as_function();
                    value->set_coroutine( true );
                    value->set_body( yymsp[0].minor.yy163 );
                    delete yymsp[-2].minor.yy9;
                  yy_destructor(yypParser,6,&yymsp[-1].minor);
}
#line 2318 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 17: /* decl ::= VAR name_list SEMICOLON */
#line 217 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy116 = new xec_declaration_var(
                                yymsp[-1].minor.yy218->as_list(), NULL );
                  yy_destructor(yypParser,16,&yymsp[-2].minor);
  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 2328 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 18: /* decl ::= VAR name_list ASSIGN expr_list SEMICOLON */
#line 223 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy116 = new xec_declaration_var(
                                yymsp[-3].minor.yy218->as_list(), yymsp[-1].minor.yy218->as_list() );
                  yy_destructor(yypParser,16,&yymsp[-4].minor);
  yy_destructor(yypParser,18,&yymsp[-2].minor);
  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 2339 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 19: /* odecl ::= decl */
#line 231 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy116 = yymsp[0].minor.yy116;
                }
#line 2346 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 20: /* odecl ::= proto SEMICOLON */
#line 235 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    // Convert call expression to prototype declaration.
                    yygotominor.yy116 = yymsp[-1].minor.yy9->as_prototype();
                    delete yymsp[-1].minor.yy9;
                  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 2356 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 21: /* odecl ::= proto YIELD SEMICOLON */
#line 241 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    // Call expression becomes coroutine prototype declaration.
                    xec_declaration_prototype* decl;
                    yygotominor.yy116 = decl = yymsp[-2].minor.yy9->as_prototype();
                    decl->set_coroutine( true );
                    delete yymsp[-2].minor.yy9;
                  yy_destructor(yypParser,6,&yymsp[-1].minor);
  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 2369 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 22: /* odecl_list ::= SEMICOLON */
#line 251 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy38 = new xec_declaration_object();
                  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 2377 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 23: /* odecl_list ::= odecl */
#line 255 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy38 = new xec_declaration_object();
                    yymsp[0].minor.yy116->set_thiscall( true );
                    yygotominor.yy38->add_declaration( yymsp[0].minor.yy116 );
                }
#line 2386 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 24: /* odecl_list ::= odecl_list SEMICOLON */
#line 261 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy38 = yymsp[-1].minor.yy38;
                  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 2394 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 25: /* odecl_list ::= odecl_list odecl */
#line 265 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy38 = yymsp[-1].minor.yy38;
                    yymsp[0].minor.yy116->set_thiscall( true );
                    yygotominor.yy38->add_declaration( yymsp[0].minor.yy116 );
                }
#line 2403 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 26: /* expr_index ::= LPN expr_assign RPN */
#line 311 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    // Multiple values in brackets collapse to a single value.
                    yygotominor.yy218 = yymsp[-1].minor.yy218->as_mono();
                  yy_destructor(yypParser,8,&yymsp[-2].minor);
  yy_destructor(yypParser,9,&yymsp[0].minor);
}
#line 2413 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 27: /* expr_index ::= name PERIOD LSQ expr_value RSQ */
      case 30: /* expr_index ::= expr_index PERIOD LSQ expr_value RSQ */ yytestcase(yyruleno==30);
      case 45: /* expr_postfix ::= expr_yield PERIOD LSQ expr_value RSQ */ yytestcase(yyruleno==45);
      case 48: /* expr_postfix ::= expr_new PERIOD LSQ expr_value RSQ */ yytestcase(yyruleno==48);
      case 54: /* expr_postfix ::= expr_postfix PERIOD LSQ expr_value RSQ */ yytestcase(yyruleno==54);
#line 316 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy218 = new xec_expression_indexkey( yymsp[-4].minor.yy218, yymsp[-1].minor.yy218 );
                  yy_destructor(yypParser,13,&yymsp[-3].minor);
  yy_destructor(yypParser,19,&yymsp[-2].minor);
  yy_destructor(yypParser,20,&yymsp[0].minor);
}
#line 2427 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 28: /* expr_index ::= name LSQ expr_value RSQ */
      case 31: /* expr_index ::= expr_index LSQ expr_value RSQ */ yytestcase(yyruleno==31);
      case 46: /* expr_postfix ::= expr_yield LSQ expr_value RSQ */ yytestcase(yyruleno==46);
      case 49: /* expr_postfix ::= expr_new LSQ expr_value RSQ */ yytestcase(yyruleno==49);
      case 55: /* expr_postfix ::= expr_postfix LSQ expr_value RSQ */ yytestcase(yyruleno==55);
#line 320 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy218 = new xec_expression_index( yymsp[-3].minor.yy218, yymsp[-1].minor.yy218 );
                  yy_destructor(yypParser,19,&yymsp[-2].minor);
  yy_destructor(yypParser,20,&yymsp[0].minor);
}
#line 2440 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 32: /* expr_yield ::= YIELD expr_paren */
#line 338 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy218 = new xec_expression_yield( yymsp[-1].minor.yy0, yymsp[0].minor.yy57 );
                }
#line 2447 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 33: /* expr_new ::= NEW name expr_paren */
      case 34: /* expr_new ::= NEW expr_index expr_paren */ yytestcase(yyruleno==34);
#line 344 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy218 = new xec_constructor_new( yymsp[-2].minor.yy0, yymsp[-1].minor.yy218, yymsp[0].minor.yy57 );
                }
#line 2455 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 35: /* expr_call ::= proto expr_paren */
      case 39: /* expr_call ::= expr_call expr_paren */ yytestcase(yyruleno==39);
#line 354 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy9 = new xec_expression_call( yymsp[-1].minor.yy9, yymsp[0].minor.yy57 );
                }
#line 2463 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 41: /* expr_postfix ::= proto PERIOD IDENTIFIER */
      case 50: /* expr_postfix ::= expr_call PERIOD IDENTIFIER */ yytestcase(yyruleno==50);
#line 380 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy218 = new xec_expression_lookup( yymsp[-2].minor.yy9, yymsp[0].minor.yy0 );
                  yy_destructor(yypParser,13,&yymsp[-1].minor);
}
#line 2472 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 42: /* expr_postfix ::= proto PERIOD LSQ expr_value RSQ */
      case 51: /* expr_postfix ::= expr_call PERIOD LSQ expr_value RSQ */ yytestcase(yyruleno==51);
#line 384 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy218 = new xec_expression_indexkey( yymsp[-4].minor.yy9, yymsp[-1].minor.yy218 );
                  yy_destructor(yypParser,13,&yymsp[-3].minor);
  yy_destructor(yypParser,19,&yymsp[-2].minor);
  yy_destructor(yypParser,20,&yymsp[0].minor);
}
#line 2483 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 43: /* expr_postfix ::= proto LSQ expr_value RSQ */
      case 52: /* expr_postfix ::= expr_call LSQ expr_value RSQ */ yytestcase(yyruleno==52);
#line 388 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy218 = new xec_expression_index( yymsp[-3].minor.yy9, yymsp[-1].minor.yy218 );
                  yy_destructor(yypParser,19,&yymsp[-2].minor);
  yy_destructor(yypParser,20,&yymsp[0].minor);
}
#line 2493 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 57: /* expr_simple ::= proto */
      case 61: /* expr_simple ::= expr_call */ yytestcase(yyruleno==61);
#line 450 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy218 = yymsp[0].minor.yy9;
                }
#line 2501 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 63: /* expr_simple ::= proto YIELD */
      case 64: /* expr_simple ::= expr_call YIELD */ yytestcase(yyruleno==64);
#line 474 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy9->set_yieldcall( true );
                    yygotominor.yy218 = yymsp[-1].minor.yy9;
                  yy_destructor(yypParser,6,&yymsp[0].minor);
}
#line 2511 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 66: /* expr_literal ::= NUMBER */
#line 489 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy218 = new xec_expression_number( yymsp[0].minor.yy0 );
                }
#line 2518 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 67: /* expr_literal ::= STRING */
#line 493 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy218 = new xec_expression_string( yymsp[0].minor.yy0 );
                }
#line 2525 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 68: /* expr_literal ::= TRUE */
      case 69: /* expr_literal ::= FALSE */ yytestcase(yyruleno==69);
#line 497 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy218 = new xec_expression_bool( yymsp[0].minor.yy0 );
                }
#line 2533 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 70: /* expr_literal ::= NULL */
#line 505 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy218 = new xec_expression_null( yymsp[0].minor.yy0 );
                }
#line 2540 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 72: /* expr_suffix ::= expr_suffix INCREMENT */
      case 73: /* expr_suffix ::= expr_suffix DECREMENT */ yytestcase(yyruleno==73);
#line 514 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy218 = new xec_expression_unary( yymsp[-1].minor.yy218, yymsp[0].minor.yy0 );
                }
#line 2548 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 75: /* expr_unary ::= PLUS expr_unary */
      case 76: /* expr_unary ::= MINUS expr_unary */ yytestcase(yyruleno==76);
      case 77: /* expr_unary ::= XMARK expr_unary */ yytestcase(yyruleno==77);
      case 78: /* expr_unary ::= TILDE expr_unary */ yytestcase(yyruleno==78);
      case 79: /* expr_unary ::= INCREMENT expr_unary */ yytestcase(yyruleno==79);
      case 80: /* expr_unary ::= DECREMENT expr_unary */ yytestcase(yyruleno==80);
#line 527 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy218 = new xec_expression_unary( yymsp[0].minor.yy218, yymsp[-1].minor.yy0 );
                }
#line 2560 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 82: /* expr_mul ::= expr_mul ASTERISK expr_unary */
      case 83: /* expr_mul ::= expr_mul SOLIDUS expr_unary */ yytestcase(yyruleno==83);
      case 84: /* expr_mul ::= expr_mul PERCENT expr_unary */ yytestcase(yyruleno==84);
      case 85: /* expr_mul ::= expr_mul TILDE expr_unary */ yytestcase(yyruleno==85);
      case 87: /* expr_add ::= expr_add PLUS expr_mul */ yytestcase(yyruleno==87);
      case 88: /* expr_add ::= expr_add MINUS expr_mul */ yytestcase(yyruleno==88);
      case 90: /* expr_shift ::= expr_shift LSHIFT expr_add */ yytestcase(yyruleno==90);
      case 91: /* expr_shift ::= expr_shift RSHIFT expr_add */ yytestcase(yyruleno==91);
      case 92: /* expr_shift ::= expr_shift URSHIFT expr_add */ yytestcase(yyruleno==92);
      case 94: /* expr_bitand ::= expr_bitand AMPERSAND expr_shift */ yytestcase(yyruleno==94);
      case 96: /* expr_bitxor ::= expr_bitxor CARET expr_bitand */ yytestcase(yyruleno==96);
      case 98: /* expr_bitor ::= expr_bitor VBAR expr_bitxor */ yytestcase(yyruleno==98);
#line 556 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy218 = new xec_expression_binary( yymsp[-2].minor.yy218, yymsp[-1].minor.yy0, yymsp[0].minor.yy218 );
                }
#line 2578 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 100: /* expr_compare ::= expr_compare EQUAL expr_bitor */
      case 101: /* expr_compare ::= expr_compare NOTEQUAL expr_bitor */ yytestcase(yyruleno==101);
      case 102: /* expr_compare ::= expr_compare LESS expr_bitor */ yytestcase(yyruleno==102);
      case 103: /* expr_compare ::= expr_compare GREATER expr_bitor */ yytestcase(yyruleno==103);
      case 104: /* expr_compare ::= expr_compare LESSEQUAL expr_bitor */ yytestcase(yyruleno==104);
      case 105: /* expr_compare ::= expr_compare GREATEREQUAL expr_bitor */ yytestcase(yyruleno==105);
      case 106: /* expr_compare ::= expr_compare IN expr_bitor */ yytestcase(yyruleno==106);
      case 107: /* expr_compare ::= expr_compare NOTIN expr_bitor */ yytestcase(yyruleno==107);
      case 108: /* expr_compare ::= expr_compare IS expr_bitor */ yytestcase(yyruleno==108);
      case 109: /* expr_compare ::= expr_compare NOTIS expr_bitor */ yytestcase(yyruleno==109);
#line 634 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    xec_expression_comparison* comparison;
                    yygotominor.yy218 = comparison = yymsp[-2].minor.yy218->as_comparison();
                    comparison->add_comparison( yymsp[-1].minor.yy0, yymsp[0].minor.yy218 );
                }
#line 2596 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 111: /* expr_and ::= expr_and LOGICAND expr_compare */
      case 113: /* expr_xor ::= expr_xor LOGICXOR expr_and */ yytestcase(yyruleno==113);
      case 115: /* expr_or ::= expr_or LOGICOR expr_xor */ yytestcase(yyruleno==115);
#line 700 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy218 = new xec_expression_logical( yymsp[-2].minor.yy218, yymsp[-1].minor.yy0, yymsp[0].minor.yy218 );
                }
#line 2605 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 117: /* expr_nolbr ::= expr_or QMARK expr_value COLON expr_value */
#line 729 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy218 = new xec_expression_conditional(
                                    yymsp[-4].minor.yy218, yymsp[-2].minor.yy218, yymsp[0].minor.yy218 );
                  yy_destructor(yypParser,55,&yymsp[-3].minor);
  yy_destructor(yypParser,15,&yymsp[-1].minor);
}
#line 2615 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 118: /* expr_nolbr ::= LSQ RSQ */
#line 734 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy218 = new xec_constructor_list();
                  yy_destructor(yypParser,19,&yymsp[-1].minor);
  yy_destructor(yypParser,20,&yymsp[0].minor);
}
#line 2624 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 119: /* expr_nolbr ::= LSQ value_list RSQ */
#line 738 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy218 = yymsp[-1].minor.yy27;
                  yy_destructor(yypParser,19,&yymsp[-2].minor);
  yy_destructor(yypParser,20,&yymsp[0].minor);
}
#line 2633 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 120: /* expr_nolbr ::= COLON odecl_brace */
#line 742 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy218 = yymsp[0].minor.yy38->as_constructor( yymsp[-1].minor.yy0 );
                }
#line 2640 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 121: /* expr_nolbr ::= COLON expr_simple odecl_brace */
#line 746 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yymsp[0].minor.yy38->set_prototype( yymsp[-1].minor.yy218 );
                    yygotominor.yy218 = yymsp[0].minor.yy38->as_constructor( yymsp[-2].minor.yy0 );
                }
#line 2648 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 122: /* expr_nolbr ::= QMARK expr_paren stmt_brace */
#line 751 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy218 = new xec_constructor_function( yymsp[-2].minor.yy0, yymsp[-1].minor.yy57, yymsp[0].minor.yy163 );
                }
#line 2655 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 123: /* expr_nolbr ::= PERIOD QMARK expr_paren stmt_brace */
#line 755 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    xec_constructor_function* func;
                    yygotominor.yy218 = func = new xec_constructor_function(
                                    yymsp[-3].minor.yy0, yymsp[-1].minor.yy57, yymsp[0].minor.yy163 );
                    func->set_thiscall( true );
                  yy_destructor(yypParser,55,&yymsp[-2].minor);
}
#line 2666 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 124: /* expr_nolbr ::= QMARK expr_paren YIELD stmt_brace */
#line 762 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    xec_constructor_function* func;
                    yygotominor.yy218 = func = new xec_constructor_function(
                                    yymsp[-3].minor.yy0, yymsp[-2].minor.yy57, yymsp[0].minor.yy163 );
                    func->set_coroutine( true );
                  yy_destructor(yypParser,6,&yymsp[-1].minor);
}
#line 2677 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 125: /* expr_nolbr ::= PERIOD QMARK expr_paren YIELD stmt_brace */
#line 770 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    xec_constructor_function* func;
                    yygotominor.yy218 = func = new xec_constructor_function(
                                    yymsp[-4].minor.yy0, yymsp[-2].minor.yy57, yymsp[0].minor.yy163 );
                    func->set_thiscall( true );
                    func->set_coroutine( true );
                  yy_destructor(yypParser,55,&yymsp[-3].minor);
  yy_destructor(yypParser,6,&yymsp[-1].minor);
}
#line 2690 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 127: /* expr_value ::= LBR RBR */
#line 784 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy218 = new xec_constructor_table();
                  yy_destructor(yypParser,10,&yymsp[-1].minor);
  yy_destructor(yypParser,11,&yymsp[0].minor);
}
#line 2699 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 128: /* expr_value ::= LBR keyval_list RBR */
#line 788 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy218 = yymsp[-1].minor.yy127;
                  yy_destructor(yypParser,10,&yymsp[-2].minor);
  yy_destructor(yypParser,11,&yymsp[0].minor);
}
#line 2708 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 131: /* expr_final ::= ELLIPSIS */
#line 805 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy218 = new xec_expression_varargs( yymsp[0].minor.yy0 );
                }
#line 2715 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 132: /* expr_final ::= proto ELLIPSIS */
      case 133: /* expr_final ::= expr_call ELLIPSIS */ yytestcase(yyruleno==133);
#line 809 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy9->set_unpack( true );
                    yygotominor.yy218 = yymsp[-1].minor.yy9;
                  yy_destructor(yypParser,56,&yymsp[0].minor);
}
#line 2725 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 134: /* expr_final ::= expr_yield ELLIPSIS */
#line 819 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy218 = yymsp[-1].minor.yy218;
                  yy_destructor(yypParser,56,&yymsp[0].minor);
}
#line 2733 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 135: /* expr_final ::= proto YIELD ELLIPSIS */
      case 136: /* expr_final ::= expr_call YIELD ELLIPSIS */ yytestcase(yyruleno==136);
#line 823 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yymsp[-2].minor.yy9->set_yieldcall( true );
                    yymsp[-2].minor.yy9->set_unpack( true );
                    yygotominor.yy218 = yymsp[-2].minor.yy9;
                  yy_destructor(yypParser,6,&yymsp[-1].minor);
  yy_destructor(yypParser,56,&yymsp[0].minor);
}
#line 2745 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 137: /* expr_final ::= name LSQ RSQ ELLIPSIS */
      case 139: /* expr_final ::= expr_index LSQ RSQ ELLIPSIS */ yytestcase(yyruleno==139);
      case 140: /* expr_final ::= expr_yield LSQ RSQ ELLIPSIS */ yytestcase(yyruleno==140);
      case 141: /* expr_final ::= expr_new LSQ RSQ ELLIPSIS */ yytestcase(yyruleno==141);
      case 143: /* expr_final ::= expr_postfix LSQ RSQ ELLIPSIS */ yytestcase(yyruleno==143);
#line 835 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy218 = new xec_expression_unpack( yymsp[-3].minor.yy218 );
                  yy_destructor(yypParser,19,&yymsp[-2].minor);
  yy_destructor(yypParser,20,&yymsp[-1].minor);
  yy_destructor(yypParser,56,&yymsp[0].minor);
}
#line 2759 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 138: /* expr_final ::= proto LSQ RSQ ELLIPSIS */
      case 142: /* expr_final ::= expr_call LSQ RSQ ELLIPSIS */ yytestcase(yyruleno==142);
#line 839 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy218 = new xec_expression_unpack( yymsp[-3].minor.yy9 );
                  yy_destructor(yypParser,19,&yymsp[-2].minor);
  yy_destructor(yypParser,20,&yymsp[-1].minor);
  yy_destructor(yypParser,56,&yymsp[0].minor);
}
#line 2770 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 146: /* expr_list ::= expr_lbody COMMA expr_final */
      case 177: /* sexpr_list ::= sexpr_lbody COMMA expr_final */ yytestcase(yyruleno==177);
#line 872 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    xec_expression_list* list;
                    yygotominor.yy218 = list = yymsp[-2].minor.yy218->as_list();
                    list->append_final( yymsp[0].minor.yy218 );
                  yy_destructor(yypParser,14,&yymsp[-1].minor);
}
#line 2781 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 148: /* expr_assign ::= expr_lbody assign_op expr_list */
      case 179: /* sexpr_assign ::= sexpr_lbody assign_op expr_list */ yytestcase(yyruleno==179);
#line 883 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy218 = new xec_expression_assign( yymsp[-2].minor.yy218, yymsp[-1].minor.yy43, yymsp[0].minor.yy218 );
                }
#line 2789 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 149: /* assign_op ::= ASSIGN */
      case 150: /* assign_op ::= MULASSIGN */ yytestcase(yyruleno==150);
      case 151: /* assign_op ::= DIVASSIGN */ yytestcase(yyruleno==151);
      case 152: /* assign_op ::= MODASSIGN */ yytestcase(yyruleno==152);
      case 153: /* assign_op ::= INTDIVASSIGN */ yytestcase(yyruleno==153);
      case 154: /* assign_op ::= ADDASSIGN */ yytestcase(yyruleno==154);
      case 155: /* assign_op ::= SUBASSIGN */ yytestcase(yyruleno==155);
      case 156: /* assign_op ::= LSHIFTASSIGN */ yytestcase(yyruleno==156);
      case 157: /* assign_op ::= RSHIFTASSIGN */ yytestcase(yyruleno==157);
      case 158: /* assign_op ::= URSHIFTASSIGN */ yytestcase(yyruleno==158);
      case 159: /* assign_op ::= BITANDASSIGN */ yytestcase(yyruleno==159);
      case 160: /* assign_op ::= BITXORASSIGN */ yytestcase(yyruleno==160);
      case 161: /* assign_op ::= BITORASSIGN */ yytestcase(yyruleno==161);
      case 182: /* stmt_yield ::= YIELD */ yytestcase(yyruleno==182);
      case 183: /* stmt_using ::= USING */ yytestcase(yyruleno==183);
#line 889 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy43 = yymsp[0].minor.yy0;
                }
#line 2810 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 162: /* value_lbody ::= expr_value */
#line 943 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy27 = new xec_constructor_list();
                    yygotominor.yy27->append_value( yymsp[0].minor.yy218 );
                }
#line 2818 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 163: /* value_lbody ::= value_lbody COMMA expr_value */
#line 948 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy27 = yymsp[-2].minor.yy27;
                    yygotominor.yy27->append_value( yymsp[0].minor.yy218 );
                  yy_destructor(yypParser,14,&yymsp[-1].minor);
}
#line 2827 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 164: /* value_list ::= expr_final */
#line 954 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy27 = new xec_constructor_list();
                    yygotominor.yy27->append_final( yymsp[0].minor.yy218 );
                }
#line 2835 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 165: /* value_list ::= expr_final COMMA */
#line 959 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy27 = new xec_constructor_list();
                    yygotominor.yy27->append_final( yymsp[-1].minor.yy218 );
                  yy_destructor(yypParser,14,&yymsp[0].minor);
}
#line 2844 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 166: /* value_list ::= value_lbody */
#line 964 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy27 = yymsp[0].minor.yy27;
                }
#line 2851 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 167: /* value_list ::= value_lbody COMMA */
#line 968 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy27 = yymsp[-1].minor.yy27;
                  yy_destructor(yypParser,14,&yymsp[0].minor);
}
#line 2859 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 168: /* value_list ::= value_lbody COMMA expr_final */
#line 972 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy27 = yymsp[-2].minor.yy27;
                    yygotominor.yy27->append_final( yymsp[0].minor.yy218 );
                  yy_destructor(yypParser,14,&yymsp[-1].minor);
}
#line 2868 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 169: /* keyval_lbody ::= expr_value COLON expr_value */
#line 979 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy127 = new xec_constructor_table();
                    yygotominor.yy127->append_keyval( yymsp[-2].minor.yy218, yymsp[0].minor.yy218 );
                  yy_destructor(yypParser,15,&yymsp[-1].minor);
}
#line 2877 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 170: /* keyval_lbody ::= keyval_lbody COMMA expr_value COLON expr_value */
#line 985 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy127 = yymsp[-4].minor.yy127;
                    yygotominor.yy127->append_keyval( yymsp[-2].minor.yy218, yymsp[0].minor.yy218 );
                  yy_destructor(yypParser,14,&yymsp[-3].minor);
  yy_destructor(yypParser,15,&yymsp[-1].minor);
}
#line 2887 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 171: /* keyval_list ::= keyval_lbody */
#line 991 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy127 = yymsp[0].minor.yy127;
                }
#line 2894 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 172: /* keyval_list ::= keyval_lbody COMMA */
#line 995 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy127 = yymsp[-1].minor.yy127;
                  yy_destructor(yypParser,14,&yymsp[0].minor);
}
#line 2902 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 181: /* condition ::= VAR name_list ASSIGN expr_list */
#line 1066 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy218 = new xec_expression_condition( yymsp[-3].minor.yy0,
                                yymsp[-2].minor.yy218->as_list(), yymsp[0].minor.yy218->as_list() );
                  yy_destructor(yypParser,18,&yymsp[-1].minor);
}
#line 2911 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 184: /* stmt ::= stmt_brace */
#line 1085 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy67 = yymsp[0].minor.yy163;
                }
#line 2918 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 185: /* stmt ::= sexpr_assign SEMICOLON */
#line 1089 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy67 = new xec_statement_expression( yymsp[-1].minor.yy218 );
                  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 2926 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 186: /* stmt ::= DELETE expr_lbody SEMICOLON */
#line 1093 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy67 = new xec_statement_delete( yymsp[-2].minor.yy0, yymsp[-1].minor.yy218->as_list() );
                  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 2934 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 187: /* stmt ::= IF LPN condition RPN stmt */
#line 1097 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy67 = new xec_statement_if( yymsp[-4].minor.yy0, yymsp[-2].minor.yy218, yymsp[0].minor.yy67, NULL );
                  yy_destructor(yypParser,8,&yymsp[-3].minor);
  yy_destructor(yypParser,9,&yymsp[-1].minor);
}
#line 2943 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 188: /* stmt ::= IF LPN condition RPN stmt ELSE stmt */
#line 1102 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy67 = new xec_statement_if( yymsp[-6].minor.yy0, yymsp[-4].minor.yy218, yymsp[-2].minor.yy67, yymsp[0].minor.yy67 );
                  yy_destructor(yypParser,8,&yymsp[-5].minor);
  yy_destructor(yypParser,9,&yymsp[-3].minor);
  yy_destructor(yypParser,2,&yymsp[-1].minor);
}
#line 2953 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 189: /* stmt ::= SWITCH LPN condition RPN stmt_brace */
#line 1106 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy67 = new xec_statement_switch( yymsp[-4].minor.yy0, yymsp[-2].minor.yy218, yymsp[0].minor.yy163 );
                  yy_destructor(yypParser,8,&yymsp[-3].minor);
  yy_destructor(yypParser,9,&yymsp[-1].minor);
}
#line 2962 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 190: /* stmt ::= CASE expr_value COLON */
#line 1110 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy67 = new xec_statement_case( yymsp[-2].minor.yy0, yymsp[-1].minor.yy218 );
                  yy_destructor(yypParser,15,&yymsp[0].minor);
}
#line 2970 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 191: /* stmt ::= DEFAULT COLON */
#line 1114 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy67 = new xec_statement_case( yymsp[-1].minor.yy0, NULL );
                  yy_destructor(yypParser,15,&yymsp[0].minor);
}
#line 2978 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 192: /* stmt ::= WHILE LPN condition RPN stmt */
#line 1118 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy67 = new xec_statement_while( yymsp[-4].minor.yy0, yymsp[-2].minor.yy218, yymsp[0].minor.yy67 );
                  yy_destructor(yypParser,8,&yymsp[-3].minor);
  yy_destructor(yypParser,9,&yymsp[-1].minor);
}
#line 2987 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 193: /* stmt ::= DO stmt WHILE LPN expr_assign RPN SEMICOLON */
#line 1123 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy67 = new xec_statement_do( yymsp[-6].minor.yy0, yymsp[-2].minor.yy218, yymsp[-5].minor.yy67 );
                  yy_destructor(yypParser,73,&yymsp[-4].minor);
  yy_destructor(yypParser,8,&yymsp[-3].minor);
  yy_destructor(yypParser,9,&yymsp[-1].minor);
  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 2998 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 194: /* stmt ::= FOR LPN expr_lbody COLON expr_value RPN stmt */
#line 1128 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy67 = new xec_statement_foreach( yymsp[-6].minor.yy0,
                                    yymsp[-4].minor.yy218->as_list(), yymsp[-2].minor.yy218, yymsp[0].minor.yy67 );
                  yy_destructor(yypParser,8,&yymsp[-5].minor);
  yy_destructor(yypParser,15,&yymsp[-3].minor);
  yy_destructor(yypParser,9,&yymsp[-1].minor);
}
#line 3009 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 195: /* stmt ::= FOR LPN expr_lbody EACHKEY expr_value RPN stmt */
#line 1134 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    xec_statement_foreach* stmt;
                    yygotominor.yy67 = stmt = new xec_statement_foreach( yymsp[-6].minor.yy0,
                                    yymsp[-4].minor.yy218->as_list(), yymsp[-2].minor.yy218, yymsp[0].minor.yy67 );
                    stmt->set_eachkey( true );
                  yy_destructor(yypParser,8,&yymsp[-5].minor);
  yy_destructor(yypParser,76,&yymsp[-3].minor);
  yy_destructor(yypParser,9,&yymsp[-1].minor);
}
#line 3022 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 196: /* stmt ::= FOR LPN VAR name_list COLON expr_value RPN stmt */
#line 1142 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    xec_statement_foreach* stmt;
                    yygotominor.yy67 = stmt = new xec_statement_foreach( yymsp[-7].minor.yy0,
                                        yymsp[-4].minor.yy218->as_list(), yymsp[-2].minor.yy218, yymsp[0].minor.yy67 );
                    stmt->set_condition( true );
                  yy_destructor(yypParser,8,&yymsp[-6].minor);
  yy_destructor(yypParser,16,&yymsp[-5].minor);
  yy_destructor(yypParser,15,&yymsp[-3].minor);
  yy_destructor(yypParser,9,&yymsp[-1].minor);
}
#line 3036 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 197: /* stmt ::= FOR LPN VAR name_list EACHKEY expr_value RPN stmt */
#line 1150 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    xec_statement_foreach* stmt;
                    yygotominor.yy67 = stmt = new xec_statement_foreach( yymsp[-7].minor.yy0,
                                        yymsp[-4].minor.yy218->as_list(), yymsp[-2].minor.yy218, yymsp[0].minor.yy67 );
                    stmt->set_condition( true );
                    stmt->set_eachkey( true );
                  yy_destructor(yypParser,8,&yymsp[-6].minor);
  yy_destructor(yypParser,16,&yymsp[-5].minor);
  yy_destructor(yypParser,76,&yymsp[-3].minor);
  yy_destructor(yypParser,9,&yymsp[-1].minor);
}
#line 3051 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 198: /* stmt ::= FOR LPN condition SEMICOLON expr_assign SEMICOLON expr_assign RPN stmt */
#line 1159 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy67 = new xec_statement_for(
                                        yymsp[-8].minor.yy0, yymsp[-6].minor.yy218, yymsp[-4].minor.yy218, yymsp[-2].minor.yy218, yymsp[0].minor.yy67 );
                  yy_destructor(yypParser,8,&yymsp[-7].minor);
  yy_destructor(yypParser,17,&yymsp[-5].minor);
  yy_destructor(yypParser,17,&yymsp[-3].minor);
  yy_destructor(yypParser,9,&yymsp[-1].minor);
}
#line 3063 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 199: /* stmt ::= CONTINUE SEMICOLON */
#line 1164 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy67 = new xec_statement_continue( yymsp[-1].minor.yy0 );
                  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 3071 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 200: /* stmt ::= BREAK SEMICOLON */
#line 1168 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy67 = new xec_statement_break( yymsp[-1].minor.yy0 );
                  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 3079 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 201: /* stmt ::= RETURN SEMICOLON */
#line 1172 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy67 = new xec_statement_return( yymsp[-1].minor.yy0, NULL );
                  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 3087 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 202: /* stmt ::= RETURN expr_list SEMICOLON */
#line 1176 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy67 = new xec_statement_return( yymsp[-2].minor.yy0, yymsp[-1].minor.yy218->as_list() );
                  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 3095 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 203: /* stmt ::= stmt_yield SEMICOLON */
#line 1180 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy67 = new xec_statement_yield( yymsp[-1].minor.yy43, NULL );
                  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 3103 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 204: /* stmt ::= stmt_yield expr_list SEMICOLON */
#line 1184 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy67 = new xec_statement_yield( yymsp[-2].minor.yy43, yymsp[-1].minor.yy218->as_list() );
                  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 3111 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 205: /* stmt ::= USING LPN condition RPN stmt */
#line 1188 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy67 = new xec_statement_using_scope( yymsp[-4].minor.yy0, yymsp[-2].minor.yy218, yymsp[0].minor.yy67 );
                  yy_destructor(yypParser,8,&yymsp[-3].minor);
  yy_destructor(yypParser,9,&yymsp[-1].minor);
}
#line 3120 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 206: /* stmt ::= stmt_using condition SEMICOLON */
#line 1192 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy67 = new xec_statement_using( yymsp[-2].minor.yy43, yymsp[-1].minor.yy218 );
                  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 3128 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 207: /* stmt ::= TRY stmt catch_list */
#line 1196 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy67 = yymsp[0].minor.yy5;
                    yymsp[0].minor.yy5->set_body( yymsp[-2].minor.yy0, yymsp[-1].minor.yy67 );
                }
#line 3136 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 208: /* stmt ::= TRY stmt FINALLY stmt */
#line 1201 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    xec_statement_try* stmt;
                    yygotominor.yy67 = stmt = new xec_statement_try();
                    stmt->set_body( yymsp[-3].minor.yy0, yymsp[-2].minor.yy67 );
                    stmt->set_finally( yymsp[-1].minor.yy0, yymsp[0].minor.yy67 );
                }
#line 3146 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 209: /* stmt ::= TRY stmt catch_list FINALLY stmt */
#line 1209 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy67 = yymsp[-2].minor.yy5;
                    yymsp[-2].minor.yy5->set_body( yymsp[-4].minor.yy0, yymsp[-3].minor.yy67 );
                    yymsp[-2].minor.yy5->set_finally( yymsp[-1].minor.yy0, yymsp[0].minor.yy67 );
                }
#line 3155 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 210: /* stmt ::= THROW expr_value SEMICOLON */
#line 1215 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy67 = new xec_statement_throw( yymsp[-1].minor.yy218 );
                  yy_destructor(yypParser,80,&yymsp[-2].minor);
  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 3164 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 211: /* catch ::= CATCH LPN COLON expr_simple RPN stmt */
#line 1221 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy97 = new xec_statement_catch( yymsp[-5].minor.yy0, NULL, yymsp[-2].minor.yy218, yymsp[0].minor.yy67 );
                  yy_destructor(yypParser,8,&yymsp[-4].minor);
  yy_destructor(yypParser,15,&yymsp[-3].minor);
  yy_destructor(yypParser,9,&yymsp[-1].minor);
}
#line 3174 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 212: /* catch ::= CATCH LPN expr_value COLON expr_simple RPN stmt */
#line 1226 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy97 = new xec_statement_catch( yymsp[-6].minor.yy0, yymsp[-4].minor.yy218, yymsp[-2].minor.yy218, yymsp[0].minor.yy67 );
                  yy_destructor(yypParser,8,&yymsp[-5].minor);
  yy_destructor(yypParser,15,&yymsp[-3].minor);
  yy_destructor(yypParser,9,&yymsp[-1].minor);
}
#line 3184 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 213: /* catch ::= CATCH LPN VAR name COLON expr_simple RPN stmt */
#line 1231 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy97 = new xec_statement_catch( yymsp[-7].minor.yy0, yymsp[-4].minor.yy218, yymsp[-2].minor.yy218, yymsp[0].minor.yy67 );
                    yygotominor.yy97->set_condition( true );
                  yy_destructor(yypParser,8,&yymsp[-6].minor);
  yy_destructor(yypParser,16,&yymsp[-5].minor);
  yy_destructor(yypParser,15,&yymsp[-3].minor);
  yy_destructor(yypParser,9,&yymsp[-1].minor);
}
#line 3196 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 214: /* catch_list ::= catch */
#line 1237 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy5 = new xec_statement_try();
                    yygotominor.yy5->append_catch( yymsp[0].minor.yy97 );
                }
#line 3204 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 215: /* catch_list ::= catch_list catch */
#line 1242 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy5 = yymsp[-1].minor.yy5;
                    yygotominor.yy5->append_catch( yymsp[0].minor.yy97 );
                }
#line 3212 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 216: /* stmt_list ::= stmt */
#line 1249 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy163 = new xec_statement_compound();
                    yygotominor.yy163->append_statement( yymsp[0].minor.yy67 );
                }
#line 3220 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 217: /* stmt_list ::= decl */
#line 1254 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy163 = new xec_statement_compound();
                    xec_statement_declaration* stmt =
                                    new xec_statement_declaration( yymsp[0].minor.yy116 );
                    yygotominor.yy163->append_statement( stmt );
                }
#line 3230 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 218: /* stmt_list ::= SEMICOLON */
#line 1261 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy163 = new xec_statement_compound();
                  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 3238 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 219: /* stmt_list ::= stmt_list stmt */
#line 1265 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy163 = yymsp[-1].minor.yy163;
                    yygotominor.yy163->append_statement( yymsp[0].minor.yy67 );
                }
#line 3246 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 220: /* stmt_list ::= stmt_list decl */
#line 1270 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy163 = yymsp[-1].minor.yy163;
                    xec_statement_declaration* stmt =
                                    new xec_statement_declaration( yymsp[0].minor.yy116 );
                    yygotominor.yy163->append_statement( stmt );
                }
#line 3256 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      case 221: /* stmt_list ::= stmt_list SEMICOLON */
#line 1277 "../../toolbox/source/xec/lib/xec_parser_lemon.y"
{
                    yygotominor.yy163 = yymsp[-1].minor.yy163;
                  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 3264 "../../toolbox/source/xec/lib/xec_parser_lemon.cpp"
        break;
      default:
        break;
  };
  yygoto = yyRuleInfo[yyruleno].lhs;
  yysize = yyRuleInfo[yyruleno].nrhs;
  yypParser->yyidx -= yysize;
  yyact = yy_find_reduce_action(yymsp[-yysize].stateno,(YYCODETYPE)yygoto);
  if( yyact < YYNSTATE ){
#ifdef NDEBUG
    /* If we are not debugging and the reduce action popped at least
    ** one element off the stack, then we can push the new element back
    ** onto the stack here, and skip the stack overflow test in yy_shift().
    ** That gives a significant speed improvement. */
    if( yysize ){
      yypParser->yyidx++;
      yymsp -= yysize-1;
      yymsp->stateno = (YYACTIONTYPE)yyact;
      yymsp->major = (YYCODETYPE)yygoto;
      yymsp->minor = yygotominor;
    }else
#endif
    {
      yy_shift(yypParser,yyact,yygoto,&yygotominor);
    }
  }else{
    assert( yyact == YYNSTATE + YYNRULE + 1 );
    yy_accept(yypParser);
  }
}

/*
** The following code executes when the parse fails
*/
#ifndef YYNOERRORRECOVERY
static void yy_parse_failed(
  yyParser *yypParser           /* The parser */
){
  XecParseARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sFail!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser fails */
  XecParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}
#endif /* YYNOERRORRECOVERY */

/*
** The following code executes when a syntax error first occurs.
*/
static void yy_syntax_error(
  yyParser *yypParser,           /* The parser */
  int yymajor,                   /* The major type of the error token */
  YYMINORTYPE yyminor            /* The minor type of the error token */
){
  XecParseARG_FETCH;
#define TOKEN (yyminor.yy0)
  XecParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/*
** The following is executed when the parser accepts
*/
static void yy_accept(
  yyParser *yypParser           /* The parser */
){
  XecParseARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sAccept!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser accepts */
  XecParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/* The main parser program.
** The first argument is a pointer to a structure obtained from
** "XecParseAlloc" which describes the current state of the parser.
** The second argument is the major token number.  The third is
** the minor token.  The fourth optional argument is whatever the
** user wants (and specified in the grammar) and is available for
** use by the action routines.
**
** Inputs:
** <ul>
** <li> A pointer to the parser (an opaque structure.)
** <li> The major token number.
** <li> The minor token number.
** <li> An option argument of a grammar-specified type.
** </ul>
**
** Outputs:
** None.
*/
void XecParse(
  void *yyp,                   /* The parser */
  int yymajor,                 /* The major token code number */
  XecParseTOKENTYPE yyminor       /* The value for the token */
  XecParseARG_PDECL               /* Optional %extra_argument parameter */
){
  YYMINORTYPE yyminorunion;
  int yyact;            /* The parser action. */
  int yyendofinput;     /* True if we are at the end of input */
#ifdef YYERRORSYMBOL
  int yyerrorhit = 0;   /* True if yymajor has invoked an error */
#endif
  yyParser *yypParser;  /* The parser */

  /* (re)initialize the parser, if necessary */
  yypParser = (yyParser*)yyp;
  if( yypParser->yyidx<0 ){
#if YYSTACKDEPTH<=0
    if( yypParser->yystksz <=0 ){
      /*memset(&yyminorunion, 0, sizeof(yyminorunion));*/
      yyminorunion = yyzerominor;
      yyStackOverflow(yypParser, &yyminorunion);
      return;
    }
#endif
    yypParser->yyidx = 0;
    yypParser->yyerrcnt = -1;
    yypParser->yystack[0].stateno = 0;
    yypParser->yystack[0].major = 0;
  }
  yyminorunion.yy0 = yyminor;
  yyendofinput = (yymajor==0);
  XecParseARG_STORE;

#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sInput %s\n",yyTracePrompt,yyTokenName[yymajor]);
  }
#endif

  do{
    yyact = yy_find_shift_action(yypParser,(YYCODETYPE)yymajor);
    if( yyact<YYNSTATE ){
      assert( !yyendofinput );  /* Impossible to shift the $ token */
      yy_shift(yypParser,yyact,yymajor,&yyminorunion);
      yypParser->yyerrcnt--;
      yymajor = YYNOCODE;
    }else if( yyact < YYNSTATE + YYNRULE ){
      yy_reduce(yypParser,yyact-YYNSTATE);
    }else{
      assert( yyact == YY_ERROR_ACTION );
#ifdef YYERRORSYMBOL
      int yymx;
#endif
#ifndef NDEBUG
      if( yyTraceFILE ){
        fprintf(yyTraceFILE,"%sSyntax Error!\n",yyTracePrompt);
      }
#endif
#ifdef YYERRORSYMBOL
      /* A syntax error has occurred.
      ** The response to an error depends upon whether or not the
      ** grammar defines an error token "ERROR".  
      **
      ** This is what we do if the grammar does define ERROR:
      **
      **  * Call the %syntax_error function.
      **
      **  * Begin popping the stack until we enter a state where
      **    it is legal to shift the error symbol, then shift
      **    the error symbol.
      **
      **  * Set the error count to three.
      **
      **  * Begin accepting and shifting new tokens.  No new error
      **    processing will occur until three tokens have been
      **    shifted successfully.
      **
      */
      if( yypParser->yyerrcnt<0 ){
        yy_syntax_error(yypParser,yymajor,yyminorunion);
      }
      yymx = yypParser->yystack[yypParser->yyidx].major;
      if( yymx==YYERRORSYMBOL || yyerrorhit ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE,"%sDiscard input token %s\n",
             yyTracePrompt,yyTokenName[yymajor]);
        }
#endif
        yy_destructor(yypParser, (YYCODETYPE)yymajor,&yyminorunion);
        yymajor = YYNOCODE;
      }else{
         while(
          yypParser->yyidx >= 0 &&
          yymx != YYERRORSYMBOL &&
          (yyact = yy_find_reduce_action(
                        yypParser->yystack[yypParser->yyidx].stateno,
                        YYERRORSYMBOL)) >= YYNSTATE
        ){
          yy_pop_parser_stack(yypParser);
        }
        if( yypParser->yyidx < 0 || yymajor==0 ){
          yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
          yy_parse_failed(yypParser);
          yymajor = YYNOCODE;
        }else if( yymx!=YYERRORSYMBOL ){
          YYMINORTYPE u2;
          u2.YYERRSYMDT = 0;
          yy_shift(yypParser,yyact,YYERRORSYMBOL,&u2);
        }
      }
      yypParser->yyerrcnt = 3;
      yyerrorhit = 1;
#elif defined(YYNOERRORRECOVERY)
      /* If the YYNOERRORRECOVERY macro is defined, then do not attempt to
      ** do any kind of error recovery.  Instead, simply invoke the syntax
      ** error routine and continue going as if nothing had happened.
      **
      ** Applications can set this macro (for example inside %include) if
      ** they intend to abandon the parse upon the first syntax error seen.
      */
      yy_syntax_error(yypParser,yymajor,yyminorunion);
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      yymajor = YYNOCODE;
      
#else  /* YYERRORSYMBOL is not defined */
      /* This is what we do if the grammar does not define ERROR:
      **
      **  * Report an error message, and throw away the input token.
      **
      **  * If the input token is $, then fail the parse.
      **
      ** As before, subsequent error messages are suppressed until
      ** three input tokens have been successfully shifted.
      */
      if( yypParser->yyerrcnt<=0 ){
        yy_syntax_error(yypParser,yymajor,yyminorunion);
      }
      yypParser->yyerrcnt = 3;
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      if( yyendofinput ){
        yy_parse_failed(yypParser);
      }
      yymajor = YYNOCODE;
#endif
    }
  }while( yymajor!=YYNOCODE && yypParser->yyidx>=0 );
  return;
}
