/* Driver template for the LEMON parser generator.
** The author disclaims copyright to this source code.
*/
/* First off, code is included that follows the "include" declaration
** in the input grammar file. */
#include <stdio.h>
#line 19 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"


#include <assert.h>
#include "xec_parser.h"
#include "xec_token.h"
#include "xec_ast.h"


struct xec_token_scope
{
    xec_token*      token;
    xec_ast_scope*  scope;
};


inline xec_token_scope make_token_scope(
                xec_token* token, xec_ast_scope* scope )
{
    xec_token_scope result;
    result.token = token;
    result.scope = scope;
    return result;
}


#line 77 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"



void xec_parser::destroy( xec_token* token )
{
    token->~xec_token();
    recycle_tokens.push_back( token );
}


#line 45 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
/* Next is all token values, in a form suitable for use by makeheaders.
** This section will be null unless lemon is run with the -m switch.
*/
/* 
** These constants (all generated automatically by the parser generator)
** specify the various kinds of tokens (terminals) that the parser
** understands. 
**
** Each symbol here is a terminal symbol in the grammar.
*/
/* Make sure the INTERFACE macro is defined.
*/
#ifndef INTERFACE
# define INTERFACE 1
#endif
/* The next thing included is series of defines which control
** various aspects of the generated parser.
**    YYCODETYPE         is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 terminals
**                       and nonterminals.  "int" is used otherwise.
**    YYNOCODE           is a number of type YYCODETYPE which corresponds
**                       to no legal terminal or nonterminal number.  This
**                       number is used to fill in empty slots of the hash 
**                       table.
**    YYFALLBACK         If defined, this indicates that one or more tokens
**                       have fall-back values which should be used if the
**                       original value of the token will not parse.
**    YYACTIONTYPE       is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 rules and
**                       states combined.  "int" is used otherwise.
**    XecParseTOKENTYPE     is the data type used for minor tokens given 
**                       directly to the parser from the tokenizer.
**    YYMINORTYPE        is the data type used for all minor tokens.
**                       This is typically a union of many types, one of
**                       which is XecParseTOKENTYPE.  The entry in the union
**                       for base tokens is called "yy0".
**    YYSTACKDEPTH       is the maximum depth of the parser's stack.  If
**                       zero the stack is dynamically sized using realloc()
**    XecParseARG_SDECL     A static variable declaration for the %extra_argument
**    XecParseARG_PDECL     A parameter declaration for the %extra_argument
**    XecParseARG_STORE     Code to store %extra_argument into yypParser
**    XecParseARG_FETCH     Code to extract %extra_argument from yypParser
**    YYNSTATE           the combined number of states.
**    YYNRULE            the number of rules in the grammar
**    YYERRORSYMBOL      is the code number of the error symbol.  If not
**                       defined, then do no error processing.
*/
#define YYCODETYPE unsigned char
#define YYNOCODE 156
#define YYACTIONTYPE unsigned short int
#define XecParseTOKENTYPE  xec_token* 
typedef union {
  int yyinit;
  XecParseTOKENTYPE yy0;
  xec_stmt_using_scope* yy2;
  xec_ast_node* yy3;
  xec_new_table* yy41;
  xec_stmt_foreach* yy153;
  xec_stmt_switch* yy159;
  xec_token* yy163;
  xec_stmt_catch* yy174;
  xec_new_list* yy187;
  xec_stmt_try* yy212;
  xec_token_scope yy222;
  xec_stmt_if* yy226;
  xec_stmt_for* yy256;
  xec_stmt_block* yy286;
  xec_stmt_do* yy298;
  xec_stmt_while* yy304;
} YYMINORTYPE;
#ifndef YYSTACKDEPTH
#define YYSTACKDEPTH 100
#endif
#define XecParseARG_SDECL  xec_parser* p ;
#define XecParseARG_PDECL , xec_parser* p 
#define XecParseARG_FETCH  xec_parser* p  = yypParser->p 
#define XecParseARG_STORE yypParser->p  = p 
#define YYNSTATE 495
#define YYNRULE 243
#define YY_NO_ACTION      (YYNSTATE+YYNRULE+2)
#define YY_ACCEPT_ACTION  (YYNSTATE+YYNRULE+1)
#define YY_ERROR_ACTION   (YYNSTATE+YYNRULE)

/* The yyzerominor constant is used to initialize instances of
** YYMINORTYPE objects to zero. */
static const YYMINORTYPE yyzerominor = { 0 };

/* Define the yytestcase() macro to be a no-op if is not already defined
** otherwise.
**
** Applications can choose to define yytestcase() in the %include section
** to a macro that can assist in verifying code coverage.  For production
** code the yytestcase() macro should be turned off.  But it is useful
** for testing.
*/
#ifndef yytestcase
# define yytestcase(X)
#endif


/* Next are the tables used to determine what action to take based on the
** current state and lookahead token.  These tables are used to implement
** functions that take a state number and lookahead value and return an
** action integer.  
**
** Suppose the action integer is N.  Then the action is determined as
** follows
**
**   0 <= N < YYNSTATE                  Shift N.  That is, push the lookahead
**                                      token onto the stack and goto state N.
**
**   YYNSTATE <= N < YYNSTATE+YYNRULE   Reduce by rule N-YYNSTATE.
**
**   N == YYNSTATE+YYNRULE              A syntax error has occurred.
**
**   N == YYNSTATE+YYNRULE+1            The parser accepts its input.
**
**   N == YYNSTATE+YYNRULE+2            No such action.  Denotes unused
**                                      slots in the yy_action[] table.
**
** The action table is constructed as a single large table named yy_action[].
** Given state S and lookahead X, the action is computed as
**
**      yy_action[ yy_shift_ofst[S] + X ]
**
** If the index value yy_shift_ofst[S]+X is out of range or if the value
** yy_lookahead[yy_shift_ofst[S]+X] is not equal to X or if yy_shift_ofst[S]
** is equal to YY_SHIFT_USE_DFLT, it means that the action is not in the table
** and that yy_default[S] should be used instead.  
**
** The formula above is for computing the action when the lookahead is
** a terminal symbol.  If the lookahead is a non-terminal (as occurs after
** a reduce action) then the yy_reduce_ofst[] array is used in place of
** the yy_shift_ofst[] array and YY_REDUCE_USE_DFLT is used in place of
** YY_SHIFT_USE_DFLT.
**
** The following are the tables generated in this section:
**
**  yy_action[]        A single table containing all actions.
**  yy_lookahead[]     A table containing the lookahead for each entry in
**                     yy_action.  Used to detect hash collisions.
**  yy_shift_ofst[]    For each state, the offset into yy_action for
**                     shifting terminals.
**  yy_reduce_ofst[]   For each state, the offset into yy_action for
**                     shifting non-terminals after a reduce.
**  yy_default[]       Default action for each state.
*/
static const YYACTIONTYPE yy_action[] = {
 /*     0 */   137,  494,  201,  208,  213,   17,  283,    7,   15,   23,
 /*    10 */   128,  127,  442,  309,   34,   25,  461,  316,  148,  146,
 /*    20 */   135,  405,  141,   38,  322,  188,  406,   85,  199,  200,
 /*    30 */   139,  453,  167,  360,   66,  156,  159,  149,  162,  328,
 /*    40 */   184,  337,  154,  173,  161,  206,  212,  209,  203,  144,
 /*    50 */   254,  246,  191,  378,  138,  140,  103,  397,  131,  398,
 /*    60 */   198,   37,  301,  399,  401,  137,  426,  201,  208,  213,
 /*    70 */    17,  283,    7,   15,   23,  128,  127,  308,  309,   34,
 /*    80 */    25,  347,  317,  148,  146,  135,  405,  141,   35,  322,
 /*    90 */   189,  406,   82,  199,  200,  139,  102,  167,   21,   57,
 /*   100 */   156,  159,  149,  162,  328,  184,  337,  154,  173,  161,
 /*   110 */   206,  212,  209,  203,  144,  254,  246,  191,  378,  138,
 /*   120 */   140,  100,  397,  131,  398,  198,  101,  427,  450,  401,
 /*   130 */    62,  426,  143,  201,  208,  213,   17,  283,    7,   15,
 /*   140 */    23,  128,  127,  108,  107,   34,   25,  329,  330,  148,
 /*   150 */   146,  280,  405,  141,   46,  322,  186,  406,  361,  199,
 /*   160 */   200,  139,  134,  167,   30,   56,  156,  159,  149,  162,
 /*   170 */   328,  184,  337,  154,  173,  161,  206,  212,  209,  203,
 /*   180 */   144,  254,  246,  191,  378,  138,  140,   19,  397,  131,
 /*   190 */   398,  198,  104,  105,  106,  419,  421,  426,  143,  201,
 /*   200 */   208,  213,   17,  283,    7,   15,   23,  128,  127,  408,
 /*   210 */    74,   34,   25,   37,  301,  148,  146,  354,  405,  141,
 /*   220 */    35,  322,  189,  406,  355,  199,  200,  139,  420,  167,
 /*   230 */   407,   84,  156,  159,  149,  162,  328,  184,  337,  154,
 /*   240 */   173,  161,  206,  212,  209,  203,  144,  254,  246,  191,
 /*   250 */   378,  138,  140,  286,  397,  131,  398,  198,  739,    4,
 /*   260 */   363,  419,  217,  426,  137,   22,  201,  208,  213,   17,
 /*   270 */   283,    7,   15,   23,  128,  127,  404,   75,   34,   25,
 /*   280 */   230,  319,  148,  146,  123,  405,  141,   42,  322,  188,
 /*   290 */   406,   73,  199,  200,  139,  211,  167,   31,   66,  156,
 /*   300 */   159,  149,  162,  328,  184,  337,  154,  173,  161,  206,
 /*   310 */   212,  209,  203,  144,  254,  246,  191,  378,  138,  140,
 /*   320 */     8,  397,  131,  398,  198,  240,   18,  449,  401,  425,
 /*   330 */   426,  143,  201,  208,  213,   17,  283,    7,   15,   23,
 /*   340 */   128,  127,   87,   61,   34,   25,  309,  318,  148,  146,
 /*   350 */    29,  405,  141,   41,  322,  190,  406,   79,  199,  200,
 /*   360 */   139,  216,  167,   44,   60,  156,  159,  149,  162,  328,
 /*   370 */   184,  337,  154,  173,  161,  206,  212,  209,  203,  144,
 /*   380 */   254,  246,  191,  378,  138,  140,  185,  397,  131,  398,
 /*   390 */   198,  428,  452,   13,  419,  423,  426,  143,  201,  208,
 /*   400 */   213,   17,  283,    7,   15,   23,  128,  127,   26,  309,
 /*   410 */    34,   25,   86,  312,  148,  146,  376,  405,  141,   41,
 /*   420 */   322,  190,  406,   67,  199,  200,  139,  458,  167,  455,
 /*   430 */    64,  156,  159,  149,  162,  328,  184,  337,  154,  173,
 /*   440 */   161,  206,  212,  209,  203,  144,  254,  246,  191,  378,
 /*   450 */   138,  140,  152,  397,  131,  398,  198,  240,   16,  459,
 /*   460 */   419,  422,  426,  137,  315,  201,  208,  213,   17,  283,
 /*   470 */     7,   15,   23,  128,  127,  344,  416,   34,   25,   50,
 /*   480 */   320,  148,  146,  429,  405,  141,   47,  322,  174,  406,
 /*   490 */    72,  199,  200,  139,  465,  167,  454,   80,  156,  159,
 /*   500 */   149,  162,  328,  184,  337,  154,  173,  161,  206,  212,
 /*   510 */   209,  203,  144,  254,  246,  191,  378,  138,  140,  142,
 /*   520 */   397,  131,  398,  198,  466,  182,  448,  401,  164,  426,
 /*   530 */   143,  201,  208,  213,   17,  283,    7,   15,   23,  128,
 /*   540 */   127,  467,  170,   34,   25,  310,  310,  148,  146,  468,
 /*   550 */   405,  141,   38,  322,  188,  406,   65,  199,  200,  139,
 /*   560 */   124,  167,  178,   55,  156,  159,  149,  162,  328,  184,
 /*   570 */   337,  154,  173,  161,  206,  212,  209,  203,  144,  254,
 /*   580 */   246,  191,  378,  138,  140,    6,  397,  131,  398,  198,
 /*   590 */   120,  452,   12,  419,  451,  426,  137,  469,  201,  208,
 /*   600 */   213,   17,  283,    7,   15,   23,  128,  127,    3,  470,
 /*   610 */    34,   25,    1,  346,  148,  146,  443,  405,  141,   46,
 /*   620 */   322,  186,  406,  471,  199,  200,  139,  119,  167,  472,
 /*   630 */    81,  156,  159,  149,  162,  328,  184,  337,  154,  173,
 /*   640 */   161,  206,  212,  209,  203,  144,  254,  246,  191,  378,
 /*   650 */   138,  140,    2,  397,  131,  398,  198,  474,    5,  414,
 /*   660 */   401,  476,  426,  143,  201,  208,  213,   17,  283,    7,
 /*   670 */    15,   23,  128,  127,  314,   58,   34,   25,   89,  430,
 /*   680 */   148,  146,   36,  405,  141,   43,  322,  190,  406,  477,
 /*   690 */   199,  200,  139,  478,  167,  351,   64,  156,  159,  149,
 /*   700 */   162,  328,  184,  337,  154,  173,  161,  206,  212,  209,
 /*   710 */   203,  144,  254,  246,  191,  378,  138,  140,  313,  397,
 /*   720 */   131,  398,  198,  479,  375,   88,  419,  457,  426,  143,
 /*   730 */   201,  208,  213,   17,  283,    7,   15,   23,  128,  127,
 /*   740 */   431,  480,   34,   25,  352,  433,  148,  146,  481,  405,
 /*   750 */   141,   51,  322,  482,  406,  353,  199,  200,  139,   68,
 /*   760 */   167,  484,  435,  156,  159,  149,  162,  328,  184,  337,
 /*   770 */   154,  173,  161,  206,  212,  209,  203,  144,  254,  246,
 /*   780 */   191,  378,  138,  140,  485,  397,  131,  398,  198,   69,
 /*   790 */   321,  486,  419,  456,  426,  137,  436,  201,  208,  213,
 /*   800 */    17,  283,    7,   15,   23,  128,  127,  447,  367,   34,
 /*   810 */    25,   71,  446,  148,  146,  488,  405,  141,   28,  322,
 /*   820 */   364,  406,   20,  199,  200,  139,   27,  167,  489,  187,
 /*   830 */   156,  159,  149,  162,  328,  184,  337,  154,  173,  161,
 /*   840 */   206,  212,  209,  203,  144,  254,  246,  191,  378,  138,
 /*   850 */   140,  445,  397,  131,  398,  198,  490,  491,  415,  401,
 /*   860 */   437,  426,   10,  362,  219,  304,  256,   26,  309,  281,
 /*   870 */   492,  377,  402,  121,  403,  135,  444,  176,   32,   39,
 /*   880 */   126,  323,  324,  325,  326,  327,  113,  118,  112,  111,
 /*   890 */   115,  116,  357,  166,  150,  114,  109,  117,  110,  235,
 /*   900 */   166,  150,  311,   41,  424,  230,  322,  168,  345,  125,
 /*   910 */   165,  158,  155,  169,  168,  278,  372,  165,  158,  155,
 /*   920 */   169,  328,  184,  337,  154,  173,  161,  206,  207,  439,
 /*   930 */    52,   63,  192,  306,  300,   33,   70,  438,  440,  441,
 /*   940 */   495,  437,  305,   10,   26,  309,  304,  256,   26,  309,
 /*   950 */   281,  493,  360,  402,  121,  403,  135,  126,    9,   32,
 /*   960 */    11,  126,  323,  324,  325,  326,  327,  113,  118,  112,
 /*   970 */   111,  115,  116,  740,  166,  150,  740,  740,  740,  740,
 /*   980 */   227,  166,  150,  740,  740,  740,  740,  322,  168,  740,
 /*   990 */   740,  165,  158,  155,  169,  168,  278,  372,  165,  158,
 /*  1000 */   155,  169,  328,  184,  337,  154,  173,  161,  218,  740,
 /*  1010 */   439,   52,   63,  192,  306,  300,   33,   70,  438,  440,
 /*  1020 */   441,  437,  740,   10,  740,  740,  304,  256,   26,  309,
 /*  1030 */   281,  740,  400,  402,  121,  403,  135,  740,  740,   32,
 /*  1040 */   740,  126,  323,  324,  325,  326,  327,  113,  118,  112,
 /*  1050 */   111,  115,  116,  740,  166,  150,  740,  740,  740,  740,
 /*  1060 */   222,  166,  150,  740,  740,  740,  740,  322,  168,  740,
 /*  1070 */   740,  165,  158,  155,  169,  168,  278,  372,  165,  158,
 /*  1080 */   155,  169,  328,  184,  337,  154,  173,  160,  740,  740,
 /*  1090 */   439,   52,   63,  192,  306,  300,   33,   70,  438,  440,
 /*  1100 */   441,  437,  740,   10,  740,  740,  304,  256,   26,  309,
 /*  1110 */   281,  417,  740,  402,  121,  403,  135,  740,  740,   32,
 /*  1120 */   740,  126,  323,  324,  325,  326,  327,  113,  118,  112,
 /*  1130 */   111,  115,  116,  740,  166,  150,  740,  740,  740,  740,
 /*  1140 */   183,  166,  150,  740,  740,  740,  740,  322,  168,  740,
 /*  1150 */   740,  165,  158,  155,  169,  168,  278,  372,  165,  158,
 /*  1160 */   155,  169,  328,  184,  337,  154,  179,  740,  740,  740,
 /*  1170 */   439,   52,   63,  192,  306,  300,   33,   70,  438,  440,
 /*  1180 */   441,  437,  740,   10,  740,  740,  304,  256,   26,  309,
 /*  1190 */   281,  740,  356,  402,  121,  403,  135,  740,  740,   32,
 /*  1200 */   740,  126,  323,  324,  325,  326,  327,  113,  118,  112,
 /*  1210 */   111,  115,  116,  740,  166,  150,  740,  740,  740,  740,
 /*  1220 */   276,  166,  150,  740,  740,  740,  740,  322,  168,  740,
 /*  1230 */   740,  165,  158,  155,  169,  168,  278,  372,  165,  158,
 /*  1240 */   155,  169,  328,  184,  337,  154,  181,  740,  740,  740,
 /*  1250 */   439,   52,   63,  192,  306,  300,   33,   70,  438,  440,
 /*  1260 */   441,  437,  740,   10,  740,  740,  304,  256,   26,  309,
 /*  1270 */   281,  740,  418,  402,  121,  403,  135,  740,  740,   32,
 /*  1280 */   740,  126,  323,  324,  325,  326,  327,  113,  118,  112,
 /*  1290 */   111,  115,  116,  223,  740,   45,  305,  172,   26,  309,
 /*  1300 */   355,  166,  150,  359,  740,  740,   54,  322,  740,  740,
 /*  1310 */   740,  126,  740,  740,  740,  168,  278,  372,  165,  158,
 /*  1320 */   155,  169,  328,  184,  337,  154,  171,  740,  740,  740,
 /*  1330 */   439,   52,   63,  192,  306,  300,   33,   70,  438,  440,
 /*  1340 */   441,  437,  740,   10,  460,  740,  304,  256,   26,  309,
 /*  1350 */   281,  740,  740,  416,  121,  403,  135,  740,  740,   32,
 /*  1360 */   740,  126,  323,  324,  325,  326,  327,  113,  118,  112,
 /*  1370 */   111,  115,  116,  223,   41,   45,  190,  172,  740,  345,
 /*  1380 */   125,  166,  150,  740,  740,   60,   54,  322,  740,  740,
 /*  1390 */   740,  740,  740,  740,  740,  168,  278,  372,  165,  158,
 /*  1400 */   155,  169,  328,  184,  337,  153,  740,  740,  740,  740,
 /*  1410 */   439,   52,   63,  192,  306,  300,   33,   70,  438,  440,
 /*  1420 */   441,  437,  740,   10,  460,  740,  304,  256,   26,  309,
 /*  1430 */   281,  740,  740,  402,  121,  403,  135,  740,  740,   32,
 /*  1440 */   740,  126,  323,  324,  325,  326,  327,  113,  118,  112,
 /*  1450 */   111,  115,  116,  740,  740,  237,  487,   40,   45,  177,
 /*  1460 */   172,  166,  150,  740,  740,  740,  740,  322,   53,   78,
 /*  1470 */   740,  740,  740,  740,  740,  168,  278,  372,  165,  158,
 /*  1480 */   155,  169,  328,  184,  337,  151,  740,  740,  740,  740,
 /*  1490 */   439,   52,   63,  192,  306,  300,   33,   70,  438,  440,
 /*  1500 */   441,  740,  740,  163,  147,  394,  473,  740,  740,  322,
 /*  1510 */   740,  740,  740,  410,  740,  740,  740,  167,  409,  370,
 /*  1520 */   156,  159,  149,  162,  328,  184,  337,  154,  173,  161,
 /*  1530 */   206,  212,  209,  203,  144,  254,  246,  191,  365,  138,
 /*  1540 */   140,  130,  374,  163,  147,  394,  411,  215,  740,  322,
 /*  1550 */   740,  740,  740,  410,  740,  740,  740,  167,  409,  370,
 /*  1560 */   156,  159,  149,  162,  328,  184,  337,  154,  173,  161,
 /*  1570 */   206,  212,  209,  203,  144,  254,  246,  191,  365,  138,
 /*  1580 */   140,  130,  374,  163,  147,  394,  411,  204,  740,  322,
 /*  1590 */   740,  740,  740,  410,  740,  740,  740,  167,  409,  370,
 /*  1600 */   156,  159,  149,  162,  328,  184,  337,  154,  173,  161,
 /*  1610 */   206,  212,  209,  203,  144,  254,  246,  191,  365,  138,
 /*  1620 */   140,  129,  374,  740,  740,  740,  411,  261,  163,  147,
 /*  1630 */   394,  740,  740,  740,  322,  740,  740,  740,  410,  740,
 /*  1640 */   740,  740,  167,  409,  370,  156,  159,  149,  162,  328,
 /*  1650 */   184,  337,  154,  173,  161,  206,  212,  209,  203,  144,
 /*  1660 */   254,  246,  191,  365,  138,  140,  130,  374,  163,  147,
 /*  1670 */   394,  411,  210,  740,  322,  740,  740,  740,  410,  740,
 /*  1680 */   740,  740,  167,  409,  370,  156,  159,  149,  162,  328,
 /*  1690 */   184,  337,  154,  173,  161,  206,  212,  209,  203,  144,
 /*  1700 */   254,  246,  191,  365,  138,  140,  130,  374,  163,  147,
 /*  1710 */   394,  205,  740,  740,  322,  740,  740,  740,  197,  740,
 /*  1720 */   740,  740,  167,  202,  370,  156,  159,  149,  162,  328,
 /*  1730 */   184,  337,  154,  173,  161,  206,  212,  209,  203,  144,
 /*  1740 */   254,  246,  191,  365,  138,  140,  130,  374,  740,  163,
 /*  1750 */   147,  394,  740,  740,  740,  322,  740,  740,  740,  413,
 /*  1760 */   740,  740,  740,  167,  412,  370,  156,  159,  149,  162,
 /*  1770 */   328,  184,  337,  154,  173,  161,  206,  212,  209,  203,
 /*  1780 */   144,  254,  246,  191,  365,  138,  140,  130,  374,  163,
 /*  1790 */   147,  394,  740,  740,  740,  322,  740,  740,  740,  740,
 /*  1800 */   740,  740,  740,  167,  258,  370,  156,  159,  149,  162,
 /*  1810 */   328,  184,  337,  154,  173,  161,  206,  212,  209,  203,
 /*  1820 */   144,  254,  246,  191,  365,  138,  140,  130,  374,  163,
 /*  1830 */   147,  394,  740,  740,  740,  322,  740,  740,  740,  740,
 /*  1840 */   740,  740,  740,  167,  214,  370,  156,  159,  149,  162,
 /*  1850 */   328,  184,  337,  154,  173,  161,  206,  212,  209,  203,
 /*  1860 */   144,  254,  246,  191,  365,  138,  140,  130,  374,  740,
 /*  1870 */   163,  147,  394,  740,  740,  740,  322,  740,  740,  740,
 /*  1880 */   740,  740,  740,  740,  167,  277,  370,  156,  159,  149,
 /*  1890 */   162,  328,  184,  337,  154,  173,  161,  206,  212,  209,
 /*  1900 */   203,  144,  254,  246,  191,  365,  138,  140,  130,  374,
 /*  1910 */   163,  147,  394,  740,  740,  740,  322,  740,  740,  740,
 /*  1920 */   740,  740,  740,  740,  167,  396,  370,  156,  159,  149,
 /*  1930 */   162,  328,  184,  337,  154,  173,  161,  206,  212,  209,
 /*  1940 */   203,  144,  254,  246,  191,  365,  138,  140,  130,  374,
 /*  1950 */   163,  147,  394,  740,  740,  740,  322,  740,  740,  740,
 /*  1960 */   740,  740,  740,  740,  167,  395,  370,  156,  159,  149,
 /*  1970 */   162,  328,  184,  337,  154,  173,  161,  206,  212,  209,
 /*  1980 */   203,  144,  254,  246,  191,  365,  138,  140,  130,  374,
 /*  1990 */   740,  163,  147,  394,  740,  740,  740,  322,  740,  740,
 /*  2000 */   740,  740,  740,  740,  740,  167,  260,  370,  156,  159,
 /*  2010 */   149,  162,  328,  184,  337,  154,  173,  161,  206,  212,
 /*  2020 */   209,  203,  144,  254,  246,  191,  365,  138,  140,  130,
 /*  2030 */   374,  163,  147,  231,  740,  740,  740,  322,  740,  740,
 /*  2040 */   740,  740,  740,  740,  740,  167,  740,  370,  156,  159,
 /*  2050 */   149,  162,  328,  184,  337,  154,  173,  161,  206,  212,
 /*  2060 */   209,  203,  144,  254,  246,  191,  365,  138,  140,  297,
 /*  2070 */   374,  163,  147,  294,  740,  740,  740,  322,  740,  740,
 /*  2080 */   740,  740,  740,  740,  740,  167,  740,  370,  156,  159,
 /*  2090 */   149,  162,  328,  184,  337,  154,  173,  161,  206,  212,
 /*  2100 */   209,  203,  144,  254,  246,  191,  365,  138,  140,  297,
 /*  2110 */   374,  740,  163,  147,  307,  740,  740,  740,  322,  740,
 /*  2120 */   740,  740,  740,  740,  740,  740,  167,  740,  370,  156,
 /*  2130 */   159,  149,  162,  328,  184,  337,  154,  173,  161,  206,
 /*  2140 */   212,  209,  203,  144,  254,  246,  191,  365,  138,  140,
 /*  2150 */   297,  374,  163,  147,  245,  740,  740,  740,  322,  740,
 /*  2160 */   740,  740,  740,  740,  740,  740,  167,  740,  370,  156,
 /*  2170 */   159,  149,  162,  328,  184,  337,  154,  173,  161,  206,
 /*  2180 */   212,  209,  203,  144,  254,  246,  191,  365,  138,  140,
 /*  2190 */   297,  374,  163,  147,  255,  740,  740,  740,  322,  740,
 /*  2200 */   740,  740,  740,  740,  740,  740,  167,  740,  370,  156,
 /*  2210 */   159,  149,  162,  328,  184,  337,  154,  173,  161,  206,
 /*  2220 */   212,  209,  203,  144,  254,  246,  191,  365,  138,  140,
 /*  2230 */   297,  374,  740,  163,  147,  284,  740,  740,  740,  322,
 /*  2240 */   740,  740,  740,  740,  740,  740,  740,  167,  740,  370,
 /*  2250 */   156,  159,  149,  162,  328,  184,  337,  154,  173,  161,
 /*  2260 */   206,  212,  209,  203,  144,  254,  246,  191,  365,  138,
 /*  2270 */   140,  297,  374,  163,  147,  259,  740,  740,  740,  322,
 /*  2280 */   740,  740,  740,  740,  740,  740,  740,  167,  740,  370,
 /*  2290 */   156,  159,  149,  162,  328,  184,  337,  154,  173,  161,
 /*  2300 */   206,  212,  209,  203,  144,  254,  246,  191,  365,  138,
 /*  2310 */   140,  297,  374,  163,  147,  262,  740,  740,  740,  322,
 /*  2320 */   740,  740,  740,  740,  740,  740,  740,  167,  740,  370,
 /*  2330 */   156,  159,  149,  162,  328,  184,  337,  154,  173,  161,
 /*  2340 */   206,  212,  209,  203,  144,  254,  246,  191,  365,  138,
 /*  2350 */   140,  297,  374,  740,  163,  147,  271,  740,  740,  740,
 /*  2360 */   322,  740,  740,  740,  740,  740,  740,  740,  167,  740,
 /*  2370 */   370,  156,  159,  149,  162,  328,  184,  337,  154,  173,
 /*  2380 */   161,  206,  212,  209,  203,  144,  254,  246,  191,  365,
 /*  2390 */   138,  140,  297,  374,  163,  147,  238,  740,  740,  740,
 /*  2400 */   322,  740,  740,  740,  740,  740,  740,  740,  167,  740,
 /*  2410 */   370,  156,  159,  149,  162,  328,  184,  337,  154,  173,
 /*  2420 */   161,  206,  212,  209,  203,  144,  254,  246,  191,  365,
 /*  2430 */   138,  140,  297,  374,  163,  147,  279,  740,  740,  740,
 /*  2440 */   322,  740,  740,  740,  740,  740,  740,  740,  167,  740,
 /*  2450 */   370,  156,  159,  149,  162,  328,  184,  337,  154,  173,
 /*  2460 */   161,  206,  212,  209,  203,  144,  254,  246,  191,  365,
 /*  2470 */   138,  140,  297,  374,  740,  163,  147,  298,  740,  740,
 /*  2480 */   740,  322,  740,  740,  740,  740,  740,  740,  740,  167,
 /*  2490 */   740,  370,  156,  159,  149,  162,  328,  184,  337,  154,
 /*  2500 */   173,  161,  206,  212,  209,  203,  144,  254,  246,  191,
 /*  2510 */   365,  138,  140,  297,  374,  163,  147,  252,  740,  740,
 /*  2520 */   740,  322,  740,  740,  740,  740,  740,  740,  740,  167,
 /*  2530 */   740,  370,  156,  159,  149,  162,  328,  184,  337,  154,
 /*  2540 */   173,  161,  206,  212,  209,  203,  144,  254,  246,  191,
 /*  2550 */   365,  138,  140,  297,  374,  163,  147,  264,  740,  740,
 /*  2560 */   740,  322,  740,  740,  740,  740,  740,  740,  740,  167,
 /*  2570 */   740,  370,  156,  159,  149,  162,  328,  184,  337,  154,
 /*  2580 */   173,  161,  206,  212,  209,  203,  144,  254,  246,  191,
 /*  2590 */   365,  138,  140,  297,  374,  740,  163,  147,  358,  740,
 /*  2600 */    76,  740,  322,  379,   51,  740,  740,  740,  740,  740,
 /*  2610 */   167,  740,  370,  156,  159,  149,  162,  328,  184,  337,
 /*  2620 */   154,  173,  161,  206,  212,  209,  203,  144,  254,  246,
 /*  2630 */   191,  365,  138,  140,  297,  374,  225,  224,  740,  740,
 /*  2640 */   740,  740,  740,  740,  380,  381,  382,  383,  384,  385,
 /*  2650 */   386,  387,  388,  389,  390,  391,  740,  740,  163,  147,
 /*  2660 */   740,  740,  379,   51,  322,  740,  740,   77,  740,  740,
 /*  2670 */   740,  740,  167,  740,  462,  156,  159,  149,  162,  328,
 /*  2680 */   184,  337,  154,  173,  161,  206,  212,  209,  203,  144,
 /*  2690 */   254,  246,  191,  365,  138,  140,  740,  226,  740,  293,
 /*  2700 */   288,  740,  740,  380,  381,  382,  383,  384,  385,  386,
 /*  2710 */   387,  388,  389,  390,  391,   47,  740,  174,  740,  166,
 /*  2720 */   150,  740,  740,  740,  740,  322,   59,  740,  740,  740,
 /*  2730 */   740,  740,  740,  168,  740,  290,  165,  158,  155,  169,
 /*  2740 */   328,  184,  337,  154,  173,  161,  206,  212,  209,  203,
 /*  2750 */   144,  254,  246,  191,  365,  138,  140,  475,  740,   40,
 /*  2760 */   740,  177,  740,  740,  483,  163,  147,  740,  740,  740,
 /*  2770 */    83,  322,  740,  740,  740,  740,  740,  740,  740,  167,
 /*  2780 */   740,  392,  156,  159,  149,  162,  328,  184,  337,  154,
 /*  2790 */   173,  161,  206,  212,  209,  203,  144,  254,  246,  191,
 /*  2800 */   365,  138,  140,  740,  393,  740,  163,  147,  740,  740,
 /*  2810 */   740,  740,  322,  740,  740,  740,  740,  740,  740,  740,
 /*  2820 */   167,  740,  371,  156,  159,  149,  162,  328,  184,  337,
 /*  2830 */   154,  173,  161,  206,  212,  209,  203,  144,  254,  246,
 /*  2840 */   191,  365,  138,  140,  740,  373,  166,  150,  740,  740,
 /*  2850 */   740,  740,  322,  740,  740,  740,  740,  740,  740,  740,
 /*  2860 */   168,  740,  370,  165,  158,  155,  169,  328,  184,  337,
 /*  2870 */   154,  173,  161,  206,  212,  209,  203,  144,  254,  246,
 /*  2880 */   191,  365,  138,  140,  175,  740,  163,  147,  740,  740,
 /*  2890 */   740,  740,  322,  740,  740,  740,  740,  740,  740,  740,
 /*  2900 */   167,  740,  463,  156,  159,  149,  162,  328,  184,  337,
 /*  2910 */   154,  173,  161,  206,  212,  209,  203,  144,  254,  246,
 /*  2920 */   191,  365,  138,  140,  740,  464,  740,  166,  150,  740,
 /*  2930 */   740,  740,  740,  322,  740,  740,  740,  740,  740,  740,
 /*  2940 */   740,  168,  740,  272,  165,  158,  155,  169,  328,  184,
 /*  2950 */   337,  154,  173,  161,  206,  212,  209,  203,  144,  254,
 /*  2960 */   246,  191,  365,  138,  140,  740,  740,  166,  150,  740,
 /*  2970 */   740,  740,  740,  322,  740,  740,  740,  740,  740,  740,
 /*  2980 */   740,  168,  740,  267,  165,  158,  155,  169,  328,  184,
 /*  2990 */   337,  154,  173,  161,  206,  212,  209,  203,  144,  254,
 /*  3000 */   246,  191,  365,  138,  140,  740,  740,  166,  150,  740,
 /*  3010 */   740,  740,  740,  322,  740,  740,  740,  740,  740,  740,
 /*  3020 */   740,  168,  740,  249,  165,  158,  155,  169,  328,  184,
 /*  3030 */   337,  154,  173,  161,  206,  212,  209,  203,  144,  254,
 /*  3040 */   246,  191,  365,  138,  140,  740,  740,  740,  166,  150,
 /*  3050 */   740,  740,  740,  740,  322,  740,  740,  740,  740,  740,
 /*  3060 */   740,  740,  168,  740,  263,  165,  158,  155,  169,  328,
 /*  3070 */   184,  337,  154,  173,  161,  206,  212,  209,  203,  144,
 /*  3080 */   254,  246,  191,  365,  138,  140,  740,  740,  166,  150,
 /*  3090 */   740,  740,  740,  740,  322,  740,  740,  740,  740,  740,
 /*  3100 */   740,  740,  168,  740,  232,  165,  158,  155,  169,  328,
 /*  3110 */   184,  337,  154,  173,  161,  206,  212,  209,  203,  144,
 /*  3120 */   254,  246,  191,  365,  138,  140,  740,  740,  166,  150,
 /*  3130 */   740,  740,  740,  740,  322,  740,  740,  740,  740,  740,
 /*  3140 */   740,  740,  168,  740,  269,  165,  158,  155,  169,  328,
 /*  3150 */   184,  337,  154,  173,  161,  206,  212,  209,  203,  144,
 /*  3160 */   254,  246,  191,  365,  138,  140,  740,  740,  740,  166,
 /*  3170 */   150,  740,  740,  740,  740,  322,  740,  740,  740,  740,
 /*  3180 */   740,  740,  740,  168,  740,  228,  165,  158,  155,  169,
 /*  3190 */   328,  184,  337,  154,  173,  161,  206,  212,  209,  203,
 /*  3200 */   144,  254,  246,  191,  365,  138,  140,  740,  740,  166,
 /*  3210 */   150,  740,  740,  740,  740,  322,  740,  740,  740,  740,
 /*  3220 */   740,  740,  740,  168,  740,  239,  165,  158,  155,  169,
 /*  3230 */   328,  184,  337,  154,  173,  161,  206,  212,  209,  203,
 /*  3240 */   144,  254,  246,  191,  365,  138,  140,  740,  740,  166,
 /*  3250 */   150,  740,  740,  740,  740,  322,  740,  740,  740,  740,
 /*  3260 */   740,  740,  740,  168,  740,  242,  165,  158,  155,  169,
 /*  3270 */   328,  184,  337,  154,  173,  161,  206,  212,  209,  203,
 /*  3280 */   144,  254,  246,  191,  365,  138,  140,  740,  740,  740,
 /*  3290 */   166,  150,  740,  740,  740,  740,  322,  740,  740,  740,
 /*  3300 */   740,  740,  740,  740,  168,  740,  302,  165,  158,  155,
 /*  3310 */   169,  328,  184,  337,  154,  173,  161,  206,  212,  209,
 /*  3320 */   203,  144,  254,  246,  191,  365,  138,  140,  740,  740,
 /*  3330 */   166,  150,  740,  740,  740,  740,  322,  740,  740,  740,
 /*  3340 */   740,  740,  740,  740,  168,  740,  247,  165,  158,  155,
 /*  3350 */   169,  328,  184,  337,  154,  173,  161,  206,  212,  209,
 /*  3360 */   203,  144,  254,  246,  191,  365,  138,  140,  740,  740,
 /*  3370 */   166,  150,  740,  740,  740,  740,  322,  740,  740,  740,
 /*  3380 */   740,  740,  740,  740,  168,  740,  234,  165,  158,  155,
 /*  3390 */   169,  328,  184,  337,  154,  173,  161,  206,  212,  209,
 /*  3400 */   203,  144,  254,  246,  191,  365,  138,  140,  740,  740,
 /*  3410 */   740,  166,  150,  740,  740,  740,  740,  322,  740,  740,
 /*  3420 */   740,  740,  740,  740,  740,  168,  740,  253,  165,  158,
 /*  3430 */   155,  169,  328,  184,  337,  154,  173,  161,  206,  212,
 /*  3440 */   209,  203,  144,  254,  246,  191,  365,  138,  140,  740,
 /*  3450 */   740,  166,  150,  740,  740,  740,  740,  322,  740,  740,
 /*  3460 */   740,  740,  740,  740,  740,  168,  740,  342,  165,  158,
 /*  3470 */   155,  169,  328,  184,  337,  154,  173,  161,  206,  212,
 /*  3480 */   209,  203,  144,  254,  246,  191,  365,  138,  140,  740,
 /*  3490 */   740,  166,  150,  740,  740,  740,  740,  322,  740,  740,
 /*  3500 */   740,  740,  740,  740,  740,  168,  740,  369,  165,  158,
 /*  3510 */   155,  169,  328,  184,  337,  154,  173,  161,  206,  212,
 /*  3520 */   209,  203,  144,  254,  246,  191,  365,  138,  140,  740,
 /*  3530 */   740,  740,  166,  150,  740,  740,  740,  740,  322,  740,
 /*  3540 */   740,  740,  740,  740,  740,  740,  168,  740,  265,  165,
 /*  3550 */   158,  155,  169,  328,  184,  337,  154,  173,  161,  206,
 /*  3560 */   212,  209,  203,  144,  254,  246,  191,  365,  138,  140,
 /*  3570 */   740,  740,  166,  150,  740,  740,  740,  740,  322,  740,
 /*  3580 */   740,  740,  740,  740,  740,  740,  168,  740,  295,  165,
 /*  3590 */   158,  155,  169,  328,  184,  337,  154,  173,  161,  206,
 /*  3600 */   212,  209,  203,  144,  254,  246,  191,  365,  138,  140,
 /*  3610 */   740,  740,  166,  150,  740,  740,  740,  740,  322,  740,
 /*  3620 */   740,  740,  740,  740,  740,  740,  168,  740,  291,  165,
 /*  3630 */   158,  155,  169,  328,  184,  337,  154,  173,  161,  206,
 /*  3640 */   212,  209,  203,  144,  254,  246,  191,  365,  138,  140,
 /*  3650 */   740,  740,  740,  166,  150,  740,  740,  740,  740,  322,
 /*  3660 */   740,  740,  740,  740,  740,  740,  740,  168,  740,  368,
 /*  3670 */   165,  158,  155,  169,  328,  184,  337,  154,  173,  161,
 /*  3680 */   206,  212,  209,  203,  144,  254,  246,  191,  365,  138,
 /*  3690 */   140,  740,  740,  166,  150,  740,  740,  740,  740,  322,
 /*  3700 */   740,  740,  740,  740,  740,  740,  740,  168,  740,  193,
 /*  3710 */   165,  158,  155,  169,  328,  184,  337,  154,  173,  161,
 /*  3720 */   206,  212,  209,  203,  144,  254,  246,  191,  365,  138,
 /*  3730 */   140,  740,  740,  166,  150,  740,  740,  740,  740,  322,
 /*  3740 */   740,  740,  740,  740,  740,  740,  740,  168,  740,  292,
 /*  3750 */   165,  158,  155,  169,  328,  184,  337,  154,  173,  161,
 /*  3760 */   206,  212,  209,  203,  144,  254,  246,  191,  365,  138,
 /*  3770 */   140,  740,  740,  740,  166,  150,  740,  740,  740,  740,
 /*  3780 */   322,  740,  740,  740,  740,  740,  740,  740,  168,  740,
 /*  3790 */   195,  165,  158,  155,  169,  328,  184,  337,  154,  173,
 /*  3800 */   161,  206,  212,  209,  203,  144,  254,  246,  191,  365,
 /*  3810 */   138,  140,  740,  740,  166,  150,  740,  740,  740,  740,
 /*  3820 */   322,  740,  740,  740,  740,  740,  740,  740,  168,  740,
 /*  3830 */   233,  165,  158,  155,  169,  328,  184,  337,  154,  173,
 /*  3840 */   161,  206,  212,  209,  203,  144,  254,  246,  191,  365,
 /*  3850 */   138,  140,  740,  740,  166,  150,  740,  740,  740,  740,
 /*  3860 */   322,  740,  740,  740,  740,  740,  740,  740,  168,  740,
 /*  3870 */   371,  165,  158,  155,  169,  328,  184,  337,  154,  173,
 /*  3880 */   161,  206,  212,  209,  203,  144,  254,  246,  191,  365,
 /*  3890 */   138,  140,  740,  740,  740,  166,  150,  740,  740,  740,
 /*  3900 */   740,  322,  740,  740,  740,  740,  740,  740,  740,  168,
 /*  3910 */   740,  275,  165,  158,  155,  169,  328,  184,  337,  154,
 /*  3920 */   173,  161,  206,  212,  209,  203,  144,  254,  246,  191,
 /*  3930 */   365,  138,  140,  740,  740,  166,  150,  740,  740,  740,
 /*  3940 */   740,  322,  740,  740,  740,  740,  740,  740,  740,  168,
 /*  3950 */   740,  220,  165,  158,  155,  169,  328,  184,  337,  154,
 /*  3960 */   173,  161,  206,  212,  209,  203,  144,  254,  246,  191,
 /*  3970 */   365,  138,  140,  740,  740,  166,  150,  740,  740,  740,
 /*  3980 */   740,  322,  740,  740,  740,  740,  740,  740,  740,  168,
 /*  3990 */   740,  273,  165,  158,  155,  169,  328,  184,  337,  154,
 /*  4000 */   173,  161,  206,  212,  209,  203,  144,  254,  246,  191,
 /*  4010 */   365,  138,  140,  305,   24,   26,  309,  281,  740,  740,
 /*  4020 */    48,  121,  740,  136,  740,  740,   32,  740,  126,  323,
 /*  4030 */   324,  325,  326,  327,  113,  118,  112,  111,  115,  116,
 /*  4040 */    95,   93,   94,   91,   90,   96,   92,   98,   97,   99,
 /*  4050 */   740,  740,  740,  740,  740,  740,  379,   49,  740,  740,
 /*  4060 */   740,  740,  740,  278,  372,  740,  740,  740,  740,  740,
 /*  4070 */   305,   24,   26,  309,  281,  740,  740,   48,  121,  740,
 /*  4080 */   133,  740,  740,   32,  740,  126,  323,  324,  325,  326,
 /*  4090 */   327,  113,  118,  112,  111,  115,  116,  380,  381,  382,
 /*  4100 */   383,  384,  385,  386,  387,  388,  389,  390,  391,  740,
 /*  4110 */   740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
 /*  4120 */   278,  372,  740,  740,  740,  740,  740,  305,  740,   26,
 /*  4130 */   309,  281,  740,  740,   48,  121,  740,  136,  740,  740,
 /*  4140 */    32,  740,  126,  323,  324,  325,  326,  327,  113,  118,
 /*  4150 */   112,  111,  115,  116,  157,  180,  740,  349,  141,  740,
 /*  4160 */   740,  348,  350,  244,  248,  251,  139,  740,  740,  740,
 /*  4170 */   740,  740,  740,  740,  740,  740,  740,  278,  372,  740,
 /*  4180 */   740,  740,  740,  740,  305,  740,   26,  309,  281,  740,
 /*  4190 */   740,   48,  121,  740,  740,  740,  740,   32,  343,  126,
 /*  4200 */   323,  324,  325,  326,  327,  113,  118,  112,  111,  115,
 /*  4210 */   116,  740,  740,  740,  740,  740,  740,  740,  740,  740,
 /*  4220 */   740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
 /*  4230 */   740,  740,  740,  740,  278,  372,  740,  740,  740,  740,
 /*  4240 */   740,  305,  740,   26,  309,  281,  740,  740,   48,  121,
 /*  4250 */   434,  740,  740,  740,   32,  740,  126,  323,  324,  325,
 /*  4260 */   326,  327,  113,  118,  112,  111,  115,  116,  740,  740,
 /*  4270 */   740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
 /*  4280 */   740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
 /*  4290 */   740,  278,  372,  740,  740,  740,  740,  740,  305,  740,
 /*  4300 */    26,  309,  281,  740,  740,   48,  121,  432,  740,  740,
 /*  4310 */   740,   32,  740,  126,  323,  324,  325,  326,  327,  113,
 /*  4320 */   118,  112,  111,  115,  116,  740,  740,  740,  740,  740,
 /*  4330 */   740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
 /*  4340 */   740,  740,  740,  740,  740,  740,  740,  740,  278,  372,
 /*  4350 */   740,  740,  740,  740,  740,  305,  740,   26,  309,  281,
 /*  4360 */   740,  740,   48,  121,  740,  740,  740,  740,   32,  740,
 /*  4370 */   126,  323,  324,  325,  326,  327,  113,  118,  112,  111,
 /*  4380 */   115,  116,  740,  740,  740,  740,  740,  740,  740,  740,
 /*  4390 */   740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
 /*  4400 */   740,  740,  740,  740,  740,  278,  372,  740,  740,  740,
 /*  4410 */   740,  740,  305,  740,   26,  309,  281,  740,  740,   48,
 /*  4420 */   121,  740,  740,  740,  740,   32,  236,  126,  323,  324,
 /*  4430 */   325,  326,  327,  113,  118,  112,  111,  115,  116,  740,
 /*  4440 */   740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
 /*  4450 */   740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
 /*  4460 */   740,  740,  278,  740,  740,  740,  740,  740,  740,  305,
 /*  4470 */   740,   26,  309,  281,  740,  740,   48,  121,  740,  740,
 /*  4480 */   740,  740,   32,  221,  126,  323,  324,  325,  326,  327,
 /*  4490 */   113,  118,  112,  111,  115,  116,  740,  740,  740,  740,
 /*  4500 */   740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
 /*  4510 */   740,  740,  740,  740,  740,  740,  740,  740,  740,  278,
 /*  4520 */   740,  740,  740,  740,  740,  740,  305,  740,   26,  309,
 /*  4530 */   281,  740,  740,   48,  121,  740,  740,  740,  740,   32,
 /*  4540 */   250,  126,  323,  324,  325,  326,  327,  113,  118,  112,
 /*  4550 */   111,  115,  116,  740,  740,  740,  740,  740,  740,  740,
 /*  4560 */   740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
 /*  4570 */   740,  740,  740,  740,  740,  740,  278,  740,  740,  740,
 /*  4580 */   740,  740,  740,  305,  740,   26,  309,  281,  740,  366,
 /*  4590 */    48,  121,  740,  740,  740,  740,   32,  740,  126,  323,
 /*  4600 */   324,  325,  326,  327,  113,  118,  112,  111,  115,  116,
 /*  4610 */   740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
 /*  4620 */   740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
 /*  4630 */   740,  740,  740,  278,  740,  740,  740,  740,  740,  740,
 /*  4640 */   305,  740,   26,  309,  281,  740,  740,   48,  121,  740,
 /*  4650 */   740,  740,  740,   32,  243,  126,  323,  324,  325,  326,
 /*  4660 */   327,  113,  118,  112,  111,  115,  116,  740,  740,  740,
 /*  4670 */   740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
 /*  4680 */   740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
 /*  4690 */   278,  740,  740,  740,  740,  740,  740,  305,  740,   26,
 /*  4700 */   309,  281,  740,  740,   48,  121,  740,  740,  740,  740,
 /*  4710 */    32,  268,  126,  323,  324,  325,  326,  327,  113,  118,
 /*  4720 */   112,  111,  115,  116,  740,  740,  740,  740,  740,  740,
 /*  4730 */   740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
 /*  4740 */   740,  740,  740,  740,  740,  740,  740,  278,  740,  740,
 /*  4750 */   740,  740,  740,  740,  305,  740,   26,  309,  281,  740,
 /*  4760 */   740,   48,  122,  740,  132,  740,  740,   32,  740,  126,
 /*  4770 */   323,  324,  325,  326,  327,  113,  118,  112,  111,  115,
 /*  4780 */   116,  740,  740,  740,  740,  740,  740,  740,  740,  740,
 /*  4790 */   740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
 /*  4800 */   740,  740,  740,  740,  278,  740,  166,  150,  740,  740,
 /*  4810 */   740,  740,  322,  740,  740,  740,  740,  740,  740,  740,
 /*  4820 */   168,  740,  740,  165,  158,  155,  169,  328,  184,  337,
 /*  4830 */   154,  173,  161,  206,  212,  209,  203,  144,  254,  282,
 /*  4840 */   305,  740,   26,  309,  281,  740,  740,   48,  121,  740,
 /*  4850 */   740,  740,  740,   32,  270,  126,  323,  324,  325,  326,
 /*  4860 */   327,  113,  118,  112,  111,  115,  116,  740,  740,  740,
 /*  4870 */   740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
 /*  4880 */   740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
 /*  4890 */   278,  740,  740,  740,  740,  740,  740,  305,  740,   26,
 /*  4900 */   309,  281,  740,  740,   48,  121,  740,  740,  740,  740,
 /*  4910 */    32,  229,  126,  323,  324,  325,  326,  327,  113,  118,
 /*  4920 */   112,  111,  115,  116,  740,  740,  740,  740,  740,  740,
 /*  4930 */   740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
 /*  4940 */   740,  740,  740,  740,  740,  740,  740,  278,  740,  740,
 /*  4950 */   740,  740,  740,  740,  305,  740,   26,  309,  281,  740,
 /*  4960 */   740,   48,  121,  740,  740,  740,  740,   32,  740,  126,
 /*  4970 */   323,  324,  325,  326,  327,  113,  118,  112,  111,  115,
 /*  4980 */   116,  740,  740,  740,  740,  740,  740,  740,  740,  740,
 /*  4990 */   740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
 /*  5000 */   740,  740,  740,  740,  278,  740,  166,  150,  740,  740,
 /*  5010 */   740,  740,  322,  740,  740,  740,  740,  740,  740,  740,
 /*  5020 */   168,  740,  740,  165,  158,  155,  169,  328,  184,  337,
 /*  5030 */   154,  173,  161,  206,  212,  209,  203,  144,  241,  740,
 /*  5040 */   740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
 /*  5050 */   740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
 /*  5060 */   740,  166,  150,  740,  740,  740,  740,  322,  740,  740,
 /*  5070 */   740,  740,  740,  740,  740,  168,  740,  740,  165,  158,
 /*  5080 */   155,  169,  328,  184,  337,  154,  173,  161,  206,  212,
 /*  5090 */   209,  203,  145,  740,  740,  740,  740,  740,  740,  740,
 /*  5100 */   740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
 /*  5110 */   740,  166,  150,  740,  740,  740,  740,  322,  740,  740,
 /*  5120 */   740,  740,  740,  740,  740,  168,  740,  740,  165,  158,
 /*  5130 */   155,  169,  328,  184,  337,  154,  173,  161,  206,  212,
 /*  5140 */   209,  303,  166,  150,  740,  740,  740,  740,  322,  740,
 /*  5150 */   740,  740,  740,  740,  740,  740,  168,  740,  740,  165,
 /*  5160 */   158,  155,  169,  328,  184,  337,  154,  173,  161,  206,
 /*  5170 */   212,  209,  299,  740,  166,  150,  740,  740,  740,  740,
 /*  5180 */   322,  740,  740,  740,  740,  740,  740,  740,  168,  740,
 /*  5190 */   740,  165,  158,  155,  169,  328,  184,  337,  154,  173,
 /*  5200 */   161,  206,  212,  209,  287,  740,  740,  740,  740,  740,
 /*  5210 */   740,  740,  740,  740,  740,  740,  740,  740,  166,  150,
 /*  5220 */   740,  740,  740,  740,  322,  740,  740,  740,  740,  740,
 /*  5230 */   740,  740,  168,  740,  740,  165,  158,  155,  169,  328,
 /*  5240 */   184,  337,  154,  173,  161,  206,  212,  209,  266,  166,
 /*  5250 */   150,  740,  740,  740,  740,  322,  740,  740,  740,  740,
 /*  5260 */   740,  740,  740,  168,  740,  740,  165,  158,  155,  169,
 /*  5270 */   328,  184,  337,  154,  173,  161,  206,  212,  209,  274,
 /*  5280 */   740,  166,  150,  740,  740,  740,  740,  322,  740,  740,
 /*  5290 */   740,  740,  740,  740,  740,  168,  740,  740,  165,  158,
 /*  5300 */   155,  169,  328,  184,  337,  154,  173,  161,  206,  212,
 /*  5310 */   209,  194,  740,  740,  740,  740,  740,  740,  740,  740,
 /*  5320 */   740,  740,  740,  740,  740,  166,  150,  740,  740,  740,
 /*  5330 */   740,  322,  740,  740,  740,  740,  740,  740,  740,  168,
 /*  5340 */   740,  740,  165,  158,  155,  169,  328,  184,  337,  154,
 /*  5350 */   173,  161,  206,  212,  209,  257,  166,  150,  740,  740,
 /*  5360 */   740,  740,  322,  740,  740,  740,  740,  740,  740,  740,
 /*  5370 */   168,  740,  740,  165,  158,  155,  169,  328,  184,  337,
 /*  5380 */   154,  173,  161,  206,  212,  209,  285,  740,  166,  150,
 /*  5390 */   740,  740,  740,  740,  322,  740,  740,  740,  740,  740,
 /*  5400 */   740,  740,  168,  740,  740,  165,  158,  155,  169,  328,
 /*  5410 */   184,  337,  154,  173,  161,  206,  212,  209,  289,  740,
 /*  5420 */   740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
 /*  5430 */   740,  740,  166,  150,  740,  740,  740,  740,  322,  740,
 /*  5440 */   740,  740,  740,  740,  740,  740,  168,  740,  740,  165,
 /*  5450 */   158,  155,  169,  328,  184,  337,  154,  173,  161,  206,
 /*  5460 */   212,  209,  296,  166,  150,  740,  740,  740,  740,  322,
 /*  5470 */   740,  740,  740,  740,  740,  740,  740,  168,  740,  740,
 /*  5480 */   165,  158,  155,  169,  328,  184,  337,  154,  173,  161,
 /*  5490 */   206,  212,  196,  305,  740,   26,  309,  740,  740,  740,
 /*  5500 */   740,  740,  740,  740,  740,  740,  740,  740,  126,  323,
 /*  5510 */   324,  325,  326,  327,  113,  118,  112,  111,  115,  116,
 /*  5520 */   166,  150,  740,  740,  740,  740,  322,  740,  740,  740,
 /*  5530 */   740,  740,  740,  740,  168,  740,  740,  165,  158,  155,
 /*  5540 */   169,  328,  184,  338,  740,  166,  150,  740,  740,  740,
 /*  5550 */   740,  322,  740,  740,  740,  740,  740,  740,  740,  168,
 /*  5560 */   740,  740,  165,  158,  155,  169,  328,  184,  340,  166,
 /*  5570 */   150,  740,  740,  740,  740,  322,  740,  740,  740,  740,
 /*  5580 */   740,  740,  740,  168,  740,  740,  165,  158,  155,  169,
 /*  5590 */   328,  184,  333,  740,  166,  150,  740,  740,  740,  740,
 /*  5600 */   322,  740,  740,  740,  740,  740,  740,  740,  168,  740,
 /*  5610 */   740,  165,  158,  155,  169,  328,  184,  334,  166,  150,
 /*  5620 */   740,  740,  740,  740,  322,  740,  740,  740,  166,  150,
 /*  5630 */   740,  740,  168,  740,  322,  165,  158,  155,  169,  328,
 /*  5640 */   184,  332,  168,  740,  740,  165,  158,  155,  169,  328,
 /*  5650 */   184,  336,  166,  150,  740,  740,  740,  740,  322,  740,
 /*  5660 */   740,  740,  740,  740,  740,  740,  168,  740,  740,  165,
 /*  5670 */   158,  155,  169,  328,  184,  335,  166,  150,  740,  740,
 /*  5680 */   740,  740,  322,  740,  740,  740,  740,  740,  740,  740,
 /*  5690 */   168,  740,  740,  165,  158,  155,  169,  328,  184,  339,
 /*  5700 */   740,  166,  150,  740,  740,  740,  740,  322,  740,  740,
 /*  5710 */   740,  740,  740,  740,  740,  168,  740,  740,  165,  158,
 /*  5720 */   155,  169,  328,  184,  331,  166,  150,  740,  740,  740,
 /*  5730 */   740,  322,  740,  740,  740,  740,  740,  740,  740,  168,
 /*  5740 */   740,  740,  165,  158,  155,  169,  328,  184,  341,
};
static const YYCODETYPE yy_lookahead[] = {
 /*     0 */    88,   11,   90,   91,   92,   93,   94,   95,   96,   97,
 /*    10 */    98,   99,   11,    9,  102,  103,   12,    9,  106,  107,
 /*    20 */    16,  109,  110,    8,  112,   10,  114,   19,  116,  117,
 /*    30 */   118,   11,  120,   13,   19,  123,  124,  125,  126,  127,
 /*    40 */   128,  129,  130,  131,  132,  133,  134,  135,  136,  137,
 /*    50 */   138,  139,  140,  141,  142,  143,   39,  145,  146,  147,
 /*    60 */   148,   17,   18,  151,  152,   88,  154,   90,   91,   92,
 /*    70 */    93,   94,   95,   96,   97,   98,   99,   20,    9,  102,
 /*    80 */   103,   12,    9,  106,  107,   16,  109,  110,    8,  112,
 /*    90 */    10,  114,   19,  116,  117,  118,   40,  120,    8,   19,
 /*   100 */   123,  124,  125,  126,  127,  128,  129,  130,  131,  132,
 /*   110 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*   120 */   143,   42,  145,  146,  147,  148,   41,   15,  151,  152,
 /*   130 */    18,  154,   89,   90,   91,   92,   93,   94,   95,   96,
 /*   140 */    97,   98,   99,   29,   30,  102,  103,   27,   28,  106,
 /*   150 */   107,    6,  109,  110,    8,  112,   10,  114,   13,  116,
 /*   160 */   117,  118,   11,  120,   83,   19,  123,  124,  125,  126,
 /*   170 */   127,  128,  129,  130,  131,  132,  133,  134,  135,  136,
 /*   180 */   137,  138,  139,  140,  141,  142,  143,    8,  145,  146,
 /*   190 */   147,  148,   36,   37,   38,  152,  153,  154,   89,   90,
 /*   200 */    91,   92,   93,   94,   95,   96,   97,   98,   99,   15,
 /*   210 */    14,  102,  103,   17,   18,  106,  107,    6,  109,  110,
 /*   220 */     8,  112,   10,  114,   13,  116,  117,  118,   15,  120,
 /*   230 */    15,   19,  123,  124,  125,  126,  127,  128,  129,  130,
 /*   240 */   131,  132,  133,  134,  135,  136,  137,  138,  139,  140,
 /*   250 */   141,  142,  143,    6,  145,  146,  147,  148,  104,  105,
 /*   260 */    13,  152,  153,  154,   88,    8,   90,   91,   92,   93,
 /*   270 */    94,   95,   96,   97,   98,   99,   15,   81,  102,  103,
 /*   280 */    10,    9,  106,  107,   14,  109,  110,    8,  112,   10,
 /*   290 */   114,   19,  116,  117,  118,   11,  120,   83,   19,  123,
 /*   300 */   124,  125,  126,  127,  128,  129,  130,  131,  132,  133,
 /*   310 */   134,  135,  136,  137,  138,  139,  140,  141,  142,  143,
 /*   320 */    11,  145,  146,  147,  148,  100,  101,  151,  152,   15,
 /*   330 */   154,   89,   90,   91,   92,   93,   94,   95,   96,   97,
 /*   340 */    98,   99,   55,   56,  102,  103,    9,    9,  106,  107,
 /*   350 */     8,  109,  110,    8,  112,   10,  114,   19,  116,  117,
 /*   360 */   118,   70,  120,    8,   19,  123,  124,  125,  126,  127,
 /*   370 */   128,  129,  130,  131,  132,  133,  134,  135,  136,  137,
 /*   380 */   138,  139,  140,  141,  142,  143,  106,  145,  146,  147,
 /*   390 */   148,   14,    4,    5,  152,  153,  154,   89,   90,   91,
 /*   400 */    92,   93,   94,   95,   96,   97,   98,   99,    8,    9,
 /*   410 */   102,  103,   14,    9,  106,  107,    9,  109,  110,    8,
 /*   420 */   112,   10,  114,   19,  116,  117,  118,   57,  120,   11,
 /*   430 */    19,  123,  124,  125,  126,  127,  128,  129,  130,  131,
 /*   440 */   132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
 /*   450 */   142,  143,  119,  145,  146,  147,  148,  100,  101,   57,
 /*   460 */   152,  153,  154,   88,   20,   90,   91,   92,   93,   94,
 /*   470 */    95,   96,   97,   98,   99,   20,   13,  102,  103,   18,
 /*   480 */     9,  106,  107,   14,  109,  110,    8,  112,   10,  114,
 /*   490 */    19,  116,  117,  118,   18,  120,   11,   19,  123,  124,
 /*   500 */   125,  126,  127,  128,  129,  130,  131,  132,  133,  134,
 /*   510 */   135,  136,  137,  138,  139,  140,  141,  142,  143,   89,
 /*   520 */   145,  146,  147,  148,   20,  119,  151,  152,  106,  154,
 /*   530 */    89,   90,   91,   92,   93,   94,   95,   96,   97,   98,
 /*   540 */    99,   57,  120,  102,  103,    9,    9,  106,  107,   11,
 /*   550 */   109,  110,    8,  112,   10,  114,   19,  116,  117,  118,
 /*   560 */    14,  120,  119,   19,  123,  124,  125,  126,  127,  128,
 /*   570 */   129,  130,  131,  132,  133,  134,  135,  136,  137,  138,
 /*   580 */   139,  140,  141,  142,  143,  105,  145,  146,  147,  148,
 /*   590 */   111,    4,    5,  152,  153,  154,   88,   20,   90,   91,
 /*   600 */    92,   93,   94,   95,   96,   97,   98,   99,  105,   20,
 /*   610 */   102,  103,  105,   13,  106,  107,   11,  109,  110,    8,
 /*   620 */   112,   10,  114,   57,  116,  117,  118,  111,  120,   57,
 /*   630 */    19,  123,  124,  125,  126,  127,  128,  129,  130,  131,
 /*   640 */   132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
 /*   650 */   142,  143,  105,  145,  146,  147,  148,   11,  105,  151,
 /*   660 */   152,   20,  154,   89,   90,   91,   92,   93,   94,   95,
 /*   670 */    96,   97,   98,   99,   11,    8,  102,  103,   53,   15,
 /*   680 */   106,  107,    8,  109,  110,    8,  112,   10,  114,   20,
 /*   690 */   116,  117,  118,   57,  120,   15,   19,  123,  124,  125,
 /*   700 */   126,  127,  128,  129,  130,  131,  132,  133,  134,  135,
 /*   710 */   136,  137,  138,  139,  140,  141,  142,  143,   20,  145,
 /*   720 */   146,  147,  148,   11,    9,   54,  152,  153,  154,   89,
 /*   730 */    90,   91,   92,   93,   94,   95,   96,   97,   98,   99,
 /*   740 */    15,   20,  102,  103,   15,   15,  106,  107,   20,  109,
 /*   750 */   110,   18,  112,   57,  114,   15,  116,  117,  118,   14,
 /*   760 */   120,   11,   15,  123,  124,  125,  126,  127,  128,  129,
 /*   770 */   130,  131,  132,  133,  134,  135,  136,  137,  138,  139,
 /*   780 */   140,  141,  142,  143,   20,  145,  146,  147,  148,   18,
 /*   790 */    20,   11,  152,  153,  154,   88,   15,   90,   91,   92,
 /*   800 */    93,   94,   95,   96,   97,   98,   99,    8,   12,  102,
 /*   810 */   103,   14,   11,  106,  107,   11,  109,  110,   15,  112,
 /*   820 */    13,  114,    8,  116,  117,  118,   15,  120,   11,   11,
 /*   830 */   123,  124,  125,  126,  127,  128,  129,  130,  131,  132,
 /*   840 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*   850 */   143,   11,  145,  146,  147,  148,   11,   20,  151,  152,
 /*   860 */     1,  154,    3,   13,   56,    6,    7,    8,    9,   10,
 /*   870 */    57,   12,   13,   14,   15,   16,   11,   11,   19,    8,
 /*   880 */    21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
 /*   890 */    31,   32,   20,  106,  107,   32,   33,   34,   35,  112,
 /*   900 */   106,  107,   11,    8,   15,   10,  112,  120,   13,   14,
 /*   910 */   123,  124,  125,  126,  120,   56,   57,  123,  124,  125,
 /*   920 */   126,  127,  128,  129,  130,  131,  132,  133,  134,   70,
 /*   930 */    71,   72,   73,   74,   75,   76,   77,   78,   79,   80,
 /*   940 */     0,    1,    6,    3,    8,    9,    6,    7,    8,    9,
 /*   950 */    10,   57,   13,   13,   14,   15,   16,   21,   11,   19,
 /*   960 */    11,   21,   22,   23,   24,   25,   26,   27,   28,   29,
 /*   970 */    30,   31,   32,  155,  106,  107,  155,  155,  155,  155,
 /*   980 */   112,  106,  107,  155,  155,  155,  155,  112,  120,  155,
 /*   990 */   155,  123,  124,  125,  126,  120,   56,   57,  123,  124,
 /*  1000 */   125,  126,  127,  128,  129,  130,  131,  132,  133,  155,
 /*  1010 */    70,   71,   72,   73,   74,   75,   76,   77,   78,   79,
 /*  1020 */    80,    1,  155,    3,  155,  155,    6,    7,    8,    9,
 /*  1030 */    10,  155,   12,   13,   14,   15,   16,  155,  155,   19,
 /*  1040 */   155,   21,   22,   23,   24,   25,   26,   27,   28,   29,
 /*  1050 */    30,   31,   32,  155,  106,  107,  155,  155,  155,  155,
 /*  1060 */   112,  106,  107,  155,  155,  155,  155,  112,  120,  155,
 /*  1070 */   155,  123,  124,  125,  126,  120,   56,   57,  123,  124,
 /*  1080 */   125,  126,  127,  128,  129,  130,  131,  132,  155,  155,
 /*  1090 */    70,   71,   72,   73,   74,   75,   76,   77,   78,   79,
 /*  1100 */    80,    1,  155,    3,  155,  155,    6,    7,    8,    9,
 /*  1110 */    10,   11,  155,   13,   14,   15,   16,  155,  155,   19,
 /*  1120 */   155,   21,   22,   23,   24,   25,   26,   27,   28,   29,
 /*  1130 */    30,   31,   32,  155,  106,  107,  155,  155,  155,  155,
 /*  1140 */   112,  106,  107,  155,  155,  155,  155,  112,  120,  155,
 /*  1150 */   155,  123,  124,  125,  126,  120,   56,   57,  123,  124,
 /*  1160 */   125,  126,  127,  128,  129,  130,  131,  155,  155,  155,
 /*  1170 */    70,   71,   72,   73,   74,   75,   76,   77,   78,   79,
 /*  1180 */    80,    1,  155,    3,  155,  155,    6,    7,    8,    9,
 /*  1190 */    10,  155,   12,   13,   14,   15,   16,  155,  155,   19,
 /*  1200 */   155,   21,   22,   23,   24,   25,   26,   27,   28,   29,
 /*  1210 */    30,   31,   32,  155,  106,  107,  155,  155,  155,  155,
 /*  1220 */   112,  106,  107,  155,  155,  155,  155,  112,  120,  155,
 /*  1230 */   155,  123,  124,  125,  126,  120,   56,   57,  123,  124,
 /*  1240 */   125,  126,  127,  128,  129,  130,  131,  155,  155,  155,
 /*  1250 */    70,   71,   72,   73,   74,   75,   76,   77,   78,   79,
 /*  1260 */    80,    1,  155,    3,  155,  155,    6,    7,    8,    9,
 /*  1270 */    10,  155,   12,   13,   14,   15,   16,  155,  155,   19,
 /*  1280 */   155,   21,   22,   23,   24,   25,   26,   27,   28,   29,
 /*  1290 */    30,   31,   32,    6,  155,    8,    6,   10,    8,    9,
 /*  1300 */    13,  106,  107,   13,  155,  155,   19,  112,  155,  155,
 /*  1310 */   155,   21,  155,  155,  155,  120,   56,   57,  123,  124,
 /*  1320 */   125,  126,  127,  128,  129,  130,  131,  155,  155,  155,
 /*  1330 */    70,   71,   72,   73,   74,   75,   76,   77,   78,   79,
 /*  1340 */    80,    1,  155,    3,   57,  155,    6,    7,    8,    9,
 /*  1350 */    10,  155,  155,   13,   14,   15,   16,  155,  155,   19,
 /*  1360 */   155,   21,   22,   23,   24,   25,   26,   27,   28,   29,
 /*  1370 */    30,   31,   32,    6,    8,    8,   10,   10,  155,   13,
 /*  1380 */    14,  106,  107,  155,  155,   19,   19,  112,  155,  155,
 /*  1390 */   155,  155,  155,  155,  155,  120,   56,   57,  123,  124,
 /*  1400 */   125,  126,  127,  128,  129,  130,  155,  155,  155,  155,
 /*  1410 */    70,   71,   72,   73,   74,   75,   76,   77,   78,   79,
 /*  1420 */    80,    1,  155,    3,   57,  155,    6,    7,    8,    9,
 /*  1430 */    10,  155,  155,   13,   14,   15,   16,  155,  155,   19,
 /*  1440 */   155,   21,   22,   23,   24,   25,   26,   27,   28,   29,
 /*  1450 */    30,   31,   32,  155,  155,    6,    6,    8,    8,   10,
 /*  1460 */    10,  106,  107,  155,  155,  155,  155,  112,   19,   19,
 /*  1470 */   155,  155,  155,  155,  155,  120,   56,   57,  123,  124,
 /*  1480 */   125,  126,  127,  128,  129,  130,  155,  155,  155,  155,
 /*  1490 */    70,   71,   72,   73,   74,   75,   76,   77,   78,   79,
 /*  1500 */    80,  155,  155,  106,  107,  108,   57,  155,  155,  112,
 /*  1510 */   155,  155,  155,  116,  155,  155,  155,  120,  121,  122,
 /*  1520 */   123,  124,  125,  126,  127,  128,  129,  130,  131,  132,
 /*  1530 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*  1540 */   143,  144,  145,  106,  107,  108,  149,  150,  155,  112,
 /*  1550 */   155,  155,  155,  116,  155,  155,  155,  120,  121,  122,
 /*  1560 */   123,  124,  125,  126,  127,  128,  129,  130,  131,  132,
 /*  1570 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*  1580 */   143,  144,  145,  106,  107,  108,  149,  150,  155,  112,
 /*  1590 */   155,  155,  155,  116,  155,  155,  155,  120,  121,  122,
 /*  1600 */   123,  124,  125,  126,  127,  128,  129,  130,  131,  132,
 /*  1610 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*  1620 */   143,  144,  145,  155,  155,  155,  149,  150,  106,  107,
 /*  1630 */   108,  155,  155,  155,  112,  155,  155,  155,  116,  155,
 /*  1640 */   155,  155,  120,  121,  122,  123,  124,  125,  126,  127,
 /*  1650 */   128,  129,  130,  131,  132,  133,  134,  135,  136,  137,
 /*  1660 */   138,  139,  140,  141,  142,  143,  144,  145,  106,  107,
 /*  1670 */   108,  149,  150,  155,  112,  155,  155,  155,  116,  155,
 /*  1680 */   155,  155,  120,  121,  122,  123,  124,  125,  126,  127,
 /*  1690 */   128,  129,  130,  131,  132,  133,  134,  135,  136,  137,
 /*  1700 */   138,  139,  140,  141,  142,  143,  144,  145,  106,  107,
 /*  1710 */   108,  149,  155,  155,  112,  155,  155,  155,  116,  155,
 /*  1720 */   155,  155,  120,  121,  122,  123,  124,  125,  126,  127,
 /*  1730 */   128,  129,  130,  131,  132,  133,  134,  135,  136,  137,
 /*  1740 */   138,  139,  140,  141,  142,  143,  144,  145,  155,  106,
 /*  1750 */   107,  108,  155,  155,  155,  112,  155,  155,  155,  116,
 /*  1760 */   155,  155,  155,  120,  121,  122,  123,  124,  125,  126,
 /*  1770 */   127,  128,  129,  130,  131,  132,  133,  134,  135,  136,
 /*  1780 */   137,  138,  139,  140,  141,  142,  143,  144,  145,  106,
 /*  1790 */   107,  108,  155,  155,  155,  112,  155,  155,  155,  155,
 /*  1800 */   155,  155,  155,  120,  121,  122,  123,  124,  125,  126,
 /*  1810 */   127,  128,  129,  130,  131,  132,  133,  134,  135,  136,
 /*  1820 */   137,  138,  139,  140,  141,  142,  143,  144,  145,  106,
 /*  1830 */   107,  108,  155,  155,  155,  112,  155,  155,  155,  155,
 /*  1840 */   155,  155,  155,  120,  121,  122,  123,  124,  125,  126,
 /*  1850 */   127,  128,  129,  130,  131,  132,  133,  134,  135,  136,
 /*  1860 */   137,  138,  139,  140,  141,  142,  143,  144,  145,  155,
 /*  1870 */   106,  107,  108,  155,  155,  155,  112,  155,  155,  155,
 /*  1880 */   155,  155,  155,  155,  120,  121,  122,  123,  124,  125,
 /*  1890 */   126,  127,  128,  129,  130,  131,  132,  133,  134,  135,
 /*  1900 */   136,  137,  138,  139,  140,  141,  142,  143,  144,  145,
 /*  1910 */   106,  107,  108,  155,  155,  155,  112,  155,  155,  155,
 /*  1920 */   155,  155,  155,  155,  120,  121,  122,  123,  124,  125,
 /*  1930 */   126,  127,  128,  129,  130,  131,  132,  133,  134,  135,
 /*  1940 */   136,  137,  138,  139,  140,  141,  142,  143,  144,  145,
 /*  1950 */   106,  107,  108,  155,  155,  155,  112,  155,  155,  155,
 /*  1960 */   155,  155,  155,  155,  120,  121,  122,  123,  124,  125,
 /*  1970 */   126,  127,  128,  129,  130,  131,  132,  133,  134,  135,
 /*  1980 */   136,  137,  138,  139,  140,  141,  142,  143,  144,  145,
 /*  1990 */   155,  106,  107,  108,  155,  155,  155,  112,  155,  155,
 /*  2000 */   155,  155,  155,  155,  155,  120,  121,  122,  123,  124,
 /*  2010 */   125,  126,  127,  128,  129,  130,  131,  132,  133,  134,
 /*  2020 */   135,  136,  137,  138,  139,  140,  141,  142,  143,  144,
 /*  2030 */   145,  106,  107,  108,  155,  155,  155,  112,  155,  155,
 /*  2040 */   155,  155,  155,  155,  155,  120,  155,  122,  123,  124,
 /*  2050 */   125,  126,  127,  128,  129,  130,  131,  132,  133,  134,
 /*  2060 */   135,  136,  137,  138,  139,  140,  141,  142,  143,  144,
 /*  2070 */   145,  106,  107,  108,  155,  155,  155,  112,  155,  155,
 /*  2080 */   155,  155,  155,  155,  155,  120,  155,  122,  123,  124,
 /*  2090 */   125,  126,  127,  128,  129,  130,  131,  132,  133,  134,
 /*  2100 */   135,  136,  137,  138,  139,  140,  141,  142,  143,  144,
 /*  2110 */   145,  155,  106,  107,  108,  155,  155,  155,  112,  155,
 /*  2120 */   155,  155,  155,  155,  155,  155,  120,  155,  122,  123,
 /*  2130 */   124,  125,  126,  127,  128,  129,  130,  131,  132,  133,
 /*  2140 */   134,  135,  136,  137,  138,  139,  140,  141,  142,  143,
 /*  2150 */   144,  145,  106,  107,  108,  155,  155,  155,  112,  155,
 /*  2160 */   155,  155,  155,  155,  155,  155,  120,  155,  122,  123,
 /*  2170 */   124,  125,  126,  127,  128,  129,  130,  131,  132,  133,
 /*  2180 */   134,  135,  136,  137,  138,  139,  140,  141,  142,  143,
 /*  2190 */   144,  145,  106,  107,  108,  155,  155,  155,  112,  155,
 /*  2200 */   155,  155,  155,  155,  155,  155,  120,  155,  122,  123,
 /*  2210 */   124,  125,  126,  127,  128,  129,  130,  131,  132,  133,
 /*  2220 */   134,  135,  136,  137,  138,  139,  140,  141,  142,  143,
 /*  2230 */   144,  145,  155,  106,  107,  108,  155,  155,  155,  112,
 /*  2240 */   155,  155,  155,  155,  155,  155,  155,  120,  155,  122,
 /*  2250 */   123,  124,  125,  126,  127,  128,  129,  130,  131,  132,
 /*  2260 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*  2270 */   143,  144,  145,  106,  107,  108,  155,  155,  155,  112,
 /*  2280 */   155,  155,  155,  155,  155,  155,  155,  120,  155,  122,
 /*  2290 */   123,  124,  125,  126,  127,  128,  129,  130,  131,  132,
 /*  2300 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*  2310 */   143,  144,  145,  106,  107,  108,  155,  155,  155,  112,
 /*  2320 */   155,  155,  155,  155,  155,  155,  155,  120,  155,  122,
 /*  2330 */   123,  124,  125,  126,  127,  128,  129,  130,  131,  132,
 /*  2340 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*  2350 */   143,  144,  145,  155,  106,  107,  108,  155,  155,  155,
 /*  2360 */   112,  155,  155,  155,  155,  155,  155,  155,  120,  155,
 /*  2370 */   122,  123,  124,  125,  126,  127,  128,  129,  130,  131,
 /*  2380 */   132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
 /*  2390 */   142,  143,  144,  145,  106,  107,  108,  155,  155,  155,
 /*  2400 */   112,  155,  155,  155,  155,  155,  155,  155,  120,  155,
 /*  2410 */   122,  123,  124,  125,  126,  127,  128,  129,  130,  131,
 /*  2420 */   132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
 /*  2430 */   142,  143,  144,  145,  106,  107,  108,  155,  155,  155,
 /*  2440 */   112,  155,  155,  155,  155,  155,  155,  155,  120,  155,
 /*  2450 */   122,  123,  124,  125,  126,  127,  128,  129,  130,  131,
 /*  2460 */   132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
 /*  2470 */   142,  143,  144,  145,  155,  106,  107,  108,  155,  155,
 /*  2480 */   155,  112,  155,  155,  155,  155,  155,  155,  155,  120,
 /*  2490 */   155,  122,  123,  124,  125,  126,  127,  128,  129,  130,
 /*  2500 */   131,  132,  133,  134,  135,  136,  137,  138,  139,  140,
 /*  2510 */   141,  142,  143,  144,  145,  106,  107,  108,  155,  155,
 /*  2520 */   155,  112,  155,  155,  155,  155,  155,  155,  155,  120,
 /*  2530 */   155,  122,  123,  124,  125,  126,  127,  128,  129,  130,
 /*  2540 */   131,  132,  133,  134,  135,  136,  137,  138,  139,  140,
 /*  2550 */   141,  142,  143,  144,  145,  106,  107,  108,  155,  155,
 /*  2560 */   155,  112,  155,  155,  155,  155,  155,  155,  155,  120,
 /*  2570 */   155,  122,  123,  124,  125,  126,  127,  128,  129,  130,
 /*  2580 */   131,  132,  133,  134,  135,  136,  137,  138,  139,  140,
 /*  2590 */   141,  142,  143,  144,  145,  155,  106,  107,  108,  155,
 /*  2600 */    14,  155,  112,   17,   18,  155,  155,  155,  155,  155,
 /*  2610 */   120,  155,  122,  123,  124,  125,  126,  127,  128,  129,
 /*  2620 */   130,  131,  132,  133,  134,  135,  136,  137,  138,  139,
 /*  2630 */   140,  141,  142,  143,  144,  145,   84,   85,  155,  155,
 /*  2640 */   155,  155,  155,  155,   58,   59,   60,   61,   62,   63,
 /*  2650 */    64,   65,   66,   67,   68,   69,  155,  155,  106,  107,
 /*  2660 */   155,  155,   17,   18,  112,  155,  155,   81,  155,  155,
 /*  2670 */   155,  155,  120,  155,  122,  123,  124,  125,  126,  127,
 /*  2680 */   128,  129,  130,  131,  132,  133,  134,  135,  136,  137,
 /*  2690 */   138,  139,  140,  141,  142,  143,  155,  145,  155,   86,
 /*  2700 */    87,  155,  155,   58,   59,   60,   61,   62,   63,   64,
 /*  2710 */    65,   66,   67,   68,   69,    8,  155,   10,  155,  106,
 /*  2720 */   107,  155,  155,  155,  155,  112,   19,  155,  155,  155,
 /*  2730 */   155,  155,  155,  120,  155,  122,  123,  124,  125,  126,
 /*  2740 */   127,  128,  129,  130,  131,  132,  133,  134,  135,  136,
 /*  2750 */   137,  138,  139,  140,  141,  142,  143,    6,  155,    8,
 /*  2760 */   155,   10,  155,  155,   57,  106,  107,  155,  155,  155,
 /*  2770 */    19,  112,  155,  155,  155,  155,  155,  155,  155,  120,
 /*  2780 */   155,  122,  123,  124,  125,  126,  127,  128,  129,  130,
 /*  2790 */   131,  132,  133,  134,  135,  136,  137,  138,  139,  140,
 /*  2800 */   141,  142,  143,  155,  145,  155,  106,  107,  155,  155,
 /*  2810 */   155,  155,  112,  155,  155,  155,  155,  155,  155,  155,
 /*  2820 */   120,  155,  122,  123,  124,  125,  126,  127,  128,  129,
 /*  2830 */   130,  131,  132,  133,  134,  135,  136,  137,  138,  139,
 /*  2840 */   140,  141,  142,  143,  155,  145,  106,  107,  155,  155,
 /*  2850 */   155,  155,  112,  155,  155,  155,  155,  155,  155,  155,
 /*  2860 */   120,  155,  122,  123,  124,  125,  126,  127,  128,  129,
 /*  2870 */   130,  131,  132,  133,  134,  135,  136,  137,  138,  139,
 /*  2880 */   140,  141,  142,  143,  144,  155,  106,  107,  155,  155,
 /*  2890 */   155,  155,  112,  155,  155,  155,  155,  155,  155,  155,
 /*  2900 */   120,  155,  122,  123,  124,  125,  126,  127,  128,  129,
 /*  2910 */   130,  131,  132,  133,  134,  135,  136,  137,  138,  139,
 /*  2920 */   140,  141,  142,  143,  155,  145,  155,  106,  107,  155,
 /*  2930 */   155,  155,  155,  112,  155,  155,  155,  155,  155,  155,
 /*  2940 */   155,  120,  155,  122,  123,  124,  125,  126,  127,  128,
 /*  2950 */   129,  130,  131,  132,  133,  134,  135,  136,  137,  138,
 /*  2960 */   139,  140,  141,  142,  143,  155,  155,  106,  107,  155,
 /*  2970 */   155,  155,  155,  112,  155,  155,  155,  155,  155,  155,
 /*  2980 */   155,  120,  155,  122,  123,  124,  125,  126,  127,  128,
 /*  2990 */   129,  130,  131,  132,  133,  134,  135,  136,  137,  138,
 /*  3000 */   139,  140,  141,  142,  143,  155,  155,  106,  107,  155,
 /*  3010 */   155,  155,  155,  112,  155,  155,  155,  155,  155,  155,
 /*  3020 */   155,  120,  155,  122,  123,  124,  125,  126,  127,  128,
 /*  3030 */   129,  130,  131,  132,  133,  134,  135,  136,  137,  138,
 /*  3040 */   139,  140,  141,  142,  143,  155,  155,  155,  106,  107,
 /*  3050 */   155,  155,  155,  155,  112,  155,  155,  155,  155,  155,
 /*  3060 */   155,  155,  120,  155,  122,  123,  124,  125,  126,  127,
 /*  3070 */   128,  129,  130,  131,  132,  133,  134,  135,  136,  137,
 /*  3080 */   138,  139,  140,  141,  142,  143,  155,  155,  106,  107,
 /*  3090 */   155,  155,  155,  155,  112,  155,  155,  155,  155,  155,
 /*  3100 */   155,  155,  120,  155,  122,  123,  124,  125,  126,  127,
 /*  3110 */   128,  129,  130,  131,  132,  133,  134,  135,  136,  137,
 /*  3120 */   138,  139,  140,  141,  142,  143,  155,  155,  106,  107,
 /*  3130 */   155,  155,  155,  155,  112,  155,  155,  155,  155,  155,
 /*  3140 */   155,  155,  120,  155,  122,  123,  124,  125,  126,  127,
 /*  3150 */   128,  129,  130,  131,  132,  133,  134,  135,  136,  137,
 /*  3160 */   138,  139,  140,  141,  142,  143,  155,  155,  155,  106,
 /*  3170 */   107,  155,  155,  155,  155,  112,  155,  155,  155,  155,
 /*  3180 */   155,  155,  155,  120,  155,  122,  123,  124,  125,  126,
 /*  3190 */   127,  128,  129,  130,  131,  132,  133,  134,  135,  136,
 /*  3200 */   137,  138,  139,  140,  141,  142,  143,  155,  155,  106,
 /*  3210 */   107,  155,  155,  155,  155,  112,  155,  155,  155,  155,
 /*  3220 */   155,  155,  155,  120,  155,  122,  123,  124,  125,  126,
 /*  3230 */   127,  128,  129,  130,  131,  132,  133,  134,  135,  136,
 /*  3240 */   137,  138,  139,  140,  141,  142,  143,  155,  155,  106,
 /*  3250 */   107,  155,  155,  155,  155,  112,  155,  155,  155,  155,
 /*  3260 */   155,  155,  155,  120,  155,  122,  123,  124,  125,  126,
 /*  3270 */   127,  128,  129,  130,  131,  132,  133,  134,  135,  136,
 /*  3280 */   137,  138,  139,  140,  141,  142,  143,  155,  155,  155,
 /*  3290 */   106,  107,  155,  155,  155,  155,  112,  155,  155,  155,
 /*  3300 */   155,  155,  155,  155,  120,  155,  122,  123,  124,  125,
 /*  3310 */   126,  127,  128,  129,  130,  131,  132,  133,  134,  135,
 /*  3320 */   136,  137,  138,  139,  140,  141,  142,  143,  155,  155,
 /*  3330 */   106,  107,  155,  155,  155,  155,  112,  155,  155,  155,
 /*  3340 */   155,  155,  155,  155,  120,  155,  122,  123,  124,  125,
 /*  3350 */   126,  127,  128,  129,  130,  131,  132,  133,  134,  135,
 /*  3360 */   136,  137,  138,  139,  140,  141,  142,  143,  155,  155,
 /*  3370 */   106,  107,  155,  155,  155,  155,  112,  155,  155,  155,
 /*  3380 */   155,  155,  155,  155,  120,  155,  122,  123,  124,  125,
 /*  3390 */   126,  127,  128,  129,  130,  131,  132,  133,  134,  135,
 /*  3400 */   136,  137,  138,  139,  140,  141,  142,  143,  155,  155,
 /*  3410 */   155,  106,  107,  155,  155,  155,  155,  112,  155,  155,
 /*  3420 */   155,  155,  155,  155,  155,  120,  155,  122,  123,  124,
 /*  3430 */   125,  126,  127,  128,  129,  130,  131,  132,  133,  134,
 /*  3440 */   135,  136,  137,  138,  139,  140,  141,  142,  143,  155,
 /*  3450 */   155,  106,  107,  155,  155,  155,  155,  112,  155,  155,
 /*  3460 */   155,  155,  155,  155,  155,  120,  155,  122,  123,  124,
 /*  3470 */   125,  126,  127,  128,  129,  130,  131,  132,  133,  134,
 /*  3480 */   135,  136,  137,  138,  139,  140,  141,  142,  143,  155,
 /*  3490 */   155,  106,  107,  155,  155,  155,  155,  112,  155,  155,
 /*  3500 */   155,  155,  155,  155,  155,  120,  155,  122,  123,  124,
 /*  3510 */   125,  126,  127,  128,  129,  130,  131,  132,  133,  134,
 /*  3520 */   135,  136,  137,  138,  139,  140,  141,  142,  143,  155,
 /*  3530 */   155,  155,  106,  107,  155,  155,  155,  155,  112,  155,
 /*  3540 */   155,  155,  155,  155,  155,  155,  120,  155,  122,  123,
 /*  3550 */   124,  125,  126,  127,  128,  129,  130,  131,  132,  133,
 /*  3560 */   134,  135,  136,  137,  138,  139,  140,  141,  142,  143,
 /*  3570 */   155,  155,  106,  107,  155,  155,  155,  155,  112,  155,
 /*  3580 */   155,  155,  155,  155,  155,  155,  120,  155,  122,  123,
 /*  3590 */   124,  125,  126,  127,  128,  129,  130,  131,  132,  133,
 /*  3600 */   134,  135,  136,  137,  138,  139,  140,  141,  142,  143,
 /*  3610 */   155,  155,  106,  107,  155,  155,  155,  155,  112,  155,
 /*  3620 */   155,  155,  155,  155,  155,  155,  120,  155,  122,  123,
 /*  3630 */   124,  125,  126,  127,  128,  129,  130,  131,  132,  133,
 /*  3640 */   134,  135,  136,  137,  138,  139,  140,  141,  142,  143,
 /*  3650 */   155,  155,  155,  106,  107,  155,  155,  155,  155,  112,
 /*  3660 */   155,  155,  155,  155,  155,  155,  155,  120,  155,  122,
 /*  3670 */   123,  124,  125,  126,  127,  128,  129,  130,  131,  132,
 /*  3680 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*  3690 */   143,  155,  155,  106,  107,  155,  155,  155,  155,  112,
 /*  3700 */   155,  155,  155,  155,  155,  155,  155,  120,  155,  122,
 /*  3710 */   123,  124,  125,  126,  127,  128,  129,  130,  131,  132,
 /*  3720 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*  3730 */   143,  155,  155,  106,  107,  155,  155,  155,  155,  112,
 /*  3740 */   155,  155,  155,  155,  155,  155,  155,  120,  155,  122,
 /*  3750 */   123,  124,  125,  126,  127,  128,  129,  130,  131,  132,
 /*  3760 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*  3770 */   143,  155,  155,  155,  106,  107,  155,  155,  155,  155,
 /*  3780 */   112,  155,  155,  155,  155,  155,  155,  155,  120,  155,
 /*  3790 */   122,  123,  124,  125,  126,  127,  128,  129,  130,  131,
 /*  3800 */   132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
 /*  3810 */   142,  143,  155,  155,  106,  107,  155,  155,  155,  155,
 /*  3820 */   112,  155,  155,  155,  155,  155,  155,  155,  120,  155,
 /*  3830 */   122,  123,  124,  125,  126,  127,  128,  129,  130,  131,
 /*  3840 */   132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
 /*  3850 */   142,  143,  155,  155,  106,  107,  155,  155,  155,  155,
 /*  3860 */   112,  155,  155,  155,  155,  155,  155,  155,  120,  155,
 /*  3870 */   122,  123,  124,  125,  126,  127,  128,  129,  130,  131,
 /*  3880 */   132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
 /*  3890 */   142,  143,  155,  155,  155,  106,  107,  155,  155,  155,
 /*  3900 */   155,  112,  155,  155,  155,  155,  155,  155,  155,  120,
 /*  3910 */   155,  122,  123,  124,  125,  126,  127,  128,  129,  130,
 /*  3920 */   131,  132,  133,  134,  135,  136,  137,  138,  139,  140,
 /*  3930 */   141,  142,  143,  155,  155,  106,  107,  155,  155,  155,
 /*  3940 */   155,  112,  155,  155,  155,  155,  155,  155,  155,  120,
 /*  3950 */   155,  122,  123,  124,  125,  126,  127,  128,  129,  130,
 /*  3960 */   131,  132,  133,  134,  135,  136,  137,  138,  139,  140,
 /*  3970 */   141,  142,  143,  155,  155,  106,  107,  155,  155,  155,
 /*  3980 */   155,  112,  155,  155,  155,  155,  155,  155,  155,  120,
 /*  3990 */   155,  122,  123,  124,  125,  126,  127,  128,  129,  130,
 /*  4000 */   131,  132,  133,  134,  135,  136,  137,  138,  139,  140,
 /*  4010 */   141,  142,  143,    6,    7,    8,    9,   10,  155,  155,
 /*  4020 */    13,   14,  155,   16,  155,  155,   19,  155,   21,   22,
 /*  4030 */    23,   24,   25,   26,   27,   28,   29,   30,   31,   32,
 /*  4040 */    43,   44,   45,   46,   47,   48,   49,   50,   51,   52,
 /*  4050 */   155,  155,  155,  155,  155,  155,   17,   18,  155,  155,
 /*  4060 */   155,  155,  155,   56,   57,  155,  155,  155,  155,  155,
 /*  4070 */     6,    7,    8,    9,   10,  155,  155,   13,   14,  155,
 /*  4080 */    16,  155,  155,   19,  155,   21,   22,   23,   24,   25,
 /*  4090 */    26,   27,   28,   29,   30,   31,   32,   58,   59,   60,
 /*  4100 */    61,   62,   63,   64,   65,   66,   67,   68,   69,  155,
 /*  4110 */   155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
 /*  4120 */    56,   57,  155,  155,  155,  155,  155,    6,  155,    8,
 /*  4130 */     9,   10,  155,  155,   13,   14,  155,   16,  155,  155,
 /*  4140 */    19,  155,   21,   22,   23,   24,   25,   26,   27,   28,
 /*  4150 */    29,   30,   31,   32,  106,  107,  155,  109,  110,  155,
 /*  4160 */   155,  113,  114,  115,  116,  117,  118,  155,  155,  155,
 /*  4170 */   155,  155,  155,  155,  155,  155,  155,   56,   57,  155,
 /*  4180 */   155,  155,  155,  155,    6,  155,    8,    9,   10,  155,
 /*  4190 */   155,   13,   14,  155,  155,  155,  155,   19,   20,   21,
 /*  4200 */    22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
 /*  4210 */    32,  155,  155,  155,  155,  155,  155,  155,  155,  155,
 /*  4220 */   155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
 /*  4230 */   155,  155,  155,  155,   56,   57,  155,  155,  155,  155,
 /*  4240 */   155,    6,  155,    8,    9,   10,  155,  155,   13,   14,
 /*  4250 */    15,  155,  155,  155,   19,  155,   21,   22,   23,   24,
 /*  4260 */    25,   26,   27,   28,   29,   30,   31,   32,  155,  155,
 /*  4270 */   155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
 /*  4280 */   155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
 /*  4290 */   155,   56,   57,  155,  155,  155,  155,  155,    6,  155,
 /*  4300 */     8,    9,   10,  155,  155,   13,   14,   15,  155,  155,
 /*  4310 */   155,   19,  155,   21,   22,   23,   24,   25,   26,   27,
 /*  4320 */    28,   29,   30,   31,   32,  155,  155,  155,  155,  155,
 /*  4330 */   155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
 /*  4340 */   155,  155,  155,  155,  155,  155,  155,  155,   56,   57,
 /*  4350 */   155,  155,  155,  155,  155,    6,  155,    8,    9,   10,
 /*  4360 */   155,  155,   13,   14,  155,  155,  155,  155,   19,  155,
 /*  4370 */    21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
 /*  4380 */    31,   32,  155,  155,  155,  155,  155,  155,  155,  155,
 /*  4390 */   155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
 /*  4400 */   155,  155,  155,  155,  155,   56,   57,  155,  155,  155,
 /*  4410 */   155,  155,    6,  155,    8,    9,   10,  155,  155,   13,
 /*  4420 */    14,  155,  155,  155,  155,   19,   20,   21,   22,   23,
 /*  4430 */    24,   25,   26,   27,   28,   29,   30,   31,   32,  155,
 /*  4440 */   155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
 /*  4450 */   155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
 /*  4460 */   155,  155,   56,  155,  155,  155,  155,  155,  155,    6,
 /*  4470 */   155,    8,    9,   10,  155,  155,   13,   14,  155,  155,
 /*  4480 */   155,  155,   19,   20,   21,   22,   23,   24,   25,   26,
 /*  4490 */    27,   28,   29,   30,   31,   32,  155,  155,  155,  155,
 /*  4500 */   155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
 /*  4510 */   155,  155,  155,  155,  155,  155,  155,  155,  155,   56,
 /*  4520 */   155,  155,  155,  155,  155,  155,    6,  155,    8,    9,
 /*  4530 */    10,  155,  155,   13,   14,  155,  155,  155,  155,   19,
 /*  4540 */    20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
 /*  4550 */    30,   31,   32,  155,  155,  155,  155,  155,  155,  155,
 /*  4560 */   155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
 /*  4570 */   155,  155,  155,  155,  155,  155,   56,  155,  155,  155,
 /*  4580 */   155,  155,  155,    6,  155,    8,    9,   10,  155,   12,
 /*  4590 */    13,   14,  155,  155,  155,  155,   19,  155,   21,   22,
 /*  4600 */    23,   24,   25,   26,   27,   28,   29,   30,   31,   32,
 /*  4610 */   155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
 /*  4620 */   155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
 /*  4630 */   155,  155,  155,   56,  155,  155,  155,  155,  155,  155,
 /*  4640 */     6,  155,    8,    9,   10,  155,  155,   13,   14,  155,
 /*  4650 */   155,  155,  155,   19,   20,   21,   22,   23,   24,   25,
 /*  4660 */    26,   27,   28,   29,   30,   31,   32,  155,  155,  155,
 /*  4670 */   155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
 /*  4680 */   155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
 /*  4690 */    56,  155,  155,  155,  155,  155,  155,    6,  155,    8,
 /*  4700 */     9,   10,  155,  155,   13,   14,  155,  155,  155,  155,
 /*  4710 */    19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
 /*  4720 */    29,   30,   31,   32,  155,  155,  155,  155,  155,  155,
 /*  4730 */   155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
 /*  4740 */   155,  155,  155,  155,  155,  155,  155,   56,  155,  155,
 /*  4750 */   155,  155,  155,  155,    6,  155,    8,    9,   10,  155,
 /*  4760 */   155,   13,   14,  155,   16,  155,  155,   19,  155,   21,
 /*  4770 */    22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
 /*  4780 */    32,  155,  155,  155,  155,  155,  155,  155,  155,  155,
 /*  4790 */   155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
 /*  4800 */   155,  155,  155,  155,   56,  155,  106,  107,  155,  155,
 /*  4810 */   155,  155,  112,  155,  155,  155,  155,  155,  155,  155,
 /*  4820 */   120,  155,  155,  123,  124,  125,  126,  127,  128,  129,
 /*  4830 */   130,  131,  132,  133,  134,  135,  136,  137,  138,  139,
 /*  4840 */     6,  155,    8,    9,   10,  155,  155,   13,   14,  155,
 /*  4850 */   155,  155,  155,   19,   20,   21,   22,   23,   24,   25,
 /*  4860 */    26,   27,   28,   29,   30,   31,   32,  155,  155,  155,
 /*  4870 */   155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
 /*  4880 */   155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
 /*  4890 */    56,  155,  155,  155,  155,  155,  155,    6,  155,    8,
 /*  4900 */     9,   10,  155,  155,   13,   14,  155,  155,  155,  155,
 /*  4910 */    19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
 /*  4920 */    29,   30,   31,   32,  155,  155,  155,  155,  155,  155,
 /*  4930 */   155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
 /*  4940 */   155,  155,  155,  155,  155,  155,  155,   56,  155,  155,
 /*  4950 */   155,  155,  155,  155,    6,  155,    8,    9,   10,  155,
 /*  4960 */   155,   13,   14,  155,  155,  155,  155,   19,  155,   21,
 /*  4970 */    22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
 /*  4980 */    32,  155,  155,  155,  155,  155,  155,  155,  155,  155,
 /*  4990 */   155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
 /*  5000 */   155,  155,  155,  155,   56,  155,  106,  107,  155,  155,
 /*  5010 */   155,  155,  112,  155,  155,  155,  155,  155,  155,  155,
 /*  5020 */   120,  155,  155,  123,  124,  125,  126,  127,  128,  129,
 /*  5030 */   130,  131,  132,  133,  134,  135,  136,  137,  138,  155,
 /*  5040 */   155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
 /*  5050 */   155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
 /*  5060 */   155,  106,  107,  155,  155,  155,  155,  112,  155,  155,
 /*  5070 */   155,  155,  155,  155,  155,  120,  155,  155,  123,  124,
 /*  5080 */   125,  126,  127,  128,  129,  130,  131,  132,  133,  134,
 /*  5090 */   135,  136,  137,  155,  155,  155,  155,  155,  155,  155,
 /*  5100 */   155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
 /*  5110 */   155,  106,  107,  155,  155,  155,  155,  112,  155,  155,
 /*  5120 */   155,  155,  155,  155,  155,  120,  155,  155,  123,  124,
 /*  5130 */   125,  126,  127,  128,  129,  130,  131,  132,  133,  134,
 /*  5140 */   135,  136,  106,  107,  155,  155,  155,  155,  112,  155,
 /*  5150 */   155,  155,  155,  155,  155,  155,  120,  155,  155,  123,
 /*  5160 */   124,  125,  126,  127,  128,  129,  130,  131,  132,  133,
 /*  5170 */   134,  135,  136,  155,  106,  107,  155,  155,  155,  155,
 /*  5180 */   112,  155,  155,  155,  155,  155,  155,  155,  120,  155,
 /*  5190 */   155,  123,  124,  125,  126,  127,  128,  129,  130,  131,
 /*  5200 */   132,  133,  134,  135,  136,  155,  155,  155,  155,  155,
 /*  5210 */   155,  155,  155,  155,  155,  155,  155,  155,  106,  107,
 /*  5220 */   155,  155,  155,  155,  112,  155,  155,  155,  155,  155,
 /*  5230 */   155,  155,  120,  155,  155,  123,  124,  125,  126,  127,
 /*  5240 */   128,  129,  130,  131,  132,  133,  134,  135,  136,  106,
 /*  5250 */   107,  155,  155,  155,  155,  112,  155,  155,  155,  155,
 /*  5260 */   155,  155,  155,  120,  155,  155,  123,  124,  125,  126,
 /*  5270 */   127,  128,  129,  130,  131,  132,  133,  134,  135,  136,
 /*  5280 */   155,  106,  107,  155,  155,  155,  155,  112,  155,  155,
 /*  5290 */   155,  155,  155,  155,  155,  120,  155,  155,  123,  124,
 /*  5300 */   125,  126,  127,  128,  129,  130,  131,  132,  133,  134,
 /*  5310 */   135,  136,  155,  155,  155,  155,  155,  155,  155,  155,
 /*  5320 */   155,  155,  155,  155,  155,  106,  107,  155,  155,  155,
 /*  5330 */   155,  112,  155,  155,  155,  155,  155,  155,  155,  120,
 /*  5340 */   155,  155,  123,  124,  125,  126,  127,  128,  129,  130,
 /*  5350 */   131,  132,  133,  134,  135,  136,  106,  107,  155,  155,
 /*  5360 */   155,  155,  112,  155,  155,  155,  155,  155,  155,  155,
 /*  5370 */   120,  155,  155,  123,  124,  125,  126,  127,  128,  129,
 /*  5380 */   130,  131,  132,  133,  134,  135,  136,  155,  106,  107,
 /*  5390 */   155,  155,  155,  155,  112,  155,  155,  155,  155,  155,
 /*  5400 */   155,  155,  120,  155,  155,  123,  124,  125,  126,  127,
 /*  5410 */   128,  129,  130,  131,  132,  133,  134,  135,  136,  155,
 /*  5420 */   155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
 /*  5430 */   155,  155,  106,  107,  155,  155,  155,  155,  112,  155,
 /*  5440 */   155,  155,  155,  155,  155,  155,  120,  155,  155,  123,
 /*  5450 */   124,  125,  126,  127,  128,  129,  130,  131,  132,  133,
 /*  5460 */   134,  135,  136,  106,  107,  155,  155,  155,  155,  112,
 /*  5470 */   155,  155,  155,  155,  155,  155,  155,  120,  155,  155,
 /*  5480 */   123,  124,  125,  126,  127,  128,  129,  130,  131,  132,
 /*  5490 */   133,  134,  135,    6,  155,    8,    9,  155,  155,  155,
 /*  5500 */   155,  155,  155,  155,  155,  155,  155,  155,   21,   22,
 /*  5510 */    23,   24,   25,   26,   27,   28,   29,   30,   31,   32,
 /*  5520 */   106,  107,  155,  155,  155,  155,  112,  155,  155,  155,
 /*  5530 */   155,  155,  155,  155,  120,  155,  155,  123,  124,  125,
 /*  5540 */   126,  127,  128,  129,  155,  106,  107,  155,  155,  155,
 /*  5550 */   155,  112,  155,  155,  155,  155,  155,  155,  155,  120,
 /*  5560 */   155,  155,  123,  124,  125,  126,  127,  128,  129,  106,
 /*  5570 */   107,  155,  155,  155,  155,  112,  155,  155,  155,  155,
 /*  5580 */   155,  155,  155,  120,  155,  155,  123,  124,  125,  126,
 /*  5590 */   127,  128,  129,  155,  106,  107,  155,  155,  155,  155,
 /*  5600 */   112,  155,  155,  155,  155,  155,  155,  155,  120,  155,
 /*  5610 */   155,  123,  124,  125,  126,  127,  128,  129,  106,  107,
 /*  5620 */   155,  155,  155,  155,  112,  155,  155,  155,  106,  107,
 /*  5630 */   155,  155,  120,  155,  112,  123,  124,  125,  126,  127,
 /*  5640 */   128,  129,  120,  155,  155,  123,  124,  125,  126,  127,
 /*  5650 */   128,  129,  106,  107,  155,  155,  155,  155,  112,  155,
 /*  5660 */   155,  155,  155,  155,  155,  155,  120,  155,  155,  123,
 /*  5670 */   124,  125,  126,  127,  128,  129,  106,  107,  155,  155,
 /*  5680 */   155,  155,  112,  155,  155,  155,  155,  155,  155,  155,
 /*  5690 */   120,  155,  155,  123,  124,  125,  126,  127,  128,  129,
 /*  5700 */   155,  106,  107,  155,  155,  155,  155,  112,  155,  155,
 /*  5710 */   155,  155,  155,  155,  155,  120,  155,  155,  123,  124,
 /*  5720 */   125,  126,  127,  128,  129,  106,  107,  155,  155,  155,
 /*  5730 */   155,  112,  155,  155,  155,  155,  155,  155,  155,  120,
 /*  5740 */   155,  155,  123,  124,  125,  126,  127,  128,  129,
};
#define YY_SHIFT_USE_DFLT (-11)
#define YY_SHIFT_MAX 307
static const short yy_shift_ofst[] = {
 /*     0 */   -11,  859, 1100, 1180,  940, 1260, 1020, 1340, 1340, 1420,
 /*    10 */  1420, 1340, 1420, 1420, 1420, 1340, 1340, 1340, 1340, 4007,
 /*    20 */  4064, 4007, 4007, 4121, 4121, 4121, 4349, 4349, 4349, 4349,
 /*    30 */  4349, 4349, 4178, 4292, 4235, 4349, 4349, 4349, 4349, 4349,
 /*    40 */  4349, 4349, 4349, 4349, 4349, 4349, 4349, 4349, 4577, 4349,
 /*    50 */  4349, 4349, 4948, 4406, 4463, 4691, 4634, 4891, 4748, 4520,
 /*    60 */  4834, 4948, 4948, 4948, 4948, 4948, 4948, 4948, 4948, 4948,
 /*    70 */  4948, 4948, 4948, 4948, 4948, 4948, 4948, 4948, 4948, 4948,
 /*    80 */  4948, 4948, 4948, 4948, 4948, 4948, 4948, 5487, 5487, 5487,
 /*    90 */  5487, 5487, 5487, 5487, 5487, 5487, 5487, 5487, 5487, 5487,
 /*   100 */  5487, 5487, 5487, 5487, 5487, 5487, 5487, 5487, 5487, 5487,
 /*   110 */  5487, 5487, 5487, 5487, 5487, 5487, 5487, 5487, 5487,   69,
 /*   120 */     4, 1290, 1290,  936,  936,  936,  400,  587,  388, 2586,
 /*   130 */  2645, 4039,  337,  407,  463,  407,  407,  -11,  -11,  -11,
 /*   140 */   -11,  -11,  -11,  -11, 3997, 3997, 1287, 1367, 1366, 1449,
 /*   150 */  1450,  863,  196,  863,  863, 2751, 2707,  895,  611,  146,
 /*   160 */   156,  156,   80,  345,  677,  478,  411,  544,   15,  212,
 /*   170 */   279,  114,    8,  114,   73,  112,  145,  272,   44,  114,
 /*   180 */   211,  114,   44,   20,  120,  270,  338,  247,  404,  471,
 /*   190 */   537,  287,  469,  444,   79,  377,   85,  314,  261,  215,
 /*   200 */   194,  179,  889,   79,  947,  949,   17,   56,   90,   85,
 /*   210 */   151,  213,   56,  257,  284,  309,  342,  291,   17,  355,
 /*   220 */   398,  370,  418,  402,  455,  461,  476,  485,  504,  484,
 /*   230 */   536,  538,  546,  577,  589,  600,  566,  572,  646,  641,
 /*   240 */   667,  625,  669,  636,  680,  712,  671,  721,  729,  728,
 /*   250 */   696,  740,  750,  764,  625,  780,  799,   79,  801,  804,
 /*   260 */   803,  811,  817,  840,  845,  837,   79,  865,  813,  872,
 /*   270 */   894,  -10,   57,  605,   79,    1,  939,  891,  871,  866,
 /*   280 */   850,  808,  671,  814,  818,   79,  807,   79,  796,   79,
 /*   290 */   797,  781,  770,  771,  747,  745,   79,  733,  730,   79,
 /*   300 */   725,  715,  698,   79,  674,  674,  664,  663,
};
#define YY_REDUCE_USE_DFLT (-89)
#define YY_REDUCE_MAX 143
static const short yy_reduce_ofst[] = {
 /*     0 */   154,  -88,  -88,  -88,  -88,  -88,  -88,   43,  574,  508,
 /*    10 */   -23,  242,  375,  176,  707,  308,  640,  109,  441, 1437,
 /*    20 */  1477, 1522, 1397, 1562, 1643, 1602, 1764, 1885, 1683, 1723,
 /*    30 */  1844, 1804, 2552, 2369, 1965, 1925, 2006, 2490, 2449, 2328,
 /*    40 */  2288, 2248, 2207, 2167, 2127, 2086, 2046, 2409, 2613, 2659,
 /*    50 */  2780, 2700, 2740, 3264, 3022, 3184, 3143, 3063, 2982, 2901,
 /*    60 */  3587, 3829, 3748, 3668, 3587, 2821, 3184, 3426, 3385, 3466,
 /*    70 */  3506, 3547, 3627, 3708, 3789, 3869, 2861, 2942, 3022, 3103,
 /*    80 */  2901, 3143, 3224, 3264, 3063, 3305, 3345, 4700, 4900, 4955,
 /*    90 */  5282, 5326, 5250, 5005, 5036, 5175, 5068, 5112, 5143, 5219,
 /*   100 */  5357,  794,  875,  955, 1035, 1115, 1195, 1355, 1275, 5414,
 /*   110 */  5439, 5512, 5595, 5546, 5619, 5463, 5488, 5570, 5522, 4048,
 /*   120 */  4048, 1108, 1028,  948,  868,  787,  422,  357,  225,   81,
 /*   130 */    81,  214,  280,  333,  430,  406,  443,  480,  479,  503,
 /*   140 */   507,  516,  547,  553,
};
static const YYACTIONTYPE yy_default[] = {
 /*     0 */   680,  738,  738,  738,  738,  738,  738,  738,  738,  738,
 /*    10 */   738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
 /*    20 */   738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
 /*    30 */   738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
 /*    40 */   738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
 /*    50 */   662,  738,  738,  738,  738,  738,  738,  738,  738,  738,
 /*    60 */   738,  738,  738,  738,  738,  738,  738,  738,  738,  667,
 /*    70 */   738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
 /*    80 */   738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
 /*    90 */   738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
 /*   100 */   738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
 /*   110 */   738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
 /*   120 */   738,  738,  738,  738,  738,  738,  738,  726,  738,  640,
 /*   130 */   640,  671,  738,  738,  738,  738,  738,  680,  502,  680,
 /*   140 */   680,  502,  680,  680,  603,  604,  548,  548,  547,  552,
 /*   150 */   548,  579,  738,  578,  577,  552,  550,  738,  551,  551,
 /*   160 */   585,  584,  553,  547,  738,  550,  547,  549,  549,  553,
 /*   170 */   738,  583,  738,  580,  738,  738,  738,  738,  738,  581,
 /*   180 */   509,  582,  514,  738,  565,  738,  738,  738,  738,  738,
 /*   190 */   738,  609,  738,  738,  593,  738,  591,  738,  738,  738,
 /*   200 */   738,  738,  738,  592,  738,  738,  586,  589,  738,  590,
 /*   210 */   738,  738,  588,  738,  738,  738,  738,  738,  587,  738,
 /*   220 */   738,  738,  738,  554,  738,  661,  659,  738,  738,  738,
 /*   230 */   738,  738,  738,  738,  738,  738,  738,  555,  738,  738,
 /*   240 */   738,  606,  738,  738,  738,  738,  607,  738,  738,  738,
 /*   250 */   738,  738,  738,  738,  605,  738,  737,  602,  738,  738,
 /*   260 */   738,  738,  738,  738,  738,  738,  601,  738,  738,  738,
 /*   270 */   738,  738,  738,  738,  600,  738,  738,  738,  738,  738,
 /*   280 */   738,  738,  608,  738,  738,  599,  738,  598,  738,  597,
 /*   290 */   738,  738,  738,  666,  738,  738,  596,  640,  738,  595,
 /*   300 */   738,  738,  738,  594,  736,  738,  738,  738,  518,  496,
 /*   310 */   497,  517,  520,  522,  523,  519,  532,  535,  538,  541,
 /*   320 */   544,  545,  556,  557,  558,  559,  560,  561,  562,  563,
 /*   330 */   564,  566,  567,  568,  569,  570,  571,  572,  573,  574,
 /*   340 */   575,  576,  610,  611,  612,  500,  501,  499,  503,  504,
 /*   350 */   505,  506,  507,  508,  510,  512,  511,  534,  513,  615,
 /*   360 */   616,  617,  619,  618,  620,  621,  622,  623,  664,  665,
 /*   370 */   624,  625,  626,  641,  639,  516,  515,  614,  668,  644,
 /*   380 */   645,  646,  647,  648,  649,  650,  651,  652,  653,  654,
 /*   390 */   655,  656,  669,  672,  642,  643,  674,  670,  673,  681,
 /*   400 */   682,  683,  684,  688,  689,  690,  691,  692,  693,  675,
 /*   410 */   676,  677,  678,  679,  694,  695,  687,  696,  685,  686,
 /*   420 */   698,  699,  700,  701,  702,  703,  704,  705,  706,  707,
 /*   430 */   708,  709,  710,  711,  712,  713,  714,  715,  716,  717,
 /*   440 */   718,  719,  722,  723,  720,  721,  724,  725,  727,  728,
 /*   450 */   729,  730,  732,  733,  734,  735,  731,  697,  633,  630,
 /*   460 */   627,  613,  657,  658,  663,  660,  546,  638,  531,  542,
 /*   470 */   543,  637,  631,  628,  530,  555,  539,  540,  636,  529,
 /*   480 */   536,  537,  635,  629,  528,  533,  526,  554,  524,  525,
 /*   490 */   527,  521,  634,  632,  498,
};
#define YY_SZ_ACTTAB (int)(sizeof(yy_action)/sizeof(yy_action[0]))

/* The next table maps tokens into fallback tokens.  If a construct
** like the following:
** 
**      %fallback ID X Y Z.
**
** appears in the grammar, then ID becomes a fallback token for X, Y,
** and Z.  Whenever one of the tokens X, Y, or Z is input to the parser
** but it does not parse, the type of the token is changed to ID and
** the parse is retried before an error is thrown.
*/
#ifdef YYFALLBACK
static const YYCODETYPE yyFallback[] = {
};
#endif /* YYFALLBACK */

/* The following structure represents a single element of the
** parser's stack.  Information stored includes:
**
**   +  The state number for the parser at this level of the stack.
**
**   +  The value of the token stored at this level of the stack.
**      (In other words, the "major" token.)
**
**   +  The semantic value stored at this level of the stack.  This is
**      the information used by the action routines in the grammar.
**      It is sometimes called the "minor" token.
*/
struct yyStackEntry {
  YYACTIONTYPE stateno;  /* The state-number */
  YYCODETYPE major;      /* The major token value.  This is the code
                         ** number for the token at this stack level */
  YYMINORTYPE minor;     /* The user-supplied minor token value.  This
                         ** is the value of the token  */
};
typedef struct yyStackEntry yyStackEntry;

/* The state of the parser is completely contained in an instance of
** the following structure */
struct yyParser {
  int yyidx;                    /* Index of top element in stack */
#ifdef YYTRACKMAXSTACKDEPTH
  int yyidxMax;                 /* Maximum value of yyidx */
#endif
  int yyerrcnt;                 /* Shifts left before out of the error */
  XecParseARG_SDECL                /* A place to hold %extra_argument */
#if YYSTACKDEPTH<=0
  int yystksz;                  /* Current side of the stack */
  yyStackEntry *yystack;        /* The parser's stack */
#else
  yyStackEntry yystack[YYSTACKDEPTH];  /* The parser's stack */
#endif
};
typedef struct yyParser yyParser;

#ifndef NDEBUG
#include <stdio.h>
static FILE *yyTraceFILE = 0;
static char *yyTracePrompt = 0;
#endif /* NDEBUG */

#ifndef NDEBUG
/* 
** Turn parser tracing on by giving a stream to which to write the trace
** and a prompt to preface each trace message.  Tracing is turned off
** by making either argument NULL 
**
** Inputs:
** <ul>
** <li> A FILE* to which trace output should be written.
**      If NULL, then tracing is turned off.
** <li> A prefix string written at the beginning of every
**      line of trace output.  If NULL, then tracing is
**      turned off.
** </ul>
**
** Outputs:
** None.
*/
void XecParseTrace(FILE *TraceFILE, char *zTracePrompt){
  yyTraceFILE = TraceFILE;
  yyTracePrompt = zTracePrompt;
  if( yyTraceFILE==0 ) yyTracePrompt = 0;
  else if( yyTracePrompt==0 ) yyTraceFILE = 0;
}
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing shifts, the names of all terminals and nonterminals
** are required.  The following table supplies these names */
static const char *const yyTokenName[] = { 
  "$",             "IF",            "ELSE",          "TRY",         
  "CATCH",         "FINALLY",       "YIELD",         "USING",       
  "LPN",           "IDENTIFIER",    "PERIOD",        "RPN",         
  "RBR",           "LBR",           "COLON",         "SEMICOLON",   
  "VAR",           "ASSIGN",        "COMMA",         "LSQ",         
  "RSQ",           "NEW",           "NULL",          "TRUE",        
  "FALSE",         "NUMBER",        "STRING",        "INCREMENT",   
  "DECREMENT",     "PLUS",          "MINUS",         "XMARK",       
  "TILDE",         "ASTERISK",      "SOLIDUS",       "PERCENT",     
  "LSHIFT",        "RSHIFT",        "URSHIFT",       "AMPERSAND",   
  "CARET",         "VBAR",          "CONCATENATE",   "EQUAL",       
  "NOTEQUAL",      "LESS",          "GREATER",       "LESSEQUAL",   
  "GREATEREQUAL",  "IN",            "NOTIN",         "IS",          
  "NOTIS",         "LOGICAND",      "LOGICXOR",      "LOGICOR",     
  "QMARK",         "ELLIPSIS",      "MULASSIGN",     "DIVASSIGN",   
  "MODASSIGN",     "INTDIVASSIGN",  "ADDASSIGN",     "SUBASSIGN",   
  "LSHIFTASSIGN",  "RSHIFTASSIGN",  "URSHIFTASSIGN",  "BITANDASSIGN",
  "BITXORASSIGN",  "BITORASSIGN",   "WHILE",         "DELETE",      
  "CASE",          "DEFAULT",       "CONTINUE",      "BREAK",       
  "RETURN",        "THROW",         "SWITCH",        "DO",          
  "FOR",           "EACHKEY",       "error",         "assign_op",   
  "value_lbody",   "value_list",    "keyval_lbody",  "keyval_list", 
  "stmt_lbr",      "stmt_lbr_ru",   "stmt_if",       "stmt_switch", 
  "stmt_while",    "stmt_do",       "scope_for",     "stmt_foreach",
  "stmt_for",      "stmt_uscope",   "try_block",     "try_catch",   
  "scope_catch",   "stmt_catch",    "token_yield",   "token_using", 
  "script",        "stmt_list",     "name",          "proto",       
  "expr_list",     "decl_object",   "object_lbr",    "object_decls",
  "expr_simple",   "object_decl",   "decl_func",     "decl_proto",  
  "decl_var",      "decl_noinit",   "func_lbr",      "varname_list",
  "expr_index",    "expr_assign",   "expr_value",    "expr_yield",  
  "expr_new",      "expr_call",     "expr_postfix",  "expr_literal",
  "expr_suffix",   "expr_unary",    "expr_mul",      "expr_add",    
  "expr_shift",    "expr_bitand",   "expr_bitxor",   "expr_bitor",  
  "expr_concat",   "expr_compare",  "expr_and",      "expr_xor",    
  "expr_or",       "expr_nolbr",    "newobj_lbr",    "newfunc_lbr", 
  "expr_lbody",    "expr_final",    "sexpr_lbody",   "sexpr_list",  
  "sexpr_assign",  "cond_using",    "condition",     "stmt",        
  "stmt_common",   "stmt_reuse",    "stmt_try",    
};
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing reduce actions, the names of all rules are required.
*/
static const char *const yyRuleName[] = {
 /*   0 */ "script ::= stmt_list",
 /*   1 */ "name ::= IDENTIFIER",
 /*   2 */ "name ::= name PERIOD IDENTIFIER",
 /*   3 */ "proto ::= name LPN expr_list RPN",
 /*   4 */ "decl_object ::= object_lbr object_decls RBR",
 /*   5 */ "object_lbr ::= name LBR",
 /*   6 */ "object_lbr ::= name COLON expr_simple LBR",
 /*   7 */ "object_decls ::=",
 /*   8 */ "object_decls ::= object_decls object_decl",
 /*   9 */ "object_decl ::= decl_object",
 /*  10 */ "object_decl ::= decl_func",
 /*  11 */ "object_decl ::= decl_proto SEMICOLON",
 /*  12 */ "object_decl ::= decl_var SEMICOLON",
 /*  13 */ "object_decl ::= decl_noinit SEMICOLON",
 /*  14 */ "decl_proto ::= proto",
 /*  15 */ "decl_proto ::= proto YIELD",
 /*  16 */ "decl_func ::= func_lbr stmt_list RBR",
 /*  17 */ "func_lbr ::= proto LBR",
 /*  18 */ "decl_var ::= VAR varname_list ASSIGN expr_list",
 /*  19 */ "decl_noinit ::= VAR varname_list",
 /*  20 */ "varname_list ::= IDENTIFIER",
 /*  21 */ "varname_list ::= varname_list COMMA IDENTIFIER",
 /*  22 */ "expr_index ::= LPN expr_assign RPN",
 /*  23 */ "expr_index ::= name PERIOD LSQ expr_value RSQ",
 /*  24 */ "expr_index ::= name LSQ expr_value RSQ",
 /*  25 */ "expr_index ::= expr_index PERIOD IDENTIFIER",
 /*  26 */ "expr_index ::= expr_index PERIOD LSQ expr_value RSQ",
 /*  27 */ "expr_index ::= expr_index LSQ expr_value RSQ",
 /*  28 */ "expr_yield ::= YIELD LPN expr_list RPN",
 /*  29 */ "expr_new ::= NEW name LPN expr_list RPN",
 /*  30 */ "expr_new ::= NEW expr_index LPN expr_list RPN",
 /*  31 */ "expr_call ::= proto LPN expr_list RPN",
 /*  32 */ "expr_call ::= expr_index LPN expr_list RPN",
 /*  33 */ "expr_call ::= expr_yield LPN expr_list RPN",
 /*  34 */ "expr_call ::= expr_new LPN expr_list RPN",
 /*  35 */ "expr_call ::= expr_call LPN expr_list RPN",
 /*  36 */ "expr_call ::= expr_postfix LPN expr_list RPN",
 /*  37 */ "expr_postfix ::= proto PERIOD IDENTIFIER",
 /*  38 */ "expr_postfix ::= proto PERIOD LSQ expr_value RSQ",
 /*  39 */ "expr_postfix ::= proto LSQ expr_value RSQ",
 /*  40 */ "expr_postfix ::= expr_yield PERIOD IDENTIFIER",
 /*  41 */ "expr_postfix ::= expr_yield PERIOD LSQ expr_value RSQ",
 /*  42 */ "expr_postfix ::= expr_yield LSQ expr_value RSQ",
 /*  43 */ "expr_postfix ::= expr_new PERIOD IDENTIFIER",
 /*  44 */ "expr_postfix ::= expr_new PERIOD LSQ expr_value RSQ",
 /*  45 */ "expr_postfix ::= expr_new LSQ expr_value RSQ",
 /*  46 */ "expr_postfix ::= expr_call PERIOD IDENTIFIER",
 /*  47 */ "expr_postfix ::= expr_call PERIOD LSQ expr_value RSQ",
 /*  48 */ "expr_postfix ::= expr_call LSQ expr_value RSQ",
 /*  49 */ "expr_postfix ::= expr_postfix PERIOD IDENTIFIER",
 /*  50 */ "expr_postfix ::= expr_postfix PERIOD LSQ expr_value RSQ",
 /*  51 */ "expr_postfix ::= expr_postfix LSQ expr_value RSQ",
 /*  52 */ "expr_simple ::= name",
 /*  53 */ "expr_simple ::= proto",
 /*  54 */ "expr_simple ::= expr_index",
 /*  55 */ "expr_simple ::= expr_yield",
 /*  56 */ "expr_simple ::= expr_new",
 /*  57 */ "expr_simple ::= expr_call",
 /*  58 */ "expr_simple ::= expr_postfix",
 /*  59 */ "expr_simple ::= proto YIELD",
 /*  60 */ "expr_simple ::= expr_call YIELD",
 /*  61 */ "expr_literal ::= expr_simple",
 /*  62 */ "expr_literal ::= NULL",
 /*  63 */ "expr_literal ::= TRUE",
 /*  64 */ "expr_literal ::= FALSE",
 /*  65 */ "expr_literal ::= NUMBER",
 /*  66 */ "expr_literal ::= STRING",
 /*  67 */ "expr_suffix ::= expr_literal",
 /*  68 */ "expr_suffix ::= expr_suffix INCREMENT",
 /*  69 */ "expr_suffix ::= expr_suffix DECREMENT",
 /*  70 */ "expr_unary ::= expr_suffix",
 /*  71 */ "expr_unary ::= PLUS expr_unary",
 /*  72 */ "expr_unary ::= MINUS expr_unary",
 /*  73 */ "expr_unary ::= XMARK expr_unary",
 /*  74 */ "expr_unary ::= TILDE expr_unary",
 /*  75 */ "expr_unary ::= INCREMENT expr_unary",
 /*  76 */ "expr_unary ::= DECREMENT expr_unary",
 /*  77 */ "expr_mul ::= expr_unary",
 /*  78 */ "expr_mul ::= expr_mul ASTERISK expr_unary",
 /*  79 */ "expr_mul ::= expr_mul SOLIDUS expr_unary",
 /*  80 */ "expr_mul ::= expr_mul PERCENT expr_unary",
 /*  81 */ "expr_mul ::= expr_mul TILDE expr_unary",
 /*  82 */ "expr_add ::= expr_mul",
 /*  83 */ "expr_add ::= expr_add PLUS expr_mul",
 /*  84 */ "expr_add ::= expr_add MINUS expr_mul",
 /*  85 */ "expr_shift ::= expr_add",
 /*  86 */ "expr_shift ::= expr_shift LSHIFT expr_add",
 /*  87 */ "expr_shift ::= expr_shift RSHIFT expr_add",
 /*  88 */ "expr_shift ::= expr_shift URSHIFT expr_add",
 /*  89 */ "expr_bitand ::= expr_shift",
 /*  90 */ "expr_bitand ::= expr_bitand AMPERSAND expr_shift",
 /*  91 */ "expr_bitxor ::= expr_bitand",
 /*  92 */ "expr_bitxor ::= expr_bitxor CARET expr_bitand",
 /*  93 */ "expr_bitor ::= expr_bitxor",
 /*  94 */ "expr_bitor ::= expr_bitor VBAR expr_bitxor",
 /*  95 */ "expr_concat ::= expr_bitor",
 /*  96 */ "expr_concat ::= expr_concat CONCATENATE expr_bitor",
 /*  97 */ "expr_compare ::= expr_concat",
 /*  98 */ "expr_compare ::= expr_compare EQUAL expr_concat",
 /*  99 */ "expr_compare ::= expr_compare NOTEQUAL expr_concat",
 /* 100 */ "expr_compare ::= expr_compare LESS expr_concat",
 /* 101 */ "expr_compare ::= expr_compare GREATER expr_concat",
 /* 102 */ "expr_compare ::= expr_compare LESSEQUAL expr_concat",
 /* 103 */ "expr_compare ::= expr_compare GREATEREQUAL expr_concat",
 /* 104 */ "expr_compare ::= expr_compare IN expr_concat",
 /* 105 */ "expr_compare ::= expr_compare NOTIN expr_concat",
 /* 106 */ "expr_compare ::= expr_compare IS expr_concat",
 /* 107 */ "expr_compare ::= expr_compare NOTIS expr_concat",
 /* 108 */ "expr_and ::= expr_compare",
 /* 109 */ "expr_and ::= expr_and LOGICAND expr_compare",
 /* 110 */ "expr_xor ::= expr_and",
 /* 111 */ "expr_xor ::= expr_xor LOGICXOR expr_and",
 /* 112 */ "expr_or ::= expr_xor",
 /* 113 */ "expr_or ::= expr_or LOGICOR expr_xor",
 /* 114 */ "expr_nolbr ::= expr_or",
 /* 115 */ "expr_nolbr ::= expr_or QMARK expr_value COLON expr_value",
 /* 116 */ "expr_nolbr ::= LSQ RSQ",
 /* 117 */ "expr_nolbr ::= LSQ value_list RSQ",
 /* 118 */ "expr_nolbr ::= newobj_lbr object_decls RBR",
 /* 119 */ "expr_nolbr ::= newfunc_lbr stmt_list RBR",
 /* 120 */ "newobj_lbr ::= COLON LBR",
 /* 121 */ "newobj_lbr ::= COLON expr_simple LBR",
 /* 122 */ "newfunc_lbr ::= QMARK LPN expr_list RPN LBR",
 /* 123 */ "newfunc_lbr ::= PERIOD QMARK LPN expr_list RPN LBR",
 /* 124 */ "newfunc_lbr ::= QMARK LPN expr_list RPN YIELD LBR",
 /* 125 */ "newfunc_lbr ::= PERIOD QMARK LPN expr_list RPN YIELD LBR",
 /* 126 */ "expr_value ::= expr_nolbr",
 /* 127 */ "expr_value ::= LBR RBR",
 /* 128 */ "expr_value ::= LBR keyval_list RBR",
 /* 129 */ "expr_lbody ::= expr_value",
 /* 130 */ "expr_lbody ::= expr_lbody COMMA expr_value",
 /* 131 */ "expr_final ::= ELLIPSIS",
 /* 132 */ "expr_final ::= proto ELLIPSIS",
 /* 133 */ "expr_final ::= expr_call ELLIPSIS",
 /* 134 */ "expr_final ::= expr_yield ELLIPSIS",
 /* 135 */ "expr_final ::= proto YIELD ELLIPSIS",
 /* 136 */ "expr_final ::= expr_call YIELD ELLIPSIS",
 /* 137 */ "expr_final ::= name LSQ RSQ ELLIPSIS",
 /* 138 */ "expr_final ::= proto LSQ RSQ ELLIPSIS",
 /* 139 */ "expr_final ::= expr_index LSQ RSQ ELLIPSIS",
 /* 140 */ "expr_final ::= expr_yield LSQ RSQ ELLIPSIS",
 /* 141 */ "expr_final ::= expr_new LSQ RSQ ELLIPSIS",
 /* 142 */ "expr_final ::= expr_call LSQ RSQ ELLIPSIS",
 /* 143 */ "expr_final ::= expr_postfix LSQ RSQ ELLIPSIS",
 /* 144 */ "expr_list ::= expr_final",
 /* 145 */ "expr_list ::= expr_lbody",
 /* 146 */ "expr_list ::= expr_lbody COMMA expr_final",
 /* 147 */ "expr_assign ::= expr_list",
 /* 148 */ "expr_assign ::= expr_lbody assign_op expr_assign",
 /* 149 */ "assign_op ::= ASSIGN",
 /* 150 */ "assign_op ::= MULASSIGN",
 /* 151 */ "assign_op ::= DIVASSIGN",
 /* 152 */ "assign_op ::= MODASSIGN",
 /* 153 */ "assign_op ::= INTDIVASSIGN",
 /* 154 */ "assign_op ::= ADDASSIGN",
 /* 155 */ "assign_op ::= SUBASSIGN",
 /* 156 */ "assign_op ::= LSHIFTASSIGN",
 /* 157 */ "assign_op ::= RSHIFTASSIGN",
 /* 158 */ "assign_op ::= URSHIFTASSIGN",
 /* 159 */ "assign_op ::= BITANDASSIGN",
 /* 160 */ "assign_op ::= BITXORASSIGN",
 /* 161 */ "assign_op ::= BITORASSIGN",
 /* 162 */ "value_lbody ::= expr_value",
 /* 163 */ "value_lbody ::= value_lbody COMMA expr_value",
 /* 164 */ "value_list ::= expr_final",
 /* 165 */ "value_list ::= expr_final COMMA",
 /* 166 */ "value_list ::= value_lbody",
 /* 167 */ "value_list ::= value_lbody COMMA",
 /* 168 */ "value_list ::= value_lbody COMMA expr_final",
 /* 169 */ "keyval_lbody ::= expr_value COLON expr_value",
 /* 170 */ "keyval_lbody ::= keyval_lbody COMMA expr_value COLON expr_value",
 /* 171 */ "keyval_list ::= keyval_lbody",
 /* 172 */ "keyval_list ::= keyval_lbody COMMA",
 /* 173 */ "sexpr_lbody ::= expr_nolbr",
 /* 174 */ "sexpr_lbody ::= sexpr_lbody COMMA expr_value",
 /* 175 */ "sexpr_list ::= expr_final",
 /* 176 */ "sexpr_list ::= sexpr_lbody",
 /* 177 */ "sexpr_list ::= sexpr_lbody COMMA expr_final",
 /* 178 */ "sexpr_assign ::= sexpr_list",
 /* 179 */ "sexpr_assign ::= sexpr_lbody assign_op expr_assign",
 /* 180 */ "cond_using ::= expr_assign",
 /* 181 */ "cond_using ::= decl_var",
 /* 182 */ "condition ::= cond_using",
 /* 183 */ "condition ::= USING expr_assign",
 /* 184 */ "condition ::= USING decl_var",
 /* 185 */ "stmt_list ::=",
 /* 186 */ "stmt_list ::= stmt_list stmt",
 /* 187 */ "stmt ::= stmt_lbr stmt_list RBR",
 /* 188 */ "stmt ::= stmt_common",
 /* 189 */ "stmt_lbr ::= LBR",
 /* 190 */ "stmt_reuse ::= stmt_lbr_ru stmt_list RBR",
 /* 191 */ "stmt_reuse ::= stmt_common",
 /* 192 */ "stmt_lbr_ru ::= LBR",
 /* 193 */ "stmt_common ::= SEMICOLON",
 /* 194 */ "stmt_common ::= sexpr_assign SEMICOLON",
 /* 195 */ "stmt_common ::= decl_object",
 /* 196 */ "stmt_common ::= decl_func",
 /* 197 */ "stmt_common ::= decl_var SEMICOLON",
 /* 198 */ "stmt_common ::= decl_noinit SEMICOLON",
 /* 199 */ "stmt_common ::= stmt_if LPN condition RPN stmt",
 /* 200 */ "stmt_common ::= stmt_if LPN condition RPN stmt ELSE stmt",
 /* 201 */ "stmt_common ::= stmt_switch LPN condition RPN stmt_lbr_ru stmt_list RPN",
 /* 202 */ "stmt_common ::= stmt_while LPN condition RPN stmt_reuse",
 /* 203 */ "stmt_common ::= stmt_do stmt_reuse WHILE LPN expr_assign RPN SEMICOLON",
 /* 204 */ "stmt_common ::= stmt_foreach stmt_reuse",
 /* 205 */ "stmt_common ::= stmt_for stmt_reuse",
 /* 206 */ "stmt_common ::= stmt_uscope cond_using RPN stmt_reuse",
 /* 207 */ "stmt_common ::= token_using expr_assign SEMICOLON",
 /* 208 */ "stmt_common ::= token_using decl_var SEMICOLON",
 /* 209 */ "stmt_common ::= stmt_try",
 /* 210 */ "stmt_common ::= DELETE expr_lbody SEMICOLON",
 /* 211 */ "stmt_common ::= CASE expr_value COLON",
 /* 212 */ "stmt_common ::= DEFAULT COLON",
 /* 213 */ "stmt_common ::= CONTINUE SEMICOLON",
 /* 214 */ "stmt_common ::= BREAK SEMICOLON",
 /* 215 */ "stmt_common ::= RETURN SEMICOLON",
 /* 216 */ "stmt_common ::= RETURN expr_list SEMICOLON",
 /* 217 */ "stmt_common ::= token_yield SEMICOLON",
 /* 218 */ "stmt_common ::= token_yield expr_list SEMICOLON",
 /* 219 */ "stmt_common ::= THROW expr_value SEMICOLON",
 /* 220 */ "stmt_if ::= IF",
 /* 221 */ "stmt_switch ::= SWITCH",
 /* 222 */ "stmt_while ::= WHILE",
 /* 223 */ "stmt_do ::= DO",
 /* 224 */ "scope_for ::= FOR",
 /* 225 */ "stmt_foreach ::= scope_for LPN expr_lbody COLON expr_value RPN",
 /* 226 */ "stmt_foreach ::= scope_for LPN expr_lbody EACHKEY expr_value RPN",
 /* 227 */ "stmt_foreach ::= scope_for LPN VAR varname_list COLON expr_value RPN",
 /* 228 */ "stmt_foreach ::= scope_for LPN VAR varname_list EACHKEY expr_value RPN",
 /* 229 */ "stmt_for ::= scope_for LPN condition SEMICOLON expr_assign SEMICOLON expr_assign RPN",
 /* 230 */ "stmt_uscope ::= USING LPN",
 /* 231 */ "stmt_try ::= try_catch",
 /* 232 */ "stmt_try ::= try_catch FINALLY stmt",
 /* 233 */ "stmt_try ::= try_block FINALLY stmt",
 /* 234 */ "try_block ::= TRY stmt",
 /* 235 */ "try_catch ::= try_block stmt_catch stmt_reuse",
 /* 236 */ "try_catch ::= try_catch stmt_catch stmt_reuse",
 /* 237 */ "scope_catch ::= CATCH",
 /* 238 */ "stmt_catch ::= scope_catch LPN COLON expr_simple RPN",
 /* 239 */ "stmt_catch ::= scope_catch LPN expr_value COLON expr_simple RPN",
 /* 240 */ "stmt_catch ::= scope_catch LPN VAR name COLON expr_simple RPN",
 /* 241 */ "token_yield ::= YIELD",
 /* 242 */ "token_using ::= USING",
};
#endif /* NDEBUG */


#if YYSTACKDEPTH<=0
/*
** Try to increase the size of the parser stack.
*/
static void yyGrowStack(yyParser *p){
  int newSize;
  yyStackEntry *pNew;

  newSize = p->yystksz*2 + 100;
  pNew = realloc(p->yystack, newSize*sizeof(pNew[0]));
  if( pNew ){
    p->yystack = pNew;
    p->yystksz = newSize;
#ifndef NDEBUG
    if( yyTraceFILE ){
      fprintf(yyTraceFILE,"%sStack grows to %d entries!\n",
              yyTracePrompt, p->yystksz);
    }
#endif
  }
}
#endif

/* 
** This function allocates a new parser.
** The only argument is a pointer to a function which works like
** malloc.
**
** Inputs:
** A pointer to the function used to allocate memory.
**
** Outputs:
** A pointer to a parser.  This pointer is used in subsequent calls
** to XecParse and XecParseFree.
*/
void *XecParseAlloc(void *(*mallocProc)(size_t)){
  yyParser *pParser;
  pParser = (yyParser*)(*mallocProc)( (size_t)sizeof(yyParser) );
  if( pParser ){
    pParser->yyidx = -1;
#ifdef YYTRACKMAXSTACKDEPTH
    pParser->yyidxMax = 0;
#endif
#if YYSTACKDEPTH<=0
    pParser->yystack = NULL;
    pParser->yystksz = 0;
    yyGrowStack(pParser);
#endif
  }
  return pParser;
}

/* The following function deletes the value associated with a
** symbol.  The symbol can be either a terminal or nonterminal.
** "yymajor" is the symbol code, and "yypminor" is a pointer to
** the value.
*/
static void yy_destructor(
  yyParser *yypParser,    /* The parser */
  YYCODETYPE yymajor,     /* Type code for object to destroy */
  YYMINORTYPE *yypminor   /* The object to be destroyed */
){
  XecParseARG_FETCH;
  switch( yymajor ){
    /* Here is inserted the actions which take place when a
    ** terminal or non-terminal is destroyed.  This can happen
    ** when the symbol is popped from the stack during a
    ** reduce or during error processing or when a parser is 
    ** being destroyed before it is finished parsing.
    **
    ** Note: during a reduce, the only symbols destroyed are those
    ** which appear on the RHS of the rule, but which are not used
    ** inside the C code.
    */
      /* TERMINAL Destructor */
    case 1: /* IF */
    case 2: /* ELSE */
    case 3: /* TRY */
    case 4: /* CATCH */
    case 5: /* FINALLY */
    case 6: /* YIELD */
    case 7: /* USING */
    case 8: /* LPN */
    case 9: /* IDENTIFIER */
    case 10: /* PERIOD */
    case 11: /* RPN */
    case 12: /* RBR */
    case 13: /* LBR */
    case 14: /* COLON */
    case 15: /* SEMICOLON */
    case 16: /* VAR */
    case 17: /* ASSIGN */
    case 18: /* COMMA */
    case 19: /* LSQ */
    case 20: /* RSQ */
    case 21: /* NEW */
    case 22: /* NULL */
    case 23: /* TRUE */
    case 24: /* FALSE */
    case 25: /* NUMBER */
    case 26: /* STRING */
    case 27: /* INCREMENT */
    case 28: /* DECREMENT */
    case 29: /* PLUS */
    case 30: /* MINUS */
    case 31: /* XMARK */
    case 32: /* TILDE */
    case 33: /* ASTERISK */
    case 34: /* SOLIDUS */
    case 35: /* PERCENT */
    case 36: /* LSHIFT */
    case 37: /* RSHIFT */
    case 38: /* URSHIFT */
    case 39: /* AMPERSAND */
    case 40: /* CARET */
    case 41: /* VBAR */
    case 42: /* CONCATENATE */
    case 43: /* EQUAL */
    case 44: /* NOTEQUAL */
    case 45: /* LESS */
    case 46: /* GREATER */
    case 47: /* LESSEQUAL */
    case 48: /* GREATEREQUAL */
    case 49: /* IN */
    case 50: /* NOTIN */
    case 51: /* IS */
    case 52: /* NOTIS */
    case 53: /* LOGICAND */
    case 54: /* LOGICXOR */
    case 55: /* LOGICOR */
    case 56: /* QMARK */
    case 57: /* ELLIPSIS */
    case 58: /* MULASSIGN */
    case 59: /* DIVASSIGN */
    case 60: /* MODASSIGN */
    case 61: /* INTDIVASSIGN */
    case 62: /* ADDASSIGN */
    case 63: /* SUBASSIGN */
    case 64: /* LSHIFTASSIGN */
    case 65: /* RSHIFTASSIGN */
    case 66: /* URSHIFTASSIGN */
    case 67: /* BITANDASSIGN */
    case 68: /* BITXORASSIGN */
    case 69: /* BITORASSIGN */
    case 70: /* WHILE */
    case 71: /* DELETE */
    case 72: /* CASE */
    case 73: /* DEFAULT */
    case 74: /* CONTINUE */
    case 75: /* BREAK */
    case 76: /* RETURN */
    case 77: /* THROW */
    case 78: /* SWITCH */
    case 79: /* DO */
    case 80: /* FOR */
    case 81: /* EACHKEY */
{
#line 96 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"

    p->destroy( (yypminor->yy0) );

#line 2001 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
}
      break;
      /* Default NON-TERMINAL Destructor */
    case 82: /* error */
    case 83: /* assign_op */
    case 84: /* value_lbody */
    case 85: /* value_list */
    case 86: /* keyval_lbody */
    case 87: /* keyval_list */
    case 88: /* stmt_lbr */
    case 89: /* stmt_lbr_ru */
    case 90: /* stmt_if */
    case 91: /* stmt_switch */
    case 92: /* stmt_while */
    case 93: /* stmt_do */
    case 94: /* scope_for */
    case 95: /* stmt_foreach */
    case 96: /* stmt_for */
    case 97: /* stmt_uscope */
    case 98: /* try_block */
    case 99: /* try_catch */
    case 100: /* scope_catch */
    case 101: /* stmt_catch */
    case 102: /* token_yield */
    case 103: /* token_using */
    case 104: /* script */
    case 105: /* stmt_list */
    case 106: /* name */
    case 107: /* proto */
    case 108: /* expr_list */
    case 109: /* decl_object */
    case 110: /* object_lbr */
    case 111: /* object_decls */
    case 112: /* expr_simple */
    case 113: /* object_decl */
    case 114: /* decl_func */
    case 115: /* decl_proto */
    case 116: /* decl_var */
    case 117: /* decl_noinit */
    case 118: /* func_lbr */
    case 119: /* varname_list */
    case 120: /* expr_index */
    case 121: /* expr_assign */
    case 122: /* expr_value */
    case 123: /* expr_yield */
    case 124: /* expr_new */
    case 125: /* expr_call */
    case 126: /* expr_postfix */
    case 127: /* expr_literal */
    case 128: /* expr_suffix */
    case 129: /* expr_unary */
    case 130: /* expr_mul */
    case 131: /* expr_add */
    case 132: /* expr_shift */
    case 133: /* expr_bitand */
    case 134: /* expr_bitxor */
    case 135: /* expr_bitor */
    case 136: /* expr_concat */
    case 137: /* expr_compare */
    case 138: /* expr_and */
    case 139: /* expr_xor */
    case 140: /* expr_or */
    case 141: /* expr_nolbr */
    case 142: /* newobj_lbr */
    case 143: /* newfunc_lbr */
    case 144: /* expr_lbody */
    case 145: /* expr_final */
    case 146: /* sexpr_lbody */
    case 147: /* sexpr_list */
    case 148: /* sexpr_assign */
    case 149: /* cond_using */
    case 150: /* condition */
    case 151: /* stmt */
    case 152: /* stmt_common */
    case 153: /* stmt_reuse */
    case 154: /* stmt_try */
{
#line 91 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"

    delete (yypminor->yy3);

#line 2083 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
}
      break;
    default:  break;   /* If no destructor action specified: do nothing */
  }
}

/*
** Pop the parser's stack once.
**
** If there is a destructor routine associated with the token which
** is popped from the stack, then call it.
**
** Return the major token number for the symbol popped.
*/
static int yy_pop_parser_stack(yyParser *pParser){
  YYCODETYPE yymajor;
  yyStackEntry *yytos = &pParser->yystack[pParser->yyidx];

  if( pParser->yyidx<0 ) return 0;
#ifndef NDEBUG
  if( yyTraceFILE && pParser->yyidx>=0 ){
    fprintf(yyTraceFILE,"%sPopping %s\n",
      yyTracePrompt,
      yyTokenName[yytos->major]);
  }
#endif
  yymajor = yytos->major;
  yy_destructor(pParser, yymajor, &yytos->minor);
  pParser->yyidx--;
  return yymajor;
}

/* 
** Deallocate and destroy a parser.  Destructors are all called for
** all stack elements before shutting the parser down.
**
** Inputs:
** <ul>
** <li>  A pointer to the parser.  This should be a pointer
**       obtained from XecParseAlloc.
** <li>  A pointer to a function used to reclaim memory obtained
**       from malloc.
** </ul>
*/
void XecParseFree(
  void *p,                    /* The parser to be deleted */
  void (*freeProc)(void*)     /* Function used to reclaim memory */
){
  yyParser *pParser = (yyParser*)p;
  if( pParser==0 ) return;
  while( pParser->yyidx>=0 ) yy_pop_parser_stack(pParser);
#if YYSTACKDEPTH<=0
  free(pParser->yystack);
#endif
  (*freeProc)((void*)pParser);
}

/*
** Return the peak depth of the stack for a parser.
*/
#ifdef YYTRACKMAXSTACKDEPTH
int XecParseStackPeak(void *p){
  yyParser *pParser = (yyParser*)p;
  return pParser->yyidxMax;
}
#endif

/*
** Find the appropriate action for a parser given the terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
static int yy_find_shift_action(
  yyParser *pParser,        /* The parser */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
  int stateno = pParser->yystack[pParser->yyidx].stateno;
 
  if( stateno>YY_SHIFT_MAX || (i = yy_shift_ofst[stateno])==YY_SHIFT_USE_DFLT ){
    return yy_default[stateno];
  }
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
  if( i<0 || i>=YY_SZ_ACTTAB || yy_lookahead[i]!=iLookAhead ){
    if( iLookAhead>0 ){
#ifdef YYFALLBACK
      YYCODETYPE iFallback;            /* Fallback token */
      if( iLookAhead<sizeof(yyFallback)/sizeof(yyFallback[0])
             && (iFallback = yyFallback[iLookAhead])!=0 ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE, "%sFALLBACK %s => %s\n",
             yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[iFallback]);
        }
#endif
        return yy_find_shift_action(pParser, iFallback);
      }
#endif
#ifdef YYWILDCARD
      {
        int j = i - iLookAhead + YYWILDCARD;
        if( j>=0 && j<YY_SZ_ACTTAB && yy_lookahead[j]==YYWILDCARD ){
#ifndef NDEBUG
          if( yyTraceFILE ){
            fprintf(yyTraceFILE, "%sWILDCARD %s => %s\n",
               yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[YYWILDCARD]);
          }
#endif /* NDEBUG */
          return yy_action[j];
        }
      }
#endif /* YYWILDCARD */
    }
    return yy_default[stateno];
  }else{
    return yy_action[i];
  }
}

/*
** Find the appropriate action for a parser given the non-terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
static int yy_find_reduce_action(
  int stateno,              /* Current state number */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
#ifdef YYERRORSYMBOL
  if( stateno>YY_REDUCE_MAX ){
    return yy_default[stateno];
  }
#else
  assert( stateno<=YY_REDUCE_MAX );
#endif
  i = yy_reduce_ofst[stateno];
  assert( i!=YY_REDUCE_USE_DFLT );
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
#ifdef YYERRORSYMBOL
  if( i<0 || i>=YY_SZ_ACTTAB || yy_lookahead[i]!=iLookAhead ){
    return yy_default[stateno];
  }
#else
  assert( i>=0 && i<YY_SZ_ACTTAB );
  assert( yy_lookahead[i]==iLookAhead );
#endif
  return yy_action[i];
}

/*
** The following routine is called if the stack overflows.
*/
static void yyStackOverflow(yyParser *yypParser, YYMINORTYPE *yypMinor){
   XecParseARG_FETCH;
   yypParser->yyidx--;
#ifndef NDEBUG
   if( yyTraceFILE ){
     fprintf(yyTraceFILE,"%sStack Overflow!\n",yyTracePrompt);
   }
#endif
   while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
   /* Here code is inserted which will execute if the parser
   ** stack every overflows */
   XecParseARG_STORE; /* Suppress warning about unused %extra_argument var */
}

/*
** Perform a shift action.
*/
static void yy_shift(
  yyParser *yypParser,          /* The parser to be shifted */
  int yyNewState,               /* The new state to shift in */
  int yyMajor,                  /* The major token to shift in */
  YYMINORTYPE *yypMinor         /* Pointer to the minor token to shift in */
){
  yyStackEntry *yytos;
  yypParser->yyidx++;
#ifdef YYTRACKMAXSTACKDEPTH
  if( yypParser->yyidx>yypParser->yyidxMax ){
    yypParser->yyidxMax = yypParser->yyidx;
  }
#endif
#if YYSTACKDEPTH>0 
  if( yypParser->yyidx>=YYSTACKDEPTH ){
    yyStackOverflow(yypParser, yypMinor);
    return;
  }
#else
  if( yypParser->yyidx>=yypParser->yystksz ){
    yyGrowStack(yypParser);
    if( yypParser->yyidx>=yypParser->yystksz ){
      yyStackOverflow(yypParser, yypMinor);
      return;
    }
  }
#endif
  yytos = &yypParser->yystack[yypParser->yyidx];
  yytos->stateno = (YYACTIONTYPE)yyNewState;
  yytos->major = (YYCODETYPE)yyMajor;
  yytos->minor = *yypMinor;
#ifndef NDEBUG
  if( yyTraceFILE && yypParser->yyidx>0 ){
    int i;
    fprintf(yyTraceFILE,"%sShift %d\n",yyTracePrompt,yyNewState);
    fprintf(yyTraceFILE,"%sStack:",yyTracePrompt);
    for(i=1; i<=yypParser->yyidx; i++)
      fprintf(yyTraceFILE," %s",yyTokenName[yypParser->yystack[i].major]);
    fprintf(yyTraceFILE,"\n");
  }
#endif
}

/* The following table contains information about every rule that
** is used during the reduce.
*/
static const struct {
  YYCODETYPE lhs;         /* Symbol on the left-hand side of the rule */
  unsigned char nrhs;     /* Number of right-hand side symbols in the rule */
} yyRuleInfo[] = {
  { 104, 1 },
  { 106, 1 },
  { 106, 3 },
  { 107, 4 },
  { 109, 3 },
  { 110, 2 },
  { 110, 4 },
  { 111, 0 },
  { 111, 2 },
  { 113, 1 },
  { 113, 1 },
  { 113, 2 },
  { 113, 2 },
  { 113, 2 },
  { 115, 1 },
  { 115, 2 },
  { 114, 3 },
  { 118, 2 },
  { 116, 4 },
  { 117, 2 },
  { 119, 1 },
  { 119, 3 },
  { 120, 3 },
  { 120, 5 },
  { 120, 4 },
  { 120, 3 },
  { 120, 5 },
  { 120, 4 },
  { 123, 4 },
  { 124, 5 },
  { 124, 5 },
  { 125, 4 },
  { 125, 4 },
  { 125, 4 },
  { 125, 4 },
  { 125, 4 },
  { 125, 4 },
  { 126, 3 },
  { 126, 5 },
  { 126, 4 },
  { 126, 3 },
  { 126, 5 },
  { 126, 4 },
  { 126, 3 },
  { 126, 5 },
  { 126, 4 },
  { 126, 3 },
  { 126, 5 },
  { 126, 4 },
  { 126, 3 },
  { 126, 5 },
  { 126, 4 },
  { 112, 1 },
  { 112, 1 },
  { 112, 1 },
  { 112, 1 },
  { 112, 1 },
  { 112, 1 },
  { 112, 1 },
  { 112, 2 },
  { 112, 2 },
  { 127, 1 },
  { 127, 1 },
  { 127, 1 },
  { 127, 1 },
  { 127, 1 },
  { 127, 1 },
  { 128, 1 },
  { 128, 2 },
  { 128, 2 },
  { 129, 1 },
  { 129, 2 },
  { 129, 2 },
  { 129, 2 },
  { 129, 2 },
  { 129, 2 },
  { 129, 2 },
  { 130, 1 },
  { 130, 3 },
  { 130, 3 },
  { 130, 3 },
  { 130, 3 },
  { 131, 1 },
  { 131, 3 },
  { 131, 3 },
  { 132, 1 },
  { 132, 3 },
  { 132, 3 },
  { 132, 3 },
  { 133, 1 },
  { 133, 3 },
  { 134, 1 },
  { 134, 3 },
  { 135, 1 },
  { 135, 3 },
  { 136, 1 },
  { 136, 3 },
  { 137, 1 },
  { 137, 3 },
  { 137, 3 },
  { 137, 3 },
  { 137, 3 },
  { 137, 3 },
  { 137, 3 },
  { 137, 3 },
  { 137, 3 },
  { 137, 3 },
  { 137, 3 },
  { 138, 1 },
  { 138, 3 },
  { 139, 1 },
  { 139, 3 },
  { 140, 1 },
  { 140, 3 },
  { 141, 1 },
  { 141, 5 },
  { 141, 2 },
  { 141, 3 },
  { 141, 3 },
  { 141, 3 },
  { 142, 2 },
  { 142, 3 },
  { 143, 5 },
  { 143, 6 },
  { 143, 6 },
  { 143, 7 },
  { 122, 1 },
  { 122, 2 },
  { 122, 3 },
  { 144, 1 },
  { 144, 3 },
  { 145, 1 },
  { 145, 2 },
  { 145, 2 },
  { 145, 2 },
  { 145, 3 },
  { 145, 3 },
  { 145, 4 },
  { 145, 4 },
  { 145, 4 },
  { 145, 4 },
  { 145, 4 },
  { 145, 4 },
  { 145, 4 },
  { 108, 1 },
  { 108, 1 },
  { 108, 3 },
  { 121, 1 },
  { 121, 3 },
  { 83, 1 },
  { 83, 1 },
  { 83, 1 },
  { 83, 1 },
  { 83, 1 },
  { 83, 1 },
  { 83, 1 },
  { 83, 1 },
  { 83, 1 },
  { 83, 1 },
  { 83, 1 },
  { 83, 1 },
  { 83, 1 },
  { 84, 1 },
  { 84, 3 },
  { 85, 1 },
  { 85, 2 },
  { 85, 1 },
  { 85, 2 },
  { 85, 3 },
  { 86, 3 },
  { 86, 5 },
  { 87, 1 },
  { 87, 2 },
  { 146, 1 },
  { 146, 3 },
  { 147, 1 },
  { 147, 1 },
  { 147, 3 },
  { 148, 1 },
  { 148, 3 },
  { 149, 1 },
  { 149, 1 },
  { 150, 1 },
  { 150, 2 },
  { 150, 2 },
  { 105, 0 },
  { 105, 2 },
  { 151, 3 },
  { 151, 1 },
  { 88, 1 },
  { 153, 3 },
  { 153, 1 },
  { 89, 1 },
  { 152, 1 },
  { 152, 2 },
  { 152, 1 },
  { 152, 1 },
  { 152, 2 },
  { 152, 2 },
  { 152, 5 },
  { 152, 7 },
  { 152, 7 },
  { 152, 5 },
  { 152, 7 },
  { 152, 2 },
  { 152, 2 },
  { 152, 4 },
  { 152, 3 },
  { 152, 3 },
  { 152, 1 },
  { 152, 3 },
  { 152, 3 },
  { 152, 2 },
  { 152, 2 },
  { 152, 2 },
  { 152, 2 },
  { 152, 3 },
  { 152, 2 },
  { 152, 3 },
  { 152, 3 },
  { 90, 1 },
  { 91, 1 },
  { 92, 1 },
  { 93, 1 },
  { 94, 1 },
  { 95, 6 },
  { 95, 6 },
  { 95, 7 },
  { 95, 7 },
  { 96, 8 },
  { 97, 2 },
  { 154, 1 },
  { 154, 3 },
  { 154, 3 },
  { 98, 2 },
  { 99, 3 },
  { 99, 3 },
  { 100, 1 },
  { 101, 5 },
  { 101, 6 },
  { 101, 7 },
  { 102, 1 },
  { 103, 1 },
};

static void yy_accept(yyParser*);  /* Forward Declaration */

/*
** Perform a reduce action and the shift that must immediately
** follow the reduce.
*/
static void yy_reduce(
  yyParser *yypParser,         /* The parser */
  int yyruleno                 /* Number of the rule by which to reduce */
){
  int yygoto;                     /* The next state */
  int yyact;                      /* The next action */
  YYMINORTYPE yygotominor;        /* The LHS of the rule reduced */
  yyStackEntry *yymsp;            /* The top of the parser's stack */
  int yysize;                     /* Amount to pop the stack */
  XecParseARG_FETCH;
  yymsp = &yypParser->yystack[yypParser->yyidx];
#ifndef NDEBUG
  if( yyTraceFILE && yyruleno>=0 
        && yyruleno<(int)(sizeof(yyRuleName)/sizeof(yyRuleName[0])) ){
    fprintf(yyTraceFILE, "%sReduce [%s].\n", yyTracePrompt,
      yyRuleName[yyruleno]);
  }
#endif /* NDEBUG */

  /* Silence complaints from purify about yygotominor being uninitialized
  ** in some cases when it is copied into the stack after the following
  ** switch.  yygotominor is uninitialized when a rule reduces that does
  ** not set the value of its left-hand side nonterminal.  Leaving the
  ** value of the nonterminal uninitialized is utterly harmless as long
  ** as the value is never used.  So really the only thing this code
  ** accomplishes is to quieten purify.  
  **
  ** 2007-01-16:  The wireshark project (www.wireshark.org) reports that
  ** without this code, their parser segfaults.  I'm not sure what there
  ** parser is doing to make this happen.  This is the second bug report
  ** from wireshark this week.  Clearly they are stressing Lemon in ways
  ** that it has not been previously stressed...  (SQLite ticket #2172)
  */
  /*memset(&yygotominor, 0, sizeof(yygotominor));*/
  yygotominor = yyzerominor;


  switch( yyruleno ){
  /* Beginning here are the reduction cases.  A typical example
  ** follows:
  **   case 0:
  **  #line <lineno> <grammarfile>
  **     { ... }           // User supplied code
  **  #line <lineno> <thisfile>
  **     break;
  */
      case 0: /* script ::= stmt_list */
#line 133 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
  yy_destructor(yypParser,105,&yymsp[0].minor);
}
#line 2614 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 1: /* name ::= IDENTIFIER */
#line 144 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy3 = p->alloc< xec_unqual_name >(
                                    yymsp[0].minor.yy0->sloc, yymsp[0].minor.yy0->text );
                }
#line 2622 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 2: /* name ::= name PERIOD IDENTIFIER */
#line 149 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy3 = p->alloc< xec_expr_key >(
                                    yymsp[0].minor.yy0->sloc, yymsp[-2].minor.yy3, yymsp[0].minor.yy0->text );
                  yy_destructor(yypParser,10,&yymsp[-1].minor);
}
#line 2631 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 3: /* proto ::= name LPN expr_list RPN */
#line 155 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy3 = p->alloc< xec_unqual_proto >(
                                    yymsp[-3].minor.yy3->sloc, yymsp[-3].minor.yy3, p->expr_list( yymsp[-1].minor.yy3 ) );
                  yy_destructor(yypParser,8,&yymsp[-2].minor);
  yy_destructor(yypParser,11,&yymsp[0].minor);
}
#line 2641 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 4: /* decl_object ::= object_lbr object_decls RBR */
      case 118: /* expr_nolbr ::= newobj_lbr object_decls RBR */ yytestcase(yyruleno==118);
#line 170 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,111,&yymsp[-1].minor);
  yy_destructor(yypParser,12,&yymsp[0].minor);
}
#line 2650 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 5: /* object_lbr ::= name LBR */
      case 17: /* func_lbr ::= proto LBR */ yytestcase(yyruleno==17);
      case 120: /* newobj_lbr ::= COLON LBR */ yytestcase(yyruleno==120);
      case 121: /* newobj_lbr ::= COLON expr_simple LBR */ yytestcase(yyruleno==121);
#line 174 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,13,&yymsp[0].minor);
}
#line 2660 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 6: /* object_lbr ::= name COLON expr_simple LBR */
#line 177 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,14,&yymsp[-2].minor);
  yy_destructor(yypParser,13,&yymsp[0].minor);
}
#line 2668 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 8: /* object_decls ::= object_decls object_decl */
#line 182 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,111,&yymsp[-1].minor);
}
#line 2675 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 9: /* object_decl ::= decl_object */
      case 10: /* object_decl ::= decl_func */ yytestcase(yyruleno==10);
      case 14: /* decl_proto ::= proto */ yytestcase(yyruleno==14);
      case 20: /* varname_list ::= IDENTIFIER */ yytestcase(yyruleno==20);
      case 185: /* stmt_list ::= */ yytestcase(yyruleno==185);
#line 186 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                }
#line 2685 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 11: /* object_decl ::= decl_proto SEMICOLON */
      case 12: /* object_decl ::= decl_var SEMICOLON */ yytestcase(yyruleno==12);
      case 13: /* object_decl ::= decl_noinit SEMICOLON */ yytestcase(yyruleno==13);
#line 192 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,15,&yymsp[0].minor);
}
#line 2694 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 15: /* decl_proto ::= proto YIELD */
#line 208 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,6,&yymsp[0].minor);
}
#line 2701 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 16: /* decl_func ::= func_lbr stmt_list RBR */
      case 119: /* expr_nolbr ::= newfunc_lbr stmt_list RBR */ yytestcase(yyruleno==119);
#line 214 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,105,&yymsp[-1].minor);
  yy_destructor(yypParser,12,&yymsp[0].minor);
}
#line 2710 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 18: /* decl_var ::= VAR varname_list ASSIGN expr_list */
#line 224 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,16,&yymsp[-3].minor);
  yy_destructor(yypParser,17,&yymsp[-1].minor);
}
#line 2718 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 19: /* decl_noinit ::= VAR varname_list */
#line 228 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,16,&yymsp[-1].minor);
}
#line 2725 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 21: /* varname_list ::= varname_list COMMA IDENTIFIER */
#line 235 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,18,&yymsp[-1].minor);
}
#line 2732 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 22: /* expr_index ::= LPN expr_assign RPN */
#line 249 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    switch ( yymsp[-1].minor.yy3->kind )
                    {
                    case XEC_EXPR_KEY:
                    case XEC_EXPR_INKEY:
                    case XEC_EXPR_CALL:
                    case XEC_EXPR_CALLKEY:
                    case XEC_EXPR_CALLINKEY:
                    case XEC_EXPR_YIELD:
                    case XEC_EXPR_VARARG:
                    case XEC_EXPR_UNPACK:
                    case XEC_EXPR_LIST:
                    case XEC_AST_ASSIGN_LIST:
                        yygotominor.yy3 = p->alloc< xec_expr_mono >( yymsp[-1].minor.yy3->sloc, yymsp[-1].minor.yy3 );
                        break;
                        
                    default:
                        yygotominor.yy3 = yymsp[-1].minor.yy3;
                        break;
                    }
                  yy_destructor(yypParser,8,&yymsp[-2].minor);
  yy_destructor(yypParser,11,&yymsp[0].minor);
}
#line 2759 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 23: /* expr_index ::= name PERIOD LSQ expr_value RSQ */
#line 271 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-4].minor.yy3 = p->expr_name( yymsp[-4].minor.yy3 );
                    yygotominor.yy3 = p->alloc< xec_expr_inkey >( yymsp[-4].minor.yy3->sloc, yymsp[-4].minor.yy3, yymsp[-1].minor.yy3 );
                  yy_destructor(yypParser,10,&yymsp[-3].minor);
  yy_destructor(yypParser,19,&yymsp[-2].minor);
  yy_destructor(yypParser,20,&yymsp[0].minor);
}
#line 2770 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 24: /* expr_index ::= name LSQ expr_value RSQ */
#line 276 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-3].minor.yy3 = p->expr_name( yymsp[-3].minor.yy3 );
                    yygotominor.yy3 = p->alloc< xec_expr_index >( yymsp[-3].minor.yy3->sloc, yymsp[-3].minor.yy3, yymsp[-1].minor.yy3 );
                  yy_destructor(yypParser,19,&yymsp[-2].minor);
  yy_destructor(yypParser,20,&yymsp[0].minor);
}
#line 2780 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 25: /* expr_index ::= expr_index PERIOD IDENTIFIER */
#line 281 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy3 = p->alloc< xec_expr_key >( yymsp[-2].minor.yy3->sloc, yymsp[-2].minor.yy3, yymsp[0].minor.yy0->text );
                    p->destroy( yymsp[0].minor.yy0 );
                  yy_destructor(yypParser,10,&yymsp[-1].minor);
}
#line 2789 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 26: /* expr_index ::= expr_index PERIOD LSQ expr_value RSQ */
#line 286 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy3 = p->alloc< xec_expr_inkey >( yymsp[-4].minor.yy3->sloc, yymsp[-4].minor.yy3, yymsp[-1].minor.yy3 );
                  yy_destructor(yypParser,10,&yymsp[-3].minor);
  yy_destructor(yypParser,19,&yymsp[-2].minor);
  yy_destructor(yypParser,20,&yymsp[0].minor);
}
#line 2799 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 27: /* expr_index ::= expr_index LSQ expr_value RSQ */
#line 290 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy3 = p->alloc< xec_expr_index >( yymsp[-3].minor.yy3->sloc, yymsp[-3].minor.yy3, yymsp[-1].minor.yy3 );
                  yy_destructor(yypParser,19,&yymsp[-2].minor);
  yy_destructor(yypParser,20,&yymsp[0].minor);
}
#line 2808 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 28: /* expr_yield ::= YIELD LPN expr_list RPN */
#line 297 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy3 = p->alloc< xec_expr_yield >(
                                    yymsp[-3].minor.yy0->sloc, p->expr_list( yymsp[-1].minor.yy3 ) );
                    p->destroy( yymsp[-3].minor.yy0 );
                  yy_destructor(yypParser,8,&yymsp[-2].minor);
  yy_destructor(yypParser,11,&yymsp[0].minor);
}
#line 2819 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 29: /* expr_new ::= NEW name LPN expr_list RPN */
#line 305 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-3].minor.yy3 = p->expr_name( yymsp[-3].minor.yy3 );
                    yygotominor.yy3 = p->alloc< xec_new_new >(
                                    yymsp[-4].minor.yy0->sloc, yymsp[-3].minor.yy3, p->expr_list( yymsp[-1].minor.yy3 ) );
                    p->destroy( yymsp[-4].minor.yy0 );
                  yy_destructor(yypParser,8,&yymsp[-2].minor);
  yy_destructor(yypParser,11,&yymsp[0].minor);
}
#line 2831 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 30: /* expr_new ::= NEW expr_index LPN expr_list RPN */
#line 312 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy3 = p->alloc< xec_new_new >(
                                    yymsp[-4].minor.yy0->sloc, yymsp[-3].minor.yy3, p->expr_list( yymsp[-1].minor.yy3 ) );
                    p->destroy( yymsp[-4].minor.yy0 );
                  yy_destructor(yypParser,8,&yymsp[-2].minor);
  yy_destructor(yypParser,11,&yymsp[0].minor);
}
#line 2842 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 31: /* expr_call ::= proto LPN expr_list RPN */
#line 320 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-3].minor.yy3 = p->expr_proto( yymsp[-3].minor.yy3 );
                    yygotominor.yy3 = p->alloc< xec_expr_call >(
                                yymsp[-3].minor.yy3->sloc, yymsp[-3].minor.yy3, p->expr_list( yymsp[-1].minor.yy3 ) );
                  yy_destructor(yypParser,8,&yymsp[-2].minor);
  yy_destructor(yypParser,11,&yymsp[0].minor);
}
#line 2853 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 32: /* expr_call ::= expr_index LPN expr_list RPN */
      case 33: /* expr_call ::= expr_yield LPN expr_list RPN */ yytestcase(yyruleno==33);
      case 34: /* expr_call ::= expr_new LPN expr_list RPN */ yytestcase(yyruleno==34);
      case 35: /* expr_call ::= expr_call LPN expr_list RPN */ yytestcase(yyruleno==35);
      case 36: /* expr_call ::= expr_postfix LPN expr_list RPN */ yytestcase(yyruleno==36);
#line 326 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy3 = p->alloc< xec_expr_call >(
                                yymsp[-3].minor.yy3->sloc, yymsp[-3].minor.yy3, p->expr_list( yymsp[-1].minor.yy3 ) );
                  yy_destructor(yypParser,8,&yymsp[-2].minor);
  yy_destructor(yypParser,11,&yymsp[0].minor);
}
#line 2867 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 37: /* expr_postfix ::= proto PERIOD IDENTIFIER */
#line 353 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-2].minor.yy3 = p->expr_proto( yymsp[-2].minor.yy3 );
                    yygotominor.yy3 = p->alloc< xec_expr_key >(
                             yymsp[-2].minor.yy3->sloc, yymsp[-2].minor.yy3, yymsp[0].minor.yy0->text );
                    p->destroy( yymsp[0].minor.yy0 );
                  yy_destructor(yypParser,10,&yymsp[-1].minor);
}
#line 2878 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 38: /* expr_postfix ::= proto PERIOD LSQ expr_value RSQ */
#line 360 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-4].minor.yy3 = p->expr_proto( yymsp[-4].minor.yy3 );
                    yygotominor.yy3 = p->alloc< xec_expr_inkey >(
                             yymsp[-4].minor.yy3->sloc, yymsp[-4].minor.yy3, yymsp[-1].minor.yy3 );
                  yy_destructor(yypParser,10,&yymsp[-3].minor);
  yy_destructor(yypParser,19,&yymsp[-2].minor);
  yy_destructor(yypParser,20,&yymsp[0].minor);
}
#line 2890 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 39: /* expr_postfix ::= proto LSQ expr_value RSQ */
#line 366 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-3].minor.yy3 = p->expr_proto( yymsp[-3].minor.yy3 );
                    yygotominor.yy3 = p->alloc< xec_expr_index >(
                             yymsp[-3].minor.yy3->sloc, yymsp[-3].minor.yy3, yymsp[-1].minor.yy3 );
                  yy_destructor(yypParser,19,&yymsp[-2].minor);
  yy_destructor(yypParser,20,&yymsp[0].minor);
}
#line 2901 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 40: /* expr_postfix ::= expr_yield PERIOD IDENTIFIER */
      case 43: /* expr_postfix ::= expr_new PERIOD IDENTIFIER */ yytestcase(yyruleno==43);
      case 46: /* expr_postfix ::= expr_call PERIOD IDENTIFIER */ yytestcase(yyruleno==46);
      case 49: /* expr_postfix ::= expr_postfix PERIOD IDENTIFIER */ yytestcase(yyruleno==49);
#line 372 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy3 = p->alloc< xec_expr_key >(
                             yymsp[-2].minor.yy3->sloc, yymsp[-2].minor.yy3, yymsp[0].minor.yy0->text );
                    p->destroy( yymsp[0].minor.yy0 );
                  yy_destructor(yypParser,10,&yymsp[-1].minor);
}
#line 2914 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 41: /* expr_postfix ::= expr_yield PERIOD LSQ expr_value RSQ */
      case 44: /* expr_postfix ::= expr_new PERIOD LSQ expr_value RSQ */ yytestcase(yyruleno==44);
      case 47: /* expr_postfix ::= expr_call PERIOD LSQ expr_value RSQ */ yytestcase(yyruleno==47);
      case 50: /* expr_postfix ::= expr_postfix PERIOD LSQ expr_value RSQ */ yytestcase(yyruleno==50);
#line 378 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy3 = p->alloc< xec_expr_inkey >(
                             yymsp[-4].minor.yy3->sloc, yymsp[-4].minor.yy3, yymsp[-1].minor.yy3 );
                  yy_destructor(yypParser,10,&yymsp[-3].minor);
  yy_destructor(yypParser,19,&yymsp[-2].minor);
  yy_destructor(yypParser,20,&yymsp[0].minor);
}
#line 2928 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 42: /* expr_postfix ::= expr_yield LSQ expr_value RSQ */
      case 45: /* expr_postfix ::= expr_new LSQ expr_value RSQ */ yytestcase(yyruleno==45);
      case 48: /* expr_postfix ::= expr_call LSQ expr_value RSQ */ yytestcase(yyruleno==48);
      case 51: /* expr_postfix ::= expr_postfix LSQ expr_value RSQ */ yytestcase(yyruleno==51);
#line 383 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy3 = p->alloc< xec_expr_index >(
                             yymsp[-3].minor.yy3->sloc, yymsp[-3].minor.yy3, yymsp[-1].minor.yy3 );
                  yy_destructor(yypParser,19,&yymsp[-2].minor);
  yy_destructor(yypParser,20,&yymsp[0].minor);
}
#line 2941 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 52: /* expr_simple ::= name */
#line 442 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy3 = p->expr_name( yymsp[0].minor.yy3 );
                }
#line 2948 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 53: /* expr_simple ::= proto */
#line 446 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy3 = p->expr_proto( yymsp[0].minor.yy3 );
                }
#line 2955 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 54: /* expr_simple ::= expr_index */
      case 55: /* expr_simple ::= expr_yield */ yytestcase(yyruleno==55);
      case 56: /* expr_simple ::= expr_new */ yytestcase(yyruleno==56);
      case 57: /* expr_simple ::= expr_call */ yytestcase(yyruleno==57);
      case 58: /* expr_simple ::= expr_postfix */ yytestcase(yyruleno==58);
      case 61: /* expr_literal ::= expr_simple */ yytestcase(yyruleno==61);
      case 67: /* expr_suffix ::= expr_literal */ yytestcase(yyruleno==67);
      case 70: /* expr_unary ::= expr_suffix */ yytestcase(yyruleno==70);
      case 77: /* expr_mul ::= expr_unary */ yytestcase(yyruleno==77);
      case 82: /* expr_add ::= expr_mul */ yytestcase(yyruleno==82);
      case 85: /* expr_shift ::= expr_add */ yytestcase(yyruleno==85);
      case 89: /* expr_bitand ::= expr_shift */ yytestcase(yyruleno==89);
      case 91: /* expr_bitxor ::= expr_bitand */ yytestcase(yyruleno==91);
      case 93: /* expr_bitor ::= expr_bitxor */ yytestcase(yyruleno==93);
      case 95: /* expr_concat ::= expr_bitor */ yytestcase(yyruleno==95);
      case 97: /* expr_compare ::= expr_concat */ yytestcase(yyruleno==97);
      case 108: /* expr_and ::= expr_compare */ yytestcase(yyruleno==108);
      case 110: /* expr_xor ::= expr_and */ yytestcase(yyruleno==110);
      case 112: /* expr_or ::= expr_xor */ yytestcase(yyruleno==112);
      case 114: /* expr_nolbr ::= expr_or */ yytestcase(yyruleno==114);
      case 126: /* expr_value ::= expr_nolbr */ yytestcase(yyruleno==126);
      case 129: /* expr_lbody ::= expr_value */ yytestcase(yyruleno==129);
      case 144: /* expr_list ::= expr_final */ yytestcase(yyruleno==144);
      case 145: /* expr_list ::= expr_lbody */ yytestcase(yyruleno==145);
      case 147: /* expr_assign ::= expr_list */ yytestcase(yyruleno==147);
      case 173: /* sexpr_lbody ::= expr_nolbr */ yytestcase(yyruleno==173);
      case 175: /* sexpr_list ::= expr_final */ yytestcase(yyruleno==175);
      case 176: /* sexpr_list ::= sexpr_lbody */ yytestcase(yyruleno==176);
      case 178: /* sexpr_assign ::= sexpr_list */ yytestcase(yyruleno==178);
      case 180: /* cond_using ::= expr_assign */ yytestcase(yyruleno==180);
      case 181: /* cond_using ::= decl_var */ yytestcase(yyruleno==181);
      case 182: /* condition ::= cond_using */ yytestcase(yyruleno==182);
      case 188: /* stmt ::= stmt_common */ yytestcase(yyruleno==188);
      case 191: /* stmt_reuse ::= stmt_common */ yytestcase(yyruleno==191);
      case 195: /* stmt_common ::= decl_object */ yytestcase(yyruleno==195);
      case 196: /* stmt_common ::= decl_func */ yytestcase(yyruleno==196);
      case 209: /* stmt_common ::= stmt_try */ yytestcase(yyruleno==209);
#line 450 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy3 = yymsp[0].minor.yy3;
                }
#line 2998 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 59: /* expr_simple ::= proto YIELD */
#line 470 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy3 = p->expr_proto( yymsp[-1].minor.yy3 );
                    assert( yymsp[-1].minor.yy3->kind == XEC_EXPR_CALL );
                    ( (xec_expr_call*)yymsp[-1].minor.yy3 )->yieldcall = true;
                    yygotominor.yy3 = yymsp[-1].minor.yy3;
                  yy_destructor(yypParser,6,&yymsp[0].minor);
}
#line 3009 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 60: /* expr_simple ::= expr_call YIELD */
#line 477 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    assert( yymsp[-1].minor.yy3->kind == XEC_EXPR_CALL );
                    ( (xec_expr_call*)yymsp[-1].minor.yy3 )->yieldcall = true;
                    yygotominor.yy3 = yymsp[-1].minor.yy3;
                  yy_destructor(yypParser,6,&yymsp[0].minor);
}
#line 3019 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 62: /* expr_literal ::= NULL */
#line 488 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy3 = p->alloc< xec_expr_null >( yymsp[0].minor.yy0->sloc );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3027 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 63: /* expr_literal ::= TRUE */
#line 493 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy3 = p->alloc< xec_expr_bool >( yymsp[0].minor.yy0->sloc, true );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3035 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 64: /* expr_literal ::= FALSE */
#line 498 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy3 = p->alloc< xec_expr_bool >( yymsp[0].minor.yy0->sloc, false );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3043 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 65: /* expr_literal ::= NUMBER */
#line 503 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    double number = p->parse_number( yymsp[0].minor.yy0 );
                    yygotominor.yy3 = p->alloc< xec_expr_number >( yymsp[0].minor.yy0->sloc, number );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3052 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 66: /* expr_literal ::= STRING */
#line 509 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy3 = p->alloc< xec_expr_string >(
                            yymsp[0].minor.yy0->sloc, yymsp[0].minor.yy0->text, yymsp[0].minor.yy0->size );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3061 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 68: /* expr_suffix ::= expr_suffix INCREMENT */
      case 69: /* expr_suffix ::= expr_suffix DECREMENT */ yytestcase(yyruleno==69);
#line 520 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy3 = p->expr_lvalue( yymsp[-1].minor.yy3 );
                    yygotominor.yy3 = p->alloc< xec_expr_postop >(
                             yymsp[-1].minor.yy3->sloc, yymsp[0].minor.yy0->kind, yymsp[-1].minor.yy3 );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3072 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 71: /* expr_unary ::= PLUS expr_unary */
      case 72: /* expr_unary ::= MINUS expr_unary */ yytestcase(yyruleno==72);
      case 73: /* expr_unary ::= XMARK expr_unary */ yytestcase(yyruleno==73);
      case 74: /* expr_unary ::= TILDE expr_unary */ yytestcase(yyruleno==74);
#line 539 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy3 = p->alloc< xec_expr_unary >(
                             yymsp[-1].minor.yy0->sloc, yymsp[-1].minor.yy0->kind, yymsp[0].minor.yy3 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 3084 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 75: /* expr_unary ::= INCREMENT expr_unary */
      case 76: /* expr_unary ::= DECREMENT expr_unary */ yytestcase(yyruleno==76);
#line 563 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[0].minor.yy3 = p->expr_lvalue( yymsp[0].minor.yy3 );
                    yygotominor.yy3 = p->alloc< xec_expr_preop >(
                             yymsp[-1].minor.yy0->sloc, yymsp[-1].minor.yy0->kind, yymsp[0].minor.yy3 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 3095 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 78: /* expr_mul ::= expr_mul ASTERISK expr_unary */
      case 79: /* expr_mul ::= expr_mul SOLIDUS expr_unary */ yytestcase(yyruleno==79);
      case 80: /* expr_mul ::= expr_mul PERCENT expr_unary */ yytestcase(yyruleno==80);
      case 81: /* expr_mul ::= expr_mul TILDE expr_unary */ yytestcase(yyruleno==81);
      case 83: /* expr_add ::= expr_add PLUS expr_mul */ yytestcase(yyruleno==83);
      case 84: /* expr_add ::= expr_add MINUS expr_mul */ yytestcase(yyruleno==84);
      case 86: /* expr_shift ::= expr_shift LSHIFT expr_add */ yytestcase(yyruleno==86);
      case 87: /* expr_shift ::= expr_shift RSHIFT expr_add */ yytestcase(yyruleno==87);
      case 88: /* expr_shift ::= expr_shift URSHIFT expr_add */ yytestcase(yyruleno==88);
      case 90: /* expr_bitand ::= expr_bitand AMPERSAND expr_shift */ yytestcase(yyruleno==90);
      case 92: /* expr_bitxor ::= expr_bitxor CARET expr_bitand */ yytestcase(yyruleno==92);
      case 94: /* expr_bitor ::= expr_bitor VBAR expr_bitxor */ yytestcase(yyruleno==94);
      case 96: /* expr_concat ::= expr_concat CONCATENATE expr_bitor */ yytestcase(yyruleno==96);
#line 582 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy3 = p->alloc< xec_expr_binary >(
                                    yymsp[-2].minor.yy3->sloc, yymsp[-1].minor.yy0->kind, yymsp[-2].minor.yy3, yymsp[0].minor.yy3 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 3116 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 98: /* expr_compare ::= expr_compare EQUAL expr_concat */
      case 99: /* expr_compare ::= expr_compare NOTEQUAL expr_concat */ yytestcase(yyruleno==99);
      case 100: /* expr_compare ::= expr_compare LESS expr_concat */ yytestcase(yyruleno==100);
      case 101: /* expr_compare ::= expr_compare GREATER expr_concat */ yytestcase(yyruleno==101);
      case 102: /* expr_compare ::= expr_compare LESSEQUAL expr_concat */ yytestcase(yyruleno==102);
      case 103: /* expr_compare ::= expr_compare GREATEREQUAL expr_concat */ yytestcase(yyruleno==103);
      case 104: /* expr_compare ::= expr_compare IN expr_concat */ yytestcase(yyruleno==104);
      case 105: /* expr_compare ::= expr_compare NOTIN expr_concat */ yytestcase(yyruleno==105);
      case 106: /* expr_compare ::= expr_compare IS expr_concat */ yytestcase(yyruleno==106);
      case 107: /* expr_compare ::= expr_compare NOTIS expr_concat */ yytestcase(yyruleno==107);
#line 695 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy3 = p->expr_compare( yymsp[-1].minor.yy0, yymsp[-2].minor.yy3, yymsp[0].minor.yy3 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 3133 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 109: /* expr_and ::= expr_and LOGICAND expr_compare */
      case 111: /* expr_xor ::= expr_xor LOGICXOR expr_and */ yytestcase(yyruleno==111);
      case 113: /* expr_or ::= expr_or LOGICOR expr_xor */ yytestcase(yyruleno==113);
#line 751 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy3 = p->alloc< xec_expr_logical >(
                                    yymsp[-2].minor.yy3->sloc, yymsp[-1].minor.yy0->kind, yymsp[-2].minor.yy3, yymsp[0].minor.yy3 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 3144 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 115: /* expr_nolbr ::= expr_or QMARK expr_value COLON expr_value */
#line 786 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy3 = p->alloc< xec_expr_qmark >(
                            yymsp[-4].minor.yy3->sloc, yymsp[-4].minor.yy3, yymsp[-2].minor.yy3, yymsp[0].minor.yy3 );
                  yy_destructor(yypParser,56,&yymsp[-3].minor);
  yy_destructor(yypParser,14,&yymsp[-1].minor);
}
#line 3154 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 116: /* expr_nolbr ::= LSQ RSQ */
#line 791 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy3 = p->alloc< xec_new_list >( yymsp[-1].minor.yy0->sloc );
                    p->destroy( yymsp[-1].minor.yy0 );
                  yy_destructor(yypParser,20,&yymsp[0].minor);
}
#line 3163 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 117: /* expr_nolbr ::= LSQ value_list RSQ */
#line 796 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy3 = yymsp[-1].minor.yy187;
                    yygotominor.yy3->sloc = yymsp[-2].minor.yy0->sloc;
                    p->destroy( yymsp[-2].minor.yy0 );
                  yy_destructor(yypParser,20,&yymsp[0].minor);
}
#line 3173 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 122: /* newfunc_lbr ::= QMARK LPN expr_list RPN LBR */
#line 816 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,8,&yymsp[-3].minor);
  yy_destructor(yypParser,11,&yymsp[-1].minor);
  yy_destructor(yypParser,13,&yymsp[0].minor);
}
#line 3182 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 123: /* newfunc_lbr ::= PERIOD QMARK LPN expr_list RPN LBR */
#line 819 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,56,&yymsp[-4].minor);
  yy_destructor(yypParser,8,&yymsp[-3].minor);
  yy_destructor(yypParser,11,&yymsp[-1].minor);
  yy_destructor(yypParser,13,&yymsp[0].minor);
}
#line 3192 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 124: /* newfunc_lbr ::= QMARK LPN expr_list RPN YIELD LBR */
#line 822 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,8,&yymsp[-4].minor);
  yy_destructor(yypParser,11,&yymsp[-2].minor);
  yy_destructor(yypParser,6,&yymsp[-1].minor);
  yy_destructor(yypParser,13,&yymsp[0].minor);
}
#line 3202 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 125: /* newfunc_lbr ::= PERIOD QMARK LPN expr_list RPN YIELD LBR */
#line 825 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,56,&yymsp[-5].minor);
  yy_destructor(yypParser,8,&yymsp[-4].minor);
  yy_destructor(yypParser,11,&yymsp[-2].minor);
  yy_destructor(yypParser,6,&yymsp[-1].minor);
  yy_destructor(yypParser,13,&yymsp[0].minor);
}
#line 3213 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 127: /* expr_value ::= LBR RBR */
#line 835 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy3 = p->alloc< xec_new_table >( yymsp[-1].minor.yy0->sloc );
                    p->destroy( yymsp[-1].minor.yy0 );
                  yy_destructor(yypParser,12,&yymsp[0].minor);
}
#line 3222 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 128: /* expr_value ::= LBR keyval_list RBR */
#line 840 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy3 = yymsp[-1].minor.yy41;
                    yygotominor.yy3->sloc = yymsp[-2].minor.yy0->sloc;
                    p->destroy( yymsp[-2].minor.yy0 );
                  yy_destructor(yypParser,12,&yymsp[0].minor);
}
#line 3232 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 130: /* expr_lbody ::= expr_lbody COMMA expr_value */
      case 174: /* sexpr_lbody ::= sexpr_lbody COMMA expr_value */ yytestcase(yyruleno==174);
#line 851 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy3 = p->expr_append( yymsp[-2].minor.yy3, yymsp[0].minor.yy3 );
                  yy_destructor(yypParser,18,&yymsp[-1].minor);
}
#line 3241 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 131: /* expr_final ::= ELLIPSIS */
#line 857 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy3 = p->alloc< xec_expr_vararg >( yymsp[0].minor.yy0->sloc );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3249 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 132: /* expr_final ::= proto ELLIPSIS */
#line 862 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy3 = p->expr_proto( yymsp[-1].minor.yy3 );
                    assert( yymsp[-1].minor.yy3->kind == XEC_EXPR_CALL );
                    ( (xec_expr_call*)yymsp[-1].minor.yy3 )->unpack = true;
                    yygotominor.yy3 = yymsp[-1].minor.yy3;
                  yy_destructor(yypParser,57,&yymsp[0].minor);
}
#line 3260 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 133: /* expr_final ::= expr_call ELLIPSIS */
#line 869 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    assert( yymsp[-1].minor.yy3->kind == XEC_EXPR_CALL );
                    ( (xec_expr_call*)yymsp[-1].minor.yy3 )->unpack = true;
                    yygotominor.yy3 = yymsp[-1].minor.yy3;
                  yy_destructor(yypParser,57,&yymsp[0].minor);
}
#line 3270 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 134: /* expr_final ::= expr_yield ELLIPSIS */
#line 875 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    assert( yymsp[-1].minor.yy3->kind == XEC_EXPR_YIELD );
                    ( (xec_expr_yield*)yymsp[-1].minor.yy3 )->unpack = true;
                    yygotominor.yy3 = yymsp[-1].minor.yy3;
                  yy_destructor(yypParser,57,&yymsp[0].minor);
}
#line 3280 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 135: /* expr_final ::= proto YIELD ELLIPSIS */
#line 881 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-2].minor.yy3 = p->expr_proto( yymsp[-2].minor.yy3 );
                    assert( yymsp[-2].minor.yy3->kind == XEC_EXPR_CALL );
                    ( (xec_expr_call*)yymsp[-2].minor.yy3 )->yieldcall = true;
                    ( (xec_expr_call*)yymsp[-2].minor.yy3 )->unpack = true;
                    yygotominor.yy3 = yymsp[-2].minor.yy3;
                  yy_destructor(yypParser,6,&yymsp[-1].minor);
  yy_destructor(yypParser,57,&yymsp[0].minor);
}
#line 3293 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 136: /* expr_final ::= expr_call YIELD ELLIPSIS */
#line 889 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    assert( yymsp[-2].minor.yy3->kind == XEC_EXPR_CALL );
                    ( (xec_expr_call*)yymsp[-2].minor.yy3 )->yieldcall = true;
                    ( (xec_expr_call*)yymsp[-2].minor.yy3 )->unpack = true;
                    yygotominor.yy3 = yymsp[-2].minor.yy3;
                  yy_destructor(yypParser,6,&yymsp[-1].minor);
  yy_destructor(yypParser,57,&yymsp[0].minor);
}
#line 3305 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 137: /* expr_final ::= name LSQ RSQ ELLIPSIS */
#line 896 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-3].minor.yy3 = p->expr_name( yymsp[-3].minor.yy3 );
                    yygotominor.yy3 = p->alloc< xec_expr_unpack >( yymsp[-3].minor.yy3->sloc, yymsp[-3].minor.yy3 );
                  yy_destructor(yypParser,19,&yymsp[-2].minor);
  yy_destructor(yypParser,20,&yymsp[-1].minor);
  yy_destructor(yypParser,57,&yymsp[0].minor);
}
#line 3316 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 138: /* expr_final ::= proto LSQ RSQ ELLIPSIS */
#line 901 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-3].minor.yy3 = p->expr_proto( yymsp[-3].minor.yy3 );
                    yygotominor.yy3 = p->alloc< xec_expr_unpack >( yymsp[-3].minor.yy3->sloc, yymsp[-3].minor.yy3 );
                  yy_destructor(yypParser,19,&yymsp[-2].minor);
  yy_destructor(yypParser,20,&yymsp[-1].minor);
  yy_destructor(yypParser,57,&yymsp[0].minor);
}
#line 3327 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 139: /* expr_final ::= expr_index LSQ RSQ ELLIPSIS */
      case 140: /* expr_final ::= expr_yield LSQ RSQ ELLIPSIS */ yytestcase(yyruleno==140);
      case 141: /* expr_final ::= expr_new LSQ RSQ ELLIPSIS */ yytestcase(yyruleno==141);
      case 142: /* expr_final ::= expr_call LSQ RSQ ELLIPSIS */ yytestcase(yyruleno==142);
      case 143: /* expr_final ::= expr_postfix LSQ RSQ ELLIPSIS */ yytestcase(yyruleno==143);
#line 906 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy3 = p->alloc< xec_expr_unpack >( yymsp[-3].minor.yy3->sloc, yymsp[-3].minor.yy3 );
                  yy_destructor(yypParser,19,&yymsp[-2].minor);
  yy_destructor(yypParser,20,&yymsp[-1].minor);
  yy_destructor(yypParser,57,&yymsp[0].minor);
}
#line 3341 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 146: /* expr_list ::= expr_lbody COMMA expr_final */
      case 177: /* sexpr_list ::= sexpr_lbody COMMA expr_final */ yytestcase(yyruleno==177);
#line 935 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy3 = p->expr_final( yymsp[-2].minor.yy3, yymsp[0].minor.yy3 );
                  yy_destructor(yypParser,18,&yymsp[-1].minor);
}
#line 3350 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 148: /* expr_assign ::= expr_lbody assign_op expr_assign */
      case 179: /* sexpr_assign ::= sexpr_lbody assign_op expr_assign */ yytestcase(yyruleno==179);
#line 944 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy3 = p->expr_assign( yymsp[-1].minor.yy163, yymsp[-2].minor.yy3, yymsp[0].minor.yy3 );
                    p->destroy( yymsp[-1].minor.yy163 );
                }
#line 3359 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 149: /* assign_op ::= ASSIGN */
      case 150: /* assign_op ::= MULASSIGN */ yytestcase(yyruleno==150);
      case 151: /* assign_op ::= DIVASSIGN */ yytestcase(yyruleno==151);
      case 152: /* assign_op ::= MODASSIGN */ yytestcase(yyruleno==152);
      case 153: /* assign_op ::= INTDIVASSIGN */ yytestcase(yyruleno==153);
      case 154: /* assign_op ::= ADDASSIGN */ yytestcase(yyruleno==154);
      case 155: /* assign_op ::= SUBASSIGN */ yytestcase(yyruleno==155);
      case 156: /* assign_op ::= LSHIFTASSIGN */ yytestcase(yyruleno==156);
      case 157: /* assign_op ::= RSHIFTASSIGN */ yytestcase(yyruleno==157);
      case 158: /* assign_op ::= URSHIFTASSIGN */ yytestcase(yyruleno==158);
      case 159: /* assign_op ::= BITANDASSIGN */ yytestcase(yyruleno==159);
      case 160: /* assign_op ::= BITXORASSIGN */ yytestcase(yyruleno==160);
      case 161: /* assign_op ::= BITORASSIGN */ yytestcase(yyruleno==161);
      case 241: /* token_yield ::= YIELD */ yytestcase(yyruleno==241);
      case 242: /* token_using ::= USING */ yytestcase(yyruleno==242);
#line 951 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy163 = yymsp[0].minor.yy0;
                }
#line 3380 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 162: /* value_lbody ::= expr_value */
#line 1005 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy187 = p->alloc< xec_new_list >( -1 );
                    yygotominor.yy187->values.push_back( yymsp[0].minor.yy3 );
                }
#line 3388 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 163: /* value_lbody ::= value_lbody COMMA expr_value */
#line 1010 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy187 = yymsp[-2].minor.yy187;
                    yygotominor.yy187->values.push_back( yymsp[0].minor.yy3 );
                  yy_destructor(yypParser,18,&yymsp[-1].minor);
}
#line 3397 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 164: /* value_list ::= expr_final */
#line 1016 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy187 = p->alloc< xec_new_list >( -1 );
                    yygotominor.yy187->unpack = yymsp[0].minor.yy3;
                }
#line 3405 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 165: /* value_list ::= expr_final COMMA */
#line 1021 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy187 = p->alloc< xec_new_list >( -1 );
                    yygotominor.yy187->unpack = yymsp[-1].minor.yy3;
                  yy_destructor(yypParser,18,&yymsp[0].minor);
}
#line 3414 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 166: /* value_list ::= value_lbody */
#line 1026 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy187 = yymsp[0].minor.yy187;
                }
#line 3421 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 167: /* value_list ::= value_lbody COMMA */
#line 1030 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy187 = yymsp[-1].minor.yy187;
                  yy_destructor(yypParser,18,&yymsp[0].minor);
}
#line 3429 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 168: /* value_list ::= value_lbody COMMA expr_final */
#line 1034 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy187 = yymsp[-2].minor.yy187;
                    yygotominor.yy187->unpack = yymsp[0].minor.yy3;
                  yy_destructor(yypParser,18,&yymsp[-1].minor);
}
#line 3438 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 169: /* keyval_lbody ::= expr_value COLON expr_value */
#line 1041 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy41 = new xec_new_table( -1 );
                    yygotominor.yy41->elements.emplace_back( yymsp[-2].minor.yy3, yymsp[0].minor.yy3 );
                  yy_destructor(yypParser,14,&yymsp[-1].minor);
}
#line 3447 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 170: /* keyval_lbody ::= keyval_lbody COMMA expr_value COLON expr_value */
#line 1047 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy41 = yymsp[-4].minor.yy41;
                    yygotominor.yy41->elements.emplace_back( yymsp[-2].minor.yy3, yymsp[0].minor.yy3 );
                  yy_destructor(yypParser,18,&yymsp[-3].minor);
  yy_destructor(yypParser,14,&yymsp[-1].minor);
}
#line 3457 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 171: /* keyval_list ::= keyval_lbody */
#line 1053 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy41 = yymsp[0].minor.yy41;
                }
#line 3464 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 172: /* keyval_list ::= keyval_lbody COMMA */
#line 1057 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy41 = yymsp[-1].minor.yy41;
                  yy_destructor(yypParser,18,&yymsp[0].minor);
}
#line 3472 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 183: /* condition ::= USING expr_assign */
      case 184: /* condition ::= USING decl_var */ yytestcase(yyruleno==184);
#line 1123 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,7,&yymsp[-1].minor);
}
#line 3480 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 186: /* stmt_list ::= stmt_list stmt */
#line 1136 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    p->statement( yymsp[0].minor.yy3 );
                  yy_destructor(yypParser,105,&yymsp[-1].minor);
}
#line 3488 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 187: /* stmt ::= stmt_lbr stmt_list RBR */
#line 1143 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy3 = yymsp[-2].minor.yy286;
                    p->close_scope( yymsp[-2].minor.yy286->scope );
                  yy_destructor(yypParser,105,&yymsp[-1].minor);
  yy_destructor(yypParser,12,&yymsp[0].minor);
}
#line 3498 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 189: /* stmt_lbr ::= LBR */
#line 1153 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy286 = p->alloc< xec_stmt_block >( yymsp[0].minor.yy0->sloc );
                    yygotominor.yy286->scope = p->block_scope( yygotominor.yy286 );
                    yygotominor.yy286->scope->block = yygotominor.yy286;
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3508 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 190: /* stmt_reuse ::= stmt_lbr_ru stmt_list RBR */
#line 1163 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy3 = yymsp[-2].minor.yy286;
                  yy_destructor(yypParser,105,&yymsp[-1].minor);
  yy_destructor(yypParser,12,&yymsp[0].minor);
}
#line 3517 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 192: /* stmt_lbr_ru ::= LBR */
#line 1172 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy286 = p->alloc< xec_stmt_block >( yymsp[0].minor.yy0->sloc );
                    yygotominor.yy286->scope = p->get_scope();
                    yygotominor.yy286->scope->block = yygotominor.yy286;
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3527 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 193: /* stmt_common ::= SEMICOLON */
#line 1183 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy3 = nullptr;
                  yy_destructor(yypParser,15,&yymsp[0].minor);
}
#line 3535 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 194: /* stmt_common ::= sexpr_assign SEMICOLON */
      case 197: /* stmt_common ::= decl_var SEMICOLON */ yytestcase(yyruleno==197);
      case 198: /* stmt_common ::= decl_noinit SEMICOLON */ yytestcase(yyruleno==198);
#line 1187 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy3 = yymsp[-1].minor.yy3;
                  yy_destructor(yypParser,15,&yymsp[0].minor);
}
#line 3545 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 199: /* stmt_common ::= stmt_if LPN condition RPN stmt */
#line 1207 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-4].minor.yy226->condition = yymsp[-2].minor.yy3;
                    yymsp[-4].minor.yy226->iftrue    = p->stmt_nodecl( yymsp[0].minor.yy3 );
                    p->close_scope( yymsp[-4].minor.yy226->scope );
                    yygotominor.yy3 = yymsp[-4].minor.yy226;
                  yy_destructor(yypParser,8,&yymsp[-3].minor);
  yy_destructor(yypParser,11,&yymsp[-1].minor);
}
#line 3557 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 200: /* stmt_common ::= stmt_if LPN condition RPN stmt ELSE stmt */
#line 1215 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-6].minor.yy226->condition = yymsp[-4].minor.yy3;
                    yymsp[-6].minor.yy226->iftrue    = p->stmt_nodecl( yymsp[-2].minor.yy3 );
                    yymsp[-6].minor.yy226->iffalse   = p->stmt_nodecl( yymsp[0].minor.yy3 );
                    p->close_scope( yymsp[-6].minor.yy226->scope );
                    yygotominor.yy3 = yymsp[-6].minor.yy226;
                  yy_destructor(yypParser,8,&yymsp[-5].minor);
  yy_destructor(yypParser,11,&yymsp[-3].minor);
  yy_destructor(yypParser,2,&yymsp[-1].minor);
}
#line 3571 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 201: /* stmt_common ::= stmt_switch LPN condition RPN stmt_lbr_ru stmt_list RPN */
#line 1224 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-6].minor.yy159->value     = yymsp[-4].minor.yy3;
                    yymsp[-6].minor.yy159->body      = yymsp[-2].minor.yy286;
                    p->close_scope( yymsp[-6].minor.yy159->scope );
                    yygotominor.yy3 = yymsp[-6].minor.yy159;
                  yy_destructor(yypParser,8,&yymsp[-5].minor);
  yy_destructor(yypParser,11,&yymsp[-3].minor);
  yy_destructor(yypParser,105,&yymsp[-1].minor);
  yy_destructor(yypParser,11,&yymsp[0].minor);
}
#line 3585 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 202: /* stmt_common ::= stmt_while LPN condition RPN stmt_reuse */
#line 1232 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-4].minor.yy304->condition = yymsp[-2].minor.yy3;
                    yymsp[-4].minor.yy304->body      = p->stmt_nodecl( yymsp[0].minor.yy3 );
                    p->close_scope( yymsp[-4].minor.yy304->scope );
                    yygotominor.yy3 = yymsp[-4].minor.yy304;
                  yy_destructor(yypParser,8,&yymsp[-3].minor);
  yy_destructor(yypParser,11,&yymsp[-1].minor);
}
#line 3597 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 203: /* stmt_common ::= stmt_do stmt_reuse WHILE LPN expr_assign RPN SEMICOLON */
#line 1240 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-6].minor.yy298->body      = p->stmt_nodecl( yymsp[-5].minor.yy3 );
                    yymsp[-6].minor.yy298->condition = yymsp[-2].minor.yy3;
                    p->close_scope( yymsp[-6].minor.yy298->scope );
                    yygotominor.yy3 = yymsp[-6].minor.yy298;
                  yy_destructor(yypParser,70,&yymsp[-4].minor);
  yy_destructor(yypParser,8,&yymsp[-3].minor);
  yy_destructor(yypParser,11,&yymsp[-1].minor);
  yy_destructor(yypParser,15,&yymsp[0].minor);
}
#line 3611 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 204: /* stmt_common ::= stmt_foreach stmt_reuse */
#line 1247 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy153->body      = yymsp[0].minor.yy3;
                    p->close_scope( yymsp[-1].minor.yy153->scope );
                    yygotominor.yy3 = yymsp[-1].minor.yy153;
                }
#line 3620 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 205: /* stmt_common ::= stmt_for stmt_reuse */
#line 1253 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy256->body      = yymsp[0].minor.yy3;
                    p->close_scope( yymsp[-1].minor.yy256->scope );
                    yygotominor.yy3 = yymsp[-1].minor.yy256;
                }
#line 3629 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 206: /* stmt_common ::= stmt_uscope cond_using RPN stmt_reuse */
#line 1259 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-3].minor.yy2->uvalue    = yymsp[-2].minor.yy3;
                    yymsp[-3].minor.yy2->body      = p->stmt_nodecl( yymsp[0].minor.yy3 );
                    p->close_scope( yymsp[-3].minor.yy2->scope );
                    yygotominor.yy3 = yymsp[-3].minor.yy2;
                  yy_destructor(yypParser,11,&yymsp[-1].minor);
}
#line 3640 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 207: /* stmt_common ::= token_using expr_assign SEMICOLON */
      case 208: /* stmt_common ::= token_using decl_var SEMICOLON */ yytestcase(yyruleno==208);
#line 1266 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy3 = p->alloc< xec_stmt_using >( yymsp[-2].minor.yy163->sloc, yymsp[-1].minor.yy3 );
                    p->destroy( yymsp[-2].minor.yy163 );
                  yy_destructor(yypParser,15,&yymsp[0].minor);
}
#line 3650 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 210: /* stmt_common ::= DELETE expr_lbody SEMICOLON */
#line 1280 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    xec_stmt_delete* s;
                    yygotominor.yy3 = s = p->alloc< xec_stmt_delete >( yymsp[-2].minor.yy0->sloc );
                    p->expr_delete_list( yymsp[-1].minor.yy3, &s->lvalues );
                    p->destroy( yymsp[-2].minor.yy0 );
                  yy_destructor(yypParser,15,&yymsp[0].minor);
}
#line 3661 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 211: /* stmt_common ::= CASE expr_value COLON */
#line 1287 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy3 = p->alloc< xec_stmt_case >( yymsp[-2].minor.yy0->sloc, yymsp[-1].minor.yy3 );
                    p->destroy( yymsp[-2].minor.yy0 );
                  yy_destructor(yypParser,14,&yymsp[0].minor);
}
#line 3670 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 212: /* stmt_common ::= DEFAULT COLON */
#line 1292 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy3 = p->alloc< xec_stmt_case >( yymsp[-1].minor.yy0->sloc, nullptr );
                    p->destroy( yymsp[-1].minor.yy0 );
                  yy_destructor(yypParser,14,&yymsp[0].minor);
}
#line 3679 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 213: /* stmt_common ::= CONTINUE SEMICOLON */
#line 1297 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    xec_ast_node* target = p->get_continue_target();
                    yygotominor.yy3 = p->alloc< xec_stmt_continue >( yymsp[-1].minor.yy0->sloc, target );
                    p->destroy( yymsp[-1].minor.yy0 );
                  yy_destructor(yypParser,15,&yymsp[0].minor);
}
#line 3689 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 214: /* stmt_common ::= BREAK SEMICOLON */
#line 1303 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    xec_ast_node* target = p->get_break_target();
                    yygotominor.yy3 = p->alloc< xec_stmt_break >( yymsp[-1].minor.yy0->sloc, target );
                    p->destroy( yymsp[-1].minor.yy0 );
                  yy_destructor(yypParser,15,&yymsp[0].minor);
}
#line 3699 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 215: /* stmt_common ::= RETURN SEMICOLON */
#line 1309 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    xec_expr_list* vals =
                                p->alloc< xec_expr_list >( yymsp[-1].minor.yy0->sloc );
                    yygotominor.yy3 = p->alloc< xec_stmt_return >( yymsp[-1].minor.yy0->sloc, vals );
                    p->destroy( yymsp[-1].minor.yy0 );
                  yy_destructor(yypParser,15,&yymsp[0].minor);
}
#line 3710 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 216: /* stmt_common ::= RETURN expr_list SEMICOLON */
#line 1316 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy3 = p->alloc< xec_stmt_return >(
                                    yymsp[-2].minor.yy0->sloc, p->expr_list( yymsp[-1].minor.yy3 ) );
                    p->destroy( yymsp[-2].minor.yy0 );
                  yy_destructor(yypParser,15,&yymsp[0].minor);
}
#line 3720 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 217: /* stmt_common ::= token_yield SEMICOLON */
#line 1322 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    xec_expr_list* args =
                                p->alloc< xec_expr_list >( yymsp[-1].minor.yy163->sloc );
                    yygotominor.yy3 = p->alloc< xec_expr_yield >( yymsp[-1].minor.yy163->sloc, args );
                    p->destroy( yymsp[-1].minor.yy163 );
                  yy_destructor(yypParser,15,&yymsp[0].minor);
}
#line 3731 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 218: /* stmt_common ::= token_yield expr_list SEMICOLON */
#line 1329 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy3 = p->alloc< xec_expr_yield >(
                                    yymsp[-2].minor.yy163->sloc, p->expr_list( yymsp[-1].minor.yy3 ) );
                    p->destroy( yymsp[-2].minor.yy163 );
                  yy_destructor(yypParser,15,&yymsp[0].minor);
}
#line 3741 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 219: /* stmt_common ::= THROW expr_value SEMICOLON */
#line 1335 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy3 = p->alloc< xec_stmt_throw >( yymsp[-2].minor.yy0->sloc, yymsp[-1].minor.yy3 );
                    p->destroy( yymsp[-2].minor.yy0 );
                  yy_destructor(yypParser,15,&yymsp[0].minor);
}
#line 3750 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 220: /* stmt_if ::= IF */
#line 1344 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy226 = p->alloc< xec_stmt_if >( yymsp[0].minor.yy0->sloc );
                    yygotominor.yy226->scope = p->block_scope( yygotominor.yy226 );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3759 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 221: /* stmt_switch ::= SWITCH */
#line 1351 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy159 = p->alloc< xec_stmt_switch >( yymsp[0].minor.yy0->sloc );
                    yygotominor.yy159->scope = p->block_scope( yygotominor.yy159 );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3768 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 222: /* stmt_while ::= WHILE */
#line 1358 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy304 = p->alloc< xec_stmt_while >( yymsp[0].minor.yy0->sloc );
                    yygotominor.yy304->scope = p->block_scope( yygotominor.yy304 );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3777 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 223: /* stmt_do ::= DO */
#line 1365 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy298 = p->alloc< xec_stmt_do >( yymsp[0].minor.yy0->sloc );
                    yygotominor.yy298->scope = p->block_scope( yygotominor.yy298 );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3786 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 224: /* scope_for ::= FOR */
#line 1372 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    // open scope before we know the kind of statement.
                    yygotominor.yy222 = make_token_scope( yymsp[0].minor.yy0, p->block_scope( nullptr ) );
                }
#line 3794 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 225: /* stmt_foreach ::= scope_for LPN expr_lbody COLON expr_value RPN */
#line 1379 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy153 = p->alloc< xec_stmt_foreach >( yymsp[-5].minor.yy222.token->sloc );
                    yymsp[-5].minor.yy222.scope->node = yygotominor.yy153;
                    yygotominor.yy153->scope    = yymsp[-5].minor.yy222.scope;
                    p->expr_lvalue_list( yymsp[-3].minor.yy3, &yygotominor.yy153->lvalues );
                    yygotominor.yy153->list     = yymsp[-1].minor.yy3;
                    p->destroy( yymsp[-5].minor.yy222.token );
                  yy_destructor(yypParser,8,&yymsp[-4].minor);
  yy_destructor(yypParser,14,&yymsp[-2].minor);
  yy_destructor(yypParser,11,&yymsp[0].minor);
}
#line 3809 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 226: /* stmt_foreach ::= scope_for LPN expr_lbody EACHKEY expr_value RPN */
#line 1389 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy153 = p->alloc< xec_stmt_foreach >( yymsp[-5].minor.yy222.token->sloc );
                    yymsp[-5].minor.yy222.scope->node = yygotominor.yy153;
                    yygotominor.yy153->scope    = yymsp[-5].minor.yy222.scope;
                    p->expr_lvalue_list( yymsp[-3].minor.yy3, &yygotominor.yy153->lvalues );
                    yygotominor.yy153->list     = yymsp[-1].minor.yy3;
                    yygotominor.yy153->eachkey  = true;
                    p->destroy( yymsp[-5].minor.yy222.token );
                  yy_destructor(yypParser,8,&yymsp[-4].minor);
  yy_destructor(yypParser,81,&yymsp[-2].minor);
  yy_destructor(yypParser,11,&yymsp[0].minor);
}
#line 3825 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 227: /* stmt_foreach ::= scope_for LPN VAR varname_list COLON expr_value RPN */
      case 240: /* stmt_catch ::= scope_catch LPN VAR name COLON expr_simple RPN */ yytestcase(yyruleno==240);
#line 1400 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,8,&yymsp[-5].minor);
  yy_destructor(yypParser,16,&yymsp[-4].minor);
  yy_destructor(yypParser,14,&yymsp[-2].minor);
  yy_destructor(yypParser,11,&yymsp[0].minor);
}
#line 3836 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 228: /* stmt_foreach ::= scope_for LPN VAR varname_list EACHKEY expr_value RPN */
#line 1404 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,8,&yymsp[-5].minor);
  yy_destructor(yypParser,16,&yymsp[-4].minor);
  yy_destructor(yypParser,81,&yymsp[-2].minor);
  yy_destructor(yypParser,11,&yymsp[0].minor);
}
#line 3846 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 229: /* stmt_for ::= scope_for LPN condition SEMICOLON expr_assign SEMICOLON expr_assign RPN */
#line 1411 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy256 = p->alloc< xec_stmt_for >( yymsp[-7].minor.yy222.token->sloc );
                    yymsp[-7].minor.yy222.scope->node = yygotominor.yy256;
                    yygotominor.yy256->scope        = yymsp[-7].minor.yy222.scope;
                    yygotominor.yy256->init         = yymsp[-5].minor.yy3;
                    yygotominor.yy256->condition    = yymsp[-3].minor.yy3;
                    yygotominor.yy256->update       = yymsp[-1].minor.yy3;
                    p->destroy( yymsp[-7].minor.yy222.token );
                  yy_destructor(yypParser,8,&yymsp[-6].minor);
  yy_destructor(yypParser,15,&yymsp[-4].minor);
  yy_destructor(yypParser,15,&yymsp[-2].minor);
  yy_destructor(yypParser,11,&yymsp[0].minor);
}
#line 3863 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 230: /* stmt_uscope ::= USING LPN */
#line 1422 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy2 = p->alloc< xec_stmt_using_scope >( yymsp[-1].minor.yy0->sloc );
                    yygotominor.yy2->scope = p->block_scope( yygotominor.yy2 );
                    p->destroy( yymsp[-1].minor.yy0 );
                  yy_destructor(yypParser,8,&yymsp[0].minor);
}
#line 3873 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 231: /* stmt_try ::= try_catch */
#line 1432 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy3 = yymsp[0].minor.yy212;
                }
#line 3880 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 232: /* stmt_try ::= try_catch FINALLY stmt */
      case 233: /* stmt_try ::= try_block FINALLY stmt */ yytestcase(yyruleno==233);
#line 1436 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-2].minor.yy212->fstmt = p->stmt_nodecl( yymsp[0].minor.yy3 );
                    yygotominor.yy3 = yymsp[-2].minor.yy212;
                  yy_destructor(yypParser,5,&yymsp[-1].minor);
}
#line 3890 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 234: /* try_block ::= TRY stmt */
#line 1447 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy212 = p->alloc< xec_stmt_try >( yymsp[-1].minor.yy0->sloc, yymsp[0].minor.yy3 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 3898 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 235: /* try_catch ::= try_block stmt_catch stmt_reuse */
#line 1453 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy174->body = p->stmt_nodecl( yymsp[0].minor.yy3 );
                    p->close_scope( yymsp[-1].minor.yy174->scope );
                    yymsp[-2].minor.yy212->clist.push_back( yymsp[-1].minor.yy174 );
                    yygotominor.yy212 = yymsp[-2].minor.yy212;
                }
#line 3908 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 236: /* try_catch ::= try_catch stmt_catch stmt_reuse */
#line 1460 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy174->body = p->stmt_nodecl(yymsp[0].minor.yy3);
                    p->close_scope( yymsp[-1].minor.yy174->scope );
                    yymsp[-2].minor.yy212->clist.push_back( yymsp[-1].minor.yy174 );
                    yygotominor.yy212 = yymsp[-2].minor.yy212;
                }
#line 3918 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 237: /* scope_catch ::= CATCH */
#line 1468 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    // open scope here ready for declarations.
                    yygotominor.yy222 = make_token_scope( yymsp[0].minor.yy0, p->block_scope( nullptr ) );
                }
#line 3926 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 238: /* stmt_catch ::= scope_catch LPN COLON expr_simple RPN */
#line 1474 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy174 = p->alloc< xec_stmt_catch >( yymsp[-4].minor.yy222.token->sloc );
                    yymsp[-4].minor.yy222.scope->node = yygotominor.yy174;
                    yygotominor.yy174->proto    = yymsp[-1].minor.yy3;
                    p->destroy( yymsp[-4].minor.yy222.token );
                  yy_destructor(yypParser,8,&yymsp[-3].minor);
  yy_destructor(yypParser,14,&yymsp[-2].minor);
  yy_destructor(yypParser,11,&yymsp[0].minor);
}
#line 3939 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 239: /* stmt_catch ::= scope_catch LPN expr_value COLON expr_simple RPN */
#line 1482 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy174 = p->alloc< xec_stmt_catch >( yymsp[-5].minor.yy222.token->sloc );
                    yymsp[-5].minor.yy222.scope->node = yygotominor.yy174;
                    yygotominor.yy174->lvalue   = yymsp[-3].minor.yy3;
                    yygotominor.yy174->proto    = yymsp[-1].minor.yy3;
                    p->destroy( yymsp[-5].minor.yy222.token );
                  yy_destructor(yypParser,8,&yymsp[-4].minor);
  yy_destructor(yypParser,14,&yymsp[-2].minor);
  yy_destructor(yypParser,11,&yymsp[0].minor);
}
#line 3953 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      default:
      /* (7) object_decls ::= */ yytestcase(yyruleno==7);
        break;
  };
  yygoto = yyRuleInfo[yyruleno].lhs;
  yysize = yyRuleInfo[yyruleno].nrhs;
  yypParser->yyidx -= yysize;
  yyact = yy_find_reduce_action(yymsp[-yysize].stateno,(YYCODETYPE)yygoto);
  if( yyact < YYNSTATE ){
#ifdef NDEBUG
    /* If we are not debugging and the reduce action popped at least
    ** one element off the stack, then we can push the new element back
    ** onto the stack here, and skip the stack overflow test in yy_shift().
    ** That gives a significant speed improvement. */
    if( yysize ){
      yypParser->yyidx++;
      yymsp -= yysize-1;
      yymsp->stateno = (YYACTIONTYPE)yyact;
      yymsp->major = (YYCODETYPE)yygoto;
      yymsp->minor = yygotominor;
    }else
#endif
    {
      yy_shift(yypParser,yyact,yygoto,&yygotominor);
    }
  }else{
    assert( yyact == YYNSTATE + YYNRULE + 1 );
    yy_accept(yypParser);
  }
}

/*
** The following code executes when the parse fails
*/
#ifndef YYNOERRORRECOVERY
static void yy_parse_failed(
  yyParser *yypParser           /* The parser */
){
  XecParseARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sFail!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser fails */
  XecParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}
#endif /* YYNOERRORRECOVERY */

/*
** The following code executes when a syntax error first occurs.
*/
static void yy_syntax_error(
  yyParser *yypParser,           /* The parser */
  int yymajor,                   /* The major type of the error token */
  YYMINORTYPE yyminor            /* The minor type of the error token */
){
  XecParseARG_FETCH;
#define TOKEN (yyminor.yy0)
#line 1520 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"

    p->get_script()->diagnostic( TOKEN->sloc,
            "unexpected %s", TOKEN->get_spelling().c_str() );
#line 4020 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
  XecParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/*
** The following is executed when the parser accepts
*/
static void yy_accept(
  yyParser *yypParser           /* The parser */
){
  XecParseARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sAccept!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser accepts */
  XecParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/* The main parser program.
** The first argument is a pointer to a structure obtained from
** "XecParseAlloc" which describes the current state of the parser.
** The second argument is the major token number.  The third is
** the minor token.  The fourth optional argument is whatever the
** user wants (and specified in the grammar) and is available for
** use by the action routines.
**
** Inputs:
** <ul>
** <li> A pointer to the parser (an opaque structure.)
** <li> The major token number.
** <li> The minor token number.
** <li> An option argument of a grammar-specified type.
** </ul>
**
** Outputs:
** None.
*/
void XecParse(
  void *yyp,                   /* The parser */
  int yymajor,                 /* The major token code number */
  XecParseTOKENTYPE yyminor       /* The value for the token */
  XecParseARG_PDECL               /* Optional %extra_argument parameter */
){
  YYMINORTYPE yyminorunion;
  int yyact;            /* The parser action. */
  int yyendofinput;     /* True if we are at the end of input */
#ifdef YYERRORSYMBOL
  int yyerrorhit = 0;   /* True if yymajor has invoked an error */
#endif
  yyParser *yypParser;  /* The parser */

  /* (re)initialize the parser, if necessary */
  yypParser = (yyParser*)yyp;
  if( yypParser->yyidx<0 ){
#if YYSTACKDEPTH<=0
    if( yypParser->yystksz <=0 ){
      /*memset(&yyminorunion, 0, sizeof(yyminorunion));*/
      yyminorunion = yyzerominor;
      yyStackOverflow(yypParser, &yyminorunion);
      return;
    }
#endif
    yypParser->yyidx = 0;
    yypParser->yyerrcnt = -1;
    yypParser->yystack[0].stateno = 0;
    yypParser->yystack[0].major = 0;
  }
  yyminorunion.yy0 = yyminor;
  yyendofinput = (yymajor==0);
  XecParseARG_STORE;

#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sInput %s\n",yyTracePrompt,yyTokenName[yymajor]);
  }
#endif

  do{
    yyact = yy_find_shift_action(yypParser,(YYCODETYPE)yymajor);
    if( yyact<YYNSTATE ){
      assert( !yyendofinput );  /* Impossible to shift the $ token */
      yy_shift(yypParser,yyact,yymajor,&yyminorunion);
      yypParser->yyerrcnt--;
      yymajor = YYNOCODE;
    }else if( yyact < YYNSTATE + YYNRULE ){
      yy_reduce(yypParser,yyact-YYNSTATE);
    }else{
      assert( yyact == YY_ERROR_ACTION );
#ifdef YYERRORSYMBOL
      int yymx;
#endif
#ifndef NDEBUG
      if( yyTraceFILE ){
        fprintf(yyTraceFILE,"%sSyntax Error!\n",yyTracePrompt);
      }
#endif
#ifdef YYERRORSYMBOL
      /* A syntax error has occurred.
      ** The response to an error depends upon whether or not the
      ** grammar defines an error token "ERROR".  
      **
      ** This is what we do if the grammar does define ERROR:
      **
      **  * Call the %syntax_error function.
      **
      **  * Begin popping the stack until we enter a state where
      **    it is legal to shift the error symbol, then shift
      **    the error symbol.
      **
      **  * Set the error count to three.
      **
      **  * Begin accepting and shifting new tokens.  No new error
      **    processing will occur until three tokens have been
      **    shifted successfully.
      **
      */
      if( yypParser->yyerrcnt<0 ){
        yy_syntax_error(yypParser,yymajor,yyminorunion);
      }
      yymx = yypParser->yystack[yypParser->yyidx].major;
      if( yymx==YYERRORSYMBOL || yyerrorhit ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE,"%sDiscard input token %s\n",
             yyTracePrompt,yyTokenName[yymajor]);
        }
#endif
        yy_destructor(yypParser, (YYCODETYPE)yymajor,&yyminorunion);
        yymajor = YYNOCODE;
      }else{
         while(
          yypParser->yyidx >= 0 &&
          yymx != YYERRORSYMBOL &&
          (yyact = yy_find_reduce_action(
                        yypParser->yystack[yypParser->yyidx].stateno,
                        YYERRORSYMBOL)) >= YYNSTATE
        ){
          yy_pop_parser_stack(yypParser);
        }
        if( yypParser->yyidx < 0 || yymajor==0 ){
          yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
          yy_parse_failed(yypParser);
          yymajor = YYNOCODE;
        }else if( yymx!=YYERRORSYMBOL ){
          YYMINORTYPE u2;
          u2.YYERRSYMDT = 0;
          yy_shift(yypParser,yyact,YYERRORSYMBOL,&u2);
        }
      }
      yypParser->yyerrcnt = 3;
      yyerrorhit = 1;
#elif defined(YYNOERRORRECOVERY)
      /* If the YYNOERRORRECOVERY macro is defined, then do not attempt to
      ** do any kind of error recovery.  Instead, simply invoke the syntax
      ** error routine and continue going as if nothing had happened.
      **
      ** Applications can set this macro (for example inside %include) if
      ** they intend to abandon the parse upon the first syntax error seen.
      */
      yy_syntax_error(yypParser,yymajor,yyminorunion);
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      yymajor = YYNOCODE;
      
#else  /* YYERRORSYMBOL is not defined */
      /* This is what we do if the grammar does not define ERROR:
      **
      **  * Report an error message, and throw away the input token.
      **
      **  * If the input token is $, then fail the parse.
      **
      ** As before, subsequent error messages are suppressed until
      ** three input tokens have been successfully shifted.
      */
      if( yypParser->yyerrcnt<=0 ){
        yy_syntax_error(yypParser,yymajor,yyminorunion);
      }
      yypParser->yyerrcnt = 3;
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      if( yyendofinput ){
        yy_parse_failed(yypParser);
      }
      yymajor = YYNOCODE;
#endif
    }
  }while( yymajor!=YYNOCODE && yypParser->yyidx>=0 );
  return;
}
