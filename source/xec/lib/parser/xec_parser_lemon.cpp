/* Driver template for the LEMON parser generator.
** The author disclaims copyright to this source code.
*/
/* First off, code is included that follows the "include" declaration
** in the input grammar file. */
#include <stdio.h>
#line 19 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"


#include <assert.h>
#include "xec_parser.h"
#include "xec_token.h"
#include "xec_ast.h"


struct xec_token_scope
{
    xec_token*      token;
    xec_ast_scope*  scope;
};


inline xec_token_scope make_token_scope(
                xec_token* token, xec_ast_scope* scope )
{
    xec_token_scope result;
    result.token = token;
    result.scope = scope;
    return result;
}


#line 90 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"



void xec_parser::destroy( xec_token* token )
{
    token->~xec_token();
    recycle_tokens.push_back( token );
}


#line 45 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
/* Next is all token values, in a form suitable for use by makeheaders.
** This section will be null unless lemon is run with the -m switch.
*/
/* 
** These constants (all generated automatically by the parser generator)
** specify the various kinds of tokens (terminals) that the parser
** understands. 
**
** Each symbol here is a terminal symbol in the grammar.
*/
/* Make sure the INTERFACE macro is defined.
*/
#ifndef INTERFACE
# define INTERFACE 1
#endif
/* The next thing included is series of defines which control
** various aspects of the generated parser.
**    YYCODETYPE         is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 terminals
**                       and nonterminals.  "int" is used otherwise.
**    YYNOCODE           is a number of type YYCODETYPE which corresponds
**                       to no legal terminal or nonterminal number.  This
**                       number is used to fill in empty slots of the hash 
**                       table.
**    YYFALLBACK         If defined, this indicates that one or more tokens
**                       have fall-back values which should be used if the
**                       original value of the token will not parse.
**    YYACTIONTYPE       is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 rules and
**                       states combined.  "int" is used otherwise.
**    XecParseTOKENTYPE     is the data type used for minor tokens given 
**                       directly to the parser from the tokenizer.
**    YYMINORTYPE        is the data type used for all minor tokens.
**                       This is typically a union of many types, one of
**                       which is XecParseTOKENTYPE.  The entry in the union
**                       for base tokens is called "yy0".
**    YYSTACKDEPTH       is the maximum depth of the parser's stack.  If
**                       zero the stack is dynamically sized using realloc()
**    XecParseARG_SDECL     A static variable declaration for the %extra_argument
**    XecParseARG_PDECL     A parameter declaration for the %extra_argument
**    XecParseARG_STORE     Code to store %extra_argument into yypParser
**    XecParseARG_FETCH     Code to extract %extra_argument from yypParser
**    YYNSTATE           the combined number of states.
**    YYNRULE            the number of rules in the grammar
**    YYERRORSYMBOL      is the code number of the error symbol.  If not
**                       defined, then do no error processing.
*/
#define YYCODETYPE unsigned char
#define YYNOCODE 159
#define YYACTIONTYPE unsigned short int
#define XecParseTOKENTYPE  xec_token* 
typedef union {
  int yyinit;
  XecParseTOKENTYPE yy0;
  xec_stmt_for* yy16;
  xec_token* yy19;
  xec_ast_func* yy45;
  xec_expr_call* yy52;
  xec_expr_yield* yy55;
  xec_new_list* yy87;
  xec_new_object* yy182;
  xec_stmt_if* yy188;
  xec_new_table* yy191;
  xec_stmt_do* yy208;
  xec_token_scope yy218;
  xec_unqual_proto* yy219;
  xec_stmt_try* yy224;
  xec_stmt_using* yy227;
  xec_stmt_foreach* yy237;
  xec_unqual_name* yy240;
  xec_stmt_catch* yy256;
  xec_ast_node* yy259;
  xec_stmt_switch* yy267;
  xec_stmt_block* yy268;
  xec_stmt_while* yy278;
  xec_unqual_list* yy283;
} YYMINORTYPE;
#ifndef YYSTACKDEPTH
#define YYSTACKDEPTH 100
#endif
#define XecParseARG_SDECL  xec_parser* p ;
#define XecParseARG_PDECL , xec_parser* p 
#define XecParseARG_FETCH  xec_parser* p  = yypParser->p 
#define XecParseARG_STORE yypParser->p  = p 
#define YYNSTATE 482
#define YYNRULE 253
#define YY_NO_ACTION      (YYNSTATE+YYNRULE+2)
#define YY_ACCEPT_ACTION  (YYNSTATE+YYNRULE+1)
#define YY_ERROR_ACTION   (YYNSTATE+YYNRULE)

/* The yyzerominor constant is used to initialize instances of
** YYMINORTYPE objects to zero. */
static const YYMINORTYPE yyzerominor = { 0 };

/* Define the yytestcase() macro to be a no-op if is not already defined
** otherwise.
**
** Applications can choose to define yytestcase() in the %include section
** to a macro that can assist in verifying code coverage.  For production
** code the yytestcase() macro should be turned off.  But it is useful
** for testing.
*/
#ifndef yytestcase
# define yytestcase(X)
#endif


/* Next are the tables used to determine what action to take based on the
** current state and lookahead token.  These tables are used to implement
** functions that take a state number and lookahead value and return an
** action integer.  
**
** Suppose the action integer is N.  Then the action is determined as
** follows
**
**   0 <= N < YYNSTATE                  Shift N.  That is, push the lookahead
**                                      token onto the stack and goto state N.
**
**   YYNSTATE <= N < YYNSTATE+YYNRULE   Reduce by rule N-YYNSTATE.
**
**   N == YYNSTATE+YYNRULE              A syntax error has occurred.
**
**   N == YYNSTATE+YYNRULE+1            The parser accepts its input.
**
**   N == YYNSTATE+YYNRULE+2            No such action.  Denotes unused
**                                      slots in the yy_action[] table.
**
** The action table is constructed as a single large table named yy_action[].
** Given state S and lookahead X, the action is computed as
**
**      yy_action[ yy_shift_ofst[S] + X ]
**
** If the index value yy_shift_ofst[S]+X is out of range or if the value
** yy_lookahead[yy_shift_ofst[S]+X] is not equal to X or if yy_shift_ofst[S]
** is equal to YY_SHIFT_USE_DFLT, it means that the action is not in the table
** and that yy_default[S] should be used instead.  
**
** The formula above is for computing the action when the lookahead is
** a terminal symbol.  If the lookahead is a non-terminal (as occurs after
** a reduce action) then the yy_reduce_ofst[] array is used in place of
** the yy_shift_ofst[] array and YY_REDUCE_USE_DFLT is used in place of
** YY_SHIFT_USE_DFLT.
**
** The following are the tables generated in this section:
**
**  yy_action[]        A single table containing all actions.
**  yy_lookahead[]     A table containing the lookahead for each entry in
**                     yy_action.  Used to detect hash collisions.
**  yy_shift_ofst[]    For each state, the offset into yy_action for
**                     shifting terminals.
**  yy_reduce_ofst[]   For each state, the offset into yy_action for
**                     shifting non-terminals after a reduce.
**  yy_default[]       Default action for each state.
*/
static const YYACTIONTYPE yy_action[] = {
 /*     0 */   121,  122,  127,  152,  151,  146,  148,  280,  422,  406,
 /*    10 */   460,   75,   26,  336,  113,  150,    9,  251,  239,  235,
 /*    20 */     7,  203,   13,   12,  225,  111,  112,   35,  140,   34,
 /*    30 */    92,   91,  123,  256,   33,  397,  166,  300,  192,  398,
 /*    40 */    28,  253,  232,  131,  352,   45,  138,  137,  306,  160,
 /*    50 */   315,  156,  164,  159,  236,  238,  244,  247,  120,  248,
 /*    60 */   242,  182,  370,   83,  393,  117,  394,  252,  289,  396,
 /*    70 */   402,  129,  421,  124,  122,  127,  296,  151,  280,  148,
 /*    80 */   295,  334,  134,  346,  336,  113,   58,  452,  150,  351,
 /*    90 */   251,  239,  235,    7,  203,   13,   12,  225,  111,  112,
 /*   100 */    37,  145,   34,  162,   33,  133,  166,   38,  145,  343,
 /*   110 */   300,   94,   97,   96,   95,   45,  131,  736,    2,  138,
 /*   120 */   137,  306,  160,  315,  156,  164,  159,  236,  238,  244,
 /*   130 */   247,  120,  248,  242,  182,  370,  282,  393,  117,  394,
 /*   140 */   252,  284,  449,  402,  291,  421,  124,  122,  127,  474,
 /*   150 */   151,   52,  148,  346,  476,   89,   90,   88,  475,  186,
 /*   160 */    27,  280,  147,  251,  239,  235,    7,  203,   13,   12,
 /*   170 */   225,  111,  112,  110,   33,   34,  163,  297,  133,  332,
 /*   180 */   109,  293,   33,  300,  211,   47,  409,  332,  109,  131,
 /*   190 */   181,  179,  138,  137,  306,  160,  315,  156,  164,  159,
 /*   200 */   236,  238,  244,  247,  120,  248,  242,  182,  370,  413,
 /*   210 */   393,  117,  394,  252,  281,  342,  416,  231,  421,  124,
 /*   220 */   122,  127,  290,  151,   56,  148,  266,   10,  173,  168,
 /*   230 */    64,  149,   62,   36,  140,  147,  251,  239,  235,    7,
 /*   240 */   203,   13,   12,  225,  111,  112,  154,  155,   34,  220,
 /*   250 */    33,  133,  174,   33,  269,  161,  300,  451,   14,  345,
 /*   260 */   343,   44,  131,  260,   50,  138,  137,  306,  160,  315,
 /*   270 */   156,  164,  159,  236,  238,  244,  247,  120,  248,  242,
 /*   280 */   182,  370,   33,  393,  117,  394,  252,  266,   15,  416,
 /*   290 */   420,  421,  124,  122,  127,  294,  151,   60,  148,  365,
 /*   300 */    36,  140,  458,  451,   16,   78,  180,  150,  177,  251,
 /*   310 */   239,  235,    7,  203,   13,   12,  225,  111,  112,  473,
 /*   320 */    33,   34,  166,  292,  133,  469,   33,  407,  174,  300,
 /*   330 */   200,   79,    3,   54,    5,  131,  354,   72,  138,  137,
 /*   340 */   306,  160,  315,  156,  164,  159,  236,  238,  244,  247,
 /*   350 */   120,  248,  242,  182,  370,    4,  393,  117,  394,  252,
 /*   360 */   298,  412,  402,    1,  421,  124,  122,  127,    6,  151,
 /*   370 */    61,  148,  307,  308,   27,  280,   70,   80,   53,   37,
 /*   380 */   145,  147,  251,  239,  235,    7,  203,   13,   12,  225,
 /*   390 */   111,  112,  103,   33,   34,  175,   33,  133,  170,   33,
 /*   400 */   104,  161,  300,  351,   71,   30,  442,   77,  131,  340,
 /*   410 */    74,  138,  137,  306,  160,  315,  156,  164,  159,  236,
 /*   420 */   238,  244,  247,  120,  248,  242,  182,  370,  477,  393,
 /*   430 */   117,  394,  252,  441,  478,  416,  450,  421,  124,  122,
 /*   440 */   127,  339,  151,   69,  148,  353,  479,  440,  481,  144,
 /*   450 */   279,  439,  438,  150,  285,  251,  239,  235,    7,  203,
 /*   460 */    13,   12,  225,  111,  112,  355,   33,   34,  163,   33,
 /*   470 */   133,  167,   33,  299,  175,  300,  437,   55,   19,  358,
 /*   480 */    51,  131,   68,   48,  138,  137,  306,  160,  315,  156,
 /*   490 */   164,  159,  236,  238,  244,  247,  120,  248,  242,  182,
 /*   500 */   370,  333,  393,  117,  394,  252,  431,  411,  402,  430,
 /*   510 */   421,  124,  122,  127,   65,  151,   63,  148,  281,  428,
 /*   520 */   361,  426,  425,  362,  424,  331,  363,  147,  251,  239,
 /*   530 */   235,    7,  203,   13,   12,  225,  111,  112,  364,   33,
 /*   540 */    34,  170,   33,  133,  163,   33,  423,  167,  300,  283,
 /*   550 */    49,   11,   20,   47,  131,  366,   73,  138,  137,  306,
 /*   560 */   160,  315,  156,  164,  159,  236,  238,  244,  247,  120,
 /*   570 */   248,  242,  182,  370,  367,  393,  117,  394,  252,   57,
 /*   580 */   228,  416,  418,  421,  124,  122,  127,  417,  151,   29,
 /*   590 */   148,  230,  400,   81,    8,   23,   87,  141,   86,   22,
 /*   600 */   147,  251,  239,  235,    7,  203,   13,   12,  225,  111,
 /*   610 */   112,  457,   82,   34,   40,   85,  133,   84,   21,  404,
 /*   620 */   399,  300,  454,  461,  345,   42,  463,  131,  348,  107,
 /*   630 */   138,  137,  306,  160,  315,  156,  164,  159,  236,  238,
 /*   640 */   244,  247,  120,  248,  242,  182,  370,  453,  393,  117,
 /*   650 */   394,  252,  108,  467,  416,  456,  421,  124,  122,  127,
 /*   660 */    46,  151,  468,  148,  287,  470,  341,  342,  349,  471,
 /*   670 */   288,  443,   24,  147,  251,  239,  235,    7,  203,   13,
 /*   680 */    12,  225,  111,  112,  472,   25,   34,  737,  737,  133,
 /*   690 */   737,  737,  737,  737,  300,  737,  737,  737,  737,  737,
 /*   700 */   131,  737,  737,  138,  137,  306,  160,  315,  156,  164,
 /*   710 */   159,  236,  238,  244,  247,  120,  248,  242,  182,  370,
 /*   720 */   737,  393,  117,  394,  252,  737,  737,  416,  419,  421,
 /*   730 */   124,  122,  127,  737,  151,  737,  148,  737,  737,  737,
 /*   740 */   737,  737,  737,  737,  737,  737,  147,  251,  239,  235,
 /*   750 */     7,  203,   13,   12,  225,  111,  112,  737,  737,   34,
 /*   760 */   737,  737,  133,  737,  737,  737,  737,  300,  737,  737,
 /*   770 */   737,  737,  737,  131,  737,  737,  138,  137,  306,  160,
 /*   780 */   315,  156,  164,  159,  236,  238,  244,  247,  120,  248,
 /*   790 */   242,  182,  370,  737,  393,  117,  394,  252,  737,  737,
 /*   800 */   416,  455,  421,  124,  122,  127,  737,  151,  737,  148,
 /*   810 */   737,  737,  737,  737,  737,  737,  737,  737,  150,  737,
 /*   820 */   251,  239,  235,    7,  203,   13,   12,  225,  111,  112,
 /*   830 */   737,  737,   34,  737,  737,  133,  737,  737,  737,  737,
 /*   840 */   300,  737,  737,  737,  737,  737,  131,  737,  737,  138,
 /*   850 */   137,  306,  160,  315,  156,  164,  159,  236,  238,  244,
 /*   860 */   247,  120,  248,  242,  182,  370,  737,  393,  117,  394,
 /*   870 */   252,  737,  448,  402,  737,  421,  124,  122,  127,  737,
 /*   880 */   151,  737,  148,  737,  737,  737,  737,  737,  737,  737,
 /*   890 */   737,  150,  737,  251,  239,  235,    7,  203,   13,   12,
 /*   900 */   225,  111,  112,  737,  737,   34,  737,  737,  133,  737,
 /*   910 */   737,  737,  737,  300,  737,  737,  737,  737,  737,  131,
 /*   920 */   737,  737,  138,  137,  306,  160,  315,  156,  164,  159,
 /*   930 */   236,  238,  244,  247,  120,  248,  242,  182,  370,  737,
 /*   940 */   393,  117,  394,  252,  737,  447,  402,  432,  421,   17,
 /*   950 */   737,  737,  265,   27,  280,  195,  414,  737,  403,  106,
 /*   960 */   395,  113,  737,  737,   32,  737,  110,  301,  302,  303,
 /*   970 */   304,  305,   93,   98,  102,  101,  100,   99,  320,  321,
 /*   980 */   322,  323,  324,  325,  326,  327,  328,  329,  737,  186,
 /*   990 */    27,  280,  737,  737,  737,  350,  737,  737,  737,  737,
 /*  1000 */   737,  143,  369,  110,  737,  737,  737,  737,  737,  737,
 /*  1010 */   737,  737,  737,  737,  737,  434,   43,   76,  217,  215,
 /*  1020 */   214,   31,   67,  433,  435,  436,  432,  446,   17,  737,
 /*  1030 */   737,  265,   27,  280,  195,  737,  368,  403,  106,  395,
 /*  1040 */   113,  737,  737,   32,  737,  110,  301,  302,  303,  304,
 /*  1050 */   305,   93,   98,  102,  101,  100,   99,  737,  737,  737,
 /*  1060 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  1070 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  1080 */   143,  369,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  1090 */   737,  737,  737,  737,  434,   43,   76,  217,  215,  214,
 /*  1100 */    31,   67,  433,  435,  436,  432,  446,   17,  737,  737,
 /*  1110 */   265,   27,  280,  195,  737,  401,  403,  106,  395,  113,
 /*  1120 */   737,  737,   32,  737,  110,  301,  302,  303,  304,  305,
 /*  1130 */    93,   98,  102,  101,  100,   99,  737,  737,  737,  737,
 /*  1140 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  1150 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  143,
 /*  1160 */   369,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  1170 */   737,  737,  737,  434,   43,   76,  217,  215,  214,   31,
 /*  1180 */    67,  433,  435,  436,  432,  446,   17,  737,  737,  265,
 /*  1190 */    27,  280,  195,  737,  344,  403,  106,  395,  113,  737,
 /*  1200 */   737,   32,  737,  110,  301,  302,  303,  304,  305,   93,
 /*  1210 */    98,  102,  101,  100,   99,  737,  737,  737,  737,  737,
 /*  1220 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  1230 */   737,  737,  737,  737,  737,  737,  737,  737,  143,  369,
 /*  1240 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  1250 */   737,  737,  434,   43,   76,  217,  215,  214,   31,   67,
 /*  1260 */   433,  435,  436,  737,  446,  482,  432,  737,   17,  737,
 /*  1270 */   737,  265,   27,  280,  195,  737,  737,  403,  106,  395,
 /*  1280 */   113,  737,  737,   32,  737,  110,  301,  302,  303,  304,
 /*  1290 */   305,   93,   98,  102,  101,  100,   99,  737,  737,  737,
 /*  1300 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  1310 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  1320 */   143,  369,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  1330 */   737,  737,  737,  737,  434,   43,   76,  217,  215,  214,
 /*  1340 */    31,   67,  433,  435,  436,  432,  446,   17,  737,  737,
 /*  1350 */   265,   27,  280,  195,  737,  415,  403,  106,  395,  113,
 /*  1360 */   737,  737,   32,  737,  110,  301,  302,  303,  304,  305,
 /*  1370 */    93,   98,  102,  101,  100,   99,  737,  737,  737,  737,
 /*  1380 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  1390 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  143,
 /*  1400 */   369,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  1410 */   737,  737,  737,  434,   43,   76,  217,  215,  214,   31,
 /*  1420 */    67,  433,  435,  436,  432,  446,   17,  737,  737,  265,
 /*  1430 */    27,  280,  195,  737,  737,  403,  106,  125,  126,  136,
 /*  1440 */   737,   32,  737,  110,  301,  302,  303,  304,  305,   93,
 /*  1450 */    98,  102,  101,  100,   99,  737,  737,  737,  737,  737,
 /*  1460 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  130,
 /*  1470 */   737,  737,  737,  737,  300,  737,  737,  737,  143,  369,
 /*  1480 */   132,  737,  737,  139,  135,  306,  160,  315,  156,  164,
 /*  1490 */   159,  254,  434,   43,   76,  217,  215,  214,   31,   67,
 /*  1500 */   433,  435,  436,  432,  446,   17,  737,  737,  265,   27,
 /*  1510 */   280,  195,  737,  169,  413,  106,  152,  737,  146,  737,
 /*  1520 */    32,  737,  110,  301,  302,  303,  304,  305,   93,   98,
 /*  1530 */   102,  101,  100,   99,  737,  737,  737,  737,  737,  737,
 /*  1540 */   737,  737,  737,  737,  737,  128,  737,  737,  337,  737,
 /*  1550 */   737,  335,  338,  190,  184,  274,  737,  143,  369,  737,
 /*  1560 */   737,  737,  124,  122,  127,  737,  151,  737,  148,  737,
 /*  1570 */   737,  434,   43,   76,  217,  215,  214,   31,   67,  433,
 /*  1580 */   435,  436,  737,  446,  737,  737,  737,  737,  737,  737,
 /*  1590 */   737,  737,  737,  737,  133,  737,  390,  737,  737,  300,
 /*  1600 */   737,  737,  737,  737,  737,  131,  405,  386,  138,  137,
 /*  1610 */   306,  160,  315,  156,  164,  159,  236,  238,  244,  247,
 /*  1620 */   120,  248,  242,  182,  356,  116,  389,  737,  737,  737,
 /*  1630 */   445,  737,  737,  737,  737,  278,  737,  186,   27,  280,
 /*  1640 */   737,  124,  122,  127,  737,  151,  737,  148,  737,  737,
 /*  1650 */   737,  110,  301,  302,  303,  304,  305,   93,   98,  102,
 /*  1660 */   101,  100,   99,  737,  737,  737,  737,  737,  737,  737,
 /*  1670 */   737,  737,  737,  133,  737,  390,  371,   40,  300,  737,
 /*  1680 */   737,  737,  737,  737,  131,  444,  386,  138,  137,  306,
 /*  1690 */   160,  315,  156,  164,  159,  236,  238,  244,  247,  120,
 /*  1700 */   248,  242,  182,  356,  118,  389,  124,  122,  127,  737,
 /*  1710 */   151,  737,  148,  737,  737,  276,  737,  372,  373,  374,
 /*  1720 */   375,  376,  377,  378,  379,  380,  381,  382,  383,  737,
 /*  1730 */   737,  737,  737,  737,  737,  737,  737,  737,  133,  737,
 /*  1740 */   390,  737,  737,  300,  125,  126,  136,  737,  737,  131,
 /*  1750 */   405,  386,  138,  137,  306,  160,  315,  156,  164,  159,
 /*  1760 */   236,  238,  244,  247,  120,  248,  242,  182,  356,  118,
 /*  1770 */   389,  124,  122,  127,  241,  151,  130,  148,  737,  737,
 /*  1780 */   737,  300,  737,  737,  737,  737,  737,  132,  737,  737,
 /*  1790 */   139,  135,  306,  160,  315,  156,  164,  158,  737,  737,
 /*  1800 */   737,  737,  737,  133,  737,  390,  737,  737,  300,  371,
 /*  1810 */    41,  737,  737,  737,  131,  405,  386,  138,  137,  306,
 /*  1820 */   160,  315,  156,  164,  159,  236,  238,  244,  247,  120,
 /*  1830 */   248,  242,  182,  356,  118,  389,  124,  122,  127,  223,
 /*  1840 */   151,  737,  148,  737,  737,  737,  737,  737,  737,  737,
 /*  1850 */   372,  373,  374,  375,  376,  377,  378,  379,  380,  381,
 /*  1860 */   382,  383,  737,  737,  737,  737,  737,  737,  133,  737,
 /*  1870 */   390,  737,  737,  300,  125,  126,  136,  737,  737,  131,
 /*  1880 */   444,  386,  138,  137,  306,  160,  315,  156,  164,  159,
 /*  1890 */   236,  238,  244,  247,  120,  248,  242,  182,  356,  118,
 /*  1900 */   389,  124,  122,  127,  737,  151,  130,  148,  737,  737,
 /*  1910 */   277,  300,  737,  737,  737,  737,  737,  132,  737,  737,
 /*  1920 */   139,  135,  306,  160,  315,  156,  178,  737,  737,  737,
 /*  1930 */   737,  737,  737,  133,  737,  390,  737,  737,  300,  125,
 /*  1940 */   126,  136,  737,  737,  131,  405,  386,  138,  137,  306,
 /*  1950 */   160,  315,  156,  164,  159,  236,  238,  244,  247,  120,
 /*  1960 */   248,  242,  182,  356,  118,  389,  124,  122,  127,  234,
 /*  1970 */   151,  130,  148,  737,  737,  737,  300,  737,  737,  737,
 /*  1980 */   737,  737,  132,  737,  737,  139,  135,  306,  160,  315,
 /*  1990 */   156,  172,  737,  737,  737,  737,  737,  737,  133,  737,
 /*  2000 */   390,  737,  737,  300,  125,  126,  136,  737,  737,  131,
 /*  2010 */   405,  386,  138,  137,  306,  160,  315,  156,  164,  159,
 /*  2020 */   236,  238,  244,  247,  120,  248,  242,  182,  356,  118,
 /*  2030 */   389,  124,  122,  127,  237,  151,  130,  148,  737,  737,
 /*  2040 */   737,  300,  737,  737,  737,  737,  737,  132,  737,  737,
 /*  2050 */   139,  135,  306,  160,  315,  156,  176,  737,  737,  737,
 /*  2060 */   737,  737,  737,  133,  737,  390,  737,  737,  300,  125,
 /*  2070 */   126,  136,  737,  737,  131,  222,  386,  138,  137,  306,
 /*  2080 */   160,  315,  156,  164,  159,  236,  238,  244,  247,  120,
 /*  2090 */   248,  242,  182,  356,  118,  389,  124,  122,  127,  737,
 /*  2100 */   151,  130,  148,  737,  737,  737,  300,  737,  737,  737,
 /*  2110 */   737,  737,  132,  737,  737,  139,  135,  306,  160,  315,
 /*  2120 */   157,  737,  737,  737,  737,  737,  737,  737,  133,  737,
 /*  2130 */   390,  737,  737,  300,  125,  126,  136,  737,  737,  131,
 /*  2140 */   392,  386,  138,  137,  306,  160,  315,  156,  164,  159,
 /*  2150 */   236,  238,  244,  247,  120,  248,  242,  182,  356,  118,
 /*  2160 */   389,  124,  122,  127,  737,  151,  130,  148,  737,  737,
 /*  2170 */   737,  300,  737,  737,  737,  737,  737,  132,  737,  737,
 /*  2180 */   139,  135,  306,  160,  315,  153,  737,  737,  737,  737,
 /*  2190 */   737,  737,  737,  133,  737,  390,  737,  737,  300,  125,
 /*  2200 */   126,  136,  737,  737,  131,  229,  386,  138,  137,  306,
 /*  2210 */   160,  315,  156,  164,  159,  236,  238,  244,  247,  120,
 /*  2220 */   248,  242,  182,  356,  118,  389,  124,  122,  127,  737,
 /*  2230 */   151,  130,  148,  737,  737,  737,  300,  737,  737,  737,
 /*  2240 */   737,  737,  132,  737,  737,  139,  135,  306,  160,  313,
 /*  2250 */   737,  737,  737,  737,  737,  737,  737,  737,  133,  737,
 /*  2260 */   390,  737,  737,  300,  125,  126,  136,  737,  737,  131,
 /*  2270 */   391,  386,  138,  137,  306,  160,  315,  156,  164,  159,
 /*  2280 */   236,  238,  244,  247,  120,  248,  242,  182,  356,  118,
 /*  2290 */   389,  124,  122,  127,  737,  151,  130,  148,  737,  737,
 /*  2300 */   737,  300,  261,  258,  737,  737,  737,  132,  737,  737,
 /*  2310 */   139,  135,  306,  160,  312,  737,  737,  737,  737,  737,
 /*  2320 */   737,  737,  737,  133,  737,  737,  737,  737,  300,  125,
 /*  2330 */   126,  136,  737,  737,  131,  737,  464,  138,  137,  306,
 /*  2340 */   160,  315,  156,  164,  159,  236,  238,  244,  247,  120,
 /*  2350 */   248,  242,  182,  356,  737,  264,  124,  122,  127,  737,
 /*  2360 */   151,  130,  148,  737,  737,  737,  300,  737,  737,  737,
 /*  2370 */   737,  737,  132,  737,  737,  139,  135,  306,  160,  318,
 /*  2380 */   737,  737,  737,  737,  737,  737,  737,  737,  133,  737,
 /*  2390 */   268,  737,  737,  300,  125,  126,  136,  737,  737,  131,
 /*  2400 */   737,  386,  138,  137,  306,  160,  315,  156,  164,  159,
 /*  2410 */   236,  238,  244,  247,  120,  248,  242,  182,  356,  245,
 /*  2420 */   389,  124,  122,  127,  737,  151,  130,  148,  737,  737,
 /*  2430 */   737,  300,  737,  737,  737,  737,  737,  132,  737,  737,
 /*  2440 */   139,  135,  306,  160,  309,  737,  737,  737,  737,  737,
 /*  2450 */   737,  737,  737,  133,  737,  212,  737,  737,  300,  125,
 /*  2460 */   126,  136,  737,  737,  131,  737,  386,  138,  137,  306,
 /*  2470 */   160,  315,  156,  164,  159,  236,  238,  244,  247,  120,
 /*  2480 */   248,  242,  182,  356,  245,  389,  124,  122,  127,  737,
 /*  2490 */   151,  130,  148,  737,  737,  737,  300,  737,  737,  737,
 /*  2500 */   737,  737,  132,  737,  737,  139,  135,  306,  160,  314,
 /*  2510 */   737,  737,  737,  737,  737,  737,  737,  737,  133,  737,
 /*  2520 */   194,  737,  737,  300,  125,  126,  136,  737,  737,  131,
 /*  2530 */   737,  386,  138,  137,  306,  160,  315,  156,  164,  159,
 /*  2540 */   236,  238,  244,  247,  120,  248,  242,  182,  356,  245,
 /*  2550 */   389,  124,  122,  127,  737,  151,  130,  148,  737,  737,
 /*  2560 */   737,  300,  737,  737,  737,  737,  737,  132,  737,  737,
 /*  2570 */   139,  135,  306,  160,  319,  737,  737,  737,  737,  737,
 /*  2580 */   737,  737,  737,  133,  737,  209,  737,  737,  300,  125,
 /*  2590 */   126,  136,  737,  737,  131,  737,  386,  138,  137,  306,
 /*  2600 */   160,  315,  156,  164,  159,  236,  238,  244,  247,  120,
 /*  2610 */   248,  242,  182,  356,  245,  389,  124,  122,  127,  737,
 /*  2620 */   151,  130,  148,  737,  737,  737,  300,  737,  737,  737,
 /*  2630 */   737,  737,  132,  737,  737,  139,  135,  306,  160,  310,
 /*  2640 */   737,  737,  737,  737,  737,  737,  737,  737,  133,  737,
 /*  2650 */   459,  737,  737,  300,  125,  126,  136,  737,  737,  131,
 /*  2660 */   737,  386,  138,  137,  306,  160,  315,  156,  164,  159,
 /*  2670 */   236,  238,  244,  247,  120,  248,  242,  182,  356,  245,
 /*  2680 */   389,  124,  122,  127,  737,  151,  130,  148,  737,  737,
 /*  2690 */   737,  300,  737,  737,  737,  737,  737,  132,  737,  737,
 /*  2700 */   139,  135,  306,  160,  317,  737,  737,  737,  737,  737,
 /*  2710 */   737,  737,  737,  133,  737,  410,  737,  737,  300,  125,
 /*  2720 */   126,  136,  737,  737,  131,  737,  386,  138,  137,  306,
 /*  2730 */   160,  315,  156,  164,  159,  236,  238,  244,  247,  120,
 /*  2740 */   248,  242,  182,  356,  245,  389,  124,  122,  127,  737,
 /*  2750 */   151,  130,  148,  737,  737,  737,  300,  737,  737,  737,
 /*  2760 */   737,  737,  132,  737,  737,  139,  135,  306,  160,  316,
 /*  2770 */   737,  737,  737,  737,  737,  737,  737,  737,  133,  737,
 /*  2780 */   408,  737,  737,  300,  125,  126,  136,  737,  737,  131,
 /*  2790 */   737,  386,  138,  137,  306,  160,  315,  156,  164,  159,
 /*  2800 */   236,  238,  244,  247,  120,  248,  242,  182,  356,  245,
 /*  2810 */   389,  124,  122,  127,  737,  151,  130,  148,  737,  737,
 /*  2820 */   737,  300,  737,  737,  737,  737,  737,  132,  737,  737,
 /*  2830 */   139,  135,  306,  160,  311,  737,  737,  737,  737,  737,
 /*  2840 */   737,  737,  737,  133,  737,  347,  737,  737,  300,  125,
 /*  2850 */   126,  136,  737,  737,  131,  737,  386,  138,  137,  306,
 /*  2860 */   160,  315,  156,  164,  159,  236,  238,  244,  247,  120,
 /*  2870 */   248,  242,  182,  356,  245,  389,  125,  126,  136,  737,
 /*  2880 */   151,  130,  148,  737,  737,  737,  262,  737,  737,  208,
 /*  2890 */   204,  737,  132,  737,  737,  139,  135,  737,  737,  737,
 /*  2900 */   737,  737,  737,   66,  737,  737,  371,   40,  130,  737,
 /*  2910 */   737,  737,  737,  300,  737,  737,  737,  737,  737,  132,
 /*  2920 */   737,  205,  139,  135,  306,  160,  315,  156,  164,  159,
 /*  2930 */   236,  238,  244,  247,  120,  248,  242,  182,  356,  737,
 /*  2940 */   125,  126,  136,  737,  151,  737,  148,  372,  373,  374,
 /*  2950 */   375,  376,  377,  378,  379,  380,  381,  382,  383,  737,
 /*  2960 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  2970 */    59,  737,  130,  737,  124,  122,  127,  300,  151,  737,
 /*  2980 */   148,  737,  737,  132,  737,  386,  139,  135,  306,  160,
 /*  2990 */   315,  156,  164,  159,  236,  238,  244,  247,  120,  248,
 /*  3000 */   242,  182,  356,  171,  737,  737,  133,  737,  124,  122,
 /*  3010 */   127,  300,  151,  737,  148,  737,  737,  131,  737,  387,
 /*  3020 */   138,  137,  306,  160,  315,  156,  164,  159,  236,  238,
 /*  3030 */   244,  247,  120,  248,  242,  182,  356,  737,  388,  737,
 /*  3040 */   133,  737,  737,  737,  737,  300,  737,  737,  737,  737,
 /*  3050 */   737,  131,  737,  384,  138,  137,  306,  160,  315,  156,
 /*  3060 */   164,  159,  236,  238,  244,  247,  120,  248,  242,  182,
 /*  3070 */   356,  737,  385,  124,  122,  127,  737,  151,  737,  148,
 /*  3080 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  3090 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  3100 */   737,  737,  737,  737,  737,  133,  737,  125,  126,  136,
 /*  3110 */   300,  151,  737,  148,  737,  737,  131,  737,  465,  138,
 /*  3120 */   137,  306,  160,  315,  156,  164,  159,  236,  238,  244,
 /*  3130 */   247,  120,  248,  242,  182,  356,  737,  466,  737,  130,
 /*  3140 */   737,  125,  126,  136,  300,  151,  737,  148,  737,  737,
 /*  3150 */   132,  737,  196,  139,  135,  306,  160,  315,  156,  164,
 /*  3160 */   159,  236,  238,  244,  247,  120,  248,  242,  182,  356,
 /*  3170 */   737,  737,  737,  130,  737,  737,  737,  737,  300,  737,
 /*  3180 */   737,  737,  737,  737,  132,  737,  193,  139,  135,  306,
 /*  3190 */   160,  315,  156,  164,  159,  236,  238,  244,  247,  120,
 /*  3200 */   248,  242,  182,  356,  125,  126,  136,  737,  151,  737,
 /*  3210 */   148,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  3220 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  3230 */   737,  737,  737,  737,  737,  737,  130,  737,  125,  126,
 /*  3240 */   136,  300,  151,  737,  148,  737,  737,  132,  737,  330,
 /*  3250 */   139,  135,  306,  160,  315,  156,  164,  159,  236,  238,
 /*  3260 */   244,  247,  120,  248,  242,  182,  356,  737,  737,  737,
 /*  3270 */   130,  737,  125,  126,  136,  300,  151,  737,  148,  737,
 /*  3280 */   737,  132,  737,  359,  139,  135,  306,  160,  315,  156,
 /*  3290 */   164,  159,  236,  238,  244,  247,  120,  248,  242,  182,
 /*  3300 */   356,  737,  737,  737,  130,  737,  737,  737,  737,  300,
 /*  3310 */   737,  737,  737,  737,  737,  132,  737,  267,  139,  135,
 /*  3320 */   306,  160,  315,  156,  164,  159,  236,  238,  244,  247,
 /*  3330 */   120,  248,  242,  182,  356,  125,  126,  136,  737,  151,
 /*  3340 */   737,  148,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  3350 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  3360 */   737,  737,  737,  737,  737,  737,  737,  130,  737,  125,
 /*  3370 */   126,  136,  300,  151,  737,  148,  737,  737,  132,  737,
 /*  3380 */   199,  139,  135,  306,  160,  315,  156,  164,  159,  236,
 /*  3390 */   238,  244,  247,  120,  248,  242,  182,  356,  737,  737,
 /*  3400 */   737,  130,  737,  125,  126,  136,  300,  151,  737,  148,
 /*  3410 */   737,  737,  132,  737,  207,  139,  135,  306,  160,  315,
 /*  3420 */   156,  164,  159,  236,  238,  244,  247,  120,  248,  242,
 /*  3430 */   182,  356,  737,  737,  737,  130,  737,  737,  737,  737,
 /*  3440 */   300,  737,  737,  737,  737,  737,  132,  737,  185,  139,
 /*  3450 */   135,  306,  160,  315,  156,  164,  159,  236,  238,  244,
 /*  3460 */   247,  120,  248,  242,  182,  356,  125,  126,  136,  737,
 /*  3470 */   151,  737,  148,  737,  737,  737,  737,  737,  737,  737,
 /*  3480 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  3490 */   737,  737,  737,  737,  737,  737,  737,  737,  130,  737,
 /*  3500 */   125,  126,  136,  300,  151,  737,  148,  737,  737,  132,
 /*  3510 */   737,  219,  139,  135,  306,  160,  315,  156,  164,  159,
 /*  3520 */   236,  238,  244,  247,  120,  248,  242,  182,  356,  737,
 /*  3530 */   737,  737,  130,  737,  125,  126,  136,  300,  151,  737,
 /*  3540 */   148,  737,  737,  132,  737,  210,  139,  135,  306,  160,
 /*  3550 */   315,  156,  164,  159,  236,  238,  244,  247,  120,  248,
 /*  3560 */   242,  182,  356,  737,  737,  737,  130,  737,  737,  737,
 /*  3570 */   737,  300,  737,  737,  737,  737,  737,  132,  737,  202,
 /*  3580 */   139,  135,  306,  160,  315,  156,  164,  159,  236,  238,
 /*  3590 */   244,  247,  120,  248,  242,  182,  356,  125,  126,  136,
 /*  3600 */   737,  151,  737,  148,  737,  737,  737,  737,  737,  737,
 /*  3610 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  3620 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  130,
 /*  3630 */   737,  125,  126,  136,  300,  151,  737,  148,  737,  737,
 /*  3640 */   132,  737,  188,  139,  135,  306,  160,  315,  156,  164,
 /*  3650 */   159,  236,  238,  244,  247,  120,  248,  242,  182,  356,
 /*  3660 */   737,  737,  737,  130,  737,  125,  126,  136,  300,  151,
 /*  3670 */   737,  148,  737,  737,  132,  737,  270,  139,  135,  306,
 /*  3680 */   160,  315,  156,  164,  159,  236,  238,  244,  247,  120,
 /*  3690 */   248,  242,  182,  356,  737,  737,  737,  130,  737,  737,
 /*  3700 */   737,  737,  300,  737,  737,  737,  737,  737,  132,  737,
 /*  3710 */   224,  139,  135,  306,  160,  315,  156,  164,  159,  236,
 /*  3720 */   238,  244,  247,  120,  248,  242,  182,  356,  125,  126,
 /*  3730 */   136,  737,  151,  737,  148,  737,  737,  737,  737,  737,
 /*  3740 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  3750 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  3760 */   130,  737,  125,  126,  136,  300,  151,  737,  148,  737,
 /*  3770 */   737,  132,  737,  201,  139,  135,  306,  160,  315,  156,
 /*  3780 */   164,  159,  236,  238,  244,  247,  120,  248,  242,  182,
 /*  3790 */   356,  737,  737,  737,  130,  737,  125,  126,  136,  300,
 /*  3800 */   151,  737,  148,  737,  737,  132,  737,  216,  139,  135,
 /*  3810 */   306,  160,  315,  156,  164,  159,  236,  238,  244,  247,
 /*  3820 */   120,  248,  242,  182,  356,  737,  737,  737,  130,  737,
 /*  3830 */   737,  737,  737,  300,  737,  737,  737,  737,  737,  132,
 /*  3840 */   737,  198,  139,  135,  306,  160,  315,  156,  164,  159,
 /*  3850 */   236,  238,  244,  247,  120,  248,  242,  182,  356,  125,
 /*  3860 */   126,  136,  737,  151,  737,  148,  737,  737,  737,  737,
 /*  3870 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  3880 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  3890 */   737,  130,  737,  125,  126,  136,  300,  151,  737,  148,
 /*  3900 */   737,  737,  132,  737,  272,  139,  135,  306,  160,  315,
 /*  3910 */   156,  164,  159,  236,  238,  244,  247,  120,  248,  242,
 /*  3920 */   182,  356,  737,  737,  737,  130,  737,  125,  126,  136,
 /*  3930 */   300,  151,  737,  148,  737,  737,  132,  737,  197,  139,
 /*  3940 */   135,  306,  160,  315,  156,  164,  159,  236,  238,  244,
 /*  3950 */   247,  120,  248,  242,  182,  356,  737,  737,  737,  130,
 /*  3960 */   737,  737,  737,  737,  300,  737,  737,  737,  737,  737,
 /*  3970 */   132,  737,  273,  139,  135,  306,  160,  315,  156,  164,
 /*  3980 */   159,  236,  238,  244,  247,  120,  248,  242,  182,  356,
 /*  3990 */   125,  126,  136,  737,  151,  737,  148,  737,  737,  737,
 /*  4000 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  4010 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  4020 */   737,  737,  130,  737,  125,  126,  136,  300,  151,  737,
 /*  4030 */   148,  737,  737,  132,  737,  221,  139,  135,  306,  160,
 /*  4040 */   315,  156,  164,  159,  236,  238,  244,  247,  120,  248,
 /*  4050 */   242,  182,  356,  737,  737,  737,  130,  737,  125,  126,
 /*  4060 */   136,  300,  151,  737,  148,  737,  737,  132,  737,  387,
 /*  4070 */   139,  135,  306,  160,  315,  156,  164,  159,  236,  238,
 /*  4080 */   244,  247,  120,  248,  242,  182,  356,  737,  737,  737,
 /*  4090 */   130,  737,  737,  737,  737,  300,  737,  737,  737,  737,
 /*  4100 */   737,  132,  737,  259,  139,  135,  306,  160,  315,  156,
 /*  4110 */   164,  159,  236,  238,  244,  247,  120,  248,  242,  182,
 /*  4120 */   356,  125,  126,  136,  737,  151,  737,  148,  737,  737,
 /*  4130 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  4140 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  4150 */   737,  737,  737,  130,  737,  125,  126,  136,  300,  151,
 /*  4160 */   737,  148,  737,  737,  132,  737,  360,  139,  135,  306,
 /*  4170 */   160,  315,  156,  164,  159,  236,  238,  244,  247,  120,
 /*  4180 */   248,  242,  182,  356,  737,  737,  737,  130,  737,  125,
 /*  4190 */   126,  136,  300,  151,  737,  148,  737,  737,  132,  737,
 /*  4200 */   271,  139,  135,  306,  160,  315,  156,  164,  159,  236,
 /*  4210 */   238,  244,  247,  120,  248,  242,  182,  356,  737,  737,
 /*  4220 */   737,  130,  737,  737,  737,  737,  300,  737,  737,  737,
 /*  4230 */   737,  737,  132,  737,  187,  139,  135,  306,  160,  315,
 /*  4240 */   156,  164,  159,  236,  238,  244,  247,  120,  248,  242,
 /*  4250 */   182,  356,  125,  126,  136,  737,  151,  737,  148,  737,
 /*  4260 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  4270 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  4280 */   737,  737,  737,  737,  130,  737,  125,  126,  136,  300,
 /*  4290 */   151,  737,  148,  737,  737,  132,  737,  227,  139,  135,
 /*  4300 */   306,  160,  315,  156,  164,  159,  236,  238,  244,  247,
 /*  4310 */   120,  248,  242,  182,  356,  737,  737,  737,  130,  737,
 /*  4320 */   125,  126,  136,  300,  151,  737,  148,  737,  737,  132,
 /*  4330 */   737,  263,  139,  135,  306,  160,  315,  156,  164,  159,
 /*  4340 */   236,  238,  244,  247,  120,  248,  242,  182,  356,  737,
 /*  4350 */   737,  737,  130,  737,  737,  737,  737,  300,  737,  737,
 /*  4360 */   737,  737,  737,  132,  737,  275,  139,  135,  306,  160,
 /*  4370 */   315,  156,  164,  159,  236,  238,  244,  247,  120,  248,
 /*  4380 */   242,  182,  356,  186,   27,  280,  195,  737,  737,   39,
 /*  4390 */   106,  737,  114,  737,  737,   32,  737,  110,  301,  302,
 /*  4400 */   303,  304,  305,   93,   98,  102,  101,  100,   99,  737,
 /*  4410 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  4420 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  4430 */   737,  737,  143,  369,  737,  737,  125,  126,  136,  186,
 /*  4440 */    27,  280,  195,  737,  737,   39,  106,  737,  737,  737,
 /*  4450 */   737,   32,  462,  110,  301,  302,  303,  304,  305,   93,
 /*  4460 */    98,  102,  101,  100,   99,  737,  737,  737,  130,  737,
 /*  4470 */   737,  737,  737,  165,  737,  737,  737,  737,  737,  132,
 /*  4480 */   737,  737,  139,  135,  737,  737,  737,  737,  143,  369,
 /*  4490 */   125,  126,  136,  737,  737,  186,   27,  280,  195,  286,
 /*  4500 */   737,   39,  106,  737,  737,  737,  737,   32,  737,  110,
 /*  4510 */   301,  302,  303,  304,  305,   93,   98,  102,  101,  100,
 /*  4520 */    99,  737,  130,  737,  737,  737,  737,  183,  737,  737,
 /*  4530 */   737,  737,  737,  132,  737,  737,  139,  135,  737,  737,
 /*  4540 */   737,  737,  737,  737,  143,  369,  125,  126,  136,  737,
 /*  4550 */   737,  186,   27,  280,  195,  737,  737,   39,  106,  737,
 /*  4560 */   115,  737,  737,   32,  737,  110,  301,  302,  303,  304,
 /*  4570 */   305,   93,   98,  102,  101,  100,   99,  737,  130,  737,
 /*  4580 */   737,  737,  737,  257,  737,  737,  737,  737,  737,  132,
 /*  4590 */   737,  737,  139,  135,  737,  737,  737,  737,  737,  737,
 /*  4600 */   143,  369,  125,  126,  136,  737,  737,  186,   27,  280,
 /*  4610 */   195,  480,  737,   39,  106,  737,  737,  737,  737,   32,
 /*  4620 */   737,  110,  301,  302,  303,  304,  305,   93,   98,  102,
 /*  4630 */   101,  100,   99,  737,  130,  737,  737,  737,  737,  206,
 /*  4640 */   737,  737,  737,  737,  737,  132,  737,  737,  139,  135,
 /*  4650 */   737,  737,  737,  737,  737,  737,  143,  369,  737,  737,
 /*  4660 */   737,  737,  737,  186,   27,  280,  195,  737,  737,   39,
 /*  4670 */   106,  429,  737,  737,  737,   32,  737,  110,  301,  302,
 /*  4680 */   303,  304,  305,   93,   98,  102,  101,  100,   99,  737,
 /*  4690 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  4700 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  4710 */   737,  737,  143,  369,  737,  737,  737,  737,  737,  186,
 /*  4720 */    27,  280,  195,  737,  737,   39,  106,  427,  737,  737,
 /*  4730 */   737,   32,  737,  110,  301,  302,  303,  304,  305,   93,
 /*  4740 */    98,  102,  101,  100,   99,  737,  737,  737,  737,  737,
 /*  4750 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  4760 */   737,  737,  737,  737,  737,  737,  737,  737,  143,  369,
 /*  4770 */   737,  737,  737,  737,  737,  186,   27,  280,  195,  737,
 /*  4780 */   737,   39,  106,  737,  737,  737,  737,   32,  213,  110,
 /*  4790 */   301,  302,  303,  304,  305,   93,   98,  102,  101,  100,
 /*  4800 */    99,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  4810 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  4820 */   737,  737,  737,  737,  143,  737,  737,  737,  737,  737,
 /*  4830 */   737,  186,   27,  280,  195,  737,  737,   39,  106,  737,
 /*  4840 */   737,  737,  737,   32,  737,  110,  301,  302,  303,  304,
 /*  4850 */   305,   93,   98,  102,  101,  100,   99,  737,  737,  737,
 /*  4860 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  4870 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  4880 */   143,  369,  737,  737,  737,  737,  737,  186,   27,  280,
 /*  4890 */   195,  737,  357,   39,  106,  737,  737,  737,  737,   32,
 /*  4900 */   737,  110,  301,  302,  303,  304,  305,   93,   98,  102,
 /*  4910 */   101,  100,   99,  737,  737,  737,  737,  737,  737,  737,
 /*  4920 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  4930 */   737,  737,  737,  737,  737,  737,  143,  737,  737,  737,
 /*  4940 */   737,  737,  737,  186,   27,  280,  195,  737,  737,   39,
 /*  4950 */   106,  737,  737,  737,  737,   32,  218,  110,  301,  302,
 /*  4960 */   303,  304,  305,   93,   98,  102,  101,  100,   99,  737,
 /*  4970 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  4980 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  4990 */   737,  737,  143,  737,  737,  737,  737,  737,  737,  186,
 /*  5000 */    27,  280,  195,  737,  737,   39,  106,  737,  737,  737,
 /*  5010 */   737,   32,  255,  110,  301,  302,  303,  304,  305,   93,
 /*  5020 */    98,  102,  101,  100,   99,  737,  737,  737,  737,  737,
 /*  5030 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  5040 */   737,  737,  737,  737,  737,  737,  737,  737,  143,  737,
 /*  5050 */   737,  737,  737,  737,  737,  186,   27,  280,  195,  737,
 /*  5060 */   737,   39,  105,  737,  142,  737,  737,   32,  737,  110,
 /*  5070 */   301,  302,  303,  304,  305,   93,   98,  102,  101,  100,
 /*  5080 */    99,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  5090 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  5100 */   737,  737,  737,  737,  143,  737,  737,  737,  737,  737,
 /*  5110 */   737,  186,   27,  280,  195,  737,  737,   39,  106,  737,
 /*  5120 */   737,  737,  737,   32,  191,  110,  301,  302,  303,  304,
 /*  5130 */   305,   93,   98,  102,  101,  100,   99,  737,  737,  737,
 /*  5140 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  5150 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  5160 */   143,  737,  737,  737,  737,  737,  737,  186,   27,  280,
 /*  5170 */   195,  737,  737,   39,  106,  737,  737,  737,  737,   32,
 /*  5180 */   189,  110,  301,  302,  303,  304,  305,   93,   98,  102,
 /*  5190 */   101,  100,   99,  737,  737,  737,  737,  737,  737,  737,
 /*  5200 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  5210 */   737,  737,  737,  737,  737,  737,  143,  737,  737,  737,
 /*  5220 */   737,  737,  737,  186,   27,  280,  195,  737,  737,   39,
 /*  5230 */   106,  737,  737,  737,  737,   32,  226,  110,  301,  302,
 /*  5240 */   303,  304,  305,   93,   98,  102,  101,  100,   99,  737,
 /*  5250 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  5260 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  5270 */   737,  737,  143,  737,  737,  737,  737,  737,  737,  186,
 /*  5280 */    27,  280,  195,  737,  737,   39,  106,  737,  737,  737,
 /*  5290 */   737,   32,  243,  110,  301,  302,  303,  304,  305,   93,
 /*  5300 */    98,  102,  101,  100,   99,  737,  737,  125,  126,  136,
 /*  5310 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  5320 */   737,  737,  737,  737,  737,  737,  737,  737,  143,  737,
 /*  5330 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  130,
 /*  5340 */   737,  737,  737,  737,  300,  737,  737,  737,  737,  737,
 /*  5350 */   132,  737,  737,  139,  135,  306,  160,  315,  156,  164,
 /*  5360 */   159,  236,  238,  244,  247,  120,  248,  233,  186,   27,
 /*  5370 */   280,  195,  737,  737,   39,  106,  125,  126,  136,  737,
 /*  5380 */    32,  737,  110,  301,  302,  303,  304,  305,   93,   98,
 /*  5390 */   102,  101,  100,   99,  737,  737,  737,  737,  737,  737,
 /*  5400 */   737,  737,  737,  737,  737,  737,  737,  737,  130,  737,
 /*  5410 */   737,  737,  737,  300,  737,  737,  737,  143,  737,  132,
 /*  5420 */   737,  737,  139,  135,  306,  160,  315,  156,  164,  159,
 /*  5430 */   236,  238,  244,  247,  120,  240,  737,  125,  126,  136,
 /*  5440 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  5450 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  5460 */   737,  737,  737,  737,  125,  126,  136,  737,  737,  130,
 /*  5470 */   737,  737,  737,  737,  300,  737,  737,  737,  737,  737,
 /*  5480 */   132,  737,  737,  139,  135,  306,  160,  315,  156,  164,
 /*  5490 */   159,  236,  238,  244,  247,  119,  130,  125,  126,  136,
 /*  5500 */   737,  300,  737,  737,  737,  737,  737,  132,  737,  737,
 /*  5510 */   139,  135,  306,  160,  315,  156,  164,  159,  236,  238,
 /*  5520 */   244,  250,  125,  126,  136,  737,  737,  737,  737,  130,
 /*  5530 */   737,  737,  737,  737,  300,  737,  737,  737,  737,  737,
 /*  5540 */   132,  737,  737,  139,  135,  306,  160,  315,  156,  164,
 /*  5550 */   159,  236,  238,  249,  130,  737,  737,  737,  737,  300,
 /*  5560 */   737,  737,  737,  737,  737,  132,  737,  737,  139,  135,
 /*  5570 */   306,  160,  315,  156,  164,  159,  236,  246,
};
static const YYCODETYPE yy_lookahead[] = {
 /*     0 */    83,   84,   85,   86,   87,   88,   89,    8,   14,    8,
 /*    10 */    11,   17,   93,   14,   15,   98,   10,  100,  101,  102,
 /*    20 */   103,  104,  105,  106,  107,  108,  109,   16,   17,  112,
 /*    30 */    28,   29,  115,    6,    7,  118,    9,  120,    6,  122,
 /*    40 */    93,  124,  125,  126,   12,   18,  129,  130,  131,  132,
 /*    50 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*    60 */   143,  144,  145,   92,  147,  148,  149,  150,  116,  152,
 /*    70 */   153,  115,  155,   83,   84,   85,    8,   87,    8,   89,
 /*    80 */   116,   11,  126,   56,   14,   15,   18,   10,   98,   12,
 /*    90 */   100,  101,  102,  103,  104,  105,  106,  107,  108,  109,
 /*   100 */    16,   17,  112,    6,    7,  115,    9,   16,   17,   12,
 /*   110 */   120,   31,   32,   33,   34,   18,  126,  113,  114,  129,
 /*   120 */   130,  131,  132,  133,  134,  135,  136,  137,  138,  139,
 /*   130 */   140,  141,  142,  143,  144,  145,  116,  147,  148,  149,
 /*   140 */   150,    8,  152,  153,  116,  155,   83,   84,   85,  116,
 /*   150 */    87,   18,   89,   56,  116,   35,   36,   37,  116,    6,
 /*   160 */     7,    8,   99,  100,  101,  102,  103,  104,  105,  106,
 /*   170 */   107,  108,  109,   20,    7,  112,    9,  116,  115,   12,
 /*   180 */    13,  116,    7,  120,    9,   18,   90,   12,   13,  126,
 /*   190 */    90,   91,  129,  130,  131,  132,  133,  134,  135,  136,
 /*   200 */   137,  138,  139,  140,  141,  142,  143,  144,  145,   12,
 /*   210 */   147,  148,  149,  150,    8,   12,  153,  154,  155,   83,
 /*   220 */    84,   85,    8,   87,   18,   89,  110,  111,   90,   91,
 /*   230 */    13,   99,   18,   16,   17,   99,  100,  101,  102,  103,
 /*   240 */   104,  105,  106,  107,  108,  109,   90,   91,  112,    6,
 /*   250 */     7,  115,    9,    7,    6,    9,  120,    4,    5,   56,
 /*   260 */    12,   18,  126,   90,   18,  129,  130,  131,  132,  133,
 /*   270 */   134,  135,  136,  137,  138,  139,  140,  141,  142,  143,
 /*   280 */   144,  145,    7,  147,  148,  149,  150,  110,  111,  153,
 /*   290 */   154,  155,   83,   84,   85,    8,   87,   80,   89,   56,
 /*   300 */    16,   17,   56,    4,    5,   18,  116,   98,  116,  100,
 /*   310 */   101,  102,  103,  104,  105,  106,  107,  108,  109,    6,
 /*   320 */     7,  112,    9,    8,  115,    6,    7,   90,    9,  120,
 /*   330 */     6,   18,  114,   18,  114,  126,   12,   18,  129,  130,
 /*   340 */   131,  132,  133,  134,  135,  136,  137,  138,  139,  140,
 /*   350 */   141,  142,  143,  144,  145,  114,  147,  148,  149,  150,
 /*   360 */     8,  152,  153,  114,  155,   83,   84,   85,  114,   87,
 /*   370 */    18,   89,   26,   27,    7,    8,   13,   54,   55,   16,
 /*   380 */    17,   99,  100,  101,  102,  103,  104,  105,  106,  107,
 /*   390 */   108,  109,  119,    7,  112,    9,    7,  115,    9,    7,
 /*   400 */   119,    9,  120,   12,   18,    7,   10,   18,  126,   14,
 /*   410 */    18,  129,  130,  131,  132,  133,  134,  135,  136,  137,
 /*   420 */   138,  139,  140,  141,  142,  143,  144,  145,   19,  147,
 /*   430 */   148,  149,  150,   10,   56,  153,  154,  155,   83,   84,
 /*   440 */    85,   14,   87,   80,   89,   12,   56,   10,   10,   55,
 /*   450 */    19,   10,   10,   98,   19,  100,  101,  102,  103,  104,
 /*   460 */   105,  106,  107,  108,  109,   12,    7,  112,    9,    7,
 /*   470 */   115,    9,    7,   19,    9,  120,   10,   18,    7,   11,
 /*   480 */    18,  126,   13,   18,  129,  130,  131,  132,  133,  134,
 /*   490 */   135,  136,  137,  138,  139,  140,  141,  142,  143,  144,
 /*   500 */   145,   12,  147,  148,  149,  150,   14,  152,  153,   14,
 /*   510 */   155,   83,   84,   85,   17,   87,   13,   89,    8,   14,
 /*   520 */    56,   14,   14,   19,   13,   19,   56,   99,  100,  101,
 /*   530 */   102,  103,  104,  105,  106,  107,  108,  109,   56,    7,
 /*   540 */   112,    9,    7,  115,    9,    7,   13,    9,  120,   10,
 /*   550 */    18,   10,    7,   18,  126,   19,   18,  129,  130,  131,
 /*   560 */   132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
 /*   570 */   142,  143,  144,  145,   56,  147,  148,  149,  150,   13,
 /*   580 */    10,  153,  154,  155,   83,   84,   85,   14,   87,    7,
 /*   590 */    89,   69,   14,   53,   10,    7,   38,   10,   39,    7,
 /*   600 */    99,  100,  101,  102,  103,  104,  105,  106,  107,  108,
 /*   610 */   109,   56,   52,  112,   17,   40,  115,   41,    7,   14,
 /*   620 */    14,  120,   10,   56,   56,   17,   19,  126,   19,   13,
 /*   630 */   129,  130,  131,  132,  133,  134,  135,  136,  137,  138,
 /*   640 */   139,  140,  141,  142,  143,  144,  145,   10,  147,  148,
 /*   650 */   149,  150,   13,   17,  153,  154,  155,   83,   84,   85,
 /*   660 */     7,   87,   19,   89,   10,   19,   14,   12,   19,   19,
 /*   670 */    19,   10,   14,   99,  100,  101,  102,  103,  104,  105,
 /*   680 */   106,  107,  108,  109,   19,   14,  112,  158,  158,  115,
 /*   690 */   158,  158,  158,  158,  120,  158,  158,  158,  158,  158,
 /*   700 */   126,  158,  158,  129,  130,  131,  132,  133,  134,  135,
 /*   710 */   136,  137,  138,  139,  140,  141,  142,  143,  144,  145,
 /*   720 */   158,  147,  148,  149,  150,  158,  158,  153,  154,  155,
 /*   730 */    83,   84,   85,  158,   87,  158,   89,  158,  158,  158,
 /*   740 */   158,  158,  158,  158,  158,  158,   99,  100,  101,  102,
 /*   750 */   103,  104,  105,  106,  107,  108,  109,  158,  158,  112,
 /*   760 */   158,  158,  115,  158,  158,  158,  158,  120,  158,  158,
 /*   770 */   158,  158,  158,  126,  158,  158,  129,  130,  131,  132,
 /*   780 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*   790 */   143,  144,  145,  158,  147,  148,  149,  150,  158,  158,
 /*   800 */   153,  154,  155,   83,   84,   85,  158,   87,  158,   89,
 /*   810 */   158,  158,  158,  158,  158,  158,  158,  158,   98,  158,
 /*   820 */   100,  101,  102,  103,  104,  105,  106,  107,  108,  109,
 /*   830 */   158,  158,  112,  158,  158,  115,  158,  158,  158,  158,
 /*   840 */   120,  158,  158,  158,  158,  158,  126,  158,  158,  129,
 /*   850 */   130,  131,  132,  133,  134,  135,  136,  137,  138,  139,
 /*   860 */   140,  141,  142,  143,  144,  145,  158,  147,  148,  149,
 /*   870 */   150,  158,  152,  153,  158,  155,   83,   84,   85,  158,
 /*   880 */    87,  158,   89,  158,  158,  158,  158,  158,  158,  158,
 /*   890 */   158,   98,  158,  100,  101,  102,  103,  104,  105,  106,
 /*   900 */   107,  108,  109,  158,  158,  112,  158,  158,  115,  158,
 /*   910 */   158,  158,  158,  120,  158,  158,  158,  158,  158,  126,
 /*   920 */   158,  158,  129,  130,  131,  132,  133,  134,  135,  136,
 /*   930 */   137,  138,  139,  140,  141,  142,  143,  144,  145,  158,
 /*   940 */   147,  148,  149,  150,  158,  152,  153,    1,  155,    3,
 /*   950 */   158,  158,    6,    7,    8,    9,   10,  158,   12,   13,
 /*   960 */    14,   15,  158,  158,   18,  158,   20,   21,   22,   23,
 /*   970 */    24,   25,   26,   27,   28,   29,   30,   31,   42,   43,
 /*   980 */    44,   45,   46,   47,   48,   49,   50,   51,  158,    6,
 /*   990 */     7,    8,  158,  158,  158,   12,  158,  158,  158,  158,
 /*  1000 */   158,   55,   56,   20,  158,  158,  158,  158,  158,  158,
 /*  1010 */   158,  158,  158,  158,  158,   69,   70,   71,   72,   73,
 /*  1020 */    74,   75,   76,   77,   78,   79,    1,   81,    3,  158,
 /*  1030 */   158,    6,    7,    8,    9,  158,   11,   12,   13,   14,
 /*  1040 */    15,  158,  158,   18,  158,   20,   21,   22,   23,   24,
 /*  1050 */    25,   26,   27,   28,   29,   30,   31,  158,  158,  158,
 /*  1060 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  1070 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  1080 */    55,   56,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  1090 */   158,  158,  158,  158,   69,   70,   71,   72,   73,   74,
 /*  1100 */    75,   76,   77,   78,   79,    1,   81,    3,  158,  158,
 /*  1110 */     6,    7,    8,    9,  158,   11,   12,   13,   14,   15,
 /*  1120 */   158,  158,   18,  158,   20,   21,   22,   23,   24,   25,
 /*  1130 */    26,   27,   28,   29,   30,   31,  158,  158,  158,  158,
 /*  1140 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  1150 */   158,  158,  158,  158,  158,  158,  158,  158,  158,   55,
 /*  1160 */    56,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  1170 */   158,  158,  158,   69,   70,   71,   72,   73,   74,   75,
 /*  1180 */    76,   77,   78,   79,    1,   81,    3,  158,  158,    6,
 /*  1190 */     7,    8,    9,  158,   11,   12,   13,   14,   15,  158,
 /*  1200 */   158,   18,  158,   20,   21,   22,   23,   24,   25,   26,
 /*  1210 */    27,   28,   29,   30,   31,  158,  158,  158,  158,  158,
 /*  1220 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  1230 */   158,  158,  158,  158,  158,  158,  158,  158,   55,   56,
 /*  1240 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  1250 */   158,  158,   69,   70,   71,   72,   73,   74,   75,   76,
 /*  1260 */    77,   78,   79,  158,   81,    0,    1,  158,    3,  158,
 /*  1270 */   158,    6,    7,    8,    9,  158,  158,   12,   13,   14,
 /*  1280 */    15,  158,  158,   18,  158,   20,   21,   22,   23,   24,
 /*  1290 */    25,   26,   27,   28,   29,   30,   31,  158,  158,  158,
 /*  1300 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  1310 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  1320 */    55,   56,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  1330 */   158,  158,  158,  158,   69,   70,   71,   72,   73,   74,
 /*  1340 */    75,   76,   77,   78,   79,    1,   81,    3,  158,  158,
 /*  1350 */     6,    7,    8,    9,  158,   11,   12,   13,   14,   15,
 /*  1360 */   158,  158,   18,  158,   20,   21,   22,   23,   24,   25,
 /*  1370 */    26,   27,   28,   29,   30,   31,  158,  158,  158,  158,
 /*  1380 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  1390 */   158,  158,  158,  158,  158,  158,  158,  158,  158,   55,
 /*  1400 */    56,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  1410 */   158,  158,  158,   69,   70,   71,   72,   73,   74,   75,
 /*  1420 */    76,   77,   78,   79,    1,   81,    3,  158,  158,    6,
 /*  1430 */     7,    8,    9,  158,  158,   12,   13,   83,   84,   85,
 /*  1440 */   158,   18,  158,   20,   21,   22,   23,   24,   25,   26,
 /*  1450 */    27,   28,   29,   30,   31,  158,  158,  158,  158,  158,
 /*  1460 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  115,
 /*  1470 */   158,  158,  158,  158,  120,  158,  158,  158,   55,   56,
 /*  1480 */   126,  158,  158,  129,  130,  131,  132,  133,  134,  135,
 /*  1490 */   136,  137,   69,   70,   71,   72,   73,   74,   75,   76,
 /*  1500 */    77,   78,   79,    1,   81,    3,  158,  158,    6,    7,
 /*  1510 */     8,    9,  158,   83,   12,   13,   86,  158,   88,  158,
 /*  1520 */    18,  158,   20,   21,   22,   23,   24,   25,   26,   27,
 /*  1530 */    28,   29,   30,   31,  158,  158,  158,  158,  158,  158,
 /*  1540 */   158,  158,  158,  158,  158,  115,  158,  158,  118,  158,
 /*  1550 */   158,  121,  122,  123,  124,  125,  158,   55,   56,  158,
 /*  1560 */   158,  158,   83,   84,   85,  158,   87,  158,   89,  158,
 /*  1570 */   158,   69,   70,   71,   72,   73,   74,   75,   76,   77,
 /*  1580 */    78,   79,  158,   81,  158,  158,  158,  158,  158,  158,
 /*  1590 */   158,  158,  158,  158,  115,  158,  117,  158,  158,  120,
 /*  1600 */   158,  158,  158,  158,  158,  126,  127,  128,  129,  130,
 /*  1610 */   131,  132,  133,  134,  135,  136,  137,  138,  139,  140,
 /*  1620 */   141,  142,  143,  144,  145,  146,  147,  158,  158,  158,
 /*  1630 */   151,  158,  158,  158,  158,  156,  158,    6,    7,    8,
 /*  1640 */   158,   83,   84,   85,  158,   87,  158,   89,  158,  158,
 /*  1650 */   158,   20,   21,   22,   23,   24,   25,   26,   27,   28,
 /*  1660 */    29,   30,   31,  158,  158,  158,  158,  158,  158,  158,
 /*  1670 */   158,  158,  158,  115,  158,  117,   16,   17,  120,  158,
 /*  1680 */   158,  158,  158,  158,  126,  127,  128,  129,  130,  131,
 /*  1690 */   132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
 /*  1700 */   142,  143,  144,  145,  146,  147,   83,   84,   85,  158,
 /*  1710 */    87,  158,   89,  158,  158,  157,  158,   57,   58,   59,
 /*  1720 */    60,   61,   62,   63,   64,   65,   66,   67,   68,  158,
 /*  1730 */   158,  158,  158,  158,  158,  158,  158,  158,  115,  158,
 /*  1740 */   117,  158,  158,  120,   83,   84,   85,  158,  158,  126,
 /*  1750 */   127,  128,  129,  130,  131,  132,  133,  134,  135,  136,
 /*  1760 */   137,  138,  139,  140,  141,  142,  143,  144,  145,  146,
 /*  1770 */   147,   83,   84,   85,  151,   87,  115,   89,  158,  158,
 /*  1780 */   158,  120,  158,  158,  158,  158,  158,  126,  158,  158,
 /*  1790 */   129,  130,  131,  132,  133,  134,  135,  136,  158,  158,
 /*  1800 */   158,  158,  158,  115,  158,  117,  158,  158,  120,   16,
 /*  1810 */    17,  158,  158,  158,  126,  127,  128,  129,  130,  131,
 /*  1820 */   132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
 /*  1830 */   142,  143,  144,  145,  146,  147,   83,   84,   85,  151,
 /*  1840 */    87,  158,   89,  158,  158,  158,  158,  158,  158,  158,
 /*  1850 */    57,   58,   59,   60,   61,   62,   63,   64,   65,   66,
 /*  1860 */    67,   68,  158,  158,  158,  158,  158,  158,  115,  158,
 /*  1870 */   117,  158,  158,  120,   83,   84,   85,  158,  158,  126,
 /*  1880 */   127,  128,  129,  130,  131,  132,  133,  134,  135,  136,
 /*  1890 */   137,  138,  139,  140,  141,  142,  143,  144,  145,  146,
 /*  1900 */   147,   83,   84,   85,  158,   87,  115,   89,  158,  158,
 /*  1910 */   157,  120,  158,  158,  158,  158,  158,  126,  158,  158,
 /*  1920 */   129,  130,  131,  132,  133,  134,  135,  158,  158,  158,
 /*  1930 */   158,  158,  158,  115,  158,  117,  158,  158,  120,   83,
 /*  1940 */    84,   85,  158,  158,  126,  127,  128,  129,  130,  131,
 /*  1950 */   132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
 /*  1960 */   142,  143,  144,  145,  146,  147,   83,   84,   85,  151,
 /*  1970 */    87,  115,   89,  158,  158,  158,  120,  158,  158,  158,
 /*  1980 */   158,  158,  126,  158,  158,  129,  130,  131,  132,  133,
 /*  1990 */   134,  135,  158,  158,  158,  158,  158,  158,  115,  158,
 /*  2000 */   117,  158,  158,  120,   83,   84,   85,  158,  158,  126,
 /*  2010 */   127,  128,  129,  130,  131,  132,  133,  134,  135,  136,
 /*  2020 */   137,  138,  139,  140,  141,  142,  143,  144,  145,  146,
 /*  2030 */   147,   83,   84,   85,  151,   87,  115,   89,  158,  158,
 /*  2040 */   158,  120,  158,  158,  158,  158,  158,  126,  158,  158,
 /*  2050 */   129,  130,  131,  132,  133,  134,  135,  158,  158,  158,
 /*  2060 */   158,  158,  158,  115,  158,  117,  158,  158,  120,   83,
 /*  2070 */    84,   85,  158,  158,  126,  127,  128,  129,  130,  131,
 /*  2080 */   132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
 /*  2090 */   142,  143,  144,  145,  146,  147,   83,   84,   85,  158,
 /*  2100 */    87,  115,   89,  158,  158,  158,  120,  158,  158,  158,
 /*  2110 */   158,  158,  126,  158,  158,  129,  130,  131,  132,  133,
 /*  2120 */   134,  158,  158,  158,  158,  158,  158,  158,  115,  158,
 /*  2130 */   117,  158,  158,  120,   83,   84,   85,  158,  158,  126,
 /*  2140 */   127,  128,  129,  130,  131,  132,  133,  134,  135,  136,
 /*  2150 */   137,  138,  139,  140,  141,  142,  143,  144,  145,  146,
 /*  2160 */   147,   83,   84,   85,  158,   87,  115,   89,  158,  158,
 /*  2170 */   158,  120,  158,  158,  158,  158,  158,  126,  158,  158,
 /*  2180 */   129,  130,  131,  132,  133,  134,  158,  158,  158,  158,
 /*  2190 */   158,  158,  158,  115,  158,  117,  158,  158,  120,   83,
 /*  2200 */    84,   85,  158,  158,  126,  127,  128,  129,  130,  131,
 /*  2210 */   132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
 /*  2220 */   142,  143,  144,  145,  146,  147,   83,   84,   85,  158,
 /*  2230 */    87,  115,   89,  158,  158,  158,  120,  158,  158,  158,
 /*  2240 */   158,  158,  126,  158,  158,  129,  130,  131,  132,  133,
 /*  2250 */   158,  158,  158,  158,  158,  158,  158,  158,  115,  158,
 /*  2260 */   117,  158,  158,  120,   83,   84,   85,  158,  158,  126,
 /*  2270 */   127,  128,  129,  130,  131,  132,  133,  134,  135,  136,
 /*  2280 */   137,  138,  139,  140,  141,  142,  143,  144,  145,  146,
 /*  2290 */   147,   83,   84,   85,  158,   87,  115,   89,  158,  158,
 /*  2300 */   158,  120,   94,   95,  158,  158,  158,  126,  158,  158,
 /*  2310 */   129,  130,  131,  132,  133,  158,  158,  158,  158,  158,
 /*  2320 */   158,  158,  158,  115,  158,  158,  158,  158,  120,   83,
 /*  2330 */    84,   85,  158,  158,  126,  158,  128,  129,  130,  131,
 /*  2340 */   132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
 /*  2350 */   142,  143,  144,  145,  158,  147,   83,   84,   85,  158,
 /*  2360 */    87,  115,   89,  158,  158,  158,  120,  158,  158,  158,
 /*  2370 */   158,  158,  126,  158,  158,  129,  130,  131,  132,  133,
 /*  2380 */   158,  158,  158,  158,  158,  158,  158,  158,  115,  158,
 /*  2390 */   117,  158,  158,  120,   83,   84,   85,  158,  158,  126,
 /*  2400 */   158,  128,  129,  130,  131,  132,  133,  134,  135,  136,
 /*  2410 */   137,  138,  139,  140,  141,  142,  143,  144,  145,  146,
 /*  2420 */   147,   83,   84,   85,  158,   87,  115,   89,  158,  158,
 /*  2430 */   158,  120,  158,  158,  158,  158,  158,  126,  158,  158,
 /*  2440 */   129,  130,  131,  132,  133,  158,  158,  158,  158,  158,
 /*  2450 */   158,  158,  158,  115,  158,  117,  158,  158,  120,   83,
 /*  2460 */    84,   85,  158,  158,  126,  158,  128,  129,  130,  131,
 /*  2470 */   132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
 /*  2480 */   142,  143,  144,  145,  146,  147,   83,   84,   85,  158,
 /*  2490 */    87,  115,   89,  158,  158,  158,  120,  158,  158,  158,
 /*  2500 */   158,  158,  126,  158,  158,  129,  130,  131,  132,  133,
 /*  2510 */   158,  158,  158,  158,  158,  158,  158,  158,  115,  158,
 /*  2520 */   117,  158,  158,  120,   83,   84,   85,  158,  158,  126,
 /*  2530 */   158,  128,  129,  130,  131,  132,  133,  134,  135,  136,
 /*  2540 */   137,  138,  139,  140,  141,  142,  143,  144,  145,  146,
 /*  2550 */   147,   83,   84,   85,  158,   87,  115,   89,  158,  158,
 /*  2560 */   158,  120,  158,  158,  158,  158,  158,  126,  158,  158,
 /*  2570 */   129,  130,  131,  132,  133,  158,  158,  158,  158,  158,
 /*  2580 */   158,  158,  158,  115,  158,  117,  158,  158,  120,   83,
 /*  2590 */    84,   85,  158,  158,  126,  158,  128,  129,  130,  131,
 /*  2600 */   132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
 /*  2610 */   142,  143,  144,  145,  146,  147,   83,   84,   85,  158,
 /*  2620 */    87,  115,   89,  158,  158,  158,  120,  158,  158,  158,
 /*  2630 */   158,  158,  126,  158,  158,  129,  130,  131,  132,  133,
 /*  2640 */   158,  158,  158,  158,  158,  158,  158,  158,  115,  158,
 /*  2650 */   117,  158,  158,  120,   83,   84,   85,  158,  158,  126,
 /*  2660 */   158,  128,  129,  130,  131,  132,  133,  134,  135,  136,
 /*  2670 */   137,  138,  139,  140,  141,  142,  143,  144,  145,  146,
 /*  2680 */   147,   83,   84,   85,  158,   87,  115,   89,  158,  158,
 /*  2690 */   158,  120,  158,  158,  158,  158,  158,  126,  158,  158,
 /*  2700 */   129,  130,  131,  132,  133,  158,  158,  158,  158,  158,
 /*  2710 */   158,  158,  158,  115,  158,  117,  158,  158,  120,   83,
 /*  2720 */    84,   85,  158,  158,  126,  158,  128,  129,  130,  131,
 /*  2730 */   132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
 /*  2740 */   142,  143,  144,  145,  146,  147,   83,   84,   85,  158,
 /*  2750 */    87,  115,   89,  158,  158,  158,  120,  158,  158,  158,
 /*  2760 */   158,  158,  126,  158,  158,  129,  130,  131,  132,  133,
 /*  2770 */   158,  158,  158,  158,  158,  158,  158,  158,  115,  158,
 /*  2780 */   117,  158,  158,  120,   83,   84,   85,  158,  158,  126,
 /*  2790 */   158,  128,  129,  130,  131,  132,  133,  134,  135,  136,
 /*  2800 */   137,  138,  139,  140,  141,  142,  143,  144,  145,  146,
 /*  2810 */   147,   83,   84,   85,  158,   87,  115,   89,  158,  158,
 /*  2820 */   158,  120,  158,  158,  158,  158,  158,  126,  158,  158,
 /*  2830 */   129,  130,  131,  132,  133,  158,  158,  158,  158,  158,
 /*  2840 */   158,  158,  158,  115,  158,  117,  158,  158,  120,   83,
 /*  2850 */    84,   85,  158,  158,  126,  158,  128,  129,  130,  131,
 /*  2860 */   132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
 /*  2870 */   142,  143,  144,  145,  146,  147,   83,   84,   85,  158,
 /*  2880 */    87,  115,   89,  158,  158,  158,  120,  158,  158,   96,
 /*  2890 */    97,  158,  126,  158,  158,  129,  130,  158,  158,  158,
 /*  2900 */   158,  158,  158,   13,  158,  158,   16,   17,  115,  158,
 /*  2910 */   158,  158,  158,  120,  158,  158,  158,  158,  158,  126,
 /*  2920 */   158,  128,  129,  130,  131,  132,  133,  134,  135,  136,
 /*  2930 */   137,  138,  139,  140,  141,  142,  143,  144,  145,  158,
 /*  2940 */    83,   84,   85,  158,   87,  158,   89,   57,   58,   59,
 /*  2950 */    60,   61,   62,   63,   64,   65,   66,   67,   68,  158,
 /*  2960 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  2970 */    80,  158,  115,  158,   83,   84,   85,  120,   87,  158,
 /*  2980 */    89,  158,  158,  126,  158,  128,  129,  130,  131,  132,
 /*  2990 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*  3000 */   143,  144,  145,  146,  158,  158,  115,  158,   83,   84,
 /*  3010 */    85,  120,   87,  158,   89,  158,  158,  126,  158,  128,
 /*  3020 */   129,  130,  131,  132,  133,  134,  135,  136,  137,  138,
 /*  3030 */   139,  140,  141,  142,  143,  144,  145,  158,  147,  158,
 /*  3040 */   115,  158,  158,  158,  158,  120,  158,  158,  158,  158,
 /*  3050 */   158,  126,  158,  128,  129,  130,  131,  132,  133,  134,
 /*  3060 */   135,  136,  137,  138,  139,  140,  141,  142,  143,  144,
 /*  3070 */   145,  158,  147,   83,   84,   85,  158,   87,  158,   89,
 /*  3080 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  3090 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  3100 */   158,  158,  158,  158,  158,  115,  158,   83,   84,   85,
 /*  3110 */   120,   87,  158,   89,  158,  158,  126,  158,  128,  129,
 /*  3120 */   130,  131,  132,  133,  134,  135,  136,  137,  138,  139,
 /*  3130 */   140,  141,  142,  143,  144,  145,  158,  147,  158,  115,
 /*  3140 */   158,   83,   84,   85,  120,   87,  158,   89,  158,  158,
 /*  3150 */   126,  158,  128,  129,  130,  131,  132,  133,  134,  135,
 /*  3160 */   136,  137,  138,  139,  140,  141,  142,  143,  144,  145,
 /*  3170 */   158,  158,  158,  115,  158,  158,  158,  158,  120,  158,
 /*  3180 */   158,  158,  158,  158,  126,  158,  128,  129,  130,  131,
 /*  3190 */   132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
 /*  3200 */   142,  143,  144,  145,   83,   84,   85,  158,   87,  158,
 /*  3210 */    89,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  3220 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  3230 */   158,  158,  158,  158,  158,  158,  115,  158,   83,   84,
 /*  3240 */    85,  120,   87,  158,   89,  158,  158,  126,  158,  128,
 /*  3250 */   129,  130,  131,  132,  133,  134,  135,  136,  137,  138,
 /*  3260 */   139,  140,  141,  142,  143,  144,  145,  158,  158,  158,
 /*  3270 */   115,  158,   83,   84,   85,  120,   87,  158,   89,  158,
 /*  3280 */   158,  126,  158,  128,  129,  130,  131,  132,  133,  134,
 /*  3290 */   135,  136,  137,  138,  139,  140,  141,  142,  143,  144,
 /*  3300 */   145,  158,  158,  158,  115,  158,  158,  158,  158,  120,
 /*  3310 */   158,  158,  158,  158,  158,  126,  158,  128,  129,  130,
 /*  3320 */   131,  132,  133,  134,  135,  136,  137,  138,  139,  140,
 /*  3330 */   141,  142,  143,  144,  145,   83,   84,   85,  158,   87,
 /*  3340 */   158,   89,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  3350 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  3360 */   158,  158,  158,  158,  158,  158,  158,  115,  158,   83,
 /*  3370 */    84,   85,  120,   87,  158,   89,  158,  158,  126,  158,
 /*  3380 */   128,  129,  130,  131,  132,  133,  134,  135,  136,  137,
 /*  3390 */   138,  139,  140,  141,  142,  143,  144,  145,  158,  158,
 /*  3400 */   158,  115,  158,   83,   84,   85,  120,   87,  158,   89,
 /*  3410 */   158,  158,  126,  158,  128,  129,  130,  131,  132,  133,
 /*  3420 */   134,  135,  136,  137,  138,  139,  140,  141,  142,  143,
 /*  3430 */   144,  145,  158,  158,  158,  115,  158,  158,  158,  158,
 /*  3440 */   120,  158,  158,  158,  158,  158,  126,  158,  128,  129,
 /*  3450 */   130,  131,  132,  133,  134,  135,  136,  137,  138,  139,
 /*  3460 */   140,  141,  142,  143,  144,  145,   83,   84,   85,  158,
 /*  3470 */    87,  158,   89,  158,  158,  158,  158,  158,  158,  158,
 /*  3480 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  3490 */   158,  158,  158,  158,  158,  158,  158,  158,  115,  158,
 /*  3500 */    83,   84,   85,  120,   87,  158,   89,  158,  158,  126,
 /*  3510 */   158,  128,  129,  130,  131,  132,  133,  134,  135,  136,
 /*  3520 */   137,  138,  139,  140,  141,  142,  143,  144,  145,  158,
 /*  3530 */   158,  158,  115,  158,   83,   84,   85,  120,   87,  158,
 /*  3540 */    89,  158,  158,  126,  158,  128,  129,  130,  131,  132,
 /*  3550 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*  3560 */   143,  144,  145,  158,  158,  158,  115,  158,  158,  158,
 /*  3570 */   158,  120,  158,  158,  158,  158,  158,  126,  158,  128,
 /*  3580 */   129,  130,  131,  132,  133,  134,  135,  136,  137,  138,
 /*  3590 */   139,  140,  141,  142,  143,  144,  145,   83,   84,   85,
 /*  3600 */   158,   87,  158,   89,  158,  158,  158,  158,  158,  158,
 /*  3610 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  3620 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  115,
 /*  3630 */   158,   83,   84,   85,  120,   87,  158,   89,  158,  158,
 /*  3640 */   126,  158,  128,  129,  130,  131,  132,  133,  134,  135,
 /*  3650 */   136,  137,  138,  139,  140,  141,  142,  143,  144,  145,
 /*  3660 */   158,  158,  158,  115,  158,   83,   84,   85,  120,   87,
 /*  3670 */   158,   89,  158,  158,  126,  158,  128,  129,  130,  131,
 /*  3680 */   132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
 /*  3690 */   142,  143,  144,  145,  158,  158,  158,  115,  158,  158,
 /*  3700 */   158,  158,  120,  158,  158,  158,  158,  158,  126,  158,
 /*  3710 */   128,  129,  130,  131,  132,  133,  134,  135,  136,  137,
 /*  3720 */   138,  139,  140,  141,  142,  143,  144,  145,   83,   84,
 /*  3730 */    85,  158,   87,  158,   89,  158,  158,  158,  158,  158,
 /*  3740 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  3750 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  3760 */   115,  158,   83,   84,   85,  120,   87,  158,   89,  158,
 /*  3770 */   158,  126,  158,  128,  129,  130,  131,  132,  133,  134,
 /*  3780 */   135,  136,  137,  138,  139,  140,  141,  142,  143,  144,
 /*  3790 */   145,  158,  158,  158,  115,  158,   83,   84,   85,  120,
 /*  3800 */    87,  158,   89,  158,  158,  126,  158,  128,  129,  130,
 /*  3810 */   131,  132,  133,  134,  135,  136,  137,  138,  139,  140,
 /*  3820 */   141,  142,  143,  144,  145,  158,  158,  158,  115,  158,
 /*  3830 */   158,  158,  158,  120,  158,  158,  158,  158,  158,  126,
 /*  3840 */   158,  128,  129,  130,  131,  132,  133,  134,  135,  136,
 /*  3850 */   137,  138,  139,  140,  141,  142,  143,  144,  145,   83,
 /*  3860 */    84,   85,  158,   87,  158,   89,  158,  158,  158,  158,
 /*  3870 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  3880 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  3890 */   158,  115,  158,   83,   84,   85,  120,   87,  158,   89,
 /*  3900 */   158,  158,  126,  158,  128,  129,  130,  131,  132,  133,
 /*  3910 */   134,  135,  136,  137,  138,  139,  140,  141,  142,  143,
 /*  3920 */   144,  145,  158,  158,  158,  115,  158,   83,   84,   85,
 /*  3930 */   120,   87,  158,   89,  158,  158,  126,  158,  128,  129,
 /*  3940 */   130,  131,  132,  133,  134,  135,  136,  137,  138,  139,
 /*  3950 */   140,  141,  142,  143,  144,  145,  158,  158,  158,  115,
 /*  3960 */   158,  158,  158,  158,  120,  158,  158,  158,  158,  158,
 /*  3970 */   126,  158,  128,  129,  130,  131,  132,  133,  134,  135,
 /*  3980 */   136,  137,  138,  139,  140,  141,  142,  143,  144,  145,
 /*  3990 */    83,   84,   85,  158,   87,  158,   89,  158,  158,  158,
 /*  4000 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  4010 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  4020 */   158,  158,  115,  158,   83,   84,   85,  120,   87,  158,
 /*  4030 */    89,  158,  158,  126,  158,  128,  129,  130,  131,  132,
 /*  4040 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*  4050 */   143,  144,  145,  158,  158,  158,  115,  158,   83,   84,
 /*  4060 */    85,  120,   87,  158,   89,  158,  158,  126,  158,  128,
 /*  4070 */   129,  130,  131,  132,  133,  134,  135,  136,  137,  138,
 /*  4080 */   139,  140,  141,  142,  143,  144,  145,  158,  158,  158,
 /*  4090 */   115,  158,  158,  158,  158,  120,  158,  158,  158,  158,
 /*  4100 */   158,  126,  158,  128,  129,  130,  131,  132,  133,  134,
 /*  4110 */   135,  136,  137,  138,  139,  140,  141,  142,  143,  144,
 /*  4120 */   145,   83,   84,   85,  158,   87,  158,   89,  158,  158,
 /*  4130 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  4140 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  4150 */   158,  158,  158,  115,  158,   83,   84,   85,  120,   87,
 /*  4160 */   158,   89,  158,  158,  126,  158,  128,  129,  130,  131,
 /*  4170 */   132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
 /*  4180 */   142,  143,  144,  145,  158,  158,  158,  115,  158,   83,
 /*  4190 */    84,   85,  120,   87,  158,   89,  158,  158,  126,  158,
 /*  4200 */   128,  129,  130,  131,  132,  133,  134,  135,  136,  137,
 /*  4210 */   138,  139,  140,  141,  142,  143,  144,  145,  158,  158,
 /*  4220 */   158,  115,  158,  158,  158,  158,  120,  158,  158,  158,
 /*  4230 */   158,  158,  126,  158,  128,  129,  130,  131,  132,  133,
 /*  4240 */   134,  135,  136,  137,  138,  139,  140,  141,  142,  143,
 /*  4250 */   144,  145,   83,   84,   85,  158,   87,  158,   89,  158,
 /*  4260 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  4270 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  4280 */   158,  158,  158,  158,  115,  158,   83,   84,   85,  120,
 /*  4290 */    87,  158,   89,  158,  158,  126,  158,  128,  129,  130,
 /*  4300 */   131,  132,  133,  134,  135,  136,  137,  138,  139,  140,
 /*  4310 */   141,  142,  143,  144,  145,  158,  158,  158,  115,  158,
 /*  4320 */    83,   84,   85,  120,   87,  158,   89,  158,  158,  126,
 /*  4330 */   158,  128,  129,  130,  131,  132,  133,  134,  135,  136,
 /*  4340 */   137,  138,  139,  140,  141,  142,  143,  144,  145,  158,
 /*  4350 */   158,  158,  115,  158,  158,  158,  158,  120,  158,  158,
 /*  4360 */   158,  158,  158,  126,  158,  128,  129,  130,  131,  132,
 /*  4370 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*  4380 */   143,  144,  145,    6,    7,    8,    9,  158,  158,   12,
 /*  4390 */    13,  158,   15,  158,  158,   18,  158,   20,   21,   22,
 /*  4400 */    23,   24,   25,   26,   27,   28,   29,   30,   31,  158,
 /*  4410 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  4420 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  4430 */   158,  158,   55,   56,  158,  158,   83,   84,   85,    6,
 /*  4440 */     7,    8,    9,  158,  158,   12,   13,  158,  158,  158,
 /*  4450 */   158,   18,   19,   20,   21,   22,   23,   24,   25,   26,
 /*  4460 */    27,   28,   29,   30,   31,  158,  158,  158,  115,  158,
 /*  4470 */   158,  158,  158,  120,  158,  158,  158,  158,  158,  126,
 /*  4480 */   158,  158,  129,  130,  158,  158,  158,  158,   55,   56,
 /*  4490 */    83,   84,   85,  158,  158,    6,    7,    8,    9,   10,
 /*  4500 */   158,   12,   13,  158,  158,  158,  158,   18,  158,   20,
 /*  4510 */    21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
 /*  4520 */    31,  158,  115,  158,  158,  158,  158,  120,  158,  158,
 /*  4530 */   158,  158,  158,  126,  158,  158,  129,  130,  158,  158,
 /*  4540 */   158,  158,  158,  158,   55,   56,   83,   84,   85,  158,
 /*  4550 */   158,    6,    7,    8,    9,  158,  158,   12,   13,  158,
 /*  4560 */    15,  158,  158,   18,  158,   20,   21,   22,   23,   24,
 /*  4570 */    25,   26,   27,   28,   29,   30,   31,  158,  115,  158,
 /*  4580 */   158,  158,  158,  120,  158,  158,  158,  158,  158,  126,
 /*  4590 */   158,  158,  129,  130,  158,  158,  158,  158,  158,  158,
 /*  4600 */    55,   56,   83,   84,   85,  158,  158,    6,    7,    8,
 /*  4610 */     9,   10,  158,   12,   13,  158,  158,  158,  158,   18,
 /*  4620 */   158,   20,   21,   22,   23,   24,   25,   26,   27,   28,
 /*  4630 */    29,   30,   31,  158,  115,  158,  158,  158,  158,  120,
 /*  4640 */   158,  158,  158,  158,  158,  126,  158,  158,  129,  130,
 /*  4650 */   158,  158,  158,  158,  158,  158,   55,   56,  158,  158,
 /*  4660 */   158,  158,  158,    6,    7,    8,    9,  158,  158,   12,
 /*  4670 */    13,   14,  158,  158,  158,   18,  158,   20,   21,   22,
 /*  4680 */    23,   24,   25,   26,   27,   28,   29,   30,   31,  158,
 /*  4690 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  4700 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  4710 */   158,  158,   55,   56,  158,  158,  158,  158,  158,    6,
 /*  4720 */     7,    8,    9,  158,  158,   12,   13,   14,  158,  158,
 /*  4730 */   158,   18,  158,   20,   21,   22,   23,   24,   25,   26,
 /*  4740 */    27,   28,   29,   30,   31,  158,  158,  158,  158,  158,
 /*  4750 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  4760 */   158,  158,  158,  158,  158,  158,  158,  158,   55,   56,
 /*  4770 */   158,  158,  158,  158,  158,    6,    7,    8,    9,  158,
 /*  4780 */   158,   12,   13,  158,  158,  158,  158,   18,   19,   20,
 /*  4790 */    21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
 /*  4800 */    31,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  4810 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  4820 */   158,  158,  158,  158,   55,  158,  158,  158,  158,  158,
 /*  4830 */   158,    6,    7,    8,    9,  158,  158,   12,   13,  158,
 /*  4840 */   158,  158,  158,   18,  158,   20,   21,   22,   23,   24,
 /*  4850 */    25,   26,   27,   28,   29,   30,   31,  158,  158,  158,
 /*  4860 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  4870 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  4880 */    55,   56,  158,  158,  158,  158,  158,    6,    7,    8,
 /*  4890 */     9,  158,   11,   12,   13,  158,  158,  158,  158,   18,
 /*  4900 */   158,   20,   21,   22,   23,   24,   25,   26,   27,   28,
 /*  4910 */    29,   30,   31,  158,  158,  158,  158,  158,  158,  158,
 /*  4920 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  4930 */   158,  158,  158,  158,  158,  158,   55,  158,  158,  158,
 /*  4940 */   158,  158,  158,    6,    7,    8,    9,  158,  158,   12,
 /*  4950 */    13,  158,  158,  158,  158,   18,   19,   20,   21,   22,
 /*  4960 */    23,   24,   25,   26,   27,   28,   29,   30,   31,  158,
 /*  4970 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  4980 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  4990 */   158,  158,   55,  158,  158,  158,  158,  158,  158,    6,
 /*  5000 */     7,    8,    9,  158,  158,   12,   13,  158,  158,  158,
 /*  5010 */   158,   18,   19,   20,   21,   22,   23,   24,   25,   26,
 /*  5020 */    27,   28,   29,   30,   31,  158,  158,  158,  158,  158,
 /*  5030 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  5040 */   158,  158,  158,  158,  158,  158,  158,  158,   55,  158,
 /*  5050 */   158,  158,  158,  158,  158,    6,    7,    8,    9,  158,
 /*  5060 */   158,   12,   13,  158,   15,  158,  158,   18,  158,   20,
 /*  5070 */    21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
 /*  5080 */    31,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  5090 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  5100 */   158,  158,  158,  158,   55,  158,  158,  158,  158,  158,
 /*  5110 */   158,    6,    7,    8,    9,  158,  158,   12,   13,  158,
 /*  5120 */   158,  158,  158,   18,   19,   20,   21,   22,   23,   24,
 /*  5130 */    25,   26,   27,   28,   29,   30,   31,  158,  158,  158,
 /*  5140 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  5150 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  5160 */    55,  158,  158,  158,  158,  158,  158,    6,    7,    8,
 /*  5170 */     9,  158,  158,   12,   13,  158,  158,  158,  158,   18,
 /*  5180 */    19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
 /*  5190 */    29,   30,   31,  158,  158,  158,  158,  158,  158,  158,
 /*  5200 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  5210 */   158,  158,  158,  158,  158,  158,   55,  158,  158,  158,
 /*  5220 */   158,  158,  158,    6,    7,    8,    9,  158,  158,   12,
 /*  5230 */    13,  158,  158,  158,  158,   18,   19,   20,   21,   22,
 /*  5240 */    23,   24,   25,   26,   27,   28,   29,   30,   31,  158,
 /*  5250 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  5260 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  5270 */   158,  158,   55,  158,  158,  158,  158,  158,  158,    6,
 /*  5280 */     7,    8,    9,  158,  158,   12,   13,  158,  158,  158,
 /*  5290 */   158,   18,   19,   20,   21,   22,   23,   24,   25,   26,
 /*  5300 */    27,   28,   29,   30,   31,  158,  158,   83,   84,   85,
 /*  5310 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  5320 */   158,  158,  158,  158,  158,  158,  158,  158,   55,  158,
 /*  5330 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  115,
 /*  5340 */   158,  158,  158,  158,  120,  158,  158,  158,  158,  158,
 /*  5350 */   126,  158,  158,  129,  130,  131,  132,  133,  134,  135,
 /*  5360 */   136,  137,  138,  139,  140,  141,  142,  143,    6,    7,
 /*  5370 */     8,    9,  158,  158,   12,   13,   83,   84,   85,  158,
 /*  5380 */    18,  158,   20,   21,   22,   23,   24,   25,   26,   27,
 /*  5390 */    28,   29,   30,   31,  158,  158,  158,  158,  158,  158,
 /*  5400 */   158,  158,  158,  158,  158,  158,  158,  158,  115,  158,
 /*  5410 */   158,  158,  158,  120,  158,  158,  158,   55,  158,  126,
 /*  5420 */   158,  158,  129,  130,  131,  132,  133,  134,  135,  136,
 /*  5430 */   137,  138,  139,  140,  141,  142,  158,   83,   84,   85,
 /*  5440 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  5450 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  5460 */   158,  158,  158,  158,   83,   84,   85,  158,  158,  115,
 /*  5470 */   158,  158,  158,  158,  120,  158,  158,  158,  158,  158,
 /*  5480 */   126,  158,  158,  129,  130,  131,  132,  133,  134,  135,
 /*  5490 */   136,  137,  138,  139,  140,  141,  115,   83,   84,   85,
 /*  5500 */   158,  120,  158,  158,  158,  158,  158,  126,  158,  158,
 /*  5510 */   129,  130,  131,  132,  133,  134,  135,  136,  137,  138,
 /*  5520 */   139,  140,   83,   84,   85,  158,  158,  158,  158,  115,
 /*  5530 */   158,  158,  158,  158,  120,  158,  158,  158,  158,  158,
 /*  5540 */   126,  158,  158,  129,  130,  131,  132,  133,  134,  135,
 /*  5550 */   136,  137,  138,  139,  115,  158,  158,  158,  158,  120,
 /*  5560 */   158,  158,  158,  158,  158,  126,  158,  158,  129,  130,
 /*  5570 */   131,  132,  133,  134,  135,  136,  137,  138,
};
#define YY_SHIFT_USE_DFLT (-7)
#define YY_SHIFT_MAX 278
static const short yy_shift_ofst[] = {
 /*     0 */    -7,  946, 1265, 1183, 1025, 1344, 1104, 1502, 1502, 1423,
 /*    10 */  1502, 1502, 1502, 1502, 1423, 1502, 1423, 1423, 1423, 4545,
 /*    20 */  4377, 4377, 4377, 4377, 4825, 4825, 4825, 4825, 4825, 4825,
 /*    30 */  4489, 4713, 4433, 4601, 4657, 4825, 4825, 4825, 4825, 4881,
 /*    40 */  4825, 4825, 4825, 5362, 4937, 4993, 5049, 5105, 5161, 5217,
 /*    50 */  5273, 4769, 5362, 5362, 5362, 5362, 5362, 5362, 5362, 5362,
 /*    60 */  5362, 5362, 5362, 5362, 5362, 5362, 5362, 5362, 5362, 5362,
 /*    70 */  5362, 5362, 5362, 5362, 5362, 5362, 5362, 5362, 5362, 5362,
 /*    80 */  1631, 1631, 1631, 1631, 1631, 1631, 1631, 1631, 1631, 1631,
 /*    90 */  1631, 1631, 1631, 1631, 1631, 1631, 1631, 1631, 1631, 1631,
 /*   100 */  1631, 1631, 1631,   -1,   70,  983,  983,  153,  153,  153,
 /*   110 */   367,  299,  253,    1,    1,    1, 2890, 1793, 1660,  936,
 /*   120 */   936,   97,  243,  167,   27,  313,  319,  246,  175,  459,
 /*   130 */   459,  465,  386,  535,  386,  389,  392,  532,  462,  538,
 /*   140 */     1,  197,    1,  275,  275,    1,   -7,   -7,   -7,   -7,
 /*   150 */    -7,   -7,   -7,   80,  363,  217,   80,   80,  120,  120,
 /*   160 */   346,  315,  203,  206,    2,   77,  214,  287,  284,  248,
 /*   170 */   352,   -6,    2,   84,   68,  133,    2,  324,    2,   11,
 /*   180 */    32,   91,  323,  391,  395,  396,  398,  409,  423,  378,
 /*   190 */   427,  390,  433,  437,  438,  394,  431,  441,  435,  442,
 /*   200 */   453,  454,  466,  471,  468,  469,  489,  492,  497,  495,
 /*   210 */   503,  510,  505,  464,  507,  508,  504,  511,  470,  506,
 /*   220 */   482,  533,  539,  541,  536,  545,  518,  566,  573,  570,
 /*   230 */   582,  522,  578,  540,  584,  588,  558,  587,  559,  592,
 /*   240 */   560,    6,  540,  555,  575,  597,  559,  576,  560,  575,
 /*   250 */   576,  611,  605,  606,  558,  567,  568,  612,  607,  609,
 /*   260 */   616,  608,  637,  639,  636,  398,  653,  643,  654,  655,
 /*   270 */   646,  649,  650,  651,  652,  665,  661,  658,  671,
};
#define YY_REDUCE_USE_DFLT (-84)
#define YY_REDUCE_MAX 152
static const short yy_reduce_ofst[] = {
 /*     0 */     4,  -83,  -83,  -83,  -83,  -83,  -83,   63,  501,  355,
 /*    10 */   647,  136,  574,  428,  793,  282,  720,  -10,  209, 1479,
 /*    20 */  1688, 1623, 1883, 1818, 1558, 1753, 2143, 1948, 2013, 2078,
 /*    30 */  2273, 2338, 2208, 2403, 2468, 2533, 2598, 2663, 2728, 2793,
 /*    40 */  2891, 2925, 2990, 2857, 3679, 3383, 4203, 3844, 3713, 3582,
 /*    50 */  3975, 4072, 4106, 4169, 3776, 3844, 3024, 3121, 3189, 3252,
 /*    60 */  3320, 3645, 4237, 4038, 3514, 3417, 3451, 3286, 3155, 3058,
 /*    70 */  3810, 3713, 3679, 4072, 3975, 3941, 3907, 3582, 3548, 3383,
 /*    80 */  5224, 5293, 5354, 5381, 5414, 5439, 1354, 1661, 1791, 1856,
 /*    90 */  1921, 1986, 2051, 2116, 2441, 2246, 2571, 2636, 2376, 2181,
 /*   100 */  2701, 2506, 2311, 1430, 1430, 4353, 4407, 4463, 2766, 4519,
 /*   110 */   -44,  177,  116,  100,  138,  156,  -81,  -53,  -81,  -29,
 /*   120 */   -29,  -48,  -36,   20,  -48,  -48,  -36,   28,   20,   33,
 /*   130 */    20,   38,   38,   20,   42,   61,   28,   61,   65,   65,
 /*   140 */    96,  132,  173,  190,  192,  237,  218,  220,  241,  249,
 /*   150 */   254,  273,  281,
};
static const YYACTIONTYPE yy_default[] = {
 /*     0 */   674,  735,  735,  735,  735,  735,  735,  735,  735,  735,
 /*    10 */   735,  735,  735,  735,  735,  735,  735,  735,  735,  719,
 /*    20 */   735,  735,  735,  735,  721,  721,  735,  735,  735,  735,
 /*    30 */   735,  735,  735,  735,  735,  735,  735,  735,  735,  735,
 /*    40 */   735,  735,  658,  735,  735,  735,  735,  735,  735,  735,
 /*    50 */   735,  735,  735,  735,  735,  735,  735,  735,  735,  735,
 /*    60 */   735,  735,  735,  735,  735,  663,  735,  735,  735,  735,
 /*    70 */   735,  735,  735,  735,  735,  735,  735,  735,  735,  735,
 /*    80 */   735,  735,  735,  735,  735,  735,  735,  735,  735,  735,
 /*    90 */   735,  735,  735,  735,  735,  735,  735,  735,  735,  735,
 /*   100 */   735,  735,  735,  735,  735,  735,  735,  735,  735,  735,
 /*   110 */   735,  735,  724,  735,  735,  735,  636,  667,  636,  600,
 /*   120 */   599,  543,  547,  542,  543,  543,  547,  545,  735,  735,
 /*   130 */   542,  544,  544,  542,  735,  548,  545,  548,  546,  546,
 /*   140 */   735,  735,  735,  735,  735,  735,  674,  674,  674,  674,
 /*   150 */   674,  491,  491,  573,  735,  735,  572,  574,  580,  579,
 /*   160 */   560,  735,  549,  735,  575,  735,  735,  735,  735,  499,
 /*   170 */   735,  735,  576,  735,  735,  735,  577,  735,  578,  507,
 /*   180 */   735,  506,  605,  735,  735,  735,  735,  735,  735,  735,
 /*   190 */   735,  735,  735,  735,  735,  735,  735,  735,  735,  735,
 /*   200 */   735,  735,  735,  735,  735,  735,  735,  735,  662,  735,
 /*   210 */   735,  735,  735,  735,  735,  735,  735,  735,  735,  735,
 /*   220 */   550,  735,  735,  735,  735,  735,  735,  735,  735,  735,
 /*   230 */   735,  735,  735,  604,  735,  735,  581,  735,  583,  735,
 /*   240 */   602,  735,  603,  735,  585,  636,  584,  587,  601,  586,
 /*   250 */   588,  735,  735,  735,  582,  735,  549,  735,  735,  735,
 /*   260 */   735,  657,  735,  735,  655,  734,  735,  735,  735,  500,
 /*   270 */   735,  735,  735,  735,  735,  735,  735,  735,  735,  512,
 /*   280 */   483,  484,  485,  511,  514,  516,  517,  518,  513,  521,
 /*   290 */   527,  523,  530,  524,  533,  525,  536,  526,  539,  540,
 /*   300 */   551,  552,  553,  554,  555,  556,  557,  558,  559,  561,
 /*   310 */   562,  563,  564,  565,  566,  567,  568,  569,  570,  571,
 /*   320 */   589,  590,  591,  592,  593,  594,  595,  596,  597,  598,
 /*   330 */   606,  529,  489,  490,  488,  492,  493,  494,  495,  496,
 /*   340 */   497,  498,  503,  502,  501,  626,  623,  504,  532,  535,
 /*   350 */   611,  612,  613,  615,  614,  616,  617,  618,  619,  660,
 /*   360 */   661,  632,  538,  633,  627,  624,  541,  634,  610,  622,
 /*   370 */   664,  640,  641,  642,  643,  644,  645,  646,  647,  648,
 /*   380 */   649,  650,  651,  652,  665,  668,  620,  621,  637,  635,
 /*   390 */   638,  639,  670,  666,  669,  675,  676,  677,  678,  679,
 /*   400 */   680,  681,  682,  683,  687,  671,  508,  509,  672,  510,
 /*   410 */   673,  688,  689,  686,  690,  684,  685,  692,  693,  694,
 /*   420 */   695,  696,  697,  698,  699,  700,  701,  702,  703,  704,
 /*   430 */   705,  706,  707,  708,  709,  710,  711,  712,  713,  714,
 /*   440 */   716,  715,  717,  718,  722,  720,  723,  725,  726,  727,
 /*   450 */   728,  730,  731,  732,  733,  729,  691,  631,  625,  505,
 /*   460 */   609,  629,  607,  608,  653,  654,  659,  656,  537,  550,
 /*   470 */   534,  531,  528,  549,  519,  520,  522,  515,  630,  628,
 /*   480 */   486,  487,
};
#define YY_SZ_ACTTAB (int)(sizeof(yy_action)/sizeof(yy_action[0]))

/* The next table maps tokens into fallback tokens.  If a construct
** like the following:
** 
**      %fallback ID X Y Z.
**
** appears in the grammar, then ID becomes a fallback token for X, Y,
** and Z.  Whenever one of the tokens X, Y, or Z is input to the parser
** but it does not parse, the type of the token is changed to ID and
** the parse is retried before an error is thrown.
*/
#ifdef YYFALLBACK
static const YYCODETYPE yyFallback[] = {
};
#endif /* YYFALLBACK */

/* The following structure represents a single element of the
** parser's stack.  Information stored includes:
**
**   +  The state number for the parser at this level of the stack.
**
**   +  The value of the token stored at this level of the stack.
**      (In other words, the "major" token.)
**
**   +  The semantic value stored at this level of the stack.  This is
**      the information used by the action routines in the grammar.
**      It is sometimes called the "minor" token.
*/
struct yyStackEntry {
  YYACTIONTYPE stateno;  /* The state-number */
  YYCODETYPE major;      /* The major token value.  This is the code
                         ** number for the token at this stack level */
  YYMINORTYPE minor;     /* The user-supplied minor token value.  This
                         ** is the value of the token  */
};
typedef struct yyStackEntry yyStackEntry;

/* The state of the parser is completely contained in an instance of
** the following structure */
struct yyParser {
  int yyidx;                    /* Index of top element in stack */
#ifdef YYTRACKMAXSTACKDEPTH
  int yyidxMax;                 /* Maximum value of yyidx */
#endif
  int yyerrcnt;                 /* Shifts left before out of the error */
  XecParseARG_SDECL                /* A place to hold %extra_argument */
#if YYSTACKDEPTH<=0
  int yystksz;                  /* Current side of the stack */
  yyStackEntry *yystack;        /* The parser's stack */
#else
  yyStackEntry yystack[YYSTACKDEPTH];  /* The parser's stack */
#endif
};
typedef struct yyParser yyParser;

#ifndef NDEBUG
#include <stdio.h>
static FILE *yyTraceFILE = 0;
static char *yyTracePrompt = 0;
#endif /* NDEBUG */

#ifndef NDEBUG
/* 
** Turn parser tracing on by giving a stream to which to write the trace
** and a prompt to preface each trace message.  Tracing is turned off
** by making either argument NULL 
**
** Inputs:
** <ul>
** <li> A FILE* to which trace output should be written.
**      If NULL, then tracing is turned off.
** <li> A prefix string written at the beginning of every
**      line of trace output.  If NULL, then tracing is
**      turned off.
** </ul>
**
** Outputs:
** None.
*/
void XecParseTrace(FILE *TraceFILE, char *zTracePrompt){
  yyTraceFILE = TraceFILE;
  yyTracePrompt = zTracePrompt;
  if( yyTraceFILE==0 ) yyTracePrompt = 0;
  else if( yyTracePrompt==0 ) yyTraceFILE = 0;
}
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing shifts, the names of all terminals and nonterminals
** are required.  The following table supplies these names */
static const char *const yyTokenName[] = { 
  "$",             "IF",            "ELSE",          "TRY",         
  "CATCH",         "FINALLY",       "YIELD",         "LPN",         
  "IDENTIFIER",    "PERIOD",        "RPN",           "RBR",         
  "LBR",           "COLON",         "SEMICOLON",     "VAR",         
  "ASSIGN",        "COMMA",         "LSQ",           "RSQ",         
  "NEW",           "NULL",          "TRUE",          "FALSE",       
  "NUMBER",        "STRING",        "INCREMENT",     "DECREMENT",   
  "PLUS",          "MINUS",         "XMARK",         "TILDE",       
  "ASTERISK",      "SOLIDUS",       "PERCENT",       "LSHIFT",      
  "RSHIFT",        "URSHIFT",       "AMPERSAND",     "CARET",       
  "VBAR",          "CONCATENATE",   "EQUAL",         "NOTEQUAL",    
  "LESS",          "GREATER",       "LESSEQUAL",     "GREATEREQUAL",
  "IN",            "NOTIN",         "IS",            "NOTIS",       
  "LOGICAND",      "LOGICXOR",      "LOGICOR",       "QMARK",       
  "ELLIPSIS",      "MULASSIGN",     "DIVASSIGN",     "MODASSIGN",   
  "INTDIVASSIGN",  "ADDASSIGN",     "SUBASSIGN",     "LSHIFTASSIGN",
  "RSHIFTASSIGN",  "URSHIFTASSIGN",  "BITANDASSIGN",  "BITXORASSIGN",
  "BITORASSIGN",   "WHILE",         "DELETE",        "CASE",        
  "DEFAULT",       "CONTINUE",      "BREAK",         "RETURN",      
  "THROW",         "SWITCH",        "DO",            "FOR",         
  "EACHKEY",       "USING",         "error",         "proto",       
  "expr_call",     "expr_yield",    "object_lbr",    "newobj_lbr",  
  "func_lbr",      "newfunc_lbr",   "varname",       "varname_list",
  "compare_op",    "assign_op",     "value_lbody",   "value_list",  
  "keyval_lbody",  "keyval_list",   "stmt_lbr",      "stmt_lbr_ru", 
  "stmt_if",       "stmt_switch",   "stmt_while",    "stmt_do",     
  "scope_for",     "stmt_foreach",  "stmt_for",      "stmt_using",  
  "try_block",     "try_catch",     "scope_catch",   "stmt_catch",  
  "token_yield",   "script",        "stmt_list",     "name",        
  "expr_paren",    "expr_list",     "decl_object",   "object_decls",
  "expr_simple",   "object_decl",   "decl_func",     "decl_proto",  
  "decl_var",      "decl_noinit",   "expr_index",    "expr_assign", 
  "expr_value",    "expr_new",      "expr_postfix",  "expr_literal",
  "expr_suffix",   "expr_unary",    "expr_mul",      "expr_add",    
  "expr_shift",    "expr_bitand",   "expr_bitxor",   "expr_bitor",  
  "expr_concat",   "expr_compare",  "expr_and",      "expr_xor",    
  "expr_or",       "expr_nolbr",    "expr_lbody",    "expr_final",  
  "sexpr_lbody",   "sexpr_list",    "sexpr_assign",  "condition",   
  "stmt",          "stmt_common",   "stmt_reuse",    "stmt_try",    
  "for_cond",      "for_expr",    
};
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing reduce actions, the names of all rules are required.
*/
static const char *const yyRuleName[] = {
 /*   0 */ "script ::= stmt_list",
 /*   1 */ "name ::= IDENTIFIER",
 /*   2 */ "name ::= name PERIOD IDENTIFIER",
 /*   3 */ "proto ::= name expr_paren",
 /*   4 */ "expr_paren ::= LPN RPN",
 /*   5 */ "expr_paren ::= LPN expr_list RPN",
 /*   6 */ "decl_object ::= object_lbr object_decls RBR",
 /*   7 */ "object_lbr ::= name LBR",
 /*   8 */ "object_lbr ::= name COLON expr_simple LBR",
 /*   9 */ "object_decls ::=",
 /*  10 */ "object_decls ::= object_decls object_decl",
 /*  11 */ "object_decl ::= SEMICOLON",
 /*  12 */ "object_decl ::= decl_object",
 /*  13 */ "object_decl ::= decl_func",
 /*  14 */ "object_decl ::= decl_proto SEMICOLON",
 /*  15 */ "object_decl ::= decl_var SEMICOLON",
 /*  16 */ "object_decl ::= decl_noinit SEMICOLON",
 /*  17 */ "decl_proto ::= proto",
 /*  18 */ "decl_proto ::= proto YIELD",
 /*  19 */ "decl_func ::= func_lbr stmt_list RBR",
 /*  20 */ "func_lbr ::= proto LBR",
 /*  21 */ "func_lbr ::= proto YIELD LBR",
 /*  22 */ "decl_var ::= VAR varname ASSIGN expr_list",
 /*  23 */ "decl_var ::= VAR varname_list ASSIGN expr_list",
 /*  24 */ "decl_noinit ::= VAR varname",
 /*  25 */ "decl_noinit ::= VAR varname_list",
 /*  26 */ "varname ::= IDENTIFIER",
 /*  27 */ "varname_list ::= varname COMMA varname",
 /*  28 */ "varname_list ::= varname_list COMMA varname",
 /*  29 */ "expr_index ::= LPN expr_assign RPN",
 /*  30 */ "expr_index ::= name PERIOD LSQ expr_value RSQ",
 /*  31 */ "expr_index ::= name LSQ expr_value RSQ",
 /*  32 */ "expr_index ::= expr_index PERIOD IDENTIFIER",
 /*  33 */ "expr_index ::= expr_index PERIOD LSQ expr_value RSQ",
 /*  34 */ "expr_index ::= expr_index LSQ expr_value RSQ",
 /*  35 */ "expr_yield ::= YIELD LPN RPN",
 /*  36 */ "expr_yield ::= YIELD LPN expr_list RPN",
 /*  37 */ "expr_new ::= NEW name expr_paren",
 /*  38 */ "expr_new ::= NEW expr_index expr_paren",
 /*  39 */ "expr_call ::= proto expr_paren",
 /*  40 */ "expr_call ::= expr_index expr_paren",
 /*  41 */ "expr_call ::= expr_yield expr_paren",
 /*  42 */ "expr_call ::= expr_new expr_paren",
 /*  43 */ "expr_call ::= expr_call expr_paren",
 /*  44 */ "expr_call ::= expr_postfix expr_paren",
 /*  45 */ "expr_postfix ::= proto PERIOD IDENTIFIER",
 /*  46 */ "expr_postfix ::= proto PERIOD LSQ expr_value RSQ",
 /*  47 */ "expr_postfix ::= proto LSQ expr_value RSQ",
 /*  48 */ "expr_postfix ::= expr_yield PERIOD IDENTIFIER",
 /*  49 */ "expr_postfix ::= expr_yield PERIOD LSQ expr_value RSQ",
 /*  50 */ "expr_postfix ::= expr_yield LSQ expr_value RSQ",
 /*  51 */ "expr_postfix ::= expr_new PERIOD IDENTIFIER",
 /*  52 */ "expr_postfix ::= expr_new PERIOD LSQ expr_value RSQ",
 /*  53 */ "expr_postfix ::= expr_new LSQ expr_value RSQ",
 /*  54 */ "expr_postfix ::= expr_call PERIOD IDENTIFIER",
 /*  55 */ "expr_postfix ::= expr_call PERIOD LSQ expr_value RSQ",
 /*  56 */ "expr_postfix ::= expr_call LSQ expr_value RSQ",
 /*  57 */ "expr_postfix ::= expr_postfix PERIOD IDENTIFIER",
 /*  58 */ "expr_postfix ::= expr_postfix PERIOD LSQ expr_value RSQ",
 /*  59 */ "expr_postfix ::= expr_postfix LSQ expr_value RSQ",
 /*  60 */ "expr_simple ::= name",
 /*  61 */ "expr_simple ::= proto",
 /*  62 */ "expr_simple ::= expr_index",
 /*  63 */ "expr_simple ::= expr_yield",
 /*  64 */ "expr_simple ::= expr_new",
 /*  65 */ "expr_simple ::= expr_call",
 /*  66 */ "expr_simple ::= expr_postfix",
 /*  67 */ "expr_simple ::= proto YIELD",
 /*  68 */ "expr_simple ::= expr_call YIELD",
 /*  69 */ "expr_literal ::= expr_simple",
 /*  70 */ "expr_literal ::= NULL",
 /*  71 */ "expr_literal ::= TRUE",
 /*  72 */ "expr_literal ::= FALSE",
 /*  73 */ "expr_literal ::= NUMBER",
 /*  74 */ "expr_literal ::= STRING",
 /*  75 */ "expr_suffix ::= expr_literal",
 /*  76 */ "expr_suffix ::= expr_suffix INCREMENT",
 /*  77 */ "expr_suffix ::= expr_suffix DECREMENT",
 /*  78 */ "expr_unary ::= expr_suffix",
 /*  79 */ "expr_unary ::= PLUS expr_unary",
 /*  80 */ "expr_unary ::= MINUS expr_unary",
 /*  81 */ "expr_unary ::= XMARK expr_unary",
 /*  82 */ "expr_unary ::= TILDE expr_unary",
 /*  83 */ "expr_unary ::= INCREMENT expr_unary",
 /*  84 */ "expr_unary ::= DECREMENT expr_unary",
 /*  85 */ "expr_mul ::= expr_unary",
 /*  86 */ "expr_mul ::= expr_mul ASTERISK expr_unary",
 /*  87 */ "expr_mul ::= expr_mul SOLIDUS expr_unary",
 /*  88 */ "expr_mul ::= expr_mul PERCENT expr_unary",
 /*  89 */ "expr_mul ::= expr_mul TILDE expr_unary",
 /*  90 */ "expr_add ::= expr_mul",
 /*  91 */ "expr_add ::= expr_add PLUS expr_mul",
 /*  92 */ "expr_add ::= expr_add MINUS expr_mul",
 /*  93 */ "expr_shift ::= expr_add",
 /*  94 */ "expr_shift ::= expr_shift LSHIFT expr_add",
 /*  95 */ "expr_shift ::= expr_shift RSHIFT expr_add",
 /*  96 */ "expr_shift ::= expr_shift URSHIFT expr_add",
 /*  97 */ "expr_bitand ::= expr_shift",
 /*  98 */ "expr_bitand ::= expr_bitand AMPERSAND expr_shift",
 /*  99 */ "expr_bitxor ::= expr_bitand",
 /* 100 */ "expr_bitxor ::= expr_bitxor CARET expr_bitand",
 /* 101 */ "expr_bitor ::= expr_bitxor",
 /* 102 */ "expr_bitor ::= expr_bitor VBAR expr_bitxor",
 /* 103 */ "expr_concat ::= expr_bitor",
 /* 104 */ "expr_concat ::= expr_concat CONCATENATE expr_bitor",
 /* 105 */ "expr_compare ::= expr_concat",
 /* 106 */ "expr_compare ::= expr_compare compare_op expr_concat",
 /* 107 */ "compare_op ::= EQUAL",
 /* 108 */ "compare_op ::= NOTEQUAL",
 /* 109 */ "compare_op ::= LESS",
 /* 110 */ "compare_op ::= GREATER",
 /* 111 */ "compare_op ::= LESSEQUAL",
 /* 112 */ "compare_op ::= GREATEREQUAL",
 /* 113 */ "compare_op ::= IN",
 /* 114 */ "compare_op ::= NOTIN",
 /* 115 */ "compare_op ::= IS",
 /* 116 */ "compare_op ::= NOTIS",
 /* 117 */ "expr_and ::= expr_compare",
 /* 118 */ "expr_and ::= expr_and LOGICAND expr_compare",
 /* 119 */ "expr_xor ::= expr_and",
 /* 120 */ "expr_xor ::= expr_xor LOGICXOR expr_and",
 /* 121 */ "expr_or ::= expr_xor",
 /* 122 */ "expr_or ::= expr_or LOGICOR expr_xor",
 /* 123 */ "expr_nolbr ::= expr_or",
 /* 124 */ "expr_nolbr ::= expr_or QMARK expr_value COLON expr_value",
 /* 125 */ "expr_nolbr ::= LSQ RSQ",
 /* 126 */ "expr_nolbr ::= LSQ value_list RSQ",
 /* 127 */ "expr_nolbr ::= newobj_lbr object_decls RBR",
 /* 128 */ "expr_nolbr ::= newfunc_lbr stmt_list RBR",
 /* 129 */ "newobj_lbr ::= COLON LBR",
 /* 130 */ "newobj_lbr ::= COLON expr_simple LBR",
 /* 131 */ "newfunc_lbr ::= QMARK expr_paren LBR",
 /* 132 */ "newfunc_lbr ::= PERIOD QMARK expr_paren LBR",
 /* 133 */ "newfunc_lbr ::= QMARK expr_paren YIELD LBR",
 /* 134 */ "newfunc_lbr ::= PERIOD QMARK expr_paren YIELD LBR",
 /* 135 */ "expr_value ::= expr_nolbr",
 /* 136 */ "expr_value ::= LBR RBR",
 /* 137 */ "expr_value ::= LBR keyval_list RBR",
 /* 138 */ "expr_lbody ::= expr_value",
 /* 139 */ "expr_lbody ::= expr_lbody COMMA expr_value",
 /* 140 */ "expr_final ::= ELLIPSIS",
 /* 141 */ "expr_final ::= proto ELLIPSIS",
 /* 142 */ "expr_final ::= expr_call ELLIPSIS",
 /* 143 */ "expr_final ::= expr_yield ELLIPSIS",
 /* 144 */ "expr_final ::= proto YIELD ELLIPSIS",
 /* 145 */ "expr_final ::= expr_call YIELD ELLIPSIS",
 /* 146 */ "expr_final ::= name LSQ RSQ ELLIPSIS",
 /* 147 */ "expr_final ::= proto LSQ RSQ ELLIPSIS",
 /* 148 */ "expr_final ::= expr_index LSQ RSQ ELLIPSIS",
 /* 149 */ "expr_final ::= expr_yield LSQ RSQ ELLIPSIS",
 /* 150 */ "expr_final ::= expr_new LSQ RSQ ELLIPSIS",
 /* 151 */ "expr_final ::= expr_call LSQ RSQ ELLIPSIS",
 /* 152 */ "expr_final ::= expr_postfix LSQ RSQ ELLIPSIS",
 /* 153 */ "expr_list ::= expr_final",
 /* 154 */ "expr_list ::= expr_lbody",
 /* 155 */ "expr_list ::= expr_lbody COMMA expr_final",
 /* 156 */ "expr_assign ::= expr_list",
 /* 157 */ "expr_assign ::= expr_lbody assign_op expr_assign",
 /* 158 */ "assign_op ::= ASSIGN",
 /* 159 */ "assign_op ::= MULASSIGN",
 /* 160 */ "assign_op ::= DIVASSIGN",
 /* 161 */ "assign_op ::= MODASSIGN",
 /* 162 */ "assign_op ::= INTDIVASSIGN",
 /* 163 */ "assign_op ::= ADDASSIGN",
 /* 164 */ "assign_op ::= SUBASSIGN",
 /* 165 */ "assign_op ::= LSHIFTASSIGN",
 /* 166 */ "assign_op ::= RSHIFTASSIGN",
 /* 167 */ "assign_op ::= URSHIFTASSIGN",
 /* 168 */ "assign_op ::= BITANDASSIGN",
 /* 169 */ "assign_op ::= BITXORASSIGN",
 /* 170 */ "assign_op ::= BITORASSIGN",
 /* 171 */ "value_lbody ::= expr_value",
 /* 172 */ "value_lbody ::= value_lbody COMMA expr_value",
 /* 173 */ "value_list ::= expr_final",
 /* 174 */ "value_list ::= expr_final COMMA",
 /* 175 */ "value_list ::= value_lbody",
 /* 176 */ "value_list ::= value_lbody COMMA",
 /* 177 */ "value_list ::= value_lbody COMMA expr_final",
 /* 178 */ "keyval_lbody ::= expr_value COLON expr_value",
 /* 179 */ "keyval_lbody ::= keyval_lbody COMMA expr_value COLON expr_value",
 /* 180 */ "keyval_list ::= keyval_lbody",
 /* 181 */ "keyval_list ::= keyval_lbody COMMA",
 /* 182 */ "sexpr_lbody ::= expr_nolbr",
 /* 183 */ "sexpr_lbody ::= sexpr_lbody COMMA expr_value",
 /* 184 */ "sexpr_list ::= expr_final",
 /* 185 */ "sexpr_list ::= sexpr_lbody",
 /* 186 */ "sexpr_list ::= sexpr_lbody COMMA expr_final",
 /* 187 */ "sexpr_assign ::= sexpr_list",
 /* 188 */ "sexpr_assign ::= sexpr_lbody assign_op expr_assign",
 /* 189 */ "condition ::= expr_assign",
 /* 190 */ "condition ::= VAR varname ASSIGN expr_list",
 /* 191 */ "condition ::= VAR varname_list ASSIGN expr_list",
 /* 192 */ "stmt_list ::=",
 /* 193 */ "stmt_list ::= stmt_list SEMICOLON",
 /* 194 */ "stmt_list ::= stmt_list stmt",
 /* 195 */ "stmt_list ::= stmt_list decl_object",
 /* 196 */ "stmt_list ::= stmt_list decl_func",
 /* 197 */ "stmt_list ::= stmt_list decl_var SEMICOLON",
 /* 198 */ "stmt_list ::= stmt_list decl_noinit SEMICOLON",
 /* 199 */ "stmt ::= stmt_lbr stmt_list RBR",
 /* 200 */ "stmt ::= stmt_common",
 /* 201 */ "stmt_lbr ::= LBR",
 /* 202 */ "stmt_reuse ::= stmt_lbr_ru stmt_list RBR",
 /* 203 */ "stmt_reuse ::= stmt_common",
 /* 204 */ "stmt_lbr_ru ::= LBR",
 /* 205 */ "stmt_common ::= sexpr_assign SEMICOLON",
 /* 206 */ "stmt_common ::= stmt_if LPN condition RPN stmt",
 /* 207 */ "stmt_common ::= stmt_if LPN condition RPN stmt ELSE stmt",
 /* 208 */ "stmt_common ::= stmt_switch LPN condition RPN stmt_lbr_ru stmt_list RPN",
 /* 209 */ "stmt_common ::= stmt_while LPN condition RPN stmt_reuse",
 /* 210 */ "stmt_common ::= stmt_do stmt_reuse WHILE LPN expr_assign RPN SEMICOLON",
 /* 211 */ "stmt_common ::= stmt_foreach stmt_reuse",
 /* 212 */ "stmt_common ::= stmt_for stmt_reuse",
 /* 213 */ "stmt_common ::= stmt_using LPN condition RPN stmt_reuse",
 /* 214 */ "stmt_common ::= stmt_try",
 /* 215 */ "stmt_common ::= DELETE expr_lbody SEMICOLON",
 /* 216 */ "stmt_common ::= CASE expr_value COLON",
 /* 217 */ "stmt_common ::= DEFAULT COLON",
 /* 218 */ "stmt_common ::= CONTINUE SEMICOLON",
 /* 219 */ "stmt_common ::= BREAK SEMICOLON",
 /* 220 */ "stmt_common ::= RETURN SEMICOLON",
 /* 221 */ "stmt_common ::= RETURN expr_list SEMICOLON",
 /* 222 */ "stmt_common ::= token_yield SEMICOLON",
 /* 223 */ "stmt_common ::= token_yield expr_list SEMICOLON",
 /* 224 */ "stmt_common ::= THROW expr_value SEMICOLON",
 /* 225 */ "stmt_if ::= IF",
 /* 226 */ "stmt_switch ::= SWITCH",
 /* 227 */ "stmt_while ::= WHILE",
 /* 228 */ "stmt_do ::= DO",
 /* 229 */ "scope_for ::= FOR",
 /* 230 */ "stmt_foreach ::= scope_for LPN expr_lbody COLON expr_value RPN",
 /* 231 */ "stmt_foreach ::= scope_for LPN expr_lbody EACHKEY expr_value RPN",
 /* 232 */ "stmt_foreach ::= scope_for LPN VAR varname COLON expr_value RPN",
 /* 233 */ "stmt_foreach ::= scope_for LPN VAR varname_list COLON expr_value RPN",
 /* 234 */ "stmt_foreach ::= scope_for LPN VAR varname EACHKEY expr_value RPN",
 /* 235 */ "stmt_foreach ::= scope_for LPN VAR varname_list EACHKEY expr_value RPN",
 /* 236 */ "stmt_for ::= scope_for LPN for_cond SEMICOLON for_expr SEMICOLON for_expr RPN",
 /* 237 */ "for_cond ::=",
 /* 238 */ "for_cond ::= condition",
 /* 239 */ "for_expr ::=",
 /* 240 */ "for_expr ::= expr_assign",
 /* 241 */ "stmt_using ::= USING",
 /* 242 */ "stmt_try ::= try_catch",
 /* 243 */ "stmt_try ::= try_catch FINALLY stmt",
 /* 244 */ "stmt_try ::= try_block FINALLY stmt",
 /* 245 */ "try_block ::= TRY stmt",
 /* 246 */ "try_catch ::= try_block stmt_catch stmt_reuse",
 /* 247 */ "try_catch ::= try_catch stmt_catch stmt_reuse",
 /* 248 */ "scope_catch ::= CATCH",
 /* 249 */ "stmt_catch ::= scope_catch LPN COLON expr_simple RPN",
 /* 250 */ "stmt_catch ::= scope_catch LPN expr_value COLON expr_simple RPN",
 /* 251 */ "stmt_catch ::= scope_catch LPN VAR varname COLON expr_simple RPN",
 /* 252 */ "token_yield ::= YIELD",
};
#endif /* NDEBUG */


#if YYSTACKDEPTH<=0
/*
** Try to increase the size of the parser stack.
*/
static void yyGrowStack(yyParser *p){
  int newSize;
  yyStackEntry *pNew;

  newSize = p->yystksz*2 + 100;
  pNew = realloc(p->yystack, newSize*sizeof(pNew[0]));
  if( pNew ){
    p->yystack = pNew;
    p->yystksz = newSize;
#ifndef NDEBUG
    if( yyTraceFILE ){
      fprintf(yyTraceFILE,"%sStack grows to %d entries!\n",
              yyTracePrompt, p->yystksz);
    }
#endif
  }
}
#endif

/* 
** This function allocates a new parser.
** The only argument is a pointer to a function which works like
** malloc.
**
** Inputs:
** A pointer to the function used to allocate memory.
**
** Outputs:
** A pointer to a parser.  This pointer is used in subsequent calls
** to XecParse and XecParseFree.
*/
void *XecParseAlloc(void *(*mallocProc)(size_t)){
  yyParser *pParser;
  pParser = (yyParser*)(*mallocProc)( (size_t)sizeof(yyParser) );
  if( pParser ){
    pParser->yyidx = -1;
#ifdef YYTRACKMAXSTACKDEPTH
    pParser->yyidxMax = 0;
#endif
#if YYSTACKDEPTH<=0
    pParser->yystack = NULL;
    pParser->yystksz = 0;
    yyGrowStack(pParser);
#endif
  }
  return pParser;
}

/* The following function deletes the value associated with a
** symbol.  The symbol can be either a terminal or nonterminal.
** "yymajor" is the symbol code, and "yypminor" is a pointer to
** the value.
*/
static void yy_destructor(
  yyParser *yypParser,    /* The parser */
  YYCODETYPE yymajor,     /* Type code for object to destroy */
  YYMINORTYPE *yypminor   /* The object to be destroyed */
){
  XecParseARG_FETCH;
  switch( yymajor ){
    /* Here is inserted the actions which take place when a
    ** terminal or non-terminal is destroyed.  This can happen
    ** when the symbol is popped from the stack during a
    ** reduce or during error processing or when a parser is 
    ** being destroyed before it is finished parsing.
    **
    ** Note: during a reduce, the only symbols destroyed are those
    ** which appear on the RHS of the rule, but which are not used
    ** inside the C code.
    */
      /* TERMINAL Destructor */
    case 1: /* IF */
    case 2: /* ELSE */
    case 3: /* TRY */
    case 4: /* CATCH */
    case 5: /* FINALLY */
    case 6: /* YIELD */
    case 7: /* LPN */
    case 8: /* IDENTIFIER */
    case 9: /* PERIOD */
    case 10: /* RPN */
    case 11: /* RBR */
    case 12: /* LBR */
    case 13: /* COLON */
    case 14: /* SEMICOLON */
    case 15: /* VAR */
    case 16: /* ASSIGN */
    case 17: /* COMMA */
    case 18: /* LSQ */
    case 19: /* RSQ */
    case 20: /* NEW */
    case 21: /* NULL */
    case 22: /* TRUE */
    case 23: /* FALSE */
    case 24: /* NUMBER */
    case 25: /* STRING */
    case 26: /* INCREMENT */
    case 27: /* DECREMENT */
    case 28: /* PLUS */
    case 29: /* MINUS */
    case 30: /* XMARK */
    case 31: /* TILDE */
    case 32: /* ASTERISK */
    case 33: /* SOLIDUS */
    case 34: /* PERCENT */
    case 35: /* LSHIFT */
    case 36: /* RSHIFT */
    case 37: /* URSHIFT */
    case 38: /* AMPERSAND */
    case 39: /* CARET */
    case 40: /* VBAR */
    case 41: /* CONCATENATE */
    case 42: /* EQUAL */
    case 43: /* NOTEQUAL */
    case 44: /* LESS */
    case 45: /* GREATER */
    case 46: /* LESSEQUAL */
    case 47: /* GREATEREQUAL */
    case 48: /* IN */
    case 49: /* NOTIN */
    case 50: /* IS */
    case 51: /* NOTIS */
    case 52: /* LOGICAND */
    case 53: /* LOGICXOR */
    case 54: /* LOGICOR */
    case 55: /* QMARK */
    case 56: /* ELLIPSIS */
    case 57: /* MULASSIGN */
    case 58: /* DIVASSIGN */
    case 59: /* MODASSIGN */
    case 60: /* INTDIVASSIGN */
    case 61: /* ADDASSIGN */
    case 62: /* SUBASSIGN */
    case 63: /* LSHIFTASSIGN */
    case 64: /* RSHIFTASSIGN */
    case 65: /* URSHIFTASSIGN */
    case 66: /* BITANDASSIGN */
    case 67: /* BITXORASSIGN */
    case 68: /* BITORASSIGN */
    case 69: /* WHILE */
    case 70: /* DELETE */
    case 71: /* CASE */
    case 72: /* DEFAULT */
    case 73: /* CONTINUE */
    case 74: /* BREAK */
    case 75: /* RETURN */
    case 76: /* THROW */
    case 77: /* SWITCH */
    case 78: /* DO */
    case 79: /* FOR */
    case 80: /* EACHKEY */
    case 81: /* USING */
{
#line 108 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"

    p->destroy( (yypminor->yy0) );

#line 1982 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
}
      break;
      /* Default NON-TERMINAL Destructor */
    case 82: /* error */
    case 83: /* proto */
    case 84: /* expr_call */
    case 85: /* expr_yield */
    case 86: /* object_lbr */
    case 87: /* newobj_lbr */
    case 88: /* func_lbr */
    case 89: /* newfunc_lbr */
    case 90: /* varname */
    case 91: /* varname_list */
    case 92: /* compare_op */
    case 93: /* assign_op */
    case 94: /* value_lbody */
    case 95: /* value_list */
    case 96: /* keyval_lbody */
    case 97: /* keyval_list */
    case 98: /* stmt_lbr */
    case 99: /* stmt_lbr_ru */
    case 100: /* stmt_if */
    case 101: /* stmt_switch */
    case 102: /* stmt_while */
    case 103: /* stmt_do */
    case 104: /* scope_for */
    case 105: /* stmt_foreach */
    case 106: /* stmt_for */
    case 107: /* stmt_using */
    case 108: /* try_block */
    case 109: /* try_catch */
    case 110: /* scope_catch */
    case 111: /* stmt_catch */
    case 112: /* token_yield */
    case 113: /* script */
    case 114: /* stmt_list */
    case 115: /* name */
    case 116: /* expr_paren */
    case 117: /* expr_list */
    case 118: /* decl_object */
    case 119: /* object_decls */
    case 120: /* expr_simple */
    case 121: /* object_decl */
    case 122: /* decl_func */
    case 123: /* decl_proto */
    case 124: /* decl_var */
    case 125: /* decl_noinit */
    case 126: /* expr_index */
    case 127: /* expr_assign */
    case 128: /* expr_value */
    case 129: /* expr_new */
    case 130: /* expr_postfix */
    case 131: /* expr_literal */
    case 132: /* expr_suffix */
    case 133: /* expr_unary */
    case 134: /* expr_mul */
    case 135: /* expr_add */
    case 136: /* expr_shift */
    case 137: /* expr_bitand */
    case 138: /* expr_bitxor */
    case 139: /* expr_bitor */
    case 140: /* expr_concat */
    case 141: /* expr_compare */
    case 142: /* expr_and */
    case 143: /* expr_xor */
    case 144: /* expr_or */
    case 145: /* expr_nolbr */
    case 146: /* expr_lbody */
    case 147: /* expr_final */
    case 148: /* sexpr_lbody */
    case 149: /* sexpr_list */
    case 150: /* sexpr_assign */
    case 151: /* condition */
    case 152: /* stmt */
    case 153: /* stmt_common */
    case 154: /* stmt_reuse */
    case 155: /* stmt_try */
    case 156: /* for_cond */
    case 157: /* for_expr */
{
#line 104 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"


#line 2066 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
}
      break;
    default:  break;   /* If no destructor action specified: do nothing */
  }
}

/*
** Pop the parser's stack once.
**
** If there is a destructor routine associated with the token which
** is popped from the stack, then call it.
**
** Return the major token number for the symbol popped.
*/
static int yy_pop_parser_stack(yyParser *pParser){
  YYCODETYPE yymajor;
  yyStackEntry *yytos = &pParser->yystack[pParser->yyidx];

  if( pParser->yyidx<0 ) return 0;
#ifndef NDEBUG
  if( yyTraceFILE && pParser->yyidx>=0 ){
    fprintf(yyTraceFILE,"%sPopping %s\n",
      yyTracePrompt,
      yyTokenName[yytos->major]);
  }
#endif
  yymajor = yytos->major;
  yy_destructor(pParser, yymajor, &yytos->minor);
  pParser->yyidx--;
  return yymajor;
}

/* 
** Deallocate and destroy a parser.  Destructors are all called for
** all stack elements before shutting the parser down.
**
** Inputs:
** <ul>
** <li>  A pointer to the parser.  This should be a pointer
**       obtained from XecParseAlloc.
** <li>  A pointer to a function used to reclaim memory obtained
**       from malloc.
** </ul>
*/
void XecParseFree(
  void *p,                    /* The parser to be deleted */
  void (*freeProc)(void*)     /* Function used to reclaim memory */
){
  yyParser *pParser = (yyParser*)p;
  if( pParser==0 ) return;
  while( pParser->yyidx>=0 ) yy_pop_parser_stack(pParser);
#if YYSTACKDEPTH<=0
  free(pParser->yystack);
#endif
  (*freeProc)((void*)pParser);
}

/*
** Return the peak depth of the stack for a parser.
*/
#ifdef YYTRACKMAXSTACKDEPTH
int XecParseStackPeak(void *p){
  yyParser *pParser = (yyParser*)p;
  return pParser->yyidxMax;
}
#endif

/*
** Find the appropriate action for a parser given the terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
static int yy_find_shift_action(
  yyParser *pParser,        /* The parser */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
  int stateno = pParser->yystack[pParser->yyidx].stateno;
 
  if( stateno>YY_SHIFT_MAX || (i = yy_shift_ofst[stateno])==YY_SHIFT_USE_DFLT ){
    return yy_default[stateno];
  }
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
  if( i<0 || i>=YY_SZ_ACTTAB || yy_lookahead[i]!=iLookAhead ){
    if( iLookAhead>0 ){
#ifdef YYFALLBACK
      YYCODETYPE iFallback;            /* Fallback token */
      if( iLookAhead<sizeof(yyFallback)/sizeof(yyFallback[0])
             && (iFallback = yyFallback[iLookAhead])!=0 ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE, "%sFALLBACK %s => %s\n",
             yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[iFallback]);
        }
#endif
        return yy_find_shift_action(pParser, iFallback);
      }
#endif
#ifdef YYWILDCARD
      {
        int j = i - iLookAhead + YYWILDCARD;
        if( j>=0 && j<YY_SZ_ACTTAB && yy_lookahead[j]==YYWILDCARD ){
#ifndef NDEBUG
          if( yyTraceFILE ){
            fprintf(yyTraceFILE, "%sWILDCARD %s => %s\n",
               yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[YYWILDCARD]);
          }
#endif /* NDEBUG */
          return yy_action[j];
        }
      }
#endif /* YYWILDCARD */
    }
    return yy_default[stateno];
  }else{
    return yy_action[i];
  }
}

/*
** Find the appropriate action for a parser given the non-terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
static int yy_find_reduce_action(
  int stateno,              /* Current state number */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
#ifdef YYERRORSYMBOL
  if( stateno>YY_REDUCE_MAX ){
    return yy_default[stateno];
  }
#else
  assert( stateno<=YY_REDUCE_MAX );
#endif
  i = yy_reduce_ofst[stateno];
  assert( i!=YY_REDUCE_USE_DFLT );
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
#ifdef YYERRORSYMBOL
  if( i<0 || i>=YY_SZ_ACTTAB || yy_lookahead[i]!=iLookAhead ){
    return yy_default[stateno];
  }
#else
  assert( i>=0 && i<YY_SZ_ACTTAB );
  assert( yy_lookahead[i]==iLookAhead );
#endif
  return yy_action[i];
}

/*
** The following routine is called if the stack overflows.
*/
static void yyStackOverflow(yyParser *yypParser, YYMINORTYPE *yypMinor){
   XecParseARG_FETCH;
   yypParser->yyidx--;
#ifndef NDEBUG
   if( yyTraceFILE ){
     fprintf(yyTraceFILE,"%sStack Overflow!\n",yyTracePrompt);
   }
#endif
   while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
   /* Here code is inserted which will execute if the parser
   ** stack every overflows */
   XecParseARG_STORE; /* Suppress warning about unused %extra_argument var */
}

/*
** Perform a shift action.
*/
static void yy_shift(
  yyParser *yypParser,          /* The parser to be shifted */
  int yyNewState,               /* The new state to shift in */
  int yyMajor,                  /* The major token to shift in */
  YYMINORTYPE *yypMinor         /* Pointer to the minor token to shift in */
){
  yyStackEntry *yytos;
  yypParser->yyidx++;
#ifdef YYTRACKMAXSTACKDEPTH
  if( yypParser->yyidx>yypParser->yyidxMax ){
    yypParser->yyidxMax = yypParser->yyidx;
  }
#endif
#if YYSTACKDEPTH>0 
  if( yypParser->yyidx>=YYSTACKDEPTH ){
    yyStackOverflow(yypParser, yypMinor);
    return;
  }
#else
  if( yypParser->yyidx>=yypParser->yystksz ){
    yyGrowStack(yypParser);
    if( yypParser->yyidx>=yypParser->yystksz ){
      yyStackOverflow(yypParser, yypMinor);
      return;
    }
  }
#endif
  yytos = &yypParser->yystack[yypParser->yyidx];
  yytos->stateno = (YYACTIONTYPE)yyNewState;
  yytos->major = (YYCODETYPE)yyMajor;
  yytos->minor = *yypMinor;
#ifndef NDEBUG
  if( yyTraceFILE && yypParser->yyidx>0 ){
    int i;
    fprintf(yyTraceFILE,"%sShift %d\n",yyTracePrompt,yyNewState);
    fprintf(yyTraceFILE,"%sStack:",yyTracePrompt);
    for(i=1; i<=yypParser->yyidx; i++)
      fprintf(yyTraceFILE," %s",yyTokenName[yypParser->yystack[i].major]);
    fprintf(yyTraceFILE,"\n");
  }
#endif
}

/* The following table contains information about every rule that
** is used during the reduce.
*/
static const struct {
  YYCODETYPE lhs;         /* Symbol on the left-hand side of the rule */
  unsigned char nrhs;     /* Number of right-hand side symbols in the rule */
} yyRuleInfo[] = {
  { 113, 1 },
  { 115, 1 },
  { 115, 3 },
  { 83, 2 },
  { 116, 2 },
  { 116, 3 },
  { 118, 3 },
  { 86, 2 },
  { 86, 4 },
  { 119, 0 },
  { 119, 2 },
  { 121, 1 },
  { 121, 1 },
  { 121, 1 },
  { 121, 2 },
  { 121, 2 },
  { 121, 2 },
  { 123, 1 },
  { 123, 2 },
  { 122, 3 },
  { 88, 2 },
  { 88, 3 },
  { 124, 4 },
  { 124, 4 },
  { 125, 2 },
  { 125, 2 },
  { 90, 1 },
  { 91, 3 },
  { 91, 3 },
  { 126, 3 },
  { 126, 5 },
  { 126, 4 },
  { 126, 3 },
  { 126, 5 },
  { 126, 4 },
  { 85, 3 },
  { 85, 4 },
  { 129, 3 },
  { 129, 3 },
  { 84, 2 },
  { 84, 2 },
  { 84, 2 },
  { 84, 2 },
  { 84, 2 },
  { 84, 2 },
  { 130, 3 },
  { 130, 5 },
  { 130, 4 },
  { 130, 3 },
  { 130, 5 },
  { 130, 4 },
  { 130, 3 },
  { 130, 5 },
  { 130, 4 },
  { 130, 3 },
  { 130, 5 },
  { 130, 4 },
  { 130, 3 },
  { 130, 5 },
  { 130, 4 },
  { 120, 1 },
  { 120, 1 },
  { 120, 1 },
  { 120, 1 },
  { 120, 1 },
  { 120, 1 },
  { 120, 1 },
  { 120, 2 },
  { 120, 2 },
  { 131, 1 },
  { 131, 1 },
  { 131, 1 },
  { 131, 1 },
  { 131, 1 },
  { 131, 1 },
  { 132, 1 },
  { 132, 2 },
  { 132, 2 },
  { 133, 1 },
  { 133, 2 },
  { 133, 2 },
  { 133, 2 },
  { 133, 2 },
  { 133, 2 },
  { 133, 2 },
  { 134, 1 },
  { 134, 3 },
  { 134, 3 },
  { 134, 3 },
  { 134, 3 },
  { 135, 1 },
  { 135, 3 },
  { 135, 3 },
  { 136, 1 },
  { 136, 3 },
  { 136, 3 },
  { 136, 3 },
  { 137, 1 },
  { 137, 3 },
  { 138, 1 },
  { 138, 3 },
  { 139, 1 },
  { 139, 3 },
  { 140, 1 },
  { 140, 3 },
  { 141, 1 },
  { 141, 3 },
  { 92, 1 },
  { 92, 1 },
  { 92, 1 },
  { 92, 1 },
  { 92, 1 },
  { 92, 1 },
  { 92, 1 },
  { 92, 1 },
  { 92, 1 },
  { 92, 1 },
  { 142, 1 },
  { 142, 3 },
  { 143, 1 },
  { 143, 3 },
  { 144, 1 },
  { 144, 3 },
  { 145, 1 },
  { 145, 5 },
  { 145, 2 },
  { 145, 3 },
  { 145, 3 },
  { 145, 3 },
  { 87, 2 },
  { 87, 3 },
  { 89, 3 },
  { 89, 4 },
  { 89, 4 },
  { 89, 5 },
  { 128, 1 },
  { 128, 2 },
  { 128, 3 },
  { 146, 1 },
  { 146, 3 },
  { 147, 1 },
  { 147, 2 },
  { 147, 2 },
  { 147, 2 },
  { 147, 3 },
  { 147, 3 },
  { 147, 4 },
  { 147, 4 },
  { 147, 4 },
  { 147, 4 },
  { 147, 4 },
  { 147, 4 },
  { 147, 4 },
  { 117, 1 },
  { 117, 1 },
  { 117, 3 },
  { 127, 1 },
  { 127, 3 },
  { 93, 1 },
  { 93, 1 },
  { 93, 1 },
  { 93, 1 },
  { 93, 1 },
  { 93, 1 },
  { 93, 1 },
  { 93, 1 },
  { 93, 1 },
  { 93, 1 },
  { 93, 1 },
  { 93, 1 },
  { 93, 1 },
  { 94, 1 },
  { 94, 3 },
  { 95, 1 },
  { 95, 2 },
  { 95, 1 },
  { 95, 2 },
  { 95, 3 },
  { 96, 3 },
  { 96, 5 },
  { 97, 1 },
  { 97, 2 },
  { 148, 1 },
  { 148, 3 },
  { 149, 1 },
  { 149, 1 },
  { 149, 3 },
  { 150, 1 },
  { 150, 3 },
  { 151, 1 },
  { 151, 4 },
  { 151, 4 },
  { 114, 0 },
  { 114, 2 },
  { 114, 2 },
  { 114, 2 },
  { 114, 2 },
  { 114, 3 },
  { 114, 3 },
  { 152, 3 },
  { 152, 1 },
  { 98, 1 },
  { 154, 3 },
  { 154, 1 },
  { 99, 1 },
  { 153, 2 },
  { 153, 5 },
  { 153, 7 },
  { 153, 7 },
  { 153, 5 },
  { 153, 7 },
  { 153, 2 },
  { 153, 2 },
  { 153, 5 },
  { 153, 1 },
  { 153, 3 },
  { 153, 3 },
  { 153, 2 },
  { 153, 2 },
  { 153, 2 },
  { 153, 2 },
  { 153, 3 },
  { 153, 2 },
  { 153, 3 },
  { 153, 3 },
  { 100, 1 },
  { 101, 1 },
  { 102, 1 },
  { 103, 1 },
  { 104, 1 },
  { 105, 6 },
  { 105, 6 },
  { 105, 7 },
  { 105, 7 },
  { 105, 7 },
  { 105, 7 },
  { 106, 8 },
  { 156, 0 },
  { 156, 1 },
  { 157, 0 },
  { 157, 1 },
  { 107, 1 },
  { 155, 1 },
  { 155, 3 },
  { 155, 3 },
  { 108, 2 },
  { 109, 3 },
  { 109, 3 },
  { 110, 1 },
  { 111, 5 },
  { 111, 6 },
  { 111, 7 },
  { 112, 1 },
};

static void yy_accept(yyParser*);  /* Forward Declaration */

/*
** Perform a reduce action and the shift that must immediately
** follow the reduce.
*/
static void yy_reduce(
  yyParser *yypParser,         /* The parser */
  int yyruleno                 /* Number of the rule by which to reduce */
){
  int yygoto;                     /* The next state */
  int yyact;                      /* The next action */
  YYMINORTYPE yygotominor;        /* The LHS of the rule reduced */
  yyStackEntry *yymsp;            /* The top of the parser's stack */
  int yysize;                     /* Amount to pop the stack */
  XecParseARG_FETCH;
  yymsp = &yypParser->yystack[yypParser->yyidx];
#ifndef NDEBUG
  if( yyTraceFILE && yyruleno>=0 
        && yyruleno<(int)(sizeof(yyRuleName)/sizeof(yyRuleName[0])) ){
    fprintf(yyTraceFILE, "%sReduce [%s].\n", yyTracePrompt,
      yyRuleName[yyruleno]);
  }
#endif /* NDEBUG */

  /* Silence complaints from purify about yygotominor being uninitialized
  ** in some cases when it is copied into the stack after the following
  ** switch.  yygotominor is uninitialized when a rule reduces that does
  ** not set the value of its left-hand side nonterminal.  Leaving the
  ** value of the nonterminal uninitialized is utterly harmless as long
  ** as the value is never used.  So really the only thing this code
  ** accomplishes is to quieten purify.  
  **
  ** 2007-01-16:  The wireshark project (www.wireshark.org) reports that
  ** without this code, their parser segfaults.  I'm not sure what there
  ** parser is doing to make this happen.  This is the second bug report
  ** from wireshark this week.  Clearly they are stressing Lemon in ways
  ** that it has not been previously stressed...  (SQLite ticket #2172)
  */
  /*memset(&yygotominor, 0, sizeof(yygotominor));*/
  yygotominor = yyzerominor;


  switch( yyruleno ){
  /* Beginning here are the reduction cases.  A typical example
  ** follows:
  **   case 0:
  **  #line <lineno> <grammarfile>
  **     { ... }           // User supplied code
  **  #line <lineno> <thisfile>
  **     break;
  */
      case 0: /* script ::= stmt_list */
#line 141 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,114,&yymsp[0].minor);
}
#line 2607 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 1: /* name ::= IDENTIFIER */
#line 153 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_unqual_name >(
                                    yymsp[0].minor.yy0->sloc, yymsp[0].minor.yy0->text );
                }
#line 2615 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 2: /* name ::= name PERIOD IDENTIFIER */
#line 158 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_unqual_qual >(
                                    yymsp[0].minor.yy0->sloc, yymsp[-2].minor.yy259, yymsp[0].minor.yy0->text );
                  yy_destructor(yypParser,9,&yymsp[-1].minor);
}
#line 2624 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 3: /* proto ::= name expr_paren */
#line 164 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy219 = p->alloc< xec_unqual_proto >(
                                    yymsp[-1].minor.yy259->sloc, yymsp[-1].minor.yy259, p->list( yymsp[0].minor.yy259 ) );
                }
#line 2632 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 4: /* expr_paren ::= LPN RPN */
#line 170 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = nullptr;
                  yy_destructor(yypParser,7,&yymsp[-1].minor);
  yy_destructor(yypParser,10,&yymsp[0].minor);
}
#line 2641 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 5: /* expr_paren ::= LPN expr_list RPN */
#line 174 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = yymsp[-1].minor.yy259;
                  yy_destructor(yypParser,7,&yymsp[-2].minor);
  yy_destructor(yypParser,10,&yymsp[0].minor);
}
#line 2650 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 6: /* decl_object ::= object_lbr object_decls RBR */
#line 188 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    p->close_scope( yymsp[-2].minor.yy182->scope );
                  yy_destructor(yypParser,119,&yymsp[-1].minor);
  yy_destructor(yypParser,11,&yymsp[0].minor);
}
#line 2659 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 7: /* object_lbr ::= name LBR */
#line 193 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy182 = p->object( yymsp[-1].minor.yy259->sloc, yymsp[-1].minor.yy259, nullptr );
                  yy_destructor(yypParser,12,&yymsp[0].minor);
}
#line 2667 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 8: /* object_lbr ::= name COLON expr_simple LBR */
#line 197 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy259 = p->resolve( yymsp[-1].minor.yy259 );
                    yygotominor.yy182 = p->object( yymsp[-3].minor.yy259->sloc, yymsp[-3].minor.yy259, yymsp[-1].minor.yy259 );
                  yy_destructor(yypParser,13,&yymsp[-2].minor);
  yy_destructor(yypParser,12,&yymsp[0].minor);
}
#line 2677 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 9: /* object_decls ::= */
      case 192: /* stmt_list ::= */ yytestcase(yyruleno==192);
#line 203 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                }
#line 2684 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 10: /* object_decls ::= object_decls object_decl */
#line 206 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,119,&yymsp[-1].minor);
  yy_destructor(yypParser,121,&yymsp[0].minor);
}
#line 2692 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 11: /* object_decl ::= SEMICOLON */
#line 210 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,14,&yymsp[0].minor);
}
#line 2699 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 12: /* object_decl ::= decl_object */
#line 213 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,118,&yymsp[0].minor);
}
#line 2706 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 13: /* object_decl ::= decl_func */
#line 216 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,122,&yymsp[0].minor);
}
#line 2713 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 14: /* object_decl ::= decl_proto SEMICOLON */
#line 219 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,123,&yymsp[-1].minor);
  yy_destructor(yypParser,14,&yymsp[0].minor);
}
#line 2721 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 15: /* object_decl ::= decl_var SEMICOLON */
#line 222 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,124,&yymsp[-1].minor);
  yy_destructor(yypParser,14,&yymsp[0].minor);
}
#line 2729 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 16: /* object_decl ::= decl_noinit SEMICOLON */
#line 225 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,125,&yymsp[-1].minor);
  yy_destructor(yypParser,14,&yymsp[0].minor);
}
#line 2737 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 17: /* decl_proto ::= proto */
#line 232 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    p->prototype( yymsp[0].minor.yy219->sloc, yymsp[0].minor.yy219 );
                }
#line 2744 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 18: /* decl_proto ::= proto YIELD */
#line 236 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy219->coroutine = true;
                    p->prototype( yymsp[-1].minor.yy219->sloc, yymsp[-1].minor.yy219 );
                  yy_destructor(yypParser,6,&yymsp[0].minor);
}
#line 2753 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 19: /* decl_func ::= func_lbr stmt_list RBR */
#line 244 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    p->close_scope( yymsp[-2].minor.yy45->scope );
                  yy_destructor(yypParser,114,&yymsp[-1].minor);
  yy_destructor(yypParser,11,&yymsp[0].minor);
}
#line 2762 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 20: /* func_lbr ::= proto LBR */
#line 249 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy45 = p->function( yymsp[-1].minor.yy219->sloc, yymsp[-1].minor.yy219->name,
                                    yymsp[-1].minor.yy219->params, yymsp[-1].minor.yy219->coroutine, false );
                  yy_destructor(yypParser,12,&yymsp[0].minor);
}
#line 2771 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 21: /* func_lbr ::= proto YIELD LBR */
#line 254 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-2].minor.yy219->coroutine = true;
                    yygotominor.yy45 = p->function( yymsp[-2].minor.yy219->sloc, yymsp[-2].minor.yy219->name,
                                    yymsp[-2].minor.yy219->params, yymsp[-2].minor.yy219->coroutine, false );
                  yy_destructor(yypParser,6,&yymsp[-1].minor);
  yy_destructor(yypParser,12,&yymsp[0].minor);
}
#line 2782 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 22: /* decl_var ::= VAR varname ASSIGN expr_list */
#line 263 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    p->var( yymsp[-3].minor.yy0->sloc, yymsp[-2].minor.yy240, p->resolve( yymsp[0].minor.yy259 ) );
                    p->destroy( yymsp[-3].minor.yy0 );
                  yy_destructor(yypParser,16,&yymsp[-1].minor);
}
#line 2791 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 23: /* decl_var ::= VAR varname_list ASSIGN expr_list */
#line 268 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    p->var_list( yymsp[-3].minor.yy0->sloc, yymsp[-2].minor.yy283, p->resolve( yymsp[0].minor.yy259 ) );
                    p->destroy( yymsp[-3].minor.yy0 );
                  yy_destructor(yypParser,16,&yymsp[-1].minor);
}
#line 2800 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 24: /* decl_noinit ::= VAR varname */
#line 274 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    p->var( yymsp[-1].minor.yy0->sloc, yymsp[0].minor.yy240, nullptr );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 2808 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 25: /* decl_noinit ::= VAR varname_list */
#line 279 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    p->var_list( yymsp[-1].minor.yy0->sloc, yymsp[0].minor.yy283, nullptr );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 2816 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 26: /* varname ::= IDENTIFIER */
#line 287 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy240 = p->alloc< xec_unqual_name >( yymsp[0].minor.yy0->sloc, yymsp[0].minor.yy0->text );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 2824 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 27: /* varname_list ::= varname COMMA varname */
#line 293 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy283 = p->alloc< xec_unqual_list >( yymsp[-2].minor.yy240->sloc );
                    yygotominor.yy283->names.push_back( yymsp[-2].minor.yy240 );
                    yygotominor.yy283->names.push_back( yymsp[0].minor.yy240 );
                  yy_destructor(yypParser,17,&yymsp[-1].minor);
}
#line 2834 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 28: /* varname_list ::= varname_list COMMA varname */
#line 299 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy283 = yymsp[-2].minor.yy283;
                    yygotominor.yy283->names.push_back( yymsp[0].minor.yy240 );
                  yy_destructor(yypParser,17,&yymsp[-1].minor);
}
#line 2843 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 29: /* expr_index ::= LPN expr_assign RPN */
#line 315 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy259 = p->resolve( yymsp[-1].minor.yy259 );
                    switch ( yymsp[-1].minor.yy259->kind )
                    {
                    case XEC_EXPR_KEY:
                    case XEC_EXPR_INKEY:
                    case XEC_EXPR_CALL:
                    case XEC_EXPR_YIELD:
                    case XEC_EXPR_VARARG:
                    case XEC_EXPR_UNPACK:
                    case XEC_EXPR_LIST:
                    case XEC_EXPR_ASSIGN_LIST:
                        yygotominor.yy259 = p->alloc< xec_expr_mono >( yymsp[-1].minor.yy259->sloc, yymsp[-1].minor.yy259 );
                        break;
                        
                    default:
                        yygotominor.yy259 = yymsp[-1].minor.yy259;
                        break;
                    }
                  yy_destructor(yypParser,7,&yymsp[-2].minor);
  yy_destructor(yypParser,10,&yymsp[0].minor);
}
#line 2869 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 30: /* expr_index ::= name PERIOD LSQ expr_value RSQ */
      case 33: /* expr_index ::= expr_index PERIOD LSQ expr_value RSQ */ yytestcase(yyruleno==33);
#line 336 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-4].minor.yy259  = p->resolve( yymsp[-4].minor.yy259 );
                    yymsp[-1].minor.yy259   = p->resolve( yymsp[-1].minor.yy259 );
                    yygotominor.yy259 = p->alloc< xec_expr_inkey >( yymsp[-4].minor.yy259->sloc, yymsp[-4].minor.yy259, yymsp[-1].minor.yy259 );
                  yy_destructor(yypParser,9,&yymsp[-3].minor);
  yy_destructor(yypParser,18,&yymsp[-2].minor);
  yy_destructor(yypParser,19,&yymsp[0].minor);
}
#line 2882 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 31: /* expr_index ::= name LSQ expr_value RSQ */
      case 34: /* expr_index ::= expr_index LSQ expr_value RSQ */ yytestcase(yyruleno==34);
#line 342 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-3].minor.yy259  = p->resolve( yymsp[-3].minor.yy259 );
                    yymsp[-1].minor.yy259 = p->resolve( yymsp[-1].minor.yy259 );
                    yygotominor.yy259 = p->alloc< xec_expr_index >( yymsp[-3].minor.yy259->sloc, yymsp[-3].minor.yy259, yymsp[-1].minor.yy259 );
                  yy_destructor(yypParser,18,&yymsp[-2].minor);
  yy_destructor(yypParser,19,&yymsp[0].minor);
}
#line 2894 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 32: /* expr_index ::= expr_index PERIOD IDENTIFIER */
#line 348 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-2].minor.yy259  = p->resolve( yymsp[-2].minor.yy259 );
                    yygotominor.yy259 = p->alloc< xec_expr_key >( yymsp[-2].minor.yy259->sloc, yymsp[-2].minor.yy259, yymsp[0].minor.yy0->text );
                    p->destroy( yymsp[0].minor.yy0 );
                  yy_destructor(yypParser,9,&yymsp[-1].minor);
}
#line 2904 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 35: /* expr_yield ::= YIELD LPN RPN */
#line 369 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy55 = p->alloc< xec_expr_yield >( yymsp[-2].minor.yy0->sloc, nullptr );
                    p->destroy( yymsp[-2].minor.yy0 );
                  yy_destructor(yypParser,7,&yymsp[-1].minor);
  yy_destructor(yypParser,10,&yymsp[0].minor);
}
#line 2914 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 36: /* expr_yield ::= YIELD LPN expr_list RPN */
#line 375 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy55 = p->alloc< xec_expr_yield >(
                            yymsp[-3].minor.yy0->sloc, p->list( p->resolve( yymsp[-1].minor.yy259 ) ) );
                    p->destroy( yymsp[-3].minor.yy0 );
                  yy_destructor(yypParser,7,&yymsp[-2].minor);
  yy_destructor(yypParser,10,&yymsp[0].minor);
}
#line 2925 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 37: /* expr_new ::= NEW name expr_paren */
#line 383 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy259 = p->resolve( yymsp[-1].minor.yy259 );
                    yygotominor.yy259 = p->alloc< xec_new_new >(
                            yymsp[-2].minor.yy0->sloc, yymsp[-1].minor.yy259, p->list( p->resolve( yymsp[0].minor.yy259 ) ) );
                    p->destroy( yymsp[-2].minor.yy0 );
                }
#line 2935 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 38: /* expr_new ::= NEW expr_index expr_paren */
#line 390 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_new_new >(
                            yymsp[-2].minor.yy0->sloc, yymsp[-1].minor.yy259, p->list( p->resolve( yymsp[0].minor.yy259 ) ) );
                    p->destroy( yymsp[-2].minor.yy0 );
                }
#line 2944 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 39: /* expr_call ::= proto expr_paren */
#line 398 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    xec_expr_call* call = p->resolve_proto( yymsp[-1].minor.yy219 );
                    yygotominor.yy52 = p->alloc< xec_expr_call >(
                            call->sloc, call, p->list( p->resolve( yymsp[0].minor.yy259 ) ) );
                }
#line 2953 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 40: /* expr_call ::= expr_index expr_paren */
      case 42: /* expr_call ::= expr_new expr_paren */ yytestcase(yyruleno==42);
      case 44: /* expr_call ::= expr_postfix expr_paren */ yytestcase(yyruleno==44);
#line 404 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy52 = p->alloc< xec_expr_call >(
                            yymsp[-1].minor.yy259->sloc, yymsp[-1].minor.yy259, p->list( p->resolve( yymsp[0].minor.yy259 ) ) );
                }
#line 2963 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 41: /* expr_call ::= expr_yield expr_paren */
#line 409 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy52 = p->alloc< xec_expr_call >(
                            yymsp[-1].minor.yy55->sloc, yymsp[-1].minor.yy55, p->list( p->resolve( yymsp[0].minor.yy259 ) ) );
                }
#line 2971 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 43: /* expr_call ::= expr_call expr_paren */
#line 419 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy52 = p->alloc< xec_expr_call >(
                            yymsp[-1].minor.yy52->sloc, yymsp[-1].minor.yy52, p->list( p->resolve( yymsp[0].minor.yy259 ) ) );
                }
#line 2979 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 45: /* expr_postfix ::= proto PERIOD IDENTIFIER */
#line 431 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    xec_expr_call* call = p->resolve_proto( yymsp[-2].minor.yy219 );
                    yygotominor.yy259 = p->alloc< xec_expr_key >(
                             call->sloc, call, yymsp[0].minor.yy0->text );
                    p->destroy( yymsp[0].minor.yy0 );
                  yy_destructor(yypParser,9,&yymsp[-1].minor);
}
#line 2990 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 46: /* expr_postfix ::= proto PERIOD LSQ expr_value RSQ */
#line 438 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    xec_expr_call* call = p->resolve_proto( yymsp[-4].minor.yy219 );
                    yymsp[-1].minor.yy259 = p->resolve( yymsp[-1].minor.yy259 );
                    yygotominor.yy259 = p->alloc< xec_expr_inkey >(
                             call->sloc, call, yymsp[-1].minor.yy259 );
                  yy_destructor(yypParser,9,&yymsp[-3].minor);
  yy_destructor(yypParser,18,&yymsp[-2].minor);
  yy_destructor(yypParser,19,&yymsp[0].minor);
}
#line 3003 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 47: /* expr_postfix ::= proto LSQ expr_value RSQ */
#line 445 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    xec_expr_call* call = p->resolve_proto( yymsp[-3].minor.yy219 );
                    yymsp[-1].minor.yy259 = p->resolve( yymsp[-1].minor.yy259 );
                    yygotominor.yy259 = p->alloc< xec_expr_index >(
                             call->sloc, call, yymsp[-1].minor.yy259 );
                  yy_destructor(yypParser,18,&yymsp[-2].minor);
  yy_destructor(yypParser,19,&yymsp[0].minor);
}
#line 3015 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 48: /* expr_postfix ::= expr_yield PERIOD IDENTIFIER */
#line 452 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_expr_key >(
                             yymsp[-2].minor.yy55->sloc, yymsp[-2].minor.yy55, yymsp[0].minor.yy0->text );
                    p->destroy( yymsp[0].minor.yy0 );
                  yy_destructor(yypParser,9,&yymsp[-1].minor);
}
#line 3025 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 49: /* expr_postfix ::= expr_yield PERIOD LSQ expr_value RSQ */
#line 458 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy259 = p->resolve( yymsp[-1].minor.yy259 );
                    yygotominor.yy259 = p->alloc< xec_expr_inkey >(
                             yymsp[-4].minor.yy55->sloc, yymsp[-4].minor.yy55, yymsp[-1].minor.yy259 );
                  yy_destructor(yypParser,9,&yymsp[-3].minor);
  yy_destructor(yypParser,18,&yymsp[-2].minor);
  yy_destructor(yypParser,19,&yymsp[0].minor);
}
#line 3037 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 50: /* expr_postfix ::= expr_yield LSQ expr_value RSQ */
#line 464 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy259 = p->resolve( yymsp[-1].minor.yy259 );
                    yygotominor.yy259 = p->alloc< xec_expr_index >(
                             yymsp[-3].minor.yy55->sloc, yymsp[-3].minor.yy55, yymsp[-1].minor.yy259 );
                  yy_destructor(yypParser,18,&yymsp[-2].minor);
  yy_destructor(yypParser,19,&yymsp[0].minor);
}
#line 3048 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 51: /* expr_postfix ::= expr_new PERIOD IDENTIFIER */
      case 57: /* expr_postfix ::= expr_postfix PERIOD IDENTIFIER */ yytestcase(yyruleno==57);
#line 470 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_expr_key >(
                             yymsp[-2].minor.yy259->sloc, yymsp[-2].minor.yy259, yymsp[0].minor.yy0->text );
                    p->destroy( yymsp[0].minor.yy0 );
                  yy_destructor(yypParser,9,&yymsp[-1].minor);
}
#line 3059 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 52: /* expr_postfix ::= expr_new PERIOD LSQ expr_value RSQ */
      case 58: /* expr_postfix ::= expr_postfix PERIOD LSQ expr_value RSQ */ yytestcase(yyruleno==58);
#line 476 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy259 = p->resolve( yymsp[-1].minor.yy259 );
                    yygotominor.yy259 = p->alloc< xec_expr_inkey >(
                             yymsp[-4].minor.yy259->sloc, yymsp[-4].minor.yy259, yymsp[-1].minor.yy259 );
                  yy_destructor(yypParser,9,&yymsp[-3].minor);
  yy_destructor(yypParser,18,&yymsp[-2].minor);
  yy_destructor(yypParser,19,&yymsp[0].minor);
}
#line 3072 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 53: /* expr_postfix ::= expr_new LSQ expr_value RSQ */
      case 59: /* expr_postfix ::= expr_postfix LSQ expr_value RSQ */ yytestcase(yyruleno==59);
#line 482 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy259 = p->resolve( yymsp[-1].minor.yy259 );
                    yygotominor.yy259 = p->alloc< xec_expr_index >(
                             yymsp[-3].minor.yy259->sloc, yymsp[-3].minor.yy259, yymsp[-1].minor.yy259 );
                  yy_destructor(yypParser,18,&yymsp[-2].minor);
  yy_destructor(yypParser,19,&yymsp[0].minor);
}
#line 3084 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 54: /* expr_postfix ::= expr_call PERIOD IDENTIFIER */
#line 488 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_expr_key >(
                             yymsp[-2].minor.yy52->sloc, yymsp[-2].minor.yy52, yymsp[0].minor.yy0->text );
                    p->destroy( yymsp[0].minor.yy0 );
                  yy_destructor(yypParser,9,&yymsp[-1].minor);
}
#line 3094 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 55: /* expr_postfix ::= expr_call PERIOD LSQ expr_value RSQ */
#line 494 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy259 = p->resolve( yymsp[-1].minor.yy259 );
                    yygotominor.yy259 = p->alloc< xec_expr_inkey >(
                             yymsp[-4].minor.yy52->sloc, yymsp[-4].minor.yy52, yymsp[-1].minor.yy259 );
                  yy_destructor(yypParser,9,&yymsp[-3].minor);
  yy_destructor(yypParser,18,&yymsp[-2].minor);
  yy_destructor(yypParser,19,&yymsp[0].minor);
}
#line 3106 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 56: /* expr_postfix ::= expr_call LSQ expr_value RSQ */
#line 500 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy259 = p->resolve( yymsp[-1].minor.yy259 );
                    yygotominor.yy259 = p->alloc< xec_expr_index >(
                             yymsp[-3].minor.yy52->sloc, yymsp[-3].minor.yy52, yymsp[-1].minor.yy259 );
                  yy_destructor(yypParser,18,&yymsp[-2].minor);
  yy_destructor(yypParser,19,&yymsp[0].minor);
}
#line 3117 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 60: /* expr_simple ::= name */
#line 530 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    // Don't resolve the name here, as it may be a parameter
                    // declaration for a prototype or function.
                    yygotominor.yy259 = yymsp[0].minor.yy259;
                }
#line 3126 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 61: /* expr_simple ::= proto */
#line 536 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->resolve_proto( yymsp[0].minor.yy219 );
                }
#line 3133 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 62: /* expr_simple ::= expr_index */
      case 64: /* expr_simple ::= expr_new */ yytestcase(yyruleno==64);
      case 66: /* expr_simple ::= expr_postfix */ yytestcase(yyruleno==66);
      case 69: /* expr_literal ::= expr_simple */ yytestcase(yyruleno==69);
      case 75: /* expr_suffix ::= expr_literal */ yytestcase(yyruleno==75);
      case 78: /* expr_unary ::= expr_suffix */ yytestcase(yyruleno==78);
      case 85: /* expr_mul ::= expr_unary */ yytestcase(yyruleno==85);
      case 90: /* expr_add ::= expr_mul */ yytestcase(yyruleno==90);
      case 93: /* expr_shift ::= expr_add */ yytestcase(yyruleno==93);
      case 97: /* expr_bitand ::= expr_shift */ yytestcase(yyruleno==97);
      case 99: /* expr_bitxor ::= expr_bitand */ yytestcase(yyruleno==99);
      case 101: /* expr_bitor ::= expr_bitxor */ yytestcase(yyruleno==101);
      case 103: /* expr_concat ::= expr_bitor */ yytestcase(yyruleno==103);
      case 105: /* expr_compare ::= expr_concat */ yytestcase(yyruleno==105);
      case 117: /* expr_and ::= expr_compare */ yytestcase(yyruleno==117);
      case 119: /* expr_xor ::= expr_and */ yytestcase(yyruleno==119);
      case 121: /* expr_or ::= expr_xor */ yytestcase(yyruleno==121);
      case 123: /* expr_nolbr ::= expr_or */ yytestcase(yyruleno==123);
      case 135: /* expr_value ::= expr_nolbr */ yytestcase(yyruleno==135);
      case 138: /* expr_lbody ::= expr_value */ yytestcase(yyruleno==138);
      case 153: /* expr_list ::= expr_final */ yytestcase(yyruleno==153);
      case 154: /* expr_list ::= expr_lbody */ yytestcase(yyruleno==154);
      case 184: /* sexpr_list ::= expr_final */ yytestcase(yyruleno==184);
      case 185: /* sexpr_list ::= sexpr_lbody */ yytestcase(yyruleno==185);
      case 187: /* sexpr_assign ::= sexpr_list */ yytestcase(yyruleno==187);
      case 189: /* condition ::= expr_assign */ yytestcase(yyruleno==189);
      case 200: /* stmt ::= stmt_common */ yytestcase(yyruleno==200);
      case 203: /* stmt_reuse ::= stmt_common */ yytestcase(yyruleno==203);
      case 214: /* stmt_common ::= stmt_try */ yytestcase(yyruleno==214);
      case 238: /* for_cond ::= condition */ yytestcase(yyruleno==238);
      case 240: /* for_expr ::= expr_assign */ yytestcase(yyruleno==240);
#line 540 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = yymsp[0].minor.yy259;
                }
#line 3170 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 63: /* expr_simple ::= expr_yield */
#line 544 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = yymsp[0].minor.yy55;
                }
#line 3177 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 65: /* expr_simple ::= expr_call */
#line 552 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = yymsp[0].minor.yy52;
                }
#line 3184 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 67: /* expr_simple ::= proto YIELD */
#line 560 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    xec_expr_call* call = p->resolve_proto( yymsp[-1].minor.yy219 );
                    call->yieldcall = true;
                    yygotominor.yy259 = call;
                  yy_destructor(yypParser,6,&yymsp[0].minor);
}
#line 3194 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 68: /* expr_simple ::= expr_call YIELD */
#line 566 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy52->yieldcall = true;
                    yygotominor.yy259 = yymsp[-1].minor.yy52;
                  yy_destructor(yypParser,6,&yymsp[0].minor);
}
#line 3203 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 70: /* expr_literal ::= NULL */
#line 576 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_expr_null >( yymsp[0].minor.yy0->sloc );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3211 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 71: /* expr_literal ::= TRUE */
#line 581 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_expr_bool >( yymsp[0].minor.yy0->sloc, true );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3219 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 72: /* expr_literal ::= FALSE */
#line 586 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_expr_bool >( yymsp[0].minor.yy0->sloc, false );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3227 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 73: /* expr_literal ::= NUMBER */
#line 591 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    double number = p->parse_number( yymsp[0].minor.yy0 );
                    yygotominor.yy259 = p->alloc< xec_expr_number >( yymsp[0].minor.yy0->sloc, number );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3236 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 74: /* expr_literal ::= STRING */
#line 597 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_expr_string >(
                            yymsp[0].minor.yy0->sloc, yymsp[0].minor.yy0->text, yymsp[0].minor.yy0->size );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3245 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 76: /* expr_suffix ::= expr_suffix INCREMENT */
      case 77: /* expr_suffix ::= expr_suffix DECREMENT */ yytestcase(yyruleno==77);
#line 608 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy259 = p->resolve( yymsp[-1].minor.yy259 );
                    yymsp[-1].minor.yy259 = p->lvalue( yymsp[-1].minor.yy259 );
                    yygotominor.yy259 = p->alloc< xec_expr_postop >(
                             yymsp[-1].minor.yy259->sloc, yymsp[0].minor.yy0->kind, yymsp[-1].minor.yy259 );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3257 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 79: /* expr_unary ::= PLUS expr_unary */
      case 80: /* expr_unary ::= MINUS expr_unary */ yytestcase(yyruleno==80);
      case 81: /* expr_unary ::= XMARK expr_unary */ yytestcase(yyruleno==81);
      case 82: /* expr_unary ::= TILDE expr_unary */ yytestcase(yyruleno==82);
#line 629 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[0].minor.yy259 = p->resolve( yymsp[0].minor.yy259 );
                    yygotominor.yy259 = p->alloc< xec_expr_unary >(
                             yymsp[-1].minor.yy0->sloc, yymsp[-1].minor.yy0->kind, yymsp[0].minor.yy259 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 3270 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 83: /* expr_unary ::= INCREMENT expr_unary */
      case 84: /* expr_unary ::= DECREMENT expr_unary */ yytestcase(yyruleno==84);
#line 657 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[0].minor.yy259 = p->resolve( yymsp[0].minor.yy259 );
                    yymsp[0].minor.yy259 = p->lvalue( yymsp[0].minor.yy259 );
                    yygotominor.yy259 = p->alloc< xec_expr_preop >(
                             yymsp[-1].minor.yy0->sloc, yymsp[-1].minor.yy0->kind, yymsp[0].minor.yy259 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 3282 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 86: /* expr_mul ::= expr_mul ASTERISK expr_unary */
      case 87: /* expr_mul ::= expr_mul SOLIDUS expr_unary */ yytestcase(yyruleno==87);
      case 88: /* expr_mul ::= expr_mul PERCENT expr_unary */ yytestcase(yyruleno==88);
      case 89: /* expr_mul ::= expr_mul TILDE expr_unary */ yytestcase(yyruleno==89);
      case 91: /* expr_add ::= expr_add PLUS expr_mul */ yytestcase(yyruleno==91);
      case 92: /* expr_add ::= expr_add MINUS expr_mul */ yytestcase(yyruleno==92);
      case 94: /* expr_shift ::= expr_shift LSHIFT expr_add */ yytestcase(yyruleno==94);
      case 95: /* expr_shift ::= expr_shift RSHIFT expr_add */ yytestcase(yyruleno==95);
      case 96: /* expr_shift ::= expr_shift URSHIFT expr_add */ yytestcase(yyruleno==96);
      case 98: /* expr_bitand ::= expr_bitand AMPERSAND expr_shift */ yytestcase(yyruleno==98);
      case 100: /* expr_bitxor ::= expr_bitxor CARET expr_bitand */ yytestcase(yyruleno==100);
      case 102: /* expr_bitor ::= expr_bitor VBAR expr_bitxor */ yytestcase(yyruleno==102);
      case 104: /* expr_concat ::= expr_concat CONCATENATE expr_bitor */ yytestcase(yyruleno==104);
#line 678 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-2].minor.yy259 = p->resolve( yymsp[-2].minor.yy259 );
                    yymsp[0].minor.yy259 = p->resolve( yymsp[0].minor.yy259 );
                    yygotominor.yy259 = p->alloc< xec_expr_binary >(
                                    yymsp[-2].minor.yy259->sloc, yymsp[-1].minor.yy0->kind, yymsp[-2].minor.yy259, yymsp[0].minor.yy259 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 3305 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 106: /* expr_compare ::= expr_compare compare_op expr_concat */
#line 817 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-2].minor.yy259 = p->resolve( yymsp[-2].minor.yy259 );
                    yymsp[0].minor.yy259 = p->resolve( yymsp[0].minor.yy259 );
                    yygotominor.yy259 = p->compare( yymsp[-1].minor.yy19, yymsp[-2].minor.yy259, yymsp[0].minor.yy259 );
                    p->destroy( yymsp[-1].minor.yy19 );
                }
#line 3315 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 107: /* compare_op ::= EQUAL */
      case 108: /* compare_op ::= NOTEQUAL */ yytestcase(yyruleno==108);
      case 109: /* compare_op ::= LESS */ yytestcase(yyruleno==109);
      case 110: /* compare_op ::= GREATER */ yytestcase(yyruleno==110);
      case 111: /* compare_op ::= LESSEQUAL */ yytestcase(yyruleno==111);
      case 112: /* compare_op ::= GREATEREQUAL */ yytestcase(yyruleno==112);
      case 113: /* compare_op ::= IN */ yytestcase(yyruleno==113);
      case 114: /* compare_op ::= NOTIN */ yytestcase(yyruleno==114);
      case 115: /* compare_op ::= IS */ yytestcase(yyruleno==115);
      case 116: /* compare_op ::= NOTIS */ yytestcase(yyruleno==116);
      case 158: /* assign_op ::= ASSIGN */ yytestcase(yyruleno==158);
      case 159: /* assign_op ::= MULASSIGN */ yytestcase(yyruleno==159);
      case 160: /* assign_op ::= DIVASSIGN */ yytestcase(yyruleno==160);
      case 161: /* assign_op ::= MODASSIGN */ yytestcase(yyruleno==161);
      case 162: /* assign_op ::= INTDIVASSIGN */ yytestcase(yyruleno==162);
      case 163: /* assign_op ::= ADDASSIGN */ yytestcase(yyruleno==163);
      case 164: /* assign_op ::= SUBASSIGN */ yytestcase(yyruleno==164);
      case 165: /* assign_op ::= LSHIFTASSIGN */ yytestcase(yyruleno==165);
      case 166: /* assign_op ::= RSHIFTASSIGN */ yytestcase(yyruleno==166);
      case 167: /* assign_op ::= URSHIFTASSIGN */ yytestcase(yyruleno==167);
      case 168: /* assign_op ::= BITANDASSIGN */ yytestcase(yyruleno==168);
      case 169: /* assign_op ::= BITXORASSIGN */ yytestcase(yyruleno==169);
      case 170: /* assign_op ::= BITORASSIGN */ yytestcase(yyruleno==170);
      case 252: /* token_yield ::= YIELD */ yytestcase(yyruleno==252);
#line 825 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy19 = yymsp[0].minor.yy0;
                }
#line 3345 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 118: /* expr_and ::= expr_and LOGICAND expr_compare */
      case 120: /* expr_xor ::= expr_xor LOGICXOR expr_and */ yytestcase(yyruleno==120);
      case 122: /* expr_or ::= expr_or LOGICOR expr_xor */ yytestcase(yyruleno==122);
#line 871 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-2].minor.yy259 = p->resolve( yymsp[-2].minor.yy259 );
                    yymsp[0].minor.yy259 = p->resolve( yymsp[0].minor.yy259 );
                    yygotominor.yy259 = p->alloc< xec_expr_logical >(
                                    yymsp[-2].minor.yy259->sloc, yymsp[-1].minor.yy0->kind, yymsp[-2].minor.yy259, yymsp[0].minor.yy259 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 3358 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 124: /* expr_nolbr ::= expr_or QMARK expr_value COLON expr_value */
#line 912 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-4].minor.yy259 = p->resolve( yymsp[-4].minor.yy259 );
                    yymsp[-2].minor.yy259    = p->resolve( yymsp[-2].minor.yy259 );
                    yymsp[0].minor.yy259   = p->resolve( yymsp[0].minor.yy259 );
                    yygotominor.yy259 = p->alloc< xec_expr_qmark >(
                            yymsp[-4].minor.yy259->sloc, yymsp[-4].minor.yy259, yymsp[-2].minor.yy259, yymsp[0].minor.yy259 );
                  yy_destructor(yypParser,55,&yymsp[-3].minor);
  yy_destructor(yypParser,13,&yymsp[-1].minor);
}
#line 3371 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 125: /* expr_nolbr ::= LSQ RSQ */
#line 920 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_new_list >( yymsp[-1].minor.yy0->sloc );
                    p->destroy( yymsp[-1].minor.yy0 );
                  yy_destructor(yypParser,19,&yymsp[0].minor);
}
#line 3380 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 126: /* expr_nolbr ::= LSQ value_list RSQ */
#line 925 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = yymsp[-1].minor.yy87;
                    yygotominor.yy259->sloc = yymsp[-2].minor.yy0->sloc;
                    p->destroy( yymsp[-2].minor.yy0 );
                  yy_destructor(yypParser,19,&yymsp[0].minor);
}
#line 3390 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 127: /* expr_nolbr ::= newobj_lbr object_decls RBR */
#line 931 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = yymsp[-2].minor.yy182;
                    p->close_scope( yymsp[-2].minor.yy182->scope );
                  yy_destructor(yypParser,119,&yymsp[-1].minor);
  yy_destructor(yypParser,11,&yymsp[0].minor);
}
#line 3400 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 128: /* expr_nolbr ::= newfunc_lbr stmt_list RBR */
#line 936 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = yymsp[-2].minor.yy45;
                    p->close_scope( yymsp[-2].minor.yy45->scope );
                  yy_destructor(yypParser,114,&yymsp[-1].minor);
  yy_destructor(yypParser,11,&yymsp[0].minor);
}
#line 3410 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 129: /* newobj_lbr ::= COLON LBR */
#line 942 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy182 = p->object( yymsp[-1].minor.yy0->sloc, nullptr, nullptr );
                    p->destroy( yymsp[-1].minor.yy0 );
                  yy_destructor(yypParser,12,&yymsp[0].minor);
}
#line 3419 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 130: /* newobj_lbr ::= COLON expr_simple LBR */
#line 947 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy259 = p->resolve( yymsp[-1].minor.yy259 );
                    yygotominor.yy182 = p->object( yymsp[-2].minor.yy0->sloc, nullptr, yymsp[-1].minor.yy259 );
                    p->destroy( yymsp[-2].minor.yy0 );
                  yy_destructor(yypParser,12,&yymsp[0].minor);
}
#line 3429 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 131: /* newfunc_lbr ::= QMARK expr_paren LBR */
#line 954 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy45 = p->function( yymsp[-2].minor.yy0->sloc,
                                    nullptr, yymsp[-1].minor.yy259, false, false );
                    p->destroy( yymsp[-2].minor.yy0 );
                  yy_destructor(yypParser,12,&yymsp[0].minor);
}
#line 3439 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 132: /* newfunc_lbr ::= PERIOD QMARK expr_paren LBR */
#line 960 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy45 = p->function( yymsp[-3].minor.yy0->sloc,
                                    nullptr, yymsp[-1].minor.yy259, false, true );
                    p->destroy( yymsp[-3].minor.yy0 );
                  yy_destructor(yypParser,55,&yymsp[-2].minor);
  yy_destructor(yypParser,12,&yymsp[0].minor);
}
#line 3450 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 133: /* newfunc_lbr ::= QMARK expr_paren YIELD LBR */
#line 966 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy45 = p->function( yymsp[-3].minor.yy0->sloc,
                                    nullptr, yymsp[-2].minor.yy259, true, false );
                    p->destroy( yymsp[-3].minor.yy0 );
                  yy_destructor(yypParser,6,&yymsp[-1].minor);
  yy_destructor(yypParser,12,&yymsp[0].minor);
}
#line 3461 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 134: /* newfunc_lbr ::= PERIOD QMARK expr_paren YIELD LBR */
#line 972 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy45 = p->function( yymsp[-4].minor.yy0->sloc,
                                    nullptr, yymsp[-2].minor.yy259, true, true );
                    p->destroy( yymsp[-4].minor.yy0 );
                  yy_destructor(yypParser,55,&yymsp[-3].minor);
  yy_destructor(yypParser,6,&yymsp[-1].minor);
  yy_destructor(yypParser,12,&yymsp[0].minor);
}
#line 3473 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 136: /* expr_value ::= LBR RBR */
#line 985 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_new_table >( yymsp[-1].minor.yy0->sloc );
                    p->destroy( yymsp[-1].minor.yy0 );
                  yy_destructor(yypParser,11,&yymsp[0].minor);
}
#line 3482 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 137: /* expr_value ::= LBR keyval_list RBR */
#line 990 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = yymsp[-1].minor.yy191;
                    yygotominor.yy259->sloc = yymsp[-2].minor.yy0->sloc;
                    p->destroy( yymsp[-2].minor.yy0 );
                  yy_destructor(yypParser,11,&yymsp[0].minor);
}
#line 3492 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 139: /* expr_lbody ::= expr_lbody COMMA expr_value */
#line 1001 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    // Do not resolve.
                    yygotominor.yy259 = p->append( yymsp[-2].minor.yy259, yymsp[0].minor.yy259 );
                  yy_destructor(yypParser,17,&yymsp[-1].minor);
}
#line 3501 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 140: /* expr_final ::= ELLIPSIS */
#line 1008 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_expr_vararg >( yymsp[0].minor.yy0->sloc );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3509 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 141: /* expr_final ::= proto ELLIPSIS */
#line 1013 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    xec_expr_call* call = p->resolve_proto( yymsp[-1].minor.yy219 );
                    call->unpack = true;
                    yygotominor.yy259 = call;
                  yy_destructor(yypParser,56,&yymsp[0].minor);
}
#line 3519 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 142: /* expr_final ::= expr_call ELLIPSIS */
#line 1019 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy52->unpack = true;
                    yygotominor.yy259 = yymsp[-1].minor.yy52;
                  yy_destructor(yypParser,56,&yymsp[0].minor);
}
#line 3528 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 143: /* expr_final ::= expr_yield ELLIPSIS */
#line 1024 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy55->unpack = true;
                    yygotominor.yy259 = yymsp[-1].minor.yy55;
                  yy_destructor(yypParser,56,&yymsp[0].minor);
}
#line 3537 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 144: /* expr_final ::= proto YIELD ELLIPSIS */
#line 1029 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    xec_expr_call* call = p->resolve_proto( yymsp[-2].minor.yy219 );
                    call->yieldcall = true;
                    call->unpack = true;
                    yygotominor.yy259 = call;
                  yy_destructor(yypParser,6,&yymsp[-1].minor);
  yy_destructor(yypParser,56,&yymsp[0].minor);
}
#line 3549 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 145: /* expr_final ::= expr_call YIELD ELLIPSIS */
#line 1036 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-2].minor.yy52->yieldcall = true;
                    yymsp[-2].minor.yy52->unpack = true;
                    yygotominor.yy259 = yymsp[-2].minor.yy52;
                  yy_destructor(yypParser,6,&yymsp[-1].minor);
  yy_destructor(yypParser,56,&yymsp[0].minor);
}
#line 3560 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 146: /* expr_final ::= name LSQ RSQ ELLIPSIS */
#line 1042 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-3].minor.yy259 = p->resolve( yymsp[-3].minor.yy259 );
                    yygotominor.yy259 = p->alloc< xec_expr_unpack >( yymsp[-3].minor.yy259->sloc, yymsp[-3].minor.yy259 );
                  yy_destructor(yypParser,18,&yymsp[-2].minor);
  yy_destructor(yypParser,19,&yymsp[-1].minor);
  yy_destructor(yypParser,56,&yymsp[0].minor);
}
#line 3571 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 147: /* expr_final ::= proto LSQ RSQ ELLIPSIS */
#line 1047 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    xec_expr_call* call = p->resolve_proto( yymsp[-3].minor.yy219 );
                    yygotominor.yy259 = p->alloc< xec_expr_unpack >( call->sloc, call );
                  yy_destructor(yypParser,18,&yymsp[-2].minor);
  yy_destructor(yypParser,19,&yymsp[-1].minor);
  yy_destructor(yypParser,56,&yymsp[0].minor);
}
#line 3582 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 148: /* expr_final ::= expr_index LSQ RSQ ELLIPSIS */
      case 150: /* expr_final ::= expr_new LSQ RSQ ELLIPSIS */ yytestcase(yyruleno==150);
      case 152: /* expr_final ::= expr_postfix LSQ RSQ ELLIPSIS */ yytestcase(yyruleno==152);
#line 1052 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_expr_unpack >( yymsp[-3].minor.yy259->sloc, yymsp[-3].minor.yy259 );
                  yy_destructor(yypParser,18,&yymsp[-2].minor);
  yy_destructor(yypParser,19,&yymsp[-1].minor);
  yy_destructor(yypParser,56,&yymsp[0].minor);
}
#line 3594 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 149: /* expr_final ::= expr_yield LSQ RSQ ELLIPSIS */
#line 1056 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_expr_unpack >( yymsp[-3].minor.yy55->sloc, yymsp[-3].minor.yy55 );
                  yy_destructor(yypParser,18,&yymsp[-2].minor);
  yy_destructor(yypParser,19,&yymsp[-1].minor);
  yy_destructor(yypParser,56,&yymsp[0].minor);
}
#line 3604 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 151: /* expr_final ::= expr_call LSQ RSQ ELLIPSIS */
#line 1064 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_expr_unpack >( yymsp[-3].minor.yy52->sloc, yymsp[-3].minor.yy52 );
                  yy_destructor(yypParser,18,&yymsp[-2].minor);
  yy_destructor(yypParser,19,&yymsp[-1].minor);
  yy_destructor(yypParser,56,&yymsp[0].minor);
}
#line 3614 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 155: /* expr_list ::= expr_lbody COMMA expr_final */
      case 186: /* sexpr_list ::= sexpr_lbody COMMA expr_final */ yytestcase(yyruleno==186);
#line 1081 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->final( yymsp[-2].minor.yy259, yymsp[0].minor.yy259 );
                  yy_destructor(yypParser,17,&yymsp[-1].minor);
}
#line 3623 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 156: /* expr_assign ::= expr_list */
      case 182: /* sexpr_lbody ::= expr_nolbr */ yytestcase(yyruleno==182);
#line 1086 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[0].minor.yy259 = p->resolve( yymsp[0].minor.yy259 );
                    yygotominor.yy259 = yymsp[0].minor.yy259;
                }
#line 3632 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 157: /* expr_assign ::= expr_lbody assign_op expr_assign */
#line 1091 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-2].minor.yy259 = p->resolve( yymsp[-2].minor.yy259 );
                    yymsp[0].minor.yy259 = p->resolve( yymsp[0].minor.yy259 );
                    yygotominor.yy259 = p->assign( yymsp[-1].minor.yy19, yymsp[-2].minor.yy259, yymsp[0].minor.yy259 );
                    p->destroy( yymsp[-1].minor.yy19 );
                }
#line 3642 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 171: /* value_lbody ::= expr_value */
#line 1154 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[0].minor.yy259 = p->resolve( yymsp[0].minor.yy259 );
                    yygotominor.yy87 = p->alloc< xec_new_list >( -1 );
                    yygotominor.yy87->values.push_back( yymsp[0].minor.yy259 );
                }
#line 3651 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 172: /* value_lbody ::= value_lbody COMMA expr_value */
#line 1160 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[0].minor.yy259 = p->resolve( yymsp[0].minor.yy259 );
                    yygotominor.yy87 = yymsp[-2].minor.yy87;
                    yygotominor.yy87->values.push_back( yymsp[0].minor.yy259 );
                  yy_destructor(yypParser,17,&yymsp[-1].minor);
}
#line 3661 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 173: /* value_list ::= expr_final */
#line 1167 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy87 = p->alloc< xec_new_list >( -1 );
                    yygotominor.yy87->unpack = yymsp[0].minor.yy259;
                }
#line 3669 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 174: /* value_list ::= expr_final COMMA */
#line 1172 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy87 = p->alloc< xec_new_list >( -1 );
                    yygotominor.yy87->unpack = yymsp[-1].minor.yy259;
                  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 3678 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 175: /* value_list ::= value_lbody */
#line 1177 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy87 = yymsp[0].minor.yy87;
                }
#line 3685 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 176: /* value_list ::= value_lbody COMMA */
#line 1181 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy87 = yymsp[-1].minor.yy87;
                  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 3693 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 177: /* value_list ::= value_lbody COMMA expr_final */
#line 1185 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy87 = yymsp[-2].minor.yy87;
                    yygotominor.yy87->unpack = yymsp[0].minor.yy259;
                  yy_destructor(yypParser,17,&yymsp[-1].minor);
}
#line 3702 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 178: /* keyval_lbody ::= expr_value COLON expr_value */
#line 1192 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-2].minor.yy259   = p->resolve( yymsp[-2].minor.yy259 );
                    yymsp[0].minor.yy259 = p->resolve( yymsp[0].minor.yy259 );
                    yygotominor.yy191 = new xec_new_table( -1 );
                    yygotominor.yy191->elements.emplace_back( yymsp[-2].minor.yy259, yymsp[0].minor.yy259 );
                  yy_destructor(yypParser,13,&yymsp[-1].minor);
}
#line 3713 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 179: /* keyval_lbody ::= keyval_lbody COMMA expr_value COLON expr_value */
#line 1200 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-2].minor.yy259   = p->resolve( yymsp[-2].minor.yy259 );
                    yymsp[0].minor.yy259 = p->resolve( yymsp[0].minor.yy259 );
                    yygotominor.yy191 = yymsp[-4].minor.yy191;
                    yygotominor.yy191->elements.emplace_back( yymsp[-2].minor.yy259, yymsp[0].minor.yy259 );
                  yy_destructor(yypParser,17,&yymsp[-3].minor);
  yy_destructor(yypParser,13,&yymsp[-1].minor);
}
#line 3725 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 180: /* keyval_list ::= keyval_lbody */
#line 1208 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy191 = yymsp[0].minor.yy191;
                }
#line 3732 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 181: /* keyval_list ::= keyval_lbody COMMA */
#line 1212 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy191 = yymsp[-1].minor.yy191;
                  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 3740 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 183: /* sexpr_lbody ::= sexpr_lbody COMMA expr_value */
#line 1229 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[0].minor.yy259 = p->resolve( yymsp[0].minor.yy259 );
                    yygotominor.yy259 = p->append( yymsp[-2].minor.yy259, yymsp[0].minor.yy259 );
                  yy_destructor(yypParser,17,&yymsp[-1].minor);
}
#line 3749 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 188: /* sexpr_assign ::= sexpr_lbody assign_op expr_assign */
#line 1252 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[0].minor.yy259 = p->resolve( yymsp[0].minor.yy259 );
                    yygotominor.yy259 = p->assign( yymsp[-1].minor.yy19, yymsp[-2].minor.yy259, yymsp[0].minor.yy259 );
                    p->destroy( yymsp[-1].minor.yy19 );
                }
#line 3758 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 190: /* condition ::= VAR varname ASSIGN expr_list */
#line 1273 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[0].minor.yy259 = p->resolve( yymsp[0].minor.yy259 );
                    xec_expr_assign* assign = p->alloc< xec_expr_assign >(
                                    yymsp[-3].minor.yy0->sloc, XEC_KEYWORD_VAR );
                    assign->lvalue = p->declare_local( yymsp[-2].minor.yy240 );
                    assign->rvalue = yymsp[0].minor.yy259;
                    yygotominor.yy259 = assign;
                    p->destroy( yymsp[-3].minor.yy0 );
                  yy_destructor(yypParser,16,&yymsp[-1].minor);
}
#line 3772 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 191: /* condition ::= VAR varname_list ASSIGN expr_list */
#line 1283 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[0].minor.yy259 = p->resolve( yymsp[0].minor.yy259 );
                    xec_expr_assign_list* assign =
                            p->alloc< xec_expr_assign_list >(
                                    yymsp[-3].minor.yy0->sloc, XEC_KEYWORD_VAR );
                    p->declare_local_list( yymsp[-2].minor.yy283, &assign->lvalues );
                    assign->rvalues = yymsp[0].minor.yy259;
                    yygotominor.yy259 = assign;
                    p->destroy( yymsp[-3].minor.yy0 );
                  yy_destructor(yypParser,16,&yymsp[-1].minor);
}
#line 3787 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 193: /* stmt_list ::= stmt_list SEMICOLON */
#line 1302 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,114,&yymsp[-1].minor);
  yy_destructor(yypParser,14,&yymsp[0].minor);
}
#line 3795 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 194: /* stmt_list ::= stmt_list stmt */
#line 1305 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    p->statement( yymsp[0].minor.yy259 );
                  yy_destructor(yypParser,114,&yymsp[-1].minor);
}
#line 3803 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 195: /* stmt_list ::= stmt_list decl_object */
#line 1309 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,114,&yymsp[-1].minor);
  yy_destructor(yypParser,118,&yymsp[0].minor);
}
#line 3811 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 196: /* stmt_list ::= stmt_list decl_func */
#line 1312 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,114,&yymsp[-1].minor);
  yy_destructor(yypParser,122,&yymsp[0].minor);
}
#line 3819 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 197: /* stmt_list ::= stmt_list decl_var SEMICOLON */
#line 1315 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,114,&yymsp[-2].minor);
  yy_destructor(yypParser,124,&yymsp[-1].minor);
  yy_destructor(yypParser,14,&yymsp[0].minor);
}
#line 3828 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 198: /* stmt_list ::= stmt_list decl_noinit SEMICOLON */
#line 1318 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,114,&yymsp[-2].minor);
  yy_destructor(yypParser,125,&yymsp[-1].minor);
  yy_destructor(yypParser,14,&yymsp[0].minor);
}
#line 3837 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 199: /* stmt ::= stmt_lbr stmt_list RBR */
#line 1324 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = yymsp[-2].minor.yy268;
                    p->close_scope( yymsp[-2].minor.yy268->scope );
                  yy_destructor(yypParser,114,&yymsp[-1].minor);
  yy_destructor(yypParser,11,&yymsp[0].minor);
}
#line 3847 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 201: /* stmt_lbr ::= LBR */
#line 1334 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy268 = p->alloc< xec_stmt_block >( yymsp[0].minor.yy0->sloc );
                    yygotominor.yy268->scope = p->block_scope( yygotominor.yy268 );
                    yygotominor.yy268->scope->block = yygotominor.yy268;
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3857 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 202: /* stmt_reuse ::= stmt_lbr_ru stmt_list RBR */
#line 1344 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = yymsp[-2].minor.yy268;
                  yy_destructor(yypParser,114,&yymsp[-1].minor);
  yy_destructor(yypParser,11,&yymsp[0].minor);
}
#line 3866 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 204: /* stmt_lbr_ru ::= LBR */
#line 1353 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy268 = p->alloc< xec_stmt_block >( yymsp[0].minor.yy0->sloc );
                    p->get_scope()->block = yygotominor.yy268;
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3875 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 205: /* stmt_common ::= sexpr_assign SEMICOLON */
#line 1363 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = yymsp[-1].minor.yy259;
                  yy_destructor(yypParser,14,&yymsp[0].minor);
}
#line 3883 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 206: /* stmt_common ::= stmt_if LPN condition RPN stmt */
#line 1367 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-4].minor.yy188->condition = yymsp[-2].minor.yy259;
                    yymsp[-4].minor.yy188->iftrue    = yymsp[0].minor.yy259;
                    p->close_scope( yymsp[-4].minor.yy188->scope );
                    yygotominor.yy259 = yymsp[-4].minor.yy188;
                  yy_destructor(yypParser,7,&yymsp[-3].minor);
  yy_destructor(yypParser,10,&yymsp[-1].minor);
}
#line 3895 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 207: /* stmt_common ::= stmt_if LPN condition RPN stmt ELSE stmt */
#line 1375 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-6].minor.yy188->condition = yymsp[-4].minor.yy259;
                    yymsp[-6].minor.yy188->iftrue    = yymsp[-2].minor.yy259;
                    yymsp[-6].minor.yy188->iffalse   = yymsp[0].minor.yy259;
                    p->close_scope( yymsp[-6].minor.yy188->scope );
                    yygotominor.yy259 = yymsp[-6].minor.yy188;
                  yy_destructor(yypParser,7,&yymsp[-5].minor);
  yy_destructor(yypParser,10,&yymsp[-3].minor);
  yy_destructor(yypParser,2,&yymsp[-1].minor);
}
#line 3909 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 208: /* stmt_common ::= stmt_switch LPN condition RPN stmt_lbr_ru stmt_list RPN */
#line 1384 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-6].minor.yy267->value     = yymsp[-4].minor.yy259;
                    yymsp[-6].minor.yy267->body      = yymsp[-2].minor.yy268;
                    p->close_scope( yymsp[-6].minor.yy267->scope );
                    yygotominor.yy259 = yymsp[-6].minor.yy267;
                  yy_destructor(yypParser,7,&yymsp[-5].minor);
  yy_destructor(yypParser,10,&yymsp[-3].minor);
  yy_destructor(yypParser,114,&yymsp[-1].minor);
  yy_destructor(yypParser,10,&yymsp[0].minor);
}
#line 3923 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 209: /* stmt_common ::= stmt_while LPN condition RPN stmt_reuse */
#line 1392 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-4].minor.yy278->condition = yymsp[-2].minor.yy259;
                    yymsp[-4].minor.yy278->body      = yymsp[0].minor.yy259;
                    p->close_scope( yymsp[-4].minor.yy278->scope );
                    yygotominor.yy259 = yymsp[-4].minor.yy278;
                  yy_destructor(yypParser,7,&yymsp[-3].minor);
  yy_destructor(yypParser,10,&yymsp[-1].minor);
}
#line 3935 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 210: /* stmt_common ::= stmt_do stmt_reuse WHILE LPN expr_assign RPN SEMICOLON */
#line 1400 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-6].minor.yy208->body      = yymsp[-5].minor.yy259;
                    yymsp[-6].minor.yy208->condition = yymsp[-2].minor.yy259;
                    p->close_scope( yymsp[-6].minor.yy208->scope );
                    yygotominor.yy259 = yymsp[-6].minor.yy208;
                  yy_destructor(yypParser,69,&yymsp[-4].minor);
  yy_destructor(yypParser,7,&yymsp[-3].minor);
  yy_destructor(yypParser,10,&yymsp[-1].minor);
  yy_destructor(yypParser,14,&yymsp[0].minor);
}
#line 3949 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 211: /* stmt_common ::= stmt_foreach stmt_reuse */
#line 1407 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy237->body      = yymsp[0].minor.yy259;
                    p->close_scope( yymsp[-1].minor.yy237->scope );
                    yygotominor.yy259 = yymsp[-1].minor.yy237;
                }
#line 3958 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 212: /* stmt_common ::= stmt_for stmt_reuse */
#line 1413 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy16->body      = yymsp[0].minor.yy259;
                    p->close_scope( yymsp[-1].minor.yy16->scope );
                    yygotominor.yy259 = yymsp[-1].minor.yy16;
                }
#line 3967 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 213: /* stmt_common ::= stmt_using LPN condition RPN stmt_reuse */
#line 1420 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-4].minor.yy227->uvalue    = yymsp[-2].minor.yy259;
                    yymsp[-4].minor.yy227->body      = yymsp[0].minor.yy259;
                    p->close_scope( yymsp[-4].minor.yy227->scope );
                    yygotominor.yy259 = yymsp[-4].minor.yy227;
                  yy_destructor(yypParser,7,&yymsp[-3].minor);
  yy_destructor(yypParser,10,&yymsp[-1].minor);
}
#line 3979 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 215: /* stmt_common ::= DELETE expr_lbody SEMICOLON */
#line 1431 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    xec_stmt_delete* s;
                    yygotominor.yy259 = s = p->alloc< xec_stmt_delete >( yymsp[-2].minor.yy0->sloc );
                    p->delval_list( yymsp[-1].minor.yy259, &s->delvals );
                    p->destroy( yymsp[-2].minor.yy0 );
                  yy_destructor(yypParser,14,&yymsp[0].minor);
}
#line 3990 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 216: /* stmt_common ::= CASE expr_value COLON */
#line 1438 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy259 = p->resolve( yymsp[-1].minor.yy259 );
                    yygotominor.yy259 = p->alloc< xec_stmt_case >( yymsp[-2].minor.yy0->sloc, yymsp[-1].minor.yy259 );
                    p->destroy( yymsp[-2].minor.yy0 );
                  yy_destructor(yypParser,13,&yymsp[0].minor);
}
#line 4000 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 217: /* stmt_common ::= DEFAULT COLON */
#line 1444 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_stmt_case >( yymsp[-1].minor.yy0->sloc, nullptr );
                    p->destroy( yymsp[-1].minor.yy0 );
                  yy_destructor(yypParser,13,&yymsp[0].minor);
}
#line 4009 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 218: /* stmt_common ::= CONTINUE SEMICOLON */
#line 1449 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    xec_ast_node* target = p->continue_target( yymsp[-1].minor.yy0->sloc );
                    yygotominor.yy259 = p->alloc< xec_stmt_continue >( yymsp[-1].minor.yy0->sloc, target );
                    p->destroy( yymsp[-1].minor.yy0 );
                  yy_destructor(yypParser,14,&yymsp[0].minor);
}
#line 4019 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 219: /* stmt_common ::= BREAK SEMICOLON */
#line 1455 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    xec_ast_node* target = p->break_target( yymsp[-1].minor.yy0->sloc );
                    yygotominor.yy259 = p->alloc< xec_stmt_break >( yymsp[-1].minor.yy0->sloc, target );
                    p->destroy( yymsp[-1].minor.yy0 );
                  yy_destructor(yypParser,14,&yymsp[0].minor);
}
#line 4029 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 220: /* stmt_common ::= RETURN SEMICOLON */
#line 1461 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_stmt_return >( yymsp[-1].minor.yy0->sloc, nullptr );
                    p->destroy( yymsp[-1].minor.yy0 );
                  yy_destructor(yypParser,14,&yymsp[0].minor);
}
#line 4038 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 221: /* stmt_common ::= RETURN expr_list SEMICOLON */
#line 1466 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy259 = p->resolve( yymsp[-1].minor.yy259 );
                    yygotominor.yy259 = p->alloc< xec_stmt_return >( yymsp[-2].minor.yy0->sloc, yymsp[-1].minor.yy259 );
                    p->destroy( yymsp[-2].minor.yy0 );
                  yy_destructor(yypParser,14,&yymsp[0].minor);
}
#line 4048 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 222: /* stmt_common ::= token_yield SEMICOLON */
#line 1472 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_expr_yield >( yymsp[-1].minor.yy19->sloc, nullptr );
                    p->destroy( yymsp[-1].minor.yy19 );
                  yy_destructor(yypParser,14,&yymsp[0].minor);
}
#line 4057 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 223: /* stmt_common ::= token_yield expr_list SEMICOLON */
#line 1477 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy259 = p->resolve( yymsp[-1].minor.yy259 );
                    yygotominor.yy259 = p->alloc< xec_expr_yield >( yymsp[-2].minor.yy19->sloc, yymsp[-1].minor.yy259 );
                    p->destroy( yymsp[-2].minor.yy19 );
                  yy_destructor(yypParser,14,&yymsp[0].minor);
}
#line 4067 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 224: /* stmt_common ::= THROW expr_value SEMICOLON */
#line 1483 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy259 = p->resolve( yymsp[-1].minor.yy259 );
                    yygotominor.yy259 = p->alloc< xec_stmt_throw >( yymsp[-2].minor.yy0->sloc, yymsp[-1].minor.yy259 );
                    p->destroy( yymsp[-2].minor.yy0 );
                  yy_destructor(yypParser,14,&yymsp[0].minor);
}
#line 4077 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 225: /* stmt_if ::= IF */
#line 1493 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy188 = p->alloc< xec_stmt_if >( yymsp[0].minor.yy0->sloc );
                    yygotominor.yy188->scope = p->block_scope( yygotominor.yy188 );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 4086 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 226: /* stmt_switch ::= SWITCH */
#line 1500 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy267 = p->alloc< xec_stmt_switch >( yymsp[0].minor.yy0->sloc );
                    yygotominor.yy267->scope = p->block_scope( yygotominor.yy267 );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 4095 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 227: /* stmt_while ::= WHILE */
#line 1507 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy278 = p->alloc< xec_stmt_while >( yymsp[0].minor.yy0->sloc );
                    yygotominor.yy278->scope = p->block_scope( yygotominor.yy278 );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 4104 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 228: /* stmt_do ::= DO */
#line 1514 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy208 = p->alloc< xec_stmt_do >( yymsp[0].minor.yy0->sloc );
                    yygotominor.yy208->scope = p->block_scope( yygotominor.yy208 );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 4113 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 229: /* scope_for ::= FOR */
#line 1521 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    // open scope before we know the kind of statement.
                    yygotominor.yy218 = make_token_scope( yymsp[0].minor.yy0, p->block_scope( nullptr ) );
                }
#line 4121 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 230: /* stmt_foreach ::= scope_for LPN expr_lbody COLON expr_value RPN */
#line 1528 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy259 = p->resolve( yymsp[-1].minor.yy259 );
                    yygotominor.yy237 = p->alloc< xec_stmt_foreach >( yymsp[-5].minor.yy218.token->sloc );
                    yymsp[-5].minor.yy218.scope->node = yygotominor.yy237;
                    yygotominor.yy237->scope    = yymsp[-5].minor.yy218.scope;
                    p->lvalue_list( yymsp[-3].minor.yy259, &yygotominor.yy237->lvalues );
                    yygotominor.yy237->list     = yymsp[-1].minor.yy259;
                    p->destroy( yymsp[-5].minor.yy218.token );
                  yy_destructor(yypParser,7,&yymsp[-4].minor);
  yy_destructor(yypParser,13,&yymsp[-2].minor);
  yy_destructor(yypParser,10,&yymsp[0].minor);
}
#line 4137 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 231: /* stmt_foreach ::= scope_for LPN expr_lbody EACHKEY expr_value RPN */
#line 1539 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy259 = p->resolve( yymsp[-1].minor.yy259 );
                    yygotominor.yy237 = p->alloc< xec_stmt_foreach >( yymsp[-5].minor.yy218.token->sloc );
                    yymsp[-5].minor.yy218.scope->node = yygotominor.yy237;
                    yygotominor.yy237->scope    = yymsp[-5].minor.yy218.scope;
                    p->lvalue_list( yymsp[-3].minor.yy259, &yygotominor.yy237->lvalues );
                    yygotominor.yy237->list     = yymsp[-1].minor.yy259;
                    yygotominor.yy237->eachkey  = true;
                    p->destroy( yymsp[-5].minor.yy218.token );
                  yy_destructor(yypParser,7,&yymsp[-4].minor);
  yy_destructor(yypParser,80,&yymsp[-2].minor);
  yy_destructor(yypParser,10,&yymsp[0].minor);
}
#line 4154 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 232: /* stmt_foreach ::= scope_for LPN VAR varname COLON expr_value RPN */
#line 1551 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy259 = p->resolve( yymsp[-1].minor.yy259 );
                    yygotominor.yy237 = p->alloc< xec_stmt_foreach >( yymsp[-6].minor.yy218.token->sloc );
                    yymsp[-6].minor.yy218.scope->node = yygotominor.yy237;
                    yygotominor.yy237->scope    = yymsp[-6].minor.yy218.scope;
                    yygotominor.yy237->lvalues.push_back( p->declare_local( yymsp[-3].minor.yy240 ) );
                    yygotominor.yy237->list     = yymsp[-1].minor.yy259;
                    yygotominor.yy237->declare  = true;
                    p->destroy( yymsp[-6].minor.yy218.token );
                  yy_destructor(yypParser,7,&yymsp[-5].minor);
  yy_destructor(yypParser,15,&yymsp[-4].minor);
  yy_destructor(yypParser,13,&yymsp[-2].minor);
  yy_destructor(yypParser,10,&yymsp[0].minor);
}
#line 4172 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 233: /* stmt_foreach ::= scope_for LPN VAR varname_list COLON expr_value RPN */
#line 1563 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy259 = p->resolve( yymsp[-1].minor.yy259 );
                    yygotominor.yy237 = p->alloc< xec_stmt_foreach >( yymsp[-6].minor.yy218.token->sloc );
                    yymsp[-6].minor.yy218.scope->node = yygotominor.yy237;
                    yygotominor.yy237->scope    = yymsp[-6].minor.yy218.scope;
                    p->declare_local_list( yymsp[-3].minor.yy283, &yygotominor.yy237->lvalues );
                    yygotominor.yy237->list     = yymsp[-1].minor.yy259;
                    yygotominor.yy237->declare  = true;
                    p->destroy( yymsp[-6].minor.yy218.token );
                  yy_destructor(yypParser,7,&yymsp[-5].minor);
  yy_destructor(yypParser,15,&yymsp[-4].minor);
  yy_destructor(yypParser,13,&yymsp[-2].minor);
  yy_destructor(yypParser,10,&yymsp[0].minor);
}
#line 4190 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 234: /* stmt_foreach ::= scope_for LPN VAR varname EACHKEY expr_value RPN */
#line 1575 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy259 = p->resolve( yymsp[-1].minor.yy259 );
                    yygotominor.yy237 = p->alloc< xec_stmt_foreach >( yymsp[-6].minor.yy218.token->sloc );
                    yymsp[-6].minor.yy218.scope->node = yygotominor.yy237;
                    yygotominor.yy237->scope    = yymsp[-6].minor.yy218.scope;
                    yygotominor.yy237->lvalues.push_back( p->declare_local( yymsp[-3].minor.yy240 ) );
                    yygotominor.yy237->list     = yymsp[-1].minor.yy259;
                    yygotominor.yy237->eachkey  = true;
                    yygotominor.yy237->declare  = true;
                    p->destroy( yymsp[-6].minor.yy218.token );
                  yy_destructor(yypParser,7,&yymsp[-5].minor);
  yy_destructor(yypParser,15,&yymsp[-4].minor);
  yy_destructor(yypParser,80,&yymsp[-2].minor);
  yy_destructor(yypParser,10,&yymsp[0].minor);
}
#line 4209 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 235: /* stmt_foreach ::= scope_for LPN VAR varname_list EACHKEY expr_value RPN */
#line 1588 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy259 = p->resolve( yymsp[-1].minor.yy259 );
                    yygotominor.yy237 = p->alloc< xec_stmt_foreach >( yymsp[-6].minor.yy218.token->sloc );
                    yymsp[-6].minor.yy218.scope->node = yygotominor.yy237;
                    yygotominor.yy237->scope    = yymsp[-6].minor.yy218.scope;
                    p->declare_local_list( yymsp[-3].minor.yy283, &yygotominor.yy237->lvalues );
                    yygotominor.yy237->list     = yymsp[-1].minor.yy259;
                    yygotominor.yy237->eachkey  = true;
                    yygotominor.yy237->declare  = true;
                    p->destroy( yymsp[-6].minor.yy218.token );
                  yy_destructor(yypParser,7,&yymsp[-5].minor);
  yy_destructor(yypParser,15,&yymsp[-4].minor);
  yy_destructor(yypParser,80,&yymsp[-2].minor);
  yy_destructor(yypParser,10,&yymsp[0].minor);
}
#line 4228 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 236: /* stmt_for ::= scope_for LPN for_cond SEMICOLON for_expr SEMICOLON for_expr RPN */
#line 1604 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy16 = p->alloc< xec_stmt_for >( yymsp[-7].minor.yy218.token->sloc );
                    yymsp[-7].minor.yy218.scope->node = yygotominor.yy16;
                    yygotominor.yy16->scope        = yymsp[-7].minor.yy218.scope;
                    yygotominor.yy16->init         = yymsp[-5].minor.yy259;
                    yygotominor.yy16->condition    = yymsp[-3].minor.yy259;
                    yygotominor.yy16->update       = yymsp[-1].minor.yy259;
                    p->destroy( yymsp[-7].minor.yy218.token );
                  yy_destructor(yypParser,7,&yymsp[-6].minor);
  yy_destructor(yypParser,14,&yymsp[-4].minor);
  yy_destructor(yypParser,14,&yymsp[-2].minor);
  yy_destructor(yypParser,10,&yymsp[0].minor);
}
#line 4245 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 237: /* for_cond ::= */
      case 239: /* for_expr ::= */ yytestcase(yyruleno==239);
#line 1615 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = nullptr;
                }
#line 4253 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 241: /* stmt_using ::= USING */
#line 1633 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy227 = p->alloc< xec_stmt_using >( yymsp[0].minor.yy0->sloc );
                    yygotominor.yy227->scope = p->block_scope( yygotominor.yy227 );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 4262 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 242: /* stmt_try ::= try_catch */
#line 1643 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = yymsp[0].minor.yy224;
                }
#line 4269 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 243: /* stmt_try ::= try_catch FINALLY stmt */
      case 244: /* stmt_try ::= try_block FINALLY stmt */ yytestcase(yyruleno==244);
#line 1647 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-2].minor.yy224->fstmt = yymsp[0].minor.yy259;
                    yygotominor.yy259 = yymsp[-2].minor.yy224;
                  yy_destructor(yypParser,5,&yymsp[-1].minor);
}
#line 4279 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 245: /* try_block ::= TRY stmt */
#line 1658 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy224 = p->alloc< xec_stmt_try >( yymsp[-1].minor.yy0->sloc, yymsp[0].minor.yy259 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 4287 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 246: /* try_catch ::= try_block stmt_catch stmt_reuse */
      case 247: /* try_catch ::= try_catch stmt_catch stmt_reuse */ yytestcase(yyruleno==247);
#line 1664 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy256->body = yymsp[0].minor.yy259;
                    p->close_scope( yymsp[-1].minor.yy256->scope );
                    yymsp[-2].minor.yy224->clist.push_back( yymsp[-1].minor.yy256 );
                    yygotominor.yy224 = yymsp[-2].minor.yy224;
                }
#line 4298 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 248: /* scope_catch ::= CATCH */
#line 1679 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    // open scope here ready for declarations.
                    yygotominor.yy218 = make_token_scope( yymsp[0].minor.yy0, p->block_scope( nullptr ) );
                }
#line 4306 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 249: /* stmt_catch ::= scope_catch LPN COLON expr_simple RPN */
#line 1685 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy259 = p->resolve( yymsp[-1].minor.yy259 );
                    yygotominor.yy256 = p->alloc< xec_stmt_catch >( yymsp[-4].minor.yy218.token->sloc );
                    yymsp[-4].minor.yy218.scope->node = yygotominor.yy256;
                    yygotominor.yy256->proto    = yymsp[-1].minor.yy259;
                    p->destroy( yymsp[-4].minor.yy218.token );
                  yy_destructor(yypParser,7,&yymsp[-3].minor);
  yy_destructor(yypParser,13,&yymsp[-2].minor);
  yy_destructor(yypParser,10,&yymsp[0].minor);
}
#line 4320 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 250: /* stmt_catch ::= scope_catch LPN expr_value COLON expr_simple RPN */
#line 1694 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-3].minor.yy259 = p->resolve( yymsp[-3].minor.yy259 );
                    yymsp[-1].minor.yy259 = p->resolve( yymsp[-1].minor.yy259 );
                    yygotominor.yy256 = p->alloc< xec_stmt_catch >( yymsp[-5].minor.yy218.token->sloc );
                    yymsp[-5].minor.yy218.scope->node = yygotominor.yy256;
                    yygotominor.yy256->lvalue   = p->lvalue( yymsp[-3].minor.yy259 );
                    yygotominor.yy256->proto    = yymsp[-1].minor.yy259;
                    p->destroy( yymsp[-5].minor.yy218.token );
                  yy_destructor(yypParser,7,&yymsp[-4].minor);
  yy_destructor(yypParser,13,&yymsp[-2].minor);
  yy_destructor(yypParser,10,&yymsp[0].minor);
}
#line 4336 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 251: /* stmt_catch ::= scope_catch LPN VAR varname COLON expr_simple RPN */
#line 1705 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy259 = p->resolve( yymsp[-1].minor.yy259 );
                    yygotominor.yy256 = p->alloc< xec_stmt_catch >( yymsp[-6].minor.yy218.token->sloc );
                    yymsp[-6].minor.yy218.scope->node = yygotominor.yy256;
                    yygotominor.yy256->lvalue   = p->declare_local( yymsp[-3].minor.yy240 );
                    yygotominor.yy256->proto    = yymsp[-1].minor.yy259;
                    yygotominor.yy256->declare  = true;
                    p->destroy( yymsp[-6].minor.yy218.token );
                  yy_destructor(yypParser,7,&yymsp[-5].minor);
  yy_destructor(yypParser,15,&yymsp[-4].minor);
  yy_destructor(yypParser,13,&yymsp[-2].minor);
  yy_destructor(yypParser,10,&yymsp[0].minor);
}
#line 4353 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      default:
        break;
  };
  yygoto = yyRuleInfo[yyruleno].lhs;
  yysize = yyRuleInfo[yyruleno].nrhs;
  yypParser->yyidx -= yysize;
  yyact = yy_find_reduce_action(yymsp[-yysize].stateno,(YYCODETYPE)yygoto);
  if( yyact < YYNSTATE ){
#ifdef NDEBUG
    /* If we are not debugging and the reduce action popped at least
    ** one element off the stack, then we can push the new element back
    ** onto the stack here, and skip the stack overflow test in yy_shift().
    ** That gives a significant speed improvement. */
    if( yysize ){
      yypParser->yyidx++;
      yymsp -= yysize-1;
      yymsp->stateno = (YYACTIONTYPE)yyact;
      yymsp->major = (YYCODETYPE)yygoto;
      yymsp->minor = yygotominor;
    }else
#endif
    {
      yy_shift(yypParser,yyact,yygoto,&yygotominor);
    }
  }else{
    assert( yyact == YYNSTATE + YYNRULE + 1 );
    yy_accept(yypParser);
  }
}

/*
** The following code executes when the parse fails
*/
#ifndef YYNOERRORRECOVERY
static void yy_parse_failed(
  yyParser *yypParser           /* The parser */
){
  XecParseARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sFail!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser fails */
  XecParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}
#endif /* YYNOERRORRECOVERY */

/*
** The following code executes when a syntax error first occurs.
*/
static void yy_syntax_error(
  yyParser *yypParser,           /* The parser */
  int yymajor,                   /* The major type of the error token */
  YYMINORTYPE yyminor            /* The minor type of the error token */
){
  XecParseARG_FETCH;
#define TOKEN (yyminor.yy0)
#line 1737 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"

    p->get_script()->diagnostic( TOKEN->sloc,
            "unexpected %s", TOKEN->get_spelling().c_str() );
#line 4419 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
  XecParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/*
** The following is executed when the parser accepts
*/
static void yy_accept(
  yyParser *yypParser           /* The parser */
){
  XecParseARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sAccept!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser accepts */
  XecParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/* The main parser program.
** The first argument is a pointer to a structure obtained from
** "XecParseAlloc" which describes the current state of the parser.
** The second argument is the major token number.  The third is
** the minor token.  The fourth optional argument is whatever the
** user wants (and specified in the grammar) and is available for
** use by the action routines.
**
** Inputs:
** <ul>
** <li> A pointer to the parser (an opaque structure.)
** <li> The major token number.
** <li> The minor token number.
** <li> An option argument of a grammar-specified type.
** </ul>
**
** Outputs:
** None.
*/
void XecParse(
  void *yyp,                   /* The parser */
  int yymajor,                 /* The major token code number */
  XecParseTOKENTYPE yyminor       /* The value for the token */
  XecParseARG_PDECL               /* Optional %extra_argument parameter */
){
  YYMINORTYPE yyminorunion;
  int yyact;            /* The parser action. */
  int yyendofinput;     /* True if we are at the end of input */
#ifdef YYERRORSYMBOL
  int yyerrorhit = 0;   /* True if yymajor has invoked an error */
#endif
  yyParser *yypParser;  /* The parser */

  /* (re)initialize the parser, if necessary */
  yypParser = (yyParser*)yyp;
  if( yypParser->yyidx<0 ){
#if YYSTACKDEPTH<=0
    if( yypParser->yystksz <=0 ){
      /*memset(&yyminorunion, 0, sizeof(yyminorunion));*/
      yyminorunion = yyzerominor;
      yyStackOverflow(yypParser, &yyminorunion);
      return;
    }
#endif
    yypParser->yyidx = 0;
    yypParser->yyerrcnt = -1;
    yypParser->yystack[0].stateno = 0;
    yypParser->yystack[0].major = 0;
  }
  yyminorunion.yy0 = yyminor;
  yyendofinput = (yymajor==0);
  XecParseARG_STORE;

#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sInput %s\n",yyTracePrompt,yyTokenName[yymajor]);
  }
#endif

  do{
    yyact = yy_find_shift_action(yypParser,(YYCODETYPE)yymajor);
    if( yyact<YYNSTATE ){
      assert( !yyendofinput );  /* Impossible to shift the $ token */
      yy_shift(yypParser,yyact,yymajor,&yyminorunion);
      yypParser->yyerrcnt--;
      yymajor = YYNOCODE;
    }else if( yyact < YYNSTATE + YYNRULE ){
      yy_reduce(yypParser,yyact-YYNSTATE);
    }else{
      assert( yyact == YY_ERROR_ACTION );
#ifdef YYERRORSYMBOL
      int yymx;
#endif
#ifndef NDEBUG
      if( yyTraceFILE ){
        fprintf(yyTraceFILE,"%sSyntax Error!\n",yyTracePrompt);
      }
#endif
#ifdef YYERRORSYMBOL
      /* A syntax error has occurred.
      ** The response to an error depends upon whether or not the
      ** grammar defines an error token "ERROR".  
      **
      ** This is what we do if the grammar does define ERROR:
      **
      **  * Call the %syntax_error function.
      **
      **  * Begin popping the stack until we enter a state where
      **    it is legal to shift the error symbol, then shift
      **    the error symbol.
      **
      **  * Set the error count to three.
      **
      **  * Begin accepting and shifting new tokens.  No new error
      **    processing will occur until three tokens have been
      **    shifted successfully.
      **
      */
      if( yypParser->yyerrcnt<0 ){
        yy_syntax_error(yypParser,yymajor,yyminorunion);
      }
      yymx = yypParser->yystack[yypParser->yyidx].major;
      if( yymx==YYERRORSYMBOL || yyerrorhit ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE,"%sDiscard input token %s\n",
             yyTracePrompt,yyTokenName[yymajor]);
        }
#endif
        yy_destructor(yypParser, (YYCODETYPE)yymajor,&yyminorunion);
        yymajor = YYNOCODE;
      }else{
         while(
          yypParser->yyidx >= 0 &&
          yymx != YYERRORSYMBOL &&
          (yyact = yy_find_reduce_action(
                        yypParser->yystack[yypParser->yyidx].stateno,
                        YYERRORSYMBOL)) >= YYNSTATE
        ){
          yy_pop_parser_stack(yypParser);
        }
        if( yypParser->yyidx < 0 || yymajor==0 ){
          yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
          yy_parse_failed(yypParser);
          yymajor = YYNOCODE;
        }else if( yymx!=YYERRORSYMBOL ){
          YYMINORTYPE u2;
          u2.YYERRSYMDT = 0;
          yy_shift(yypParser,yyact,YYERRORSYMBOL,&u2);
        }
      }
      yypParser->yyerrcnt = 3;
      yyerrorhit = 1;
#elif defined(YYNOERRORRECOVERY)
      /* If the YYNOERRORRECOVERY macro is defined, then do not attempt to
      ** do any kind of error recovery.  Instead, simply invoke the syntax
      ** error routine and continue going as if nothing had happened.
      **
      ** Applications can set this macro (for example inside %include) if
      ** they intend to abandon the parse upon the first syntax error seen.
      */
      yy_syntax_error(yypParser,yymajor,yyminorunion);
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      yymajor = YYNOCODE;
      
#else  /* YYERRORSYMBOL is not defined */
      /* This is what we do if the grammar does not define ERROR:
      **
      **  * Report an error message, and throw away the input token.
      **
      **  * If the input token is $, then fail the parse.
      **
      ** As before, subsequent error messages are suppressed until
      ** three input tokens have been successfully shifted.
      */
      if( yypParser->yyerrcnt<=0 ){
        yy_syntax_error(yypParser,yymajor,yyminorunion);
      }
      yypParser->yyerrcnt = 3;
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      if( yyendofinput ){
        yy_parse_failed(yypParser);
      }
      yymajor = YYNOCODE;
#endif
    }
  }while( yymajor!=YYNOCODE && yypParser->yyidx>=0 );
  return;
}
