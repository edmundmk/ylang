/* Driver template for the LEMON parser generator.
** The author disclaims copyright to this source code.
*/
/* First off, code is included that follows the "include" declaration
** in the input grammar file. */
#include <stdio.h>
#line 19 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"


#include <assert.h>
#include "xec_parser.h"
#include "xec_token.h"
#include "xec_ast.h"



struct xec_token_scope
{
    xec_token*          token;
    xec_ast_scope*      scope;
};

inline xec_token_scope make_token_scope(
                xec_token* token, xec_ast_scope* scope )
{
    xec_token_scope result;
    result.token = token;
    result.scope = scope;
    return result;
}


struct xec_token_op
{
    xec_token*          token;
    xec_ast_opkind   op;
};

inline xec_token_op make_token_op(
                xec_token* token, xec_ast_opkind op )
{
    xec_token_op result;
    result.token = token;
    result.op = op;
    return result;
}


#line 105 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"



void xec_parser::destroy( xec_token* token )
{
    token->~xec_token();
    recycle_tokens.push_back( token );
}


#line 61 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
/* Next is all token values, in a form suitable for use by makeheaders.
** This section will be null unless lemon is run with the -m switch.
*/
/* 
** These constants (all generated automatically by the parser generator)
** specify the various kinds of tokens (terminals) that the parser
** understands. 
**
** Each symbol here is a terminal symbol in the grammar.
*/
/* Make sure the INTERFACE macro is defined.
*/
#ifndef INTERFACE
# define INTERFACE 1
#endif
/* The next thing included is series of defines which control
** various aspects of the generated parser.
**    YYCODETYPE         is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 terminals
**                       and nonterminals.  "int" is used otherwise.
**    YYNOCODE           is a number of type YYCODETYPE which corresponds
**                       to no legal terminal or nonterminal number.  This
**                       number is used to fill in empty slots of the hash 
**                       table.
**    YYFALLBACK         If defined, this indicates that one or more tokens
**                       have fall-back values which should be used if the
**                       original value of the token will not parse.
**    YYACTIONTYPE       is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 rules and
**                       states combined.  "int" is used otherwise.
**    XecParseTOKENTYPE     is the data type used for minor tokens given 
**                       directly to the parser from the tokenizer.
**    YYMINORTYPE        is the data type used for all minor tokens.
**                       This is typically a union of many types, one of
**                       which is XecParseTOKENTYPE.  The entry in the union
**                       for base tokens is called "yy0".
**    YYSTACKDEPTH       is the maximum depth of the parser's stack.  If
**                       zero the stack is dynamically sized using realloc()
**    XecParseARG_SDECL     A static variable declaration for the %extra_argument
**    XecParseARG_PDECL     A parameter declaration for the %extra_argument
**    XecParseARG_STORE     Code to store %extra_argument into yypParser
**    XecParseARG_FETCH     Code to extract %extra_argument from yypParser
**    YYNSTATE           the combined number of states.
**    YYNRULE            the number of rules in the grammar
**    YYERRORSYMBOL      is the code number of the error symbol.  If not
**                       defined, then do no error processing.
*/
#define YYCODETYPE unsigned char
#define YYNOCODE 159
#define YYACTIONTYPE unsigned short int
#define XecParseTOKENTYPE  xec_token* 
typedef union {
  int yyinit;
  XecParseTOKENTYPE yy0;
  xec_stmt_for* yy16;
  xec_token* yy19;
  xec_ast_func* yy45;
  xec_name_name* yy75;
  xec_name_list* yy118;
  xec_new_array* yy134;
  xec_new_object* yy182;
  xec_stmt_if* yy188;
  xec_new_table* yy191;
  xec_expr_list* yy208;
  xec_stmt_do* yy209;
  xec_token_scope yy218;
  xec_stmt_try* yy224;
  xec_stmt_using* yy227;
  xec_token_op yy235;
  xec_stmt_foreach* yy237;
  xec_stmt_catch* yy256;
  xec_ast_node* yy259;
  xec_stmt_switch* yy267;
  xec_stmt_block* yy268;
  xec_stmt_while* yy278;
} YYMINORTYPE;
#ifndef YYSTACKDEPTH
#define YYSTACKDEPTH 100
#endif
#define XecParseARG_SDECL  xec_parser* p ;
#define XecParseARG_PDECL , xec_parser* p 
#define XecParseARG_FETCH  xec_parser* p  = yypParser->p 
#define XecParseARG_STORE yypParser->p  = p 
#define YYNSTATE 401
#define YYNRULE 220
#define YY_NO_ACTION      (YYNSTATE+YYNRULE+2)
#define YY_ACCEPT_ACTION  (YYNSTATE+YYNRULE+1)
#define YY_ERROR_ACTION   (YYNSTATE+YYNRULE)

/* The yyzerominor constant is used to initialize instances of
** YYMINORTYPE objects to zero. */
static const YYMINORTYPE yyzerominor = { 0 };

/* Define the yytestcase() macro to be a no-op if is not already defined
** otherwise.
**
** Applications can choose to define yytestcase() in the %include section
** to a macro that can assist in verifying code coverage.  For production
** code the yytestcase() macro should be turned off.  But it is useful
** for testing.
*/
#ifndef yytestcase
# define yytestcase(X)
#endif


/* Next are the tables used to determine what action to take based on the
** current state and lookahead token.  These tables are used to implement
** functions that take a state number and lookahead value and return an
** action integer.  
**
** Suppose the action integer is N.  Then the action is determined as
** follows
**
**   0 <= N < YYNSTATE                  Shift N.  That is, push the lookahead
**                                      token onto the stack and goto state N.
**
**   YYNSTATE <= N < YYNSTATE+YYNRULE   Reduce by rule N-YYNSTATE.
**
**   N == YYNSTATE+YYNRULE              A syntax error has occurred.
**
**   N == YYNSTATE+YYNRULE+1            The parser accepts its input.
**
**   N == YYNSTATE+YYNRULE+2            No such action.  Denotes unused
**                                      slots in the yy_action[] table.
**
** The action table is constructed as a single large table named yy_action[].
** Given state S and lookahead X, the action is computed as
**
**      yy_action[ yy_shift_ofst[S] + X ]
**
** If the index value yy_shift_ofst[S]+X is out of range or if the value
** yy_lookahead[yy_shift_ofst[S]+X] is not equal to X or if yy_shift_ofst[S]
** is equal to YY_SHIFT_USE_DFLT, it means that the action is not in the table
** and that yy_default[S] should be used instead.  
**
** The formula above is for computing the action when the lookahead is
** a terminal symbol.  If the lookahead is a non-terminal (as occurs after
** a reduce action) then the yy_reduce_ofst[] array is used in place of
** the yy_shift_ofst[] array and YY_REDUCE_USE_DFLT is used in place of
** YY_SHIFT_USE_DFLT.
**
** The following are the tables generated in this section:
**
**  yy_action[]        A single table containing all actions.
**  yy_lookahead[]     A table containing the lookahead for each entry in
**                     yy_action.  Used to detect hash collisions.
**  yy_shift_ofst[]    For each state, the offset into yy_action for
**                     shifting terminals.
**  yy_reduce_ofst[]   For each state, the offset into yy_action for
**                     shifting non-terminals after a reduce.
**  yy_default[]       Default action for each state.
*/
static const YYACTIONTYPE yy_action[] = {
 /*     0 */   147,  169,  170,  175,  288,  102,  333,  258,  240,  101,
 /*    10 */   115,   85,  190,  193,  195,   10,  197,  209,    8,    9,
 /*    20 */   201,   97,   96,  231,  111,   35,   84,   81,   82,   83,
 /*    30 */   395,  399,  346,  312,   38,  396,  397,    2,  126,  348,
 /*    40 */    14,  370,  368,  123,  332,  137,  313,  122,  139,  130,
 /*    50 */   155,  156,  158,  160,  107,  163,  164,  143,  374,  125,
 /*    60 */   391,  105,  392,  189,  219,  394,  400,  169,  280,  175,
 /*    70 */   126,  247,  172,  370,  368,  132,  115,  259,  190,  193,
 /*    80 */   195,   10,  197,  209,    8,    9,  201,   97,   96,   51,
 /*    90 */   218,   35,  267,  102,  247,  258,  126,  101,  346,  370,
 /*   100 */   368,  132,  171,    4,  126,  217,    7,  370,  368,  123,
 /*   110 */   332,  137,  313,  122,  139,  130,  155,  156,  158,  160,
 /*   120 */   107,  163,  164,  143,  374,  128,  391,  105,  392,  189,
 /*   130 */   220,  246,  400,  169,  280,  175,  126,  330,  326,  370,
 /*   140 */   368,  132,  115,   65,  190,  193,  195,   10,  197,  209,
 /*   150 */     8,    9,  201,   97,   96,   26,  352,   35,  296,  133,
 /*   160 */   247,  183,  126,   31,  346,  370,  368,  132,   44,  333,
 /*   170 */   126,  286,  286,  370,  368,  123,  332,  137,  313,  122,
 /*   180 */   139,  130,  155,  156,  158,  160,  107,  163,  164,  143,
 /*   190 */   374,  171,  391,  105,  392,  189,  383,  248,  400,  169,
 /*   200 */   280,  175,  126,  127,  131,  370,  368,  132,  115,   29,
 /*   210 */   190,  193,  195,   10,  197,  209,    8,    9,  201,   97,
 /*   220 */    96,  111,   26,   35,   27,   28,  133,   52,  144,  144,
 /*   230 */   346,   37,   72,   71,   70,   59,  126,   49,   49,  370,
 /*   240 */   368,  123,  332,  137,  313,  122,  139,  130,  155,  156,
 /*   250 */   158,  160,  107,  163,  164,  143,  374,  301,  391,  105,
 /*   260 */   392,  189,  114,  340,  400,  169,  280,  175,  247,  230,
 /*   270 */   247,  151,   32,  277,  115,  373,  190,  193,  195,   10,
 /*   280 */   197,  209,    8,    9,  201,   97,   96,  108,  351,   35,
 /*   290 */    92,   62,   54,   50,  148,  327,  346,  247,   91,  171,
 /*   300 */    60,  138,  126,  247,  179,  370,  368,  123,  332,  137,
 /*   310 */   313,  122,  139,  130,  155,  156,  158,  160,  107,  163,
 /*   320 */   164,  143,  374,  244,  391,  105,  392,  189,  121,  343,
 /*   330 */   400,  169,  280,  175,  171,  348,   15,   74,   73,   33,
 /*   340 */   115,  242,  190,  193,  195,   10,  197,  209,    8,    9,
 /*   350 */   201,   97,   96,   94,   90,   35,  234,  148,  217,   17,
 /*   360 */    46,   91,  346,   89,  333,  257,  241,  284,  126,   32,
 /*   370 */   277,  370,  368,  123,  332,  137,  313,  122,  139,  130,
 /*   380 */   155,  156,  158,  160,  107,  163,  164,  143,  374,  236,
 /*   390 */   391,  105,  392,  189,  111,  345,  400,  169,  280,  175,
 /*   400 */   622,    6,  350,   69,   37,   68,   64,  116,  190,  193,
 /*   410 */   195,   10,  197,  209,    8,    9,  201,   97,   96,   66,
 /*   420 */    67,   35,   63,   47,  261,  117,  119,  109,  346,  173,
 /*   430 */   239,  398,  113,   93,  126,  382,   88,  370,  368,  123,
 /*   440 */   332,  137,  313,  122,  139,  130,  155,  156,  158,  160,
 /*   450 */   107,  163,  164,  143,  374,  180,  391,  105,  392,  189,
 /*   460 */   346,  182,  271,  347,  280,  169,  126,  175,   95,  370,
 /*   470 */   368,  132,  332,  137,  298,  116,  190,  193,  195,   10,
 /*   480 */   197,  209,    8,    9,  201,   97,   96,  184,  380,   35,
 /*   490 */    55,  369,   61,   20,   53,   23,  346,  235,   41,   22,
 /*   500 */   198,   12,  126,   30,  110,  370,  368,  123,  332,  137,
 /*   510 */   313,  122,  139,  130,  155,  156,  158,  160,  107,  163,
 /*   520 */   164,  143,  374,   11,  391,  105,  392,  189,  346,  145,
 /*   530 */   271,  264,  280,  169,  126,  175,  200,  370,  368,  132,
 /*   540 */   332,  137,  314,  116,  190,  193,  195,   10,  197,  209,
 /*   550 */     8,    9,  201,   97,   96,  269,   21,   35,   18,  287,
 /*   560 */   290,  289,   19,  291,  346,   42,  293,  297,  304,  316,
 /*   570 */   126,  349,   45,  370,  368,  123,  332,  137,  313,  122,
 /*   580 */   139,  130,  155,  156,  158,  160,  107,  163,  164,  143,
 /*   590 */   374,  317,  391,  105,  392,  189,  346,  229,  271,  272,
 /*   600 */   280,  169,  126,  175,  320,  370,  368,  132,  332,  137,
 /*   610 */   315,  116,  190,  193,  195,   10,  197,  209,    8,    9,
 /*   620 */   201,   97,   96,  325,  328,   35,   24,  249,   25,  324,
 /*   630 */   275,  334,  346,  353,  375,  251,  268,  245,  126,  223,
 /*   640 */     1,  370,  368,  123,  332,  137,  313,  122,  139,  130,
 /*   650 */   155,  156,  158,  160,  107,  163,  164,  143,  374,  141,
 /*   660 */   391,  105,  392,  189,  346,  118,  271,  274,  280,  169,
 /*   670 */   126,  175,    5,  370,  368,  132,  332,  137,  318,  116,
 /*   680 */   190,  193,  195,   10,  197,  209,    8,    9,  201,   97,
 /*   690 */    96,   86,  253,   35,  623,  623,    3,  623,  623,  623,
 /*   700 */   346,  623,  623,  623,  623,  623,  126,  623,  623,  370,
 /*   710 */   368,  123,  332,  137,  313,  122,  139,  130,  155,  156,
 /*   720 */   158,  160,  107,  163,  164,  143,  374,  623,  391,  105,
 /*   730 */   392,  189,  346,  623,  271,  279,  280,  169,  126,  175,
 /*   740 */   623,  370,  368,  132,  332,  137,  322,  116,  190,  193,
 /*   750 */   195,   10,  197,  209,    8,    9,  201,   97,   96,  623,
 /*   760 */   623,   35,  623,  623,  623,  623,  623,  623,  346,  623,
 /*   770 */   623,  623,  623,  623,  126,  623,  623,  370,  368,  123,
 /*   780 */   332,  137,  313,  122,  139,  130,  155,  156,  158,  160,
 /*   790 */   107,  163,  164,  143,  374,  623,  391,  105,  392,  189,
 /*   800 */   346,  623,  271,  310,  280,  169,  126,  175,  623,  370,
 /*   810 */   368,  132,  332,  137,  323,  116,  190,  193,  195,   10,
 /*   820 */   197,  209,    8,    9,  201,   97,   96,  623,  623,   35,
 /*   830 */   623,  623,  623,  623,  623,  623,  346,  623,  623,  623,
 /*   840 */   623,  623,  126,  623,  623,  370,  368,  123,  332,  137,
 /*   850 */   313,  122,  139,  130,  155,  156,  158,  160,  107,  163,
 /*   860 */   164,  143,  374,  623,  391,  105,  392,  189,  623,  623,
 /*   870 */   271,  265,  280,  305,  623,   16,  623,  623,  176,   32,
 /*   880 */   277,  623,  376,  181,  233,  623,   99,  177,  393,  256,
 /*   890 */   101,  623,   36,  623,  108,  344,  342,  341,  339,  338,
 /*   900 */    79,   80,   76,   77,   75,   78,  346,  623,  623,  623,
 /*   910 */   623,  623,  126,  623,  623,  370,  368,  132,  332,  137,
 /*   920 */   313,  122,  139,  130,  155,  156,  158,  160,  106,  178,
 /*   930 */   623,  294,  285,  283,  282,  281,  278,  276,  273,  270,
 /*   940 */   266,  623,  307,   43,   48,  204,  205,  206,   34,   58,
 /*   950 */   306,  308,  311,  305,  337,   16,  623,  623,  176,   32,
 /*   960 */   277,  623,  376,  181,  233,  237,   99,  177,  393,  623,
 /*   970 */   101,  623,   36,  623,  108,  344,  342,  341,  339,  338,
 /*   980 */    79,   80,   76,   77,   75,   78,  346,  623,  623,  623,
 /*   990 */   623,  623,  126,  623,  623,  370,  368,  132,  332,  137,
 /*  1000 */   313,  122,  139,  130,  155,  156,  158,  162,  623,  178,
 /*  1010 */   623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
 /*  1020 */   623,  623,  307,   43,   48,  204,  205,  206,   34,   58,
 /*  1030 */   306,  308,  311,  305,  337,   16,  623,  623,  176,   32,
 /*  1040 */   277,  623,  376,  181,  233,  263,   99,  177,  393,  623,
 /*  1050 */   101,  623,   36,  623,  108,  344,  342,  341,  339,  338,
 /*  1060 */    79,   80,   76,   77,   75,   78,  346,  623,  623,  623,
 /*  1070 */   623,  623,  126,  623,  623,  370,  368,  132,  332,  137,
 /*  1080 */   313,  122,  139,  130,  155,  156,  161,  346,  623,  178,
 /*  1090 */   623,  623,  623,  126,  623,  623,  370,  368,  132,  332,
 /*  1100 */   137,  321,  307,   43,   48,  204,  205,  206,   34,   58,
 /*  1110 */   306,  308,  311,  305,  337,   16,  623,  623,  176,   32,
 /*  1120 */   277,  623,  376,  181,  233,  232,   99,  177,  393,  623,
 /*  1130 */   101,  623,   36,  623,  108,  344,  342,  341,  339,  338,
 /*  1140 */    79,   80,   76,   77,   75,   78,  346,  623,  623,  623,
 /*  1150 */   623,  623,  126,  623,  623,  370,  368,  132,  332,  137,
 /*  1160 */   313,  122,  139,  130,  155,  159,  346,  623,  623,  178,
 /*  1170 */   623,  623,  126,  623,  623,  370,  368,  132,  332,  137,
 /*  1180 */   313,  124,  307,   43,   48,  204,  205,  206,   34,   58,
 /*  1190 */   306,  308,  311,  623,  337,  401,  305,  623,   16,  623,
 /*  1200 */   623,  176,   32,  277,  623,  376,  181,  233,  623,   99,
 /*  1210 */   177,  393,  623,  101,  623,   36,  623,  108,  344,  342,
 /*  1220 */   341,  339,  338,   79,   80,   76,   77,   75,   78,  346,
 /*  1230 */   623,  623,  623,  623,  623,  126,  623,  623,  370,  368,
 /*  1240 */   132,  332,  137,  313,  122,  139,  130,  157,  346,  623,
 /*  1250 */   623,  623,  178,  623,  126,  623,  623,  370,  368,  132,
 /*  1260 */   332,  137,  313,  122,  140,  307,   43,   48,  204,  205,
 /*  1270 */   206,   34,   58,  306,  308,  311,  305,  337,   16,  623,
 /*  1280 */   623,  176,   32,  277,  623,  376,  181,  233,  386,   99,
 /*  1290 */   177,  393,  623,  101,  623,   36,  623,  108,  344,  342,
 /*  1300 */   341,  339,  338,   79,   80,   76,   77,   75,   78,  346,
 /*  1310 */   623,  623,  623,  623,  623,  126,  623,  623,  370,  368,
 /*  1320 */   132,  332,  137,  313,  122,  139,  129,  346,  623,  623,
 /*  1330 */   623,  623,  178,  126,  623,  623,  370,  368,  132,  332,
 /*  1340 */   137,  313,  122,  136,  623,  307,   43,   48,  204,  205,
 /*  1350 */   206,   34,   58,  306,  308,  311,  305,  337,   16,  623,
 /*  1360 */   623,  176,   32,  277,  623,  376,  181,  253,  623,  623,
 /*  1370 */   177,  623,  623,  623,  623,   36,  623,  108,  344,  342,
 /*  1380 */   341,  339,  338,   79,   80,   76,   77,   75,   78,  346,
 /*  1390 */   623,  623,  623,  623,  623,  126,  623,  623,  370,  368,
 /*  1400 */   132,  332,  137,  313,  122,  134,  623,  346,  623,  623,
 /*  1410 */   623,  623,  178,  126,  623,  623,  370,  368,  132,  332,
 /*  1420 */   137,  313,  120,  623,  623,  307,   43,   48,  204,  205,
 /*  1430 */   206,   34,   58,  306,  308,  311,  305,  337,   16,  623,
 /*  1440 */   623,  176,   32,  277,  623,  376,  181,  233,  623,  623,
 /*  1450 */   177,  623,  623,  623,  623,   36,  623,  108,  344,  342,
 /*  1460 */   341,  339,  338,   79,   80,   76,   77,   75,   78,   41,
 /*  1470 */   623,  346,  623,  623,  623,  623,  623,  126,  623,  371,
 /*  1480 */   370,  368,  132,  332,  137,  309,  151,   32,  277,  623,
 /*  1490 */   623,  623,  178,  623,  623,   88,  623,  623,  623,  623,
 /*  1500 */   623,  169,  108,  175,  623,  307,   43,   48,  204,  205,
 /*  1510 */   206,   34,   58,  306,  308,  311,  623,  337,  366,  364,
 /*  1520 */   354,  355,  356,  357,  358,  359,  360,  361,  362,  363,
 /*  1530 */   623,  623,  346,  623,  169,  623,  175,  388,  126,  238,
 /*  1540 */   381,  370,  368,  123,  332,  137,  313,  122,  139,  130,
 /*  1550 */   155,  156,  158,  160,  107,  163,  164,  143,  365,  103,
 /*  1560 */   387,  623,  623,  623,  336,  346,  623,  623,  623,  214,
 /*  1570 */   388,  126,  335,  381,  370,  368,  123,  332,  137,  313,
 /*  1580 */   122,  139,  130,  155,  156,  158,  160,  107,  163,  164,
 /*  1590 */   143,  365,  104,  387,  169,  623,  175,  151,   32,  277,
 /*  1600 */   623,  623,  623,  216,  623,  623,  623,  623,  623,  623,
 /*  1610 */   623,  623,  623,  108,  344,  342,  341,  339,  338,   79,
 /*  1620 */    80,   76,   77,   75,   78,  346,  623,  169,  623,  175,
 /*  1630 */   388,  126,  238,  381,  370,  368,  123,  332,  137,  313,
 /*  1640 */   122,  139,  130,  155,  156,  158,  160,  107,  163,  164,
 /*  1650 */   143,  365,  104,  387,  623,  623,  623,  196,  346,  623,
 /*  1660 */   169,  623,  175,  388,  126,  238,  381,  370,  368,  123,
 /*  1670 */   332,  137,  313,  122,  139,  130,  155,  156,  158,  160,
 /*  1680 */   107,  163,  164,  143,  365,  104,  387,  623,  623,  623,
 /*  1690 */   202,  346,  623,  623,  623,  623,  388,  126,  238,  381,
 /*  1700 */   370,  368,  123,  332,  137,  313,  122,  139,  130,  155,
 /*  1710 */   156,  158,  160,  107,  163,  164,  143,  365,  104,  387,
 /*  1720 */   169,  623,  175,  194,  623,  623,  623,  623,  623,  623,
 /*  1730 */   623,  623,  623,  346,  623,  623,  623,  623,  623,  126,
 /*  1740 */   623,  623,  370,  368,  132,  332,  137,  300,  623,  623,
 /*  1750 */   623,  346,  623,  169,  623,  175,  388,  126,  335,  381,
 /*  1760 */   370,  368,  123,  332,  137,  313,  122,  139,  130,  155,
 /*  1770 */   156,  158,  160,  107,  163,  164,  143,  365,  104,  387,
 /*  1780 */   169,  623,  175,  623,  346,  623,  623,  623,  623,  215,
 /*  1790 */   126,  623,  329,  370,  368,  123,  332,  137,  313,  122,
 /*  1800 */   139,  130,  155,  156,  158,  160,  107,  163,  164,  143,
 /*  1810 */   365,  346,  331,  623,  623,  623,  388,  126,  238,  381,
 /*  1820 */   370,  368,  123,  332,  137,  313,  122,  139,  130,  155,
 /*  1830 */   156,  158,  160,  107,  163,  164,  143,  365,  104,  387,
 /*  1840 */   169,  623,  175,  192,  623,  623,  623,  623,  623,  623,
 /*  1850 */   623,  623,  623,  346,  623,  623,  623,  623,  623,  126,
 /*  1860 */   623,  623,  370,  368,  132,  332,  137,  302,  623,  623,
 /*  1870 */   623,  346,  623,  623,  623,  623,  388,  126,  199,  381,
 /*  1880 */   370,  368,  123,  332,  137,  313,  122,  139,  130,  155,
 /*  1890 */   156,  158,  160,  107,  163,  164,  143,  365,  104,  387,
 /*  1900 */   169,  623,  175,  623,  346,  623,  623,  623,  623,  623,
 /*  1910 */   126,  623,  623,  370,  368,  132,  332,  137,  313,  122,
 /*  1920 */   139,  130,  155,  156,  158,  160,  107,  163,  166,  623,
 /*  1930 */   227,  346,  169,  623,  175,  623,  388,  126,  389,  381,
 /*  1940 */   370,  368,  123,  332,  137,  313,  122,  139,  130,  155,
 /*  1950 */   156,  158,  160,  107,  163,  164,  143,  365,  104,  387,
 /*  1960 */   623,  623,  623,  346,  147,  623,  170,  623,  292,  126,
 /*  1970 */   623,  381,  370,  368,  123,  332,  137,  313,  122,  139,
 /*  1980 */   130,  155,  156,  158,  160,  107,  163,  164,  143,  365,
 /*  1990 */   191,  387,  623,  623,  255,  623,  623,  260,  254,  252,
 /*  2000 */   250,  623,  623,  623,  623,  623,  623,  623,  623,  623,
 /*  2010 */   623,  623,  623,  623,  346,  623,  623,  222,  623,  169,
 /*  2020 */   126,  175,  623,  370,  368,  132,  332,  137,  313,  122,
 /*  2030 */   139,  130,  155,  156,  158,  160,  107,  165,  623,   41,
 /*  2040 */   623,  623,  623,  623,  623,   57,  623,  623,  623,  371,
 /*  2050 */   346,  623,  623,  623,  623,  292,  126,  623,  381,  370,
 /*  2060 */   368,  123,  332,  137,  313,  122,  139,  130,  155,  156,
 /*  2070 */   158,  160,  107,  163,  164,  143,  365,  191,  387,  169,
 /*  2080 */   623,  175,  623,  623,  225,  224,  623,  623,  366,  364,
 /*  2090 */   354,  355,  356,  357,  358,  359,  360,  361,  362,  363,
 /*  2100 */   623,  623,  623,  623,  228,  623,  169,  623,  175,  623,
 /*  2110 */   346,   56,  623,  623,  623,  623,  126,  623,  319,  370,
 /*  2120 */   368,  123,  332,  137,  313,  122,  139,  130,  155,  156,
 /*  2130 */   158,  160,  107,  163,  164,  143,  365,  346,  226,  623,
 /*  2140 */   623,  623,  292,  126,  623,  381,  370,  368,  123,  332,
 /*  2150 */   137,  313,  122,  139,  130,  155,  156,  158,  160,  107,
 /*  2160 */   163,  164,  143,  365,  191,  387,  169,  623,  175,  623,
 /*  2170 */   623,  623,  623,  187,  185,  623,  623,  623,  623,  623,
 /*  2180 */   623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
 /*  2190 */   623,  152,  623,  169,  623,  175,  623,  346,  623,  623,
 /*  2200 */   623,  623,  623,  126,  623,  186,  370,  368,  132,  332,
 /*  2210 */   137,  313,  122,  139,  130,  155,  156,  158,  160,  107,
 /*  2220 */   163,  164,  143,  365,  346,  623,  169,  623,  175,  292,
 /*  2230 */   126,  623,  381,  370,  368,  123,  332,  137,  313,  122,
 /*  2240 */   139,  130,  155,  156,  158,  160,  107,  163,  164,  143,
 /*  2250 */   365,  191,  387,  623,  623,  623,  623,  346,  623,  623,
 /*  2260 */   623,  623,  388,  126,  149,  381,  370,  368,  123,  332,
 /*  2270 */   137,  313,  122,  139,  130,  155,  156,  158,  160,  107,
 /*  2280 */   163,  164,  143,  365,  104,  387,  169,  623,  175,  623,
 /*  2290 */   623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
 /*  2300 */   623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
 /*  2310 */   623,  623,  623,  169,  623,  175,  623,  346,  623,  623,
 /*  2320 */   623,  623,  623,  126,  623,  384,  370,  368,  123,  332,
 /*  2330 */   137,  313,  122,  139,  130,  155,  156,  158,  160,  107,
 /*  2340 */   163,  164,  143,  365,  346,  385,  169,  623,  175,  388,
 /*  2350 */   126,  390,  381,  370,  368,  123,  332,  137,  313,  122,
 /*  2360 */   139,  130,  155,  156,  158,  160,  107,  163,  164,  143,
 /*  2370 */   365,  104,  387,  623,  623,  623,  623,  346,  623,  623,
 /*  2380 */   623,  623,  146,  126,  623,  381,  370,  368,  123,  332,
 /*  2390 */   137,  313,  122,  139,  130,  155,  156,  158,  160,  107,
 /*  2400 */   163,  164,  143,  365,  191,  387,  169,  623,  175,  623,
 /*  2410 */   623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
 /*  2420 */   623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
 /*  2430 */   623,  623,  623,  169,  623,  175,  623,  346,  623,  623,
 /*  2440 */   623,  623,  623,  126,  623,  378,  370,  368,  123,  332,
 /*  2450 */   137,  313,  122,  139,  130,  155,  156,  158,  160,  107,
 /*  2460 */   163,  164,  143,  365,  346,  379,  169,  623,  175,  174,
 /*  2470 */   126,  623,  381,  370,  368,  123,  332,  137,  313,  122,
 /*  2480 */   139,  130,  155,  156,  158,  160,  107,  163,  164,  143,
 /*  2490 */   365,  191,  387,  623,  623,  623,  623,  346,  623,  623,
 /*  2500 */   623,  623,  243,  126,  623,  381,  370,  368,  123,  332,
 /*  2510 */   137,  313,  122,  139,  130,  155,  156,  158,  160,  107,
 /*  2520 */   163,  164,  143,  365,  191,  387,  169,  623,  175,  623,
 /*  2530 */   623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
 /*  2540 */   623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
 /*  2550 */   623,  623,  623,  169,  623,  175,  623,  346,  623,  623,
 /*  2560 */   623,  623,  623,  126,  623,  153,  370,  368,  132,  332,
 /*  2570 */   137,  313,  122,  139,  130,  155,  156,  158,  160,  107,
 /*  2580 */   163,  164,  143,  365,  346,  623,  169,  623,  175,  207,
 /*  2590 */   126,  623,  381,  370,  368,  123,  332,  137,  313,  122,
 /*  2600 */   139,  130,  155,  156,  158,  160,  107,  163,  164,  143,
 /*  2610 */   365,  191,  387,  623,  169,  623,  175,  346,  623,  623,
 /*  2620 */   623,  623,  623,  126,  623,  381,  370,  368,  132,  332,
 /*  2630 */   137,  313,  122,  139,  130,  155,  156,  158,  160,  107,
 /*  2640 */   163,  164,  143,  365,  135,  346,  169,  623,  175,  623,
 /*  2650 */   623,  126,  623,  213,  370,  368,  132,  332,  137,  313,
 /*  2660 */   122,  139,  130,  155,  156,  158,  160,  107,  163,  164,
 /*  2670 */   143,  365,  623,  169,  623,  175,  623,  346,  623,  623,
 /*  2680 */   623,  623,  623,  126,  623,  150,  370,  368,  132,  332,
 /*  2690 */   137,  313,  122,  139,  130,  155,  156,  158,  160,  107,
 /*  2700 */   163,  164,  143,  365,  346,  169,  623,  175,  623,  623,
 /*  2710 */   126,  623,  212,  370,  368,  132,  332,  137,  313,  122,
 /*  2720 */   139,  130,  155,  156,  158,  160,  107,  163,  164,  143,
 /*  2730 */   365,  623,  169,  623,  175,  623,  346,  623,  623,  623,
 /*  2740 */   623,  623,  126,  623,  377,  370,  368,  132,  332,  137,
 /*  2750 */   313,  122,  139,  130,  155,  156,  158,  160,  107,  163,
 /*  2760 */   164,  143,  365,  346,  169,  623,  175,  623,  623,  126,
 /*  2770 */   623,  167,  370,  368,  132,  332,  137,  313,  122,  139,
 /*  2780 */   130,  155,  156,  158,  160,  107,  163,  164,  143,  365,
 /*  2790 */   623,  169,  623,  175,  623,  346,  623,  623,  623,  623,
 /*  2800 */   623,  126,  623,  372,  370,  368,  132,  332,  137,  313,
 /*  2810 */   122,  139,  130,  155,  156,  158,  160,  107,  163,  164,
 /*  2820 */   143,  365,  346,  169,  623,  175,  623,  623,  126,  623,
 /*  2830 */   188,  370,  368,  132,  332,  137,  313,  122,  139,  130,
 /*  2840 */   155,  156,  158,  160,  107,  163,  164,  143,  365,  623,
 /*  2850 */   169,  623,  175,  623,  346,  623,  623,  623,  623,  623,
 /*  2860 */   126,  623,  208,  370,  368,  132,  332,  137,  313,  122,
 /*  2870 */   139,  130,  155,  156,  158,  160,  107,  163,  164,  143,
 /*  2880 */   365,  346,  169,  623,  175,  623,  623,  126,  623,  154,
 /*  2890 */   370,  368,  132,  332,  137,  313,  122,  139,  130,  155,
 /*  2900 */   156,  158,  160,  107,  163,  164,  143,  365,  623,  169,
 /*  2910 */   623,  175,  623,  346,  623,  623,  623,  623,  623,  126,
 /*  2920 */   623,  210,  370,  368,  132,  332,  137,  313,  122,  139,
 /*  2930 */   130,  155,  156,  158,  160,  107,  163,  164,  143,  365,
 /*  2940 */   346,  169,  623,  175,  623,  623,  126,  623,  168,  370,
 /*  2950 */   368,  132,  332,  137,  313,  122,  139,  130,  155,  156,
 /*  2960 */   158,  160,  107,  163,  164,  143,  365,  623,  169,  623,
 /*  2970 */   175,  623,  346,  623,  623,  623,  623,  623,  126,  623,
 /*  2980 */   211,  370,  368,  132,  332,  137,  313,  122,  139,  130,
 /*  2990 */   155,  156,  158,  160,  107,  163,  164,  143,  365,  346,
 /*  3000 */   169,  623,  175,  623,  623,  126,  623,  142,  370,  368,
 /*  3010 */   132,  332,  137,  313,  122,  139,  130,  155,  156,  158,
 /*  3020 */   160,  107,  163,  164,  143,  365,  623,  169,  623,  175,
 /*  3030 */   623,  346,  623,  623,  623,  623,  623,  126,  623,  384,
 /*  3040 */   370,  368,  132,  332,  137,  313,  122,  139,  130,  155,
 /*  3050 */   156,  158,  160,  107,  163,  164,  143,  365,  346,  169,
 /*  3060 */   623,  175,  623,  623,  126,  623,  262,  370,  368,  132,
 /*  3070 */   332,  137,  313,  122,  139,  130,  155,  156,  158,  160,
 /*  3080 */   107,  163,  164,  143,  365,  623,  623,  623,  623,  623,
 /*  3090 */   346,  623,  623,  623,  623,  623,  126,  623,  203,  370,
 /*  3100 */   368,  132,  332,  137,  313,  122,  139,  130,  155,  156,
 /*  3110 */   158,  160,  107,  163,  164,  143,  365,  151,   32,  277,
 /*  3120 */   623,  376,  181,   39,  623,  623,  177,  623,  623,  623,
 /*  3130 */   623,   36,  303,  108,  344,  342,  341,  339,  338,   79,
 /*  3140 */    80,   76,   77,   75,   78,  623,  623,  623,  623,  623,
 /*  3150 */   623,  623,  623,  623,   40,  623,  623,  623,  623,  623,
 /*  3160 */   623,  623,  623,  623,  371,  623,  623,  623,  178,  623,
 /*  3170 */   623,  623,  623,  623,  623,  151,   32,  277,  623,  376,
 /*  3180 */   181,   39,  623,  623,  177,  623,  623,  100,  623,   36,
 /*  3190 */   623,  108,  344,  342,  341,  339,  338,   79,   80,   76,
 /*  3200 */    77,   75,   78,  366,  364,  354,  355,  356,  357,  358,
 /*  3210 */   359,  360,  361,  362,  363,  623,  623,  623,  623,  623,
 /*  3220 */   623,  623,  623,  623,  623,  623,  178,  623,  623,  623,
 /*  3230 */   623,  623,  623,  151,   32,  277,  623,  376,  181,   39,
 /*  3240 */   623,  623,  177,  299,  623,  623,  623,   36,  623,  108,
 /*  3250 */   344,  342,  341,  339,  338,   79,   80,   76,   77,   75,
 /*  3260 */    78,  623,  623,  623,  623,  623,  623,  623,  623,  623,
 /*  3270 */   623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
 /*  3280 */   623,  623,  623,  623,  178,  623,  623,  623,  623,  623,
 /*  3290 */   623,  151,   32,  277,  623,  376,  181,   39,  623,  623,
 /*  3300 */   177,  623,  623,   98,  623,   36,  623,  108,  344,  342,
 /*  3310 */   341,  339,  338,   79,   80,   76,   77,   75,   78,  623,
 /*  3320 */   623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
 /*  3330 */   623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
 /*  3340 */   623,  623,  178,  623,  623,  623,  623,  623,  623,  151,
 /*  3350 */    32,  277,  623,  376,  181,   39,  623,  623,  177,  295,
 /*  3360 */   623,  623,  623,   36,  623,  108,  344,  342,  341,  339,
 /*  3370 */   338,   79,   80,   76,   77,   75,   78,  623,  623,  623,
 /*  3380 */   623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
 /*  3390 */   623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
 /*  3400 */   178,  623,  623,  623,  623,  623,  623,  151,   32,  277,
 /*  3410 */   623,  376,  181,   39,  623,  623,  177,  623,  623,  623,
 /*  3420 */   623,   36,  623,  108,  344,  342,  341,  339,  338,   79,
 /*  3430 */    80,   76,   77,   75,   78,  623,  623,  623,  623,  623,
 /*  3440 */   623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
 /*  3450 */   623,  623,  623,  623,  623,  623,  623,  623,  178,  623,
 /*  3460 */   623,  623,  623,  623,  623,  151,   32,  277,  623,  623,
 /*  3470 */   181,   39,  367,  623,  177,  623,  623,  623,  623,   36,
 /*  3480 */   623,  108,  344,  342,  341,  339,  338,   79,   80,   76,
 /*  3490 */    77,   75,   78,  623,  623,  623,  623,  623,  623,  623,
 /*  3500 */   623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
 /*  3510 */   623,  623,  623,  623,  623,  623,  178,  623,  623,  623,
 /*  3520 */   623,  623,  623,  151,   32,  277,  623,  623,  181,   39,
 /*  3530 */   623,  623,  177,  623,  623,  623,  623,   36,  221,  108,
 /*  3540 */   344,  342,  341,  339,  338,   79,   80,   76,   77,   75,
 /*  3550 */    78,  623,  623,  623,  623,  623,  623,  623,  623,  623,
 /*  3560 */   623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
 /*  3570 */   623,  623,  623,  623,  178,  623,  623,  623,  623,  623,
 /*  3580 */   623,  151,   32,  277,  623,  623,  181,   39,  623,  623,
 /*  3590 */    87,  623,  623,  112,  623,   36,  623,  108,  344,  342,
 /*  3600 */   341,  339,  338,   79,   80,   76,   77,   75,   78,  623,
 /*  3610 */   623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
 /*  3620 */   623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
 /*  3630 */   623,  623,  178,  623,  623,  623,  623,  623,  623,  151,
 /*  3640 */    32,  277,  623,  623,  181,   39,  623,  623,  177,  623,
 /*  3650 */   623,  623,  623,   36,  623,  108,  344,  342,  341,  339,
 /*  3660 */   338,   79,   80,   76,   77,   75,   78,  623,  623,  623,
 /*  3670 */   623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
 /*  3680 */   623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
 /*  3690 */   178,
};
static const YYCODETYPE yy_lookahead[] = {
 /*     0 */    87,   88,   89,   90,   13,   14,    8,   16,   10,   18,
 /*    10 */    97,  118,   99,  100,  101,  102,  103,  104,  105,  106,
 /*    20 */   107,  108,  109,    6,    9,  112,   33,   34,   35,   36,
 /*    30 */   117,   16,  119,   16,   19,  122,  123,  114,  125,    4,
 /*    40 */     5,  128,  129,  130,  131,  132,  133,  134,  135,  136,
 /*    50 */   137,  138,  139,  140,  141,  142,  143,  144,  145,  125,
 /*    60 */   147,  148,  149,  150,  119,  152,  153,   88,  155,   90,
 /*    70 */   125,   84,   85,  128,  129,  130,   97,    8,   99,  100,
 /*    80 */   101,  102,  103,  104,  105,  106,  107,  108,  109,   20,
 /*    90 */   119,  112,   13,   14,   84,   16,  125,   18,  119,  128,
 /*   100 */   129,  130,  115,  114,  125,  110,  111,  128,  129,  130,
 /*   110 */   131,  132,  133,  134,  135,  136,  137,  138,  139,  140,
 /*   120 */   141,  142,  143,  144,  145,  115,  147,  148,  149,  150,
 /*   130 */   119,  152,  153,   88,  155,   90,  125,   28,   29,  128,
 /*   140 */   129,  130,   97,   91,   99,  100,  101,  102,  103,  104,
 /*   150 */   105,  106,  107,  108,  109,    7,  119,  112,   10,   11,
 /*   160 */    84,   85,  125,   92,  119,  128,  129,  130,   20,    8,
 /*   170 */   125,   84,   84,  128,  129,  130,  131,  132,  133,  134,
 /*   180 */   135,  136,  137,  138,  139,  140,  141,  142,  143,  144,
 /*   190 */   145,  115,  147,  148,  149,  150,  119,  152,  153,   88,
 /*   200 */   155,   90,  125,  116,  116,  128,  129,  130,   97,   92,
 /*   210 */    99,  100,  101,  102,  103,  104,  105,  106,  107,  108,
 /*   220 */   109,    9,    7,  112,    7,    7,   11,   15,   11,   11,
 /*   230 */   119,   19,   37,   38,   39,   20,  125,   20,   20,  128,
 /*   240 */   129,  130,  131,  132,  133,  134,  135,  136,  137,  138,
 /*   250 */   139,  140,  141,  142,  143,  144,  145,   16,  147,  148,
 /*   260 */   149,  150,   12,  152,  153,   88,  155,   90,   84,   85,
 /*   270 */    84,    6,    7,    8,   97,    8,   99,  100,  101,  102,
 /*   280 */   103,  104,  105,  106,  107,  108,  109,   22,    8,  112,
 /*   290 */     7,   56,   57,   81,   11,   17,  119,   84,   15,  115,
 /*   300 */    20,  115,  125,   84,   85,  128,  129,  130,  131,  132,
 /*   310 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*   320 */   143,  144,  145,   21,  147,  148,  149,  150,  115,  152,
 /*   330 */   153,   88,  155,   90,  115,    4,    5,   30,   31,    7,
 /*   340 */    97,   17,   99,  100,  101,  102,  103,  104,  105,  106,
 /*   350 */   107,  108,  109,    7,   15,  112,   17,   11,  110,  111,
 /*   360 */     9,   15,  119,   15,    8,   17,   10,   16,  125,    7,
 /*   370 */     8,  128,  129,  130,  131,  132,  133,  134,  135,  136,
 /*   380 */   137,  138,  139,  140,  141,  142,  143,  144,  145,   21,
 /*   390 */   147,  148,  149,  150,    9,  152,  153,   88,  155,   90,
 /*   400 */   113,  114,   21,   40,   19,   41,   54,   98,   99,  100,
 /*   410 */   101,  102,  103,  104,  105,  106,  107,  108,  109,   43,
 /*   420 */    42,  112,   55,   15,   21,   12,   12,    9,  119,   17,
 /*   430 */     6,   16,   12,    7,  125,    6,   15,  128,  129,  130,
 /*   440 */   131,  132,  133,  134,  135,  136,  137,  138,  139,  140,
 /*   450 */   141,  142,  143,  144,  145,   17,  147,  148,  149,  150,
 /*   460 */   119,   57,  153,  154,  155,   88,  125,   90,    7,  128,
 /*   470 */   129,  130,  131,  132,  133,   98,   99,  100,  101,  102,
 /*   480 */   103,  104,  105,  106,  107,  108,  109,   17,    6,  112,
 /*   490 */    15,   13,    9,    7,   15,    7,  119,   16,    9,    7,
 /*   500 */    70,   17,  125,    7,   17,  128,  129,  130,  131,  132,
 /*   510 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*   520 */   143,  144,  145,   17,  147,  148,  149,  150,  119,   17,
 /*   530 */   153,  154,  155,   88,  125,   90,   17,  128,  129,  130,
 /*   540 */   131,  132,  133,   98,   99,  100,  101,  102,  103,  104,
 /*   550 */   105,  106,  107,  108,  109,   16,    7,  112,   17,   15,
 /*   560 */     6,   15,    7,   16,  119,    9,   16,   16,   16,   21,
 /*   570 */   125,    9,    7,  128,  129,  130,  131,  132,  133,  134,
 /*   580 */   135,  136,  137,  138,  139,  140,  141,  142,  143,  144,
 /*   590 */   145,   17,  147,  148,  149,  150,  119,   17,  153,  154,
 /*   600 */   155,   88,  125,   90,   17,  128,  129,  130,  131,  132,
 /*   610 */   133,   98,   99,  100,  101,  102,  103,  104,  105,  106,
 /*   620 */   107,  108,  109,   17,   17,  112,   16,   16,   16,    6,
 /*   630 */    10,   17,  119,   17,   17,   17,   17,   84,  125,   17,
 /*   640 */   114,  128,  129,  130,  131,  132,  133,  134,  135,  136,
 /*   650 */   137,  138,  139,  140,  141,  142,  143,  144,  145,   84,
 /*   660 */   147,  148,  149,  150,  119,   98,  153,  154,  155,   88,
 /*   670 */   125,   90,  114,  128,  129,  130,  131,  132,  133,   98,
 /*   680 */    99,  100,  101,  102,  103,  104,  105,  106,  107,  108,
 /*   690 */   109,  118,   12,  112,  158,  158,  114,  158,  158,  158,
 /*   700 */   119,  158,  158,  158,  158,  158,  125,  158,  158,  128,
 /*   710 */   129,  130,  131,  132,  133,  134,  135,  136,  137,  138,
 /*   720 */   139,  140,  141,  142,  143,  144,  145,  158,  147,  148,
 /*   730 */   149,  150,  119,  158,  153,  154,  155,   88,  125,   90,
 /*   740 */   158,  128,  129,  130,  131,  132,  133,   98,   99,  100,
 /*   750 */   101,  102,  103,  104,  105,  106,  107,  108,  109,  158,
 /*   760 */   158,  112,  158,  158,  158,  158,  158,  158,  119,  158,
 /*   770 */   158,  158,  158,  158,  125,  158,  158,  128,  129,  130,
 /*   780 */   131,  132,  133,  134,  135,  136,  137,  138,  139,  140,
 /*   790 */   141,  142,  143,  144,  145,  158,  147,  148,  149,  150,
 /*   800 */   119,  158,  153,  154,  155,   88,  125,   90,  158,  128,
 /*   810 */   129,  130,  131,  132,  133,   98,   99,  100,  101,  102,
 /*   820 */   103,  104,  105,  106,  107,  108,  109,  158,  158,  112,
 /*   830 */   158,  158,  158,  158,  158,  158,  119,  158,  158,  158,
 /*   840 */   158,  158,  125,  158,  158,  128,  129,  130,  131,  132,
 /*   850 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*   860 */   143,  144,  145,  158,  147,  148,  149,  150,  158,  158,
 /*   870 */   153,  154,  155,    1,  158,    3,  158,  158,    6,    7,
 /*   880 */     8,  158,   10,   11,   12,  158,   14,   15,   16,   17,
 /*   890 */    18,  158,   20,  158,   22,   23,   24,   25,   26,   27,
 /*   900 */    28,   29,   30,   31,   32,   33,  119,  158,  158,  158,
 /*   910 */   158,  158,  125,  158,  158,  128,  129,  130,  131,  132,
 /*   920 */   133,  134,  135,  136,  137,  138,  139,  140,  141,   57,
 /*   930 */   158,   44,   45,   46,   47,   48,   49,   50,   51,   52,
 /*   940 */    53,  158,   70,   71,   72,   73,   74,   75,   76,   77,
 /*   950 */    78,   79,   80,    1,   82,    3,  158,  158,    6,    7,
 /*   960 */     8,  158,   10,   11,   12,   13,   14,   15,   16,  158,
 /*   970 */    18,  158,   20,  158,   22,   23,   24,   25,   26,   27,
 /*   980 */    28,   29,   30,   31,   32,   33,  119,  158,  158,  158,
 /*   990 */   158,  158,  125,  158,  158,  128,  129,  130,  131,  132,
 /*  1000 */   133,  134,  135,  136,  137,  138,  139,  140,  158,   57,
 /*  1010 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  1020 */   158,  158,   70,   71,   72,   73,   74,   75,   76,   77,
 /*  1030 */    78,   79,   80,    1,   82,    3,  158,  158,    6,    7,
 /*  1040 */     8,  158,   10,   11,   12,   13,   14,   15,   16,  158,
 /*  1050 */    18,  158,   20,  158,   22,   23,   24,   25,   26,   27,
 /*  1060 */    28,   29,   30,   31,   32,   33,  119,  158,  158,  158,
 /*  1070 */   158,  158,  125,  158,  158,  128,  129,  130,  131,  132,
 /*  1080 */   133,  134,  135,  136,  137,  138,  139,  119,  158,   57,
 /*  1090 */   158,  158,  158,  125,  158,  158,  128,  129,  130,  131,
 /*  1100 */   132,  133,   70,   71,   72,   73,   74,   75,   76,   77,
 /*  1110 */    78,   79,   80,    1,   82,    3,  158,  158,    6,    7,
 /*  1120 */     8,  158,   10,   11,   12,   13,   14,   15,   16,  158,
 /*  1130 */    18,  158,   20,  158,   22,   23,   24,   25,   26,   27,
 /*  1140 */    28,   29,   30,   31,   32,   33,  119,  158,  158,  158,
 /*  1150 */   158,  158,  125,  158,  158,  128,  129,  130,  131,  132,
 /*  1160 */   133,  134,  135,  136,  137,  138,  119,  158,  158,   57,
 /*  1170 */   158,  158,  125,  158,  158,  128,  129,  130,  131,  132,
 /*  1180 */   133,  134,   70,   71,   72,   73,   74,   75,   76,   77,
 /*  1190 */    78,   79,   80,  158,   82,    0,    1,  158,    3,  158,
 /*  1200 */   158,    6,    7,    8,  158,   10,   11,   12,  158,   14,
 /*  1210 */    15,   16,  158,   18,  158,   20,  158,   22,   23,   24,
 /*  1220 */    25,   26,   27,   28,   29,   30,   31,   32,   33,  119,
 /*  1230 */   158,  158,  158,  158,  158,  125,  158,  158,  128,  129,
 /*  1240 */   130,  131,  132,  133,  134,  135,  136,  137,  119,  158,
 /*  1250 */   158,  158,   57,  158,  125,  158,  158,  128,  129,  130,
 /*  1260 */   131,  132,  133,  134,  135,   70,   71,   72,   73,   74,
 /*  1270 */    75,   76,   77,   78,   79,   80,    1,   82,    3,  158,
 /*  1280 */   158,    6,    7,    8,  158,   10,   11,   12,   13,   14,
 /*  1290 */    15,   16,  158,   18,  158,   20,  158,   22,   23,   24,
 /*  1300 */    25,   26,   27,   28,   29,   30,   31,   32,   33,  119,
 /*  1310 */   158,  158,  158,  158,  158,  125,  158,  158,  128,  129,
 /*  1320 */   130,  131,  132,  133,  134,  135,  136,  119,  158,  158,
 /*  1330 */   158,  158,   57,  125,  158,  158,  128,  129,  130,  131,
 /*  1340 */   132,  133,  134,  135,  158,   70,   71,   72,   73,   74,
 /*  1350 */    75,   76,   77,   78,   79,   80,    1,   82,    3,  158,
 /*  1360 */   158,    6,    7,    8,  158,   10,   11,   12,  158,  158,
 /*  1370 */    15,  158,  158,  158,  158,   20,  158,   22,   23,   24,
 /*  1380 */    25,   26,   27,   28,   29,   30,   31,   32,   33,  119,
 /*  1390 */   158,  158,  158,  158,  158,  125,  158,  158,  128,  129,
 /*  1400 */   130,  131,  132,  133,  134,  135,  158,  119,  158,  158,
 /*  1410 */   158,  158,   57,  125,  158,  158,  128,  129,  130,  131,
 /*  1420 */   132,  133,  134,  158,  158,   70,   71,   72,   73,   74,
 /*  1430 */    75,   76,   77,   78,   79,   80,    1,   82,    3,  158,
 /*  1440 */   158,    6,    7,    8,  158,   10,   11,   12,  158,  158,
 /*  1450 */    15,  158,  158,  158,  158,   20,  158,   22,   23,   24,
 /*  1460 */    25,   26,   27,   28,   29,   30,   31,   32,   33,    9,
 /*  1470 */   158,  119,  158,  158,  158,  158,  158,  125,  158,   19,
 /*  1480 */   128,  129,  130,  131,  132,  133,    6,    7,    8,  158,
 /*  1490 */   158,  158,   57,  158,  158,   15,  158,  158,  158,  158,
 /*  1500 */   158,   88,   22,   90,  158,   70,   71,   72,   73,   74,
 /*  1510 */    75,   76,   77,   78,   79,   80,  158,   82,   58,   59,
 /*  1520 */    60,   61,   62,   63,   64,   65,   66,   67,   68,   69,
 /*  1530 */   158,  158,  119,  158,   88,  158,   90,  124,  125,  126,
 /*  1540 */   127,  128,  129,  130,  131,  132,  133,  134,  135,  136,
 /*  1550 */   137,  138,  139,  140,  141,  142,  143,  144,  145,  146,
 /*  1560 */   147,  158,  158,  158,  151,  119,  158,  158,  158,  156,
 /*  1570 */   124,  125,  126,  127,  128,  129,  130,  131,  132,  133,
 /*  1580 */   134,  135,  136,  137,  138,  139,  140,  141,  142,  143,
 /*  1590 */   144,  145,  146,  147,   88,  158,   90,    6,    7,    8,
 /*  1600 */   158,  158,  158,  157,  158,  158,  158,  158,  158,  158,
 /*  1610 */   158,  158,  158,   22,   23,   24,   25,   26,   27,   28,
 /*  1620 */    29,   30,   31,   32,   33,  119,  158,   88,  158,   90,
 /*  1630 */   124,  125,  126,  127,  128,  129,  130,  131,  132,  133,
 /*  1640 */   134,  135,  136,  137,  138,  139,  140,  141,  142,  143,
 /*  1650 */   144,  145,  146,  147,  158,  158,  158,  151,  119,  158,
 /*  1660 */    88,  158,   90,  124,  125,  126,  127,  128,  129,  130,
 /*  1670 */   131,  132,  133,  134,  135,  136,  137,  138,  139,  140,
 /*  1680 */   141,  142,  143,  144,  145,  146,  147,  158,  158,  158,
 /*  1690 */   151,  119,  158,  158,  158,  158,  124,  125,  126,  127,
 /*  1700 */   128,  129,  130,  131,  132,  133,  134,  135,  136,  137,
 /*  1710 */   138,  139,  140,  141,  142,  143,  144,  145,  146,  147,
 /*  1720 */    88,  158,   90,  151,  158,  158,  158,  158,  158,  158,
 /*  1730 */   158,  158,  158,  119,  158,  158,  158,  158,  158,  125,
 /*  1740 */   158,  158,  128,  129,  130,  131,  132,  133,  158,  158,
 /*  1750 */   158,  119,  158,   88,  158,   90,  124,  125,  126,  127,
 /*  1760 */   128,  129,  130,  131,  132,  133,  134,  135,  136,  137,
 /*  1770 */   138,  139,  140,  141,  142,  143,  144,  145,  146,  147,
 /*  1780 */    88,  158,   90,  158,  119,  158,  158,  158,  158,  157,
 /*  1790 */   125,  158,  127,  128,  129,  130,  131,  132,  133,  134,
 /*  1800 */   135,  136,  137,  138,  139,  140,  141,  142,  143,  144,
 /*  1810 */   145,  119,  147,  158,  158,  158,  124,  125,  126,  127,
 /*  1820 */   128,  129,  130,  131,  132,  133,  134,  135,  136,  137,
 /*  1830 */   138,  139,  140,  141,  142,  143,  144,  145,  146,  147,
 /*  1840 */    88,  158,   90,  151,  158,  158,  158,  158,  158,  158,
 /*  1850 */   158,  158,  158,  119,  158,  158,  158,  158,  158,  125,
 /*  1860 */   158,  158,  128,  129,  130,  131,  132,  133,  158,  158,
 /*  1870 */   158,  119,  158,  158,  158,  158,  124,  125,  126,  127,
 /*  1880 */   128,  129,  130,  131,  132,  133,  134,  135,  136,  137,
 /*  1890 */   138,  139,  140,  141,  142,  143,  144,  145,  146,  147,
 /*  1900 */    88,  158,   90,  158,  119,  158,  158,  158,  158,  158,
 /*  1910 */   125,  158,  158,  128,  129,  130,  131,  132,  133,  134,
 /*  1920 */   135,  136,  137,  138,  139,  140,  141,  142,  143,  158,
 /*  1930 */    86,  119,   88,  158,   90,  158,  124,  125,  126,  127,
 /*  1940 */   128,  129,  130,  131,  132,  133,  134,  135,  136,  137,
 /*  1950 */   138,  139,  140,  141,  142,  143,  144,  145,  146,  147,
 /*  1960 */   158,  158,  158,  119,   87,  158,   89,  158,  124,  125,
 /*  1970 */   158,  127,  128,  129,  130,  131,  132,  133,  134,  135,
 /*  1980 */   136,  137,  138,  139,  140,  141,  142,  143,  144,  145,
 /*  1990 */   146,  147,  158,  158,  117,  158,  158,  120,  121,  122,
 /*  2000 */   123,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  2010 */   158,  158,  158,  158,  119,  158,  158,   86,  158,   88,
 /*  2020 */   125,   90,  158,  128,  129,  130,  131,  132,  133,  134,
 /*  2030 */   135,  136,  137,  138,  139,  140,  141,  142,  158,    9,
 /*  2040 */   158,  158,  158,  158,  158,   15,  158,  158,  158,   19,
 /*  2050 */   119,  158,  158,  158,  158,  124,  125,  158,  127,  128,
 /*  2060 */   129,  130,  131,  132,  133,  134,  135,  136,  137,  138,
 /*  2070 */   139,  140,  141,  142,  143,  144,  145,  146,  147,   88,
 /*  2080 */   158,   90,  158,  158,   93,   94,  158,  158,   58,   59,
 /*  2090 */    60,   61,   62,   63,   64,   65,   66,   67,   68,   69,
 /*  2100 */   158,  158,  158,  158,   86,  158,   88,  158,   90,  158,
 /*  2110 */   119,   81,  158,  158,  158,  158,  125,  158,  127,  128,
 /*  2120 */   129,  130,  131,  132,  133,  134,  135,  136,  137,  138,
 /*  2130 */   139,  140,  141,  142,  143,  144,  145,  119,  147,  158,
 /*  2140 */   158,  158,  124,  125,  158,  127,  128,  129,  130,  131,
 /*  2150 */   132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
 /*  2160 */   142,  143,  144,  145,  146,  147,   88,  158,   90,  158,
 /*  2170 */   158,  158,  158,   95,   96,  158,  158,  158,  158,  158,
 /*  2180 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  2190 */   158,   86,  158,   88,  158,   90,  158,  119,  158,  158,
 /*  2200 */   158,  158,  158,  125,  158,  127,  128,  129,  130,  131,
 /*  2210 */   132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
 /*  2220 */   142,  143,  144,  145,  119,  158,   88,  158,   90,  124,
 /*  2230 */   125,  158,  127,  128,  129,  130,  131,  132,  133,  134,
 /*  2240 */   135,  136,  137,  138,  139,  140,  141,  142,  143,  144,
 /*  2250 */   145,  146,  147,  158,  158,  158,  158,  119,  158,  158,
 /*  2260 */   158,  158,  124,  125,  126,  127,  128,  129,  130,  131,
 /*  2270 */   132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
 /*  2280 */   142,  143,  144,  145,  146,  147,   88,  158,   90,  158,
 /*  2290 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  2300 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  2310 */   158,  158,  158,   88,  158,   90,  158,  119,  158,  158,
 /*  2320 */   158,  158,  158,  125,  158,  127,  128,  129,  130,  131,
 /*  2330 */   132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
 /*  2340 */   142,  143,  144,  145,  119,  147,   88,  158,   90,  124,
 /*  2350 */   125,  126,  127,  128,  129,  130,  131,  132,  133,  134,
 /*  2360 */   135,  136,  137,  138,  139,  140,  141,  142,  143,  144,
 /*  2370 */   145,  146,  147,  158,  158,  158,  158,  119,  158,  158,
 /*  2380 */   158,  158,  124,  125,  158,  127,  128,  129,  130,  131,
 /*  2390 */   132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
 /*  2400 */   142,  143,  144,  145,  146,  147,   88,  158,   90,  158,
 /*  2410 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  2420 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  2430 */   158,  158,  158,   88,  158,   90,  158,  119,  158,  158,
 /*  2440 */   158,  158,  158,  125,  158,  127,  128,  129,  130,  131,
 /*  2450 */   132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
 /*  2460 */   142,  143,  144,  145,  119,  147,   88,  158,   90,  124,
 /*  2470 */   125,  158,  127,  128,  129,  130,  131,  132,  133,  134,
 /*  2480 */   135,  136,  137,  138,  139,  140,  141,  142,  143,  144,
 /*  2490 */   145,  146,  147,  158,  158,  158,  158,  119,  158,  158,
 /*  2500 */   158,  158,  124,  125,  158,  127,  128,  129,  130,  131,
 /*  2510 */   132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
 /*  2520 */   142,  143,  144,  145,  146,  147,   88,  158,   90,  158,
 /*  2530 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  2540 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  2550 */   158,  158,  158,   88,  158,   90,  158,  119,  158,  158,
 /*  2560 */   158,  158,  158,  125,  158,  127,  128,  129,  130,  131,
 /*  2570 */   132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
 /*  2580 */   142,  143,  144,  145,  119,  158,   88,  158,   90,  124,
 /*  2590 */   125,  158,  127,  128,  129,  130,  131,  132,  133,  134,
 /*  2600 */   135,  136,  137,  138,  139,  140,  141,  142,  143,  144,
 /*  2610 */   145,  146,  147,  158,   88,  158,   90,  119,  158,  158,
 /*  2620 */   158,  158,  158,  125,  158,  127,  128,  129,  130,  131,
 /*  2630 */   132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
 /*  2640 */   142,  143,  144,  145,  146,  119,   88,  158,   90,  158,
 /*  2650 */   158,  125,  158,  127,  128,  129,  130,  131,  132,  133,
 /*  2660 */   134,  135,  136,  137,  138,  139,  140,  141,  142,  143,
 /*  2670 */   144,  145,  158,   88,  158,   90,  158,  119,  158,  158,
 /*  2680 */   158,  158,  158,  125,  158,  127,  128,  129,  130,  131,
 /*  2690 */   132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
 /*  2700 */   142,  143,  144,  145,  119,   88,  158,   90,  158,  158,
 /*  2710 */   125,  158,  127,  128,  129,  130,  131,  132,  133,  134,
 /*  2720 */   135,  136,  137,  138,  139,  140,  141,  142,  143,  144,
 /*  2730 */   145,  158,   88,  158,   90,  158,  119,  158,  158,  158,
 /*  2740 */   158,  158,  125,  158,  127,  128,  129,  130,  131,  132,
 /*  2750 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*  2760 */   143,  144,  145,  119,   88,  158,   90,  158,  158,  125,
 /*  2770 */   158,  127,  128,  129,  130,  131,  132,  133,  134,  135,
 /*  2780 */   136,  137,  138,  139,  140,  141,  142,  143,  144,  145,
 /*  2790 */   158,   88,  158,   90,  158,  119,  158,  158,  158,  158,
 /*  2800 */   158,  125,  158,  127,  128,  129,  130,  131,  132,  133,
 /*  2810 */   134,  135,  136,  137,  138,  139,  140,  141,  142,  143,
 /*  2820 */   144,  145,  119,   88,  158,   90,  158,  158,  125,  158,
 /*  2830 */   127,  128,  129,  130,  131,  132,  133,  134,  135,  136,
 /*  2840 */   137,  138,  139,  140,  141,  142,  143,  144,  145,  158,
 /*  2850 */    88,  158,   90,  158,  119,  158,  158,  158,  158,  158,
 /*  2860 */   125,  158,  127,  128,  129,  130,  131,  132,  133,  134,
 /*  2870 */   135,  136,  137,  138,  139,  140,  141,  142,  143,  144,
 /*  2880 */   145,  119,   88,  158,   90,  158,  158,  125,  158,  127,
 /*  2890 */   128,  129,  130,  131,  132,  133,  134,  135,  136,  137,
 /*  2900 */   138,  139,  140,  141,  142,  143,  144,  145,  158,   88,
 /*  2910 */   158,   90,  158,  119,  158,  158,  158,  158,  158,  125,
 /*  2920 */   158,  127,  128,  129,  130,  131,  132,  133,  134,  135,
 /*  2930 */   136,  137,  138,  139,  140,  141,  142,  143,  144,  145,
 /*  2940 */   119,   88,  158,   90,  158,  158,  125,  158,  127,  128,
 /*  2950 */   129,  130,  131,  132,  133,  134,  135,  136,  137,  138,
 /*  2960 */   139,  140,  141,  142,  143,  144,  145,  158,   88,  158,
 /*  2970 */    90,  158,  119,  158,  158,  158,  158,  158,  125,  158,
 /*  2980 */   127,  128,  129,  130,  131,  132,  133,  134,  135,  136,
 /*  2990 */   137,  138,  139,  140,  141,  142,  143,  144,  145,  119,
 /*  3000 */    88,  158,   90,  158,  158,  125,  158,  127,  128,  129,
 /*  3010 */   130,  131,  132,  133,  134,  135,  136,  137,  138,  139,
 /*  3020 */   140,  141,  142,  143,  144,  145,  158,   88,  158,   90,
 /*  3030 */   158,  119,  158,  158,  158,  158,  158,  125,  158,  127,
 /*  3040 */   128,  129,  130,  131,  132,  133,  134,  135,  136,  137,
 /*  3050 */   138,  139,  140,  141,  142,  143,  144,  145,  119,   88,
 /*  3060 */   158,   90,  158,  158,  125,  158,  127,  128,  129,  130,
 /*  3070 */   131,  132,  133,  134,  135,  136,  137,  138,  139,  140,
 /*  3080 */   141,  142,  143,  144,  145,  158,  158,  158,  158,  158,
 /*  3090 */   119,  158,  158,  158,  158,  158,  125,  158,  127,  128,
 /*  3100 */   129,  130,  131,  132,  133,  134,  135,  136,  137,  138,
 /*  3110 */   139,  140,  141,  142,  143,  144,  145,    6,    7,    8,
 /*  3120 */   158,   10,   11,   12,  158,  158,   15,  158,  158,  158,
 /*  3130 */   158,   20,   21,   22,   23,   24,   25,   26,   27,   28,
 /*  3140 */    29,   30,   31,   32,   33,  158,  158,  158,  158,  158,
 /*  3150 */   158,  158,  158,  158,    9,  158,  158,  158,  158,  158,
 /*  3160 */   158,  158,  158,  158,   19,  158,  158,  158,   57,  158,
 /*  3170 */   158,  158,  158,  158,  158,    6,    7,    8,  158,   10,
 /*  3180 */    11,   12,  158,  158,   15,  158,  158,   18,  158,   20,
 /*  3190 */   158,   22,   23,   24,   25,   26,   27,   28,   29,   30,
 /*  3200 */    31,   32,   33,   58,   59,   60,   61,   62,   63,   64,
 /*  3210 */    65,   66,   67,   68,   69,  158,  158,  158,  158,  158,
 /*  3220 */   158,  158,  158,  158,  158,  158,   57,  158,  158,  158,
 /*  3230 */   158,  158,  158,    6,    7,    8,  158,   10,   11,   12,
 /*  3240 */   158,  158,   15,   16,  158,  158,  158,   20,  158,   22,
 /*  3250 */    23,   24,   25,   26,   27,   28,   29,   30,   31,   32,
 /*  3260 */    33,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  3270 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  3280 */   158,  158,  158,  158,   57,  158,  158,  158,  158,  158,
 /*  3290 */   158,    6,    7,    8,  158,   10,   11,   12,  158,  158,
 /*  3300 */    15,  158,  158,   18,  158,   20,  158,   22,   23,   24,
 /*  3310 */    25,   26,   27,   28,   29,   30,   31,   32,   33,  158,
 /*  3320 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  3330 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  3340 */   158,  158,   57,  158,  158,  158,  158,  158,  158,    6,
 /*  3350 */     7,    8,  158,   10,   11,   12,  158,  158,   15,   16,
 /*  3360 */   158,  158,  158,   20,  158,   22,   23,   24,   25,   26,
 /*  3370 */    27,   28,   29,   30,   31,   32,   33,  158,  158,  158,
 /*  3380 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  3390 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  3400 */    57,  158,  158,  158,  158,  158,  158,    6,    7,    8,
 /*  3410 */   158,   10,   11,   12,  158,  158,   15,  158,  158,  158,
 /*  3420 */   158,   20,  158,   22,   23,   24,   25,   26,   27,   28,
 /*  3430 */    29,   30,   31,   32,   33,  158,  158,  158,  158,  158,
 /*  3440 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  3450 */   158,  158,  158,  158,  158,  158,  158,  158,   57,  158,
 /*  3460 */   158,  158,  158,  158,  158,    6,    7,    8,  158,  158,
 /*  3470 */    11,   12,   13,  158,   15,  158,  158,  158,  158,   20,
 /*  3480 */   158,   22,   23,   24,   25,   26,   27,   28,   29,   30,
 /*  3490 */    31,   32,   33,  158,  158,  158,  158,  158,  158,  158,
 /*  3500 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  3510 */   158,  158,  158,  158,  158,  158,   57,  158,  158,  158,
 /*  3520 */   158,  158,  158,    6,    7,    8,  158,  158,   11,   12,
 /*  3530 */   158,  158,   15,  158,  158,  158,  158,   20,   21,   22,
 /*  3540 */    23,   24,   25,   26,   27,   28,   29,   30,   31,   32,
 /*  3550 */    33,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  3560 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  3570 */   158,  158,  158,  158,   57,  158,  158,  158,  158,  158,
 /*  3580 */   158,    6,    7,    8,  158,  158,   11,   12,  158,  158,
 /*  3590 */    15,  158,  158,   18,  158,   20,  158,   22,   23,   24,
 /*  3600 */    25,   26,   27,   28,   29,   30,   31,   32,   33,  158,
 /*  3610 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  3620 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  3630 */   158,  158,   57,  158,  158,  158,  158,  158,  158,    6,
 /*  3640 */     7,    8,  158,  158,   11,   12,  158,  158,   15,  158,
 /*  3650 */   158,  158,  158,   20,  158,   22,   23,   24,   25,   26,
 /*  3660 */    27,   28,   29,   30,   31,   32,   33,  158,  158,  158,
 /*  3670 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  3680 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  3690 */    57,
};
#define YY_SHIFT_USE_DFLT (-10)
#define YY_SHIFT_MAX 231
static const short yy_shift_ofst[] = {
 /*     0 */   -10, 1275,  872, 1032,  952, 1112, 1195, 1355, 1355, 1355,
 /*    10 */  1355, 1355, 1435, 1435, 1435, 1435, 1435, 1355, 1355, 3285,
 /*    20 */  3169, 3169, 3169, 3169, 3401, 3401, 3401, 3401, 3401, 3401,
 /*    30 */  3401, 3401, 3401, 3401, 3343, 3227, 3111, 3401, 3401, 3459,
 /*    40 */  3401, 3401, 3401, 3633, 3517, 3575, 3633, 3633, 3633, 3633,
 /*    50 */  3633, 3633, 3633, 3633, 3633, 3633, 3633, 3633, 3633, 3633,
 /*    60 */  3633, 3633, 1591, 1591, 1591, 1591, 1591, 1591, 1591, 1591,
 /*    70 */  1591, 1591, 1591, 1591, 1591, 1591, 1591, 1591, 1591, 1591,
 /*    80 */  1591, 1591, 1591, 1591, 1591,   79,   -9, 1480,  265,  265,
 /*    90 */   265,  265,   -2,   -2,   -2,   -2,   35,  331,  161,  161,
 /*   100 */   161,  161,  161, 2030, 1460, 3145,  887,  887,  362,  356,
 /*   110 */   680,  161,  161,  -10,  -10,  -10,  -10,  -10,  -10,  -10,
 /*   120 */    -7,  212,   -7,  148,   -7,  217,  218,  283,   15,  195,
 /*   130 */   195,  346,  215,  280,  307,  351,  307,  109,  385,  307,
 /*   140 */   307,  348,  339,  235,   69,   17,  241,  250,  267,  278,
 /*   150 */   302,  332,  324,  368,  381,  363,  364,  363,  378,  364,
 /*   160 */   376,  378,  376,  352,  367,  352,  367,  408,  403,  413,
 /*   170 */   414,  418,  412,  424,  415,  420,  332,  421,  426,  438,
 /*   180 */   429,  404,  461,  470,  482,  478,  475,  483,  479,  481,
 /*   190 */   486,  489,  484,  488,  487,  492,  506,  430,  496,  519,
 /*   200 */   539,  549,  541,  544,  546,  547,  550,  551,  552,  555,
 /*   210 */   574,  587,  606,  607,  610,  612,  614,  565,  616,  617,
 /*   220 */   618,  620,  622,  554,  548,  556,  562,  619,  580,  623,
 /*   230 */   512,  611,
};
#define YY_REDUCE_USE_DFLT (-108)
#define YY_REDUCE_MAX 119
static const short yy_reduce_ofst[] = {
 /*     0 */   287,  -87,  -87,  -87,  -87,  -87,  -87,  377,  445,  513,
 /*    10 */   649,  717,  -21,   45,  111,  177,  243,  309,  581, 1413,
 /*    20 */  1692, 1539, 1506, 1572, 1632, 1446, 1931, 1844, 2018, 1812,
 /*    30 */  1752, 2225, 2138, 2105, 2465, 2258, 1991, 2378, 2345, 2078,
 /*    40 */  2318, 2198, 1665, 2498, 2821, 2880, 2912, 2939, 2971, 2438,
 /*    50 */  2526, 2558, 2585, 2617, 2644, 2676, 2853, 2794, 2735, 2821,
 /*    60 */  2762, 2703, 1785, 1895,  787,  867,  947, 1027, 1110, 1190,
 /*    70 */  1129, 1208, 1270, 1288, 1047,  968,  681,  613,  545,  477,
 /*    80 */   409, 1352, 1734, 1614,  341, 1877, 1877,  -29,   77,   11,
 /*    90 */   -55,   37,  184,  219,  -13,   76,   -5,  248,  213,   88,
 /*   100 */   186,   10,   87,  117,  117,   71,   52,   52,  -66,  553,
 /*   110 */   567,  553,  575,  526,  573,  558,  582, -107,  -77,  -11,
};
static const YYACTIONTYPE yy_default[] = {
 /*     0 */   560,  621,  621,  621,  621,  621,  621,  621,  621,  621,
 /*    10 */   621,  621,  621,  621,  621,  621,  621,  621,  621,  603,
 /*    20 */   621,  621,  621,  621,  605,  605,  523,  523,  523,  621,
 /*    30 */   621,  621,  621,  523,  621,  621,  621,  621,  621,  621,
 /*    40 */   621,  621,  545,  621,  621,  621,  621,  621,  621,  621,
 /*    50 */   621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
 /*    60 */   621,  550,  621,  621,  621,  621,  621,  621,  621,  621,
 /*    70 */   621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
 /*    80 */   621,  621,  621,  621,  621,  621,  621,  506,  621,  621,
 /*    90 */   621,  621,  405,  405,  405,  405,  608,  621,  621,  621,
 /*   100 */   621,  621,  621,  521,  521,  554,  495,  494,  621,  621,
 /*   110 */   621,  621,  621,  560,  414,  560,  560,  414,  560,  560,
 /*   120 */   469,  621,  467,  443,  468,  621,  442,  412,  621,  475,
 /*   130 */   474,  412,  443,  621,  471,  621,  472,  455,  621,  470,
 /*   140 */   473,  621,  621,  500,  621,  424,  621,  621,  621,  621,
 /*   150 */   621,  621,  621,  621,  621,  476,  478,  477,  480,  479,
 /*   160 */   482,  481,  483,  496,  498,  497,  499,  621,  621,  621,
 /*   170 */   621,  406,  621,  424,  621,  621,  620,  506,  621,  621,
 /*   180 */   508,  621,  621,  621,  509,  621,  621,  549,  621,  621,
 /*   190 */   621,  521,  621,  621,  621,  621,  621,  621,  621,  621,
 /*   200 */   621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
 /*   210 */   621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
 /*   220 */   621,  621,  621,  441,  621,  544,  542,  621,  621,  437,
 /*   230 */   621,  425,  566,  568,  618,  572,  432,  423,  558,  425,
 /*   240 */   407,  408,  433,  559,  431,  404,  573,  403,  574,  422,
 /*   250 */   420,  617,  419,  571,  418,  417,  575,  619,  416,  430,
 /*   260 */   415,  440,  501,  569,  613,  576,  493,  504,  434,  577,
 /*   270 */   492,  570,  578,  491,  579,  519,  490,  429,  489,  580,
 /*   280 */   581,  488,  487,  486,  582,  485,  409,  583,  411,  584,
 /*   290 */   445,  585,  524,  586,  484,  587,  518,  588,  466,  589,
 /*   300 */   465,  590,  464,  502,  591,  592,  593,  594,  595,  463,
 /*   310 */   596,  597,  421,  462,  461,  460,  503,  598,  459,  540,
 /*   320 */   599,  458,  457,  456,  444,  600,  454,  428,  601,  541,
 /*   330 */   453,  546,  452,  402,  602,  606,  604,  607,  451,  450,
 /*   340 */   609,  449,  448,  610,  447,  611,  446,  612,  614,  543,
 /*   350 */   439,  438,  413,  615,  530,  531,  532,  533,  534,  535,
 /*   360 */   536,  537,  538,  539,  529,  512,  528,  513,  436,  514,
 /*   370 */   435,  527,  547,  410,  551,  616,  517,  548,  552,  555,
 /*   380 */   511,  515,  510,  507,  516,  522,  505,  520,  525,  526,
 /*   390 */   557,  553,  556,  561,  562,  563,  564,  565,  427,  426,
 /*   400 */   567,
};
#define YY_SZ_ACTTAB (int)(sizeof(yy_action)/sizeof(yy_action[0]))

/* The next table maps tokens into fallback tokens.  If a construct
** like the following:
** 
**      %fallback ID X Y Z.
**
** appears in the grammar, then ID becomes a fallback token for X, Y,
** and Z.  Whenever one of the tokens X, Y, or Z is input to the parser
** but it does not parse, the type of the token is changed to ID and
** the parse is retried before an error is thrown.
*/
#ifdef YYFALLBACK
static const YYCODETYPE yyFallback[] = {
};
#endif /* YYFALLBACK */

/* The following structure represents a single element of the
** parser's stack.  Information stored includes:
**
**   +  The state number for the parser at this level of the stack.
**
**   +  The value of the token stored at this level of the stack.
**      (In other words, the "major" token.)
**
**   +  The semantic value stored at this level of the stack.  This is
**      the information used by the action routines in the grammar.
**      It is sometimes called the "minor" token.
*/
struct yyStackEntry {
  YYACTIONTYPE stateno;  /* The state-number */
  YYCODETYPE major;      /* The major token value.  This is the code
                         ** number for the token at this stack level */
  YYMINORTYPE minor;     /* The user-supplied minor token value.  This
                         ** is the value of the token  */
};
typedef struct yyStackEntry yyStackEntry;

/* The state of the parser is completely contained in an instance of
** the following structure */
struct yyParser {
  int yyidx;                    /* Index of top element in stack */
#ifdef YYTRACKMAXSTACKDEPTH
  int yyidxMax;                 /* Maximum value of yyidx */
#endif
  int yyerrcnt;                 /* Shifts left before out of the error */
  XecParseARG_SDECL                /* A place to hold %extra_argument */
#if YYSTACKDEPTH<=0
  int yystksz;                  /* Current side of the stack */
  yyStackEntry *yystack;        /* The parser's stack */
#else
  yyStackEntry yystack[YYSTACKDEPTH];  /* The parser's stack */
#endif
};
typedef struct yyParser yyParser;

#ifndef NDEBUG
#include <stdio.h>
static FILE *yyTraceFILE = 0;
static char *yyTracePrompt = 0;
#endif /* NDEBUG */

#ifndef NDEBUG
/* 
** Turn parser tracing on by giving a stream to which to write the trace
** and a prompt to preface each trace message.  Tracing is turned off
** by making either argument NULL 
**
** Inputs:
** <ul>
** <li> A FILE* to which trace output should be written.
**      If NULL, then tracing is turned off.
** <li> A prefix string written at the beginning of every
**      line of trace output.  If NULL, then tracing is
**      turned off.
** </ul>
**
** Outputs:
** None.
*/
void XecParseTrace(FILE *TraceFILE, char *zTracePrompt){
  yyTraceFILE = TraceFILE;
  yyTracePrompt = zTracePrompt;
  if( yyTraceFILE==0 ) yyTracePrompt = 0;
  else if( yyTracePrompt==0 ) yyTraceFILE = 0;
}
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing shifts, the names of all terminals and nonterminals
** are required.  The following table supplies these names */
static const char *const yyTokenName[] = { 
  "$",             "IF",            "ELSE",          "TRY",         
  "CATCH",         "FINALLY",       "YIELD",         "LPN",         
  "IDENTIFIER",    "COMMA",         "ELLIPSIS",      "PERIOD",      
  "LBR",           "RBR",           "DEF",           "COLON",       
  "SEMICOLON",     "RPN",           "VAR",           "ASSIGN",      
  "LSQ",           "RSQ",           "NEW",           "NULL",        
  "TRUE",          "FALSE",         "NUMBER",        "STRING",      
  "INCREMENT",     "DECREMENT",     "PLUS",          "MINUS",       
  "XMARK",         "TILDE",         "ASTERISK",      "SOLIDUS",     
  "PERCENT",       "LSHIFT",        "LRSHIFT",       "ARSHIFT",     
  "AMPERSAND",     "CARET",         "VBAR",          "CONCATENATE", 
  "EQUAL",         "NOTEQUAL",      "LESS",          "GREATER",     
  "LESSEQUAL",     "GREATEREQUAL",  "IN",            "NOTIN",       
  "IS",            "NOTIS",         "LOGICAND",      "LOGICXOR",    
  "LOGICOR",       "QMARK",         "MULASSIGN",     "DIVASSIGN",   
  "MODASSIGN",     "INTDIVASSIGN",  "ADDASSIGN",     "SUBASSIGN",   
  "LSHIFTASSIGN",  "LRSHIFTASSIGN",  "ARSHIFTASSIGN",  "BITANDASSIGN",
  "BITXORASSIGN",  "BITORASSIGN",   "WHILE",         "DELETE",      
  "CASE",          "DEFAULT",       "CONTINUE",      "BREAK",       
  "RETURN",        "THROW",         "SWITCH",        "DO",          
  "FOR",           "EACHKEY",       "USING",         "error",       
  "name",          "param_list",    "arg_list",      "object_scope",
  "newobj_scope",  "func_scope",    "newf_scope",    "compare_op",  
  "assign_op",     "value_lbody",   "value_list",    "keyval_lbody",
  "keyval_list",   "stmt_block",    "stmt_reblock",  "stmt_if",     
  "stmt_switch",   "stmt_while",    "stmt_do",       "stmt_doblock",
  "scope_for",     "stmt_foreach",  "stmt_for",      "stmt_using",  
  "try_block",     "try_catch",     "scope_catch",   "stmt_catch",  
  "token_yield",   "script",        "stmt_list",     "name_list",   
  "qual_name",     "decl_object",   "object_decls",  "expr_simple", 
  "object_decl",   "decl_proto",    "decl_func",     "decl_var",    
  "expr_list",     "expr_index",    "expr_assign",   "expr_value",  
  "expr_yield",    "expr_new",      "expr_postfix",  "expr_literal",
  "expr_suffix",   "expr_unary",    "expr_mul",      "expr_add",    
  "expr_shift",    "expr_bitand",   "expr_bitxor",   "expr_bitor",  
  "expr_concat",   "expr_compare",  "expr_and",      "expr_xor",    
  "expr_or",       "expr_nolbr",    "expr_lbody",    "expr_final",  
  "sexpr_lbody",   "sexpr_list",    "sexpr_assign",  "condition",   
  "stmt",          "stmt_common",   "stmt_reuse",    "stmt_try",    
  "for_cond",      "for_expr",    
};
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing reduce actions, the names of all rules are required.
*/
static const char *const yyRuleName[] = {
 /*   0 */ "script ::= stmt_list",
 /*   1 */ "name ::= IDENTIFIER",
 /*   2 */ "name_list ::= name",
 /*   3 */ "name_list ::= name_list COMMA name",
 /*   4 */ "param_list ::=",
 /*   5 */ "param_list ::= name_list",
 /*   6 */ "param_list ::= ELLIPSIS",
 /*   7 */ "param_list ::= name_list COMMA ELLIPSIS",
 /*   8 */ "qual_name ::= name",
 /*   9 */ "qual_name ::= qual_name PERIOD IDENTIFIER",
 /*  10 */ "decl_object ::= object_scope LBR object_decls RBR",
 /*  11 */ "object_scope ::= DEF qual_name",
 /*  12 */ "object_scope ::= DEF qual_name COLON expr_simple",
 /*  13 */ "object_decls ::=",
 /*  14 */ "object_decls ::= object_decls object_decl",
 /*  15 */ "object_decl ::= SEMICOLON",
 /*  16 */ "object_decl ::= decl_object",
 /*  17 */ "object_decl ::= decl_proto",
 /*  18 */ "object_decl ::= decl_func",
 /*  19 */ "object_decl ::= decl_var",
 /*  20 */ "decl_proto ::= DEF qual_name LPN param_list RPN SEMICOLON",
 /*  21 */ "decl_proto ::= DEF qual_name LPN param_list RPN YIELD SEMICOLON",
 /*  22 */ "decl_func ::= func_scope LBR stmt_list RBR",
 /*  23 */ "func_scope ::= DEF qual_name LPN param_list RPN",
 /*  24 */ "func_scope ::= DEF qual_name LPN param_list RPN YIELD",
 /*  25 */ "decl_var ::= VAR name_list SEMICOLON",
 /*  26 */ "decl_var ::= VAR name_list ASSIGN expr_list SEMICOLON",
 /*  27 */ "expr_index ::= LPN expr_assign RPN",
 /*  28 */ "expr_index ::= IDENTIFIER",
 /*  29 */ "expr_index ::= expr_index PERIOD IDENTIFIER",
 /*  30 */ "expr_index ::= expr_index PERIOD LSQ expr_value RSQ",
 /*  31 */ "expr_index ::= expr_index LSQ expr_value RSQ",
 /*  32 */ "expr_yield ::= YIELD LPN arg_list RPN",
 /*  33 */ "expr_new ::= NEW expr_index LPN arg_list RPN",
 /*  34 */ "expr_postfix ::= expr_yield",
 /*  35 */ "expr_postfix ::= expr_new",
 /*  36 */ "expr_postfix ::= expr_index LPN arg_list RPN",
 /*  37 */ "expr_postfix ::= expr_postfix PERIOD IDENTIFIER",
 /*  38 */ "expr_postfix ::= expr_postfix PERIOD LSQ expr_value RSQ",
 /*  39 */ "expr_postfix ::= expr_postfix LSQ expr_value RSQ",
 /*  40 */ "expr_postfix ::= expr_postfix LPN arg_list RPN",
 /*  41 */ "expr_simple ::= expr_index",
 /*  42 */ "expr_simple ::= expr_postfix",
 /*  43 */ "expr_simple ::= expr_index LPN arg_list RPN YIELD",
 /*  44 */ "expr_simple ::= expr_postfix LPN arg_list RPN YIELD",
 /*  45 */ "expr_literal ::= expr_simple",
 /*  46 */ "expr_literal ::= NULL",
 /*  47 */ "expr_literal ::= TRUE",
 /*  48 */ "expr_literal ::= FALSE",
 /*  49 */ "expr_literal ::= NUMBER",
 /*  50 */ "expr_literal ::= STRING",
 /*  51 */ "expr_suffix ::= expr_literal",
 /*  52 */ "expr_suffix ::= expr_suffix INCREMENT",
 /*  53 */ "expr_suffix ::= expr_suffix DECREMENT",
 /*  54 */ "expr_unary ::= expr_suffix",
 /*  55 */ "expr_unary ::= PLUS expr_unary",
 /*  56 */ "expr_unary ::= MINUS expr_unary",
 /*  57 */ "expr_unary ::= XMARK expr_unary",
 /*  58 */ "expr_unary ::= TILDE expr_unary",
 /*  59 */ "expr_unary ::= INCREMENT expr_unary",
 /*  60 */ "expr_unary ::= DECREMENT expr_unary",
 /*  61 */ "expr_mul ::= expr_unary",
 /*  62 */ "expr_mul ::= expr_mul ASTERISK expr_unary",
 /*  63 */ "expr_mul ::= expr_mul SOLIDUS expr_unary",
 /*  64 */ "expr_mul ::= expr_mul PERCENT expr_unary",
 /*  65 */ "expr_mul ::= expr_mul TILDE expr_unary",
 /*  66 */ "expr_add ::= expr_mul",
 /*  67 */ "expr_add ::= expr_add PLUS expr_mul",
 /*  68 */ "expr_add ::= expr_add MINUS expr_mul",
 /*  69 */ "expr_shift ::= expr_add",
 /*  70 */ "expr_shift ::= expr_shift LSHIFT expr_add",
 /*  71 */ "expr_shift ::= expr_shift LRSHIFT expr_add",
 /*  72 */ "expr_shift ::= expr_shift ARSHIFT expr_add",
 /*  73 */ "expr_bitand ::= expr_shift",
 /*  74 */ "expr_bitand ::= expr_bitand AMPERSAND expr_shift",
 /*  75 */ "expr_bitxor ::= expr_bitand",
 /*  76 */ "expr_bitxor ::= expr_bitxor CARET expr_bitand",
 /*  77 */ "expr_bitor ::= expr_bitxor",
 /*  78 */ "expr_bitor ::= expr_bitor VBAR expr_bitxor",
 /*  79 */ "expr_concat ::= expr_bitor",
 /*  80 */ "expr_concat ::= expr_concat CONCATENATE expr_bitor",
 /*  81 */ "expr_compare ::= expr_concat",
 /*  82 */ "expr_compare ::= expr_compare compare_op expr_concat",
 /*  83 */ "compare_op ::= EQUAL",
 /*  84 */ "compare_op ::= NOTEQUAL",
 /*  85 */ "compare_op ::= LESS",
 /*  86 */ "compare_op ::= GREATER",
 /*  87 */ "compare_op ::= LESSEQUAL",
 /*  88 */ "compare_op ::= GREATEREQUAL",
 /*  89 */ "compare_op ::= IN",
 /*  90 */ "compare_op ::= NOTIN",
 /*  91 */ "compare_op ::= IS",
 /*  92 */ "compare_op ::= NOTIS",
 /*  93 */ "expr_and ::= expr_compare",
 /*  94 */ "expr_and ::= expr_and LOGICAND expr_compare",
 /*  95 */ "expr_xor ::= expr_and",
 /*  96 */ "expr_xor ::= expr_xor LOGICXOR expr_and",
 /*  97 */ "expr_or ::= expr_xor",
 /*  98 */ "expr_or ::= expr_or LOGICOR expr_xor",
 /*  99 */ "expr_nolbr ::= expr_or",
 /* 100 */ "expr_nolbr ::= expr_or QMARK expr_value COLON expr_value",
 /* 101 */ "expr_nolbr ::= LSQ RSQ",
 /* 102 */ "expr_nolbr ::= LSQ value_list RSQ",
 /* 103 */ "expr_nolbr ::= newobj_scope LBR object_decls RBR",
 /* 104 */ "expr_nolbr ::= newf_scope LBR stmt_list RBR",
 /* 105 */ "newobj_scope ::= COLON",
 /* 106 */ "newobj_scope ::= COLON COLON expr_simple",
 /* 107 */ "newf_scope ::= QMARK LPN param_list RPN",
 /* 108 */ "newf_scope ::= PERIOD QMARK LPN param_list RPN",
 /* 109 */ "newf_scope ::= QMARK LPN param_list RPN YIELD",
 /* 110 */ "newf_scope ::= PERIOD QMARK LPN param_list RPN YIELD",
 /* 111 */ "expr_value ::= expr_nolbr",
 /* 112 */ "expr_value ::= LBR RBR",
 /* 113 */ "expr_value ::= LBR keyval_list RBR",
 /* 114 */ "expr_lbody ::= expr_value",
 /* 115 */ "expr_lbody ::= expr_lbody COMMA expr_value",
 /* 116 */ "expr_final ::= ELLIPSIS",
 /* 117 */ "expr_final ::= expr_postfix ELLIPSIS",
 /* 118 */ "expr_final ::= expr_postfix LSQ RSQ ELLIPSIS",
 /* 119 */ "expr_list ::= expr_final",
 /* 120 */ "expr_list ::= expr_lbody",
 /* 121 */ "expr_list ::= expr_lbody COMMA expr_final",
 /* 122 */ "arg_list ::=",
 /* 123 */ "arg_list ::= expr_list",
 /* 124 */ "expr_assign ::= expr_list",
 /* 125 */ "expr_assign ::= expr_lbody assign_op expr_assign",
 /* 126 */ "assign_op ::= ASSIGN",
 /* 127 */ "assign_op ::= MULASSIGN",
 /* 128 */ "assign_op ::= DIVASSIGN",
 /* 129 */ "assign_op ::= MODASSIGN",
 /* 130 */ "assign_op ::= INTDIVASSIGN",
 /* 131 */ "assign_op ::= ADDASSIGN",
 /* 132 */ "assign_op ::= SUBASSIGN",
 /* 133 */ "assign_op ::= LSHIFTASSIGN",
 /* 134 */ "assign_op ::= LRSHIFTASSIGN",
 /* 135 */ "assign_op ::= ARSHIFTASSIGN",
 /* 136 */ "assign_op ::= BITANDASSIGN",
 /* 137 */ "assign_op ::= BITXORASSIGN",
 /* 138 */ "assign_op ::= BITORASSIGN",
 /* 139 */ "value_lbody ::= expr_value",
 /* 140 */ "value_lbody ::= value_lbody COMMA expr_value",
 /* 141 */ "value_list ::= expr_final",
 /* 142 */ "value_list ::= expr_final COMMA",
 /* 143 */ "value_list ::= value_lbody",
 /* 144 */ "value_list ::= value_lbody COMMA",
 /* 145 */ "value_list ::= value_lbody COMMA expr_final",
 /* 146 */ "keyval_lbody ::= expr_value COLON expr_value",
 /* 147 */ "keyval_lbody ::= keyval_lbody COMMA expr_value COLON expr_value",
 /* 148 */ "keyval_list ::= keyval_lbody",
 /* 149 */ "keyval_list ::= keyval_lbody COMMA",
 /* 150 */ "sexpr_lbody ::= expr_nolbr",
 /* 151 */ "sexpr_lbody ::= sexpr_lbody COMMA expr_value",
 /* 152 */ "sexpr_list ::= expr_final",
 /* 153 */ "sexpr_list ::= sexpr_lbody",
 /* 154 */ "sexpr_list ::= sexpr_lbody COMMA expr_final",
 /* 155 */ "sexpr_assign ::= sexpr_list",
 /* 156 */ "sexpr_assign ::= sexpr_lbody assign_op expr_assign",
 /* 157 */ "condition ::= expr_assign",
 /* 158 */ "condition ::= VAR name_list ASSIGN expr_list",
 /* 159 */ "stmt_list ::=",
 /* 160 */ "stmt_list ::= stmt_list SEMICOLON",
 /* 161 */ "stmt_list ::= stmt_list stmt",
 /* 162 */ "stmt_list ::= stmt_list decl_object",
 /* 163 */ "stmt_list ::= stmt_list decl_func",
 /* 164 */ "stmt_list ::= stmt_list decl_var",
 /* 165 */ "stmt ::= stmt_block stmt_list RBR",
 /* 166 */ "stmt ::= stmt_common",
 /* 167 */ "stmt_block ::= LBR",
 /* 168 */ "stmt_reuse ::= stmt_reblock stmt_list RBR",
 /* 169 */ "stmt_reuse ::= stmt_common",
 /* 170 */ "stmt_reblock ::= LBR",
 /* 171 */ "stmt_common ::= sexpr_assign SEMICOLON",
 /* 172 */ "stmt_common ::= stmt_if LPN condition RPN stmt",
 /* 173 */ "stmt_common ::= stmt_if LPN condition RPN stmt ELSE stmt",
 /* 174 */ "stmt_common ::= stmt_switch LPN condition RPN stmt_reblock stmt_list RPN",
 /* 175 */ "stmt_common ::= stmt_while LPN condition RPN stmt_reuse",
 /* 176 */ "stmt_common ::= stmt_doblock WHILE LPN expr_assign RPN SEMICOLON",
 /* 177 */ "stmt_common ::= stmt_foreach stmt_reuse",
 /* 178 */ "stmt_common ::= stmt_for stmt_reuse",
 /* 179 */ "stmt_common ::= stmt_using LPN condition RPN stmt_reuse",
 /* 180 */ "stmt_common ::= stmt_try",
 /* 181 */ "stmt_common ::= DELETE expr_lbody SEMICOLON",
 /* 182 */ "stmt_common ::= CASE expr_value COLON",
 /* 183 */ "stmt_common ::= DEFAULT COLON",
 /* 184 */ "stmt_common ::= CONTINUE SEMICOLON",
 /* 185 */ "stmt_common ::= BREAK SEMICOLON",
 /* 186 */ "stmt_common ::= RETURN SEMICOLON",
 /* 187 */ "stmt_common ::= RETURN expr_list SEMICOLON",
 /* 188 */ "stmt_common ::= token_yield SEMICOLON",
 /* 189 */ "stmt_common ::= token_yield expr_list SEMICOLON",
 /* 190 */ "stmt_common ::= THROW expr_value SEMICOLON",
 /* 191 */ "stmt_if ::= IF",
 /* 192 */ "stmt_switch ::= SWITCH",
 /* 193 */ "stmt_while ::= WHILE",
 /* 194 */ "stmt_do ::= DO",
 /* 195 */ "stmt_doblock ::= stmt_do stmt_reuse",
 /* 196 */ "scope_for ::= FOR",
 /* 197 */ "stmt_foreach ::= scope_for LPN expr_lbody COLON expr_value RPN",
 /* 198 */ "stmt_foreach ::= scope_for LPN expr_lbody EACHKEY expr_value RPN",
 /* 199 */ "stmt_foreach ::= scope_for LPN VAR name_list COLON expr_value RPN",
 /* 200 */ "stmt_foreach ::= scope_for LPN VAR name_list EACHKEY expr_value RPN",
 /* 201 */ "stmt_for ::= scope_for LPN for_cond SEMICOLON for_expr SEMICOLON for_expr RPN",
 /* 202 */ "for_cond ::=",
 /* 203 */ "for_cond ::= condition",
 /* 204 */ "for_expr ::=",
 /* 205 */ "for_expr ::= expr_assign",
 /* 206 */ "stmt_using ::= USING",
 /* 207 */ "stmt_try ::= try_catch",
 /* 208 */ "stmt_try ::= try_catch FINALLY stmt",
 /* 209 */ "stmt_try ::= try_block FINALLY stmt",
 /* 210 */ "try_block ::= TRY stmt",
 /* 211 */ "try_catch ::= try_block stmt_catch stmt_reuse",
 /* 212 */ "try_catch ::= try_catch stmt_catch stmt_reuse",
 /* 213 */ "scope_catch ::= CATCH",
 /* 214 */ "stmt_catch ::= scope_catch LPN COLON expr_simple RPN",
 /* 215 */ "stmt_catch ::= scope_catch LPN expr_value COLON expr_simple RPN",
 /* 216 */ "stmt_catch ::= scope_catch LPN VAR name COLON expr_simple RPN",
 /* 217 */ "stmt_catch ::= scope_catch LPN expr_value RPN",
 /* 218 */ "stmt_catch ::= scope_catch LPN VAR name RPN",
 /* 219 */ "token_yield ::= YIELD",
};
#endif /* NDEBUG */


#if YYSTACKDEPTH<=0
/*
** Try to increase the size of the parser stack.
*/
static void yyGrowStack(yyParser *p){
  int newSize;
  yyStackEntry *pNew;

  newSize = p->yystksz*2 + 100;
  pNew = realloc(p->yystack, newSize*sizeof(pNew[0]));
  if( pNew ){
    p->yystack = pNew;
    p->yystksz = newSize;
#ifndef NDEBUG
    if( yyTraceFILE ){
      fprintf(yyTraceFILE,"%sStack grows to %d entries!\n",
              yyTracePrompt, p->yystksz);
    }
#endif
  }
}
#endif

/* 
** This function allocates a new parser.
** The only argument is a pointer to a function which works like
** malloc.
**
** Inputs:
** A pointer to the function used to allocate memory.
**
** Outputs:
** A pointer to a parser.  This pointer is used in subsequent calls
** to XecParse and XecParseFree.
*/
void *XecParseAlloc(void *(*mallocProc)(size_t)){
  yyParser *pParser;
  pParser = (yyParser*)(*mallocProc)( (size_t)sizeof(yyParser) );
  if( pParser ){
    pParser->yyidx = -1;
#ifdef YYTRACKMAXSTACKDEPTH
    pParser->yyidxMax = 0;
#endif
#if YYSTACKDEPTH<=0
    pParser->yystack = NULL;
    pParser->yystksz = 0;
    yyGrowStack(pParser);
#endif
  }
  return pParser;
}

/* The following function deletes the value associated with a
** symbol.  The symbol can be either a terminal or nonterminal.
** "yymajor" is the symbol code, and "yypminor" is a pointer to
** the value.
*/
static void yy_destructor(
  yyParser *yypParser,    /* The parser */
  YYCODETYPE yymajor,     /* Type code for object to destroy */
  YYMINORTYPE *yypminor   /* The object to be destroyed */
){
  XecParseARG_FETCH;
  switch( yymajor ){
    /* Here is inserted the actions which take place when a
    ** terminal or non-terminal is destroyed.  This can happen
    ** when the symbol is popped from the stack during a
    ** reduce or during error processing or when a parser is 
    ** being destroyed before it is finished parsing.
    **
    ** Note: during a reduce, the only symbols destroyed are those
    ** which appear on the RHS of the rule, but which are not used
    ** inside the C code.
    */
      /* TERMINAL Destructor */
    case 1: /* IF */
    case 2: /* ELSE */
    case 3: /* TRY */
    case 4: /* CATCH */
    case 5: /* FINALLY */
    case 6: /* YIELD */
    case 7: /* LPN */
    case 8: /* IDENTIFIER */
    case 9: /* COMMA */
    case 10: /* ELLIPSIS */
    case 11: /* PERIOD */
    case 12: /* LBR */
    case 13: /* RBR */
    case 14: /* DEF */
    case 15: /* COLON */
    case 16: /* SEMICOLON */
    case 17: /* RPN */
    case 18: /* VAR */
    case 19: /* ASSIGN */
    case 20: /* LSQ */
    case 21: /* RSQ */
    case 22: /* NEW */
    case 23: /* NULL */
    case 24: /* TRUE */
    case 25: /* FALSE */
    case 26: /* NUMBER */
    case 27: /* STRING */
    case 28: /* INCREMENT */
    case 29: /* DECREMENT */
    case 30: /* PLUS */
    case 31: /* MINUS */
    case 32: /* XMARK */
    case 33: /* TILDE */
    case 34: /* ASTERISK */
    case 35: /* SOLIDUS */
    case 36: /* PERCENT */
    case 37: /* LSHIFT */
    case 38: /* LRSHIFT */
    case 39: /* ARSHIFT */
    case 40: /* AMPERSAND */
    case 41: /* CARET */
    case 42: /* VBAR */
    case 43: /* CONCATENATE */
    case 44: /* EQUAL */
    case 45: /* NOTEQUAL */
    case 46: /* LESS */
    case 47: /* GREATER */
    case 48: /* LESSEQUAL */
    case 49: /* GREATEREQUAL */
    case 50: /* IN */
    case 51: /* NOTIN */
    case 52: /* IS */
    case 53: /* NOTIS */
    case 54: /* LOGICAND */
    case 55: /* LOGICXOR */
    case 56: /* LOGICOR */
    case 57: /* QMARK */
    case 58: /* MULASSIGN */
    case 59: /* DIVASSIGN */
    case 60: /* MODASSIGN */
    case 61: /* INTDIVASSIGN */
    case 62: /* ADDASSIGN */
    case 63: /* SUBASSIGN */
    case 64: /* LSHIFTASSIGN */
    case 65: /* LRSHIFTASSIGN */
    case 66: /* ARSHIFTASSIGN */
    case 67: /* BITANDASSIGN */
    case 68: /* BITXORASSIGN */
    case 69: /* BITORASSIGN */
    case 70: /* WHILE */
    case 71: /* DELETE */
    case 72: /* CASE */
    case 73: /* DEFAULT */
    case 74: /* CONTINUE */
    case 75: /* BREAK */
    case 76: /* RETURN */
    case 77: /* THROW */
    case 78: /* SWITCH */
    case 79: /* DO */
    case 80: /* FOR */
    case 81: /* EACHKEY */
    case 82: /* USING */
{
#line 123 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"

    p->destroy( (yypminor->yy0) );

#line 1573 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
}
      break;
      /* Default NON-TERMINAL Destructor */
    case 83: /* error */
    case 84: /* name */
    case 85: /* param_list */
    case 86: /* arg_list */
    case 87: /* object_scope */
    case 88: /* newobj_scope */
    case 89: /* func_scope */
    case 90: /* newf_scope */
    case 91: /* compare_op */
    case 92: /* assign_op */
    case 93: /* value_lbody */
    case 94: /* value_list */
    case 95: /* keyval_lbody */
    case 96: /* keyval_list */
    case 97: /* stmt_block */
    case 98: /* stmt_reblock */
    case 99: /* stmt_if */
    case 100: /* stmt_switch */
    case 101: /* stmt_while */
    case 102: /* stmt_do */
    case 103: /* stmt_doblock */
    case 104: /* scope_for */
    case 105: /* stmt_foreach */
    case 106: /* stmt_for */
    case 107: /* stmt_using */
    case 108: /* try_block */
    case 109: /* try_catch */
    case 110: /* scope_catch */
    case 111: /* stmt_catch */
    case 112: /* token_yield */
    case 113: /* script */
    case 114: /* stmt_list */
    case 115: /* name_list */
    case 116: /* qual_name */
    case 117: /* decl_object */
    case 118: /* object_decls */
    case 119: /* expr_simple */
    case 120: /* object_decl */
    case 121: /* decl_proto */
    case 122: /* decl_func */
    case 123: /* decl_var */
    case 124: /* expr_list */
    case 125: /* expr_index */
    case 126: /* expr_assign */
    case 127: /* expr_value */
    case 128: /* expr_yield */
    case 129: /* expr_new */
    case 130: /* expr_postfix */
    case 131: /* expr_literal */
    case 132: /* expr_suffix */
    case 133: /* expr_unary */
    case 134: /* expr_mul */
    case 135: /* expr_add */
    case 136: /* expr_shift */
    case 137: /* expr_bitand */
    case 138: /* expr_bitxor */
    case 139: /* expr_bitor */
    case 140: /* expr_concat */
    case 141: /* expr_compare */
    case 142: /* expr_and */
    case 143: /* expr_xor */
    case 144: /* expr_or */
    case 145: /* expr_nolbr */
    case 146: /* expr_lbody */
    case 147: /* expr_final */
    case 148: /* sexpr_lbody */
    case 149: /* sexpr_list */
    case 150: /* sexpr_assign */
    case 151: /* condition */
    case 152: /* stmt */
    case 153: /* stmt_common */
    case 154: /* stmt_reuse */
    case 155: /* stmt_try */
    case 156: /* for_cond */
    case 157: /* for_expr */
{
#line 119 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"


#line 1656 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
}
      break;
    default:  break;   /* If no destructor action specified: do nothing */
  }
}

/*
** Pop the parser's stack once.
**
** If there is a destructor routine associated with the token which
** is popped from the stack, then call it.
**
** Return the major token number for the symbol popped.
*/
static int yy_pop_parser_stack(yyParser *pParser){
  YYCODETYPE yymajor;
  yyStackEntry *yytos = &pParser->yystack[pParser->yyidx];

  if( pParser->yyidx<0 ) return 0;
#ifndef NDEBUG
  if( yyTraceFILE && pParser->yyidx>=0 ){
    fprintf(yyTraceFILE,"%sPopping %s\n",
      yyTracePrompt,
      yyTokenName[yytos->major]);
  }
#endif
  yymajor = yytos->major;
  yy_destructor(pParser, yymajor, &yytos->minor);
  pParser->yyidx--;
  return yymajor;
}

/* 
** Deallocate and destroy a parser.  Destructors are all called for
** all stack elements before shutting the parser down.
**
** Inputs:
** <ul>
** <li>  A pointer to the parser.  This should be a pointer
**       obtained from XecParseAlloc.
** <li>  A pointer to a function used to reclaim memory obtained
**       from malloc.
** </ul>
*/
void XecParseFree(
  void *p,                    /* The parser to be deleted */
  void (*freeProc)(void*)     /* Function used to reclaim memory */
){
  yyParser *pParser = (yyParser*)p;
  if( pParser==0 ) return;
  while( pParser->yyidx>=0 ) yy_pop_parser_stack(pParser);
#if YYSTACKDEPTH<=0
  free(pParser->yystack);
#endif
  (*freeProc)((void*)pParser);
}

/*
** Return the peak depth of the stack for a parser.
*/
#ifdef YYTRACKMAXSTACKDEPTH
int XecParseStackPeak(void *p){
  yyParser *pParser = (yyParser*)p;
  return pParser->yyidxMax;
}
#endif

/*
** Find the appropriate action for a parser given the terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
static int yy_find_shift_action(
  yyParser *pParser,        /* The parser */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
  int stateno = pParser->yystack[pParser->yyidx].stateno;
 
  if( stateno>YY_SHIFT_MAX || (i = yy_shift_ofst[stateno])==YY_SHIFT_USE_DFLT ){
    return yy_default[stateno];
  }
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
  if( i<0 || i>=YY_SZ_ACTTAB || yy_lookahead[i]!=iLookAhead ){
    if( iLookAhead>0 ){
#ifdef YYFALLBACK
      YYCODETYPE iFallback;            /* Fallback token */
      if( iLookAhead<sizeof(yyFallback)/sizeof(yyFallback[0])
             && (iFallback = yyFallback[iLookAhead])!=0 ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE, "%sFALLBACK %s => %s\n",
             yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[iFallback]);
        }
#endif
        return yy_find_shift_action(pParser, iFallback);
      }
#endif
#ifdef YYWILDCARD
      {
        int j = i - iLookAhead + YYWILDCARD;
        if( j>=0 && j<YY_SZ_ACTTAB && yy_lookahead[j]==YYWILDCARD ){
#ifndef NDEBUG
          if( yyTraceFILE ){
            fprintf(yyTraceFILE, "%sWILDCARD %s => %s\n",
               yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[YYWILDCARD]);
          }
#endif /* NDEBUG */
          return yy_action[j];
        }
      }
#endif /* YYWILDCARD */
    }
    return yy_default[stateno];
  }else{
    return yy_action[i];
  }
}

/*
** Find the appropriate action for a parser given the non-terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
static int yy_find_reduce_action(
  int stateno,              /* Current state number */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
#ifdef YYERRORSYMBOL
  if( stateno>YY_REDUCE_MAX ){
    return yy_default[stateno];
  }
#else
  assert( stateno<=YY_REDUCE_MAX );
#endif
  i = yy_reduce_ofst[stateno];
  assert( i!=YY_REDUCE_USE_DFLT );
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
#ifdef YYERRORSYMBOL
  if( i<0 || i>=YY_SZ_ACTTAB || yy_lookahead[i]!=iLookAhead ){
    return yy_default[stateno];
  }
#else
  assert( i>=0 && i<YY_SZ_ACTTAB );
  assert( yy_lookahead[i]==iLookAhead );
#endif
  return yy_action[i];
}

/*
** The following routine is called if the stack overflows.
*/
static void yyStackOverflow(yyParser *yypParser, YYMINORTYPE *yypMinor){
   XecParseARG_FETCH;
   yypParser->yyidx--;
#ifndef NDEBUG
   if( yyTraceFILE ){
     fprintf(yyTraceFILE,"%sStack Overflow!\n",yyTracePrompt);
   }
#endif
   while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
   /* Here code is inserted which will execute if the parser
   ** stack every overflows */
   XecParseARG_STORE; /* Suppress warning about unused %extra_argument var */
}

/*
** Perform a shift action.
*/
static void yy_shift(
  yyParser *yypParser,          /* The parser to be shifted */
  int yyNewState,               /* The new state to shift in */
  int yyMajor,                  /* The major token to shift in */
  YYMINORTYPE *yypMinor         /* Pointer to the minor token to shift in */
){
  yyStackEntry *yytos;
  yypParser->yyidx++;
#ifdef YYTRACKMAXSTACKDEPTH
  if( yypParser->yyidx>yypParser->yyidxMax ){
    yypParser->yyidxMax = yypParser->yyidx;
  }
#endif
#if YYSTACKDEPTH>0 
  if( yypParser->yyidx>=YYSTACKDEPTH ){
    yyStackOverflow(yypParser, yypMinor);
    return;
  }
#else
  if( yypParser->yyidx>=yypParser->yystksz ){
    yyGrowStack(yypParser);
    if( yypParser->yyidx>=yypParser->yystksz ){
      yyStackOverflow(yypParser, yypMinor);
      return;
    }
  }
#endif
  yytos = &yypParser->yystack[yypParser->yyidx];
  yytos->stateno = (YYACTIONTYPE)yyNewState;
  yytos->major = (YYCODETYPE)yyMajor;
  yytos->minor = *yypMinor;
#ifndef NDEBUG
  if( yyTraceFILE && yypParser->yyidx>0 ){
    int i;
    fprintf(yyTraceFILE,"%sShift %d\n",yyTracePrompt,yyNewState);
    fprintf(yyTraceFILE,"%sStack:",yyTracePrompt);
    for(i=1; i<=yypParser->yyidx; i++)
      fprintf(yyTraceFILE," %s",yyTokenName[yypParser->yystack[i].major]);
    fprintf(yyTraceFILE,"\n");
  }
#endif
}

/* The following table contains information about every rule that
** is used during the reduce.
*/
static const struct {
  YYCODETYPE lhs;         /* Symbol on the left-hand side of the rule */
  unsigned char nrhs;     /* Number of right-hand side symbols in the rule */
} yyRuleInfo[] = {
  { 113, 1 },
  { 84, 1 },
  { 115, 1 },
  { 115, 3 },
  { 85, 0 },
  { 85, 1 },
  { 85, 1 },
  { 85, 3 },
  { 116, 1 },
  { 116, 3 },
  { 117, 4 },
  { 87, 2 },
  { 87, 4 },
  { 118, 0 },
  { 118, 2 },
  { 120, 1 },
  { 120, 1 },
  { 120, 1 },
  { 120, 1 },
  { 120, 1 },
  { 121, 6 },
  { 121, 7 },
  { 122, 4 },
  { 89, 5 },
  { 89, 6 },
  { 123, 3 },
  { 123, 5 },
  { 125, 3 },
  { 125, 1 },
  { 125, 3 },
  { 125, 5 },
  { 125, 4 },
  { 128, 4 },
  { 129, 5 },
  { 130, 1 },
  { 130, 1 },
  { 130, 4 },
  { 130, 3 },
  { 130, 5 },
  { 130, 4 },
  { 130, 4 },
  { 119, 1 },
  { 119, 1 },
  { 119, 5 },
  { 119, 5 },
  { 131, 1 },
  { 131, 1 },
  { 131, 1 },
  { 131, 1 },
  { 131, 1 },
  { 131, 1 },
  { 132, 1 },
  { 132, 2 },
  { 132, 2 },
  { 133, 1 },
  { 133, 2 },
  { 133, 2 },
  { 133, 2 },
  { 133, 2 },
  { 133, 2 },
  { 133, 2 },
  { 134, 1 },
  { 134, 3 },
  { 134, 3 },
  { 134, 3 },
  { 134, 3 },
  { 135, 1 },
  { 135, 3 },
  { 135, 3 },
  { 136, 1 },
  { 136, 3 },
  { 136, 3 },
  { 136, 3 },
  { 137, 1 },
  { 137, 3 },
  { 138, 1 },
  { 138, 3 },
  { 139, 1 },
  { 139, 3 },
  { 140, 1 },
  { 140, 3 },
  { 141, 1 },
  { 141, 3 },
  { 91, 1 },
  { 91, 1 },
  { 91, 1 },
  { 91, 1 },
  { 91, 1 },
  { 91, 1 },
  { 91, 1 },
  { 91, 1 },
  { 91, 1 },
  { 91, 1 },
  { 142, 1 },
  { 142, 3 },
  { 143, 1 },
  { 143, 3 },
  { 144, 1 },
  { 144, 3 },
  { 145, 1 },
  { 145, 5 },
  { 145, 2 },
  { 145, 3 },
  { 145, 4 },
  { 145, 4 },
  { 88, 1 },
  { 88, 3 },
  { 90, 4 },
  { 90, 5 },
  { 90, 5 },
  { 90, 6 },
  { 127, 1 },
  { 127, 2 },
  { 127, 3 },
  { 146, 1 },
  { 146, 3 },
  { 147, 1 },
  { 147, 2 },
  { 147, 4 },
  { 124, 1 },
  { 124, 1 },
  { 124, 3 },
  { 86, 0 },
  { 86, 1 },
  { 126, 1 },
  { 126, 3 },
  { 92, 1 },
  { 92, 1 },
  { 92, 1 },
  { 92, 1 },
  { 92, 1 },
  { 92, 1 },
  { 92, 1 },
  { 92, 1 },
  { 92, 1 },
  { 92, 1 },
  { 92, 1 },
  { 92, 1 },
  { 92, 1 },
  { 93, 1 },
  { 93, 3 },
  { 94, 1 },
  { 94, 2 },
  { 94, 1 },
  { 94, 2 },
  { 94, 3 },
  { 95, 3 },
  { 95, 5 },
  { 96, 1 },
  { 96, 2 },
  { 148, 1 },
  { 148, 3 },
  { 149, 1 },
  { 149, 1 },
  { 149, 3 },
  { 150, 1 },
  { 150, 3 },
  { 151, 1 },
  { 151, 4 },
  { 114, 0 },
  { 114, 2 },
  { 114, 2 },
  { 114, 2 },
  { 114, 2 },
  { 114, 2 },
  { 152, 3 },
  { 152, 1 },
  { 97, 1 },
  { 154, 3 },
  { 154, 1 },
  { 98, 1 },
  { 153, 2 },
  { 153, 5 },
  { 153, 7 },
  { 153, 7 },
  { 153, 5 },
  { 153, 6 },
  { 153, 2 },
  { 153, 2 },
  { 153, 5 },
  { 153, 1 },
  { 153, 3 },
  { 153, 3 },
  { 153, 2 },
  { 153, 2 },
  { 153, 2 },
  { 153, 2 },
  { 153, 3 },
  { 153, 2 },
  { 153, 3 },
  { 153, 3 },
  { 99, 1 },
  { 100, 1 },
  { 101, 1 },
  { 102, 1 },
  { 103, 2 },
  { 104, 1 },
  { 105, 6 },
  { 105, 6 },
  { 105, 7 },
  { 105, 7 },
  { 106, 8 },
  { 156, 0 },
  { 156, 1 },
  { 157, 0 },
  { 157, 1 },
  { 107, 1 },
  { 155, 1 },
  { 155, 3 },
  { 155, 3 },
  { 108, 2 },
  { 109, 3 },
  { 109, 3 },
  { 110, 1 },
  { 111, 5 },
  { 111, 6 },
  { 111, 7 },
  { 111, 4 },
  { 111, 5 },
  { 112, 1 },
};

static void yy_accept(yyParser*);  /* Forward Declaration */

/*
** Perform a reduce action and the shift that must immediately
** follow the reduce.
*/
static void yy_reduce(
  yyParser *yypParser,         /* The parser */
  int yyruleno                 /* Number of the rule by which to reduce */
){
  int yygoto;                     /* The next state */
  int yyact;                      /* The next action */
  YYMINORTYPE yygotominor;        /* The LHS of the rule reduced */
  yyStackEntry *yymsp;            /* The top of the parser's stack */
  int yysize;                     /* Amount to pop the stack */
  XecParseARG_FETCH;
  yymsp = &yypParser->yystack[yypParser->yyidx];
#ifndef NDEBUG
  if( yyTraceFILE && yyruleno>=0 
        && yyruleno<(int)(sizeof(yyRuleName)/sizeof(yyRuleName[0])) ){
    fprintf(yyTraceFILE, "%sReduce [%s].\n", yyTracePrompt,
      yyRuleName[yyruleno]);
  }
#endif /* NDEBUG */

  /* Silence complaints from purify about yygotominor being uninitialized
  ** in some cases when it is copied into the stack after the following
  ** switch.  yygotominor is uninitialized when a rule reduces that does
  ** not set the value of its left-hand side nonterminal.  Leaving the
  ** value of the nonterminal uninitialized is utterly harmless as long
  ** as the value is never used.  So really the only thing this code
  ** accomplishes is to quieten purify.  
  **
  ** 2007-01-16:  The wireshark project (www.wireshark.org) reports that
  ** without this code, their parser segfaults.  I'm not sure what there
  ** parser is doing to make this happen.  This is the second bug report
  ** from wireshark this week.  Clearly they are stressing Lemon in ways
  ** that it has not been previously stressed...  (SQLite ticket #2172)
  */
  /*memset(&yygotominor, 0, sizeof(yygotominor));*/
  yygotominor = yyzerominor;


  switch( yyruleno ){
  /* Beginning here are the reduction cases.  A typical example
  ** follows:
  **   case 0:
  **  #line <lineno> <grammarfile>
  **     { ... }           // User supplied code
  **  #line <lineno> <thisfile>
  **     break;
  */
      case 0: /* script ::= stmt_list */
#line 161 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,114,&yymsp[0].minor);
}
#line 2164 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 1: /* name ::= IDENTIFIER */
#line 172 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy75 = p->alloc< xec_name_name >( yymsp[0].minor.yy0->sloc, yymsp[0].minor.yy0->text );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 2172 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 2: /* name_list ::= name */
      case 8: /* qual_name ::= name */ yytestcase(yyruleno==8);
#line 179 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = yymsp[0].minor.yy75;
                }
#line 2180 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 3: /* name_list ::= name_list COMMA name */
#line 183 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    xec_name_list* l;
                    yygotominor.yy259 = l = p->name_list( yymsp[-2].minor.yy259 );
                    l->names.push_back( yymsp[0].minor.yy75 );
                  yy_destructor(yypParser,9,&yymsp[-1].minor);
}
#line 2190 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 4: /* param_list ::= */
#line 191 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy118 = nullptr;
                }
#line 2197 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 5: /* param_list ::= name_list */
#line 195 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy118 = p->name_list( yymsp[0].minor.yy259 );
                }
#line 2204 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 6: /* param_list ::= ELLIPSIS */
#line 199 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    xec_name_list* l;
                    yygotominor.yy118 = l = p->alloc< xec_name_list >( yymsp[0].minor.yy0->sloc );
                    l->varargs = true;
                }
#line 2213 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 7: /* param_list ::= name_list COMMA ELLIPSIS */
#line 205 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    xec_name_list* l;
                    yygotominor.yy118 = l = p->name_list( yymsp[-2].minor.yy259 );
                    l->varargs = true;
                  yy_destructor(yypParser,9,&yymsp[-1].minor);
  yy_destructor(yypParser,10,&yymsp[0].minor);
}
#line 2224 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 9: /* qual_name ::= qual_name PERIOD IDENTIFIER */
#line 217 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_name_qual >(
                                    yymsp[0].minor.yy0->sloc, yymsp[-2].minor.yy259, yymsp[0].minor.yy0->text );
                    p->destroy( yymsp[0].minor.yy0 );
                  yy_destructor(yypParser,11,&yymsp[-1].minor);
}
#line 2234 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 10: /* decl_object ::= object_scope LBR object_decls RBR */
#line 233 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    p->close_scope( yymsp[-3].minor.yy182->scope );
                  yy_destructor(yypParser,12,&yymsp[-2].minor);
  yy_destructor(yypParser,118,&yymsp[-1].minor);
  yy_destructor(yypParser,13,&yymsp[0].minor);
}
#line 2244 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 11: /* object_scope ::= DEF qual_name */
#line 238 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy182 = p->object( yymsp[0].minor.yy259->sloc, yymsp[0].minor.yy259, nullptr );
                  yy_destructor(yypParser,14,&yymsp[-1].minor);
}
#line 2252 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 12: /* object_scope ::= DEF qual_name COLON expr_simple */
#line 242 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy182 = p->object( yymsp[-2].minor.yy259->sloc, yymsp[-2].minor.yy259, yymsp[0].minor.yy259 );
                  yy_destructor(yypParser,14,&yymsp[-3].minor);
  yy_destructor(yypParser,15,&yymsp[-1].minor);
}
#line 2261 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 13: /* object_decls ::= */
      case 159: /* stmt_list ::= */ yytestcase(yyruleno==159);
#line 248 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                }
#line 2268 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 14: /* object_decls ::= object_decls object_decl */
#line 251 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,118,&yymsp[-1].minor);
  yy_destructor(yypParser,120,&yymsp[0].minor);
}
#line 2276 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 15: /* object_decl ::= SEMICOLON */
#line 255 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,16,&yymsp[0].minor);
}
#line 2283 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 16: /* object_decl ::= decl_object */
#line 258 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,117,&yymsp[0].minor);
}
#line 2290 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 17: /* object_decl ::= decl_proto */
#line 261 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,121,&yymsp[0].minor);
}
#line 2297 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 18: /* object_decl ::= decl_func */
#line 264 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,122,&yymsp[0].minor);
}
#line 2304 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 19: /* object_decl ::= decl_var */
#line 267 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,123,&yymsp[0].minor);
}
#line 2311 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 20: /* decl_proto ::= DEF qual_name LPN param_list RPN SEMICOLON */
#line 273 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    p->prototype( yymsp[-5].minor.yy0->sloc, yymsp[-4].minor.yy259, yymsp[-2].minor.yy118, false );
                    p->destroy( yymsp[-5].minor.yy0 );
                  yy_destructor(yypParser,7,&yymsp[-3].minor);
  yy_destructor(yypParser,17,&yymsp[-1].minor);
  yy_destructor(yypParser,16,&yymsp[0].minor);
}
#line 2322 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 21: /* decl_proto ::= DEF qual_name LPN param_list RPN YIELD SEMICOLON */
#line 279 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    p->prototype( yymsp[-6].minor.yy0->sloc, yymsp[-5].minor.yy259, yymsp[-3].minor.yy118, true );
                    p->destroy( yymsp[-6].minor.yy0 );
                  yy_destructor(yypParser,7,&yymsp[-4].minor);
  yy_destructor(yypParser,17,&yymsp[-2].minor);
  yy_destructor(yypParser,6,&yymsp[-1].minor);
  yy_destructor(yypParser,16,&yymsp[0].minor);
}
#line 2334 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 22: /* decl_func ::= func_scope LBR stmt_list RBR */
#line 286 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    p->close_scope( yymsp[-3].minor.yy45->scope );
                  yy_destructor(yypParser,12,&yymsp[-2].minor);
  yy_destructor(yypParser,114,&yymsp[-1].minor);
  yy_destructor(yypParser,13,&yymsp[0].minor);
}
#line 2344 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 23: /* func_scope ::= DEF qual_name LPN param_list RPN */
#line 292 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy45 = p->function( yymsp[-4].minor.yy0->sloc, yymsp[-3].minor.yy259, yymsp[-1].minor.yy118, false, false );
                    p->destroy( yymsp[-4].minor.yy0 );
                  yy_destructor(yypParser,7,&yymsp[-2].minor);
  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 2354 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 24: /* func_scope ::= DEF qual_name LPN param_list RPN YIELD */
#line 298 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy45 = p->function( yymsp[-5].minor.yy0->sloc, yymsp[-4].minor.yy259, yymsp[-2].minor.yy118, true, false );
                    p->destroy( yymsp[-5].minor.yy0 );
                  yy_destructor(yypParser,7,&yymsp[-3].minor);
  yy_destructor(yypParser,17,&yymsp[-1].minor);
  yy_destructor(yypParser,6,&yymsp[0].minor);
}
#line 2365 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 25: /* decl_var ::= VAR name_list SEMICOLON */
#line 305 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    p->var( yymsp[-2].minor.yy0->sloc, yymsp[-1].minor.yy259, nullptr );
                    p->destroy( yymsp[-2].minor.yy0 );
                  yy_destructor(yypParser,16,&yymsp[0].minor);
}
#line 2374 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 26: /* decl_var ::= VAR name_list ASSIGN expr_list SEMICOLON */
#line 311 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    p->var( yymsp[-4].minor.yy0->sloc, yymsp[-3].minor.yy259, yymsp[-1].minor.yy259 );
                    p->destroy( yymsp[-4].minor.yy0 );
                  yy_destructor(yypParser,19,&yymsp[-2].minor);
  yy_destructor(yypParser,16,&yymsp[0].minor);
}
#line 2384 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 27: /* expr_index ::= LPN expr_assign RPN */
#line 328 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->mono( yymsp[-1].minor.yy259 );
                  yy_destructor(yypParser,7,&yymsp[-2].minor);
  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 2393 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 28: /* expr_index ::= IDENTIFIER */
#line 332 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->lookup( yymsp[0].minor.yy0->sloc, yymsp[0].minor.yy0->text, true );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 2401 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 29: /* expr_index ::= expr_index PERIOD IDENTIFIER */
      case 37: /* expr_postfix ::= expr_postfix PERIOD IDENTIFIER */ yytestcase(yyruleno==37);
#line 337 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->key( yymsp[-2].minor.yy259->sloc, yymsp[-2].minor.yy259, yymsp[0].minor.yy0->text );
                    p->destroy( yymsp[0].minor.yy0 );
                  yy_destructor(yypParser,11,&yymsp[-1].minor);
}
#line 2411 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 30: /* expr_index ::= expr_index PERIOD LSQ expr_value RSQ */
#line 342 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_expr_inkey >( yymsp[-4].minor.yy259->sloc, yymsp[-4].minor.yy259, yymsp[-1].minor.yy259 );
                  yy_destructor(yypParser,11,&yymsp[-3].minor);
  yy_destructor(yypParser,20,&yymsp[-2].minor);
  yy_destructor(yypParser,21,&yymsp[0].minor);
}
#line 2421 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 31: /* expr_index ::= expr_index LSQ expr_value RSQ */
#line 346 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_expr_index >( yymsp[-3].minor.yy259->sloc, yymsp[-3].minor.yy259, yymsp[-1].minor.yy259 );
                  yy_destructor(yypParser,20,&yymsp[-2].minor);
  yy_destructor(yypParser,21,&yymsp[0].minor);
}
#line 2430 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 32: /* expr_yield ::= YIELD LPN arg_list RPN */
#line 351 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    p->check_yield( yymsp[-3].minor.yy0->sloc );
                    yygotominor.yy259 = p->alloc< xec_expr_yield >( yymsp[-3].minor.yy0->sloc, yymsp[-1].minor.yy208 );
                    p->destroy( yymsp[-3].minor.yy0 );
                  yy_destructor(yypParser,7,&yymsp[-2].minor);
  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 2441 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 33: /* expr_new ::= NEW expr_index LPN arg_list RPN */
#line 358 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_new_new >( yymsp[-4].minor.yy0->sloc, yymsp[-3].minor.yy259, yymsp[-1].minor.yy208 );
                    p->destroy( yymsp[-4].minor.yy0 );
                  yy_destructor(yypParser,7,&yymsp[-2].minor);
  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 2451 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 34: /* expr_postfix ::= expr_yield */
      case 35: /* expr_postfix ::= expr_new */ yytestcase(yyruleno==35);
      case 41: /* expr_simple ::= expr_index */ yytestcase(yyruleno==41);
      case 42: /* expr_simple ::= expr_postfix */ yytestcase(yyruleno==42);
      case 45: /* expr_literal ::= expr_simple */ yytestcase(yyruleno==45);
      case 51: /* expr_suffix ::= expr_literal */ yytestcase(yyruleno==51);
      case 54: /* expr_unary ::= expr_suffix */ yytestcase(yyruleno==54);
      case 61: /* expr_mul ::= expr_unary */ yytestcase(yyruleno==61);
      case 66: /* expr_add ::= expr_mul */ yytestcase(yyruleno==66);
      case 69: /* expr_shift ::= expr_add */ yytestcase(yyruleno==69);
      case 73: /* expr_bitand ::= expr_shift */ yytestcase(yyruleno==73);
      case 75: /* expr_bitxor ::= expr_bitand */ yytestcase(yyruleno==75);
      case 77: /* expr_bitor ::= expr_bitxor */ yytestcase(yyruleno==77);
      case 79: /* expr_concat ::= expr_bitor */ yytestcase(yyruleno==79);
      case 81: /* expr_compare ::= expr_concat */ yytestcase(yyruleno==81);
      case 93: /* expr_and ::= expr_compare */ yytestcase(yyruleno==93);
      case 95: /* expr_xor ::= expr_and */ yytestcase(yyruleno==95);
      case 97: /* expr_or ::= expr_xor */ yytestcase(yyruleno==97);
      case 99: /* expr_nolbr ::= expr_or */ yytestcase(yyruleno==99);
      case 111: /* expr_value ::= expr_nolbr */ yytestcase(yyruleno==111);
      case 114: /* expr_lbody ::= expr_value */ yytestcase(yyruleno==114);
      case 120: /* expr_list ::= expr_lbody */ yytestcase(yyruleno==120);
      case 124: /* expr_assign ::= expr_list */ yytestcase(yyruleno==124);
      case 150: /* sexpr_lbody ::= expr_nolbr */ yytestcase(yyruleno==150);
      case 152: /* sexpr_list ::= expr_final */ yytestcase(yyruleno==152);
      case 153: /* sexpr_list ::= sexpr_lbody */ yytestcase(yyruleno==153);
      case 155: /* sexpr_assign ::= sexpr_list */ yytestcase(yyruleno==155);
      case 157: /* condition ::= expr_assign */ yytestcase(yyruleno==157);
      case 166: /* stmt ::= stmt_common */ yytestcase(yyruleno==166);
      case 169: /* stmt_reuse ::= stmt_common */ yytestcase(yyruleno==169);
      case 180: /* stmt_common ::= stmt_try */ yytestcase(yyruleno==180);
      case 203: /* for_cond ::= condition */ yytestcase(yyruleno==203);
      case 205: /* for_expr ::= expr_assign */ yytestcase(yyruleno==205);
#line 365 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = yymsp[0].minor.yy259;
                }
#line 2490 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 36: /* expr_postfix ::= expr_index LPN arg_list RPN */
      case 40: /* expr_postfix ::= expr_postfix LPN arg_list RPN */ yytestcase(yyruleno==40);
#line 373 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_expr_call >(
                                yymsp[-3].minor.yy259->sloc, yymsp[-3].minor.yy259, yymsp[-1].minor.yy208, false );
                  yy_destructor(yypParser,7,&yymsp[-2].minor);
  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 2501 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 38: /* expr_postfix ::= expr_postfix PERIOD LSQ expr_value RSQ */
#line 383 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_expr_inkey >(
                                yymsp[-4].minor.yy259->sloc, yymsp[-4].minor.yy259, yymsp[-1].minor.yy259 );
                  yy_destructor(yypParser,11,&yymsp[-3].minor);
  yy_destructor(yypParser,20,&yymsp[-2].minor);
  yy_destructor(yypParser,21,&yymsp[0].minor);
}
#line 2512 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 39: /* expr_postfix ::= expr_postfix LSQ expr_value RSQ */
#line 388 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_expr_index >(
                                yymsp[-3].minor.yy259->sloc, yymsp[-3].minor.yy259, yymsp[-1].minor.yy259 );
                  yy_destructor(yypParser,20,&yymsp[-2].minor);
  yy_destructor(yypParser,21,&yymsp[0].minor);
}
#line 2522 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 43: /* expr_simple ::= expr_index LPN arg_list RPN YIELD */
      case 44: /* expr_simple ::= expr_postfix LPN arg_list RPN YIELD */ yytestcase(yyruleno==44);
#line 413 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    p->check_yield( yymsp[-4].minor.yy259->sloc );
                    yygotominor.yy259 = p->alloc< xec_expr_call >(
                                yymsp[-4].minor.yy259->sloc, yymsp[-4].minor.yy259, yymsp[-2].minor.yy208, true );
                  yy_destructor(yypParser,7,&yymsp[-3].minor);
  yy_destructor(yypParser,17,&yymsp[-1].minor);
  yy_destructor(yypParser,6,&yymsp[0].minor);
}
#line 2535 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 46: /* expr_literal ::= NULL */
#line 430 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_expr_null >( yymsp[0].minor.yy0->sloc );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 2543 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 47: /* expr_literal ::= TRUE */
#line 435 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_expr_bool >( yymsp[0].minor.yy0->sloc, true );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 2551 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 48: /* expr_literal ::= FALSE */
#line 440 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_expr_bool >( yymsp[0].minor.yy0->sloc, false );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 2559 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 49: /* expr_literal ::= NUMBER */
#line 445 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    double number = p->parse_number( yymsp[0].minor.yy0 );
                    yygotominor.yy259 = p->alloc< xec_expr_number >( yymsp[0].minor.yy0->sloc, number );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 2568 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 50: /* expr_literal ::= STRING */
#line 451 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_expr_string >(
                            yymsp[0].minor.yy0->sloc, yymsp[0].minor.yy0->text, yymsp[0].minor.yy0->size );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 2577 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 52: /* expr_suffix ::= expr_suffix INCREMENT */
#line 462 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy259 = p->lvalue( yymsp[-1].minor.yy259 );
                    yygotominor.yy259 = p->alloc< xec_expr_postop >(
                             yymsp[-1].minor.yy259->sloc, XEC_ASTOP_POSTINC, yymsp[-1].minor.yy259 );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 2587 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 53: /* expr_suffix ::= expr_suffix DECREMENT */
#line 469 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy259 = p->lvalue( yymsp[-1].minor.yy259 );
                    yygotominor.yy259 = p->alloc< xec_expr_postop >(
                             yymsp[-1].minor.yy259->sloc, XEC_ASTOP_POSTDEC, yymsp[-1].minor.yy259 );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 2597 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 55: /* expr_unary ::= PLUS expr_unary */
#line 481 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_expr_unary >(
                             yymsp[-1].minor.yy0->sloc, XEC_ASTOP_POSITIVE, yymsp[0].minor.yy259 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 2606 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 56: /* expr_unary ::= MINUS expr_unary */
#line 487 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_expr_unary >(
                             yymsp[-1].minor.yy0->sloc, XEC_ASTOP_NEGATIVE, yymsp[0].minor.yy259 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 2615 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 57: /* expr_unary ::= XMARK expr_unary */
#line 493 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_expr_unary >(
                             yymsp[-1].minor.yy0->sloc, XEC_ASTOP_LOGICNOT, yymsp[0].minor.yy259 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 2624 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 58: /* expr_unary ::= TILDE expr_unary */
#line 499 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_expr_unary >(
                             yymsp[-1].minor.yy0->sloc, XEC_ASTOP_BITNOT, yymsp[0].minor.yy259 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 2633 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 59: /* expr_unary ::= INCREMENT expr_unary */
#line 505 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[0].minor.yy259 = p->lvalue( yymsp[0].minor.yy259 );
                    yygotominor.yy259 = p->alloc< xec_expr_preop >(
                             yymsp[-1].minor.yy0->sloc, XEC_ASTOP_PREINC, yymsp[0].minor.yy259 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 2643 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 60: /* expr_unary ::= DECREMENT expr_unary */
#line 512 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[0].minor.yy259 = p->lvalue( yymsp[0].minor.yy259 );
                    yygotominor.yy259 = p->alloc< xec_expr_preop >(
                             yymsp[-1].minor.yy0->sloc, XEC_ASTOP_PREDEC, yymsp[0].minor.yy259 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 2653 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 62: /* expr_mul ::= expr_mul ASTERISK expr_unary */
#line 524 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_expr_binary >( yymsp[-2].minor.yy259->sloc,
                                    XEC_ASTOP_MULTIPLY, yymsp[-2].minor.yy259, yymsp[0].minor.yy259 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 2662 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 63: /* expr_mul ::= expr_mul SOLIDUS expr_unary */
#line 530 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_expr_binary >( yymsp[-2].minor.yy259->sloc,
                                    XEC_ASTOP_DIVIDE, yymsp[-2].minor.yy259, yymsp[0].minor.yy259 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 2671 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 64: /* expr_mul ::= expr_mul PERCENT expr_unary */
#line 536 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_expr_binary >( yymsp[-2].minor.yy259->sloc,
                                    XEC_ASTOP_MODULUS, yymsp[-2].minor.yy259, yymsp[0].minor.yy259 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 2680 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 65: /* expr_mul ::= expr_mul TILDE expr_unary */
#line 542 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_expr_binary >( yymsp[-2].minor.yy259->sloc,
                                    XEC_ASTOP_INTDIV, yymsp[-2].minor.yy259, yymsp[0].minor.yy259 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 2689 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 67: /* expr_add ::= expr_add PLUS expr_mul */
#line 553 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_expr_binary >( yymsp[-2].minor.yy259->sloc,
                                    XEC_ASTOP_ADD, yymsp[-2].minor.yy259, yymsp[0].minor.yy259 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 2698 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 68: /* expr_add ::= expr_add MINUS expr_mul */
#line 559 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_expr_binary >( yymsp[-2].minor.yy259->sloc,
                                    XEC_ASTOP_SUBTRACT, yymsp[-2].minor.yy259, yymsp[0].minor.yy259 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 2707 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 70: /* expr_shift ::= expr_shift LSHIFT expr_add */
#line 570 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_expr_binary >( yymsp[-2].minor.yy259->sloc,
                                    XEC_ASTOP_LSHIFT, yymsp[-2].minor.yy259, yymsp[0].minor.yy259 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 2716 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 71: /* expr_shift ::= expr_shift LRSHIFT expr_add */
#line 576 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_expr_binary >( yymsp[-2].minor.yy259->sloc,
                                    XEC_ASTOP_LRSHIFT, yymsp[-2].minor.yy259, yymsp[0].minor.yy259 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 2725 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 72: /* expr_shift ::= expr_shift ARSHIFT expr_add */
#line 582 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_expr_binary >( yymsp[-2].minor.yy259->sloc,
                                    XEC_ASTOP_ARSHIFT, yymsp[-2].minor.yy259, yymsp[0].minor.yy259 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 2734 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 74: /* expr_bitand ::= expr_bitand AMPERSAND expr_shift */
#line 593 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_expr_binary >( yymsp[-2].minor.yy259->sloc,
                                    XEC_ASTOP_BITAND, yymsp[-2].minor.yy259, yymsp[0].minor.yy259 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 2743 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 76: /* expr_bitxor ::= expr_bitxor CARET expr_bitand */
#line 604 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_expr_binary >( yymsp[-2].minor.yy259->sloc,
                                    XEC_ASTOP_BITXOR, yymsp[-2].minor.yy259, yymsp[0].minor.yy259 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 2752 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 78: /* expr_bitor ::= expr_bitor VBAR expr_bitxor */
#line 615 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_expr_binary >( yymsp[-2].minor.yy259->sloc,
                                    XEC_ASTOP_BITOR, yymsp[-2].minor.yy259, yymsp[0].minor.yy259 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 2761 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 80: /* expr_concat ::= expr_concat CONCATENATE expr_bitor */
#line 626 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_expr_binary >( yymsp[-2].minor.yy259->sloc,
                                    XEC_ASTOP_CONCATENATE, yymsp[-2].minor.yy259, yymsp[0].minor.yy259 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 2770 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 82: /* expr_compare ::= expr_compare compare_op expr_concat */
#line 637 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->compare( yymsp[-1].minor.yy235.token->sloc, yymsp[-1].minor.yy235.op, yymsp[-2].minor.yy259, yymsp[0].minor.yy259 );
                    p->destroy( yymsp[-1].minor.yy235.token );
                }
#line 2778 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 83: /* compare_op ::= EQUAL */
#line 643 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy235 = make_token_op( yymsp[0].minor.yy0, XEC_ASTOP_EQUAL );
                }
#line 2785 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 84: /* compare_op ::= NOTEQUAL */
#line 647 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy235 = make_token_op( yymsp[0].minor.yy0, XEC_ASTOP_NOTEQUAL );
                }
#line 2792 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 85: /* compare_op ::= LESS */
#line 651 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy235 = make_token_op( yymsp[0].minor.yy0, XEC_ASTOP_LESS );
                }
#line 2799 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 86: /* compare_op ::= GREATER */
#line 655 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy235 = make_token_op( yymsp[0].minor.yy0, XEC_ASTOP_GREATER );
                }
#line 2806 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 87: /* compare_op ::= LESSEQUAL */
#line 659 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy235 = make_token_op( yymsp[0].minor.yy0, XEC_ASTOP_LESSEQUAL );
                }
#line 2813 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 88: /* compare_op ::= GREATEREQUAL */
#line 663 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy235 = make_token_op( yymsp[0].minor.yy0, XEC_ASTOP_GREATEREQUAL );
                }
#line 2820 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 89: /* compare_op ::= IN */
#line 667 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy235 = make_token_op( yymsp[0].minor.yy0, XEC_ASTOP_IN );
                }
#line 2827 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 90: /* compare_op ::= NOTIN */
#line 671 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy235 = make_token_op( yymsp[0].minor.yy0, XEC_ASTOP_NOTIN );
                }
#line 2834 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 91: /* compare_op ::= IS */
#line 675 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy235 = make_token_op( yymsp[0].minor.yy0, XEC_ASTOP_IS );
                }
#line 2841 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 92: /* compare_op ::= NOTIS */
#line 679 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy235 = make_token_op( yymsp[0].minor.yy0, XEC_ASTOP_NOTIS );
                }
#line 2848 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 94: /* expr_and ::= expr_and LOGICAND expr_compare */
#line 689 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_expr_logical >( yymsp[-2].minor.yy259->sloc,
                                    XEC_ASTOP_LOGICAND, yymsp[-2].minor.yy259, yymsp[0].minor.yy259 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 2857 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 96: /* expr_xor ::= expr_xor LOGICXOR expr_and */
#line 700 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_expr_logical >( yymsp[-2].minor.yy259->sloc,
                                    XEC_ASTOP_LOGICXOR, yymsp[-2].minor.yy259, yymsp[0].minor.yy259 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 2866 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 98: /* expr_or ::= expr_or LOGICOR expr_xor */
#line 711 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_expr_logical >( yymsp[-2].minor.yy259->sloc,
                                    XEC_ASTOP_LOGICOR, yymsp[-2].minor.yy259, yymsp[0].minor.yy259 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 2875 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 100: /* expr_nolbr ::= expr_or QMARK expr_value COLON expr_value */
#line 724 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_expr_qmark >(
                            yymsp[-4].minor.yy259->sloc, yymsp[-4].minor.yy259, yymsp[-2].minor.yy259, yymsp[0].minor.yy259 );
                  yy_destructor(yypParser,57,&yymsp[-3].minor);
  yy_destructor(yypParser,15,&yymsp[-1].minor);
}
#line 2885 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 101: /* expr_nolbr ::= LSQ RSQ */
#line 729 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_new_array >( yymsp[-1].minor.yy0->sloc );
                    p->destroy( yymsp[-1].minor.yy0 );
                  yy_destructor(yypParser,21,&yymsp[0].minor);
}
#line 2894 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 102: /* expr_nolbr ::= LSQ value_list RSQ */
#line 734 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = yymsp[-1].minor.yy134;
                    yygotominor.yy259->sloc = yymsp[-2].minor.yy0->sloc;
                    p->destroy( yymsp[-2].minor.yy0 );
                  yy_destructor(yypParser,21,&yymsp[0].minor);
}
#line 2904 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 103: /* expr_nolbr ::= newobj_scope LBR object_decls RBR */
#line 740 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = yymsp[-3].minor.yy182;
                    p->close_scope( yymsp[-3].minor.yy182->scope );
                  yy_destructor(yypParser,12,&yymsp[-2].minor);
  yy_destructor(yypParser,118,&yymsp[-1].minor);
  yy_destructor(yypParser,13,&yymsp[0].minor);
}
#line 2915 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 104: /* expr_nolbr ::= newf_scope LBR stmt_list RBR */
#line 745 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = yymsp[-3].minor.yy45;
                    p->close_scope( yymsp[-3].minor.yy45->scope );
                  yy_destructor(yypParser,12,&yymsp[-2].minor);
  yy_destructor(yypParser,114,&yymsp[-1].minor);
  yy_destructor(yypParser,13,&yymsp[0].minor);
}
#line 2926 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 105: /* newobj_scope ::= COLON */
#line 751 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy182 = p->object( yymsp[0].minor.yy0->sloc, nullptr, nullptr );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 2934 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 106: /* newobj_scope ::= COLON COLON expr_simple */
#line 756 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy182 = p->object( yymsp[-2].minor.yy0->sloc, nullptr, yymsp[0].minor.yy259 );
                    p->destroy( yymsp[-2].minor.yy0 );
                  yy_destructor(yypParser,15,&yymsp[-1].minor);
}
#line 2943 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 107: /* newf_scope ::= QMARK LPN param_list RPN */
#line 762 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy45 = p->function( yymsp[-3].minor.yy0->sloc,
                                    nullptr, yymsp[-1].minor.yy118, false, false );
                    p->destroy( yymsp[-3].minor.yy0 );
                  yy_destructor(yypParser,7,&yymsp[-2].minor);
  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 2954 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 108: /* newf_scope ::= PERIOD QMARK LPN param_list RPN */
#line 768 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy45 = p->function( yymsp[-4].minor.yy0->sloc,
                                    nullptr, yymsp[-1].minor.yy118, false, true );
                    p->destroy( yymsp[-4].minor.yy0 );
                  yy_destructor(yypParser,57,&yymsp[-3].minor);
  yy_destructor(yypParser,7,&yymsp[-2].minor);
  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 2966 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 109: /* newf_scope ::= QMARK LPN param_list RPN YIELD */
#line 774 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy45 = p->function( yymsp[-4].minor.yy0->sloc,
                                    nullptr, yymsp[-2].minor.yy118, true, false );
                    p->destroy( yymsp[-4].minor.yy0 );
                  yy_destructor(yypParser,7,&yymsp[-3].minor);
  yy_destructor(yypParser,17,&yymsp[-1].minor);
  yy_destructor(yypParser,6,&yymsp[0].minor);
}
#line 2978 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 110: /* newf_scope ::= PERIOD QMARK LPN param_list RPN YIELD */
#line 780 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy45 = p->function( yymsp[-5].minor.yy0->sloc,
                                    nullptr, yymsp[-2].minor.yy118, true, true );
                    p->destroy( yymsp[-5].minor.yy0 );
                  yy_destructor(yypParser,57,&yymsp[-4].minor);
  yy_destructor(yypParser,7,&yymsp[-3].minor);
  yy_destructor(yypParser,17,&yymsp[-1].minor);
  yy_destructor(yypParser,6,&yymsp[0].minor);
}
#line 2991 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 112: /* expr_value ::= LBR RBR */
#line 793 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_new_table >( yymsp[-1].minor.yy0->sloc );
                    p->destroy( yymsp[-1].minor.yy0 );
                  yy_destructor(yypParser,13,&yymsp[0].minor);
}
#line 3000 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 113: /* expr_value ::= LBR keyval_list RBR */
#line 798 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = yymsp[-1].minor.yy191;
                    yygotominor.yy259->sloc = yymsp[-2].minor.yy0->sloc;
                    p->destroy( yymsp[-2].minor.yy0 );
                  yy_destructor(yypParser,13,&yymsp[0].minor);
}
#line 3010 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 115: /* expr_lbody ::= expr_lbody COMMA expr_value */
      case 151: /* sexpr_lbody ::= sexpr_lbody COMMA expr_value */ yytestcase(yyruleno==151);
#line 809 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    xec_expr_list* l;
                    yygotominor.yy259 = l = p->expr_list( yymsp[-2].minor.yy259 );
                    l->values.push_back( yymsp[0].minor.yy259 );
                  yy_destructor(yypParser,9,&yymsp[-1].minor);
}
#line 3021 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 116: /* expr_final ::= ELLIPSIS */
#line 817 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    p->check_vararg( yymsp[0].minor.yy0->sloc );
                    yygotominor.yy259 = p->alloc< xec_expr_vararg >( yymsp[0].minor.yy0->sloc );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3030 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 117: /* expr_final ::= expr_postfix ELLIPSIS */
#line 823 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->unpack( yymsp[-1].minor.yy259 );
                  yy_destructor(yypParser,10,&yymsp[0].minor);
}
#line 3038 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 118: /* expr_final ::= expr_postfix LSQ RSQ ELLIPSIS */
#line 827 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_expr_unpack >( yymsp[-3].minor.yy259->sloc, yymsp[-3].minor.yy259 );
                  yy_destructor(yypParser,20,&yymsp[-2].minor);
  yy_destructor(yypParser,21,&yymsp[-1].minor);
  yy_destructor(yypParser,10,&yymsp[0].minor);
}
#line 3048 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 119: /* expr_list ::= expr_final */
#line 832 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    xec_expr_list* l;
                    yygotominor.yy259 = l = p->alloc< xec_expr_list >( yymsp[0].minor.yy259->sloc );
                    l->final = yymsp[0].minor.yy259;
                }
#line 3057 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 121: /* expr_list ::= expr_lbody COMMA expr_final */
      case 154: /* sexpr_list ::= sexpr_lbody COMMA expr_final */ yytestcase(yyruleno==154);
#line 842 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    xec_expr_list* l;
                    yygotominor.yy259 = l = p->expr_list( yymsp[-2].minor.yy259 );
                    l->final = yymsp[0].minor.yy259;
                  yy_destructor(yypParser,9,&yymsp[-1].minor);
}
#line 3068 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 122: /* arg_list ::= */
#line 849 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy208 = nullptr;
                }
#line 3075 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 123: /* arg_list ::= expr_list */
#line 853 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy208 = p->expr_list( yymsp[0].minor.yy259 );
                }
#line 3082 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 125: /* expr_assign ::= expr_lbody assign_op expr_assign */
      case 156: /* sexpr_assign ::= sexpr_lbody assign_op expr_assign */ yytestcase(yyruleno==156);
#line 862 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->assign( yymsp[-1].minor.yy235.token->sloc, yymsp[-1].minor.yy235.op, yymsp[-2].minor.yy259, yymsp[0].minor.yy259 );
                    p->destroy( yymsp[-1].minor.yy235.token );
                }
#line 3091 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 126: /* assign_op ::= ASSIGN */
#line 869 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy235 = make_token_op( yymsp[0].minor.yy0, XEC_ASTOP_ASSIGN );
                }
#line 3098 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 127: /* assign_op ::= MULASSIGN */
#line 873 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy235 = make_token_op( yymsp[0].minor.yy0, XEC_ASTOP_MULASSIGN );
                }
#line 3105 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 128: /* assign_op ::= DIVASSIGN */
#line 877 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy235 = make_token_op( yymsp[0].minor.yy0, XEC_ASTOP_DIVASSIGN );
                }
#line 3112 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 129: /* assign_op ::= MODASSIGN */
#line 881 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy235 = make_token_op( yymsp[0].minor.yy0, XEC_ASTOP_MODASSIGN );
                }
#line 3119 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 130: /* assign_op ::= INTDIVASSIGN */
#line 885 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy235 = make_token_op( yymsp[0].minor.yy0, XEC_ASTOP_INTDIVASSIGN );
                }
#line 3126 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 131: /* assign_op ::= ADDASSIGN */
#line 889 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy235 = make_token_op( yymsp[0].minor.yy0, XEC_ASTOP_ADDASSIGN );
                }
#line 3133 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 132: /* assign_op ::= SUBASSIGN */
#line 893 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy235 = make_token_op( yymsp[0].minor.yy0, XEC_ASTOP_SUBASSIGN );
                }
#line 3140 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 133: /* assign_op ::= LSHIFTASSIGN */
#line 897 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy235 = make_token_op( yymsp[0].minor.yy0, XEC_ASTOP_LSHIFTASSIGN );
                }
#line 3147 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 134: /* assign_op ::= LRSHIFTASSIGN */
#line 901 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy235 = make_token_op( yymsp[0].minor.yy0, XEC_ASTOP_LRSHIFTASSIGN );
                }
#line 3154 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 135: /* assign_op ::= ARSHIFTASSIGN */
#line 905 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy235 = make_token_op( yymsp[0].minor.yy0, XEC_ASTOP_ARSHIFTASSIGN );
                }
#line 3161 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 136: /* assign_op ::= BITANDASSIGN */
#line 909 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy235 = make_token_op( yymsp[0].minor.yy0, XEC_ASTOP_BITANDASSIGN );
                }
#line 3168 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 137: /* assign_op ::= BITXORASSIGN */
#line 913 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy235 = make_token_op( yymsp[0].minor.yy0, XEC_ASTOP_BITXORASSIGN );
                }
#line 3175 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 138: /* assign_op ::= BITORASSIGN */
#line 917 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy235 = make_token_op( yymsp[0].minor.yy0, XEC_ASTOP_BITORASSIGN );
                }
#line 3182 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 139: /* value_lbody ::= expr_value */
#line 923 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy134 = p->alloc< xec_new_array >( -1 );
                    yygotominor.yy134->values.push_back( yymsp[0].minor.yy259 );
                }
#line 3190 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 140: /* value_lbody ::= value_lbody COMMA expr_value */
#line 928 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy134 = yymsp[-2].minor.yy134;
                    yygotominor.yy134->values.push_back( yymsp[0].minor.yy259 );
                  yy_destructor(yypParser,9,&yymsp[-1].minor);
}
#line 3199 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 141: /* value_list ::= expr_final */
#line 934 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy134 = p->alloc< xec_new_array >( -1 );
                    yygotominor.yy134->final = yymsp[0].minor.yy259;
                }
#line 3207 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 142: /* value_list ::= expr_final COMMA */
#line 939 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy134 = p->alloc< xec_new_array >( -1 );
                    yygotominor.yy134->final = yymsp[-1].minor.yy259;
                  yy_destructor(yypParser,9,&yymsp[0].minor);
}
#line 3216 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 143: /* value_list ::= value_lbody */
#line 944 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy134 = yymsp[0].minor.yy134;
                }
#line 3223 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 144: /* value_list ::= value_lbody COMMA */
#line 948 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy134 = yymsp[-1].minor.yy134;
                  yy_destructor(yypParser,9,&yymsp[0].minor);
}
#line 3231 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 145: /* value_list ::= value_lbody COMMA expr_final */
#line 952 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy134 = yymsp[-2].minor.yy134;
                    yygotominor.yy134->final = yymsp[0].minor.yy259;
                  yy_destructor(yypParser,9,&yymsp[-1].minor);
}
#line 3240 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 146: /* keyval_lbody ::= expr_value COLON expr_value */
#line 959 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy191 = new xec_new_table( -1 );
                    yygotominor.yy191->elements.emplace_back( yymsp[-2].minor.yy259, yymsp[0].minor.yy259 );
                  yy_destructor(yypParser,15,&yymsp[-1].minor);
}
#line 3249 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 147: /* keyval_lbody ::= keyval_lbody COMMA expr_value COLON expr_value */
#line 965 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy191 = yymsp[-4].minor.yy191;
                    yygotominor.yy191->elements.emplace_back( yymsp[-2].minor.yy259, yymsp[0].minor.yy259 );
                  yy_destructor(yypParser,9,&yymsp[-3].minor);
  yy_destructor(yypParser,15,&yymsp[-1].minor);
}
#line 3259 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 148: /* keyval_list ::= keyval_lbody */
#line 971 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy191 = yymsp[0].minor.yy191;
                }
#line 3266 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 149: /* keyval_list ::= keyval_lbody COMMA */
#line 975 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy191 = yymsp[-1].minor.yy191;
                  yy_destructor(yypParser,9,&yymsp[0].minor);
}
#line 3274 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 158: /* condition ::= VAR name_list ASSIGN expr_list */
#line 1037 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->varstmt( yymsp[-3].minor.yy0->sloc, yymsp[-2].minor.yy259, yymsp[0].minor.yy259 );
                    p->destroy( yymsp[-3].minor.yy0 );
                  yy_destructor(yypParser,19,&yymsp[-1].minor);
}
#line 3283 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 160: /* stmt_list ::= stmt_list SEMICOLON */
#line 1050 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,114,&yymsp[-1].minor);
  yy_destructor(yypParser,16,&yymsp[0].minor);
}
#line 3291 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 161: /* stmt_list ::= stmt_list stmt */
#line 1053 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    p->statement( yymsp[0].minor.yy259 );
                  yy_destructor(yypParser,114,&yymsp[-1].minor);
}
#line 3299 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 162: /* stmt_list ::= stmt_list decl_object */
#line 1057 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,114,&yymsp[-1].minor);
  yy_destructor(yypParser,117,&yymsp[0].minor);
}
#line 3307 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 163: /* stmt_list ::= stmt_list decl_func */
#line 1060 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,114,&yymsp[-1].minor);
  yy_destructor(yypParser,122,&yymsp[0].minor);
}
#line 3315 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 164: /* stmt_list ::= stmt_list decl_var */
#line 1063 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,114,&yymsp[-1].minor);
  yy_destructor(yypParser,123,&yymsp[0].minor);
}
#line 3323 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 165: /* stmt ::= stmt_block stmt_list RBR */
#line 1069 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = yymsp[-2].minor.yy268;
                    p->close_scope( yymsp[-2].minor.yy268->scope );
                  yy_destructor(yypParser,114,&yymsp[-1].minor);
  yy_destructor(yypParser,13,&yymsp[0].minor);
}
#line 3333 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 167: /* stmt_block ::= LBR */
#line 1079 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy268 = p->alloc< xec_stmt_block >( yymsp[0].minor.yy0->sloc );
                    yygotominor.yy268->scope = p->block_scope( yygotominor.yy268 );
                    yygotominor.yy268->scope->block = yygotominor.yy268;
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3343 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 168: /* stmt_reuse ::= stmt_reblock stmt_list RBR */
#line 1089 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = yymsp[-2].minor.yy268;
                  yy_destructor(yypParser,114,&yymsp[-1].minor);
  yy_destructor(yypParser,13,&yymsp[0].minor);
}
#line 3352 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 170: /* stmt_reblock ::= LBR */
#line 1098 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy268 = p->alloc< xec_stmt_block >( yymsp[0].minor.yy0->sloc );
                    p->get_scope()->block = yygotominor.yy268;
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3361 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 171: /* stmt_common ::= sexpr_assign SEMICOLON */
#line 1108 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = yymsp[-1].minor.yy259;
                  yy_destructor(yypParser,16,&yymsp[0].minor);
}
#line 3369 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 172: /* stmt_common ::= stmt_if LPN condition RPN stmt */
#line 1112 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-4].minor.yy188->condition = yymsp[-2].minor.yy259;
                    yymsp[-4].minor.yy188->iftrue    = yymsp[0].minor.yy259;
                    p->close_scope( yymsp[-4].minor.yy188->scope );
                    yygotominor.yy259 = yymsp[-4].minor.yy188;
                  yy_destructor(yypParser,7,&yymsp[-3].minor);
  yy_destructor(yypParser,17,&yymsp[-1].minor);
}
#line 3381 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 173: /* stmt_common ::= stmt_if LPN condition RPN stmt ELSE stmt */
#line 1120 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-6].minor.yy188->condition = yymsp[-4].minor.yy259;
                    yymsp[-6].minor.yy188->iftrue    = yymsp[-2].minor.yy259;
                    yymsp[-6].minor.yy188->iffalse   = yymsp[0].minor.yy259;
                    p->close_scope( yymsp[-6].minor.yy188->scope );
                    yygotominor.yy259 = yymsp[-6].minor.yy188;
                  yy_destructor(yypParser,7,&yymsp[-5].minor);
  yy_destructor(yypParser,17,&yymsp[-3].minor);
  yy_destructor(yypParser,2,&yymsp[-1].minor);
}
#line 3395 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 174: /* stmt_common ::= stmt_switch LPN condition RPN stmt_reblock stmt_list RPN */
#line 1129 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-6].minor.yy267->value     = yymsp[-4].minor.yy259;
                    yymsp[-6].minor.yy267->body      = yymsp[-2].minor.yy268;
                    p->close_switch( yymsp[-6].minor.yy267->scope );
                    yygotominor.yy259 = yymsp[-6].minor.yy267;
                  yy_destructor(yypParser,7,&yymsp[-5].minor);
  yy_destructor(yypParser,17,&yymsp[-3].minor);
  yy_destructor(yypParser,114,&yymsp[-1].minor);
  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 3409 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 175: /* stmt_common ::= stmt_while LPN condition RPN stmt_reuse */
#line 1137 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-4].minor.yy278->condition = yymsp[-2].minor.yy259;
                    yymsp[-4].minor.yy278->body      = yymsp[0].minor.yy259;
                    p->close_scope( yymsp[-4].minor.yy278->scope );
                    yygotominor.yy259 = yymsp[-4].minor.yy278;
                  yy_destructor(yypParser,7,&yymsp[-3].minor);
  yy_destructor(yypParser,17,&yymsp[-1].minor);
}
#line 3421 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 176: /* stmt_common ::= stmt_doblock WHILE LPN expr_assign RPN SEMICOLON */
#line 1145 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-5].minor.yy209->condition = yymsp[-2].minor.yy259;
                    p->close_scope( yymsp[-5].minor.yy209->scope );
                    yygotominor.yy259 = yymsp[-5].minor.yy209;
                  yy_destructor(yypParser,70,&yymsp[-4].minor);
  yy_destructor(yypParser,7,&yymsp[-3].minor);
  yy_destructor(yypParser,17,&yymsp[-1].minor);
  yy_destructor(yypParser,16,&yymsp[0].minor);
}
#line 3434 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 177: /* stmt_common ::= stmt_foreach stmt_reuse */
#line 1151 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy237->body      = yymsp[0].minor.yy259;
                    p->close_scope( yymsp[-1].minor.yy237->scope );
                    yygotominor.yy259 = yymsp[-1].minor.yy237;
                }
#line 3443 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 178: /* stmt_common ::= stmt_for stmt_reuse */
#line 1157 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy16->body      = yymsp[0].minor.yy259;
                    p->close_scope( yymsp[-1].minor.yy16->scope );
                    yygotominor.yy259 = yymsp[-1].minor.yy16;
                }
#line 3452 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 179: /* stmt_common ::= stmt_using LPN condition RPN stmt_reuse */
#line 1164 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-4].minor.yy227->uvalue    = yymsp[-2].minor.yy259;
                    yymsp[-4].minor.yy227->body      = yymsp[0].minor.yy259;
                    p->close_scope( yymsp[-4].minor.yy227->scope );
                    yygotominor.yy259 = yymsp[-4].minor.yy227;
                  yy_destructor(yypParser,7,&yymsp[-3].minor);
  yy_destructor(yypParser,17,&yymsp[-1].minor);
}
#line 3464 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 181: /* stmt_common ::= DELETE expr_lbody SEMICOLON */
#line 1175 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->delstmt( yymsp[-2].minor.yy0->sloc, yymsp[-1].minor.yy259 );
                    p->destroy( yymsp[-2].minor.yy0 );
                  yy_destructor(yypParser,16,&yymsp[0].minor);
}
#line 3473 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 182: /* stmt_common ::= CASE expr_value COLON */
#line 1180 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_stmt_case >( yymsp[-2].minor.yy0->sloc, yymsp[-1].minor.yy259 );
                    p->destroy( yymsp[-2].minor.yy0 );
                  yy_destructor(yypParser,15,&yymsp[0].minor);
}
#line 3482 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 183: /* stmt_common ::= DEFAULT COLON */
#line 1185 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_stmt_case >( yymsp[-1].minor.yy0->sloc, nullptr );
                    p->destroy( yymsp[-1].minor.yy0 );
                  yy_destructor(yypParser,15,&yymsp[0].minor);
}
#line 3491 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 184: /* stmt_common ::= CONTINUE SEMICOLON */
#line 1190 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    xec_ast_scope* target = p->continue_target( yymsp[-1].minor.yy0->sloc );
                    yygotominor.yy259 = p->alloc< xec_stmt_continue >(
                                yymsp[-1].minor.yy0->sloc, p->get_scope(), target );
                    target->continued = true;
                    p->destroy( yymsp[-1].minor.yy0 );
                  yy_destructor(yypParser,16,&yymsp[0].minor);
}
#line 3503 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 185: /* stmt_common ::= BREAK SEMICOLON */
#line 1198 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    xec_ast_scope* target = p->break_target( yymsp[-1].minor.yy0->sloc );
                    yygotominor.yy259 = p->alloc< xec_stmt_break >(
                                yymsp[-1].minor.yy0->sloc, p->get_scope(), target );
                    p->destroy( yymsp[-1].minor.yy0 );
                  yy_destructor(yypParser,16,&yymsp[0].minor);
}
#line 3514 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 186: /* stmt_common ::= RETURN SEMICOLON */
#line 1205 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_stmt_return >(
                                yymsp[-1].minor.yy0->sloc, p->get_scope(), nullptr );
                    p->destroy( yymsp[-1].minor.yy0 );
                  yy_destructor(yypParser,16,&yymsp[0].minor);
}
#line 3524 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 187: /* stmt_common ::= RETURN expr_list SEMICOLON */
#line 1211 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_stmt_return >(
                                yymsp[-2].minor.yy0->sloc, p->get_scope(), yymsp[-1].minor.yy259 );
                    p->destroy( yymsp[-2].minor.yy0 );
                  yy_destructor(yypParser,16,&yymsp[0].minor);
}
#line 3534 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 188: /* stmt_common ::= token_yield SEMICOLON */
#line 1217 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    p->check_yield( yymsp[-1].minor.yy19->sloc );
                    yygotominor.yy259 = p->alloc< xec_expr_yield >( yymsp[-1].minor.yy19->sloc, nullptr );
                    p->destroy( yymsp[-1].minor.yy19 );
                  yy_destructor(yypParser,16,&yymsp[0].minor);
}
#line 3544 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 189: /* stmt_common ::= token_yield expr_list SEMICOLON */
#line 1223 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_expr_yield >( yymsp[-2].minor.yy19->sloc, yymsp[-1].minor.yy259 );
                    p->destroy( yymsp[-2].minor.yy19 );
                  yy_destructor(yypParser,16,&yymsp[0].minor);
}
#line 3553 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 190: /* stmt_common ::= THROW expr_value SEMICOLON */
#line 1228 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_stmt_throw >( yymsp[-2].minor.yy0->sloc, yymsp[-1].minor.yy259 );
                    p->destroy( yymsp[-2].minor.yy0 );
                  yy_destructor(yypParser,16,&yymsp[0].minor);
}
#line 3562 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 191: /* stmt_if ::= IF */
#line 1237 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy188 = p->alloc< xec_stmt_if >( yymsp[0].minor.yy0->sloc );
                    yygotominor.yy188->scope = p->block_scope( yygotominor.yy188 );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3571 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 192: /* stmt_switch ::= SWITCH */
#line 1244 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy267 = p->alloc< xec_stmt_switch >( yymsp[0].minor.yy0->sloc );
                    yygotominor.yy267->scope = p->block_scope( yygotominor.yy267 );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3580 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 193: /* stmt_while ::= WHILE */
#line 1251 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy278 = p->alloc< xec_stmt_while >( yymsp[0].minor.yy0->sloc );
                    yygotominor.yy278->scope = p->block_scope( yygotominor.yy278 );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3589 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 194: /* stmt_do ::= DO */
#line 1258 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy209 = p->alloc< xec_stmt_do >( yymsp[0].minor.yy0->sloc );
                    yygotominor.yy209->scope = p->block_scope( yygotominor.yy209 );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3598 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 195: /* stmt_doblock ::= stmt_do stmt_reuse */
#line 1265 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy209->body = yymsp[0].minor.yy259;
                    p->dowhile( yymsp[-1].minor.yy209->scope );
                    yygotominor.yy209 = yymsp[-1].minor.yy209;
                }
#line 3607 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 196: /* scope_for ::= FOR */
#line 1272 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    // open scope before we know the kind of statement.
                    yygotominor.yy218 = make_token_scope( yymsp[0].minor.yy0, p->block_scope( nullptr ) );
                }
#line 3615 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 197: /* stmt_foreach ::= scope_for LPN expr_lbody COLON expr_value RPN */
#line 1279 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy237 = p->foreachstmt( yymsp[-5].minor.yy218.token->sloc,
                            yymsp[-5].minor.yy218.scope, yymsp[-3].minor.yy259, yymsp[-1].minor.yy259, false, false );
                    p->destroy( yymsp[-5].minor.yy218.token );
                  yy_destructor(yypParser,7,&yymsp[-4].minor);
  yy_destructor(yypParser,15,&yymsp[-2].minor);
  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 3627 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 198: /* stmt_foreach ::= scope_for LPN expr_lbody EACHKEY expr_value RPN */
#line 1286 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy237 = p->foreachstmt( yymsp[-5].minor.yy218.token->sloc,
                            yymsp[-5].minor.yy218.scope, yymsp[-3].minor.yy259, yymsp[-1].minor.yy259, false, true );
                    p->destroy( yymsp[-5].minor.yy218.token );
                  yy_destructor(yypParser,7,&yymsp[-4].minor);
  yy_destructor(yypParser,81,&yymsp[-2].minor);
  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 3639 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 199: /* stmt_foreach ::= scope_for LPN VAR name_list COLON expr_value RPN */
#line 1293 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy237 = p->foreachstmt( yymsp[-6].minor.yy218.token->sloc,
                            yymsp[-6].minor.yy218.scope, yymsp[-3].minor.yy259, yymsp[-1].minor.yy259, true, false );
                    p->destroy( yymsp[-6].minor.yy218.token );
                  yy_destructor(yypParser,7,&yymsp[-5].minor);
  yy_destructor(yypParser,18,&yymsp[-4].minor);
  yy_destructor(yypParser,15,&yymsp[-2].minor);
  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 3652 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 200: /* stmt_foreach ::= scope_for LPN VAR name_list EACHKEY expr_value RPN */
#line 1300 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy237 = p->foreachstmt( yymsp[-6].minor.yy218.token->sloc,
                            yymsp[-6].minor.yy218.scope, yymsp[-3].minor.yy259, yymsp[-1].minor.yy259, true, true );
                    p->destroy( yymsp[-6].minor.yy218.token );
                  yy_destructor(yypParser,7,&yymsp[-5].minor);
  yy_destructor(yypParser,18,&yymsp[-4].minor);
  yy_destructor(yypParser,81,&yymsp[-2].minor);
  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 3665 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 201: /* stmt_for ::= scope_for LPN for_cond SEMICOLON for_expr SEMICOLON for_expr RPN */
#line 1310 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy16 = p->alloc< xec_stmt_for >( yymsp[-7].minor.yy218.token->sloc );
                    yymsp[-7].minor.yy218.scope->node = yygotominor.yy16;
                    yygotominor.yy16->scope        = yymsp[-7].minor.yy218.scope;
                    yygotominor.yy16->init         = yymsp[-5].minor.yy259;
                    yygotominor.yy16->condition    = yymsp[-3].minor.yy259;
                    yygotominor.yy16->update       = yymsp[-1].minor.yy259;
                    p->destroy( yymsp[-7].minor.yy218.token );
                  yy_destructor(yypParser,7,&yymsp[-6].minor);
  yy_destructor(yypParser,16,&yymsp[-4].minor);
  yy_destructor(yypParser,16,&yymsp[-2].minor);
  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 3682 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 202: /* for_cond ::= */
      case 204: /* for_expr ::= */ yytestcase(yyruleno==204);
#line 1321 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = nullptr;
                }
#line 3690 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 206: /* stmt_using ::= USING */
#line 1339 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy227 = p->alloc< xec_stmt_using >( yymsp[0].minor.yy0->sloc );
                    yygotominor.yy227->scope = p->block_scope( yygotominor.yy227 );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3699 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 207: /* stmt_try ::= try_catch */
#line 1349 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = yymsp[0].minor.yy224;
                }
#line 3706 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 208: /* stmt_try ::= try_catch FINALLY stmt */
      case 209: /* stmt_try ::= try_block FINALLY stmt */ yytestcase(yyruleno==209);
#line 1353 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-2].minor.yy224->fstmt = yymsp[0].minor.yy259;
                    yygotominor.yy259 = yymsp[-2].minor.yy224;
                  yy_destructor(yypParser,5,&yymsp[-1].minor);
}
#line 3716 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 210: /* try_block ::= TRY stmt */
#line 1364 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy224 = p->alloc< xec_stmt_try >( yymsp[-1].minor.yy0->sloc, yymsp[0].minor.yy259 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 3724 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 211: /* try_catch ::= try_block stmt_catch stmt_reuse */
      case 212: /* try_catch ::= try_catch stmt_catch stmt_reuse */ yytestcase(yyruleno==212);
#line 1370 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy256->body = yymsp[0].minor.yy259;
                    p->close_scope( yymsp[-1].minor.yy256->scope );
                    yymsp[-2].minor.yy224->clist.push_back( yymsp[-1].minor.yy256 );
                    yygotominor.yy224 = yymsp[-2].minor.yy224;
                }
#line 3735 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 213: /* scope_catch ::= CATCH */
#line 1385 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    // open scope here ready for declarations.
                    yygotominor.yy218 = make_token_scope( yymsp[0].minor.yy0, p->block_scope( nullptr ) );
                }
#line 3743 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 214: /* stmt_catch ::= scope_catch LPN COLON expr_simple RPN */
#line 1391 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy256 = p->catchstmt( yymsp[-4].minor.yy218.token->sloc,
                            yymsp[-4].minor.yy218.scope, nullptr, yymsp[-1].minor.yy259, false );
                    p->destroy( yymsp[-4].minor.yy218.token );
                  yy_destructor(yypParser,7,&yymsp[-3].minor);
  yy_destructor(yypParser,15,&yymsp[-2].minor);
  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 3755 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 215: /* stmt_catch ::= scope_catch LPN expr_value COLON expr_simple RPN */
#line 1398 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy256 = p->catchstmt( yymsp[-5].minor.yy218.token->sloc,
                            yymsp[-5].minor.yy218.scope, yymsp[-3].minor.yy259, yymsp[-1].minor.yy259, false );
                    p->destroy( yymsp[-5].minor.yy218.token );
                  yy_destructor(yypParser,7,&yymsp[-4].minor);
  yy_destructor(yypParser,15,&yymsp[-2].minor);
  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 3767 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 216: /* stmt_catch ::= scope_catch LPN VAR name COLON expr_simple RPN */
#line 1405 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy256 = p->catchstmt( yymsp[-6].minor.yy218.token->sloc,
                            yymsp[-6].minor.yy218.scope, yymsp[-3].minor.yy75, yymsp[-1].minor.yy259, true );
                    p->destroy( yymsp[-6].minor.yy218.token );
                  yy_destructor(yypParser,7,&yymsp[-5].minor);
  yy_destructor(yypParser,18,&yymsp[-4].minor);
  yy_destructor(yypParser,15,&yymsp[-2].minor);
  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 3780 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 217: /* stmt_catch ::= scope_catch LPN expr_value RPN */
#line 1411 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy256 = p->catchstmt( yymsp[-3].minor.yy218.token->sloc,
                            yymsp[-3].minor.yy218.scope, yymsp[-1].minor.yy259, nullptr, false );
                    p->destroy( yymsp[-3].minor.yy218.token );
                  yy_destructor(yypParser,7,&yymsp[-2].minor);
  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 3791 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 218: /* stmt_catch ::= scope_catch LPN VAR name RPN */
#line 1417 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy256 = p->catchstmt( yymsp[-4].minor.yy218.token->sloc,
                            yymsp[-4].minor.yy218.scope, yymsp[-1].minor.yy75, nullptr, true );
                    p->destroy( yymsp[-4].minor.yy218.token );
                  yy_destructor(yypParser,7,&yymsp[-3].minor);
  yy_destructor(yypParser,18,&yymsp[-2].minor);
  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 3803 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 219: /* token_yield ::= YIELD */
#line 1433 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy19 = yymsp[0].minor.yy0;
                }
#line 3810 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      default:
        break;
  };
  yygoto = yyRuleInfo[yyruleno].lhs;
  yysize = yyRuleInfo[yyruleno].nrhs;
  yypParser->yyidx -= yysize;
  yyact = yy_find_reduce_action(yymsp[-yysize].stateno,(YYCODETYPE)yygoto);
  if( yyact < YYNSTATE ){
#ifdef NDEBUG
    /* If we are not debugging and the reduce action popped at least
    ** one element off the stack, then we can push the new element back
    ** onto the stack here, and skip the stack overflow test in yy_shift().
    ** That gives a significant speed improvement. */
    if( yysize ){
      yypParser->yyidx++;
      yymsp -= yysize-1;
      yymsp->stateno = (YYACTIONTYPE)yyact;
      yymsp->major = (YYCODETYPE)yygoto;
      yymsp->minor = yygotominor;
    }else
#endif
    {
      yy_shift(yypParser,yyact,yygoto,&yygotominor);
    }
  }else{
    assert( yyact == YYNSTATE + YYNRULE + 1 );
    yy_accept(yypParser);
  }
}

/*
** The following code executes when the parse fails
*/
#ifndef YYNOERRORRECOVERY
static void yy_parse_failed(
  yyParser *yypParser           /* The parser */
){
  XecParseARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sFail!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser fails */
  XecParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}
#endif /* YYNOERRORRECOVERY */

/*
** The following code executes when a syntax error first occurs.
*/
static void yy_syntax_error(
  yyParser *yypParser,           /* The parser */
  int yymajor,                   /* The major type of the error token */
  YYMINORTYPE yyminor            /* The minor type of the error token */
){
  XecParseARG_FETCH;
#define TOKEN (yyminor.yy0)
#line 1445 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"

    p->get_root()->script->error( TOKEN->sloc,
            "unexpected %s", TOKEN->get_spelling().c_str() );
#line 3876 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
  XecParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/*
** The following is executed when the parser accepts
*/
static void yy_accept(
  yyParser *yypParser           /* The parser */
){
  XecParseARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sAccept!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser accepts */
  XecParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/* The main parser program.
** The first argument is a pointer to a structure obtained from
** "XecParseAlloc" which describes the current state of the parser.
** The second argument is the major token number.  The third is
** the minor token.  The fourth optional argument is whatever the
** user wants (and specified in the grammar) and is available for
** use by the action routines.
**
** Inputs:
** <ul>
** <li> A pointer to the parser (an opaque structure.)
** <li> The major token number.
** <li> The minor token number.
** <li> An option argument of a grammar-specified type.
** </ul>
**
** Outputs:
** None.
*/
void XecParse(
  void *yyp,                   /* The parser */
  int yymajor,                 /* The major token code number */
  XecParseTOKENTYPE yyminor       /* The value for the token */
  XecParseARG_PDECL               /* Optional %extra_argument parameter */
){
  YYMINORTYPE yyminorunion;
  int yyact;            /* The parser action. */
  int yyendofinput;     /* True if we are at the end of input */
#ifdef YYERRORSYMBOL
  int yyerrorhit = 0;   /* True if yymajor has invoked an error */
#endif
  yyParser *yypParser;  /* The parser */

  /* (re)initialize the parser, if necessary */
  yypParser = (yyParser*)yyp;
  if( yypParser->yyidx<0 ){
#if YYSTACKDEPTH<=0
    if( yypParser->yystksz <=0 ){
      /*memset(&yyminorunion, 0, sizeof(yyminorunion));*/
      yyminorunion = yyzerominor;
      yyStackOverflow(yypParser, &yyminorunion);
      return;
    }
#endif
    yypParser->yyidx = 0;
    yypParser->yyerrcnt = -1;
    yypParser->yystack[0].stateno = 0;
    yypParser->yystack[0].major = 0;
  }
  yyminorunion.yy0 = yyminor;
  yyendofinput = (yymajor==0);
  XecParseARG_STORE;

#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sInput %s\n",yyTracePrompt,yyTokenName[yymajor]);
  }
#endif

  do{
    yyact = yy_find_shift_action(yypParser,(YYCODETYPE)yymajor);
    if( yyact<YYNSTATE ){
      assert( !yyendofinput );  /* Impossible to shift the $ token */
      yy_shift(yypParser,yyact,yymajor,&yyminorunion);
      yypParser->yyerrcnt--;
      yymajor = YYNOCODE;
    }else if( yyact < YYNSTATE + YYNRULE ){
      yy_reduce(yypParser,yyact-YYNSTATE);
    }else{
      assert( yyact == YY_ERROR_ACTION );
#ifdef YYERRORSYMBOL
      int yymx;
#endif
#ifndef NDEBUG
      if( yyTraceFILE ){
        fprintf(yyTraceFILE,"%sSyntax Error!\n",yyTracePrompt);
      }
#endif
#ifdef YYERRORSYMBOL
      /* A syntax error has occurred.
      ** The response to an error depends upon whether or not the
      ** grammar defines an error token "ERROR".  
      **
      ** This is what we do if the grammar does define ERROR:
      **
      **  * Call the %syntax_error function.
      **
      **  * Begin popping the stack until we enter a state where
      **    it is legal to shift the error symbol, then shift
      **    the error symbol.
      **
      **  * Set the error count to three.
      **
      **  * Begin accepting and shifting new tokens.  No new error
      **    processing will occur until three tokens have been
      **    shifted successfully.
      **
      */
      if( yypParser->yyerrcnt<0 ){
        yy_syntax_error(yypParser,yymajor,yyminorunion);
      }
      yymx = yypParser->yystack[yypParser->yyidx].major;
      if( yymx==YYERRORSYMBOL || yyerrorhit ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE,"%sDiscard input token %s\n",
             yyTracePrompt,yyTokenName[yymajor]);
        }
#endif
        yy_destructor(yypParser, (YYCODETYPE)yymajor,&yyminorunion);
        yymajor = YYNOCODE;
      }else{
         while(
          yypParser->yyidx >= 0 &&
          yymx != YYERRORSYMBOL &&
          (yyact = yy_find_reduce_action(
                        yypParser->yystack[yypParser->yyidx].stateno,
                        YYERRORSYMBOL)) >= YYNSTATE
        ){
          yy_pop_parser_stack(yypParser);
        }
        if( yypParser->yyidx < 0 || yymajor==0 ){
          yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
          yy_parse_failed(yypParser);
          yymajor = YYNOCODE;
        }else if( yymx!=YYERRORSYMBOL ){
          YYMINORTYPE u2;
          u2.YYERRSYMDT = 0;
          yy_shift(yypParser,yyact,YYERRORSYMBOL,&u2);
        }
      }
      yypParser->yyerrcnt = 3;
      yyerrorhit = 1;
#elif defined(YYNOERRORRECOVERY)
      /* If the YYNOERRORRECOVERY macro is defined, then do not attempt to
      ** do any kind of error recovery.  Instead, simply invoke the syntax
      ** error routine and continue going as if nothing had happened.
      **
      ** Applications can set this macro (for example inside %include) if
      ** they intend to abandon the parse upon the first syntax error seen.
      */
      yy_syntax_error(yypParser,yymajor,yyminorunion);
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      yymajor = YYNOCODE;
      
#else  /* YYERRORSYMBOL is not defined */
      /* This is what we do if the grammar does not define ERROR:
      **
      **  * Report an error message, and throw away the input token.
      **
      **  * If the input token is $, then fail the parse.
      **
      ** As before, subsequent error messages are suppressed until
      ** three input tokens have been successfully shifted.
      */
      if( yypParser->yyerrcnt<=0 ){
        yy_syntax_error(yypParser,yymajor,yyminorunion);
      }
      yypParser->yyerrcnt = 3;
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      if( yyendofinput ){
        yy_parse_failed(yypParser);
      }
      yymajor = YYNOCODE;
#endif
    }
  }while( yymajor!=YYNOCODE && yypParser->yyidx>=0 );
  return;
}
