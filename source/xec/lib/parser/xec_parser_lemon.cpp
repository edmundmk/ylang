/* Driver template for the LEMON parser generator.
** The author disclaims copyright to this source code.
*/
/* First off, code is included that follows the "include" declaration
** in the input grammar file. */
#include <stdio.h>
#line 19 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"


#include <assert.h>
#include "xec_parser.h"
#include "xec_token.h"
#include "xec_ast.h"



struct xec_token_scope
{
    xec_token*          token;
    xec_ast_scope*      scope;
};

inline xec_token_scope make_token_scope(
                xec_token* token, xec_ast_scope* scope )
{
    xec_token_scope result;
    result.token = token;
    result.scope = scope;
    return result;
}


struct xec_token_op
{
    xec_token*          token;
    xec_operator_kind   op;
};

inline xec_token_op make_token_op(
                xec_token* token, xec_operator_kind op )
{
    xec_token_op result;
    result.token = token;
    result.op = op;
    return result;
}


#line 107 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"



void xec_parser::destroy( xec_token* token )
{
    token->~xec_token();
    recycle_tokens.push_back( token );
}


#line 61 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
/* Next is all token values, in a form suitable for use by makeheaders.
** This section will be null unless lemon is run with the -m switch.
*/
/* 
** These constants (all generated automatically by the parser generator)
** specify the various kinds of tokens (terminals) that the parser
** understands. 
**
** Each symbol here is a terminal symbol in the grammar.
*/
/* Make sure the INTERFACE macro is defined.
*/
#ifndef INTERFACE
# define INTERFACE 1
#endif
/* The next thing included is series of defines which control
** various aspects of the generated parser.
**    YYCODETYPE         is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 terminals
**                       and nonterminals.  "int" is used otherwise.
**    YYNOCODE           is a number of type YYCODETYPE which corresponds
**                       to no legal terminal or nonterminal number.  This
**                       number is used to fill in empty slots of the hash 
**                       table.
**    YYFALLBACK         If defined, this indicates that one or more tokens
**                       have fall-back values which should be used if the
**                       original value of the token will not parse.
**    YYACTIONTYPE       is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 rules and
**                       states combined.  "int" is used otherwise.
**    XecParseTOKENTYPE     is the data type used for minor tokens given 
**                       directly to the parser from the tokenizer.
**    YYMINORTYPE        is the data type used for all minor tokens.
**                       This is typically a union of many types, one of
**                       which is XecParseTOKENTYPE.  The entry in the union
**                       for base tokens is called "yy0".
**    YYSTACKDEPTH       is the maximum depth of the parser's stack.  If
**                       zero the stack is dynamically sized using realloc()
**    XecParseARG_SDECL     A static variable declaration for the %extra_argument
**    XecParseARG_PDECL     A parameter declaration for the %extra_argument
**    XecParseARG_STORE     Code to store %extra_argument into yypParser
**    XecParseARG_FETCH     Code to extract %extra_argument from yypParser
**    YYNSTATE           the combined number of states.
**    YYNRULE            the number of rules in the grammar
**    YYERRORSYMBOL      is the code number of the error symbol.  If not
**                       defined, then do no error processing.
*/
#define YYCODETYPE unsigned char
#define YYNOCODE 161
#define YYACTIONTYPE unsigned short int
#define XecParseTOKENTYPE  xec_token* 
typedef union {
  int yyinit;
  XecParseTOKENTYPE yy0;
  xec_stmt_try* yy12;
  xec_expr_call* yy28;
  xec_stmt_for* yy56;
  xec_unqual_list* yy59;
  xec_new_list* yy67;
  xec_new_table* yy71;
  xec_stmt_switch* yy79;
  xec_stmt_block* yy116;
  xec_stmt_do* yy128;
  xec_new_object* yy142;
  xec_expr_yield* yy159;
  xec_stmt_while* yy174;
  xec_token_op yy179;
  xec_unqual_name* yy196;
  xec_token* yy203;
  xec_unqual_proto* yy207;
  xec_stmt_catch* yy224;
  xec_token_scope yy242;
  xec_stmt_foreach* yy253;
  xec_stmt_if* yy256;
  xec_ast_func* yy261;
  xec_stmt_using* yy283;
  xec_ast_node* yy303;
} YYMINORTYPE;
#ifndef YYSTACKDEPTH
#define YYSTACKDEPTH 100
#endif
#define XecParseARG_SDECL  xec_parser* p ;
#define XecParseARG_PDECL , xec_parser* p 
#define XecParseARG_FETCH  xec_parser* p  = yypParser->p 
#define XecParseARG_STORE yypParser->p  = p 
#define YYNSTATE 495
#define YYNRULE 262
#define YY_NO_ACTION      (YYNSTATE+YYNRULE+2)
#define YY_ACCEPT_ACTION  (YYNSTATE+YYNRULE+1)
#define YY_ERROR_ACTION   (YYNSTATE+YYNRULE)

/* The yyzerominor constant is used to initialize instances of
** YYMINORTYPE objects to zero. */
static const YYMINORTYPE yyzerominor = { 0 };

/* Define the yytestcase() macro to be a no-op if is not already defined
** otherwise.
**
** Applications can choose to define yytestcase() in the %include section
** to a macro that can assist in verifying code coverage.  For production
** code the yytestcase() macro should be turned off.  But it is useful
** for testing.
*/
#ifndef yytestcase
# define yytestcase(X)
#endif


/* Next are the tables used to determine what action to take based on the
** current state and lookahead token.  These tables are used to implement
** functions that take a state number and lookahead value and return an
** action integer.  
**
** Suppose the action integer is N.  Then the action is determined as
** follows
**
**   0 <= N < YYNSTATE                  Shift N.  That is, push the lookahead
**                                      token onto the stack and goto state N.
**
**   YYNSTATE <= N < YYNSTATE+YYNRULE   Reduce by rule N-YYNSTATE.
**
**   N == YYNSTATE+YYNRULE              A syntax error has occurred.
**
**   N == YYNSTATE+YYNRULE+1            The parser accepts its input.
**
**   N == YYNSTATE+YYNRULE+2            No such action.  Denotes unused
**                                      slots in the yy_action[] table.
**
** The action table is constructed as a single large table named yy_action[].
** Given state S and lookahead X, the action is computed as
**
**      yy_action[ yy_shift_ofst[S] + X ]
**
** If the index value yy_shift_ofst[S]+X is out of range or if the value
** yy_lookahead[yy_shift_ofst[S]+X] is not equal to X or if yy_shift_ofst[S]
** is equal to YY_SHIFT_USE_DFLT, it means that the action is not in the table
** and that yy_default[S] should be used instead.  
**
** The formula above is for computing the action when the lookahead is
** a terminal symbol.  If the lookahead is a non-terminal (as occurs after
** a reduce action) then the yy_reduce_ofst[] array is used in place of
** the yy_shift_ofst[] array and YY_REDUCE_USE_DFLT is used in place of
** YY_SHIFT_USE_DFLT.
**
** The following are the tables generated in this section:
**
**  yy_action[]        A single table containing all actions.
**  yy_lookahead[]     A table containing the lookahead for each entry in
**                     yy_action.  Used to detect hash collisions.
**  yy_shift_ofst[]    For each state, the offset into yy_action for
**                     shifting terminals.
**  yy_reduce_ofst[]   For each state, the offset into yy_action for
**                     shifting non-terminals after a reduce.
**  yy_default[]       Default action for each state.
*/
static const YYACTIONTYPE yy_action[] = {
 /*     0 */   124,  125,  129,  154,  151,  156,  153,  286,  758,    6,
 /*    10 */   342,  247,    7,  344,  117,  460,  155,  359,  240,  229,
 /*    20 */   225,   18,  280,   14,   12,  215,  113,  112,   82,   73,
 /*    30 */    32,  176,  175,  126,  214,   34,  408,  178,  306,  295,
 /*    40 */   409,  462,  276,  190,  111,  137,   53,  351,  134,  131,
 /*    50 */   312,  169,  321,  159,  179,  163,  230,  231,  234,  237,
 /*    60 */   121,  242,  239,  168,  385,  297,  404,  119,  405,  241,
 /*    70 */   301,  407,  413,  287,  429,  127,  125,  129,  303,  151,
 /*    80 */    34,  153,  200,   67,  373,  338,  110,  170,  182,   40,
 /*    90 */   146,  354,  150,  240,  229,  225,   18,  280,   14,   12,
 /*   100 */   215,  113,  112,  174,   34,   32,  167,  288,  140,  352,
 /*   110 */    34,  464,  172,  306,  109,   52,  103,   98,  100,  104,
 /*   120 */   137,   47,  382,  134,  131,  312,  169,  321,  159,  179,
 /*   130 */   163,  230,  231,  234,  237,  121,  242,  239,  168,  385,
 /*   140 */   299,  404,  119,  405,  241,   93,   94,  424,  427,  429,
 /*   150 */   127,  125,  129,  355,  151,   34,  153,  177,  489,  471,
 /*   160 */   338,  110,   90,   92,   91,  488,   49,  150,  240,  229,
 /*   170 */   225,   18,  280,   14,   12,  215,  113,  112,  256,   34,
 /*   180 */    32,  167,  381,  140,  482,   34,  487,  178,  306,   54,
 /*   190 */    52,  244,   35,  149,  421,  137,   55,  352,  134,  131,
 /*   200 */   312,  169,  321,  159,  179,  163,  230,  231,  234,  237,
 /*   210 */   121,  242,  239,  168,  385,  152,  404,  119,  405,  241,
 /*   220 */    28,  286,  424,  221,  429,  127,  125,  129,  355,  151,
 /*   230 */   139,  153,  459,   16,   36,  145,   59,   38,  149,   37,
 /*   240 */   142,  155,  138,  240,  229,  225,   18,  280,   14,   12,
 /*   250 */   215,  113,  112,  160,  161,   32,   69,  304,  140,  486,
 /*   260 */    34,  173,  167,  306,   37,  142,  194,   76,   35,  149,
 /*   270 */   137,   78,  362,  134,  131,  312,  169,  321,  159,  179,
 /*   280 */   163,  230,  231,  234,  237,  121,  242,  239,  168,  385,
 /*   290 */   468,  404,  119,  405,  241,  430,  455,  413,   75,  429,
 /*   300 */   127,  125,  129,   68,  151,  286,  153,  279,  473,  313,
 /*   310 */   314,  344,  117,  360,   39,  142,  472,  150,  240,  229,
 /*   320 */   225,   18,  280,   14,   12,  215,  113,  112,   34,   34,
 /*   330 */    32,  181,   34,  140,  177,   34,  187,  177,  306,  180,
 /*   340 */    72,  247,    9,   49,  384,  137,   74,    4,  134,  131,
 /*   350 */   312,  169,  321,  159,  179,  163,  230,  231,  234,  237,
 /*   360 */   121,  242,  239,  168,  385,   96,  404,  119,  405,  241,
 /*   370 */     3,    1,  424,  428,  429,  127,  125,  129,  290,  151,
 /*   380 */    34,  153,  186,  459,   11,   95,    2,    5,   63,  410,
 /*   390 */   492,   58,  150,  240,  229,  225,   18,  280,   14,   12,
 /*   400 */   215,  113,  112,  439,   34,   32,  181,   34,  140,  165,
 /*   410 */    34,  494,  172,  306,  363,   51,  339,  285,   62,  438,
 /*   420 */   137,   61,  436,  134,  131,  312,  169,  321,  159,  179,
 /*   430 */   163,  230,  231,  234,  237,  121,  242,  239,  168,  385,
 /*   440 */   148,  404,  119,  405,  241,  366,  305,  424,  458,  429,
 /*   450 */   127,  125,  129,  296,  151,   34,  153,  165,  287,   64,
 /*   460 */    81,  434,   79,   65,  449,  433,   46,  150,  240,  229,
 /*   470 */   225,   18,  280,   14,   12,  215,  113,  112,  481,   34,
 /*   480 */    32,  186,  298,  140,  302,  369,  300,  337,  306,  370,
 /*   490 */    48,   10,   66,  432,   60,  137,   56,  431,  134,  131,
 /*   500 */   312,  169,  321,  159,  179,  163,  230,  231,  234,  237,
 /*   510 */   121,  242,  239,  168,  385,  289,  404,  119,  405,  241,
 /*   520 */   371,  372,  424,  466,  429,  127,  125,  129,   21,  151,
 /*   530 */   425,  153,  216,  374,   26,  375,  219,   43,  448,   57,
 /*   540 */   445,    8,  150,  240,  229,  225,   18,  280,   14,   12,
 /*   550 */   215,  113,  112,   22,  490,   32,   83,   31,  140,  483,
 /*   560 */    23,  143,   89,  306,   88,   13,  359,   19,  484,   87,
 /*   570 */   137,   84,   20,  134,  131,  312,  169,  321,  159,  179,
 /*   580 */   163,  230,  231,  234,  237,  121,  242,  239,  168,  385,
 /*   590 */   415,  404,  119,  405,  241,  447,  461,  424,  465,  429,
 /*   600 */   127,  125,  129,   86,  151,  351,  153,  463,  485,  350,
 /*   610 */    50,  293,  349,  411,  348,  470,  155,  361,  240,  229,
 /*   620 */   225,   18,  280,   14,   12,  215,  113,  112,  294,  446,
 /*   630 */    32,  347,  476,  140,  474,  354,  451,   25,  306,  491,
 /*   640 */   291,   42,   24,  450,  357,  137,  341,  480,  134,  131,
 /*   650 */   312,  169,  321,  159,  179,  163,  230,  231,  234,  237,
 /*   660 */   121,  242,  239,  168,  385,   27,  404,  119,  405,  241,
 /*   670 */    85,  457,  413,  759,  429,  127,  125,  129,   29,  151,
 /*   680 */   759,  153,  759,  759,  759,  759,  759,  759,  759,  759,
 /*   690 */   759,  155,  759,  240,  229,  225,   18,  280,   14,   12,
 /*   700 */   215,  113,  112,  759,  759,   32,  759,  759,  140,  759,
 /*   710 */   759,  759,  759,  306,  759,  759,  759,  759,  759,  759,
 /*   720 */   137,  759,  759,  134,  131,  312,  169,  321,  159,  179,
 /*   730 */   163,  230,  231,  234,  237,  121,  242,  239,  168,  385,
 /*   740 */   759,  404,  119,  405,  241,  759,  456,  413,  759,  429,
 /*   750 */   127,  125,  129,  759,  151,  759,  153,  759,  759,  759,
 /*   760 */   759,  759,  759,  759,  759,  759,  155,  759,  240,  229,
 /*   770 */   225,   18,  280,   14,   12,  215,  113,  112,  759,  759,
 /*   780 */    32,  759,  759,  140,  759,  759,  759,  759,  306,  759,
 /*   790 */   759,  759,  759,  759,  759,  137,  759,  759,  134,  131,
 /*   800 */   312,  169,  321,  159,  179,  163,  230,  231,  234,  237,
 /*   810 */   121,  242,  239,  168,  385,  759,  404,  119,  405,  241,
 /*   820 */   759,  420,  413,  759,  429,  127,  125,  129,  759,  151,
 /*   830 */   759,  153,  759,  759,  759,  759,  759,  759,  759,  759,
 /*   840 */   759,  759,  150,  240,  229,  225,   18,  280,   14,   12,
 /*   850 */   215,  113,  112,  759,  759,   32,  759,  759,  140,  759,
 /*   860 */   759,  759,  759,  306,  759,  759,  759,  759,  759,  759,
 /*   870 */   137,  759,  759,  134,  131,  312,  169,  321,  159,  179,
 /*   880 */   163,  230,  231,  234,  237,  121,  242,  239,  168,  385,
 /*   890 */   759,  404,  119,  405,  241,  759,  759,  424,  426,  429,
 /*   900 */   127,  125,  129,  759,  151,  759,  153,  759,  759,  759,
 /*   910 */   759,  759,  759,  759,  759,  759,  155,  759,  240,  229,
 /*   920 */   225,   18,  280,   14,   12,  215,  113,  112,  759,  759,
 /*   930 */    32,  759,  759,  140,  759,  759,  759,  759,  306,  759,
 /*   940 */   759,  759,  759,  759,  759,  137,  759,  759,  134,  131,
 /*   950 */   312,  169,  321,  159,  179,  163,  230,  231,  234,  237,
 /*   960 */   121,  242,  239,  168,  385,  759,  404,  119,  405,  241,
 /*   970 */   759,  419,  413,  440,  429,   17,  759,  759,  227,   28,
 /*   980 */   286,  282,  759,  353,  414,  107,  406,  117,  759,  759,
 /*   990 */    30,  759,  114,  307,  308,  309,  310,  311,  101,  105,
 /*  1000 */   102,   99,  106,   97,  326,  327,  328,  329,  330,  331,
 /*  1010 */   332,  333,  334,  335,  759,  257,   28,  286,  257,   28,
 /*  1020 */   286,  358,  759,  759,  759,  759,  759,  147,  378,  114,
 /*  1030 */   759,  759,  114,  759,  759,  759,  759,  759,  759,  759,
 /*  1040 */   759,  442,   45,   77,  206,  204,  202,   33,   70,  441,
 /*  1050 */   443,  444,  440,  454,   17,  759,  759,  227,   28,  286,
 /*  1060 */   282,  759,  423,  414,  107,  406,  117,  759,  759,   30,
 /*  1070 */   759,  114,  307,  308,  309,  310,  311,  101,  105,  102,
 /*  1080 */    99,  106,   97,  759,  759,  759,  759,  759,  759,  759,
 /*  1090 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  1100 */   759,  759,  759,  759,  759,  759,  147,  378,  759,  759,
 /*  1110 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  1120 */   442,   45,   77,  206,  204,  202,   33,   70,  441,  443,
 /*  1130 */   444,  440,  454,   17,  759,  759,  227,   28,  286,  282,
 /*  1140 */   422,  759,  414,  107,  406,  117,  759,  759,   30,  759,
 /*  1150 */   114,  307,  308,  309,  310,  311,  101,  105,  102,   99,
 /*  1160 */   106,   97,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  1170 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  1180 */   759,  759,  759,  759,  759,  147,  378,  759,  759,  759,
 /*  1190 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  442,
 /*  1200 */    45,   77,  206,  204,  202,   33,   70,  441,  443,  444,
 /*  1210 */   440,  454,   17,  759,  759,  227,   28,  286,  282,  759,
 /*  1220 */   469,  414,  107,  406,  117,  759,  759,   30,  759,  114,
 /*  1230 */   307,  308,  309,  310,  311,  101,  105,  102,   99,  106,
 /*  1240 */    97,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  1250 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  1260 */   759,  759,  759,  759,  147,  378,  759,  759,  759,  759,
 /*  1270 */   759,  759,  759,  759,  759,  759,  759,  759,  442,   45,
 /*  1280 */    77,  206,  204,  202,   33,   70,  441,  443,  444,  440,
 /*  1290 */   454,   17,  759,  759,  227,   28,  286,  282,  759,  412,
 /*  1300 */   414,  107,  406,  117,  759,  759,   30,  759,  114,  307,
 /*  1310 */   308,  309,  310,  311,  101,  105,  102,   99,  106,   97,
 /*  1320 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  1330 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  1340 */   759,  759,  759,  147,  378,  759,  759,  759,  759,  759,
 /*  1350 */   759,  759,  759,  759,  759,  759,  759,  442,   45,   77,
 /*  1360 */   206,  204,  202,   33,   70,  441,  443,  444,  759,  454,
 /*  1370 */   495,  440,  759,   17,  759,  759,  227,   28,  286,  282,
 /*  1380 */   759,  759,  414,  107,  406,  117,  759,  759,   30,  759,
 /*  1390 */   114,  307,  308,  309,  310,  311,  101,  105,  102,   99,
 /*  1400 */   106,   97,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  1410 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  1420 */   759,  759,  759,  759,  759,  147,  378,  759,  759,  759,
 /*  1430 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  442,
 /*  1440 */    45,   77,  206,  204,  202,   33,   70,  441,  443,  444,
 /*  1450 */   440,  454,   17,  759,  759,  227,   28,  286,  282,  759,
 /*  1460 */   759,  421,  107,  128,  130,  133,  759,   30,  759,  114,
 /*  1470 */   307,  308,  309,  310,  311,  101,  105,  102,   99,  106,
 /*  1480 */    97,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  1490 */   759,  759,  759,  759,  759,  759,  132,  759,  759,  759,
 /*  1500 */   759,  306,  759,  759,  147,  378,  759,  759,  135,  759,
 /*  1510 */   759,  136,  141,  312,  169,  321,  159,  189,  442,   45,
 /*  1520 */    77,  206,  204,  202,   33,   70,  441,  443,  444,  440,
 /*  1530 */   454,   17,  759,  759,  227,   28,  286,  282,  759,  759,
 /*  1540 */   414,  107,  759,  759,  759,  759,   30,  759,  114,  307,
 /*  1550 */   308,  309,  310,  311,  101,  105,  102,   99,  106,   97,
 /*  1560 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  1570 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  1580 */   128,  130,  133,  147,  378,  759,  759,  759,  127,  125,
 /*  1590 */   129,  759,  151,  759,  153,  759,  759,  442,   45,   77,
 /*  1600 */   206,  204,  202,   33,   70,  441,  443,  444,  759,  454,
 /*  1610 */   759,  759,  759,  132,  759,  759,  759,  759,  306,  759,
 /*  1620 */   759,  140,  759,  401,  759,  135,  306,  759,  136,  141,
 /*  1630 */   312,  169,  324,  137,  416,  376,  134,  131,  312,  169,
 /*  1640 */   321,  159,  179,  163,  230,  231,  234,  237,  121,  242,
 /*  1650 */   239,  168,  364,  118,  380,  759,  759,  759,  453,  759,
 /*  1660 */   257,   28,  286,  262,  759,  759,  759,  127,  125,  129,
 /*  1670 */   759,  151,  759,  153,  114,  307,  308,  309,  310,  311,
 /*  1680 */   101,  105,  102,   99,  106,   97,  759,  759,  759,  759,
 /*  1690 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  1700 */   140,  759,  401,  759,  759,  306,  759,  759,  759,  128,
 /*  1710 */   130,  133,  137,  452,  376,  134,  131,  312,  169,  321,
 /*  1720 */   159,  179,  163,  230,  231,  234,  237,  121,  242,  239,
 /*  1730 */   168,  364,  120,  380,  127,  125,  129,  759,  151,  759,
 /*  1740 */   153,  759,  132,  259,  759,  759,  759,  306,  759,  759,
 /*  1750 */   759,  759,  759,  759,  135,  759,  759,  136,  141,  312,
 /*  1760 */   169,  319,  759,  759,  759,  759,  759,  140,  759,  401,
 /*  1770 */   759,  759,  306,  759,  759,  759,  759,  759,  759,  137,
 /*  1780 */   452,  376,  134,  131,  312,  169,  321,  159,  179,  163,
 /*  1790 */   230,  231,  234,  237,  121,  242,  239,  168,  364,  120,
 /*  1800 */   380,  127,  125,  129,  759,  151,  759,  153,  759,  759,
 /*  1810 */   260,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  1820 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  1830 */   759,  759,  759,  759,  140,  759,  401,  759,  759,  306,
 /*  1840 */   759,  759,  128,  130,  133,  759,  137,  416,  376,  134,
 /*  1850 */   131,  312,  169,  321,  159,  179,  163,  230,  231,  234,
 /*  1860 */   237,  121,  242,  239,  168,  364,  120,  380,  127,  125,
 /*  1870 */   129,  232,  151,  759,  153,  132,  759,  759,  759,  759,
 /*  1880 */   306,  759,  759,  759,  759,  759,  759,  135,  759,  759,
 /*  1890 */   136,  141,  312,  169,  320,  759,  759,  759,  759,  759,
 /*  1900 */   759,  140,  759,  401,  759,  759,  306,  759,  759,  759,
 /*  1910 */   759,  759,  759,  137,  416,  376,  134,  131,  312,  169,
 /*  1920 */   321,  159,  179,  163,  230,  231,  234,  237,  121,  242,
 /*  1930 */   239,  168,  364,  120,  380,  127,  125,  129,  211,  151,
 /*  1940 */   759,  153,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  1950 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  1960 */   759,  759,  759,  759,  759,  759,  759,  759,  140,  759,
 /*  1970 */   401,  759,  759,  306,  128,  130,  133,  759,  759,  759,
 /*  1980 */   137,  416,  376,  134,  131,  312,  169,  321,  159,  179,
 /*  1990 */   163,  230,  231,  234,  237,  121,  242,  239,  168,  364,
 /*  2000 */   120,  380,  127,  125,  129,  224,  151,  132,  153,  759,
 /*  2010 */   759,  759,  306,  759,  759,  759,  759,  759,  759,  135,
 /*  2020 */   759,  759,  136,  141,  312,  169,  315,  759,  759,  759,
 /*  2030 */   759,  759,  759,  759,  759,  140,  759,  401,  759,  759,
 /*  2040 */   306,  759,  759,  759,  759,  759,  759,  137,  416,  376,
 /*  2050 */   134,  131,  312,  169,  321,  159,  179,  163,  230,  231,
 /*  2060 */   234,  237,  121,  242,  239,  168,  364,  120,  380,  127,
 /*  2070 */   125,  129,  228,  151,  759,  153,  759,  759,  759,  759,
 /*  2080 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  2090 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  2100 */   759,  759,  140,  759,  401,  759,  759,  306,  128,  130,
 /*  2110 */   133,  759,  759,  759,  137,  213,  376,  134,  131,  312,
 /*  2120 */   169,  321,  159,  179,  163,  230,  231,  234,  237,  121,
 /*  2130 */   242,  239,  168,  364,  120,  380,  127,  125,  129,  759,
 /*  2140 */   151,  132,  153,  759,  759,  759,  306,  759,  759,  759,
 /*  2150 */   759,  759,  759,  135,  759,  759,  136,  141,  312,  169,
 /*  2160 */   317,  759,  759,  759,  759,  759,  759,  759,  759,  140,
 /*  2170 */   759,  401,  759,  759,  306,  759,  759,  759,  759,  759,
 /*  2180 */   759,  137,  402,  376,  134,  131,  312,  169,  321,  159,
 /*  2190 */   179,  163,  230,  231,  234,  237,  121,  242,  239,  168,
 /*  2200 */   364,  120,  380,  127,  125,  129,  759,  151,  759,  153,
 /*  2210 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  2220 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  2230 */   759,  759,  759,  759,  759,  759,  140,  759,  401,  759,
 /*  2240 */   759,  306,  128,  130,  133,  759,  759,  759,  137,  403,
 /*  2250 */   376,  134,  131,  312,  169,  321,  159,  179,  163,  230,
 /*  2260 */   231,  234,  237,  121,  242,  239,  168,  364,  120,  380,
 /*  2270 */   127,  125,  129,  759,  151,  132,  153,  759,  759,  759,
 /*  2280 */   306,  759,  759,  759,  759,  759,  759,  135,  759,  759,
 /*  2290 */   136,  141,  312,  169,  323,  759,  759,  759,  759,  759,
 /*  2300 */   759,  759,  759,  140,  759,  401,  759,  759,  306,  759,
 /*  2310 */   759,  759,  759,  759,  759,  137,  217,  376,  134,  131,
 /*  2320 */   312,  169,  321,  159,  179,  163,  230,  231,  234,  237,
 /*  2330 */   121,  242,  239,  168,  364,  120,  380,  127,  125,  129,
 /*  2340 */   759,  151,  759,  153,  759,  759,  759,  759,  759,  759,
 /*  2350 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  2360 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  2370 */   140,  759,  193,  759,  759,  306,  128,  130,  133,  759,
 /*  2380 */   759,  759,  137,  759,  376,  134,  131,  312,  169,  321,
 /*  2390 */   159,  179,  163,  230,  231,  234,  237,  121,  242,  239,
 /*  2400 */   168,  364,  222,  380,  127,  125,  129,  759,  151,  132,
 /*  2410 */   153,  759,  759,  759,  306,  759,  759,  759,  759,  759,
 /*  2420 */   759,  135,  759,  759,  136,  141,  312,  169,  316,  759,
 /*  2430 */   759,  759,  759,  759,  759,  759,  759,  140,  759,  340,
 /*  2440 */   759,  759,  306,  759,  759,  759,  759,  759,  759,  137,
 /*  2450 */   759,  376,  134,  131,  312,  169,  321,  159,  179,  163,
 /*  2460 */   230,  231,  234,  237,  121,  242,  239,  168,  364,  222,
 /*  2470 */   380,  127,  125,  129,  759,  151,  759,  153,  759,  759,
 /*  2480 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  2490 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  2500 */   759,  759,  759,  759,  140,  759,  356,  759,  759,  306,
 /*  2510 */   128,  130,  133,  759,  759,  759,  137,  759,  376,  134,
 /*  2520 */   131,  312,  169,  321,  159,  179,  163,  230,  231,  234,
 /*  2530 */   237,  121,  242,  239,  168,  364,  222,  380,  127,  125,
 /*  2540 */   129,  759,  151,  132,  153,  759,  759,  759,  306,  759,
 /*  2550 */   759,  759,  759,  759,  759,  135,  759,  759,  136,  141,
 /*  2560 */   312,  169,  325,  759,  759,  759,  759,  759,  759,  759,
 /*  2570 */   759,  140,  759,  383,  759,  759,  306,  759,  759,  759,
 /*  2580 */   759,  759,  759,  137,  759,  376,  134,  131,  312,  169,
 /*  2590 */   321,  159,  179,  163,  230,  231,  234,  237,  121,  242,
 /*  2600 */   239,  168,  364,  222,  380,  127,  125,  129,  759,  151,
 /*  2610 */   759,  153,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  2620 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  2630 */   759,  759,  759,  759,  759,  759,  759,  759,  140,  759,
 /*  2640 */   417,  759,  759,  306,  128,  130,  133,  759,  759,  759,
 /*  2650 */   137,  759,  376,  134,  131,  312,  169,  321,  159,  179,
 /*  2660 */   163,  230,  231,  234,  237,  121,  242,  239,  168,  364,
 /*  2670 */   222,  380,  127,  125,  129,  759,  151,  132,  153,  759,
 /*  2680 */   759,  759,  306,  759,  759,  759,  759,  759,  759,  135,
 /*  2690 */   759,  759,  136,  141,  312,  169,  322,  759,  759,  759,
 /*  2700 */   759,  759,  759,  759,  759,  140,  759,  467,  759,  759,
 /*  2710 */   306,  759,  759,  759,  759,  759,  759,  137,  759,  376,
 /*  2720 */   134,  131,  312,  169,  321,  159,  179,  163,  230,  231,
 /*  2730 */   234,  237,  121,  242,  239,  168,  364,  222,  380,  127,
 /*  2740 */   125,  129,  759,  151,  759,  153,  759,  759,  759,  759,
 /*  2750 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  2760 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  2770 */   759,  759,  140,  759,  418,  759,  759,  306,  128,  130,
 /*  2780 */   133,  759,  759,  759,  137,  759,  376,  134,  131,  312,
 /*  2790 */   169,  321,  159,  179,  163,  230,  231,  234,  237,  121,
 /*  2800 */   242,  239,  168,  364,  222,  380,  127,  125,  129,  759,
 /*  2810 */   151,  132,  153,  759,  759,  759,  306,  759,  759,  759,
 /*  2820 */   759,  759,  759,  135,  759,  759,  136,  141,  312,  169,
 /*  2830 */   318,  759,  759,  759,  759,  759,  759,  759,  759,  140,
 /*  2840 */   759,  198,  759,  759,  306,  759,  759,  759,  759,  759,
 /*  2850 */   759,  137,  759,  376,  134,  131,  312,  169,  321,  159,
 /*  2860 */   179,  163,  230,  231,  234,  237,  121,  242,  239,  168,
 /*  2870 */   364,  222,  380,  127,  125,  129,  759,  151,  759,  153,
 /*  2880 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  2890 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  2900 */   759,  759,  759,  759,  759,  759,  140,  759,  196,  759,
 /*  2910 */   759,  306,  128,  130,  133,  759,  759,  759,  137,  759,
 /*  2920 */   376,  134,  131,  312,  169,  321,  159,  179,  163,  230,
 /*  2930 */   231,  234,  237,  121,  242,  239,  168,  364,  222,  380,
 /*  2940 */   127,  125,  129,  759,  151,  132,  153,  759,  759,  759,
 /*  2950 */   243,  759,  759,  759,  759,  759,  759,  135,  759,  759,
 /*  2960 */   136,  141,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  2970 */   759,  759,  759,  140,  759,  250,  759,  759,  306,  759,
 /*  2980 */   759,  759,  759,  759,  759,  137,  759,  376,  134,  131,
 /*  2990 */   312,  169,  321,  159,  179,  163,  230,  231,  234,  237,
 /*  3000 */   121,  242,  239,  168,  364,  222,  380,  127,  125,  129,
 /*  3010 */   759,  151,  759,  153,  759,  759,  759,  759,  759,  261,
 /*  3020 */   258,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  3030 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  3040 */   140,  759,  759,  759,  759,  306,  759,  759,  759,  759,
 /*  3050 */   759,  759,  137,  759,  477,  134,  131,  312,  169,  321,
 /*  3060 */   159,  179,  163,  230,  231,  234,  237,  121,  242,  239,
 /*  3070 */   168,  364,  759,  265,  128,  130,  133,  759,  151,  759,
 /*  3080 */   153,  759,  759,  759,  759,  759,  759,  759,  203,  199,
 /*  3090 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  3100 */   759,  759,   71,  759,  759,  386,   43,  132,  759,  759,
 /*  3110 */   759,  759,  306,  759,  759,  759,  759,  759,  759,  135,
 /*  3120 */   759,  201,  136,  141,  312,  169,  321,  159,  179,  163,
 /*  3130 */   230,  231,  234,  237,  121,  242,  239,  168,  364,  127,
 /*  3140 */   125,  129,  759,  151,  759,  153,  387,  388,  389,  390,
 /*  3150 */   391,  392,  393,  394,  395,  396,  397,  398,  759,  759,
 /*  3160 */   759,  759,  759,  759,  759,  759,  759,  759,  759,   80,
 /*  3170 */   759,  759,  140,  386,   44,  759,  759,  306,  759,  759,
 /*  3180 */   759,  759,  759,  759,  137,  759,  377,  134,  131,  312,
 /*  3190 */   169,  321,  159,  179,  163,  230,  231,  234,  237,  121,
 /*  3200 */   242,  239,  168,  364,  759,  379,  128,  130,  133,  759,
 /*  3210 */   151,  759,  153,  759,  387,  388,  389,  390,  391,  392,
 /*  3220 */   393,  394,  395,  396,  397,  398,  759,  759,  759,  759,
 /*  3230 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  132,
 /*  3240 */   386,   43,  759,  759,  306,  759,  759,  759,  759,  759,
 /*  3250 */   759,  135,  759,  376,  136,  141,  312,  169,  321,  159,
 /*  3260 */   179,  163,  230,  231,  234,  237,  121,  242,  239,  168,
 /*  3270 */   364,  188,  127,  125,  129,  759,  151,  759,  153,  759,
 /*  3280 */   759,  387,  388,  389,  390,  391,  392,  393,  394,  395,
 /*  3290 */   396,  397,  398,  759,  759,  759,  759,  759,  759,  759,
 /*  3300 */   759,  759,  759,  759,  759,  140,  759,  759,  759,  759,
 /*  3310 */   306,  759,  759,  759,  759,  759,  759,  137,  759,  399,
 /*  3320 */   134,  131,  312,  169,  321,  159,  179,  163,  230,  231,
 /*  3330 */   234,  237,  121,  242,  239,  168,  364,  759,  400,  127,
 /*  3340 */   125,  129,  759,  151,  759,  153,  759,  759,  759,  759,
 /*  3350 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  3360 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  3370 */   759,  759,  140,  759,  759,  759,  759,  306,  759,  759,
 /*  3380 */   759,  759,  759,  759,  137,  759,  478,  134,  131,  312,
 /*  3390 */   169,  321,  159,  179,  163,  230,  231,  234,  237,  121,
 /*  3400 */   242,  239,  168,  364,  759,  479,  128,  130,  133,  759,
 /*  3410 */   151,  759,  153,  759,  759,  759,  759,  759,  759,  759,
 /*  3420 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  3430 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  132,
 /*  3440 */   759,  759,  759,  759,  306,  759,  759,  759,  759,  759,
 /*  3450 */   759,  135,  759,  205,  136,  141,  312,  169,  321,  159,
 /*  3460 */   179,  163,  230,  231,  234,  237,  121,  242,  239,  168,
 /*  3470 */   364,  128,  130,  133,  759,  151,  759,  153,  759,  759,
 /*  3480 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  3490 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  3500 */   759,  759,  759,  759,  132,  759,  759,  759,  759,  306,
 /*  3510 */   759,  759,  759,  759,  759,  759,  135,  759,  281,  136,
 /*  3520 */   141,  312,  169,  321,  159,  179,  163,  230,  231,  234,
 /*  3530 */   237,  121,  242,  239,  168,  364,  759,  128,  130,  133,
 /*  3540 */   759,  151,  759,  153,  759,  759,  759,  759,  759,  759,
 /*  3550 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  3560 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  3570 */   132,  759,  759,  759,  759,  306,  759,  759,  759,  759,
 /*  3580 */   759,  759,  135,  759,  218,  136,  141,  312,  169,  321,
 /*  3590 */   159,  179,  163,  230,  231,  234,  237,  121,  242,  239,
 /*  3600 */   168,  364,  128,  130,  133,  759,  151,  759,  153,  759,
 /*  3610 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  3620 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  3630 */   759,  759,  759,  759,  759,  132,  759,  759,  759,  759,
 /*  3640 */   306,  759,  759,  759,  759,  759,  759,  135,  759,  283,
 /*  3650 */   136,  141,  312,  169,  321,  159,  179,  163,  230,  231,
 /*  3660 */   234,  237,  121,  242,  239,  168,  364,  759,  128,  130,
 /*  3670 */   133,  759,  151,  759,  153,  759,  759,  759,  759,  759,
 /*  3680 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  3690 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  3700 */   759,  132,  759,  759,  759,  759,  306,  759,  759,  759,
 /*  3710 */   759,  759,  759,  135,  759,  275,  136,  141,  312,  169,
 /*  3720 */   321,  159,  179,  163,  230,  231,  234,  237,  121,  242,
 /*  3730 */   239,  168,  364,  128,  130,  133,  759,  151,  759,  153,
 /*  3740 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  3750 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  3760 */   759,  759,  759,  759,  759,  759,  132,  759,  759,  759,
 /*  3770 */   759,  306,  759,  759,  759,  759,  759,  759,  135,  759,
 /*  3780 */   268,  136,  141,  312,  169,  321,  159,  179,  163,  230,
 /*  3790 */   231,  234,  237,  121,  242,  239,  168,  364,  759,  128,
 /*  3800 */   130,  133,  759,  151,  759,  153,  759,  759,  759,  759,
 /*  3810 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  3820 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  3830 */   759,  759,  132,  759,  759,  759,  759,  306,  759,  759,
 /*  3840 */   759,  759,  759,  759,  135,  759,  274,  136,  141,  312,
 /*  3850 */   169,  321,  159,  179,  163,  230,  231,  234,  237,  121,
 /*  3860 */   242,  239,  168,  364,  128,  130,  133,  759,  151,  759,
 /*  3870 */   153,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  3880 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  3890 */   759,  759,  759,  759,  759,  759,  759,  132,  759,  759,
 /*  3900 */   759,  759,  306,  759,  759,  759,  759,  759,  759,  135,
 /*  3910 */   759,  264,  136,  141,  312,  169,  321,  159,  179,  163,
 /*  3920 */   230,  231,  234,  237,  121,  242,  239,  168,  364,  759,
 /*  3930 */   128,  130,  133,  759,  151,  759,  153,  759,  759,  759,
 /*  3940 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  3950 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  3960 */   759,  759,  759,  132,  759,  759,  759,  759,  306,  759,
 /*  3970 */   759,  759,  759,  759,  759,  135,  759,  273,  136,  141,
 /*  3980 */   312,  169,  321,  159,  179,  163,  230,  231,  234,  237,
 /*  3990 */   121,  242,  239,  168,  364,  128,  130,  133,  759,  151,
 /*  4000 */   759,  153,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  4010 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  4020 */   759,  759,  759,  759,  759,  759,  759,  759,  132,  759,
 /*  4030 */   759,  759,  759,  306,  759,  759,  759,  759,  759,  759,
 /*  4040 */   135,  759,  336,  136,  141,  312,  169,  321,  159,  179,
 /*  4050 */   163,  230,  231,  234,  237,  121,  242,  239,  168,  364,
 /*  4060 */   759,  128,  130,  133,  759,  151,  759,  153,  759,  759,
 /*  4070 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  4080 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  4090 */   759,  759,  759,  759,  132,  759,  759,  759,  759,  306,
 /*  4100 */   759,  759,  759,  759,  759,  759,  135,  759,  271,  136,
 /*  4110 */   141,  312,  169,  321,  159,  179,  163,  230,  231,  234,
 /*  4120 */   237,  121,  242,  239,  168,  364,  128,  130,  133,  759,
 /*  4130 */   151,  759,  153,  759,  759,  759,  759,  759,  759,  759,
 /*  4140 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  4150 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  132,
 /*  4160 */   759,  759,  759,  759,  306,  759,  759,  759,  759,  759,
 /*  4170 */   759,  135,  759,  210,  136,  141,  312,  169,  321,  159,
 /*  4180 */   179,  163,  230,  231,  234,  237,  121,  242,  239,  168,
 /*  4190 */   364,  759,  128,  130,  133,  759,  151,  759,  153,  759,
 /*  4200 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  4210 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  4220 */   759,  759,  759,  759,  759,  132,  759,  759,  759,  759,
 /*  4230 */   306,  759,  759,  759,  759,  759,  759,  135,  759,  195,
 /*  4240 */   136,  141,  312,  169,  321,  159,  179,  163,  230,  231,
 /*  4250 */   234,  237,  121,  242,  239,  168,  364,  128,  130,  133,
 /*  4260 */   759,  151,  759,  153,  759,  759,  759,  759,  759,  759,
 /*  4270 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  4280 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  4290 */   132,  759,  759,  759,  759,  306,  759,  759,  759,  759,
 /*  4300 */   759,  759,  135,  759,  269,  136,  141,  312,  169,  321,
 /*  4310 */   159,  179,  163,  230,  231,  234,  237,  121,  242,  239,
 /*  4320 */   168,  364,  759,  128,  130,  133,  759,  151,  759,  153,
 /*  4330 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  4340 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  4350 */   759,  759,  759,  759,  759,  759,  132,  759,  759,  759,
 /*  4360 */   759,  306,  759,  759,  759,  759,  759,  759,  135,  759,
 /*  4370 */   270,  136,  141,  312,  169,  321,  159,  179,  163,  230,
 /*  4380 */   231,  234,  237,  121,  242,  239,  168,  364,  128,  130,
 /*  4390 */   133,  759,  151,  759,  153,  759,  759,  759,  759,  759,
 /*  4400 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  4410 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  4420 */   759,  132,  759,  759,  759,  759,  306,  759,  759,  759,
 /*  4430 */   759,  759,  759,  135,  759,  266,  136,  141,  312,  169,
 /*  4440 */   321,  159,  179,  163,  230,  231,  234,  237,  121,  242,
 /*  4450 */   239,  168,  364,  759,  128,  130,  133,  759,  151,  759,
 /*  4460 */   153,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  4470 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  4480 */   759,  759,  759,  759,  759,  759,  759,  132,  759,  759,
 /*  4490 */   759,  759,  306,  759,  759,  759,  759,  759,  759,  135,
 /*  4500 */   759,  209,  136,  141,  312,  169,  321,  159,  179,  163,
 /*  4510 */   230,  231,  234,  237,  121,  242,  239,  168,  364,  128,
 /*  4520 */   130,  133,  759,  151,  759,  153,  759,  759,  759,  759,
 /*  4530 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  4540 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  4550 */   759,  759,  132,  759,  759,  759,  759,  306,  759,  759,
 /*  4560 */   759,  759,  759,  759,  135,  759,  192,  136,  141,  312,
 /*  4570 */   169,  321,  159,  179,  163,  230,  231,  234,  237,  121,
 /*  4580 */   242,  239,  168,  364,  759,  128,  130,  133,  759,  151,
 /*  4590 */   759,  153,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  4600 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  4610 */   759,  759,  759,  759,  759,  759,  759,  759,  132,  759,
 /*  4620 */   759,  759,  759,  306,  759,  759,  759,  759,  759,  759,
 /*  4630 */   135,  759,  263,  136,  141,  312,  169,  321,  159,  179,
 /*  4640 */   163,  230,  231,  234,  237,  121,  242,  239,  168,  364,
 /*  4650 */   128,  130,  133,  759,  151,  759,  153,  759,  759,  759,
 /*  4660 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  4670 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  4680 */   759,  759,  759,  132,  759,  759,  759,  759,  306,  759,
 /*  4690 */   759,  759,  759,  759,  759,  135,  759,  278,  136,  141,
 /*  4700 */   312,  169,  321,  159,  179,  163,  230,  231,  234,  237,
 /*  4710 */   121,  242,  239,  168,  364,  759,  128,  130,  133,  759,
 /*  4720 */   151,  759,  153,  759,  759,  759,  759,  759,  759,  759,
 /*  4730 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  4740 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  132,
 /*  4750 */   759,  759,  759,  759,  306,  759,  759,  759,  759,  759,
 /*  4760 */   759,  135,  759,  164,  136,  141,  312,  169,  321,  159,
 /*  4770 */   179,  163,  230,  231,  234,  237,  121,  242,  239,  168,
 /*  4780 */   364,  128,  130,  133,  759,  151,  759,  153,  759,  759,
 /*  4790 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  4800 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  4810 */   759,  759,  759,  759,  132,  759,  759,  759,  759,  306,
 /*  4820 */   759,  759,  759,  759,  759,  759,  135,  759,  253,  136,
 /*  4830 */   141,  312,  169,  321,  159,  179,  163,  230,  231,  234,
 /*  4840 */   237,  121,  242,  239,  168,  364,  759,  128,  130,  133,
 /*  4850 */   759,  151,  759,  153,  759,  759,  759,  759,  759,  759,
 /*  4860 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  4870 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  4880 */   132,  759,  759,  759,  759,  306,  759,  759,  759,  759,
 /*  4890 */   759,  759,  135,  759,  223,  136,  141,  312,  169,  321,
 /*  4900 */   159,  179,  163,  230,  231,  234,  237,  121,  242,  239,
 /*  4910 */   168,  364,  128,  130,  133,  759,  151,  759,  153,  759,
 /*  4920 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  4930 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  4940 */   759,  759,  759,  759,  759,  132,  759,  759,  759,  759,
 /*  4950 */   306,  759,  759,  759,  759,  759,  759,  135,  759,  377,
 /*  4960 */   136,  141,  312,  169,  321,  159,  179,  163,  230,  231,
 /*  4970 */   234,  237,  121,  242,  239,  168,  364,  759,  128,  130,
 /*  4980 */   133,  759,  151,  759,  153,  759,  759,  759,  759,  759,
 /*  4990 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  5000 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  5010 */   759,  132,  759,  759,  759,  759,  306,  759,  759,  759,
 /*  5020 */   759,  759,  759,  135,  759,  267,  136,  141,  312,  169,
 /*  5030 */   321,  159,  179,  163,  230,  231,  234,  237,  121,  242,
 /*  5040 */   239,  168,  364,  128,  130,  133,  759,  151,  759,  153,
 /*  5050 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  5060 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  5070 */   759,  759,  759,  759,  759,  759,  132,  759,  759,  759,
 /*  5080 */   759,  306,  759,  759,  759,  759,  759,  759,  135,  759,
 /*  5090 */   208,  136,  141,  312,  169,  321,  159,  179,  163,  230,
 /*  5100 */   231,  234,  237,  121,  242,  239,  168,  364,  759,  128,
 /*  5110 */   130,  133,  759,  151,  759,  153,  759,  759,  759,  759,
 /*  5120 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  5130 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  5140 */   759,  759,  132,  759,  759,  759,  759,  306,  759,  759,
 /*  5150 */   759,  759,  759,  759,  135,  759,  368,  136,  141,  312,
 /*  5160 */   169,  321,  159,  179,  163,  230,  231,  234,  237,  121,
 /*  5170 */   242,  239,  168,  364,  128,  130,  133,  759,  151,  759,
 /*  5180 */   153,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  5190 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  5200 */   759,  759,  759,  759,  759,  759,  759,  132,  759,  759,
 /*  5210 */   759,  759,  306,  759,  759,  759,  759,  759,  759,  135,
 /*  5220 */   759,  277,  136,  141,  312,  169,  321,  159,  179,  163,
 /*  5230 */   230,  231,  234,  237,  121,  242,  239,  168,  364,  759,
 /*  5240 */   128,  130,  133,  759,  151,  759,  153,  759,  759,  759,
 /*  5250 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  5260 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  5270 */   759,  759,  759,  132,  759,  759,  759,  759,  306,  759,
 /*  5280 */   759,  759,  759,  759,  759,  135,  759,  367,  136,  141,
 /*  5290 */   312,  169,  321,  159,  179,  163,  230,  231,  234,  237,
 /*  5300 */   121,  242,  239,  168,  364,  257,   28,  286,  282,  493,
 /*  5310 */   759,   41,  107,  759,  759,  759,  759,   30,  759,  114,
 /*  5320 */   307,  308,  309,  310,  311,  101,  105,  102,   99,  106,
 /*  5330 */    97,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  5340 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  5350 */   759,  759,  759,  759,  147,  378,  759,  128,  130,  133,
 /*  5360 */   759,  257,   28,  286,  282,  759,  759,   41,  107,  759,
 /*  5370 */   116,  759,  759,   30,  759,  114,  307,  308,  309,  310,
 /*  5380 */   311,  101,  105,  102,   99,  106,   97,  759,  759,  759,
 /*  5390 */   132,  759,  759,  759,  759,  272,  759,  759,  759,  759,
 /*  5400 */   759,  759,  135,  759,  759,  136,  141,  759,  759,  759,
 /*  5410 */   147,  378,  128,  130,  133,  759,  759,  257,   28,  286,
 /*  5420 */   282,  759,  759,   41,  107,  759,  759,  759,  759,   30,
 /*  5430 */   475,  114,  307,  308,  309,  310,  311,  101,  105,  102,
 /*  5440 */    99,  106,   97,  759,  759,  132,  759,  759,  759,  759,
 /*  5450 */   306,  759,  759,  759,  759,  759,  759,  135,  759,  759,
 /*  5460 */   136,  141,  312,  169,  321,  158,  147,  378,  128,  130,
 /*  5470 */   133,  759,  759,  257,   28,  286,  282,  292,  759,   41,
 /*  5480 */   107,  759,  759,  759,  759,   30,  759,  114,  307,  308,
 /*  5490 */   309,  310,  311,  101,  105,  102,   99,  106,   97,  759,
 /*  5500 */   759,  132,  759,  759,  759,  759,  306,  759,  759,  759,
 /*  5510 */   759,  759,  759,  135,  759,  759,  136,  141,  312,  169,
 /*  5520 */   321,  157,  147,  378,  128,  130,  133,  759,  759,  257,
 /*  5530 */    28,  286,  282,  759,  759,   41,  107,  437,  759,  759,
 /*  5540 */   759,   30,  759,  114,  307,  308,  309,  310,  311,  101,
 /*  5550 */   105,  102,   99,  106,   97,  759,  759,  132,  759,  759,
 /*  5560 */   759,  759,  171,  759,  759,  759,  759,  759,  759,  135,
 /*  5570 */   759,  759,  136,  141,  759,  759,  759,  759,  147,  378,
 /*  5580 */   128,  130,  133,  759,  759,  257,   28,  286,  282,  759,
 /*  5590 */   759,   41,  107,  435,  759,  759,  759,   30,  759,  114,
 /*  5600 */   307,  308,  309,  310,  311,  101,  105,  102,   99,  106,
 /*  5610 */    97,  759,  759,  132,  759,  759,  759,  759,  245,  759,
 /*  5620 */   759,  759,  759,  759,  759,  135,  759,  759,  136,  141,
 /*  5630 */   759,  759,  759,  759,  147,  378,  128,  130,  133,  759,
 /*  5640 */   759,  257,   28,  286,  282,  759,  759,   41,  107,  759,
 /*  5650 */   115,  759,  759,   30,  759,  114,  307,  308,  309,  310,
 /*  5660 */   311,  101,  105,  102,   99,  106,   97,  759,  759,  132,
 /*  5670 */   759,  759,  759,  759,  197,  759,  759,  759,  759,  759,
 /*  5680 */   759,  135,  759,  759,  136,  141,  759,  759,  759,  759,
 /*  5690 */   147,  378,  759,  759,  759,  759,  759,  257,   28,  286,
 /*  5700 */   282,  759,  759,   41,  107,  759,  759,  759,  759,   30,
 /*  5710 */   759,  114,  307,  308,  309,  310,  311,  101,  105,  102,
 /*  5720 */    99,  106,   97,  759,  759,  128,  130,  133,  759,  759,
 /*  5730 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  5740 */   759,  759,  759,  759,  759,  759,  147,  378,  759,  759,
 /*  5750 */   759,  759,  759,  759,  759,  759,  759,  759,  132,  759,
 /*  5760 */   759,  759,  759,  306,  759,  759,  759,  759,  759,  759,
 /*  5770 */   135,  759,  759,  136,  141,  312,  169,  321,  159,  179,
 /*  5780 */   163,  230,  231,  234,  237,  121,  242,  226,  257,   28,
 /*  5790 */   286,  282,  759,  365,   41,  107,  759,  759,  759,  759,
 /*  5800 */    30,  759,  114,  307,  308,  309,  310,  311,  101,  105,
 /*  5810 */   102,   99,  106,   97,  759,  759,  759,  759,  759,  759,
 /*  5820 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  5830 */   759,  759,  759,  759,  759,  759,  759,  147,  759,  759,
 /*  5840 */   759,  759,  759,  759,  257,   28,  286,  282,  759,  759,
 /*  5850 */    41,  107,  759,  759,  759,  759,   30,  220,  114,  307,
 /*  5860 */   308,  309,  310,  311,  101,  105,  102,   99,  106,   97,
 /*  5870 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  5880 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  5890 */   759,  759,  759,  147,  128,  130,  133,  759,  759,  759,
 /*  5900 */   257,   28,  286,  282,  759,  759,   41,  107,  759,  759,
 /*  5910 */   759,  759,   30,  252,  114,  307,  308,  309,  310,  311,
 /*  5920 */   101,  105,  102,   99,  106,   97,  759,  132,  759,  759,
 /*  5930 */   759,  759,  306,  759,  759,  759,  759,  759,  759,  135,
 /*  5940 */   759,  759,  136,  141,  312,  169,  321,  159,  166,  147,
 /*  5950 */   128,  130,  133,  759,  759,  759,  257,   28,  286,  282,
 /*  5960 */   759,  759,   41,  107,  759,  759,  759,  759,   30,  207,
 /*  5970 */   114,  307,  308,  309,  310,  311,  101,  105,  102,   99,
 /*  5980 */   106,   97,  759,  132,  759,  759,  759,  759,  306,  759,
 /*  5990 */   759,  759,  759,  759,  759,  135,  759,  759,  136,  141,
 /*  6000 */   312,  169,  321,  159,  185,  147,  759,  759,  759,  759,
 /*  6010 */   759,  759,  257,   28,  286,  282,  759,  759,   41,  107,
 /*  6020 */   759,  759,  759,  759,   30,  191,  114,  307,  308,  309,
 /*  6030 */   310,  311,  101,  105,  102,   99,  106,   97,  759,  759,
 /*  6040 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  6050 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  6060 */   759,  147,  759,  759,  759,  759,  759,  759,  257,   28,
 /*  6070 */   286,  282,  759,  759,   41,  108,  759,  144,  759,  759,
 /*  6080 */    30,  759,  114,  307,  308,  309,  310,  311,  101,  105,
 /*  6090 */   102,   99,  106,   97,  759,  759,  759,  759,  759,  759,
 /*  6100 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  6110 */   759,  759,  759,  759,  759,  759,  759,  147,  759,  759,
 /*  6120 */   759,  759,  759,  759,  257,   28,  286,  282,  759,  759,
 /*  6130 */    41,  107,  759,  759,  759,  759,   30,  284,  114,  307,
 /*  6140 */   308,  309,  310,  311,  101,  105,  102,   99,  106,   97,
 /*  6150 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  6160 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  6170 */   759,  759,  759,  147,  759,  759,  759,  759,  759,  759,
 /*  6180 */   257,   28,  286,  282,  759,  759,   41,  107,  759,  759,
 /*  6190 */   759,  759,   30,  255,  114,  307,  308,  309,  310,  311,
 /*  6200 */   101,  105,  102,   99,  106,   97,  759,  759,  759,  759,
 /*  6210 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  6220 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  147,
 /*  6230 */   759,  759,  759,  759,  759,  759,  257,   28,  286,  282,
 /*  6240 */   759,  759,   41,  107,  759,  759,  759,  759,   30,  212,
 /*  6250 */   114,  307,  308,  309,  310,  311,  101,  105,  102,   99,
 /*  6260 */   106,   97,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  6270 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  6280 */   759,  759,  759,  759,  759,  147,  759,  759,  759,  759,
 /*  6290 */   759,  759,  257,   28,  286,  282,  759,  759,   41,  107,
 /*  6300 */   759,  759,  759,  759,   30,  759,  114,  307,  308,  309,
 /*  6310 */   310,  311,  101,  105,  102,   99,  106,   97,  759,  759,
 /*  6320 */   128,  130,  133,  759,  759,  759,  759,  759,  759,  759,
 /*  6330 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  6340 */   759,  147,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  6350 */   759,  759,  759,  132,  759,  759,  759,  759,  306,  759,
 /*  6360 */   759,  759,  759,  759,  759,  135,  759,  759,  136,  141,
 /*  6370 */   312,  169,  321,  159,  179,  163,  230,  231,  234,  237,
 /*  6380 */   121,  235,  128,  130,  133,  759,  759,  759,  759,  759,
 /*  6390 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  6400 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  6410 */   759,  759,  759,  759,  759,  132,  759,  759,  759,  759,
 /*  6420 */   306,  759,  759,  759,  759,  759,  759,  135,  759,  759,
 /*  6430 */   136,  141,  312,  169,  321,  159,  179,  163,  230,  231,
 /*  6440 */   234,  237,  122,  759,  759,  759,  759,  759,  759,  128,
 /*  6450 */   130,  133,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  6460 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  6470 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  6480 */   759,  759,  132,  759,  759,  759,  759,  306,  759,  759,
 /*  6490 */   759,  759,  759,  759,  135,  759,  759,  136,  141,  312,
 /*  6500 */   169,  321,  159,  179,  163,  230,  231,  234,  249,  759,
 /*  6510 */   759,  128,  130,  133,  759,  759,  759,  759,  759,  759,
 /*  6520 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  6530 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  6540 */   759,  759,  759,  759,  132,  759,  759,  759,  759,  306,
 /*  6550 */   759,  759,  759,  759,  759,  759,  135,  759,  759,  136,
 /*  6560 */   141,  312,  169,  321,  159,  179,  163,  230,  231,  238,
 /*  6570 */   759,  128,  130,  133,  759,  759,  759,  759,  759,  759,
 /*  6580 */   759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
 /*  6590 */   759,  759,  759,  759,  759,  759,  128,  130,  133,  759,
 /*  6600 */   759,  759,  759,  759,  132,  759,  759,  759,  759,  306,
 /*  6610 */   759,  759,  759,  759,  759,  759,  135,  759,  759,  136,
 /*  6620 */   141,  312,  169,  321,  159,  179,  163,  230,  236,  132,
 /*  6630 */   759,  759,  759,  184,  306,  759,  154,  759,  156,  759,
 /*  6640 */   759,  135,  183,  759,  136,  141,  312,  169,  321,  159,
 /*  6650 */   179,  163,  233,  128,  130,  133,  759,  759,  759,  759,
 /*  6660 */   759,  759,  759,  759,  759,  759,  123,  759,  759,  345,
 /*  6670 */   759,  759,  343,  346,  254,  251,  248,  246,  759,  759,
 /*  6680 */   759,  759,  759,  759,  759,  759,  132,  759,  759,  759,
 /*  6690 */   759,  306,  759,  759,  759,  759,  759,  759,  135,  759,
 /*  6700 */   759,  136,  141,  312,  169,  321,  159,  179,  162,
};
static const YYCODETYPE yy_lookahead[] = {
 /*     0 */    83,   84,   85,   86,   87,   88,   89,    8,  114,  115,
 /*    10 */    11,  111,  112,   14,   15,   10,   99,   12,  101,  102,
 /*    20 */   103,  104,  105,  106,  107,  108,  109,  110,   54,   55,
 /*    30 */   113,   90,   91,  116,    6,    7,  119,    9,  121,  117,
 /*    40 */   123,   10,  125,  126,   13,  128,   18,   12,  131,  132,
 /*    50 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*    60 */   143,  144,  145,  146,  147,  117,  149,  150,  151,  152,
 /*    70 */   117,  154,  155,    8,  157,   83,   84,   85,  117,   87,
 /*    80 */     7,   89,    9,   18,   56,   12,   13,   90,   91,   16,
 /*    90 */    17,   56,  100,  101,  102,  103,  104,  105,  106,  107,
 /*   100 */   108,  109,  110,    6,    7,  113,    9,  117,  116,   12,
 /*   110 */     7,   10,    9,  121,   13,   18,   31,   32,   33,   34,
 /*   120 */   128,   18,   90,  131,  132,  133,  134,  135,  136,  137,
 /*   130 */   138,  139,  140,  141,  142,  143,  144,  145,  146,  147,
 /*   140 */   117,  149,  150,  151,  152,   28,   29,  155,  156,  157,
 /*   150 */    83,   84,   85,   56,   87,    7,   89,    9,  117,   56,
 /*   160 */    12,   13,   35,   36,   37,  117,   18,  100,  101,  102,
 /*   170 */   103,  104,  105,  106,  107,  108,  109,  110,    6,    7,
 /*   180 */   113,    9,    8,  116,    6,    7,  117,    9,  121,   13,
 /*   190 */    18,    6,   16,   17,   12,  128,   18,   12,  131,  132,
 /*   200 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*   210 */   143,  144,  145,  146,  147,  100,  149,  150,  151,  152,
 /*   220 */     7,    8,  155,  156,  157,   83,   84,   85,   56,   87,
 /*   230 */   116,   89,    4,    5,   16,   17,   13,   16,   17,   16,
 /*   240 */    17,   99,  128,  101,  102,  103,  104,  105,  106,  107,
 /*   250 */   108,  109,  110,   90,   91,  113,   80,    8,  116,    6,
 /*   260 */     7,   90,    9,  121,   16,   17,    6,   18,   16,   17,
 /*   270 */   128,   18,   12,  131,  132,  133,  134,  135,  136,  137,
 /*   280 */   138,  139,  140,  141,  142,  143,  144,  145,  146,  147,
 /*   290 */    90,  149,  150,  151,  152,   14,  154,  155,   17,  157,
 /*   300 */    83,   84,   85,   80,   87,    8,   89,    6,   11,   26,
 /*   310 */    27,   14,   15,   12,   16,   17,   90,  100,  101,  102,
 /*   320 */   103,  104,  105,  106,  107,  108,  109,  110,    7,    7,
 /*   330 */   113,    9,    7,  116,    9,    7,  117,    9,  121,  117,
 /*   340 */    18,  111,  112,   18,   90,  128,   18,  115,  131,  132,
 /*   350 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*   360 */   143,  144,  145,  146,  147,  120,  149,  150,  151,  152,
 /*   370 */   115,  115,  155,  156,  157,   83,   84,   85,    8,   87,
 /*   380 */     7,   89,    9,    4,    5,  120,  115,  115,   18,   14,
 /*   390 */    56,   18,  100,  101,  102,  103,  104,  105,  106,  107,
 /*   400 */   108,  109,  110,   14,    7,  113,    9,    7,  116,    9,
 /*   410 */     7,   10,    9,  121,   12,   18,   12,   19,   18,   14,
 /*   420 */   128,   18,   14,  131,  132,  133,  134,  135,  136,  137,
 /*   430 */   138,  139,  140,  141,  142,  143,  144,  145,  146,  147,
 /*   440 */    55,  149,  150,  151,  152,   11,   19,  155,  156,  157,
 /*   450 */    83,   84,   85,    8,   87,    7,   89,    9,    8,   13,
 /*   460 */    17,   14,   13,   18,   10,   14,   18,  100,  101,  102,
 /*   470 */   103,  104,  105,  106,  107,  108,  109,  110,   19,    7,
 /*   480 */   113,    9,    8,  116,    8,   56,    8,   19,  121,   19,
 /*   490 */    18,   10,   18,   13,   18,  128,   18,   13,  131,  132,
 /*   500 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*   510 */   143,  144,  145,  146,  147,   10,  149,  150,  151,  152,
 /*   520 */    56,   56,  155,  156,  157,   83,   84,   85,    7,   87,
 /*   530 */    14,   89,   10,   19,    7,   56,   69,   17,   10,   13,
 /*   540 */    10,   10,  100,  101,  102,  103,  104,  105,  106,  107,
 /*   550 */   108,  109,  110,    7,   19,  113,   53,    7,  116,   19,
 /*   560 */     7,   10,   38,  121,   39,   10,   12,    7,   19,   40,
 /*   570 */   128,   52,    7,  131,  132,  133,  134,  135,  136,  137,
 /*   580 */   138,  139,  140,  141,  142,  143,  144,  145,  146,  147,
 /*   590 */    14,  149,  150,  151,  152,   10,   10,  155,  156,  157,
 /*   600 */    83,   84,   85,   41,   87,   12,   89,   10,   19,   14,
 /*   610 */     7,   10,   14,   14,   14,   56,   99,   12,  101,  102,
 /*   620 */   103,  104,  105,  106,  107,  108,  109,  110,   19,   10,
 /*   630 */   113,   14,   19,  116,   56,   56,   10,   14,  121,   56,
 /*   640 */    19,   17,   14,   10,   19,  128,   19,   17,  131,  132,
 /*   650 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*   660 */   143,  144,  145,  146,  147,   94,  149,  150,  151,  152,
 /*   670 */    93,  154,  155,  160,  157,   83,   84,   85,   94,   87,
 /*   680 */   160,   89,  160,  160,  160,  160,  160,  160,  160,  160,
 /*   690 */   160,   99,  160,  101,  102,  103,  104,  105,  106,  107,
 /*   700 */   108,  109,  110,  160,  160,  113,  160,  160,  116,  160,
 /*   710 */   160,  160,  160,  121,  160,  160,  160,  160,  160,  160,
 /*   720 */   128,  160,  160,  131,  132,  133,  134,  135,  136,  137,
 /*   730 */   138,  139,  140,  141,  142,  143,  144,  145,  146,  147,
 /*   740 */   160,  149,  150,  151,  152,  160,  154,  155,  160,  157,
 /*   750 */    83,   84,   85,  160,   87,  160,   89,  160,  160,  160,
 /*   760 */   160,  160,  160,  160,  160,  160,   99,  160,  101,  102,
 /*   770 */   103,  104,  105,  106,  107,  108,  109,  110,  160,  160,
 /*   780 */   113,  160,  160,  116,  160,  160,  160,  160,  121,  160,
 /*   790 */   160,  160,  160,  160,  160,  128,  160,  160,  131,  132,
 /*   800 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*   810 */   143,  144,  145,  146,  147,  160,  149,  150,  151,  152,
 /*   820 */   160,  154,  155,  160,  157,   83,   84,   85,  160,   87,
 /*   830 */   160,   89,  160,  160,  160,  160,  160,  160,  160,  160,
 /*   840 */   160,  160,  100,  101,  102,  103,  104,  105,  106,  107,
 /*   850 */   108,  109,  110,  160,  160,  113,  160,  160,  116,  160,
 /*   860 */   160,  160,  160,  121,  160,  160,  160,  160,  160,  160,
 /*   870 */   128,  160,  160,  131,  132,  133,  134,  135,  136,  137,
 /*   880 */   138,  139,  140,  141,  142,  143,  144,  145,  146,  147,
 /*   890 */   160,  149,  150,  151,  152,  160,  160,  155,  156,  157,
 /*   900 */    83,   84,   85,  160,   87,  160,   89,  160,  160,  160,
 /*   910 */   160,  160,  160,  160,  160,  160,   99,  160,  101,  102,
 /*   920 */   103,  104,  105,  106,  107,  108,  109,  110,  160,  160,
 /*   930 */   113,  160,  160,  116,  160,  160,  160,  160,  121,  160,
 /*   940 */   160,  160,  160,  160,  160,  128,  160,  160,  131,  132,
 /*   950 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*   960 */   143,  144,  145,  146,  147,  160,  149,  150,  151,  152,
 /*   970 */   160,  154,  155,    1,  157,    3,  160,  160,    6,    7,
 /*   980 */     8,    9,  160,   11,   12,   13,   14,   15,  160,  160,
 /*   990 */    18,  160,   20,   21,   22,   23,   24,   25,   26,   27,
 /*  1000 */    28,   29,   30,   31,   42,   43,   44,   45,   46,   47,
 /*  1010 */    48,   49,   50,   51,  160,    6,    7,    8,    6,    7,
 /*  1020 */     8,   12,  160,  160,  160,  160,  160,   55,   56,   20,
 /*  1030 */   160,  160,   20,  160,  160,  160,  160,  160,  160,  160,
 /*  1040 */   160,   69,   70,   71,   72,   73,   74,   75,   76,   77,
 /*  1050 */    78,   79,    1,   81,    3,  160,  160,    6,    7,    8,
 /*  1060 */     9,  160,   11,   12,   13,   14,   15,  160,  160,   18,
 /*  1070 */   160,   20,   21,   22,   23,   24,   25,   26,   27,   28,
 /*  1080 */    29,   30,   31,  160,  160,  160,  160,  160,  160,  160,
 /*  1090 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  1100 */   160,  160,  160,  160,  160,  160,   55,   56,  160,  160,
 /*  1110 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  1120 */    69,   70,   71,   72,   73,   74,   75,   76,   77,   78,
 /*  1130 */    79,    1,   81,    3,  160,  160,    6,    7,    8,    9,
 /*  1140 */    10,  160,   12,   13,   14,   15,  160,  160,   18,  160,
 /*  1150 */    20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
 /*  1160 */    30,   31,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  1170 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  1180 */   160,  160,  160,  160,  160,   55,   56,  160,  160,  160,
 /*  1190 */   160,  160,  160,  160,  160,  160,  160,  160,  160,   69,
 /*  1200 */    70,   71,   72,   73,   74,   75,   76,   77,   78,   79,
 /*  1210 */     1,   81,    3,  160,  160,    6,    7,    8,    9,  160,
 /*  1220 */    11,   12,   13,   14,   15,  160,  160,   18,  160,   20,
 /*  1230 */    21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
 /*  1240 */    31,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  1250 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  1260 */   160,  160,  160,  160,   55,   56,  160,  160,  160,  160,
 /*  1270 */   160,  160,  160,  160,  160,  160,  160,  160,   69,   70,
 /*  1280 */    71,   72,   73,   74,   75,   76,   77,   78,   79,    1,
 /*  1290 */    81,    3,  160,  160,    6,    7,    8,    9,  160,   11,
 /*  1300 */    12,   13,   14,   15,  160,  160,   18,  160,   20,   21,
 /*  1310 */    22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
 /*  1320 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  1330 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  1340 */   160,  160,  160,   55,   56,  160,  160,  160,  160,  160,
 /*  1350 */   160,  160,  160,  160,  160,  160,  160,   69,   70,   71,
 /*  1360 */    72,   73,   74,   75,   76,   77,   78,   79,  160,   81,
 /*  1370 */     0,    1,  160,    3,  160,  160,    6,    7,    8,    9,
 /*  1380 */   160,  160,   12,   13,   14,   15,  160,  160,   18,  160,
 /*  1390 */    20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
 /*  1400 */    30,   31,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  1410 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  1420 */   160,  160,  160,  160,  160,   55,   56,  160,  160,  160,
 /*  1430 */   160,  160,  160,  160,  160,  160,  160,  160,  160,   69,
 /*  1440 */    70,   71,   72,   73,   74,   75,   76,   77,   78,   79,
 /*  1450 */     1,   81,    3,  160,  160,    6,    7,    8,    9,  160,
 /*  1460 */   160,   12,   13,   83,   84,   85,  160,   18,  160,   20,
 /*  1470 */    21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
 /*  1480 */    31,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  1490 */   160,  160,  160,  160,  160,  160,  116,  160,  160,  160,
 /*  1500 */   160,  121,  160,  160,   55,   56,  160,  160,  128,  160,
 /*  1510 */   160,  131,  132,  133,  134,  135,  136,  137,   69,   70,
 /*  1520 */    71,   72,   73,   74,   75,   76,   77,   78,   79,    1,
 /*  1530 */    81,    3,  160,  160,    6,    7,    8,    9,  160,  160,
 /*  1540 */    12,   13,  160,  160,  160,  160,   18,  160,   20,   21,
 /*  1550 */    22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
 /*  1560 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  1570 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  1580 */    83,   84,   85,   55,   56,  160,  160,  160,   83,   84,
 /*  1590 */    85,  160,   87,  160,   89,  160,  160,   69,   70,   71,
 /*  1600 */    72,   73,   74,   75,   76,   77,   78,   79,  160,   81,
 /*  1610 */   160,  160,  160,  116,  160,  160,  160,  160,  121,  160,
 /*  1620 */   160,  116,  160,  118,  160,  128,  121,  160,  131,  132,
 /*  1630 */   133,  134,  135,  128,  129,  130,  131,  132,  133,  134,
 /*  1640 */   135,  136,  137,  138,  139,  140,  141,  142,  143,  144,
 /*  1650 */   145,  146,  147,  148,  149,  160,  160,  160,  153,  160,
 /*  1660 */     6,    7,    8,  158,  160,  160,  160,   83,   84,   85,
 /*  1670 */   160,   87,  160,   89,   20,   21,   22,   23,   24,   25,
 /*  1680 */    26,   27,   28,   29,   30,   31,  160,  160,  160,  160,
 /*  1690 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  1700 */   116,  160,  118,  160,  160,  121,  160,  160,  160,   83,
 /*  1710 */    84,   85,  128,  129,  130,  131,  132,  133,  134,  135,
 /*  1720 */   136,  137,  138,  139,  140,  141,  142,  143,  144,  145,
 /*  1730 */   146,  147,  148,  149,   83,   84,   85,  160,   87,  160,
 /*  1740 */    89,  160,  116,  159,  160,  160,  160,  121,  160,  160,
 /*  1750 */   160,  160,  160,  160,  128,  160,  160,  131,  132,  133,
 /*  1760 */   134,  135,  160,  160,  160,  160,  160,  116,  160,  118,
 /*  1770 */   160,  160,  121,  160,  160,  160,  160,  160,  160,  128,
 /*  1780 */   129,  130,  131,  132,  133,  134,  135,  136,  137,  138,
 /*  1790 */   139,  140,  141,  142,  143,  144,  145,  146,  147,  148,
 /*  1800 */   149,   83,   84,   85,  160,   87,  160,   89,  160,  160,
 /*  1810 */   159,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  1820 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  1830 */   160,  160,  160,  160,  116,  160,  118,  160,  160,  121,
 /*  1840 */   160,  160,   83,   84,   85,  160,  128,  129,  130,  131,
 /*  1850 */   132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
 /*  1860 */   142,  143,  144,  145,  146,  147,  148,  149,   83,   84,
 /*  1870 */    85,  153,   87,  160,   89,  116,  160,  160,  160,  160,
 /*  1880 */   121,  160,  160,  160,  160,  160,  160,  128,  160,  160,
 /*  1890 */   131,  132,  133,  134,  135,  160,  160,  160,  160,  160,
 /*  1900 */   160,  116,  160,  118,  160,  160,  121,  160,  160,  160,
 /*  1910 */   160,  160,  160,  128,  129,  130,  131,  132,  133,  134,
 /*  1920 */   135,  136,  137,  138,  139,  140,  141,  142,  143,  144,
 /*  1930 */   145,  146,  147,  148,  149,   83,   84,   85,  153,   87,
 /*  1940 */   160,   89,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  1950 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  1960 */   160,  160,  160,  160,  160,  160,  160,  160,  116,  160,
 /*  1970 */   118,  160,  160,  121,   83,   84,   85,  160,  160,  160,
 /*  1980 */   128,  129,  130,  131,  132,  133,  134,  135,  136,  137,
 /*  1990 */   138,  139,  140,  141,  142,  143,  144,  145,  146,  147,
 /*  2000 */   148,  149,   83,   84,   85,  153,   87,  116,   89,  160,
 /*  2010 */   160,  160,  121,  160,  160,  160,  160,  160,  160,  128,
 /*  2020 */   160,  160,  131,  132,  133,  134,  135,  160,  160,  160,
 /*  2030 */   160,  160,  160,  160,  160,  116,  160,  118,  160,  160,
 /*  2040 */   121,  160,  160,  160,  160,  160,  160,  128,  129,  130,
 /*  2050 */   131,  132,  133,  134,  135,  136,  137,  138,  139,  140,
 /*  2060 */   141,  142,  143,  144,  145,  146,  147,  148,  149,   83,
 /*  2070 */    84,   85,  153,   87,  160,   89,  160,  160,  160,  160,
 /*  2080 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  2090 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  2100 */   160,  160,  116,  160,  118,  160,  160,  121,   83,   84,
 /*  2110 */    85,  160,  160,  160,  128,  129,  130,  131,  132,  133,
 /*  2120 */   134,  135,  136,  137,  138,  139,  140,  141,  142,  143,
 /*  2130 */   144,  145,  146,  147,  148,  149,   83,   84,   85,  160,
 /*  2140 */    87,  116,   89,  160,  160,  160,  121,  160,  160,  160,
 /*  2150 */   160,  160,  160,  128,  160,  160,  131,  132,  133,  134,
 /*  2160 */   135,  160,  160,  160,  160,  160,  160,  160,  160,  116,
 /*  2170 */   160,  118,  160,  160,  121,  160,  160,  160,  160,  160,
 /*  2180 */   160,  128,  129,  130,  131,  132,  133,  134,  135,  136,
 /*  2190 */   137,  138,  139,  140,  141,  142,  143,  144,  145,  146,
 /*  2200 */   147,  148,  149,   83,   84,   85,  160,   87,  160,   89,
 /*  2210 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  2220 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  2230 */   160,  160,  160,  160,  160,  160,  116,  160,  118,  160,
 /*  2240 */   160,  121,   83,   84,   85,  160,  160,  160,  128,  129,
 /*  2250 */   130,  131,  132,  133,  134,  135,  136,  137,  138,  139,
 /*  2260 */   140,  141,  142,  143,  144,  145,  146,  147,  148,  149,
 /*  2270 */    83,   84,   85,  160,   87,  116,   89,  160,  160,  160,
 /*  2280 */   121,  160,  160,  160,  160,  160,  160,  128,  160,  160,
 /*  2290 */   131,  132,  133,  134,  135,  160,  160,  160,  160,  160,
 /*  2300 */   160,  160,  160,  116,  160,  118,  160,  160,  121,  160,
 /*  2310 */   160,  160,  160,  160,  160,  128,  129,  130,  131,  132,
 /*  2320 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*  2330 */   143,  144,  145,  146,  147,  148,  149,   83,   84,   85,
 /*  2340 */   160,   87,  160,   89,  160,  160,  160,  160,  160,  160,
 /*  2350 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  2360 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  2370 */   116,  160,  118,  160,  160,  121,   83,   84,   85,  160,
 /*  2380 */   160,  160,  128,  160,  130,  131,  132,  133,  134,  135,
 /*  2390 */   136,  137,  138,  139,  140,  141,  142,  143,  144,  145,
 /*  2400 */   146,  147,  148,  149,   83,   84,   85,  160,   87,  116,
 /*  2410 */    89,  160,  160,  160,  121,  160,  160,  160,  160,  160,
 /*  2420 */   160,  128,  160,  160,  131,  132,  133,  134,  135,  160,
 /*  2430 */   160,  160,  160,  160,  160,  160,  160,  116,  160,  118,
 /*  2440 */   160,  160,  121,  160,  160,  160,  160,  160,  160,  128,
 /*  2450 */   160,  130,  131,  132,  133,  134,  135,  136,  137,  138,
 /*  2460 */   139,  140,  141,  142,  143,  144,  145,  146,  147,  148,
 /*  2470 */   149,   83,   84,   85,  160,   87,  160,   89,  160,  160,
 /*  2480 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  2490 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  2500 */   160,  160,  160,  160,  116,  160,  118,  160,  160,  121,
 /*  2510 */    83,   84,   85,  160,  160,  160,  128,  160,  130,  131,
 /*  2520 */   132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
 /*  2530 */   142,  143,  144,  145,  146,  147,  148,  149,   83,   84,
 /*  2540 */    85,  160,   87,  116,   89,  160,  160,  160,  121,  160,
 /*  2550 */   160,  160,  160,  160,  160,  128,  160,  160,  131,  132,
 /*  2560 */   133,  134,  135,  160,  160,  160,  160,  160,  160,  160,
 /*  2570 */   160,  116,  160,  118,  160,  160,  121,  160,  160,  160,
 /*  2580 */   160,  160,  160,  128,  160,  130,  131,  132,  133,  134,
 /*  2590 */   135,  136,  137,  138,  139,  140,  141,  142,  143,  144,
 /*  2600 */   145,  146,  147,  148,  149,   83,   84,   85,  160,   87,
 /*  2610 */   160,   89,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  2620 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  2630 */   160,  160,  160,  160,  160,  160,  160,  160,  116,  160,
 /*  2640 */   118,  160,  160,  121,   83,   84,   85,  160,  160,  160,
 /*  2650 */   128,  160,  130,  131,  132,  133,  134,  135,  136,  137,
 /*  2660 */   138,  139,  140,  141,  142,  143,  144,  145,  146,  147,
 /*  2670 */   148,  149,   83,   84,   85,  160,   87,  116,   89,  160,
 /*  2680 */   160,  160,  121,  160,  160,  160,  160,  160,  160,  128,
 /*  2690 */   160,  160,  131,  132,  133,  134,  135,  160,  160,  160,
 /*  2700 */   160,  160,  160,  160,  160,  116,  160,  118,  160,  160,
 /*  2710 */   121,  160,  160,  160,  160,  160,  160,  128,  160,  130,
 /*  2720 */   131,  132,  133,  134,  135,  136,  137,  138,  139,  140,
 /*  2730 */   141,  142,  143,  144,  145,  146,  147,  148,  149,   83,
 /*  2740 */    84,   85,  160,   87,  160,   89,  160,  160,  160,  160,
 /*  2750 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  2760 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  2770 */   160,  160,  116,  160,  118,  160,  160,  121,   83,   84,
 /*  2780 */    85,  160,  160,  160,  128,  160,  130,  131,  132,  133,
 /*  2790 */   134,  135,  136,  137,  138,  139,  140,  141,  142,  143,
 /*  2800 */   144,  145,  146,  147,  148,  149,   83,   84,   85,  160,
 /*  2810 */    87,  116,   89,  160,  160,  160,  121,  160,  160,  160,
 /*  2820 */   160,  160,  160,  128,  160,  160,  131,  132,  133,  134,
 /*  2830 */   135,  160,  160,  160,  160,  160,  160,  160,  160,  116,
 /*  2840 */   160,  118,  160,  160,  121,  160,  160,  160,  160,  160,
 /*  2850 */   160,  128,  160,  130,  131,  132,  133,  134,  135,  136,
 /*  2860 */   137,  138,  139,  140,  141,  142,  143,  144,  145,  146,
 /*  2870 */   147,  148,  149,   83,   84,   85,  160,   87,  160,   89,
 /*  2880 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  2890 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  2900 */   160,  160,  160,  160,  160,  160,  116,  160,  118,  160,
 /*  2910 */   160,  121,   83,   84,   85,  160,  160,  160,  128,  160,
 /*  2920 */   130,  131,  132,  133,  134,  135,  136,  137,  138,  139,
 /*  2930 */   140,  141,  142,  143,  144,  145,  146,  147,  148,  149,
 /*  2940 */    83,   84,   85,  160,   87,  116,   89,  160,  160,  160,
 /*  2950 */   121,  160,  160,  160,  160,  160,  160,  128,  160,  160,
 /*  2960 */   131,  132,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  2970 */   160,  160,  160,  116,  160,  118,  160,  160,  121,  160,
 /*  2980 */   160,  160,  160,  160,  160,  128,  160,  130,  131,  132,
 /*  2990 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*  3000 */   143,  144,  145,  146,  147,  148,  149,   83,   84,   85,
 /*  3010 */   160,   87,  160,   89,  160,  160,  160,  160,  160,   95,
 /*  3020 */    96,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  3030 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  3040 */   116,  160,  160,  160,  160,  121,  160,  160,  160,  160,
 /*  3050 */   160,  160,  128,  160,  130,  131,  132,  133,  134,  135,
 /*  3060 */   136,  137,  138,  139,  140,  141,  142,  143,  144,  145,
 /*  3070 */   146,  147,  160,  149,   83,   84,   85,  160,   87,  160,
 /*  3080 */    89,  160,  160,  160,  160,  160,  160,  160,   97,   98,
 /*  3090 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  3100 */   160,  160,   13,  160,  160,   16,   17,  116,  160,  160,
 /*  3110 */   160,  160,  121,  160,  160,  160,  160,  160,  160,  128,
 /*  3120 */   160,  130,  131,  132,  133,  134,  135,  136,  137,  138,
 /*  3130 */   139,  140,  141,  142,  143,  144,  145,  146,  147,   83,
 /*  3140 */    84,   85,  160,   87,  160,   89,   57,   58,   59,   60,
 /*  3150 */    61,   62,   63,   64,   65,   66,   67,   68,  160,  160,
 /*  3160 */   160,  160,  160,  160,  160,  160,  160,  160,  160,   80,
 /*  3170 */   160,  160,  116,   16,   17,  160,  160,  121,  160,  160,
 /*  3180 */   160,  160,  160,  160,  128,  160,  130,  131,  132,  133,
 /*  3190 */   134,  135,  136,  137,  138,  139,  140,  141,  142,  143,
 /*  3200 */   144,  145,  146,  147,  160,  149,   83,   84,   85,  160,
 /*  3210 */    87,  160,   89,  160,   57,   58,   59,   60,   61,   62,
 /*  3220 */    63,   64,   65,   66,   67,   68,  160,  160,  160,  160,
 /*  3230 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  116,
 /*  3240 */    16,   17,  160,  160,  121,  160,  160,  160,  160,  160,
 /*  3250 */   160,  128,  160,  130,  131,  132,  133,  134,  135,  136,
 /*  3260 */   137,  138,  139,  140,  141,  142,  143,  144,  145,  146,
 /*  3270 */   147,  148,   83,   84,   85,  160,   87,  160,   89,  160,
 /*  3280 */   160,   57,   58,   59,   60,   61,   62,   63,   64,   65,
 /*  3290 */    66,   67,   68,  160,  160,  160,  160,  160,  160,  160,
 /*  3300 */   160,  160,  160,  160,  160,  116,  160,  160,  160,  160,
 /*  3310 */   121,  160,  160,  160,  160,  160,  160,  128,  160,  130,
 /*  3320 */   131,  132,  133,  134,  135,  136,  137,  138,  139,  140,
 /*  3330 */   141,  142,  143,  144,  145,  146,  147,  160,  149,   83,
 /*  3340 */    84,   85,  160,   87,  160,   89,  160,  160,  160,  160,
 /*  3350 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  3360 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  3370 */   160,  160,  116,  160,  160,  160,  160,  121,  160,  160,
 /*  3380 */   160,  160,  160,  160,  128,  160,  130,  131,  132,  133,
 /*  3390 */   134,  135,  136,  137,  138,  139,  140,  141,  142,  143,
 /*  3400 */   144,  145,  146,  147,  160,  149,   83,   84,   85,  160,
 /*  3410 */    87,  160,   89,  160,  160,  160,  160,  160,  160,  160,
 /*  3420 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  3430 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  116,
 /*  3440 */   160,  160,  160,  160,  121,  160,  160,  160,  160,  160,
 /*  3450 */   160,  128,  160,  130,  131,  132,  133,  134,  135,  136,
 /*  3460 */   137,  138,  139,  140,  141,  142,  143,  144,  145,  146,
 /*  3470 */   147,   83,   84,   85,  160,   87,  160,   89,  160,  160,
 /*  3480 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  3490 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  3500 */   160,  160,  160,  160,  116,  160,  160,  160,  160,  121,
 /*  3510 */   160,  160,  160,  160,  160,  160,  128,  160,  130,  131,
 /*  3520 */   132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
 /*  3530 */   142,  143,  144,  145,  146,  147,  160,   83,   84,   85,
 /*  3540 */   160,   87,  160,   89,  160,  160,  160,  160,  160,  160,
 /*  3550 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  3560 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  3570 */   116,  160,  160,  160,  160,  121,  160,  160,  160,  160,
 /*  3580 */   160,  160,  128,  160,  130,  131,  132,  133,  134,  135,
 /*  3590 */   136,  137,  138,  139,  140,  141,  142,  143,  144,  145,
 /*  3600 */   146,  147,   83,   84,   85,  160,   87,  160,   89,  160,
 /*  3610 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  3620 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  3630 */   160,  160,  160,  160,  160,  116,  160,  160,  160,  160,
 /*  3640 */   121,  160,  160,  160,  160,  160,  160,  128,  160,  130,
 /*  3650 */   131,  132,  133,  134,  135,  136,  137,  138,  139,  140,
 /*  3660 */   141,  142,  143,  144,  145,  146,  147,  160,   83,   84,
 /*  3670 */    85,  160,   87,  160,   89,  160,  160,  160,  160,  160,
 /*  3680 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  3690 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  3700 */   160,  116,  160,  160,  160,  160,  121,  160,  160,  160,
 /*  3710 */   160,  160,  160,  128,  160,  130,  131,  132,  133,  134,
 /*  3720 */   135,  136,  137,  138,  139,  140,  141,  142,  143,  144,
 /*  3730 */   145,  146,  147,   83,   84,   85,  160,   87,  160,   89,
 /*  3740 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  3750 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  3760 */   160,  160,  160,  160,  160,  160,  116,  160,  160,  160,
 /*  3770 */   160,  121,  160,  160,  160,  160,  160,  160,  128,  160,
 /*  3780 */   130,  131,  132,  133,  134,  135,  136,  137,  138,  139,
 /*  3790 */   140,  141,  142,  143,  144,  145,  146,  147,  160,   83,
 /*  3800 */    84,   85,  160,   87,  160,   89,  160,  160,  160,  160,
 /*  3810 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  3820 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  3830 */   160,  160,  116,  160,  160,  160,  160,  121,  160,  160,
 /*  3840 */   160,  160,  160,  160,  128,  160,  130,  131,  132,  133,
 /*  3850 */   134,  135,  136,  137,  138,  139,  140,  141,  142,  143,
 /*  3860 */   144,  145,  146,  147,   83,   84,   85,  160,   87,  160,
 /*  3870 */    89,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  3880 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  3890 */   160,  160,  160,  160,  160,  160,  160,  116,  160,  160,
 /*  3900 */   160,  160,  121,  160,  160,  160,  160,  160,  160,  128,
 /*  3910 */   160,  130,  131,  132,  133,  134,  135,  136,  137,  138,
 /*  3920 */   139,  140,  141,  142,  143,  144,  145,  146,  147,  160,
 /*  3930 */    83,   84,   85,  160,   87,  160,   89,  160,  160,  160,
 /*  3940 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  3950 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  3960 */   160,  160,  160,  116,  160,  160,  160,  160,  121,  160,
 /*  3970 */   160,  160,  160,  160,  160,  128,  160,  130,  131,  132,
 /*  3980 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*  3990 */   143,  144,  145,  146,  147,   83,   84,   85,  160,   87,
 /*  4000 */   160,   89,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  4010 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  4020 */   160,  160,  160,  160,  160,  160,  160,  160,  116,  160,
 /*  4030 */   160,  160,  160,  121,  160,  160,  160,  160,  160,  160,
 /*  4040 */   128,  160,  130,  131,  132,  133,  134,  135,  136,  137,
 /*  4050 */   138,  139,  140,  141,  142,  143,  144,  145,  146,  147,
 /*  4060 */   160,   83,   84,   85,  160,   87,  160,   89,  160,  160,
 /*  4070 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  4080 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  4090 */   160,  160,  160,  160,  116,  160,  160,  160,  160,  121,
 /*  4100 */   160,  160,  160,  160,  160,  160,  128,  160,  130,  131,
 /*  4110 */   132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
 /*  4120 */   142,  143,  144,  145,  146,  147,   83,   84,   85,  160,
 /*  4130 */    87,  160,   89,  160,  160,  160,  160,  160,  160,  160,
 /*  4140 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  4150 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  116,
 /*  4160 */   160,  160,  160,  160,  121,  160,  160,  160,  160,  160,
 /*  4170 */   160,  128,  160,  130,  131,  132,  133,  134,  135,  136,
 /*  4180 */   137,  138,  139,  140,  141,  142,  143,  144,  145,  146,
 /*  4190 */   147,  160,   83,   84,   85,  160,   87,  160,   89,  160,
 /*  4200 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  4210 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  4220 */   160,  160,  160,  160,  160,  116,  160,  160,  160,  160,
 /*  4230 */   121,  160,  160,  160,  160,  160,  160,  128,  160,  130,
 /*  4240 */   131,  132,  133,  134,  135,  136,  137,  138,  139,  140,
 /*  4250 */   141,  142,  143,  144,  145,  146,  147,   83,   84,   85,
 /*  4260 */   160,   87,  160,   89,  160,  160,  160,  160,  160,  160,
 /*  4270 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  4280 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  4290 */   116,  160,  160,  160,  160,  121,  160,  160,  160,  160,
 /*  4300 */   160,  160,  128,  160,  130,  131,  132,  133,  134,  135,
 /*  4310 */   136,  137,  138,  139,  140,  141,  142,  143,  144,  145,
 /*  4320 */   146,  147,  160,   83,   84,   85,  160,   87,  160,   89,
 /*  4330 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  4340 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  4350 */   160,  160,  160,  160,  160,  160,  116,  160,  160,  160,
 /*  4360 */   160,  121,  160,  160,  160,  160,  160,  160,  128,  160,
 /*  4370 */   130,  131,  132,  133,  134,  135,  136,  137,  138,  139,
 /*  4380 */   140,  141,  142,  143,  144,  145,  146,  147,   83,   84,
 /*  4390 */    85,  160,   87,  160,   89,  160,  160,  160,  160,  160,
 /*  4400 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  4410 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  4420 */   160,  116,  160,  160,  160,  160,  121,  160,  160,  160,
 /*  4430 */   160,  160,  160,  128,  160,  130,  131,  132,  133,  134,
 /*  4440 */   135,  136,  137,  138,  139,  140,  141,  142,  143,  144,
 /*  4450 */   145,  146,  147,  160,   83,   84,   85,  160,   87,  160,
 /*  4460 */    89,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  4470 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  4480 */   160,  160,  160,  160,  160,  160,  160,  116,  160,  160,
 /*  4490 */   160,  160,  121,  160,  160,  160,  160,  160,  160,  128,
 /*  4500 */   160,  130,  131,  132,  133,  134,  135,  136,  137,  138,
 /*  4510 */   139,  140,  141,  142,  143,  144,  145,  146,  147,   83,
 /*  4520 */    84,   85,  160,   87,  160,   89,  160,  160,  160,  160,
 /*  4530 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  4540 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  4550 */   160,  160,  116,  160,  160,  160,  160,  121,  160,  160,
 /*  4560 */   160,  160,  160,  160,  128,  160,  130,  131,  132,  133,
 /*  4570 */   134,  135,  136,  137,  138,  139,  140,  141,  142,  143,
 /*  4580 */   144,  145,  146,  147,  160,   83,   84,   85,  160,   87,
 /*  4590 */   160,   89,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  4600 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  4610 */   160,  160,  160,  160,  160,  160,  160,  160,  116,  160,
 /*  4620 */   160,  160,  160,  121,  160,  160,  160,  160,  160,  160,
 /*  4630 */   128,  160,  130,  131,  132,  133,  134,  135,  136,  137,
 /*  4640 */   138,  139,  140,  141,  142,  143,  144,  145,  146,  147,
 /*  4650 */    83,   84,   85,  160,   87,  160,   89,  160,  160,  160,
 /*  4660 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  4670 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  4680 */   160,  160,  160,  116,  160,  160,  160,  160,  121,  160,
 /*  4690 */   160,  160,  160,  160,  160,  128,  160,  130,  131,  132,
 /*  4700 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*  4710 */   143,  144,  145,  146,  147,  160,   83,   84,   85,  160,
 /*  4720 */    87,  160,   89,  160,  160,  160,  160,  160,  160,  160,
 /*  4730 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  4740 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  116,
 /*  4750 */   160,  160,  160,  160,  121,  160,  160,  160,  160,  160,
 /*  4760 */   160,  128,  160,  130,  131,  132,  133,  134,  135,  136,
 /*  4770 */   137,  138,  139,  140,  141,  142,  143,  144,  145,  146,
 /*  4780 */   147,   83,   84,   85,  160,   87,  160,   89,  160,  160,
 /*  4790 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  4800 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  4810 */   160,  160,  160,  160,  116,  160,  160,  160,  160,  121,
 /*  4820 */   160,  160,  160,  160,  160,  160,  128,  160,  130,  131,
 /*  4830 */   132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
 /*  4840 */   142,  143,  144,  145,  146,  147,  160,   83,   84,   85,
 /*  4850 */   160,   87,  160,   89,  160,  160,  160,  160,  160,  160,
 /*  4860 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  4870 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  4880 */   116,  160,  160,  160,  160,  121,  160,  160,  160,  160,
 /*  4890 */   160,  160,  128,  160,  130,  131,  132,  133,  134,  135,
 /*  4900 */   136,  137,  138,  139,  140,  141,  142,  143,  144,  145,
 /*  4910 */   146,  147,   83,   84,   85,  160,   87,  160,   89,  160,
 /*  4920 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  4930 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  4940 */   160,  160,  160,  160,  160,  116,  160,  160,  160,  160,
 /*  4950 */   121,  160,  160,  160,  160,  160,  160,  128,  160,  130,
 /*  4960 */   131,  132,  133,  134,  135,  136,  137,  138,  139,  140,
 /*  4970 */   141,  142,  143,  144,  145,  146,  147,  160,   83,   84,
 /*  4980 */    85,  160,   87,  160,   89,  160,  160,  160,  160,  160,
 /*  4990 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  5000 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  5010 */   160,  116,  160,  160,  160,  160,  121,  160,  160,  160,
 /*  5020 */   160,  160,  160,  128,  160,  130,  131,  132,  133,  134,
 /*  5030 */   135,  136,  137,  138,  139,  140,  141,  142,  143,  144,
 /*  5040 */   145,  146,  147,   83,   84,   85,  160,   87,  160,   89,
 /*  5050 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  5060 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  5070 */   160,  160,  160,  160,  160,  160,  116,  160,  160,  160,
 /*  5080 */   160,  121,  160,  160,  160,  160,  160,  160,  128,  160,
 /*  5090 */   130,  131,  132,  133,  134,  135,  136,  137,  138,  139,
 /*  5100 */   140,  141,  142,  143,  144,  145,  146,  147,  160,   83,
 /*  5110 */    84,   85,  160,   87,  160,   89,  160,  160,  160,  160,
 /*  5120 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  5130 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  5140 */   160,  160,  116,  160,  160,  160,  160,  121,  160,  160,
 /*  5150 */   160,  160,  160,  160,  128,  160,  130,  131,  132,  133,
 /*  5160 */   134,  135,  136,  137,  138,  139,  140,  141,  142,  143,
 /*  5170 */   144,  145,  146,  147,   83,   84,   85,  160,   87,  160,
 /*  5180 */    89,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  5190 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  5200 */   160,  160,  160,  160,  160,  160,  160,  116,  160,  160,
 /*  5210 */   160,  160,  121,  160,  160,  160,  160,  160,  160,  128,
 /*  5220 */   160,  130,  131,  132,  133,  134,  135,  136,  137,  138,
 /*  5230 */   139,  140,  141,  142,  143,  144,  145,  146,  147,  160,
 /*  5240 */    83,   84,   85,  160,   87,  160,   89,  160,  160,  160,
 /*  5250 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  5260 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  5270 */   160,  160,  160,  116,  160,  160,  160,  160,  121,  160,
 /*  5280 */   160,  160,  160,  160,  160,  128,  160,  130,  131,  132,
 /*  5290 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*  5300 */   143,  144,  145,  146,  147,    6,    7,    8,    9,   10,
 /*  5310 */   160,   12,   13,  160,  160,  160,  160,   18,  160,   20,
 /*  5320 */    21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
 /*  5330 */    31,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  5340 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  5350 */   160,  160,  160,  160,   55,   56,  160,   83,   84,   85,
 /*  5360 */   160,    6,    7,    8,    9,  160,  160,   12,   13,  160,
 /*  5370 */    15,  160,  160,   18,  160,   20,   21,   22,   23,   24,
 /*  5380 */    25,   26,   27,   28,   29,   30,   31,  160,  160,  160,
 /*  5390 */   116,  160,  160,  160,  160,  121,  160,  160,  160,  160,
 /*  5400 */   160,  160,  128,  160,  160,  131,  132,  160,  160,  160,
 /*  5410 */    55,   56,   83,   84,   85,  160,  160,    6,    7,    8,
 /*  5420 */     9,  160,  160,   12,   13,  160,  160,  160,  160,   18,
 /*  5430 */    19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
 /*  5440 */    29,   30,   31,  160,  160,  116,  160,  160,  160,  160,
 /*  5450 */   121,  160,  160,  160,  160,  160,  160,  128,  160,  160,
 /*  5460 */   131,  132,  133,  134,  135,  136,   55,   56,   83,   84,
 /*  5470 */    85,  160,  160,    6,    7,    8,    9,   10,  160,   12,
 /*  5480 */    13,  160,  160,  160,  160,   18,  160,   20,   21,   22,
 /*  5490 */    23,   24,   25,   26,   27,   28,   29,   30,   31,  160,
 /*  5500 */   160,  116,  160,  160,  160,  160,  121,  160,  160,  160,
 /*  5510 */   160,  160,  160,  128,  160,  160,  131,  132,  133,  134,
 /*  5520 */   135,  136,   55,   56,   83,   84,   85,  160,  160,    6,
 /*  5530 */     7,    8,    9,  160,  160,   12,   13,   14,  160,  160,
 /*  5540 */   160,   18,  160,   20,   21,   22,   23,   24,   25,   26,
 /*  5550 */    27,   28,   29,   30,   31,  160,  160,  116,  160,  160,
 /*  5560 */   160,  160,  121,  160,  160,  160,  160,  160,  160,  128,
 /*  5570 */   160,  160,  131,  132,  160,  160,  160,  160,   55,   56,
 /*  5580 */    83,   84,   85,  160,  160,    6,    7,    8,    9,  160,
 /*  5590 */   160,   12,   13,   14,  160,  160,  160,   18,  160,   20,
 /*  5600 */    21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
 /*  5610 */    31,  160,  160,  116,  160,  160,  160,  160,  121,  160,
 /*  5620 */   160,  160,  160,  160,  160,  128,  160,  160,  131,  132,
 /*  5630 */   160,  160,  160,  160,   55,   56,   83,   84,   85,  160,
 /*  5640 */   160,    6,    7,    8,    9,  160,  160,   12,   13,  160,
 /*  5650 */    15,  160,  160,   18,  160,   20,   21,   22,   23,   24,
 /*  5660 */    25,   26,   27,   28,   29,   30,   31,  160,  160,  116,
 /*  5670 */   160,  160,  160,  160,  121,  160,  160,  160,  160,  160,
 /*  5680 */   160,  128,  160,  160,  131,  132,  160,  160,  160,  160,
 /*  5690 */    55,   56,  160,  160,  160,  160,  160,    6,    7,    8,
 /*  5700 */     9,  160,  160,   12,   13,  160,  160,  160,  160,   18,
 /*  5710 */   160,   20,   21,   22,   23,   24,   25,   26,   27,   28,
 /*  5720 */    29,   30,   31,  160,  160,   83,   84,   85,  160,  160,
 /*  5730 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  5740 */   160,  160,  160,  160,  160,  160,   55,   56,  160,  160,
 /*  5750 */   160,  160,  160,  160,  160,  160,  160,  160,  116,  160,
 /*  5760 */   160,  160,  160,  121,  160,  160,  160,  160,  160,  160,
 /*  5770 */   128,  160,  160,  131,  132,  133,  134,  135,  136,  137,
 /*  5780 */   138,  139,  140,  141,  142,  143,  144,  145,    6,    7,
 /*  5790 */     8,    9,  160,   11,   12,   13,  160,  160,  160,  160,
 /*  5800 */    18,  160,   20,   21,   22,   23,   24,   25,   26,   27,
 /*  5810 */    28,   29,   30,   31,  160,  160,  160,  160,  160,  160,
 /*  5820 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  5830 */   160,  160,  160,  160,  160,  160,  160,   55,  160,  160,
 /*  5840 */   160,  160,  160,  160,    6,    7,    8,    9,  160,  160,
 /*  5850 */    12,   13,  160,  160,  160,  160,   18,   19,   20,   21,
 /*  5860 */    22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
 /*  5870 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  5880 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  5890 */   160,  160,  160,   55,   83,   84,   85,  160,  160,  160,
 /*  5900 */     6,    7,    8,    9,  160,  160,   12,   13,  160,  160,
 /*  5910 */   160,  160,   18,   19,   20,   21,   22,   23,   24,   25,
 /*  5920 */    26,   27,   28,   29,   30,   31,  160,  116,  160,  160,
 /*  5930 */   160,  160,  121,  160,  160,  160,  160,  160,  160,  128,
 /*  5940 */   160,  160,  131,  132,  133,  134,  135,  136,  137,   55,
 /*  5950 */    83,   84,   85,  160,  160,  160,    6,    7,    8,    9,
 /*  5960 */   160,  160,   12,   13,  160,  160,  160,  160,   18,   19,
 /*  5970 */    20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
 /*  5980 */    30,   31,  160,  116,  160,  160,  160,  160,  121,  160,
 /*  5990 */   160,  160,  160,  160,  160,  128,  160,  160,  131,  132,
 /*  6000 */   133,  134,  135,  136,  137,   55,  160,  160,  160,  160,
 /*  6010 */   160,  160,    6,    7,    8,    9,  160,  160,   12,   13,
 /*  6020 */   160,  160,  160,  160,   18,   19,   20,   21,   22,   23,
 /*  6030 */    24,   25,   26,   27,   28,   29,   30,   31,  160,  160,
 /*  6040 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  6050 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  6060 */   160,   55,  160,  160,  160,  160,  160,  160,    6,    7,
 /*  6070 */     8,    9,  160,  160,   12,   13,  160,   15,  160,  160,
 /*  6080 */    18,  160,   20,   21,   22,   23,   24,   25,   26,   27,
 /*  6090 */    28,   29,   30,   31,  160,  160,  160,  160,  160,  160,
 /*  6100 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  6110 */   160,  160,  160,  160,  160,  160,  160,   55,  160,  160,
 /*  6120 */   160,  160,  160,  160,    6,    7,    8,    9,  160,  160,
 /*  6130 */    12,   13,  160,  160,  160,  160,   18,   19,   20,   21,
 /*  6140 */    22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
 /*  6150 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  6160 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  6170 */   160,  160,  160,   55,  160,  160,  160,  160,  160,  160,
 /*  6180 */     6,    7,    8,    9,  160,  160,   12,   13,  160,  160,
 /*  6190 */   160,  160,   18,   19,   20,   21,   22,   23,   24,   25,
 /*  6200 */    26,   27,   28,   29,   30,   31,  160,  160,  160,  160,
 /*  6210 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  6220 */   160,  160,  160,  160,  160,  160,  160,  160,  160,   55,
 /*  6230 */   160,  160,  160,  160,  160,  160,    6,    7,    8,    9,
 /*  6240 */   160,  160,   12,   13,  160,  160,  160,  160,   18,   19,
 /*  6250 */    20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
 /*  6260 */    30,   31,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  6270 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  6280 */   160,  160,  160,  160,  160,   55,  160,  160,  160,  160,
 /*  6290 */   160,  160,    6,    7,    8,    9,  160,  160,   12,   13,
 /*  6300 */   160,  160,  160,  160,   18,  160,   20,   21,   22,   23,
 /*  6310 */    24,   25,   26,   27,   28,   29,   30,   31,  160,  160,
 /*  6320 */    83,   84,   85,  160,  160,  160,  160,  160,  160,  160,
 /*  6330 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  6340 */   160,   55,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  6350 */   160,  160,  160,  116,  160,  160,  160,  160,  121,  160,
 /*  6360 */   160,  160,  160,  160,  160,  128,  160,  160,  131,  132,
 /*  6370 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*  6380 */   143,  144,   83,   84,   85,  160,  160,  160,  160,  160,
 /*  6390 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  6400 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  6410 */   160,  160,  160,  160,  160,  116,  160,  160,  160,  160,
 /*  6420 */   121,  160,  160,  160,  160,  160,  160,  128,  160,  160,
 /*  6430 */   131,  132,  133,  134,  135,  136,  137,  138,  139,  140,
 /*  6440 */   141,  142,  143,  160,  160,  160,  160,  160,  160,   83,
 /*  6450 */    84,   85,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  6460 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  6470 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  6480 */   160,  160,  116,  160,  160,  160,  160,  121,  160,  160,
 /*  6490 */   160,  160,  160,  160,  128,  160,  160,  131,  132,  133,
 /*  6500 */   134,  135,  136,  137,  138,  139,  140,  141,  142,  160,
 /*  6510 */   160,   83,   84,   85,  160,  160,  160,  160,  160,  160,
 /*  6520 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  6530 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  6540 */   160,  160,  160,  160,  116,  160,  160,  160,  160,  121,
 /*  6550 */   160,  160,  160,  160,  160,  160,  128,  160,  160,  131,
 /*  6560 */   132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
 /*  6570 */   160,   83,   84,   85,  160,  160,  160,  160,  160,  160,
 /*  6580 */   160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
 /*  6590 */   160,  160,  160,  160,  160,  160,   83,   84,   85,  160,
 /*  6600 */   160,  160,  160,  160,  116,  160,  160,  160,  160,  121,
 /*  6610 */   160,  160,  160,  160,  160,  160,  128,  160,  160,  131,
 /*  6620 */   132,  133,  134,  135,  136,  137,  138,  139,  140,  116,
 /*  6630 */   160,  160,  160,   83,  121,  160,   86,  160,   88,  160,
 /*  6640 */   160,  128,   92,  160,  131,  132,  133,  134,  135,  136,
 /*  6650 */   137,  138,  139,   83,   84,   85,  160,  160,  160,  160,
 /*  6660 */   160,  160,  160,  160,  160,  160,  116,  160,  160,  119,
 /*  6670 */   160,  160,  122,  123,  124,  125,  126,  127,  160,  160,
 /*  6680 */   160,  160,  160,  160,  160,  160,  116,  160,  160,  160,
 /*  6690 */   160,  121,  160,  160,  160,  160,  160,  160,  128,  160,
 /*  6700 */   160,  131,  132,  133,  134,  135,  136,  137,  138,
};
#define YY_SHIFT_USE_DFLT (-27)
#define YY_SHIFT_MAX 284
static const short yy_shift_ofst[] = {
 /*     0 */   -27, 1209, 1288, 1130, 1051,  972, 1370, 1449, 1449, 1449,
 /*    10 */  1449, 1528, 1449, 1528, 1449, 1528, 1528, 1528, 1449, 5635,
 /*    20 */  5355, 5355, 5355, 5355, 5691, 5691, 5691, 5691, 5691, 5691,
 /*    30 */  5411, 5467, 5523, 5579, 5299, 5691, 5691, 5691, 5691, 5691,
 /*    40 */  5691, 5782, 5691, 5691, 5691, 6286, 5838, 5894, 5950, 6006,
 /*    50 */  6062, 6118, 6174, 6230, 6286, 6286, 6286, 6286, 6286, 6286,
 /*    60 */  6286, 6286, 6286, 6286, 6286, 6286, 6286, 6286, 6286, 6286,
 /*    70 */  6286, 6286, 6286, 6286, 6286, 6286, 6286, 6286, 6286, 6286,
 /*    80 */  6286, 6286, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
 /*    90 */  1654, 1654, 1654, 1654, 1654,   -1,  297, 1654, 1654, 1654,
 /*   100 */  1654, 1654, 1654, 1654, 1654, 1654, 1654, 1009, 1009, 1012,
 /*   110 */  1012, 1012,  379,  228,  213,  174,  174,  174, 3089, 3157,
 /*   120 */  3224,  962,  962,   73,   97,   28,  148,  172,  253,  103,
 /*   130 */   178,  448,  328,  403,  472,  322,  373,  397,  322,  328,
 /*   140 */   325,  400,  174,  182,  174,  174,  174,  321,  321,  174,
 /*   150 */   -27,  -27,  -27,  -27,  -27,  -27,  -27,   85,   85,   85,
 /*   160 */   223,  176,  127,  127,   31,  249,  117,  445,  -26,  283,
 /*   170 */   298,    5,  474,  101,   35,  252,  248,   65,  476,  117,
 /*   180 */   260,  370,  221,  218,  185,  117,  478,  301,  281,  117,
 /*   190 */   375,  334,  389,  401,  402,  398,  405,  404,  408,  434,
 /*   200 */   450,  446,  447,  443,  451,  449,  480,  429,  484,  468,
 /*   210 */   470,  481,  464,  505,  465,  521,  516,  522,  514,  527,
 /*   220 */   479,  467,  520,  526,  531,  546,  503,  550,  551,  553,
 /*   230 */   524,  525,  555,  524,  529,  519,  525,  562,  529,  503,
 /*   240 */   565,  576,  519,  586,  593,  597,  595,  603,  598,  562,
 /*   250 */   601,  600,  559,  609,  617,  578,  579,  550,  613,  626,
 /*   260 */   623,  624,  628,  621,  625,  630,  633,  427,  459,  454,
 /*   270 */   528,  540,  554,  549,  585,  589,  599,  619,  530,  605,
 /*   280 */   560,  535,  385,  627,  583,
};
#define YY_REDUCE_USE_DFLT (-107)
#define YY_REDUCE_MAX 156
static const short yy_reduce_ofst[] = {
 /*     0 */  -106,  -83,  -83,  -83,  -83,  -83,  -83,  442,  367,  292,
 /*    10 */   217,  142,   -8,  817,  742,  667,  592,  517,   67, 1505,
 /*    20 */  1718, 1785, 1852, 1919, 1651, 1584, 2187, 2053, 1986, 2120,
 /*    30 */  2924, 2857, 2790, 2723, 2254, 2656, 2589, 2522, 2455, 2388,
 /*    40 */  2321, 2991, 3256, 3056, 3189, 3123, 3454, 3519, 3781, 4698,
 /*    50 */  4633, 4502, 4371, 4043, 4174, 4043, 3978, 3912, 3781, 3716,
 /*    60 */  3650, 3519, 3454, 3388, 5157, 3585, 3847, 4109, 4240, 4305,
 /*    70 */  4436, 4567, 4502, 4764, 4698, 4829, 4895, 4960, 4371, 5026,
 /*    80 */  5091, 3323, 5642, 6237, 6299, 6366, 6428, 6488, 6513, 6570,
 /*    90 */  5867, 5811, 1380, 5329, 5385, 6550, 6550, 2695, 2561, 2293,
 /*   100 */  2159, 1626, 1891, 2427, 1497, 1759, 2025, 5274, 5441, 5497,
 /*   110 */  5553, 2829, -100,  230,  114,  163,  -59,   -3,  571,  584,
 /*   120 */   571,  577,  577,  -10,  -78,  -47,  -10,  -78,  -78,  -52,
 /*   130 */   -47,  -39,  -10,  -52,   23,   41,   23,   41,   48,   69,
 /*   140 */   -10,  -39,   32,  115,  171,  200,  226,  219,  222,  254,
 /*   150 */   232,  245,  255,  256,  265,  271,  272,
};
static const YYACTIONTYPE yy_default[] = {
 /*     0 */   694,  757,  757,  757,  757,  757,  757,  757,  757,  757,
 /*    10 */   757,  757,  757,  757,  757,  757,  757,  757,  757,  739,
 /*    20 */   757,  757,  757,  757,  741,  741,  757,  757,  757,  757,
 /*    30 */   757,  757,  757,  757,  757,  757,  757,  757,  757,  757,
 /*    40 */   757,  757,  678,  757,  757,  757,  757,  757,  757,  757,
 /*    50 */   757,  757,  757,  757,  757,  757,  757,  757,  757,  757,
 /*    60 */   757,  757,  757,  757,  757,  757,  757,  757,  757,  757,
 /*    70 */   757,  757,  757,  757,  757,  757,  757,  757,  757,  757,
 /*    80 */   757,  683,  757,  757,  757,  757,  757,  757,  757,  757,
 /*    90 */   757,  757,  757,  757,  757,  757,  757,  757,  757,  757,
 /*   100 */   757,  757,  757,  757,  757,  757,  757,  757,  757,  757,
 /*   110 */   757,  757,  744,  757,  757,  757,  757,  757,  656,  687,
 /*   120 */   656,  619,  620,  522,  563,  567,  562,  563,  563,  565,
 /*   130 */   567,  568,  562,  565,  566,  564,  566,  564,  757,  757,
 /*   140 */   562,  568,  757,  757,  757,  757,  757,  757,  757,  757,
 /*   150 */   694,  504,  694,  694,  504,  694,  694,  594,  593,  592,
 /*   160 */   757,  757,  600,  599,  757,  757,  598,  757,  625,  580,
 /*   170 */   518,  757,  757,  757,  569,  757,  757,  757,  757,  595,
 /*   180 */   757,  757,  519,  523,  513,  596,  757,  757,  757,  597,
 /*   190 */   757,  757,  757,  757,  757,  757,  757,  757,  757,  757,
 /*   200 */   757,  757,  757,  682,  757,  757,  757,  757,  757,  757,
 /*   210 */   757,  757,  757,  757,  570,  757,  757,  757,  757,  757,
 /*   220 */   757,  757,  656,  757,  757,  757,  624,  756,  757,  757,
 /*   230 */   601,  603,  757,  602,  605,  622,  604,  607,  606,  623,
 /*   240 */   757,  757,  621,  757,  514,  757,  757,  757,  757,  608,
 /*   250 */   757,  757,  757,  757,  757,  757,  569,  757,  757,  757,
 /*   260 */   757,  677,  757,  757,  757,  675,  757,  757,  757,  757,
 /*   270 */   757,  757,  757,  757,  757,  757,  757,  757,  757,  757,
 /*   280 */   757,  757,  757,  757,  757,  532,  496,  497,  498,  531,
 /*   290 */   534,  536,  537,  538,  533,  541,  547,  543,  550,  544,
 /*   300 */   553,  545,  556,  546,  559,  560,  571,  572,  573,  574,
 /*   310 */   575,  576,  577,  578,  579,  581,  582,  583,  584,  585,
 /*   320 */   586,  587,  588,  589,  590,  591,  609,  610,  611,  612,
 /*   330 */   613,  614,  615,  616,  617,  618,  626,  549,  502,  503,
 /*   340 */   524,  552,  501,  505,  506,  507,  508,  509,  510,  511,
 /*   350 */   512,  517,  516,  515,  646,  643,  520,  555,  631,  632,
 /*   360 */   633,  635,  634,  636,  637,  638,  639,  680,  681,  652,
 /*   370 */   558,  653,  647,  644,  561,  654,  640,  641,  642,  657,
 /*   380 */   655,  526,  527,  521,  528,  684,  660,  661,  662,  663,
 /*   390 */   664,  665,  666,  667,  668,  669,  670,  671,  672,  685,
 /*   400 */   688,  658,  659,  690,  686,  689,  695,  696,  697,  698,
 /*   410 */   699,  700,  701,  702,  703,  707,  691,  692,  693,  708,
 /*   420 */   709,  706,  710,  704,  705,  712,  713,  714,  715,  716,
 /*   430 */   717,  718,  719,  720,  721,  722,  723,  724,  725,  726,
 /*   440 */   727,  728,  729,  730,  731,  732,  733,  734,  736,  735,
 /*   450 */   737,  738,  742,  740,  743,  745,  746,  747,  748,  750,
 /*   460 */   751,  752,  754,  753,  755,  749,  711,  525,  530,  630,
 /*   470 */   651,  645,  529,  629,  649,  627,  628,  673,  674,  679,
 /*   480 */   676,  557,  570,  554,  551,  548,  569,  539,  540,  542,
 /*   490 */   535,  650,  648,  499,  500,
};
#define YY_SZ_ACTTAB (int)(sizeof(yy_action)/sizeof(yy_action[0]))

/* The next table maps tokens into fallback tokens.  If a construct
** like the following:
** 
**      %fallback ID X Y Z.
**
** appears in the grammar, then ID becomes a fallback token for X, Y,
** and Z.  Whenever one of the tokens X, Y, or Z is input to the parser
** but it does not parse, the type of the token is changed to ID and
** the parse is retried before an error is thrown.
*/
#ifdef YYFALLBACK
static const YYCODETYPE yyFallback[] = {
};
#endif /* YYFALLBACK */

/* The following structure represents a single element of the
** parser's stack.  Information stored includes:
**
**   +  The state number for the parser at this level of the stack.
**
**   +  The value of the token stored at this level of the stack.
**      (In other words, the "major" token.)
**
**   +  The semantic value stored at this level of the stack.  This is
**      the information used by the action routines in the grammar.
**      It is sometimes called the "minor" token.
*/
struct yyStackEntry {
  YYACTIONTYPE stateno;  /* The state-number */
  YYCODETYPE major;      /* The major token value.  This is the code
                         ** number for the token at this stack level */
  YYMINORTYPE minor;     /* The user-supplied minor token value.  This
                         ** is the value of the token  */
};
typedef struct yyStackEntry yyStackEntry;

/* The state of the parser is completely contained in an instance of
** the following structure */
struct yyParser {
  int yyidx;                    /* Index of top element in stack */
#ifdef YYTRACKMAXSTACKDEPTH
  int yyidxMax;                 /* Maximum value of yyidx */
#endif
  int yyerrcnt;                 /* Shifts left before out of the error */
  XecParseARG_SDECL                /* A place to hold %extra_argument */
#if YYSTACKDEPTH<=0
  int yystksz;                  /* Current side of the stack */
  yyStackEntry *yystack;        /* The parser's stack */
#else
  yyStackEntry yystack[YYSTACKDEPTH];  /* The parser's stack */
#endif
};
typedef struct yyParser yyParser;

#ifndef NDEBUG
#include <stdio.h>
static FILE *yyTraceFILE = 0;
static char *yyTracePrompt = 0;
#endif /* NDEBUG */

#ifndef NDEBUG
/* 
** Turn parser tracing on by giving a stream to which to write the trace
** and a prompt to preface each trace message.  Tracing is turned off
** by making either argument NULL 
**
** Inputs:
** <ul>
** <li> A FILE* to which trace output should be written.
**      If NULL, then tracing is turned off.
** <li> A prefix string written at the beginning of every
**      line of trace output.  If NULL, then tracing is
**      turned off.
** </ul>
**
** Outputs:
** None.
*/
void XecParseTrace(FILE *TraceFILE, char *zTracePrompt){
  yyTraceFILE = TraceFILE;
  yyTracePrompt = zTracePrompt;
  if( yyTraceFILE==0 ) yyTracePrompt = 0;
  else if( yyTracePrompt==0 ) yyTraceFILE = 0;
}
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing shifts, the names of all terminals and nonterminals
** are required.  The following table supplies these names */
static const char *const yyTokenName[] = { 
  "$",             "IF",            "ELSE",          "TRY",         
  "CATCH",         "FINALLY",       "YIELD",         "LPN",         
  "IDENTIFIER",    "PERIOD",        "RPN",           "RBR",         
  "LBR",           "COLON",         "SEMICOLON",     "VAR",         
  "ASSIGN",        "COMMA",         "LSQ",           "RSQ",         
  "NEW",           "NULL",          "TRUE",          "FALSE",       
  "NUMBER",        "STRING",        "INCREMENT",     "DECREMENT",   
  "PLUS",          "MINUS",         "XMARK",         "TILDE",       
  "ASTERISK",      "SOLIDUS",       "PERCENT",       "LSHIFT",      
  "LRSHIFT",       "ARSHIFT",       "AMPERSAND",     "CARET",       
  "VBAR",          "CONCATENATE",   "EQUAL",         "NOTEQUAL",    
  "LESS",          "GREATER",       "LESSEQUAL",     "GREATEREQUAL",
  "IN",            "NOTIN",         "IS",            "NOTIS",       
  "LOGICAND",      "LOGICXOR",      "LOGICOR",       "QMARK",       
  "ELLIPSIS",      "MULASSIGN",     "DIVASSIGN",     "MODASSIGN",   
  "INTDIVASSIGN",  "ADDASSIGN",     "SUBASSIGN",     "LSHIFTASSIGN",
  "LRSHIFTASSIGN",  "ARSHIFTASSIGN",  "BITANDASSIGN",  "BITXORASSIGN",
  "BITORASSIGN",   "WHILE",         "DELETE",        "CASE",        
  "DEFAULT",       "CONTINUE",      "BREAK",         "RETURN",      
  "THROW",         "SWITCH",        "DO",            "FOR",         
  "EACHKEY",       "USING",         "error",         "proto",       
  "expr_call",     "expr_yield",    "object_lbr",    "newobj_lbr",  
  "func_lbr",      "newfunc_lbr",   "varname",       "varname_list",
  "mname_list",    "compare_op",    "assign_op",     "value_lbody", 
  "value_list",    "keyval_lbody",  "keyval_list",   "stmt_lbr",    
  "stmt_lbr_ru",   "stmt_if",       "stmt_switch",   "stmt_while",  
  "stmt_do",       "scope_for",     "stmt_foreach",  "stmt_for",    
  "stmt_using",    "try_block",     "try_catch",     "scope_catch", 
  "stmt_catch",    "token_yield",   "script",        "stmt_list",   
  "name",          "expr_paren",    "expr_list",     "decl_object", 
  "object_decls",  "expr_simple",   "object_decl",   "decl_func",   
  "decl_proto",    "decl_noinit",   "decl_var",      "decl_member", 
  "expr_index",    "expr_assign",   "expr_value",    "expr_new",    
  "expr_postfix",  "expr_literal",  "expr_suffix",   "expr_unary",  
  "expr_mul",      "expr_add",      "expr_shift",    "expr_bitand", 
  "expr_bitxor",   "expr_bitor",    "expr_concat",   "expr_compare",
  "expr_and",      "expr_xor",      "expr_or",       "expr_nolbr",  
  "expr_lbody",    "expr_final",    "sexpr_lbody",   "sexpr_list",  
  "sexpr_assign",  "condition",     "stmt",          "stmt_common", 
  "stmt_reuse",    "stmt_try",      "for_cond",      "for_expr",    
};
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing reduce actions, the names of all rules are required.
*/
static const char *const yyRuleName[] = {
 /*   0 */ "script ::= stmt_list",
 /*   1 */ "name ::= IDENTIFIER",
 /*   2 */ "name ::= name PERIOD IDENTIFIER",
 /*   3 */ "proto ::= name expr_paren",
 /*   4 */ "expr_paren ::= LPN RPN",
 /*   5 */ "expr_paren ::= LPN expr_list RPN",
 /*   6 */ "decl_object ::= object_lbr object_decls RBR",
 /*   7 */ "object_lbr ::= name LBR",
 /*   8 */ "object_lbr ::= name COLON expr_simple LBR",
 /*   9 */ "object_decls ::=",
 /*  10 */ "object_decls ::= object_decls object_decl",
 /*  11 */ "object_decl ::= SEMICOLON",
 /*  12 */ "object_decl ::= decl_object",
 /*  13 */ "object_decl ::= decl_func",
 /*  14 */ "object_decl ::= decl_proto SEMICOLON",
 /*  15 */ "object_decl ::= decl_noinit SEMICOLON",
 /*  16 */ "object_decl ::= decl_var SEMICOLON",
 /*  17 */ "object_decl ::= decl_member SEMICOLON",
 /*  18 */ "decl_proto ::= proto",
 /*  19 */ "decl_proto ::= proto YIELD",
 /*  20 */ "decl_func ::= func_lbr stmt_list RBR",
 /*  21 */ "func_lbr ::= proto LBR",
 /*  22 */ "func_lbr ::= proto YIELD LBR",
 /*  23 */ "decl_noinit ::= VAR varname",
 /*  24 */ "decl_noinit ::= VAR varname_list",
 /*  25 */ "decl_var ::= VAR varname ASSIGN expr_list",
 /*  26 */ "decl_var ::= VAR varname_list ASSIGN expr_list",
 /*  27 */ "decl_member ::= name",
 /*  28 */ "decl_member ::= mname_list",
 /*  29 */ "decl_member ::= name ASSIGN expr_list",
 /*  30 */ "decl_member ::= mname_list ASSIGN expr_list",
 /*  31 */ "varname ::= IDENTIFIER",
 /*  32 */ "varname_list ::= varname COMMA varname",
 /*  33 */ "varname_list ::= varname_list COMMA varname",
 /*  34 */ "mname_list ::= name COMMA varname",
 /*  35 */ "mname_list ::= mname_list COMMA varname",
 /*  36 */ "expr_index ::= LPN expr_assign RPN",
 /*  37 */ "expr_index ::= name PERIOD LSQ expr_value RSQ",
 /*  38 */ "expr_index ::= name LSQ expr_value RSQ",
 /*  39 */ "expr_index ::= expr_index PERIOD IDENTIFIER",
 /*  40 */ "expr_index ::= expr_index PERIOD LSQ expr_value RSQ",
 /*  41 */ "expr_index ::= expr_index LSQ expr_value RSQ",
 /*  42 */ "expr_yield ::= YIELD LPN RPN",
 /*  43 */ "expr_yield ::= YIELD LPN expr_list RPN",
 /*  44 */ "expr_new ::= NEW name expr_paren",
 /*  45 */ "expr_new ::= NEW expr_index expr_paren",
 /*  46 */ "expr_call ::= proto expr_paren",
 /*  47 */ "expr_call ::= expr_index expr_paren",
 /*  48 */ "expr_call ::= expr_yield expr_paren",
 /*  49 */ "expr_call ::= expr_new expr_paren",
 /*  50 */ "expr_call ::= expr_call expr_paren",
 /*  51 */ "expr_call ::= expr_postfix expr_paren",
 /*  52 */ "expr_postfix ::= proto PERIOD IDENTIFIER",
 /*  53 */ "expr_postfix ::= proto PERIOD LSQ expr_value RSQ",
 /*  54 */ "expr_postfix ::= proto LSQ expr_value RSQ",
 /*  55 */ "expr_postfix ::= expr_yield PERIOD IDENTIFIER",
 /*  56 */ "expr_postfix ::= expr_yield PERIOD LSQ expr_value RSQ",
 /*  57 */ "expr_postfix ::= expr_yield LSQ expr_value RSQ",
 /*  58 */ "expr_postfix ::= expr_new PERIOD IDENTIFIER",
 /*  59 */ "expr_postfix ::= expr_new PERIOD LSQ expr_value RSQ",
 /*  60 */ "expr_postfix ::= expr_new LSQ expr_value RSQ",
 /*  61 */ "expr_postfix ::= expr_call PERIOD IDENTIFIER",
 /*  62 */ "expr_postfix ::= expr_call PERIOD LSQ expr_value RSQ",
 /*  63 */ "expr_postfix ::= expr_call LSQ expr_value RSQ",
 /*  64 */ "expr_postfix ::= expr_postfix PERIOD IDENTIFIER",
 /*  65 */ "expr_postfix ::= expr_postfix PERIOD LSQ expr_value RSQ",
 /*  66 */ "expr_postfix ::= expr_postfix LSQ expr_value RSQ",
 /*  67 */ "expr_simple ::= name",
 /*  68 */ "expr_simple ::= proto",
 /*  69 */ "expr_simple ::= expr_index",
 /*  70 */ "expr_simple ::= expr_yield",
 /*  71 */ "expr_simple ::= expr_new",
 /*  72 */ "expr_simple ::= expr_call",
 /*  73 */ "expr_simple ::= expr_postfix",
 /*  74 */ "expr_simple ::= proto YIELD",
 /*  75 */ "expr_simple ::= expr_call YIELD",
 /*  76 */ "expr_literal ::= expr_simple",
 /*  77 */ "expr_literal ::= NULL",
 /*  78 */ "expr_literal ::= TRUE",
 /*  79 */ "expr_literal ::= FALSE",
 /*  80 */ "expr_literal ::= NUMBER",
 /*  81 */ "expr_literal ::= STRING",
 /*  82 */ "expr_suffix ::= expr_literal",
 /*  83 */ "expr_suffix ::= expr_suffix INCREMENT",
 /*  84 */ "expr_suffix ::= expr_suffix DECREMENT",
 /*  85 */ "expr_unary ::= expr_suffix",
 /*  86 */ "expr_unary ::= PLUS expr_unary",
 /*  87 */ "expr_unary ::= MINUS expr_unary",
 /*  88 */ "expr_unary ::= XMARK expr_unary",
 /*  89 */ "expr_unary ::= TILDE expr_unary",
 /*  90 */ "expr_unary ::= INCREMENT expr_unary",
 /*  91 */ "expr_unary ::= DECREMENT expr_unary",
 /*  92 */ "expr_mul ::= expr_unary",
 /*  93 */ "expr_mul ::= expr_mul ASTERISK expr_unary",
 /*  94 */ "expr_mul ::= expr_mul SOLIDUS expr_unary",
 /*  95 */ "expr_mul ::= expr_mul PERCENT expr_unary",
 /*  96 */ "expr_mul ::= expr_mul TILDE expr_unary",
 /*  97 */ "expr_add ::= expr_mul",
 /*  98 */ "expr_add ::= expr_add PLUS expr_mul",
 /*  99 */ "expr_add ::= expr_add MINUS expr_mul",
 /* 100 */ "expr_shift ::= expr_add",
 /* 101 */ "expr_shift ::= expr_shift LSHIFT expr_add",
 /* 102 */ "expr_shift ::= expr_shift LRSHIFT expr_add",
 /* 103 */ "expr_shift ::= expr_shift ARSHIFT expr_add",
 /* 104 */ "expr_bitand ::= expr_shift",
 /* 105 */ "expr_bitand ::= expr_bitand AMPERSAND expr_shift",
 /* 106 */ "expr_bitxor ::= expr_bitand",
 /* 107 */ "expr_bitxor ::= expr_bitxor CARET expr_bitand",
 /* 108 */ "expr_bitor ::= expr_bitxor",
 /* 109 */ "expr_bitor ::= expr_bitor VBAR expr_bitxor",
 /* 110 */ "expr_concat ::= expr_bitor",
 /* 111 */ "expr_concat ::= expr_concat CONCATENATE expr_bitor",
 /* 112 */ "expr_compare ::= expr_concat",
 /* 113 */ "expr_compare ::= expr_compare compare_op expr_concat",
 /* 114 */ "compare_op ::= EQUAL",
 /* 115 */ "compare_op ::= NOTEQUAL",
 /* 116 */ "compare_op ::= LESS",
 /* 117 */ "compare_op ::= GREATER",
 /* 118 */ "compare_op ::= LESSEQUAL",
 /* 119 */ "compare_op ::= GREATEREQUAL",
 /* 120 */ "compare_op ::= IN",
 /* 121 */ "compare_op ::= NOTIN",
 /* 122 */ "compare_op ::= IS",
 /* 123 */ "compare_op ::= NOTIS",
 /* 124 */ "expr_and ::= expr_compare",
 /* 125 */ "expr_and ::= expr_and LOGICAND expr_compare",
 /* 126 */ "expr_xor ::= expr_and",
 /* 127 */ "expr_xor ::= expr_xor LOGICXOR expr_and",
 /* 128 */ "expr_or ::= expr_xor",
 /* 129 */ "expr_or ::= expr_or LOGICOR expr_xor",
 /* 130 */ "expr_nolbr ::= expr_or",
 /* 131 */ "expr_nolbr ::= expr_or QMARK expr_value COLON expr_value",
 /* 132 */ "expr_nolbr ::= LSQ RSQ",
 /* 133 */ "expr_nolbr ::= LSQ value_list RSQ",
 /* 134 */ "expr_nolbr ::= newobj_lbr object_decls RBR",
 /* 135 */ "expr_nolbr ::= newfunc_lbr stmt_list RBR",
 /* 136 */ "newobj_lbr ::= COLON LBR",
 /* 137 */ "newobj_lbr ::= COLON expr_simple LBR",
 /* 138 */ "newfunc_lbr ::= QMARK expr_paren LBR",
 /* 139 */ "newfunc_lbr ::= PERIOD QMARK expr_paren LBR",
 /* 140 */ "newfunc_lbr ::= QMARK expr_paren YIELD LBR",
 /* 141 */ "newfunc_lbr ::= PERIOD QMARK expr_paren YIELD LBR",
 /* 142 */ "expr_value ::= expr_nolbr",
 /* 143 */ "expr_value ::= LBR RBR",
 /* 144 */ "expr_value ::= LBR keyval_list RBR",
 /* 145 */ "expr_lbody ::= expr_value",
 /* 146 */ "expr_lbody ::= expr_lbody COMMA expr_value",
 /* 147 */ "expr_final ::= ELLIPSIS",
 /* 148 */ "expr_final ::= proto ELLIPSIS",
 /* 149 */ "expr_final ::= expr_call ELLIPSIS",
 /* 150 */ "expr_final ::= expr_yield ELLIPSIS",
 /* 151 */ "expr_final ::= proto YIELD ELLIPSIS",
 /* 152 */ "expr_final ::= expr_call YIELD ELLIPSIS",
 /* 153 */ "expr_final ::= name LSQ RSQ ELLIPSIS",
 /* 154 */ "expr_final ::= proto LSQ RSQ ELLIPSIS",
 /* 155 */ "expr_final ::= expr_index LSQ RSQ ELLIPSIS",
 /* 156 */ "expr_final ::= expr_yield LSQ RSQ ELLIPSIS",
 /* 157 */ "expr_final ::= expr_new LSQ RSQ ELLIPSIS",
 /* 158 */ "expr_final ::= expr_call LSQ RSQ ELLIPSIS",
 /* 159 */ "expr_final ::= expr_postfix LSQ RSQ ELLIPSIS",
 /* 160 */ "expr_list ::= expr_final",
 /* 161 */ "expr_list ::= expr_lbody",
 /* 162 */ "expr_list ::= expr_lbody COMMA expr_final",
 /* 163 */ "expr_assign ::= expr_list",
 /* 164 */ "expr_assign ::= expr_lbody assign_op expr_assign",
 /* 165 */ "assign_op ::= ASSIGN",
 /* 166 */ "assign_op ::= MULASSIGN",
 /* 167 */ "assign_op ::= DIVASSIGN",
 /* 168 */ "assign_op ::= MODASSIGN",
 /* 169 */ "assign_op ::= INTDIVASSIGN",
 /* 170 */ "assign_op ::= ADDASSIGN",
 /* 171 */ "assign_op ::= SUBASSIGN",
 /* 172 */ "assign_op ::= LSHIFTASSIGN",
 /* 173 */ "assign_op ::= LRSHIFTASSIGN",
 /* 174 */ "assign_op ::= ARSHIFTASSIGN",
 /* 175 */ "assign_op ::= BITANDASSIGN",
 /* 176 */ "assign_op ::= BITXORASSIGN",
 /* 177 */ "assign_op ::= BITORASSIGN",
 /* 178 */ "value_lbody ::= expr_value",
 /* 179 */ "value_lbody ::= value_lbody COMMA expr_value",
 /* 180 */ "value_list ::= expr_final",
 /* 181 */ "value_list ::= expr_final COMMA",
 /* 182 */ "value_list ::= value_lbody",
 /* 183 */ "value_list ::= value_lbody COMMA",
 /* 184 */ "value_list ::= value_lbody COMMA expr_final",
 /* 185 */ "keyval_lbody ::= expr_value COLON expr_value",
 /* 186 */ "keyval_lbody ::= keyval_lbody COMMA expr_value COLON expr_value",
 /* 187 */ "keyval_list ::= keyval_lbody",
 /* 188 */ "keyval_list ::= keyval_lbody COMMA",
 /* 189 */ "sexpr_lbody ::= expr_nolbr",
 /* 190 */ "sexpr_lbody ::= sexpr_lbody COMMA expr_value",
 /* 191 */ "sexpr_list ::= expr_final",
 /* 192 */ "sexpr_list ::= sexpr_lbody",
 /* 193 */ "sexpr_list ::= sexpr_lbody COMMA expr_final",
 /* 194 */ "sexpr_assign ::= sexpr_list",
 /* 195 */ "sexpr_assign ::= sexpr_lbody assign_op expr_assign",
 /* 196 */ "condition ::= expr_assign",
 /* 197 */ "condition ::= VAR varname ASSIGN expr_list",
 /* 198 */ "condition ::= VAR varname_list ASSIGN expr_list",
 /* 199 */ "stmt_list ::=",
 /* 200 */ "stmt_list ::= stmt_list SEMICOLON",
 /* 201 */ "stmt_list ::= stmt_list stmt",
 /* 202 */ "stmt_list ::= stmt_list decl_object",
 /* 203 */ "stmt_list ::= stmt_list decl_func",
 /* 204 */ "stmt_list ::= stmt_list decl_var SEMICOLON",
 /* 205 */ "stmt_list ::= stmt_list decl_noinit SEMICOLON",
 /* 206 */ "stmt ::= stmt_lbr stmt_list RBR",
 /* 207 */ "stmt ::= stmt_common",
 /* 208 */ "stmt_lbr ::= LBR",
 /* 209 */ "stmt_reuse ::= stmt_lbr_ru stmt_list RBR",
 /* 210 */ "stmt_reuse ::= stmt_common",
 /* 211 */ "stmt_lbr_ru ::= LBR",
 /* 212 */ "stmt_common ::= sexpr_assign SEMICOLON",
 /* 213 */ "stmt_common ::= stmt_if LPN condition RPN stmt",
 /* 214 */ "stmt_common ::= stmt_if LPN condition RPN stmt ELSE stmt",
 /* 215 */ "stmt_common ::= stmt_switch LPN condition RPN stmt_lbr_ru stmt_list RPN",
 /* 216 */ "stmt_common ::= stmt_while LPN condition RPN stmt_reuse",
 /* 217 */ "stmt_common ::= stmt_do stmt_reuse WHILE LPN expr_assign RPN SEMICOLON",
 /* 218 */ "stmt_common ::= stmt_foreach stmt_reuse",
 /* 219 */ "stmt_common ::= stmt_for stmt_reuse",
 /* 220 */ "stmt_common ::= stmt_using LPN condition RPN stmt_reuse",
 /* 221 */ "stmt_common ::= stmt_try",
 /* 222 */ "stmt_common ::= DELETE expr_lbody SEMICOLON",
 /* 223 */ "stmt_common ::= CASE expr_value COLON",
 /* 224 */ "stmt_common ::= DEFAULT COLON",
 /* 225 */ "stmt_common ::= CONTINUE SEMICOLON",
 /* 226 */ "stmt_common ::= BREAK SEMICOLON",
 /* 227 */ "stmt_common ::= RETURN SEMICOLON",
 /* 228 */ "stmt_common ::= RETURN expr_list SEMICOLON",
 /* 229 */ "stmt_common ::= token_yield SEMICOLON",
 /* 230 */ "stmt_common ::= token_yield expr_list SEMICOLON",
 /* 231 */ "stmt_common ::= THROW expr_value SEMICOLON",
 /* 232 */ "stmt_if ::= IF",
 /* 233 */ "stmt_switch ::= SWITCH",
 /* 234 */ "stmt_while ::= WHILE",
 /* 235 */ "stmt_do ::= DO",
 /* 236 */ "scope_for ::= FOR",
 /* 237 */ "stmt_foreach ::= scope_for LPN expr_lbody COLON expr_value RPN",
 /* 238 */ "stmt_foreach ::= scope_for LPN expr_lbody EACHKEY expr_value RPN",
 /* 239 */ "stmt_foreach ::= scope_for LPN VAR varname COLON expr_value RPN",
 /* 240 */ "stmt_foreach ::= scope_for LPN VAR varname_list COLON expr_value RPN",
 /* 241 */ "stmt_foreach ::= scope_for LPN VAR varname EACHKEY expr_value RPN",
 /* 242 */ "stmt_foreach ::= scope_for LPN VAR varname_list EACHKEY expr_value RPN",
 /* 243 */ "stmt_for ::= scope_for LPN for_cond SEMICOLON for_expr SEMICOLON for_expr RPN",
 /* 244 */ "for_cond ::=",
 /* 245 */ "for_cond ::= condition",
 /* 246 */ "for_expr ::=",
 /* 247 */ "for_expr ::= expr_assign",
 /* 248 */ "stmt_using ::= USING",
 /* 249 */ "stmt_try ::= try_catch",
 /* 250 */ "stmt_try ::= try_catch FINALLY stmt",
 /* 251 */ "stmt_try ::= try_block FINALLY stmt",
 /* 252 */ "try_block ::= TRY stmt",
 /* 253 */ "try_catch ::= try_block stmt_catch stmt_reuse",
 /* 254 */ "try_catch ::= try_catch stmt_catch stmt_reuse",
 /* 255 */ "scope_catch ::= CATCH",
 /* 256 */ "stmt_catch ::= scope_catch LPN COLON expr_simple RPN",
 /* 257 */ "stmt_catch ::= scope_catch LPN expr_value COLON expr_simple RPN",
 /* 258 */ "stmt_catch ::= scope_catch LPN VAR varname COLON expr_simple RPN",
 /* 259 */ "stmt_catch ::= scope_catch LPN expr_value RPN",
 /* 260 */ "stmt_catch ::= scope_catch LPN VAR varname RPN",
 /* 261 */ "token_yield ::= YIELD",
};
#endif /* NDEBUG */


#if YYSTACKDEPTH<=0
/*
** Try to increase the size of the parser stack.
*/
static void yyGrowStack(yyParser *p){
  int newSize;
  yyStackEntry *pNew;

  newSize = p->yystksz*2 + 100;
  pNew = realloc(p->yystack, newSize*sizeof(pNew[0]));
  if( pNew ){
    p->yystack = pNew;
    p->yystksz = newSize;
#ifndef NDEBUG
    if( yyTraceFILE ){
      fprintf(yyTraceFILE,"%sStack grows to %d entries!\n",
              yyTracePrompt, p->yystksz);
    }
#endif
  }
}
#endif

/* 
** This function allocates a new parser.
** The only argument is a pointer to a function which works like
** malloc.
**
** Inputs:
** A pointer to the function used to allocate memory.
**
** Outputs:
** A pointer to a parser.  This pointer is used in subsequent calls
** to XecParse and XecParseFree.
*/
void *XecParseAlloc(void *(*mallocProc)(size_t)){
  yyParser *pParser;
  pParser = (yyParser*)(*mallocProc)( (size_t)sizeof(yyParser) );
  if( pParser ){
    pParser->yyidx = -1;
#ifdef YYTRACKMAXSTACKDEPTH
    pParser->yyidxMax = 0;
#endif
#if YYSTACKDEPTH<=0
    pParser->yystack = NULL;
    pParser->yystksz = 0;
    yyGrowStack(pParser);
#endif
  }
  return pParser;
}

/* The following function deletes the value associated with a
** symbol.  The symbol can be either a terminal or nonterminal.
** "yymajor" is the symbol code, and "yypminor" is a pointer to
** the value.
*/
static void yy_destructor(
  yyParser *yypParser,    /* The parser */
  YYCODETYPE yymajor,     /* Type code for object to destroy */
  YYMINORTYPE *yypminor   /* The object to be destroyed */
){
  XecParseARG_FETCH;
  switch( yymajor ){
    /* Here is inserted the actions which take place when a
    ** terminal or non-terminal is destroyed.  This can happen
    ** when the symbol is popped from the stack during a
    ** reduce or during error processing or when a parser is 
    ** being destroyed before it is finished parsing.
    **
    ** Note: during a reduce, the only symbols destroyed are those
    ** which appear on the RHS of the rule, but which are not used
    ** inside the C code.
    */
      /* TERMINAL Destructor */
    case 1: /* IF */
    case 2: /* ELSE */
    case 3: /* TRY */
    case 4: /* CATCH */
    case 5: /* FINALLY */
    case 6: /* YIELD */
    case 7: /* LPN */
    case 8: /* IDENTIFIER */
    case 9: /* PERIOD */
    case 10: /* RPN */
    case 11: /* RBR */
    case 12: /* LBR */
    case 13: /* COLON */
    case 14: /* SEMICOLON */
    case 15: /* VAR */
    case 16: /* ASSIGN */
    case 17: /* COMMA */
    case 18: /* LSQ */
    case 19: /* RSQ */
    case 20: /* NEW */
    case 21: /* NULL */
    case 22: /* TRUE */
    case 23: /* FALSE */
    case 24: /* NUMBER */
    case 25: /* STRING */
    case 26: /* INCREMENT */
    case 27: /* DECREMENT */
    case 28: /* PLUS */
    case 29: /* MINUS */
    case 30: /* XMARK */
    case 31: /* TILDE */
    case 32: /* ASTERISK */
    case 33: /* SOLIDUS */
    case 34: /* PERCENT */
    case 35: /* LSHIFT */
    case 36: /* LRSHIFT */
    case 37: /* ARSHIFT */
    case 38: /* AMPERSAND */
    case 39: /* CARET */
    case 40: /* VBAR */
    case 41: /* CONCATENATE */
    case 42: /* EQUAL */
    case 43: /* NOTEQUAL */
    case 44: /* LESS */
    case 45: /* GREATER */
    case 46: /* LESSEQUAL */
    case 47: /* GREATEREQUAL */
    case 48: /* IN */
    case 49: /* NOTIN */
    case 50: /* IS */
    case 51: /* NOTIS */
    case 52: /* LOGICAND */
    case 53: /* LOGICXOR */
    case 54: /* LOGICOR */
    case 55: /* QMARK */
    case 56: /* ELLIPSIS */
    case 57: /* MULASSIGN */
    case 58: /* DIVASSIGN */
    case 59: /* MODASSIGN */
    case 60: /* INTDIVASSIGN */
    case 61: /* ADDASSIGN */
    case 62: /* SUBASSIGN */
    case 63: /* LSHIFTASSIGN */
    case 64: /* LRSHIFTASSIGN */
    case 65: /* ARSHIFTASSIGN */
    case 66: /* BITANDASSIGN */
    case 67: /* BITXORASSIGN */
    case 68: /* BITORASSIGN */
    case 69: /* WHILE */
    case 70: /* DELETE */
    case 71: /* CASE */
    case 72: /* DEFAULT */
    case 73: /* CONTINUE */
    case 74: /* BREAK */
    case 75: /* RETURN */
    case 76: /* THROW */
    case 77: /* SWITCH */
    case 78: /* DO */
    case 79: /* FOR */
    case 80: /* EACHKEY */
    case 81: /* USING */
{
#line 125 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"

    p->destroy( (yypminor->yy0) );

#line 2236 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
}
      break;
      /* Default NON-TERMINAL Destructor */
    case 82: /* error */
    case 83: /* proto */
    case 84: /* expr_call */
    case 85: /* expr_yield */
    case 86: /* object_lbr */
    case 87: /* newobj_lbr */
    case 88: /* func_lbr */
    case 89: /* newfunc_lbr */
    case 90: /* varname */
    case 91: /* varname_list */
    case 92: /* mname_list */
    case 93: /* compare_op */
    case 94: /* assign_op */
    case 95: /* value_lbody */
    case 96: /* value_list */
    case 97: /* keyval_lbody */
    case 98: /* keyval_list */
    case 99: /* stmt_lbr */
    case 100: /* stmt_lbr_ru */
    case 101: /* stmt_if */
    case 102: /* stmt_switch */
    case 103: /* stmt_while */
    case 104: /* stmt_do */
    case 105: /* scope_for */
    case 106: /* stmt_foreach */
    case 107: /* stmt_for */
    case 108: /* stmt_using */
    case 109: /* try_block */
    case 110: /* try_catch */
    case 111: /* scope_catch */
    case 112: /* stmt_catch */
    case 113: /* token_yield */
    case 114: /* script */
    case 115: /* stmt_list */
    case 116: /* name */
    case 117: /* expr_paren */
    case 118: /* expr_list */
    case 119: /* decl_object */
    case 120: /* object_decls */
    case 121: /* expr_simple */
    case 122: /* object_decl */
    case 123: /* decl_func */
    case 124: /* decl_proto */
    case 125: /* decl_noinit */
    case 126: /* decl_var */
    case 127: /* decl_member */
    case 128: /* expr_index */
    case 129: /* expr_assign */
    case 130: /* expr_value */
    case 131: /* expr_new */
    case 132: /* expr_postfix */
    case 133: /* expr_literal */
    case 134: /* expr_suffix */
    case 135: /* expr_unary */
    case 136: /* expr_mul */
    case 137: /* expr_add */
    case 138: /* expr_shift */
    case 139: /* expr_bitand */
    case 140: /* expr_bitxor */
    case 141: /* expr_bitor */
    case 142: /* expr_concat */
    case 143: /* expr_compare */
    case 144: /* expr_and */
    case 145: /* expr_xor */
    case 146: /* expr_or */
    case 147: /* expr_nolbr */
    case 148: /* expr_lbody */
    case 149: /* expr_final */
    case 150: /* sexpr_lbody */
    case 151: /* sexpr_list */
    case 152: /* sexpr_assign */
    case 153: /* condition */
    case 154: /* stmt */
    case 155: /* stmt_common */
    case 156: /* stmt_reuse */
    case 157: /* stmt_try */
    case 158: /* for_cond */
    case 159: /* for_expr */
{
#line 121 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"


#line 2322 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
}
      break;
    default:  break;   /* If no destructor action specified: do nothing */
  }
}

/*
** Pop the parser's stack once.
**
** If there is a destructor routine associated with the token which
** is popped from the stack, then call it.
**
** Return the major token number for the symbol popped.
*/
static int yy_pop_parser_stack(yyParser *pParser){
  YYCODETYPE yymajor;
  yyStackEntry *yytos = &pParser->yystack[pParser->yyidx];

  if( pParser->yyidx<0 ) return 0;
#ifndef NDEBUG
  if( yyTraceFILE && pParser->yyidx>=0 ){
    fprintf(yyTraceFILE,"%sPopping %s\n",
      yyTracePrompt,
      yyTokenName[yytos->major]);
  }
#endif
  yymajor = yytos->major;
  yy_destructor(pParser, yymajor, &yytos->minor);
  pParser->yyidx--;
  return yymajor;
}

/* 
** Deallocate and destroy a parser.  Destructors are all called for
** all stack elements before shutting the parser down.
**
** Inputs:
** <ul>
** <li>  A pointer to the parser.  This should be a pointer
**       obtained from XecParseAlloc.
** <li>  A pointer to a function used to reclaim memory obtained
**       from malloc.
** </ul>
*/
void XecParseFree(
  void *p,                    /* The parser to be deleted */
  void (*freeProc)(void*)     /* Function used to reclaim memory */
){
  yyParser *pParser = (yyParser*)p;
  if( pParser==0 ) return;
  while( pParser->yyidx>=0 ) yy_pop_parser_stack(pParser);
#if YYSTACKDEPTH<=0
  free(pParser->yystack);
#endif
  (*freeProc)((void*)pParser);
}

/*
** Return the peak depth of the stack for a parser.
*/
#ifdef YYTRACKMAXSTACKDEPTH
int XecParseStackPeak(void *p){
  yyParser *pParser = (yyParser*)p;
  return pParser->yyidxMax;
}
#endif

/*
** Find the appropriate action for a parser given the terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
static int yy_find_shift_action(
  yyParser *pParser,        /* The parser */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
  int stateno = pParser->yystack[pParser->yyidx].stateno;
 
  if( stateno>YY_SHIFT_MAX || (i = yy_shift_ofst[stateno])==YY_SHIFT_USE_DFLT ){
    return yy_default[stateno];
  }
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
  if( i<0 || i>=YY_SZ_ACTTAB || yy_lookahead[i]!=iLookAhead ){
    if( iLookAhead>0 ){
#ifdef YYFALLBACK
      YYCODETYPE iFallback;            /* Fallback token */
      if( iLookAhead<sizeof(yyFallback)/sizeof(yyFallback[0])
             && (iFallback = yyFallback[iLookAhead])!=0 ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE, "%sFALLBACK %s => %s\n",
             yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[iFallback]);
        }
#endif
        return yy_find_shift_action(pParser, iFallback);
      }
#endif
#ifdef YYWILDCARD
      {
        int j = i - iLookAhead + YYWILDCARD;
        if( j>=0 && j<YY_SZ_ACTTAB && yy_lookahead[j]==YYWILDCARD ){
#ifndef NDEBUG
          if( yyTraceFILE ){
            fprintf(yyTraceFILE, "%sWILDCARD %s => %s\n",
               yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[YYWILDCARD]);
          }
#endif /* NDEBUG */
          return yy_action[j];
        }
      }
#endif /* YYWILDCARD */
    }
    return yy_default[stateno];
  }else{
    return yy_action[i];
  }
}

/*
** Find the appropriate action for a parser given the non-terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
static int yy_find_reduce_action(
  int stateno,              /* Current state number */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
#ifdef YYERRORSYMBOL
  if( stateno>YY_REDUCE_MAX ){
    return yy_default[stateno];
  }
#else
  assert( stateno<=YY_REDUCE_MAX );
#endif
  i = yy_reduce_ofst[stateno];
  assert( i!=YY_REDUCE_USE_DFLT );
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
#ifdef YYERRORSYMBOL
  if( i<0 || i>=YY_SZ_ACTTAB || yy_lookahead[i]!=iLookAhead ){
    return yy_default[stateno];
  }
#else
  assert( i>=0 && i<YY_SZ_ACTTAB );
  assert( yy_lookahead[i]==iLookAhead );
#endif
  return yy_action[i];
}

/*
** The following routine is called if the stack overflows.
*/
static void yyStackOverflow(yyParser *yypParser, YYMINORTYPE *yypMinor){
   XecParseARG_FETCH;
   yypParser->yyidx--;
#ifndef NDEBUG
   if( yyTraceFILE ){
     fprintf(yyTraceFILE,"%sStack Overflow!\n",yyTracePrompt);
   }
#endif
   while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
   /* Here code is inserted which will execute if the parser
   ** stack every overflows */
   XecParseARG_STORE; /* Suppress warning about unused %extra_argument var */
}

/*
** Perform a shift action.
*/
static void yy_shift(
  yyParser *yypParser,          /* The parser to be shifted */
  int yyNewState,               /* The new state to shift in */
  int yyMajor,                  /* The major token to shift in */
  YYMINORTYPE *yypMinor         /* Pointer to the minor token to shift in */
){
  yyStackEntry *yytos;
  yypParser->yyidx++;
#ifdef YYTRACKMAXSTACKDEPTH
  if( yypParser->yyidx>yypParser->yyidxMax ){
    yypParser->yyidxMax = yypParser->yyidx;
  }
#endif
#if YYSTACKDEPTH>0 
  if( yypParser->yyidx>=YYSTACKDEPTH ){
    yyStackOverflow(yypParser, yypMinor);
    return;
  }
#else
  if( yypParser->yyidx>=yypParser->yystksz ){
    yyGrowStack(yypParser);
    if( yypParser->yyidx>=yypParser->yystksz ){
      yyStackOverflow(yypParser, yypMinor);
      return;
    }
  }
#endif
  yytos = &yypParser->yystack[yypParser->yyidx];
  yytos->stateno = (YYACTIONTYPE)yyNewState;
  yytos->major = (YYCODETYPE)yyMajor;
  yytos->minor = *yypMinor;
#ifndef NDEBUG
  if( yyTraceFILE && yypParser->yyidx>0 ){
    int i;
    fprintf(yyTraceFILE,"%sShift %d\n",yyTracePrompt,yyNewState);
    fprintf(yyTraceFILE,"%sStack:",yyTracePrompt);
    for(i=1; i<=yypParser->yyidx; i++)
      fprintf(yyTraceFILE," %s",yyTokenName[yypParser->yystack[i].major]);
    fprintf(yyTraceFILE,"\n");
  }
#endif
}

/* The following table contains information about every rule that
** is used during the reduce.
*/
static const struct {
  YYCODETYPE lhs;         /* Symbol on the left-hand side of the rule */
  unsigned char nrhs;     /* Number of right-hand side symbols in the rule */
} yyRuleInfo[] = {
  { 114, 1 },
  { 116, 1 },
  { 116, 3 },
  { 83, 2 },
  { 117, 2 },
  { 117, 3 },
  { 119, 3 },
  { 86, 2 },
  { 86, 4 },
  { 120, 0 },
  { 120, 2 },
  { 122, 1 },
  { 122, 1 },
  { 122, 1 },
  { 122, 2 },
  { 122, 2 },
  { 122, 2 },
  { 122, 2 },
  { 124, 1 },
  { 124, 2 },
  { 123, 3 },
  { 88, 2 },
  { 88, 3 },
  { 125, 2 },
  { 125, 2 },
  { 126, 4 },
  { 126, 4 },
  { 127, 1 },
  { 127, 1 },
  { 127, 3 },
  { 127, 3 },
  { 90, 1 },
  { 91, 3 },
  { 91, 3 },
  { 92, 3 },
  { 92, 3 },
  { 128, 3 },
  { 128, 5 },
  { 128, 4 },
  { 128, 3 },
  { 128, 5 },
  { 128, 4 },
  { 85, 3 },
  { 85, 4 },
  { 131, 3 },
  { 131, 3 },
  { 84, 2 },
  { 84, 2 },
  { 84, 2 },
  { 84, 2 },
  { 84, 2 },
  { 84, 2 },
  { 132, 3 },
  { 132, 5 },
  { 132, 4 },
  { 132, 3 },
  { 132, 5 },
  { 132, 4 },
  { 132, 3 },
  { 132, 5 },
  { 132, 4 },
  { 132, 3 },
  { 132, 5 },
  { 132, 4 },
  { 132, 3 },
  { 132, 5 },
  { 132, 4 },
  { 121, 1 },
  { 121, 1 },
  { 121, 1 },
  { 121, 1 },
  { 121, 1 },
  { 121, 1 },
  { 121, 1 },
  { 121, 2 },
  { 121, 2 },
  { 133, 1 },
  { 133, 1 },
  { 133, 1 },
  { 133, 1 },
  { 133, 1 },
  { 133, 1 },
  { 134, 1 },
  { 134, 2 },
  { 134, 2 },
  { 135, 1 },
  { 135, 2 },
  { 135, 2 },
  { 135, 2 },
  { 135, 2 },
  { 135, 2 },
  { 135, 2 },
  { 136, 1 },
  { 136, 3 },
  { 136, 3 },
  { 136, 3 },
  { 136, 3 },
  { 137, 1 },
  { 137, 3 },
  { 137, 3 },
  { 138, 1 },
  { 138, 3 },
  { 138, 3 },
  { 138, 3 },
  { 139, 1 },
  { 139, 3 },
  { 140, 1 },
  { 140, 3 },
  { 141, 1 },
  { 141, 3 },
  { 142, 1 },
  { 142, 3 },
  { 143, 1 },
  { 143, 3 },
  { 93, 1 },
  { 93, 1 },
  { 93, 1 },
  { 93, 1 },
  { 93, 1 },
  { 93, 1 },
  { 93, 1 },
  { 93, 1 },
  { 93, 1 },
  { 93, 1 },
  { 144, 1 },
  { 144, 3 },
  { 145, 1 },
  { 145, 3 },
  { 146, 1 },
  { 146, 3 },
  { 147, 1 },
  { 147, 5 },
  { 147, 2 },
  { 147, 3 },
  { 147, 3 },
  { 147, 3 },
  { 87, 2 },
  { 87, 3 },
  { 89, 3 },
  { 89, 4 },
  { 89, 4 },
  { 89, 5 },
  { 130, 1 },
  { 130, 2 },
  { 130, 3 },
  { 148, 1 },
  { 148, 3 },
  { 149, 1 },
  { 149, 2 },
  { 149, 2 },
  { 149, 2 },
  { 149, 3 },
  { 149, 3 },
  { 149, 4 },
  { 149, 4 },
  { 149, 4 },
  { 149, 4 },
  { 149, 4 },
  { 149, 4 },
  { 149, 4 },
  { 118, 1 },
  { 118, 1 },
  { 118, 3 },
  { 129, 1 },
  { 129, 3 },
  { 94, 1 },
  { 94, 1 },
  { 94, 1 },
  { 94, 1 },
  { 94, 1 },
  { 94, 1 },
  { 94, 1 },
  { 94, 1 },
  { 94, 1 },
  { 94, 1 },
  { 94, 1 },
  { 94, 1 },
  { 94, 1 },
  { 95, 1 },
  { 95, 3 },
  { 96, 1 },
  { 96, 2 },
  { 96, 1 },
  { 96, 2 },
  { 96, 3 },
  { 97, 3 },
  { 97, 5 },
  { 98, 1 },
  { 98, 2 },
  { 150, 1 },
  { 150, 3 },
  { 151, 1 },
  { 151, 1 },
  { 151, 3 },
  { 152, 1 },
  { 152, 3 },
  { 153, 1 },
  { 153, 4 },
  { 153, 4 },
  { 115, 0 },
  { 115, 2 },
  { 115, 2 },
  { 115, 2 },
  { 115, 2 },
  { 115, 3 },
  { 115, 3 },
  { 154, 3 },
  { 154, 1 },
  { 99, 1 },
  { 156, 3 },
  { 156, 1 },
  { 100, 1 },
  { 155, 2 },
  { 155, 5 },
  { 155, 7 },
  { 155, 7 },
  { 155, 5 },
  { 155, 7 },
  { 155, 2 },
  { 155, 2 },
  { 155, 5 },
  { 155, 1 },
  { 155, 3 },
  { 155, 3 },
  { 155, 2 },
  { 155, 2 },
  { 155, 2 },
  { 155, 2 },
  { 155, 3 },
  { 155, 2 },
  { 155, 3 },
  { 155, 3 },
  { 101, 1 },
  { 102, 1 },
  { 103, 1 },
  { 104, 1 },
  { 105, 1 },
  { 106, 6 },
  { 106, 6 },
  { 106, 7 },
  { 106, 7 },
  { 106, 7 },
  { 106, 7 },
  { 107, 8 },
  { 158, 0 },
  { 158, 1 },
  { 159, 0 },
  { 159, 1 },
  { 108, 1 },
  { 157, 1 },
  { 157, 3 },
  { 157, 3 },
  { 109, 2 },
  { 110, 3 },
  { 110, 3 },
  { 111, 1 },
  { 112, 5 },
  { 112, 6 },
  { 112, 7 },
  { 112, 4 },
  { 112, 5 },
  { 113, 1 },
};

static void yy_accept(yyParser*);  /* Forward Declaration */

/*
** Perform a reduce action and the shift that must immediately
** follow the reduce.
*/
static void yy_reduce(
  yyParser *yypParser,         /* The parser */
  int yyruleno                 /* Number of the rule by which to reduce */
){
  int yygoto;                     /* The next state */
  int yyact;                      /* The next action */
  YYMINORTYPE yygotominor;        /* The LHS of the rule reduced */
  yyStackEntry *yymsp;            /* The top of the parser's stack */
  int yysize;                     /* Amount to pop the stack */
  XecParseARG_FETCH;
  yymsp = &yypParser->yystack[yypParser->yyidx];
#ifndef NDEBUG
  if( yyTraceFILE && yyruleno>=0 
        && yyruleno<(int)(sizeof(yyRuleName)/sizeof(yyRuleName[0])) ){
    fprintf(yyTraceFILE, "%sReduce [%s].\n", yyTracePrompt,
      yyRuleName[yyruleno]);
  }
#endif /* NDEBUG */

  /* Silence complaints from purify about yygotominor being uninitialized
  ** in some cases when it is copied into the stack after the following
  ** switch.  yygotominor is uninitialized when a rule reduces that does
  ** not set the value of its left-hand side nonterminal.  Leaving the
  ** value of the nonterminal uninitialized is utterly harmless as long
  ** as the value is never used.  So really the only thing this code
  ** accomplishes is to quieten purify.  
  **
  ** 2007-01-16:  The wireshark project (www.wireshark.org) reports that
  ** without this code, their parser segfaults.  I'm not sure what there
  ** parser is doing to make this happen.  This is the second bug report
  ** from wireshark this week.  Clearly they are stressing Lemon in ways
  ** that it has not been previously stressed...  (SQLite ticket #2172)
  */
  /*memset(&yygotominor, 0, sizeof(yygotominor));*/
  yygotominor = yyzerominor;


  switch( yyruleno ){
  /* Beginning here are the reduction cases.  A typical example
  ** follows:
  **   case 0:
  **  #line <lineno> <grammarfile>
  **     { ... }           // User supplied code
  **  #line <lineno> <thisfile>
  **     break;
  */
      case 0: /* script ::= stmt_list */
#line 161 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,115,&yymsp[0].minor);
}
#line 2872 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 1: /* name ::= IDENTIFIER */
#line 173 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy303 = p->alloc< xec_unqual_name >(
                                    yymsp[0].minor.yy0->sloc, yymsp[0].minor.yy0->text );
                }
#line 2880 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 2: /* name ::= name PERIOD IDENTIFIER */
#line 178 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy303 = p->alloc< xec_unqual_qual >(
                                    yymsp[0].minor.yy0->sloc, yymsp[-2].minor.yy303, yymsp[0].minor.yy0->text );
                  yy_destructor(yypParser,9,&yymsp[-1].minor);
}
#line 2889 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 3: /* proto ::= name expr_paren */
#line 184 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy207 = p->alloc< xec_unqual_proto >(
                                    yymsp[-1].minor.yy303->sloc, yymsp[-1].minor.yy303, p->list( yymsp[0].minor.yy303 ) );
                }
#line 2897 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 4: /* expr_paren ::= LPN RPN */
#line 190 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy303 = nullptr;
                  yy_destructor(yypParser,7,&yymsp[-1].minor);
  yy_destructor(yypParser,10,&yymsp[0].minor);
}
#line 2906 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 5: /* expr_paren ::= LPN expr_list RPN */
#line 194 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy303 = yymsp[-1].minor.yy303;
                  yy_destructor(yypParser,7,&yymsp[-2].minor);
  yy_destructor(yypParser,10,&yymsp[0].minor);
}
#line 2915 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 6: /* decl_object ::= object_lbr object_decls RBR */
#line 208 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    p->close_scope( yymsp[-2].minor.yy142->scope );
                  yy_destructor(yypParser,120,&yymsp[-1].minor);
  yy_destructor(yypParser,11,&yymsp[0].minor);
}
#line 2924 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 7: /* object_lbr ::= name LBR */
#line 213 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy142 = p->object( yymsp[-1].minor.yy303->sloc, yymsp[-1].minor.yy303, nullptr );
                  yy_destructor(yypParser,12,&yymsp[0].minor);
}
#line 2932 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 8: /* object_lbr ::= name COLON expr_simple LBR */
#line 217 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy303 = p->resolve( yymsp[-1].minor.yy303 );
                    yygotominor.yy142 = p->object( yymsp[-3].minor.yy303->sloc, yymsp[-3].minor.yy303, yymsp[-1].minor.yy303 );
                  yy_destructor(yypParser,13,&yymsp[-2].minor);
  yy_destructor(yypParser,12,&yymsp[0].minor);
}
#line 2942 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 9: /* object_decls ::= */
      case 199: /* stmt_list ::= */ yytestcase(yyruleno==199);
#line 223 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                }
#line 2949 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 10: /* object_decls ::= object_decls object_decl */
#line 226 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,120,&yymsp[-1].minor);
  yy_destructor(yypParser,122,&yymsp[0].minor);
}
#line 2957 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 11: /* object_decl ::= SEMICOLON */
#line 230 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,14,&yymsp[0].minor);
}
#line 2964 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 12: /* object_decl ::= decl_object */
#line 233 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,119,&yymsp[0].minor);
}
#line 2971 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 13: /* object_decl ::= decl_func */
#line 236 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,123,&yymsp[0].minor);
}
#line 2978 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 14: /* object_decl ::= decl_proto SEMICOLON */
#line 239 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,124,&yymsp[-1].minor);
  yy_destructor(yypParser,14,&yymsp[0].minor);
}
#line 2986 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 15: /* object_decl ::= decl_noinit SEMICOLON */
#line 242 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,125,&yymsp[-1].minor);
  yy_destructor(yypParser,14,&yymsp[0].minor);
}
#line 2994 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 16: /* object_decl ::= decl_var SEMICOLON */
#line 245 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,126,&yymsp[-1].minor);
  yy_destructor(yypParser,14,&yymsp[0].minor);
}
#line 3002 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 17: /* object_decl ::= decl_member SEMICOLON */
#line 248 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,127,&yymsp[-1].minor);
  yy_destructor(yypParser,14,&yymsp[0].minor);
}
#line 3010 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 18: /* decl_proto ::= proto */
#line 255 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    p->prototype( yymsp[0].minor.yy207->sloc, yymsp[0].minor.yy207 );
                }
#line 3017 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 19: /* decl_proto ::= proto YIELD */
#line 259 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy207->coroutine = true;
                    p->prototype( yymsp[-1].minor.yy207->sloc, yymsp[-1].minor.yy207 );
                  yy_destructor(yypParser,6,&yymsp[0].minor);
}
#line 3026 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 20: /* decl_func ::= func_lbr stmt_list RBR */
#line 267 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    p->close_scope( yymsp[-2].minor.yy261->scope );
                  yy_destructor(yypParser,115,&yymsp[-1].minor);
  yy_destructor(yypParser,11,&yymsp[0].minor);
}
#line 3035 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 21: /* func_lbr ::= proto LBR */
#line 272 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy261 = p->function( yymsp[-1].minor.yy207->sloc, yymsp[-1].minor.yy207->name,
                                    yymsp[-1].minor.yy207->params, yymsp[-1].minor.yy207->coroutine, false );
                  yy_destructor(yypParser,12,&yymsp[0].minor);
}
#line 3044 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 22: /* func_lbr ::= proto YIELD LBR */
#line 277 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-2].minor.yy207->coroutine = true;
                    yygotominor.yy261 = p->function( yymsp[-2].minor.yy207->sloc, yymsp[-2].minor.yy207->name,
                                    yymsp[-2].minor.yy207->params, yymsp[-2].minor.yy207->coroutine, false );
                  yy_destructor(yypParser,6,&yymsp[-1].minor);
  yy_destructor(yypParser,12,&yymsp[0].minor);
}
#line 3055 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 23: /* decl_noinit ::= VAR varname */
#line 286 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    p->var( yymsp[-1].minor.yy0->sloc, yymsp[0].minor.yy196, nullptr );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 3063 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 24: /* decl_noinit ::= VAR varname_list */
#line 291 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    p->var_list( yymsp[-1].minor.yy0->sloc, yymsp[0].minor.yy59, nullptr );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 3071 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 25: /* decl_var ::= VAR varname ASSIGN expr_list */
#line 297 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    p->var( yymsp[-3].minor.yy0->sloc, yymsp[-2].minor.yy196, p->resolve( yymsp[0].minor.yy303 ) );
                    p->destroy( yymsp[-3].minor.yy0 );
                  yy_destructor(yypParser,16,&yymsp[-1].minor);
}
#line 3080 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 26: /* decl_var ::= VAR varname_list ASSIGN expr_list */
#line 302 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    p->var_list( yymsp[-3].minor.yy0->sloc, yymsp[-2].minor.yy59, p->resolve( yymsp[0].minor.yy303 ) );
                    p->destroy( yymsp[-3].minor.yy0 );
                  yy_destructor(yypParser,16,&yymsp[-1].minor);
}
#line 3089 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 27: /* decl_member ::= name */
#line 310 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    p->var( yymsp[0].minor.yy303->sloc, p->unqual( yymsp[0].minor.yy303 ), nullptr );
                }
#line 3096 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 28: /* decl_member ::= mname_list */
#line 314 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    p->var_list( yymsp[0].minor.yy59->sloc, yymsp[0].minor.yy59, nullptr );
                }
#line 3103 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 29: /* decl_member ::= name ASSIGN expr_list */
#line 318 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[0].minor.yy303 = p->resolve( yymsp[0].minor.yy303 );
                    p->var( yymsp[-2].minor.yy303->sloc, p->unqual( yymsp[-2].minor.yy303 ), yymsp[0].minor.yy303 );
                  yy_destructor(yypParser,16,&yymsp[-1].minor);
}
#line 3112 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 30: /* decl_member ::= mname_list ASSIGN expr_list */
#line 323 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[0].minor.yy303 = p->resolve( yymsp[0].minor.yy303 );
                    p->var_list( yymsp[-2].minor.yy59->sloc, yymsp[-2].minor.yy59, yymsp[0].minor.yy303 );
                  yy_destructor(yypParser,16,&yymsp[-1].minor);
}
#line 3121 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 31: /* varname ::= IDENTIFIER */
#line 331 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy196 = p->alloc< xec_unqual_name >( yymsp[0].minor.yy0->sloc, yymsp[0].minor.yy0->text );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3129 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 32: /* varname_list ::= varname COMMA varname */
#line 337 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy59 = p->alloc< xec_unqual_list >( yymsp[-2].minor.yy196->sloc );
                    yygotominor.yy59->names.push_back( yymsp[-2].minor.yy196 );
                    yygotominor.yy59->names.push_back( yymsp[0].minor.yy196 );
                  yy_destructor(yypParser,17,&yymsp[-1].minor);
}
#line 3139 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 33: /* varname_list ::= varname_list COMMA varname */
      case 35: /* mname_list ::= mname_list COMMA varname */ yytestcase(yyruleno==35);
#line 343 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy59 = yymsp[-2].minor.yy59;
                    yygotominor.yy59->names.push_back( yymsp[0].minor.yy196 );
                  yy_destructor(yypParser,17,&yymsp[-1].minor);
}
#line 3149 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 34: /* mname_list ::= name COMMA varname */
#line 349 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy59 = p->alloc< xec_unqual_list >( yymsp[-2].minor.yy303->sloc );
                    yygotominor.yy59->names.push_back( p->unqual( yymsp[-2].minor.yy303 ) );
                    yygotominor.yy59->names.push_back( yymsp[0].minor.yy196 );
                  yy_destructor(yypParser,17,&yymsp[-1].minor);
}
#line 3159 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 36: /* expr_index ::= LPN expr_assign RPN */
#line 370 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy303 = p->resolve( yymsp[-1].minor.yy303 );
                    switch ( yymsp[-1].minor.yy303->kind )
                    {
                    case XEC_EXPR_KEY:
                    case XEC_EXPR_INKEY:
                    case XEC_EXPR_CALL:
                    case XEC_EXPR_YIELD:
                    case XEC_EXPR_VARARG:
                    case XEC_EXPR_UNPACK:
                    case XEC_EXPR_LIST:
                    case XEC_EXPR_ASSIGN_LIST:
                        yygotominor.yy303 = p->alloc< xec_expr_mono >( yymsp[-1].minor.yy303->sloc, yymsp[-1].minor.yy303 );
                        break;
                        
                    default:
                        yygotominor.yy303 = yymsp[-1].minor.yy303;
                        break;
                    }
                  yy_destructor(yypParser,7,&yymsp[-2].minor);
  yy_destructor(yypParser,10,&yymsp[0].minor);
}
#line 3185 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 37: /* expr_index ::= name PERIOD LSQ expr_value RSQ */
      case 40: /* expr_index ::= expr_index PERIOD LSQ expr_value RSQ */ yytestcase(yyruleno==40);
#line 391 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-4].minor.yy303  = p->resolve( yymsp[-4].minor.yy303 );
                    yymsp[-1].minor.yy303   = p->resolve( yymsp[-1].minor.yy303 );
                    yygotominor.yy303 = p->alloc< xec_expr_inkey >( yymsp[-4].minor.yy303->sloc, yymsp[-4].minor.yy303, yymsp[-1].minor.yy303 );
                  yy_destructor(yypParser,9,&yymsp[-3].minor);
  yy_destructor(yypParser,18,&yymsp[-2].minor);
  yy_destructor(yypParser,19,&yymsp[0].minor);
}
#line 3198 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 38: /* expr_index ::= name LSQ expr_value RSQ */
      case 41: /* expr_index ::= expr_index LSQ expr_value RSQ */ yytestcase(yyruleno==41);
#line 397 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-3].minor.yy303  = p->resolve( yymsp[-3].minor.yy303 );
                    yymsp[-1].minor.yy303 = p->resolve( yymsp[-1].minor.yy303 );
                    yygotominor.yy303 = p->alloc< xec_expr_index >( yymsp[-3].minor.yy303->sloc, yymsp[-3].minor.yy303, yymsp[-1].minor.yy303 );
                  yy_destructor(yypParser,18,&yymsp[-2].minor);
  yy_destructor(yypParser,19,&yymsp[0].minor);
}
#line 3210 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 39: /* expr_index ::= expr_index PERIOD IDENTIFIER */
#line 403 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-2].minor.yy303  = p->resolve( yymsp[-2].minor.yy303 );
                    yygotominor.yy303 = p->alloc< xec_expr_key >( yymsp[-2].minor.yy303->sloc, yymsp[-2].minor.yy303, yymsp[0].minor.yy0->text );
                    p->destroy( yymsp[0].minor.yy0 );
                  yy_destructor(yypParser,9,&yymsp[-1].minor);
}
#line 3220 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 42: /* expr_yield ::= YIELD LPN RPN */
#line 424 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy159 = p->alloc< xec_expr_yield >( yymsp[-2].minor.yy0->sloc, nullptr );
                    p->destroy( yymsp[-2].minor.yy0 );
                  yy_destructor(yypParser,7,&yymsp[-1].minor);
  yy_destructor(yypParser,10,&yymsp[0].minor);
}
#line 3230 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 43: /* expr_yield ::= YIELD LPN expr_list RPN */
#line 430 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy159 = p->alloc< xec_expr_yield >(
                            yymsp[-3].minor.yy0->sloc, p->list( p->resolve( yymsp[-1].minor.yy303 ) ) );
                    p->destroy( yymsp[-3].minor.yy0 );
                  yy_destructor(yypParser,7,&yymsp[-2].minor);
  yy_destructor(yypParser,10,&yymsp[0].minor);
}
#line 3241 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 44: /* expr_new ::= NEW name expr_paren */
#line 438 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy303 = p->resolve( yymsp[-1].minor.yy303 );
                    yygotominor.yy303 = p->alloc< xec_new_new >(
                            yymsp[-2].minor.yy0->sloc, yymsp[-1].minor.yy303, p->list( p->resolve( yymsp[0].minor.yy303 ) ) );
                    p->destroy( yymsp[-2].minor.yy0 );
                }
#line 3251 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 45: /* expr_new ::= NEW expr_index expr_paren */
#line 445 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy303 = p->alloc< xec_new_new >(
                            yymsp[-2].minor.yy0->sloc, yymsp[-1].minor.yy303, p->list( p->resolve( yymsp[0].minor.yy303 ) ) );
                    p->destroy( yymsp[-2].minor.yy0 );
                }
#line 3260 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 46: /* expr_call ::= proto expr_paren */
#line 453 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    xec_expr_call* call = p->resolve_proto( yymsp[-1].minor.yy207 );
                    yygotominor.yy28 = p->alloc< xec_expr_call >(
                            call->sloc, call, p->list( p->resolve( yymsp[0].minor.yy303 ) ) );
                }
#line 3269 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 47: /* expr_call ::= expr_index expr_paren */
      case 49: /* expr_call ::= expr_new expr_paren */ yytestcase(yyruleno==49);
      case 51: /* expr_call ::= expr_postfix expr_paren */ yytestcase(yyruleno==51);
#line 459 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy28 = p->alloc< xec_expr_call >(
                            yymsp[-1].minor.yy303->sloc, yymsp[-1].minor.yy303, p->list( p->resolve( yymsp[0].minor.yy303 ) ) );
                }
#line 3279 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 48: /* expr_call ::= expr_yield expr_paren */
#line 464 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy28 = p->alloc< xec_expr_call >(
                            yymsp[-1].minor.yy159->sloc, yymsp[-1].minor.yy159, p->list( p->resolve( yymsp[0].minor.yy303 ) ) );
                }
#line 3287 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 50: /* expr_call ::= expr_call expr_paren */
#line 474 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy28 = p->alloc< xec_expr_call >(
                            yymsp[-1].minor.yy28->sloc, yymsp[-1].minor.yy28, p->list( p->resolve( yymsp[0].minor.yy303 ) ) );
                }
#line 3295 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 52: /* expr_postfix ::= proto PERIOD IDENTIFIER */
#line 486 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    xec_expr_call* call = p->resolve_proto( yymsp[-2].minor.yy207 );
                    yygotominor.yy303 = p->alloc< xec_expr_key >(
                             call->sloc, call, yymsp[0].minor.yy0->text );
                    p->destroy( yymsp[0].minor.yy0 );
                  yy_destructor(yypParser,9,&yymsp[-1].minor);
}
#line 3306 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 53: /* expr_postfix ::= proto PERIOD LSQ expr_value RSQ */
#line 493 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    xec_expr_call* call = p->resolve_proto( yymsp[-4].minor.yy207 );
                    yymsp[-1].minor.yy303 = p->resolve( yymsp[-1].minor.yy303 );
                    yygotominor.yy303 = p->alloc< xec_expr_inkey >(
                             call->sloc, call, yymsp[-1].minor.yy303 );
                  yy_destructor(yypParser,9,&yymsp[-3].minor);
  yy_destructor(yypParser,18,&yymsp[-2].minor);
  yy_destructor(yypParser,19,&yymsp[0].minor);
}
#line 3319 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 54: /* expr_postfix ::= proto LSQ expr_value RSQ */
#line 500 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    xec_expr_call* call = p->resolve_proto( yymsp[-3].minor.yy207 );
                    yymsp[-1].minor.yy303 = p->resolve( yymsp[-1].minor.yy303 );
                    yygotominor.yy303 = p->alloc< xec_expr_index >(
                             call->sloc, call, yymsp[-1].minor.yy303 );
                  yy_destructor(yypParser,18,&yymsp[-2].minor);
  yy_destructor(yypParser,19,&yymsp[0].minor);
}
#line 3331 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 55: /* expr_postfix ::= expr_yield PERIOD IDENTIFIER */
#line 507 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy303 = p->alloc< xec_expr_key >(
                             yymsp[-2].minor.yy159->sloc, yymsp[-2].minor.yy159, yymsp[0].minor.yy0->text );
                    p->destroy( yymsp[0].minor.yy0 );
                  yy_destructor(yypParser,9,&yymsp[-1].minor);
}
#line 3341 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 56: /* expr_postfix ::= expr_yield PERIOD LSQ expr_value RSQ */
#line 513 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy303 = p->resolve( yymsp[-1].minor.yy303 );
                    yygotominor.yy303 = p->alloc< xec_expr_inkey >(
                             yymsp[-4].minor.yy159->sloc, yymsp[-4].minor.yy159, yymsp[-1].minor.yy303 );
                  yy_destructor(yypParser,9,&yymsp[-3].minor);
  yy_destructor(yypParser,18,&yymsp[-2].minor);
  yy_destructor(yypParser,19,&yymsp[0].minor);
}
#line 3353 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 57: /* expr_postfix ::= expr_yield LSQ expr_value RSQ */
#line 519 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy303 = p->resolve( yymsp[-1].minor.yy303 );
                    yygotominor.yy303 = p->alloc< xec_expr_index >(
                             yymsp[-3].minor.yy159->sloc, yymsp[-3].minor.yy159, yymsp[-1].minor.yy303 );
                  yy_destructor(yypParser,18,&yymsp[-2].minor);
  yy_destructor(yypParser,19,&yymsp[0].minor);
}
#line 3364 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 58: /* expr_postfix ::= expr_new PERIOD IDENTIFIER */
      case 64: /* expr_postfix ::= expr_postfix PERIOD IDENTIFIER */ yytestcase(yyruleno==64);
#line 525 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy303 = p->alloc< xec_expr_key >(
                             yymsp[-2].minor.yy303->sloc, yymsp[-2].minor.yy303, yymsp[0].minor.yy0->text );
                    p->destroy( yymsp[0].minor.yy0 );
                  yy_destructor(yypParser,9,&yymsp[-1].minor);
}
#line 3375 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 59: /* expr_postfix ::= expr_new PERIOD LSQ expr_value RSQ */
      case 65: /* expr_postfix ::= expr_postfix PERIOD LSQ expr_value RSQ */ yytestcase(yyruleno==65);
#line 531 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy303 = p->resolve( yymsp[-1].minor.yy303 );
                    yygotominor.yy303 = p->alloc< xec_expr_inkey >(
                             yymsp[-4].minor.yy303->sloc, yymsp[-4].minor.yy303, yymsp[-1].minor.yy303 );
                  yy_destructor(yypParser,9,&yymsp[-3].minor);
  yy_destructor(yypParser,18,&yymsp[-2].minor);
  yy_destructor(yypParser,19,&yymsp[0].minor);
}
#line 3388 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 60: /* expr_postfix ::= expr_new LSQ expr_value RSQ */
      case 66: /* expr_postfix ::= expr_postfix LSQ expr_value RSQ */ yytestcase(yyruleno==66);
#line 537 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy303 = p->resolve( yymsp[-1].minor.yy303 );
                    yygotominor.yy303 = p->alloc< xec_expr_index >(
                             yymsp[-3].minor.yy303->sloc, yymsp[-3].minor.yy303, yymsp[-1].minor.yy303 );
                  yy_destructor(yypParser,18,&yymsp[-2].minor);
  yy_destructor(yypParser,19,&yymsp[0].minor);
}
#line 3400 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 61: /* expr_postfix ::= expr_call PERIOD IDENTIFIER */
#line 543 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy303 = p->alloc< xec_expr_key >(
                             yymsp[-2].minor.yy28->sloc, yymsp[-2].minor.yy28, yymsp[0].minor.yy0->text );
                    p->destroy( yymsp[0].minor.yy0 );
                  yy_destructor(yypParser,9,&yymsp[-1].minor);
}
#line 3410 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 62: /* expr_postfix ::= expr_call PERIOD LSQ expr_value RSQ */
#line 549 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy303 = p->resolve( yymsp[-1].minor.yy303 );
                    yygotominor.yy303 = p->alloc< xec_expr_inkey >(
                             yymsp[-4].minor.yy28->sloc, yymsp[-4].minor.yy28, yymsp[-1].minor.yy303 );
                  yy_destructor(yypParser,9,&yymsp[-3].minor);
  yy_destructor(yypParser,18,&yymsp[-2].minor);
  yy_destructor(yypParser,19,&yymsp[0].minor);
}
#line 3422 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 63: /* expr_postfix ::= expr_call LSQ expr_value RSQ */
#line 555 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy303 = p->resolve( yymsp[-1].minor.yy303 );
                    yygotominor.yy303 = p->alloc< xec_expr_index >(
                             yymsp[-3].minor.yy28->sloc, yymsp[-3].minor.yy28, yymsp[-1].minor.yy303 );
                  yy_destructor(yypParser,18,&yymsp[-2].minor);
  yy_destructor(yypParser,19,&yymsp[0].minor);
}
#line 3433 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 67: /* expr_simple ::= name */
#line 585 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    // Don't resolve the name here, as it may be a parameter
                    // declaration for a prototype or function.
                    yygotominor.yy303 = yymsp[0].minor.yy303;
                }
#line 3442 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 68: /* expr_simple ::= proto */
#line 591 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy303 = p->resolve_proto( yymsp[0].minor.yy207 );
                }
#line 3449 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 69: /* expr_simple ::= expr_index */
      case 71: /* expr_simple ::= expr_new */ yytestcase(yyruleno==71);
      case 73: /* expr_simple ::= expr_postfix */ yytestcase(yyruleno==73);
      case 76: /* expr_literal ::= expr_simple */ yytestcase(yyruleno==76);
      case 82: /* expr_suffix ::= expr_literal */ yytestcase(yyruleno==82);
      case 85: /* expr_unary ::= expr_suffix */ yytestcase(yyruleno==85);
      case 92: /* expr_mul ::= expr_unary */ yytestcase(yyruleno==92);
      case 97: /* expr_add ::= expr_mul */ yytestcase(yyruleno==97);
      case 100: /* expr_shift ::= expr_add */ yytestcase(yyruleno==100);
      case 104: /* expr_bitand ::= expr_shift */ yytestcase(yyruleno==104);
      case 106: /* expr_bitxor ::= expr_bitand */ yytestcase(yyruleno==106);
      case 108: /* expr_bitor ::= expr_bitxor */ yytestcase(yyruleno==108);
      case 110: /* expr_concat ::= expr_bitor */ yytestcase(yyruleno==110);
      case 112: /* expr_compare ::= expr_concat */ yytestcase(yyruleno==112);
      case 124: /* expr_and ::= expr_compare */ yytestcase(yyruleno==124);
      case 126: /* expr_xor ::= expr_and */ yytestcase(yyruleno==126);
      case 128: /* expr_or ::= expr_xor */ yytestcase(yyruleno==128);
      case 130: /* expr_nolbr ::= expr_or */ yytestcase(yyruleno==130);
      case 142: /* expr_value ::= expr_nolbr */ yytestcase(yyruleno==142);
      case 145: /* expr_lbody ::= expr_value */ yytestcase(yyruleno==145);
      case 160: /* expr_list ::= expr_final */ yytestcase(yyruleno==160);
      case 161: /* expr_list ::= expr_lbody */ yytestcase(yyruleno==161);
      case 191: /* sexpr_list ::= expr_final */ yytestcase(yyruleno==191);
      case 192: /* sexpr_list ::= sexpr_lbody */ yytestcase(yyruleno==192);
      case 194: /* sexpr_assign ::= sexpr_list */ yytestcase(yyruleno==194);
      case 196: /* condition ::= expr_assign */ yytestcase(yyruleno==196);
      case 207: /* stmt ::= stmt_common */ yytestcase(yyruleno==207);
      case 210: /* stmt_reuse ::= stmt_common */ yytestcase(yyruleno==210);
      case 221: /* stmt_common ::= stmt_try */ yytestcase(yyruleno==221);
      case 245: /* for_cond ::= condition */ yytestcase(yyruleno==245);
      case 247: /* for_expr ::= expr_assign */ yytestcase(yyruleno==247);
#line 595 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy303 = yymsp[0].minor.yy303;
                }
#line 3486 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 70: /* expr_simple ::= expr_yield */
#line 599 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy303 = yymsp[0].minor.yy159;
                }
#line 3493 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 72: /* expr_simple ::= expr_call */
#line 607 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy303 = yymsp[0].minor.yy28;
                }
#line 3500 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 74: /* expr_simple ::= proto YIELD */
#line 615 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    xec_expr_call* call = p->resolve_proto( yymsp[-1].minor.yy207 );
                    call->yieldcall = true;
                    yygotominor.yy303 = call;
                  yy_destructor(yypParser,6,&yymsp[0].minor);
}
#line 3510 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 75: /* expr_simple ::= expr_call YIELD */
#line 621 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy28->yieldcall = true;
                    yygotominor.yy303 = yymsp[-1].minor.yy28;
                  yy_destructor(yypParser,6,&yymsp[0].minor);
}
#line 3519 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 77: /* expr_literal ::= NULL */
#line 631 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy303 = p->alloc< xec_expr_null >( yymsp[0].minor.yy0->sloc );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3527 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 78: /* expr_literal ::= TRUE */
#line 636 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy303 = p->alloc< xec_expr_bool >( yymsp[0].minor.yy0->sloc, true );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3535 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 79: /* expr_literal ::= FALSE */
#line 641 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy303 = p->alloc< xec_expr_bool >( yymsp[0].minor.yy0->sloc, false );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3543 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 80: /* expr_literal ::= NUMBER */
#line 646 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    double number = p->parse_number( yymsp[0].minor.yy0 );
                    yygotominor.yy303 = p->alloc< xec_expr_number >( yymsp[0].minor.yy0->sloc, number );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3552 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 81: /* expr_literal ::= STRING */
#line 652 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy303 = p->alloc< xec_expr_string >(
                            yymsp[0].minor.yy0->sloc, yymsp[0].minor.yy0->text, yymsp[0].minor.yy0->size );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3561 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 83: /* expr_suffix ::= expr_suffix INCREMENT */
#line 663 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy303 = p->resolve( yymsp[-1].minor.yy303 );
                    yymsp[-1].minor.yy303 = p->lvalue( yymsp[-1].minor.yy303 );
                    yygotominor.yy303 = p->alloc< xec_expr_postop >(
                             yymsp[-1].minor.yy303->sloc, XEC_OPERATOR_POSTINC, yymsp[-1].minor.yy303 );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3572 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 84: /* expr_suffix ::= expr_suffix DECREMENT */
#line 671 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy303 = p->resolve( yymsp[-1].minor.yy303 );
                    yymsp[-1].minor.yy303 = p->lvalue( yymsp[-1].minor.yy303 );
                    yygotominor.yy303 = p->alloc< xec_expr_postop >(
                             yymsp[-1].minor.yy303->sloc, XEC_OPERATOR_POSTDEC, yymsp[-1].minor.yy303 );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3583 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 86: /* expr_unary ::= PLUS expr_unary */
#line 684 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[0].minor.yy303 = p->resolve( yymsp[0].minor.yy303 );
                    yygotominor.yy303 = p->alloc< xec_expr_unary >(
                             yymsp[-1].minor.yy0->sloc, XEC_OPERATOR_POSITIVE, yymsp[0].minor.yy303 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 3593 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 87: /* expr_unary ::= MINUS expr_unary */
#line 691 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[0].minor.yy303 = p->resolve( yymsp[0].minor.yy303 );
                    yygotominor.yy303 = p->alloc< xec_expr_unary >(
                             yymsp[-1].minor.yy0->sloc, XEC_OPERATOR_NEGATIVE, yymsp[0].minor.yy303 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 3603 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 88: /* expr_unary ::= XMARK expr_unary */
#line 698 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[0].minor.yy303 = p->resolve( yymsp[0].minor.yy303 );
                    yygotominor.yy303 = p->alloc< xec_expr_unary >(
                             yymsp[-1].minor.yy0->sloc, XEC_OPERATOR_LOGICNOT, yymsp[0].minor.yy303 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 3613 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 89: /* expr_unary ::= TILDE expr_unary */
#line 705 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[0].minor.yy303 = p->resolve( yymsp[0].minor.yy303 );
                    yygotominor.yy303 = p->alloc< xec_expr_unary >(
                             yymsp[-1].minor.yy0->sloc, XEC_OPERATOR_BITNOT, yymsp[0].minor.yy303 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 3623 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 90: /* expr_unary ::= INCREMENT expr_unary */
#line 712 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[0].minor.yy303 = p->resolve( yymsp[0].minor.yy303 );
                    yymsp[0].minor.yy303 = p->lvalue( yymsp[0].minor.yy303 );
                    yygotominor.yy303 = p->alloc< xec_expr_preop >(
                             yymsp[-1].minor.yy0->sloc, XEC_OPERATOR_PREINC, yymsp[0].minor.yy303 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 3634 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 91: /* expr_unary ::= DECREMENT expr_unary */
#line 720 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[0].minor.yy303 = p->resolve( yymsp[0].minor.yy303 );
                    yymsp[0].minor.yy303 = p->lvalue( yymsp[0].minor.yy303 );
                    yygotominor.yy303 = p->alloc< xec_expr_preop >(
                             yymsp[-1].minor.yy0->sloc, XEC_OPERATOR_PREDEC, yymsp[0].minor.yy303 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 3645 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 93: /* expr_mul ::= expr_mul ASTERISK expr_unary */
#line 733 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-2].minor.yy303 = p->resolve( yymsp[-2].minor.yy303 );
                    yymsp[0].minor.yy303 = p->resolve( yymsp[0].minor.yy303 );
                    yygotominor.yy303 = p->alloc< xec_expr_binary >( yymsp[-2].minor.yy303->sloc,
                                    XEC_OPERATOR_MULTIPLY, yymsp[-2].minor.yy303, yymsp[0].minor.yy303 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 3656 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 94: /* expr_mul ::= expr_mul SOLIDUS expr_unary */
#line 741 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-2].minor.yy303 = p->resolve( yymsp[-2].minor.yy303 );
                    yymsp[0].minor.yy303 = p->resolve( yymsp[0].minor.yy303 );
                    yygotominor.yy303 = p->alloc< xec_expr_binary >( yymsp[-2].minor.yy303->sloc,
                                    XEC_OPERATOR_DIVIDE, yymsp[-2].minor.yy303, yymsp[0].minor.yy303 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 3667 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 95: /* expr_mul ::= expr_mul PERCENT expr_unary */
#line 749 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-2].minor.yy303 = p->resolve( yymsp[-2].minor.yy303 );
                    yymsp[0].minor.yy303 = p->resolve( yymsp[0].minor.yy303 );
                    yygotominor.yy303 = p->alloc< xec_expr_binary >( yymsp[-2].minor.yy303->sloc,
                                    XEC_OPERATOR_MODULUS, yymsp[-2].minor.yy303, yymsp[0].minor.yy303 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 3678 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 96: /* expr_mul ::= expr_mul TILDE expr_unary */
#line 757 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-2].minor.yy303 = p->resolve( yymsp[-2].minor.yy303 );
                    yymsp[0].minor.yy303 = p->resolve( yymsp[0].minor.yy303 );
                    yygotominor.yy303 = p->alloc< xec_expr_binary >( yymsp[-2].minor.yy303->sloc,
                                    XEC_OPERATOR_INTDIV, yymsp[-2].minor.yy303, yymsp[0].minor.yy303 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 3689 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 98: /* expr_add ::= expr_add PLUS expr_mul */
#line 770 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-2].minor.yy303 = p->resolve( yymsp[-2].minor.yy303 );
                    yymsp[0].minor.yy303 = p->resolve( yymsp[0].minor.yy303 );
                    yygotominor.yy303 = p->alloc< xec_expr_binary >( yymsp[-2].minor.yy303->sloc,
                                    XEC_OPERATOR_ADD, yymsp[-2].minor.yy303, yymsp[0].minor.yy303 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 3700 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 99: /* expr_add ::= expr_add MINUS expr_mul */
#line 778 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-2].minor.yy303 = p->resolve( yymsp[-2].minor.yy303 );
                    yymsp[0].minor.yy303 = p->resolve( yymsp[0].minor.yy303 );
                    yygotominor.yy303 = p->alloc< xec_expr_binary >( yymsp[-2].minor.yy303->sloc,
                                    XEC_OPERATOR_SUBTRACT, yymsp[-2].minor.yy303, yymsp[0].minor.yy303 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 3711 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 101: /* expr_shift ::= expr_shift LSHIFT expr_add */
#line 791 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-2].minor.yy303 = p->resolve( yymsp[-2].minor.yy303 );
                    yymsp[0].minor.yy303 = p->resolve( yymsp[0].minor.yy303 );
                    yygotominor.yy303 = p->alloc< xec_expr_binary >( yymsp[-2].minor.yy303->sloc,
                                    XEC_OPERATOR_LSHIFT, yymsp[-2].minor.yy303, yymsp[0].minor.yy303 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 3722 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 102: /* expr_shift ::= expr_shift LRSHIFT expr_add */
#line 799 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-2].minor.yy303 = p->resolve( yymsp[-2].minor.yy303 );
                    yymsp[0].minor.yy303 = p->resolve( yymsp[0].minor.yy303 );
                    yygotominor.yy303 = p->alloc< xec_expr_binary >( yymsp[-2].minor.yy303->sloc,
                                    XEC_OPERATOR_LRSHIFT, yymsp[-2].minor.yy303, yymsp[0].minor.yy303 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 3733 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 103: /* expr_shift ::= expr_shift ARSHIFT expr_add */
#line 807 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-2].minor.yy303 = p->resolve( yymsp[-2].minor.yy303 );
                    yymsp[0].minor.yy303 = p->resolve( yymsp[0].minor.yy303 );
                    yygotominor.yy303 = p->alloc< xec_expr_binary >( yymsp[-2].minor.yy303->sloc,
                                    XEC_OPERATOR_ARSHIFT, yymsp[-2].minor.yy303, yymsp[0].minor.yy303 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 3744 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 105: /* expr_bitand ::= expr_bitand AMPERSAND expr_shift */
#line 820 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-2].minor.yy303 = p->resolve( yymsp[-2].minor.yy303 );
                    yymsp[0].minor.yy303 = p->resolve( yymsp[0].minor.yy303 );
                    yygotominor.yy303 = p->alloc< xec_expr_binary >( yymsp[-2].minor.yy303->sloc,
                                    XEC_OPERATOR_BITAND, yymsp[-2].minor.yy303, yymsp[0].minor.yy303 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 3755 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 107: /* expr_bitxor ::= expr_bitxor CARET expr_bitand */
#line 833 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-2].minor.yy303 = p->resolve( yymsp[-2].minor.yy303 );
                    yymsp[0].minor.yy303 = p->resolve( yymsp[0].minor.yy303 );
                    yygotominor.yy303 = p->alloc< xec_expr_binary >( yymsp[-2].minor.yy303->sloc,
                                    XEC_OPERATOR_BITXOR, yymsp[-2].minor.yy303, yymsp[0].minor.yy303 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 3766 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 109: /* expr_bitor ::= expr_bitor VBAR expr_bitxor */
#line 846 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-2].minor.yy303 = p->resolve( yymsp[-2].minor.yy303 );
                    yymsp[0].minor.yy303 = p->resolve( yymsp[0].minor.yy303 );
                    yygotominor.yy303 = p->alloc< xec_expr_binary >( yymsp[-2].minor.yy303->sloc,
                                    XEC_OPERATOR_BITOR, yymsp[-2].minor.yy303, yymsp[0].minor.yy303 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 3777 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 111: /* expr_concat ::= expr_concat CONCATENATE expr_bitor */
#line 859 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-2].minor.yy303 = p->resolve( yymsp[-2].minor.yy303 );
                    yymsp[0].minor.yy303 = p->resolve( yymsp[0].minor.yy303 );
                    yygotominor.yy303 = p->alloc< xec_expr_binary >( yymsp[-2].minor.yy303->sloc,
                                    XEC_OPERATOR_CONCATENATE, yymsp[-2].minor.yy303, yymsp[0].minor.yy303 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 3788 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 113: /* expr_compare ::= expr_compare compare_op expr_concat */
#line 872 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-2].minor.yy303 = p->resolve( yymsp[-2].minor.yy303 );
                    yymsp[0].minor.yy303 = p->resolve( yymsp[0].minor.yy303 );
                    yygotominor.yy303 = p->compare( yymsp[-1].minor.yy179.token, yymsp[-1].minor.yy179.op, yymsp[-2].minor.yy303, yymsp[0].minor.yy303 );
                    p->destroy( yymsp[-1].minor.yy179.token );
                }
#line 3798 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 114: /* compare_op ::= EQUAL */
#line 880 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy179 = make_token_op( yymsp[0].minor.yy0, XEC_OPERATOR_EQUAL );
                }
#line 3805 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 115: /* compare_op ::= NOTEQUAL */
#line 884 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy179 = make_token_op( yymsp[0].minor.yy0, XEC_OPERATOR_NOTEQUAL );
                }
#line 3812 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 116: /* compare_op ::= LESS */
#line 888 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy179 = make_token_op( yymsp[0].minor.yy0, XEC_OPERATOR_LESS );
                }
#line 3819 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 117: /* compare_op ::= GREATER */
#line 892 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy179 = make_token_op( yymsp[0].minor.yy0, XEC_OPERATOR_GREATER );
                }
#line 3826 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 118: /* compare_op ::= LESSEQUAL */
#line 896 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy179 = make_token_op( yymsp[0].minor.yy0, XEC_OPERATOR_LESSEQUAL );
                }
#line 3833 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 119: /* compare_op ::= GREATEREQUAL */
#line 900 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy179 = make_token_op( yymsp[0].minor.yy0, XEC_OPERATOR_GREATEREQUAL );
                }
#line 3840 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 120: /* compare_op ::= IN */
#line 904 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy179 = make_token_op( yymsp[0].minor.yy0, XEC_OPERATOR_IN );
                }
#line 3847 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 121: /* compare_op ::= NOTIN */
#line 908 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy179 = make_token_op( yymsp[0].minor.yy0, XEC_OPERATOR_NOTIN );
                }
#line 3854 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 122: /* compare_op ::= IS */
#line 912 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy179 = make_token_op( yymsp[0].minor.yy0, XEC_OPERATOR_IS );
                }
#line 3861 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 123: /* compare_op ::= NOTIS */
#line 916 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy179 = make_token_op( yymsp[0].minor.yy0, XEC_OPERATOR_NOTIS );
                }
#line 3868 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 125: /* expr_and ::= expr_and LOGICAND expr_compare */
#line 926 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-2].minor.yy303 = p->resolve( yymsp[-2].minor.yy303 );
                    yymsp[0].minor.yy303 = p->resolve( yymsp[0].minor.yy303 );
                    yygotominor.yy303 = p->alloc< xec_expr_logical >( yymsp[-2].minor.yy303->sloc,
                                    XEC_OPERATOR_LOGICAND, yymsp[-2].minor.yy303, yymsp[0].minor.yy303 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 3879 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 127: /* expr_xor ::= expr_xor LOGICXOR expr_and */
#line 939 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-2].minor.yy303 = p->resolve( yymsp[-2].minor.yy303 );
                    yymsp[0].minor.yy303 = p->resolve( yymsp[0].minor.yy303 );
                    yygotominor.yy303 = p->alloc< xec_expr_logical >( yymsp[-2].minor.yy303->sloc,
                                    XEC_OPERATOR_LOGICXOR, yymsp[-2].minor.yy303, yymsp[0].minor.yy303 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 3890 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 129: /* expr_or ::= expr_or LOGICOR expr_xor */
#line 952 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-2].minor.yy303 = p->resolve( yymsp[-2].minor.yy303 );
                    yymsp[0].minor.yy303 = p->resolve( yymsp[0].minor.yy303 );
                    yygotominor.yy303 = p->alloc< xec_expr_logical >( yymsp[-2].minor.yy303->sloc,
                                    XEC_OPERATOR_LOGICOR, yymsp[-2].minor.yy303, yymsp[0].minor.yy303 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 3901 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 131: /* expr_nolbr ::= expr_or QMARK expr_value COLON expr_value */
#line 967 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-4].minor.yy303 = p->resolve( yymsp[-4].minor.yy303 );
                    yymsp[-2].minor.yy303    = p->resolve( yymsp[-2].minor.yy303 );
                    yymsp[0].minor.yy303   = p->resolve( yymsp[0].minor.yy303 );
                    yygotominor.yy303 = p->alloc< xec_expr_qmark >(
                            yymsp[-4].minor.yy303->sloc, yymsp[-4].minor.yy303, yymsp[-2].minor.yy303, yymsp[0].minor.yy303 );
                  yy_destructor(yypParser,55,&yymsp[-3].minor);
  yy_destructor(yypParser,13,&yymsp[-1].minor);
}
#line 3914 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 132: /* expr_nolbr ::= LSQ RSQ */
#line 975 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy303 = p->alloc< xec_new_list >( yymsp[-1].minor.yy0->sloc );
                    p->destroy( yymsp[-1].minor.yy0 );
                  yy_destructor(yypParser,19,&yymsp[0].minor);
}
#line 3923 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 133: /* expr_nolbr ::= LSQ value_list RSQ */
#line 980 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy303 = yymsp[-1].minor.yy67;
                    yygotominor.yy303->sloc = yymsp[-2].minor.yy0->sloc;
                    p->destroy( yymsp[-2].minor.yy0 );
                  yy_destructor(yypParser,19,&yymsp[0].minor);
}
#line 3933 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 134: /* expr_nolbr ::= newobj_lbr object_decls RBR */
#line 986 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy303 = yymsp[-2].minor.yy142;
                    p->close_scope( yymsp[-2].minor.yy142->scope );
                  yy_destructor(yypParser,120,&yymsp[-1].minor);
  yy_destructor(yypParser,11,&yymsp[0].minor);
}
#line 3943 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 135: /* expr_nolbr ::= newfunc_lbr stmt_list RBR */
#line 991 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy303 = yymsp[-2].minor.yy261;
                    p->close_scope( yymsp[-2].minor.yy261->scope );
                  yy_destructor(yypParser,115,&yymsp[-1].minor);
  yy_destructor(yypParser,11,&yymsp[0].minor);
}
#line 3953 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 136: /* newobj_lbr ::= COLON LBR */
#line 997 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy142 = p->object( yymsp[-1].minor.yy0->sloc, nullptr, nullptr );
                    p->destroy( yymsp[-1].minor.yy0 );
                  yy_destructor(yypParser,12,&yymsp[0].minor);
}
#line 3962 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 137: /* newobj_lbr ::= COLON expr_simple LBR */
#line 1002 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy303 = p->resolve( yymsp[-1].minor.yy303 );
                    yygotominor.yy142 = p->object( yymsp[-2].minor.yy0->sloc, nullptr, yymsp[-1].minor.yy303 );
                    p->destroy( yymsp[-2].minor.yy0 );
                  yy_destructor(yypParser,12,&yymsp[0].minor);
}
#line 3972 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 138: /* newfunc_lbr ::= QMARK expr_paren LBR */
#line 1009 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy261 = p->function( yymsp[-2].minor.yy0->sloc,
                                    nullptr, yymsp[-1].minor.yy303, false, false );
                    p->destroy( yymsp[-2].minor.yy0 );
                  yy_destructor(yypParser,12,&yymsp[0].minor);
}
#line 3982 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 139: /* newfunc_lbr ::= PERIOD QMARK expr_paren LBR */
#line 1015 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy261 = p->function( yymsp[-3].minor.yy0->sloc,
                                    nullptr, yymsp[-1].minor.yy303, false, true );
                    p->destroy( yymsp[-3].minor.yy0 );
                  yy_destructor(yypParser,55,&yymsp[-2].minor);
  yy_destructor(yypParser,12,&yymsp[0].minor);
}
#line 3993 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 140: /* newfunc_lbr ::= QMARK expr_paren YIELD LBR */
#line 1021 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy261 = p->function( yymsp[-3].minor.yy0->sloc,
                                    nullptr, yymsp[-2].minor.yy303, true, false );
                    p->destroy( yymsp[-3].minor.yy0 );
                  yy_destructor(yypParser,6,&yymsp[-1].minor);
  yy_destructor(yypParser,12,&yymsp[0].minor);
}
#line 4004 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 141: /* newfunc_lbr ::= PERIOD QMARK expr_paren YIELD LBR */
#line 1027 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy261 = p->function( yymsp[-4].minor.yy0->sloc,
                                    nullptr, yymsp[-2].minor.yy303, true, true );
                    p->destroy( yymsp[-4].minor.yy0 );
                  yy_destructor(yypParser,55,&yymsp[-3].minor);
  yy_destructor(yypParser,6,&yymsp[-1].minor);
  yy_destructor(yypParser,12,&yymsp[0].minor);
}
#line 4016 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 143: /* expr_value ::= LBR RBR */
#line 1040 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy303 = p->alloc< xec_new_table >( yymsp[-1].minor.yy0->sloc );
                    p->destroy( yymsp[-1].minor.yy0 );
                  yy_destructor(yypParser,11,&yymsp[0].minor);
}
#line 4025 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 144: /* expr_value ::= LBR keyval_list RBR */
#line 1045 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy303 = yymsp[-1].minor.yy71;
                    yygotominor.yy303->sloc = yymsp[-2].minor.yy0->sloc;
                    p->destroy( yymsp[-2].minor.yy0 );
                  yy_destructor(yypParser,11,&yymsp[0].minor);
}
#line 4035 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 146: /* expr_lbody ::= expr_lbody COMMA expr_value */
#line 1056 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    // Do not resolve.
                    yygotominor.yy303 = p->append( yymsp[-2].minor.yy303, yymsp[0].minor.yy303 );
                  yy_destructor(yypParser,17,&yymsp[-1].minor);
}
#line 4044 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 147: /* expr_final ::= ELLIPSIS */
#line 1063 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy303 = p->alloc< xec_expr_vararg >( yymsp[0].minor.yy0->sloc );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 4052 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 148: /* expr_final ::= proto ELLIPSIS */
#line 1068 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    xec_expr_call* call = p->resolve_proto( yymsp[-1].minor.yy207 );
                    call->unpack = true;
                    yygotominor.yy303 = call;
                  yy_destructor(yypParser,56,&yymsp[0].minor);
}
#line 4062 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 149: /* expr_final ::= expr_call ELLIPSIS */
#line 1074 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy28->unpack = true;
                    yygotominor.yy303 = yymsp[-1].minor.yy28;
                  yy_destructor(yypParser,56,&yymsp[0].minor);
}
#line 4071 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 150: /* expr_final ::= expr_yield ELLIPSIS */
#line 1079 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy159->unpack = true;
                    yygotominor.yy303 = yymsp[-1].minor.yy159;
                  yy_destructor(yypParser,56,&yymsp[0].minor);
}
#line 4080 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 151: /* expr_final ::= proto YIELD ELLIPSIS */
#line 1084 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    xec_expr_call* call = p->resolve_proto( yymsp[-2].minor.yy207 );
                    call->yieldcall = true;
                    call->unpack = true;
                    yygotominor.yy303 = call;
                  yy_destructor(yypParser,6,&yymsp[-1].minor);
  yy_destructor(yypParser,56,&yymsp[0].minor);
}
#line 4092 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 152: /* expr_final ::= expr_call YIELD ELLIPSIS */
#line 1091 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-2].minor.yy28->yieldcall = true;
                    yymsp[-2].minor.yy28->unpack = true;
                    yygotominor.yy303 = yymsp[-2].minor.yy28;
                  yy_destructor(yypParser,6,&yymsp[-1].minor);
  yy_destructor(yypParser,56,&yymsp[0].minor);
}
#line 4103 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 153: /* expr_final ::= name LSQ RSQ ELLIPSIS */
#line 1097 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-3].minor.yy303 = p->resolve( yymsp[-3].minor.yy303 );
                    yygotominor.yy303 = p->alloc< xec_expr_unpack >( yymsp[-3].minor.yy303->sloc, yymsp[-3].minor.yy303 );
                  yy_destructor(yypParser,18,&yymsp[-2].minor);
  yy_destructor(yypParser,19,&yymsp[-1].minor);
  yy_destructor(yypParser,56,&yymsp[0].minor);
}
#line 4114 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 154: /* expr_final ::= proto LSQ RSQ ELLIPSIS */
#line 1102 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    xec_expr_call* call = p->resolve_proto( yymsp[-3].minor.yy207 );
                    yygotominor.yy303 = p->alloc< xec_expr_unpack >( call->sloc, call );
                  yy_destructor(yypParser,18,&yymsp[-2].minor);
  yy_destructor(yypParser,19,&yymsp[-1].minor);
  yy_destructor(yypParser,56,&yymsp[0].minor);
}
#line 4125 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 155: /* expr_final ::= expr_index LSQ RSQ ELLIPSIS */
      case 157: /* expr_final ::= expr_new LSQ RSQ ELLIPSIS */ yytestcase(yyruleno==157);
      case 159: /* expr_final ::= expr_postfix LSQ RSQ ELLIPSIS */ yytestcase(yyruleno==159);
#line 1107 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy303 = p->alloc< xec_expr_unpack >( yymsp[-3].minor.yy303->sloc, yymsp[-3].minor.yy303 );
                  yy_destructor(yypParser,18,&yymsp[-2].minor);
  yy_destructor(yypParser,19,&yymsp[-1].minor);
  yy_destructor(yypParser,56,&yymsp[0].minor);
}
#line 4137 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 156: /* expr_final ::= expr_yield LSQ RSQ ELLIPSIS */
#line 1111 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy303 = p->alloc< xec_expr_unpack >( yymsp[-3].minor.yy159->sloc, yymsp[-3].minor.yy159 );
                  yy_destructor(yypParser,18,&yymsp[-2].minor);
  yy_destructor(yypParser,19,&yymsp[-1].minor);
  yy_destructor(yypParser,56,&yymsp[0].minor);
}
#line 4147 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 158: /* expr_final ::= expr_call LSQ RSQ ELLIPSIS */
#line 1119 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy303 = p->alloc< xec_expr_unpack >( yymsp[-3].minor.yy28->sloc, yymsp[-3].minor.yy28 );
                  yy_destructor(yypParser,18,&yymsp[-2].minor);
  yy_destructor(yypParser,19,&yymsp[-1].minor);
  yy_destructor(yypParser,56,&yymsp[0].minor);
}
#line 4157 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 162: /* expr_list ::= expr_lbody COMMA expr_final */
      case 193: /* sexpr_list ::= sexpr_lbody COMMA expr_final */ yytestcase(yyruleno==193);
#line 1136 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy303 = p->final( yymsp[-2].minor.yy303, yymsp[0].minor.yy303 );
                  yy_destructor(yypParser,17,&yymsp[-1].minor);
}
#line 4166 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 163: /* expr_assign ::= expr_list */
      case 189: /* sexpr_lbody ::= expr_nolbr */ yytestcase(yyruleno==189);
#line 1141 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[0].minor.yy303 = p->resolve( yymsp[0].minor.yy303 );
                    yygotominor.yy303 = yymsp[0].minor.yy303;
                }
#line 4175 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 164: /* expr_assign ::= expr_lbody assign_op expr_assign */
#line 1146 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-2].minor.yy303 = p->resolve( yymsp[-2].minor.yy303 );
                    yymsp[0].minor.yy303 = p->resolve( yymsp[0].minor.yy303 );
                    yygotominor.yy303 = p->assign( yymsp[-1].minor.yy179.token, yymsp[-1].minor.yy179.op, yymsp[-2].minor.yy303, yymsp[0].minor.yy303 );
                    p->destroy( yymsp[-1].minor.yy179.token );
                }
#line 4185 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 165: /* assign_op ::= ASSIGN */
#line 1155 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy179 = make_token_op( yymsp[0].minor.yy0, XEC_OPERATOR_ASSIGN );
                }
#line 4192 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 166: /* assign_op ::= MULASSIGN */
#line 1159 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy179 = make_token_op( yymsp[0].minor.yy0, XEC_OPERATOR_MULASSIGN );
                }
#line 4199 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 167: /* assign_op ::= DIVASSIGN */
#line 1163 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy179 = make_token_op( yymsp[0].minor.yy0, XEC_OPERATOR_DIVASSIGN );
                }
#line 4206 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 168: /* assign_op ::= MODASSIGN */
#line 1167 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy179 = make_token_op( yymsp[0].minor.yy0, XEC_OPERATOR_MODASSIGN );
                }
#line 4213 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 169: /* assign_op ::= INTDIVASSIGN */
#line 1171 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy179 = make_token_op( yymsp[0].minor.yy0, XEC_OPERATOR_INTDIVASSIGN );
                }
#line 4220 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 170: /* assign_op ::= ADDASSIGN */
#line 1175 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy179 = make_token_op( yymsp[0].minor.yy0, XEC_OPERATOR_ADDASSIGN );
                }
#line 4227 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 171: /* assign_op ::= SUBASSIGN */
#line 1179 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy179 = make_token_op( yymsp[0].minor.yy0, XEC_OPERATOR_SUBASSIGN );
                }
#line 4234 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 172: /* assign_op ::= LSHIFTASSIGN */
#line 1183 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy179 = make_token_op( yymsp[0].minor.yy0, XEC_OPERATOR_LSHIFTASSIGN );
                }
#line 4241 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 173: /* assign_op ::= LRSHIFTASSIGN */
#line 1187 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy179 = make_token_op( yymsp[0].minor.yy0, XEC_OPERATOR_LRSHIFTASSIGN );
                }
#line 4248 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 174: /* assign_op ::= ARSHIFTASSIGN */
#line 1191 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy179 = make_token_op( yymsp[0].minor.yy0, XEC_OPERATOR_ARSHIFTASSIGN );
                }
#line 4255 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 175: /* assign_op ::= BITANDASSIGN */
#line 1195 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy179 = make_token_op( yymsp[0].minor.yy0, XEC_OPERATOR_BITANDASSIGN );
                }
#line 4262 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 176: /* assign_op ::= BITXORASSIGN */
#line 1199 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy179 = make_token_op( yymsp[0].minor.yy0, XEC_OPERATOR_BITXORASSIGN );
                }
#line 4269 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 177: /* assign_op ::= BITORASSIGN */
#line 1203 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy179 = make_token_op( yymsp[0].minor.yy0, XEC_OPERATOR_BITORASSIGN );
                }
#line 4276 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 178: /* value_lbody ::= expr_value */
#line 1209 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[0].minor.yy303 = p->resolve( yymsp[0].minor.yy303 );
                    yygotominor.yy67 = p->alloc< xec_new_list >( -1 );
                    yygotominor.yy67->values.push_back( yymsp[0].minor.yy303 );
                }
#line 4285 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 179: /* value_lbody ::= value_lbody COMMA expr_value */
#line 1215 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[0].minor.yy303 = p->resolve( yymsp[0].minor.yy303 );
                    yygotominor.yy67 = yymsp[-2].minor.yy67;
                    yygotominor.yy67->values.push_back( yymsp[0].minor.yy303 );
                  yy_destructor(yypParser,17,&yymsp[-1].minor);
}
#line 4295 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 180: /* value_list ::= expr_final */
#line 1222 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy67 = p->alloc< xec_new_list >( -1 );
                    yygotominor.yy67->final = yymsp[0].minor.yy303;
                }
#line 4303 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 181: /* value_list ::= expr_final COMMA */
#line 1227 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy67 = p->alloc< xec_new_list >( -1 );
                    yygotominor.yy67->final = yymsp[-1].minor.yy303;
                  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 4312 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 182: /* value_list ::= value_lbody */
#line 1232 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy67 = yymsp[0].minor.yy67;
                }
#line 4319 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 183: /* value_list ::= value_lbody COMMA */
#line 1236 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy67 = yymsp[-1].minor.yy67;
                  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 4327 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 184: /* value_list ::= value_lbody COMMA expr_final */
#line 1240 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy67 = yymsp[-2].minor.yy67;
                    yygotominor.yy67->final = yymsp[0].minor.yy303;
                  yy_destructor(yypParser,17,&yymsp[-1].minor);
}
#line 4336 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 185: /* keyval_lbody ::= expr_value COLON expr_value */
#line 1247 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-2].minor.yy303   = p->resolve( yymsp[-2].minor.yy303 );
                    yymsp[0].minor.yy303 = p->resolve( yymsp[0].minor.yy303 );
                    yygotominor.yy71 = new xec_new_table( -1 );
                    yygotominor.yy71->elements.emplace_back( yymsp[-2].minor.yy303, yymsp[0].minor.yy303 );
                  yy_destructor(yypParser,13,&yymsp[-1].minor);
}
#line 4347 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 186: /* keyval_lbody ::= keyval_lbody COMMA expr_value COLON expr_value */
#line 1255 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-2].minor.yy303   = p->resolve( yymsp[-2].minor.yy303 );
                    yymsp[0].minor.yy303 = p->resolve( yymsp[0].minor.yy303 );
                    yygotominor.yy71 = yymsp[-4].minor.yy71;
                    yygotominor.yy71->elements.emplace_back( yymsp[-2].minor.yy303, yymsp[0].minor.yy303 );
                  yy_destructor(yypParser,17,&yymsp[-3].minor);
  yy_destructor(yypParser,13,&yymsp[-1].minor);
}
#line 4359 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 187: /* keyval_list ::= keyval_lbody */
#line 1263 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy71 = yymsp[0].minor.yy71;
                }
#line 4366 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 188: /* keyval_list ::= keyval_lbody COMMA */
#line 1267 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy71 = yymsp[-1].minor.yy71;
                  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 4374 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 190: /* sexpr_lbody ::= sexpr_lbody COMMA expr_value */
#line 1284 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[0].minor.yy303 = p->resolve( yymsp[0].minor.yy303 );
                    yygotominor.yy303 = p->append( yymsp[-2].minor.yy303, yymsp[0].minor.yy303 );
                  yy_destructor(yypParser,17,&yymsp[-1].minor);
}
#line 4383 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 195: /* sexpr_assign ::= sexpr_lbody assign_op expr_assign */
#line 1307 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[0].minor.yy303 = p->resolve( yymsp[0].minor.yy303 );
                    yygotominor.yy303 = p->assign( yymsp[-1].minor.yy179.token, yymsp[-1].minor.yy179.op, yymsp[-2].minor.yy303, yymsp[0].minor.yy303 );
                    p->destroy( yymsp[-1].minor.yy179.token );
                }
#line 4392 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 197: /* condition ::= VAR varname ASSIGN expr_list */
#line 1328 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[0].minor.yy303 = p->resolve( yymsp[0].minor.yy303 );
                    xec_expr_assign* assign = p->alloc< xec_expr_assign >(
                                    yymsp[-3].minor.yy0->sloc, XEC_OPERATOR_DECLARE );
                    assign->lvalue = p->declare_local( yymsp[-2].minor.yy196 );
                    assign->rvalue = yymsp[0].minor.yy303;
                    yygotominor.yy303 = assign;
                    p->destroy( yymsp[-3].minor.yy0 );
                  yy_destructor(yypParser,16,&yymsp[-1].minor);
}
#line 4406 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 198: /* condition ::= VAR varname_list ASSIGN expr_list */
#line 1338 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[0].minor.yy303 = p->resolve( yymsp[0].minor.yy303 );
                    xec_expr_assign_list* assign =
                            p->alloc< xec_expr_assign_list >(
                                    yymsp[-3].minor.yy0->sloc, XEC_OPERATOR_DECLARE );
                    p->declare_local_list( yymsp[-2].minor.yy59, &assign->lvalues );
                    assign->rvalues = yymsp[0].minor.yy303;
                    yygotominor.yy303 = assign;
                    p->destroy( yymsp[-3].minor.yy0 );
                  yy_destructor(yypParser,16,&yymsp[-1].minor);
}
#line 4421 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 200: /* stmt_list ::= stmt_list SEMICOLON */
#line 1357 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,115,&yymsp[-1].minor);
  yy_destructor(yypParser,14,&yymsp[0].minor);
}
#line 4429 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 201: /* stmt_list ::= stmt_list stmt */
#line 1360 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    p->statement( yymsp[0].minor.yy303 );
                  yy_destructor(yypParser,115,&yymsp[-1].minor);
}
#line 4437 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 202: /* stmt_list ::= stmt_list decl_object */
#line 1364 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,115,&yymsp[-1].minor);
  yy_destructor(yypParser,119,&yymsp[0].minor);
}
#line 4445 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 203: /* stmt_list ::= stmt_list decl_func */
#line 1367 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,115,&yymsp[-1].minor);
  yy_destructor(yypParser,123,&yymsp[0].minor);
}
#line 4453 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 204: /* stmt_list ::= stmt_list decl_var SEMICOLON */
#line 1370 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,115,&yymsp[-2].minor);
  yy_destructor(yypParser,126,&yymsp[-1].minor);
  yy_destructor(yypParser,14,&yymsp[0].minor);
}
#line 4462 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 205: /* stmt_list ::= stmt_list decl_noinit SEMICOLON */
#line 1373 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,115,&yymsp[-2].minor);
  yy_destructor(yypParser,125,&yymsp[-1].minor);
  yy_destructor(yypParser,14,&yymsp[0].minor);
}
#line 4471 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 206: /* stmt ::= stmt_lbr stmt_list RBR */
#line 1379 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy303 = yymsp[-2].minor.yy116;
                    p->close_scope( yymsp[-2].minor.yy116->scope );
                  yy_destructor(yypParser,115,&yymsp[-1].minor);
  yy_destructor(yypParser,11,&yymsp[0].minor);
}
#line 4481 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 208: /* stmt_lbr ::= LBR */
#line 1389 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy116 = p->alloc< xec_stmt_block >( yymsp[0].minor.yy0->sloc );
                    yygotominor.yy116->scope = p->block_scope( yygotominor.yy116 );
                    yygotominor.yy116->scope->block = yygotominor.yy116;
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 4491 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 209: /* stmt_reuse ::= stmt_lbr_ru stmt_list RBR */
#line 1399 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy303 = yymsp[-2].minor.yy116;
                  yy_destructor(yypParser,115,&yymsp[-1].minor);
  yy_destructor(yypParser,11,&yymsp[0].minor);
}
#line 4500 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 211: /* stmt_lbr_ru ::= LBR */
#line 1408 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy116 = p->alloc< xec_stmt_block >( yymsp[0].minor.yy0->sloc );
                    p->get_scope()->block = yygotominor.yy116;
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 4509 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 212: /* stmt_common ::= sexpr_assign SEMICOLON */
#line 1418 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy303 = yymsp[-1].minor.yy303;
                  yy_destructor(yypParser,14,&yymsp[0].minor);
}
#line 4517 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 213: /* stmt_common ::= stmt_if LPN condition RPN stmt */
#line 1422 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-4].minor.yy256->condition = yymsp[-2].minor.yy303;
                    yymsp[-4].minor.yy256->iftrue    = yymsp[0].minor.yy303;
                    p->close_scope( yymsp[-4].minor.yy256->scope );
                    yygotominor.yy303 = yymsp[-4].minor.yy256;
                  yy_destructor(yypParser,7,&yymsp[-3].minor);
  yy_destructor(yypParser,10,&yymsp[-1].minor);
}
#line 4529 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 214: /* stmt_common ::= stmt_if LPN condition RPN stmt ELSE stmt */
#line 1430 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-6].minor.yy256->condition = yymsp[-4].minor.yy303;
                    yymsp[-6].minor.yy256->iftrue    = yymsp[-2].minor.yy303;
                    yymsp[-6].minor.yy256->iffalse   = yymsp[0].minor.yy303;
                    p->close_scope( yymsp[-6].minor.yy256->scope );
                    yygotominor.yy303 = yymsp[-6].minor.yy256;
                  yy_destructor(yypParser,7,&yymsp[-5].minor);
  yy_destructor(yypParser,10,&yymsp[-3].minor);
  yy_destructor(yypParser,2,&yymsp[-1].minor);
}
#line 4543 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 215: /* stmt_common ::= stmt_switch LPN condition RPN stmt_lbr_ru stmt_list RPN */
#line 1439 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-6].minor.yy79->value     = yymsp[-4].minor.yy303;
                    yymsp[-6].minor.yy79->body      = yymsp[-2].minor.yy116;
                    p->close_scope( yymsp[-6].minor.yy79->scope );
                    yygotominor.yy303 = yymsp[-6].minor.yy79;
                  yy_destructor(yypParser,7,&yymsp[-5].minor);
  yy_destructor(yypParser,10,&yymsp[-3].minor);
  yy_destructor(yypParser,115,&yymsp[-1].minor);
  yy_destructor(yypParser,10,&yymsp[0].minor);
}
#line 4557 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 216: /* stmt_common ::= stmt_while LPN condition RPN stmt_reuse */
#line 1447 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-4].minor.yy174->condition = yymsp[-2].minor.yy303;
                    yymsp[-4].minor.yy174->body      = yymsp[0].minor.yy303;
                    p->close_scope( yymsp[-4].minor.yy174->scope );
                    yygotominor.yy303 = yymsp[-4].minor.yy174;
                  yy_destructor(yypParser,7,&yymsp[-3].minor);
  yy_destructor(yypParser,10,&yymsp[-1].minor);
}
#line 4569 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 217: /* stmt_common ::= stmt_do stmt_reuse WHILE LPN expr_assign RPN SEMICOLON */
#line 1455 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-6].minor.yy128->body      = yymsp[-5].minor.yy303;
                    yymsp[-6].minor.yy128->condition = yymsp[-2].minor.yy303;
                    p->close_scope( yymsp[-6].minor.yy128->scope );
                    yygotominor.yy303 = yymsp[-6].minor.yy128;
                  yy_destructor(yypParser,69,&yymsp[-4].minor);
  yy_destructor(yypParser,7,&yymsp[-3].minor);
  yy_destructor(yypParser,10,&yymsp[-1].minor);
  yy_destructor(yypParser,14,&yymsp[0].minor);
}
#line 4583 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 218: /* stmt_common ::= stmt_foreach stmt_reuse */
#line 1462 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy253->body      = yymsp[0].minor.yy303;
                    p->close_scope( yymsp[-1].minor.yy253->scope );
                    yygotominor.yy303 = yymsp[-1].minor.yy253;
                }
#line 4592 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 219: /* stmt_common ::= stmt_for stmt_reuse */
#line 1468 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy56->body      = yymsp[0].minor.yy303;
                    p->close_scope( yymsp[-1].minor.yy56->scope );
                    yygotominor.yy303 = yymsp[-1].minor.yy56;
                }
#line 4601 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 220: /* stmt_common ::= stmt_using LPN condition RPN stmt_reuse */
#line 1475 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-4].minor.yy283->uvalue    = yymsp[-2].minor.yy303;
                    yymsp[-4].minor.yy283->body      = yymsp[0].minor.yy303;
                    p->close_scope( yymsp[-4].minor.yy283->scope );
                    yygotominor.yy303 = yymsp[-4].minor.yy283;
                  yy_destructor(yypParser,7,&yymsp[-3].minor);
  yy_destructor(yypParser,10,&yymsp[-1].minor);
}
#line 4613 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 222: /* stmt_common ::= DELETE expr_lbody SEMICOLON */
#line 1486 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    xec_stmt_delete* s;
                    yygotominor.yy303 = s = p->alloc< xec_stmt_delete >( yymsp[-2].minor.yy0->sloc );
                    p->delval_list( yymsp[-1].minor.yy303, &s->delvals );
                    p->destroy( yymsp[-2].minor.yy0 );
                  yy_destructor(yypParser,14,&yymsp[0].minor);
}
#line 4624 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 223: /* stmt_common ::= CASE expr_value COLON */
#line 1493 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy303 = p->resolve( yymsp[-1].minor.yy303 );
                    yygotominor.yy303 = p->alloc< xec_stmt_case >( yymsp[-2].minor.yy0->sloc, yymsp[-1].minor.yy303 );
                    p->destroy( yymsp[-2].minor.yy0 );
                  yy_destructor(yypParser,13,&yymsp[0].minor);
}
#line 4634 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 224: /* stmt_common ::= DEFAULT COLON */
#line 1499 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy303 = p->alloc< xec_stmt_case >( yymsp[-1].minor.yy0->sloc, nullptr );
                    p->destroy( yymsp[-1].minor.yy0 );
                  yy_destructor(yypParser,13,&yymsp[0].minor);
}
#line 4643 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 225: /* stmt_common ::= CONTINUE SEMICOLON */
#line 1504 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    xec_ast_node* target = p->continue_target( yymsp[-1].minor.yy0->sloc );
                    yygotominor.yy303 = p->alloc< xec_stmt_continue >( yymsp[-1].minor.yy0->sloc, target );
                    p->destroy( yymsp[-1].minor.yy0 );
                  yy_destructor(yypParser,14,&yymsp[0].minor);
}
#line 4653 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 226: /* stmt_common ::= BREAK SEMICOLON */
#line 1510 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    xec_ast_node* target = p->break_target( yymsp[-1].minor.yy0->sloc );
                    yygotominor.yy303 = p->alloc< xec_stmt_break >( yymsp[-1].minor.yy0->sloc, target );
                    p->destroy( yymsp[-1].minor.yy0 );
                  yy_destructor(yypParser,14,&yymsp[0].minor);
}
#line 4663 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 227: /* stmt_common ::= RETURN SEMICOLON */
#line 1516 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy303 = p->alloc< xec_stmt_return >( yymsp[-1].minor.yy0->sloc, nullptr );
                    p->destroy( yymsp[-1].minor.yy0 );
                  yy_destructor(yypParser,14,&yymsp[0].minor);
}
#line 4672 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 228: /* stmt_common ::= RETURN expr_list SEMICOLON */
#line 1521 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy303 = p->resolve( yymsp[-1].minor.yy303 );
                    yygotominor.yy303 = p->alloc< xec_stmt_return >( yymsp[-2].minor.yy0->sloc, yymsp[-1].minor.yy303 );
                    p->destroy( yymsp[-2].minor.yy0 );
                  yy_destructor(yypParser,14,&yymsp[0].minor);
}
#line 4682 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 229: /* stmt_common ::= token_yield SEMICOLON */
#line 1527 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy303 = p->alloc< xec_expr_yield >( yymsp[-1].minor.yy203->sloc, nullptr );
                    p->destroy( yymsp[-1].minor.yy203 );
                  yy_destructor(yypParser,14,&yymsp[0].minor);
}
#line 4691 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 230: /* stmt_common ::= token_yield expr_list SEMICOLON */
#line 1532 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy303 = p->resolve( yymsp[-1].minor.yy303 );
                    yygotominor.yy303 = p->alloc< xec_expr_yield >( yymsp[-2].minor.yy203->sloc, yymsp[-1].minor.yy303 );
                    p->destroy( yymsp[-2].minor.yy203 );
                  yy_destructor(yypParser,14,&yymsp[0].minor);
}
#line 4701 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 231: /* stmt_common ::= THROW expr_value SEMICOLON */
#line 1538 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy303 = p->resolve( yymsp[-1].minor.yy303 );
                    yygotominor.yy303 = p->alloc< xec_stmt_throw >( yymsp[-2].minor.yy0->sloc, yymsp[-1].minor.yy303 );
                    p->destroy( yymsp[-2].minor.yy0 );
                  yy_destructor(yypParser,14,&yymsp[0].minor);
}
#line 4711 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 232: /* stmt_if ::= IF */
#line 1548 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy256 = p->alloc< xec_stmt_if >( yymsp[0].minor.yy0->sloc );
                    yygotominor.yy256->scope = p->block_scope( yygotominor.yy256 );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 4720 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 233: /* stmt_switch ::= SWITCH */
#line 1555 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy79 = p->alloc< xec_stmt_switch >( yymsp[0].minor.yy0->sloc );
                    yygotominor.yy79->scope = p->block_scope( yygotominor.yy79 );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 4729 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 234: /* stmt_while ::= WHILE */
#line 1562 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy174 = p->alloc< xec_stmt_while >( yymsp[0].minor.yy0->sloc );
                    yygotominor.yy174->scope = p->block_scope( yygotominor.yy174 );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 4738 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 235: /* stmt_do ::= DO */
#line 1569 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy128 = p->alloc< xec_stmt_do >( yymsp[0].minor.yy0->sloc );
                    yygotominor.yy128->scope = p->block_scope( yygotominor.yy128 );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 4747 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 236: /* scope_for ::= FOR */
#line 1576 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    // open scope before we know the kind of statement.
                    yygotominor.yy242 = make_token_scope( yymsp[0].minor.yy0, p->block_scope( nullptr ) );
                }
#line 4755 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 237: /* stmt_foreach ::= scope_for LPN expr_lbody COLON expr_value RPN */
#line 1583 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy303 = p->resolve( yymsp[-1].minor.yy303 );
                    yygotominor.yy253 = p->alloc< xec_stmt_foreach >( yymsp[-5].minor.yy242.token->sloc );
                    yymsp[-5].minor.yy242.scope->node = yygotominor.yy253;
                    yygotominor.yy253->scope    = yymsp[-5].minor.yy242.scope;
                    p->lvalue_list( yymsp[-3].minor.yy303, &yygotominor.yy253->lvalues );
                    yygotominor.yy253->list     = yymsp[-1].minor.yy303;
                    p->destroy( yymsp[-5].minor.yy242.token );
                  yy_destructor(yypParser,7,&yymsp[-4].minor);
  yy_destructor(yypParser,13,&yymsp[-2].minor);
  yy_destructor(yypParser,10,&yymsp[0].minor);
}
#line 4771 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 238: /* stmt_foreach ::= scope_for LPN expr_lbody EACHKEY expr_value RPN */
#line 1594 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy303 = p->resolve( yymsp[-1].minor.yy303 );
                    yygotominor.yy253 = p->alloc< xec_stmt_foreach >( yymsp[-5].minor.yy242.token->sloc );
                    yymsp[-5].minor.yy242.scope->node = yygotominor.yy253;
                    yygotominor.yy253->scope    = yymsp[-5].minor.yy242.scope;
                    p->lvalue_list( yymsp[-3].minor.yy303, &yygotominor.yy253->lvalues );
                    yygotominor.yy253->list     = yymsp[-1].minor.yy303;
                    yygotominor.yy253->eachkey  = true;
                    p->destroy( yymsp[-5].minor.yy242.token );
                  yy_destructor(yypParser,7,&yymsp[-4].minor);
  yy_destructor(yypParser,80,&yymsp[-2].minor);
  yy_destructor(yypParser,10,&yymsp[0].minor);
}
#line 4788 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 239: /* stmt_foreach ::= scope_for LPN VAR varname COLON expr_value RPN */
#line 1606 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy303 = p->resolve( yymsp[-1].minor.yy303 );
                    yygotominor.yy253 = p->alloc< xec_stmt_foreach >( yymsp[-6].minor.yy242.token->sloc );
                    yymsp[-6].minor.yy242.scope->node = yygotominor.yy253;
                    yygotominor.yy253->scope    = yymsp[-6].minor.yy242.scope;
                    yygotominor.yy253->lvalues.push_back( p->declare_local( yymsp[-3].minor.yy196 ) );
                    yygotominor.yy253->list     = yymsp[-1].minor.yy303;
                    yygotominor.yy253->declare  = true;
                    p->destroy( yymsp[-6].minor.yy242.token );
                  yy_destructor(yypParser,7,&yymsp[-5].minor);
  yy_destructor(yypParser,15,&yymsp[-4].minor);
  yy_destructor(yypParser,13,&yymsp[-2].minor);
  yy_destructor(yypParser,10,&yymsp[0].minor);
}
#line 4806 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 240: /* stmt_foreach ::= scope_for LPN VAR varname_list COLON expr_value RPN */
#line 1618 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy303 = p->resolve( yymsp[-1].minor.yy303 );
                    yygotominor.yy253 = p->alloc< xec_stmt_foreach >( yymsp[-6].minor.yy242.token->sloc );
                    yymsp[-6].minor.yy242.scope->node = yygotominor.yy253;
                    yygotominor.yy253->scope    = yymsp[-6].minor.yy242.scope;
                    p->declare_local_list( yymsp[-3].minor.yy59, &yygotominor.yy253->lvalues );
                    yygotominor.yy253->list     = yymsp[-1].minor.yy303;
                    yygotominor.yy253->declare  = true;
                    p->destroy( yymsp[-6].minor.yy242.token );
                  yy_destructor(yypParser,7,&yymsp[-5].minor);
  yy_destructor(yypParser,15,&yymsp[-4].minor);
  yy_destructor(yypParser,13,&yymsp[-2].minor);
  yy_destructor(yypParser,10,&yymsp[0].minor);
}
#line 4824 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 241: /* stmt_foreach ::= scope_for LPN VAR varname EACHKEY expr_value RPN */
#line 1630 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy303 = p->resolve( yymsp[-1].minor.yy303 );
                    yygotominor.yy253 = p->alloc< xec_stmt_foreach >( yymsp[-6].minor.yy242.token->sloc );
                    yymsp[-6].minor.yy242.scope->node = yygotominor.yy253;
                    yygotominor.yy253->scope    = yymsp[-6].minor.yy242.scope;
                    yygotominor.yy253->lvalues.push_back( p->declare_local( yymsp[-3].minor.yy196 ) );
                    yygotominor.yy253->list     = yymsp[-1].minor.yy303;
                    yygotominor.yy253->eachkey  = true;
                    yygotominor.yy253->declare  = true;
                    p->destroy( yymsp[-6].minor.yy242.token );
                  yy_destructor(yypParser,7,&yymsp[-5].minor);
  yy_destructor(yypParser,15,&yymsp[-4].minor);
  yy_destructor(yypParser,80,&yymsp[-2].minor);
  yy_destructor(yypParser,10,&yymsp[0].minor);
}
#line 4843 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 242: /* stmt_foreach ::= scope_for LPN VAR varname_list EACHKEY expr_value RPN */
#line 1643 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy303 = p->resolve( yymsp[-1].minor.yy303 );
                    yygotominor.yy253 = p->alloc< xec_stmt_foreach >( yymsp[-6].minor.yy242.token->sloc );
                    yymsp[-6].minor.yy242.scope->node = yygotominor.yy253;
                    yygotominor.yy253->scope    = yymsp[-6].minor.yy242.scope;
                    p->declare_local_list( yymsp[-3].minor.yy59, &yygotominor.yy253->lvalues );
                    yygotominor.yy253->list     = yymsp[-1].minor.yy303;
                    yygotominor.yy253->eachkey  = true;
                    yygotominor.yy253->declare  = true;
                    p->destroy( yymsp[-6].minor.yy242.token );
                  yy_destructor(yypParser,7,&yymsp[-5].minor);
  yy_destructor(yypParser,15,&yymsp[-4].minor);
  yy_destructor(yypParser,80,&yymsp[-2].minor);
  yy_destructor(yypParser,10,&yymsp[0].minor);
}
#line 4862 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 243: /* stmt_for ::= scope_for LPN for_cond SEMICOLON for_expr SEMICOLON for_expr RPN */
#line 1659 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy56 = p->alloc< xec_stmt_for >( yymsp[-7].minor.yy242.token->sloc );
                    yymsp[-7].minor.yy242.scope->node = yygotominor.yy56;
                    yygotominor.yy56->scope        = yymsp[-7].minor.yy242.scope;
                    yygotominor.yy56->init         = yymsp[-5].minor.yy303;
                    yygotominor.yy56->condition    = yymsp[-3].minor.yy303;
                    yygotominor.yy56->update       = yymsp[-1].minor.yy303;
                    p->destroy( yymsp[-7].minor.yy242.token );
                  yy_destructor(yypParser,7,&yymsp[-6].minor);
  yy_destructor(yypParser,14,&yymsp[-4].minor);
  yy_destructor(yypParser,14,&yymsp[-2].minor);
  yy_destructor(yypParser,10,&yymsp[0].minor);
}
#line 4879 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 244: /* for_cond ::= */
      case 246: /* for_expr ::= */ yytestcase(yyruleno==246);
#line 1670 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy303 = nullptr;
                }
#line 4887 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 248: /* stmt_using ::= USING */
#line 1688 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy283 = p->alloc< xec_stmt_using >( yymsp[0].minor.yy0->sloc );
                    yygotominor.yy283->scope = p->block_scope( yygotominor.yy283 );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 4896 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 249: /* stmt_try ::= try_catch */
#line 1698 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy303 = yymsp[0].minor.yy12;
                }
#line 4903 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 250: /* stmt_try ::= try_catch FINALLY stmt */
      case 251: /* stmt_try ::= try_block FINALLY stmt */ yytestcase(yyruleno==251);
#line 1702 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-2].minor.yy12->fstmt = yymsp[0].minor.yy303;
                    yygotominor.yy303 = yymsp[-2].minor.yy12;
                  yy_destructor(yypParser,5,&yymsp[-1].minor);
}
#line 4913 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 252: /* try_block ::= TRY stmt */
#line 1713 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy12 = p->alloc< xec_stmt_try >( yymsp[-1].minor.yy0->sloc, yymsp[0].minor.yy303 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 4921 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 253: /* try_catch ::= try_block stmt_catch stmt_reuse */
      case 254: /* try_catch ::= try_catch stmt_catch stmt_reuse */ yytestcase(yyruleno==254);
#line 1719 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy224->body = yymsp[0].minor.yy303;
                    p->close_scope( yymsp[-1].minor.yy224->scope );
                    yymsp[-2].minor.yy12->clist.push_back( yymsp[-1].minor.yy224 );
                    yygotominor.yy12 = yymsp[-2].minor.yy12;
                }
#line 4932 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 255: /* scope_catch ::= CATCH */
#line 1734 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    // open scope here ready for declarations.
                    yygotominor.yy242 = make_token_scope( yymsp[0].minor.yy0, p->block_scope( nullptr ) );
                }
#line 4940 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 256: /* stmt_catch ::= scope_catch LPN COLON expr_simple RPN */
#line 1740 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy303 = p->resolve( yymsp[-1].minor.yy303 );
                    yygotominor.yy224 = p->alloc< xec_stmt_catch >( yymsp[-4].minor.yy242.token->sloc );
                    yymsp[-4].minor.yy242.scope->node = yygotominor.yy224;
                    yygotominor.yy224->proto    = yymsp[-1].minor.yy303;
                    p->destroy( yymsp[-4].minor.yy242.token );
                  yy_destructor(yypParser,7,&yymsp[-3].minor);
  yy_destructor(yypParser,13,&yymsp[-2].minor);
  yy_destructor(yypParser,10,&yymsp[0].minor);
}
#line 4954 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 257: /* stmt_catch ::= scope_catch LPN expr_value COLON expr_simple RPN */
#line 1749 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-3].minor.yy303 = p->resolve( yymsp[-3].minor.yy303 );
                    yymsp[-1].minor.yy303 = p->resolve( yymsp[-1].minor.yy303 );
                    yygotominor.yy224 = p->alloc< xec_stmt_catch >( yymsp[-5].minor.yy242.token->sloc );
                    yymsp[-5].minor.yy242.scope->node = yygotominor.yy224;
                    yygotominor.yy224->lvalue   = p->lvalue( yymsp[-3].minor.yy303 );
                    yygotominor.yy224->proto    = yymsp[-1].minor.yy303;
                    p->destroy( yymsp[-5].minor.yy242.token );
                  yy_destructor(yypParser,7,&yymsp[-4].minor);
  yy_destructor(yypParser,13,&yymsp[-2].minor);
  yy_destructor(yypParser,10,&yymsp[0].minor);
}
#line 4970 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 258: /* stmt_catch ::= scope_catch LPN VAR varname COLON expr_simple RPN */
#line 1760 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy303 = p->resolve( yymsp[-1].minor.yy303 );
                    yygotominor.yy224 = p->alloc< xec_stmt_catch >( yymsp[-6].minor.yy242.token->sloc );
                    yymsp[-6].minor.yy242.scope->node = yygotominor.yy224;
                    yygotominor.yy224->lvalue   = p->declare_local( yymsp[-3].minor.yy196 );
                    yygotominor.yy224->proto    = yymsp[-1].minor.yy303;
                    yygotominor.yy224->declare  = true;
                    p->destroy( yymsp[-6].minor.yy242.token );
                  yy_destructor(yypParser,7,&yymsp[-5].minor);
  yy_destructor(yypParser,15,&yymsp[-4].minor);
  yy_destructor(yypParser,13,&yymsp[-2].minor);
  yy_destructor(yypParser,10,&yymsp[0].minor);
}
#line 4987 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 259: /* stmt_catch ::= scope_catch LPN expr_value RPN */
#line 1770 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy303 = p->resolve( yymsp[-1].minor.yy303 );
                    yygotominor.yy224 = p->alloc< xec_stmt_catch >( yymsp[-3].minor.yy242.token->sloc );
                    yymsp[-3].minor.yy242.scope->node = yygotominor.yy224;
                    yygotominor.yy224->lvalue   = p->lvalue( yymsp[-1].minor.yy303 );
                    yygotominor.yy224->proto    = nullptr;
                    p->destroy( yymsp[-3].minor.yy242.token );
                  yy_destructor(yypParser,7,&yymsp[-2].minor);
  yy_destructor(yypParser,10,&yymsp[0].minor);
}
#line 5001 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 260: /* stmt_catch ::= scope_catch LPN VAR varname RPN */
#line 1779 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy224 = p->alloc< xec_stmt_catch >( yymsp[-4].minor.yy242.token->sloc );
                    yymsp[-4].minor.yy242.scope->node = yygotominor.yy224;
                    yygotominor.yy224->lvalue   = p->declare_local( yymsp[-1].minor.yy196 );
                    yygotominor.yy224->proto    = nullptr;
                    yygotominor.yy224->declare  = true;
                    p->destroy( yymsp[-4].minor.yy242.token );
                  yy_destructor(yypParser,7,&yymsp[-3].minor);
  yy_destructor(yypParser,15,&yymsp[-2].minor);
  yy_destructor(yypParser,10,&yymsp[0].minor);
}
#line 5016 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 261: /* token_yield ::= YIELD */
#line 1798 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy203 = yymsp[0].minor.yy0;
                }
#line 5023 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      default:
        break;
  };
  yygoto = yyRuleInfo[yyruleno].lhs;
  yysize = yyRuleInfo[yyruleno].nrhs;
  yypParser->yyidx -= yysize;
  yyact = yy_find_reduce_action(yymsp[-yysize].stateno,(YYCODETYPE)yygoto);
  if( yyact < YYNSTATE ){
#ifdef NDEBUG
    /* If we are not debugging and the reduce action popped at least
    ** one element off the stack, then we can push the new element back
    ** onto the stack here, and skip the stack overflow test in yy_shift().
    ** That gives a significant speed improvement. */
    if( yysize ){
      yypParser->yyidx++;
      yymsp -= yysize-1;
      yymsp->stateno = (YYACTIONTYPE)yyact;
      yymsp->major = (YYCODETYPE)yygoto;
      yymsp->minor = yygotominor;
    }else
#endif
    {
      yy_shift(yypParser,yyact,yygoto,&yygotominor);
    }
  }else{
    assert( yyact == YYNSTATE + YYNRULE + 1 );
    yy_accept(yypParser);
  }
}

/*
** The following code executes when the parse fails
*/
#ifndef YYNOERRORRECOVERY
static void yy_parse_failed(
  yyParser *yypParser           /* The parser */
){
  XecParseARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sFail!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser fails */
  XecParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}
#endif /* YYNOERRORRECOVERY */

/*
** The following code executes when a syntax error first occurs.
*/
static void yy_syntax_error(
  yyParser *yypParser,           /* The parser */
  int yymajor,                   /* The major type of the error token */
  YYMINORTYPE yyminor            /* The minor type of the error token */
){
  XecParseARG_FETCH;
#define TOKEN (yyminor.yy0)
#line 1810 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"

    p->get_script()->diagnostic( TOKEN->sloc,
            "unexpected %s", TOKEN->get_spelling().c_str() );
#line 5089 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
  XecParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/*
** The following is executed when the parser accepts
*/
static void yy_accept(
  yyParser *yypParser           /* The parser */
){
  XecParseARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sAccept!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser accepts */
  XecParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/* The main parser program.
** The first argument is a pointer to a structure obtained from
** "XecParseAlloc" which describes the current state of the parser.
** The second argument is the major token number.  The third is
** the minor token.  The fourth optional argument is whatever the
** user wants (and specified in the grammar) and is available for
** use by the action routines.
**
** Inputs:
** <ul>
** <li> A pointer to the parser (an opaque structure.)
** <li> The major token number.
** <li> The minor token number.
** <li> An option argument of a grammar-specified type.
** </ul>
**
** Outputs:
** None.
*/
void XecParse(
  void *yyp,                   /* The parser */
  int yymajor,                 /* The major token code number */
  XecParseTOKENTYPE yyminor       /* The value for the token */
  XecParseARG_PDECL               /* Optional %extra_argument parameter */
){
  YYMINORTYPE yyminorunion;
  int yyact;            /* The parser action. */
  int yyendofinput;     /* True if we are at the end of input */
#ifdef YYERRORSYMBOL
  int yyerrorhit = 0;   /* True if yymajor has invoked an error */
#endif
  yyParser *yypParser;  /* The parser */

  /* (re)initialize the parser, if necessary */
  yypParser = (yyParser*)yyp;
  if( yypParser->yyidx<0 ){
#if YYSTACKDEPTH<=0
    if( yypParser->yystksz <=0 ){
      /*memset(&yyminorunion, 0, sizeof(yyminorunion));*/
      yyminorunion = yyzerominor;
      yyStackOverflow(yypParser, &yyminorunion);
      return;
    }
#endif
    yypParser->yyidx = 0;
    yypParser->yyerrcnt = -1;
    yypParser->yystack[0].stateno = 0;
    yypParser->yystack[0].major = 0;
  }
  yyminorunion.yy0 = yyminor;
  yyendofinput = (yymajor==0);
  XecParseARG_STORE;

#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sInput %s\n",yyTracePrompt,yyTokenName[yymajor]);
  }
#endif

  do{
    yyact = yy_find_shift_action(yypParser,(YYCODETYPE)yymajor);
    if( yyact<YYNSTATE ){
      assert( !yyendofinput );  /* Impossible to shift the $ token */
      yy_shift(yypParser,yyact,yymajor,&yyminorunion);
      yypParser->yyerrcnt--;
      yymajor = YYNOCODE;
    }else if( yyact < YYNSTATE + YYNRULE ){
      yy_reduce(yypParser,yyact-YYNSTATE);
    }else{
      assert( yyact == YY_ERROR_ACTION );
#ifdef YYERRORSYMBOL
      int yymx;
#endif
#ifndef NDEBUG
      if( yyTraceFILE ){
        fprintf(yyTraceFILE,"%sSyntax Error!\n",yyTracePrompt);
      }
#endif
#ifdef YYERRORSYMBOL
      /* A syntax error has occurred.
      ** The response to an error depends upon whether or not the
      ** grammar defines an error token "ERROR".  
      **
      ** This is what we do if the grammar does define ERROR:
      **
      **  * Call the %syntax_error function.
      **
      **  * Begin popping the stack until we enter a state where
      **    it is legal to shift the error symbol, then shift
      **    the error symbol.
      **
      **  * Set the error count to three.
      **
      **  * Begin accepting and shifting new tokens.  No new error
      **    processing will occur until three tokens have been
      **    shifted successfully.
      **
      */
      if( yypParser->yyerrcnt<0 ){
        yy_syntax_error(yypParser,yymajor,yyminorunion);
      }
      yymx = yypParser->yystack[yypParser->yyidx].major;
      if( yymx==YYERRORSYMBOL || yyerrorhit ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE,"%sDiscard input token %s\n",
             yyTracePrompt,yyTokenName[yymajor]);
        }
#endif
        yy_destructor(yypParser, (YYCODETYPE)yymajor,&yyminorunion);
        yymajor = YYNOCODE;
      }else{
         while(
          yypParser->yyidx >= 0 &&
          yymx != YYERRORSYMBOL &&
          (yyact = yy_find_reduce_action(
                        yypParser->yystack[yypParser->yyidx].stateno,
                        YYERRORSYMBOL)) >= YYNSTATE
        ){
          yy_pop_parser_stack(yypParser);
        }
        if( yypParser->yyidx < 0 || yymajor==0 ){
          yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
          yy_parse_failed(yypParser);
          yymajor = YYNOCODE;
        }else if( yymx!=YYERRORSYMBOL ){
          YYMINORTYPE u2;
          u2.YYERRSYMDT = 0;
          yy_shift(yypParser,yyact,YYERRORSYMBOL,&u2);
        }
      }
      yypParser->yyerrcnt = 3;
      yyerrorhit = 1;
#elif defined(YYNOERRORRECOVERY)
      /* If the YYNOERRORRECOVERY macro is defined, then do not attempt to
      ** do any kind of error recovery.  Instead, simply invoke the syntax
      ** error routine and continue going as if nothing had happened.
      **
      ** Applications can set this macro (for example inside %include) if
      ** they intend to abandon the parse upon the first syntax error seen.
      */
      yy_syntax_error(yypParser,yymajor,yyminorunion);
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      yymajor = YYNOCODE;
      
#else  /* YYERRORSYMBOL is not defined */
      /* This is what we do if the grammar does not define ERROR:
      **
      **  * Report an error message, and throw away the input token.
      **
      **  * If the input token is $, then fail the parse.
      **
      ** As before, subsequent error messages are suppressed until
      ** three input tokens have been successfully shifted.
      */
      if( yypParser->yyerrcnt<=0 ){
        yy_syntax_error(yypParser,yymajor,yyminorunion);
      }
      yypParser->yyerrcnt = 3;
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      if( yyendofinput ){
        yy_parse_failed(yypParser);
      }
      yymajor = YYNOCODE;
#endif
    }
  }while( yymajor!=YYNOCODE && yypParser->yyidx>=0 );
  return;
}
