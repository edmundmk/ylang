/* Driver template for the LEMON parser generator.
** The author disclaims copyright to this source code.
*/
/* First off, code is included that follows the "include" declaration
** in the input grammar file. */
#include <stdio.h>
#line 19 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"


#include <assert.h>
#include "xec_parser.h"
#include "xec_token.h"
#include "xec_ast.h"



struct xec_token_scope
{
    xec_token*          token;
    xec_ast_scope*      scope;
};

inline xec_token_scope make_token_scope(
                xec_token* token, xec_ast_scope* scope )
{
    xec_token_scope result;
    result.token = token;
    result.scope = scope;
    return result;
}


struct xec_token_op
{
    xec_token*          token;
    xec_ast_opkind   op;
};

inline xec_token_op make_token_op(
                xec_token* token, xec_ast_opkind op )
{
    xec_token_op result;
    result.token = token;
    result.op = op;
    return result;
}


#line 105 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"



void xec_parser::destroy( xec_token* token )
{
    token->~xec_token();
    recycle_tokens.push_back( token );
}


#line 61 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
/* Next is all token values, in a form suitable for use by makeheaders.
** This section will be null unless lemon is run with the -m switch.
*/
/* 
** These constants (all generated automatically by the parser generator)
** specify the various kinds of tokens (terminals) that the parser
** understands. 
**
** Each symbol here is a terminal symbol in the grammar.
*/
/* Make sure the INTERFACE macro is defined.
*/
#ifndef INTERFACE
# define INTERFACE 1
#endif
/* The next thing included is series of defines which control
** various aspects of the generated parser.
**    YYCODETYPE         is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 terminals
**                       and nonterminals.  "int" is used otherwise.
**    YYNOCODE           is a number of type YYCODETYPE which corresponds
**                       to no legal terminal or nonterminal number.  This
**                       number is used to fill in empty slots of the hash 
**                       table.
**    YYFALLBACK         If defined, this indicates that one or more tokens
**                       have fall-back values which should be used if the
**                       original value of the token will not parse.
**    YYACTIONTYPE       is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 rules and
**                       states combined.  "int" is used otherwise.
**    XecParseTOKENTYPE     is the data type used for minor tokens given 
**                       directly to the parser from the tokenizer.
**    YYMINORTYPE        is the data type used for all minor tokens.
**                       This is typically a union of many types, one of
**                       which is XecParseTOKENTYPE.  The entry in the union
**                       for base tokens is called "yy0".
**    YYSTACKDEPTH       is the maximum depth of the parser's stack.  If
**                       zero the stack is dynamically sized using realloc()
**    XecParseARG_SDECL     A static variable declaration for the %extra_argument
**    XecParseARG_PDECL     A parameter declaration for the %extra_argument
**    XecParseARG_STORE     Code to store %extra_argument into yypParser
**    XecParseARG_FETCH     Code to extract %extra_argument from yypParser
**    YYNSTATE           the combined number of states.
**    YYNRULE            the number of rules in the grammar
**    YYERRORSYMBOL      is the code number of the error symbol.  If not
**                       defined, then do no error processing.
*/
#define YYCODETYPE unsigned char
#define YYNOCODE 160
#define YYACTIONTYPE unsigned short int
#define XecParseTOKENTYPE  xec_token* 
typedef union {
  int yyinit;
  XecParseTOKENTYPE yy0;
  xec_stmt_if* yy10;
  xec_name_list* yy16;
  xec_stmt_using* yy55;
  xec_ast_node* yy59;
  xec_new_table* yy71;
  xec_expr_list* yy96;
  xec_stmt_while* yy108;
  xec_token* yy115;
  xec_new_object* yy116;
  xec_stmt_do* yy117;
  xec_stmt_foreach* yy147;
  xec_ast_func* yy165;
  xec_stmt_block* yy192;
  xec_token_scope yy236;
  xec_new_array* yy240;
  xec_stmt_switch* yy265;
  xec_name_name* yy281;
  xec_token_op yy285;
  xec_stmt_for* yy296;
  xec_stmt_try* yy297;
  xec_stmt_catch* yy298;
} YYMINORTYPE;
#ifndef YYSTACKDEPTH
#define YYSTACKDEPTH 100
#endif
#define XecParseARG_SDECL  xec_parser* p ;
#define XecParseARG_PDECL , xec_parser* p 
#define XecParseARG_FETCH  xec_parser* p  = yypParser->p 
#define XecParseARG_STORE yypParser->p  = p 
#define YYNSTATE 408
#define YYNRULE 224
#define YY_NO_ACTION      (YYNSTATE+YYNRULE+2)
#define YY_ACCEPT_ACTION  (YYNSTATE+YYNRULE+1)
#define YY_ERROR_ACTION   (YYNSTATE+YYNRULE)

/* The yyzerominor constant is used to initialize instances of
** YYMINORTYPE objects to zero. */
static const YYMINORTYPE yyzerominor = { 0 };

/* Define the yytestcase() macro to be a no-op if is not already defined
** otherwise.
**
** Applications can choose to define yytestcase() in the %include section
** to a macro that can assist in verifying code coverage.  For production
** code the yytestcase() macro should be turned off.  But it is useful
** for testing.
*/
#ifndef yytestcase
# define yytestcase(X)
#endif


/* Next are the tables used to determine what action to take based on the
** current state and lookahead token.  These tables are used to implement
** functions that take a state number and lookahead value and return an
** action integer.  
**
** Suppose the action integer is N.  Then the action is determined as
** follows
**
**   0 <= N < YYNSTATE                  Shift N.  That is, push the lookahead
**                                      token onto the stack and goto state N.
**
**   YYNSTATE <= N < YYNSTATE+YYNRULE   Reduce by rule N-YYNSTATE.
**
**   N == YYNSTATE+YYNRULE              A syntax error has occurred.
**
**   N == YYNSTATE+YYNRULE+1            The parser accepts its input.
**
**   N == YYNSTATE+YYNRULE+2            No such action.  Denotes unused
**                                      slots in the yy_action[] table.
**
** The action table is constructed as a single large table named yy_action[].
** Given state S and lookahead X, the action is computed as
**
**      yy_action[ yy_shift_ofst[S] + X ]
**
** If the index value yy_shift_ofst[S]+X is out of range or if the value
** yy_lookahead[yy_shift_ofst[S]+X] is not equal to X or if yy_shift_ofst[S]
** is equal to YY_SHIFT_USE_DFLT, it means that the action is not in the table
** and that yy_default[S] should be used instead.  
**
** The formula above is for computing the action when the lookahead is
** a terminal symbol.  If the lookahead is a non-terminal (as occurs after
** a reduce action) then the yy_reduce_ofst[] array is used in place of
** the yy_shift_ofst[] array and YY_REDUCE_USE_DFLT is used in place of
** YY_SHIFT_USE_DFLT.
**
** The following are the tables generated in this section:
**
**  yy_action[]        A single table containing all actions.
**  yy_lookahead[]     A table containing the lookahead for each entry in
**                     yy_action.  Used to detect hash collisions.
**  yy_shift_ofst[]    For each state, the offset into yy_action for
**                     shifting terminals.
**  yy_reduce_ofst[]   For each state, the offset into yy_action for
**                     shifting non-terminals after a reduce.
**  yy_default[]       Default action for each state.
*/
static const YYACTIONTYPE yy_action[] = {
 /*     0 */   192,  180,  185,  220,  154,   84,   79,   81,   82,   89,
 /*    10 */   121,  263,  158,  171,  179,    8,  186,  224,   17,   18,
 /*    20 */   199,  103,  104,   97,   96,   34,   71,   72,   70,  280,
 /*    30 */   356,  296,  382,   99,  165,  357,  358,   88,  132,  301,
 /*    40 */   155,  396,  391,  125,  372,  134,  341,  123,  145,  131,
 /*    50 */   203,  195,  160,  197,  108,  214,  174,  138,  316,   33,
 /*    60 */   352,  107,  353,  156,   65,  355,  361,  180,  389,  220,
 /*    70 */   167,  261,  228,   29,  250,  248,  247,  116,  158,  171,
 /*    80 */   179,    8,  186,  224,   17,   18,  199,  103,  104,  110,
 /*    90 */   168,   34,  387,  276,  269,  264,  132,  304,  382,  396,
 /*   100 */   391,  128,   32,  133,  132,   53,  129,  396,  391,  125,
 /*   110 */   372,  134,  341,  123,  145,  131,  203,  195,  160,  197,
 /*   120 */   108,  214,  174,  138,  316,  261,  352,  107,  353,  156,
 /*   130 */    97,   96,  383,  384,  389,  180,  267,  220,  296,  261,
 /*   140 */    99,  276,  269,  264,  121,  303,  158,  171,  179,    8,
 /*   150 */   186,  224,   17,   18,  199,  103,  104,  143,  113,   34,
 /*   160 */   276,  269,  264,   52,  113,  302,  382,   37,  256,   15,
 /*   170 */   309,  140,  132,   38,  301,  396,  391,  125,  372,  134,
 /*   180 */   341,  123,  145,  131,  203,  195,  160,  197,  108,  214,
 /*   190 */   174,  138,  316,  301,  352,  107,  353,  156,  166,  249,
 /*   200 */   361,  180,  389,  220,  132,  144,  373,  396,  391,  128,
 /*   210 */   241,  116,  158,  171,  179,    8,  186,  224,   17,   18,
 /*   220 */   199,  103,  104,   54,  127,   34,  163,   13,  113,   55,
 /*   230 */   163,   11,  382,   29,  250,  248,  247,   37,  132,  301,
 /*   240 */   176,  396,  391,  125,  372,  134,  341,  123,  145,  131,
 /*   250 */   203,  195,  160,  197,  108,  214,  174,  138,  316,   26,
 /*   260 */   352,  107,  353,  156,  272,  141,  383,  407,  389,  180,
 /*   270 */   167,  220,  301,   44,  301,  204,  301,  230,  135,  116,
 /*   280 */   158,  171,  179,    8,  186,  224,   17,   18,  199,  103,
 /*   290 */   104,  256,   16,   34,  118,  633,    5,  369,  367,    2,
 /*   300 */   382,   74,   73,  124,   85,  167,  132,  167,  242,  396,
 /*   310 */   391,  125,  372,  134,  341,  123,  145,  131,  203,  195,
 /*   320 */   160,  197,  108,  214,  174,  138,  316,   92,  352,  107,
 /*   330 */   353,  156,  382,  165,  383,  265,  389,  180,  132,  220,
 /*   340 */    86,  396,  391,  128,  372,  134,  343,  116,  158,  171,
 /*   350 */   179,    8,  186,  224,   17,   18,  199,  103,  104,   27,
 /*   360 */    91,   34,  260,   93,   51,  136,    4,   24,  382,  165,
 /*   370 */   390,   62,   57,   60,  132,    1,    6,  396,  391,  125,
 /*   380 */   372,  134,  341,  123,  145,  131,  203,  195,  160,  197,
 /*   390 */   108,  214,  174,  138,  316,   25,  352,  107,  353,  156,
 /*   400 */   382,    3,  383,  266,  389,  180,  132,  220,  243,  396,
 /*   410 */   391,  128,  372,  134,  337,  116,  158,  171,  179,    8,
 /*   420 */   186,  224,   17,   18,  199,  103,  104,   28,  182,   34,
 /*   430 */    95,  157,  363,  136,  314,   68,  382,   21,   67,  305,
 /*   440 */    41,   60,  132,  251,   45,  396,  391,  125,  372,  134,
 /*   450 */   341,  123,  145,  131,  203,  195,  160,  197,  108,  214,
 /*   460 */   174,  138,  316,    9,  352,  107,  353,  156,  382,  257,
 /*   470 */   383,  255,  389,  180,  132,  220,  258,  396,  391,  128,
 /*   480 */   372,  134,  330,  116,  158,  171,  179,    8,  186,  224,
 /*   490 */    17,   18,  199,  103,  104,   26,  111,   34,  259,  262,
 /*   500 */    22,  141,   63,  268,  382,  294,  270,  114,  139,   46,
 /*   510 */   132,   23,  178,  396,  391,  125,  372,  134,  341,  123,
 /*   520 */   145,  131,  203,  195,  160,  197,  108,  214,  174,  138,
 /*   530 */   316,  117,  352,  107,  353,  156,  254,   12,  383,  388,
 /*   540 */   389,  180,  132,  220,  306,  396,  391,  128,  274,   42,
 /*   550 */   121,  119,  158,  171,  179,    8,  186,  224,   17,   18,
 /*   560 */   199,  103,  104,  187,   31,   34,  279,  191,  281,  381,
 /*   570 */   115,  194,  382,  288,   69,   66,  334,   20,  132,   58,
 /*   580 */   385,  396,  391,  125,  372,  134,  341,  123,  145,  131,
 /*   590 */   203,  195,  160,  197,  108,  214,  174,  138,  316,    7,
 /*   600 */   352,  107,  353,  156,  170,  253,  361,  180,  389,  220,
 /*   610 */   132,  206,   59,  396,  391,  128,  121,  308,  158,  171,
 /*   620 */   179,    8,  186,  224,   17,   18,  199,  103,  104,  392,
 /*   630 */    47,   34,  394,  393,   64,  395,  398,  310,  382,  401,
 /*   640 */    56,  120,  402,  399,  132,   30,   90,  396,  391,  125,
 /*   650 */   372,  134,  341,  123,  145,  131,  203,  195,  160,  197,
 /*   660 */   108,  214,  174,  138,  316,   19,  352,  107,  353,  156,
 /*   670 */    94,  252,  361,  180,  389,  220,  239,  236,  237,  238,
 /*   680 */   233,  313,  240,  116,  158,  171,  179,    8,  186,  224,
 /*   690 */    17,   18,  199,  103,  104,  634,  634,   34,  634,  634,
 /*   700 */   634,  634,  634,  634,  382,  634,  634,  634,  634,  634,
 /*   710 */   132,  634,  634,  396,  391,  125,  372,  134,  341,  123,
 /*   720 */   145,  131,  203,  195,  160,  197,  108,  214,  174,  138,
 /*   730 */   316,  634,  352,  107,  353,  156,  312,  634,  383,  386,
 /*   740 */   389,  180,  132,  220,  634,  396,  391,  128,  634,  634,
 /*   750 */   121,  634,  158,  171,  179,    8,  186,  224,   17,   18,
 /*   760 */   199,  103,  104,  634,  634,   34,  634,  634,  634,  634,
 /*   770 */   634,  634,  382,  634,  634,  634,  634,  634,  132,  634,
 /*   780 */   634,  396,  391,  125,  372,  134,  341,  123,  145,  131,
 /*   790 */   203,  195,  160,  197,  108,  214,  174,  138,  316,  634,
 /*   800 */   352,  107,  353,  156,  634,  370,  361,  180,  389,  220,
 /*   810 */   634,  634,  634,  634,  634,  634,  121,  634,  158,  171,
 /*   820 */   179,    8,  186,  224,   17,   18,  199,  103,  104,  634,
 /*   830 */   634,   34,  634,  634,  634,  634,  634,  634,  382,  634,
 /*   840 */   634,  634,  634,  634,  132,  634,  634,  396,  391,  125,
 /*   850 */   372,  134,  341,  123,  145,  131,  203,  195,  160,  197,
 /*   860 */   108,  214,  174,  138,  316,  634,  352,  107,  353,  156,
 /*   870 */   634,  371,  361,  403,  389,   14,  634,  634,  221,   29,
 /*   880 */   250,  102,  101,  634,  315,  153,  362,  634,  223,  354,
 /*   890 */   375,   99,  634,   35,  634,  110,  380,  378,  377,  376,
 /*   900 */   374,   83,   76,   75,   80,   78,   77,  382,  634,  634,
 /*   910 */   634,  634,  634,  132,  634,  634,  396,  391,  128,  372,
 /*   920 */   134,  341,  123,  145,  131,  203,  195,  160,  197,  109,
 /*   930 */   227,  292,  291,  290,  289,  287,  283,  282,  284,  285,
 /*   940 */   286,  634,  634,  405,   43,   50,  209,  210,  212,   36,
 /*   950 */    49,  404,  406,  235,  403,  246,   14,  634,  634,  221,
 /*   960 */    29,  250,  102,  101,  634,  315,  153,  362,  311,  223,
 /*   970 */   354,  634,   99,  634,   35,  634,  110,  380,  378,  377,
 /*   980 */   376,  374,   83,   76,   75,   80,   78,   77,  382,  634,
 /*   990 */   634,  634,  634,  634,  132,  634,  634,  396,  391,  128,
 /*  1000 */   372,  134,  341,  123,  145,  131,  203,  195,  160,  234,
 /*  1010 */   634,  227,  634,  634,  634,  634,  634,  634,  634,  634,
 /*  1020 */   634,  634,  634,  634,  405,   43,   50,  209,  210,  212,
 /*  1030 */    36,   49,  404,  406,  235,  403,  246,   14,  634,  634,
 /*  1040 */   221,   29,  250,  102,  101,  634,  315,  153,  362,  360,
 /*  1050 */   223,  354,  634,   99,  634,   35,  634,  110,  380,  378,
 /*  1060 */   377,  376,  374,   83,   76,   75,   80,   78,   77,  382,
 /*  1070 */   634,  634,  634,  634,  634,  132,  634,  634,  396,  391,
 /*  1080 */   128,  372,  134,  341,  123,  145,  131,  203,  195,  169,
 /*  1090 */   382,  634,  227,  634,  634,  634,  132,  634,  634,  396,
 /*  1100 */   391,  128,  372,  134,  366,  405,   43,   50,  209,  210,
 /*  1110 */   212,   36,   49,  404,  406,  235,  403,  246,   14,  634,
 /*  1120 */   634,  221,   29,  250,  102,  101,  634,  315,  153,  362,
 /*  1130 */   379,  223,  354,  634,   99,  634,   35,  634,  110,  380,
 /*  1140 */   378,  377,  376,  374,   83,   76,   75,   80,   78,   77,
 /*  1150 */   382,  634,  634,  634,  634,  634,  132,  634,  634,  396,
 /*  1160 */   391,  128,  372,  134,  341,  123,  145,  131,  203,  159,
 /*  1170 */   382,  634,  634,  227,  634,  634,  132,  634,  634,  396,
 /*  1180 */   391,  128,  372,  134,  341,  126,  405,   43,   50,  209,
 /*  1190 */   210,  212,   36,   49,  404,  406,  235,  634,  246,  408,
 /*  1200 */   403,  634,   14,  634,  634,  221,   29,  250,  102,  101,
 /*  1210 */   634,  315,  153,  362,  634,  223,  354,  634,   99,  634,
 /*  1220 */    35,  634,  110,  380,  378,  377,  376,  374,   83,   76,
 /*  1230 */    75,   80,   78,   77,  382,  634,  634,  634,  634,  634,
 /*  1240 */   132,  634,  634,  396,  391,  128,  372,  134,  341,  123,
 /*  1250 */   145,  131,  196,  382,  634,  634,  634,  227,  634,  132,
 /*  1260 */   634,  634,  396,  391,  128,  372,  134,  341,  123,  146,
 /*  1270 */   405,   43,   50,  209,  210,  212,   36,   49,  404,  406,
 /*  1280 */   235,  403,  246,   14,  634,  634,  221,   29,  250,  102,
 /*  1290 */   101,  634,  315,  153,  362,  307,  223,  354,  634,   99,
 /*  1300 */   634,   35,  634,  110,  380,  378,  377,  376,  374,   83,
 /*  1310 */    76,   75,   80,   78,   77,  382,  634,  634,  634,  634,
 /*  1320 */   634,  132,  634,  634,  396,  391,  128,  372,  134,  341,
 /*  1330 */   123,  145,  130,  382,  634,  634,  634,  634,  227,  132,
 /*  1340 */   634,  634,  396,  391,  128,  372,  134,  341,  123,  137,
 /*  1350 */   634,  405,   43,   50,  209,  210,  212,   36,   49,  404,
 /*  1360 */   406,  235,  403,  246,   14,  634,  634,  221,   29,  250,
 /*  1370 */   248,  247,  634,  315,  153,  362,  634,  223,  634,  634,
 /*  1380 */   634,  634,   35,  634,  110,  380,  378,  377,  376,  374,
 /*  1390 */    83,   76,   75,   80,   78,   77,  382,  634,  634,  634,
 /*  1400 */   634,  634,  132,  634,  634,  396,  391,  128,  372,  134,
 /*  1410 */   341,  123,  142,  634,  382,  634,  634,  634,  634,  227,
 /*  1420 */   132,  634,  634,  396,  391,  128,  372,  134,  341,  122,
 /*  1430 */   634,  634,  405,   43,   50,  209,  210,  212,   36,   49,
 /*  1440 */   404,  406,  235,  403,  246,   14,  634,  634,  221,   29,
 /*  1450 */   250,  248,  247,  634,  315,  153,  373,  634,  223,  634,
 /*  1460 */   634,  634,  634,   35,  634,  110,  380,  378,  377,  376,
 /*  1470 */   374,   83,   76,   75,   80,   78,   77,  634,   40,  382,
 /*  1480 */   634,  634,  634,  634,  634,  132,  634,  317,  396,  391,
 /*  1490 */   128,  372,  134,  364,  634,  228,   29,  250,  248,  247,
 /*  1500 */   227,  634,  634,  634,  634,   90,  634,  634,  634,  180,
 /*  1510 */   634,  220,  110,  405,   43,   50,  209,  210,  212,   36,
 /*  1520 */    49,  404,  406,  235,  634,  246,  318,  319,  320,  321,
 /*  1530 */   322,  323,  324,  325,  326,  327,  328,  329,  634,  634,
 /*  1540 */   382,  634,  180,  634,  220,  349,  132,  365,  342,  396,
 /*  1550 */   391,  125,  372,  134,  341,  123,  145,  131,  203,  195,
 /*  1560 */   160,  197,  108,  214,  174,  138,  331,  105,  348,  634,
 /*  1570 */   634,  634,  245,  382,  634,  634,  634,  150,  349,  132,
 /*  1580 */   244,  342,  396,  391,  125,  372,  134,  341,  123,  145,
 /*  1590 */   131,  203,  195,  160,  197,  108,  214,  174,  138,  331,
 /*  1600 */   106,  348,  634,  180,  634,  220,  382,  634,  634,  634,
 /*  1610 */   634,  152,  132,  634,  634,  396,  391,  128,  372,  134,
 /*  1620 */   359,  634,  634,  634,  634,  634,  634,  634,  634,  634,
 /*  1630 */   634,  634,  634,  634,  382,  634,  634,  634,  634,  349,
 /*  1640 */   132,  244,  342,  396,  391,  125,  372,  134,  341,  123,
 /*  1650 */   145,  131,  203,  195,  160,  197,  108,  214,  174,  138,
 /*  1660 */   331,  106,  348,  180,  634,  220,  634,  382,  634,  634,
 /*  1670 */   634,  634,  151,  132,  634,  634,  396,  391,  128,  372,
 /*  1680 */   134,  341,  123,  145,  131,  203,  195,  160,  197,  108,
 /*  1690 */   214,  211,  634,  180,  382,  220,  634,  634,  634,  349,
 /*  1700 */   132,  365,  342,  396,  391,  125,  372,  134,  341,  123,
 /*  1710 */   145,  131,  203,  195,  160,  197,  108,  214,  174,  138,
 /*  1720 */   331,  106,  348,  634,  382,  634,  173,  634,  634,  349,
 /*  1730 */   132,  365,  342,  396,  391,  125,  372,  134,  341,  123,
 /*  1740 */   145,  131,  203,  195,  160,  197,  108,  214,  174,  138,
 /*  1750 */   331,  106,  348,  180,  634,  220,  181,  634,  634,  634,
 /*  1760 */   382,  634,  634,  634,  634,  634,  132,  634,  634,  396,
 /*  1770 */   391,  128,  372,  134,  347,  634,  634,  634,  634,  634,
 /*  1780 */   634,  634,  634,  180,  382,  220,  634,  634,  634,  349,
 /*  1790 */   132,  365,  342,  396,  391,  125,  372,  134,  341,  123,
 /*  1800 */   145,  131,  203,  195,  160,  197,  108,  214,  174,  138,
 /*  1810 */   331,  106,  348,  634,  382,  634,  201,  634,  634,  349,
 /*  1820 */   132,  365,  342,  396,  391,  125,  372,  134,  341,  123,
 /*  1830 */   145,  131,  203,  195,  160,  197,  108,  214,  174,  138,
 /*  1840 */   331,  106,  348,  180,  634,  220,  164,  382,  634,  634,
 /*  1850 */   634,  634,  634,  132,  634,  634,  396,  391,  128,  372,
 /*  1860 */   134,  341,  123,  145,  131,  203,  195,  160,  197,  108,
 /*  1870 */   222,  177,  634,  180,  382,  220,  634,  634,  634,  349,
 /*  1880 */   132,  351,  342,  396,  391,  125,  372,  134,  341,  123,
 /*  1890 */   145,  131,  203,  195,  160,  197,  108,  214,  174,  138,
 /*  1900 */   331,  106,  348,  634,  382,  634,  634,  634,  634,  271,
 /*  1910 */   132,  634,  342,  396,  391,  125,  372,  134,  341,  123,
 /*  1920 */   145,  131,  203,  195,  160,  197,  108,  214,  174,  138,
 /*  1930 */   331,  162,  348,  193,  634,  180,  634,  220,  634,  634,
 /*  1940 */   382,  634,  634,  634,  634,  634,  132,  634,  634,  396,
 /*  1950 */   391,  128,  372,  134,  332,  634,  634,  634,  634,  634,
 /*  1960 */   634,  634,  634,  190,  634,  180,  382,  220,  634,  634,
 /*  1970 */   634,  271,  132,  634,  342,  396,  391,  125,  372,  134,
 /*  1980 */   341,  123,  145,  131,  203,  195,  160,  197,  108,  214,
 /*  1990 */   174,  138,  331,  162,  348,  634,  382,  634,  634,  634,
 /*  2000 */   634,  271,  132,  634,  342,  396,  391,  125,  372,  134,
 /*  2010 */   341,  123,  145,  131,  203,  195,  160,  197,  108,  214,
 /*  2020 */   174,  138,  331,  162,  348,  180,  634,  220,  634,  634,
 /*  2030 */   382,  634,  634,  634,  634,  634,  132,  634,  634,  396,
 /*  2040 */   391,  128,  372,  134,  335,  634,  634,  634,  634,  634,
 /*  2050 */   634,  634,  634,  225,  634,  180,  382,  220,  634,  634,
 /*  2060 */   634,  349,  132,  161,  342,  396,  391,  125,  372,  134,
 /*  2070 */   341,  123,  145,  131,  203,  195,  160,  197,  108,  214,
 /*  2080 */   174,  138,  331,  106,  348,  634,  382,  634,  634,  634,
 /*  2090 */   634,  271,  132,  634,  342,  396,  391,  125,  372,  134,
 /*  2100 */   341,  123,  145,  131,  203,  195,  160,  197,  108,  214,
 /*  2110 */   174,  138,  331,  162,  348,  180,  634,  220,  634,  634,
 /*  2120 */   634,  634,  382,  634,  634,  634,  634,  634,  132,  634,
 /*  2130 */   634,  396,  391,  128,  372,  134,  344,  634,  634,  634,
 /*  2140 */   634,  634,  634,  634,  634,  180,  382,  220,  634,  634,
 /*  2150 */   634,  349,  132,  189,  342,  396,  391,  125,  372,  134,
 /*  2160 */   341,  123,  145,  131,  203,  195,  160,  197,  108,  214,
 /*  2170 */   174,  138,  331,  106,  348,  634,  382,  634,  634,  634,
 /*  2180 */   634,  349,  132,  350,  342,  396,  391,  125,  372,  134,
 /*  2190 */   341,  123,  145,  131,  203,  195,  160,  197,  108,  214,
 /*  2200 */   174,  138,  331,  106,  348,  180,  634,  220,  634,  634,
 /*  2210 */   184,  183,  634,  634,  634,  634,  634,  634,  634,  634,
 /*  2220 */   634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
 /*  2230 */   634,  634,  634,  634,  634,  180,  382,  220,  634,  634,
 /*  2240 */   634,  634,  132,  634,  275,  396,  391,  125,  372,  134,
 /*  2250 */   341,  123,  145,  131,  203,  195,  160,  197,  108,  214,
 /*  2260 */   174,  138,  331,  634,  188,  634,  382,  634,  634,  634,
 /*  2270 */   634,  216,  132,  634,  342,  396,  391,  125,  372,  134,
 /*  2280 */   341,  123,  145,  131,  203,  195,  160,  197,  108,  214,
 /*  2290 */   174,  138,  331,  162,  348,  180,  634,  220,  634,  634,
 /*  2300 */   634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
 /*  2310 */   634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
 /*  2320 */   634,  634,  634,  634,  634,  180,  382,  220,  634,  634,
 /*  2330 */   634,  215,  132,  634,  342,  396,  391,  125,  372,  134,
 /*  2340 */   341,  123,  145,  131,  203,  195,  160,  197,  108,  214,
 /*  2350 */   174,  138,  331,  162,  348,  634,  382,  634,  634,  634,
 /*  2360 */   634,  368,  132,  634,  342,  396,  391,  125,  372,  134,
 /*  2370 */   341,  123,  145,  131,  203,  195,  160,  197,  108,  214,
 /*  2380 */   174,  138,  331,  162,  348,  180,  634,  220,  634,  634,
 /*  2390 */   634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
 /*  2400 */   634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
 /*  2410 */   634,  634,  634,  634,  634,  634,  382,  634,  634,  634,
 /*  2420 */   634,  213,  132,  634,  342,  396,  391,  125,  372,  134,
 /*  2430 */   341,  123,  145,  131,  203,  195,  160,  197,  108,  214,
 /*  2440 */   174,  138,  331,  162,  348,  634,  180,  634,  220,  634,
 /*  2450 */   634,  634,  634,  205,  198,  634,  634,  634,  634,  634,
 /*  2460 */   634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
 /*  2470 */   634,  634,  634,  634,  634,  634,  634,  382,  634,  634,
 /*  2480 */   634,  634,  634,  132,  634,  202,  396,  391,  128,  372,
 /*  2490 */   134,  341,  123,  145,  131,  203,  195,  160,  197,  108,
 /*  2500 */   214,  174,  138,  331,  228,   29,  250,  248,  247,  634,
 /*  2510 */   315,  153,   39,  634,  223,  634,  634,   98,  180,   35,
 /*  2520 */   220,  110,  380,  378,  377,  376,  374,   83,   76,   75,
 /*  2530 */    80,   78,   77,  634,  634,  634,  634,  634,  634,  634,
 /*  2540 */   634,  634,  634,  634,  634,  634,  634,  634,  634,  382,
 /*  2550 */   634,  634,  634,  634,  634,  132,  227,  277,  396,  391,
 /*  2560 */   125,  372,  134,  341,  123,  145,  131,  203,  195,  160,
 /*  2570 */   197,  108,  214,  174,  138,  331,  634,  278,  228,   29,
 /*  2580 */   250,  248,  247,  634,  315,  153,   39,  634,  223,  634,
 /*  2590 */   634,  100,  180,   35,  220,  110,  380,  378,  377,  376,
 /*  2600 */   374,   83,   76,   75,   80,   78,   77,  634,  634,  634,
 /*  2610 */   634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
 /*  2620 */   634,  634,  634,  382,  634,  634,  634,  634,  634,  132,
 /*  2630 */   227,  342,  396,  391,  128,  372,  134,  341,  123,  145,
 /*  2640 */   131,  203,  195,  160,  197,  108,  214,  174,  138,  331,
 /*  2650 */   147,  228,   29,  250,  248,  247,  634,  315,  153,   39,
 /*  2660 */   634,  223,  400,  192,  634,  185,   35,  634,  110,  380,
 /*  2670 */   378,  377,  376,  374,   83,   76,   75,   80,   78,   77,
 /*  2680 */   634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
 /*  2690 */   634,  634,  634,  297,  634,  634,  295,  298,  299,  300,
 /*  2700 */   634,  634,  634,  227,  634,  634,  634,  634,  634,  634,
 /*  2710 */   228,   29,  250,  248,  247,  634,  315,  153,   39,  634,
 /*  2720 */   223,  634,  634,  634,  634,   35,  273,  110,  380,  378,
 /*  2730 */   377,  376,  374,   83,   76,   75,   80,   78,   77,  180,
 /*  2740 */   634,  220,  634,  634,  634,  634,  634,  634,  634,  634,
 /*  2750 */   634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
 /*  2760 */   634,  634,  227,  634,  634,  634,  634,  634,  634,  634,
 /*  2770 */   382,  634,  634,  634,  634,  634,  132,  634,  339,  396,
 /*  2780 */   391,  125,  372,  134,  341,  123,  145,  131,  203,  195,
 /*  2790 */   160,  197,  108,  214,  174,  138,  331,  634,  340,  228,
 /*  2800 */    29,  250,  248,  247,  634,  315,  153,   39,  634,  223,
 /*  2810 */   397,  634,  634,  634,   35,  634,  110,  380,  378,  377,
 /*  2820 */   376,  374,   83,   76,   75,   80,   78,   77,  180,  634,
 /*  2830 */   220,  634,  634,  634,  634,  634,  634,  634,  634,  634,
 /*  2840 */   634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
 /*  2850 */   634,  227,  634,  634,  634,  634,  634,  634,  634,  382,
 /*  2860 */   634,  634,  634,  634,  634,  132,  634,  345,  396,  391,
 /*  2870 */   125,  372,  134,  341,  123,  145,  131,  203,  195,  160,
 /*  2880 */   197,  108,  214,  174,  138,  331,  634,  346,  228,   29,
 /*  2890 */   250,  248,  247,  634,  315,  153,   39,  634,  223,  634,
 /*  2900 */   634,  634,  634,   35,  634,  110,  380,  378,  377,  376,
 /*  2910 */   374,   83,   76,   75,   80,   78,   77,  634,  634,  634,
 /*  2920 */   634,  634,  634,  634,  634,  634,  634,  634,   41,  634,
 /*  2930 */   634,  634,  634,  634,  634,  634,  634,  317,  634,  634,
 /*  2940 */   227,  634,  634,  634,  634,  634,  634,  228,   29,  250,
 /*  2950 */   248,  247,  634,  634,  153,   39,  333,  223,  634,  634,
 /*  2960 */   634,  180,   35,  220,  110,  380,  378,  377,  376,  374,
 /*  2970 */    83,   76,   75,   80,   78,   77,  318,  319,  320,  321,
 /*  2980 */   322,  323,  324,  325,  326,  327,  328,  329,  634,  634,
 /*  2990 */   634,  634,  382,  634,  634,  634,  634,  634,  132,  227,
 /*  3000 */   208,  396,  391,  128,  372,  134,  341,  123,  145,  131,
 /*  3010 */   203,  195,  160,  197,  108,  214,  174,  138,  331,  228,
 /*  3020 */    29,  250,  248,  247,  634,  634,  153,   39,  634,  223,
 /*  3030 */   634,  634,  634,  634,   35,  175,  110,  380,  378,  377,
 /*  3040 */   376,  374,   83,   76,   75,   80,   78,   77,  634,  634,
 /*  3050 */   634,  180,  634,  220,  634,  634,  634,  634,  634,  634,
 /*  3060 */   634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
 /*  3070 */   634,  227,  634,  634,  634,  634,  634,  634,  634,  634,
 /*  3080 */   634,  634,  382,  634,  634,  634,  634,  634,  132,  634,
 /*  3090 */   172,  396,  391,  128,  372,  134,  341,  123,  145,  131,
 /*  3100 */   203,  195,  160,  197,  108,  214,  174,  138,  331,  228,
 /*  3110 */    29,  250,  248,  247,  634,  634,  153,   39,  634,   87,
 /*  3120 */   634,  634,  112,  634,   35,  634,  110,  380,  378,  377,
 /*  3130 */   376,  374,   83,   76,   75,   80,   78,   77,  634,  634,
 /*  3140 */   634,  180,  634,  220,  634,  634,  634,  634,  634,  634,
 /*  3150 */   634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
 /*  3160 */   634,  227,  634,  634,  634,  634,  634,  634,  634,  634,
 /*  3170 */   634,  634,  382,  634,  634,  634,  634,  634,  132,  634,
 /*  3180 */   148,  396,  391,  128,  372,  134,  341,  123,  145,  131,
 /*  3190 */   203,  195,  160,  197,  108,  214,  174,  138,  331,  180,
 /*  3200 */   634,  220,  634,  634,  634,  634,  634,  634,  634,  634,
 /*  3210 */   634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
 /*  3220 */   634,  634,  634,  634,  634,  634,  180,  634,  220,  634,
 /*  3230 */   382,  634,  634,  634,  634,  634,  132,  634,  218,  396,
 /*  3240 */   391,  128,  372,  134,  341,  123,  145,  131,  203,  195,
 /*  3250 */   160,  197,  108,  214,  174,  138,  331,  382,  634,  634,
 /*  3260 */   634,  634,  180,  132,  220,  336,  396,  391,  128,  372,
 /*  3270 */   134,  341,  123,  145,  131,  203,  195,  160,  197,  108,
 /*  3280 */   214,  174,  138,  331,  634,  634,  634,  634,  634,  180,
 /*  3290 */   634,  220,  634,  382,  634,  634,  634,  634,  634,  132,
 /*  3300 */   634,  338,  396,  391,  128,  372,  134,  341,  123,  145,
 /*  3310 */   131,  203,  195,  160,  197,  108,  214,  174,  138,  331,
 /*  3320 */   382,  634,  634,  634,  634,  634,  132,  634,  217,  396,
 /*  3330 */   391,  128,  372,  134,  341,  123,  145,  131,  203,  195,
 /*  3340 */   160,  197,  108,  214,  174,  138,  331,  180,  634,  220,
 /*  3350 */   634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
 /*  3360 */   634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
 /*  3370 */   634,  634,  634,  634,  634,  634,  634,  634,  382,  180,
 /*  3380 */   634,  220,  634,  634,  132,  634,  229,  396,  391,  128,
 /*  3390 */   372,  134,  341,  123,  145,  131,  203,  195,  160,  197,
 /*  3400 */   108,  214,  174,  138,  331,  634,  180,  634,  220,  634,
 /*  3410 */   382,  634,  634,  634,  634,  634,  132,  634,  226,  396,
 /*  3420 */   391,  128,  372,  134,  341,  123,  145,  131,  203,  195,
 /*  3430 */   160,  197,  108,  214,  174,  138,  331,  382,  634,  180,
 /*  3440 */   634,  220,  634,  132,  634,  293,  396,  391,  128,  372,
 /*  3450 */   134,  341,  123,  145,  131,  203,  195,  160,  197,  108,
 /*  3460 */   214,  174,  138,  331,  634,  634,  634,  634,  634,  180,
 /*  3470 */   382,  220,  634,  634,  634,  634,  132,  634,  219,  396,
 /*  3480 */   391,  128,  372,  134,  341,  123,  145,  131,  203,  195,
 /*  3490 */   160,  197,  108,  214,  174,  138,  331,  634,  634,  634,
 /*  3500 */   382,  634,  634,  634,  634,  634,  132,  634,  149,  396,
 /*  3510 */   391,  128,  372,  134,  341,  123,  145,  131,  203,  195,
 /*  3520 */   160,  197,  108,  214,  174,  138,  331,  180,  634,  220,
 /*  3530 */   634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
 /*  3540 */   634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
 /*  3550 */   634,  634,  634,  634,  634,  634,  634,  634,  382,  180,
 /*  3560 */   634,  220,  634,  634,  132,  634,  207,  396,  391,  128,
 /*  3570 */   372,  134,  341,  123,  145,  131,  203,  195,  160,  197,
 /*  3580 */   108,  214,  174,  138,  331,  634,  180,  634,  220,  634,
 /*  3590 */   382,  634,  634,  634,  634,  634,  132,  634,  231,  396,
 /*  3600 */   391,  128,  372,  134,  341,  123,  145,  131,  203,  195,
 /*  3610 */   160,  197,  108,  214,  174,  138,  331,  382,  634,  180,
 /*  3620 */   634,  220,  634,  132,  634,  345,  396,  391,  128,  372,
 /*  3630 */   134,  341,  123,  145,  131,  203,  195,  160,  197,  108,
 /*  3640 */   214,  174,  138,  331,  634,  634,  634,  634,  634,  180,
 /*  3650 */   382,  220,  634,  634,  634,  634,  132,  634,  232,  396,
 /*  3660 */   391,  128,  372,  134,  341,  123,  145,  131,  203,  195,
 /*  3670 */   160,  197,  108,  214,  174,  138,  331,  634,  634,  634,
 /*  3680 */   382,  634,  634,  634,  634,  634,  132,  634,  200,  396,
 /*  3690 */   391,  128,  372,  134,  341,  123,  145,  131,  203,  195,
 /*  3700 */   160,  197,  108,  214,  174,  138,  331,  228,   29,  250,
 /*  3710 */   248,  247,  634,  634,  153,   39,  634,  223,  634,  634,
 /*  3720 */   634,  634,   35,  634,  110,  380,  378,  377,  376,  374,
 /*  3730 */    83,   76,   75,   80,   78,   77,  634,  634,  634,  634,
 /*  3740 */   634,  634,  634,  634,  634,  634,  634,   41,  634,  634,
 /*  3750 */   634,  634,   61,  634,  634,  634,  317,  634,  634,  227,
 /*  3760 */   634,  634,  634,  634,  634,  634,  228,   29,  250,  248,
 /*  3770 */   247,  634,  634,  634,  634,  634,  634,  634,  634,  634,
 /*  3780 */   634,  634,  634,  110,  380,  378,  377,  376,  374,   83,
 /*  3790 */    76,   75,   80,   78,   77,  318,  319,  320,  321,  322,
 /*  3800 */   323,  324,  325,  326,  327,  328,  329,  634,  634,  634,
 /*  3810 */   634,  634,  634,  634,  634,  634,  634,  634,   48,
};
static const YYCODETYPE yy_lookahead[] = {
 /*     0 */    88,   89,   90,   91,   58,   34,   35,   36,   37,   16,
 /*    10 */    98,   18,  100,  101,  102,  103,  104,  105,  106,  107,
 /*    20 */   108,  109,  110,    9,   10,  113,   38,   39,   40,   15,
 /*    30 */   118,   17,  120,   19,   13,  123,  124,   16,  126,   85,
 /*    40 */    86,  129,  130,  131,  132,  133,  134,  135,  136,  137,
 /*    50 */   138,  139,  140,  141,  142,  143,  144,  145,  146,   93,
 /*    60 */   148,  149,  150,  151,   92,  153,  154,   89,  156,   91,
 /*    70 */   116,   85,    6,    7,    8,    9,   10,   99,  100,  101,
 /*    80 */   102,  103,  104,  105,  106,  107,  108,  109,  110,   23,
 /*    90 */   120,  113,    8,    8,    9,   10,  126,   12,  120,  129,
 /*   100 */   130,  131,   93,  117,  126,   21,  126,  129,  130,  131,
 /*   110 */   132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
 /*   120 */   142,  143,  144,  145,  146,   85,  148,  149,  150,  151,
 /*   130 */     9,   10,  154,  155,  156,   89,   15,   91,   17,   85,
 /*   140 */    19,    8,    9,   10,   98,   12,  100,  101,  102,  103,
 /*   150 */   104,  105,  106,  107,  108,  109,  110,  117,   11,  113,
 /*   160 */     8,    9,   10,   16,   11,   85,  120,   20,    4,    5,
 /*   170 */    17,  117,  126,   20,   85,  129,  130,  131,  132,  133,
 /*   180 */   134,  135,  136,  137,  138,  139,  140,  141,  142,  143,
 /*   190 */   144,  145,  146,   85,  148,  149,  150,  151,  120,  153,
 /*   200 */   154,   89,  156,   91,  126,  116,   14,  129,  130,  131,
 /*   210 */     8,   99,  100,  101,  102,  103,  104,  105,  106,  107,
 /*   220 */   108,  109,  110,   21,  116,  113,  111,  112,   11,   82,
 /*   230 */   111,  112,  120,    7,    8,    9,   10,   20,  126,   85,
 /*   240 */    86,  129,  130,  131,  132,  133,  134,  135,  136,  137,
 /*   250 */   138,  139,  140,  141,  142,  143,  144,  145,  146,    7,
 /*   260 */   148,  149,  150,  151,   12,   13,  154,  155,  156,   89,
 /*   270 */   116,   91,   85,   21,   85,   86,   85,   86,   85,   99,
 /*   280 */   100,  101,  102,  103,  104,  105,  106,  107,  108,  109,
 /*   290 */   110,    4,    5,  113,   99,  114,  115,   29,   30,  115,
 /*   300 */   120,   31,   32,  116,  119,  116,  126,  116,   18,  129,
 /*   310 */   130,  131,  132,  133,  134,  135,  136,  137,  138,  139,
 /*   320 */   140,  141,  142,  143,  144,  145,  146,    7,  148,  149,
 /*   330 */   150,  151,  120,   13,  154,  155,  156,   89,  126,   91,
 /*   340 */   119,  129,  130,  131,  132,  133,  134,   99,  100,  101,
 /*   350 */   102,  103,  104,  105,  106,  107,  108,  109,  110,    7,
 /*   360 */    16,  113,   18,    7,   11,   13,  115,   17,  120,   13,
 /*   370 */    17,   57,   58,   21,  126,  115,  115,  129,  130,  131,
 /*   380 */   132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
 /*   390 */   142,  143,  144,  145,  146,   17,  148,  149,  150,  151,
 /*   400 */   120,  115,  154,  155,  156,   89,  126,   91,   18,  129,
 /*   410 */   130,  131,  132,  133,  134,   99,  100,  101,  102,  103,
 /*   420 */   104,  105,  106,  107,  108,  109,  110,    7,    6,  113,
 /*   430 */     7,   18,   17,   13,    6,   42,  120,    7,   43,   17,
 /*   440 */    11,   21,  126,   18,    7,  129,  130,  131,  132,  133,
 /*   450 */   134,  135,  136,  137,  138,  139,  140,  141,  142,  143,
 /*   460 */   144,  145,  146,   18,  148,  149,  150,  151,  120,    8,
 /*   470 */   154,  155,  156,   89,  126,   91,   18,  129,  130,  131,
 /*   480 */   132,  133,  134,   99,  100,  101,  102,  103,  104,  105,
 /*   490 */   106,  107,  108,  109,  110,    7,   11,  113,   18,   18,
 /*   500 */     7,   13,   56,   12,  120,   22,    6,   18,   18,   21,
 /*   510 */   126,    7,   18,  129,  130,  131,  132,  133,  134,  135,
 /*   520 */   136,  137,  138,  139,  140,  141,  142,  143,  144,  145,
 /*   530 */   146,   14,  148,  149,  150,  151,  120,   18,  154,  155,
 /*   540 */   156,   89,  126,   91,   17,  129,  130,  131,   22,   11,
 /*   550 */    98,   14,  100,  101,  102,  103,  104,  105,  106,  107,
 /*   560 */   108,  109,  110,   71,    7,  113,   11,   18,   18,   17,
 /*   570 */    14,   18,  120,    6,   41,   44,   15,    7,  126,   16,
 /*   580 */    22,  129,  130,  131,  132,  133,  134,  135,  136,  137,
 /*   590 */   138,  139,  140,  141,  142,  143,  144,  145,  146,   18,
 /*   600 */   148,  149,  150,  151,  120,  153,  154,   89,  156,   91,
 /*   610 */   126,   18,   11,  129,  130,  131,   98,    6,  100,  101,
 /*   620 */   102,  103,  104,  105,  106,  107,  108,  109,  110,   16,
 /*   630 */    16,  113,   17,   16,   55,   17,   17,   17,  120,   17,
 /*   640 */    16,   14,   17,   22,  126,    7,   16,  129,  130,  131,
 /*   650 */   132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
 /*   660 */   142,  143,  144,  145,  146,    7,  148,  149,  150,  151,
 /*   670 */     7,  153,  154,   89,  156,   91,   22,   18,   18,   18,
 /*   680 */    18,    6,   18,   99,  100,  101,  102,  103,  104,  105,
 /*   690 */   106,  107,  108,  109,  110,  159,  159,  113,  159,  159,
 /*   700 */   159,  159,  159,  159,  120,  159,  159,  159,  159,  159,
 /*   710 */   126,  159,  159,  129,  130,  131,  132,  133,  134,  135,
 /*   720 */   136,  137,  138,  139,  140,  141,  142,  143,  144,  145,
 /*   730 */   146,  159,  148,  149,  150,  151,  120,  159,  154,  155,
 /*   740 */   156,   89,  126,   91,  159,  129,  130,  131,  159,  159,
 /*   750 */    98,  159,  100,  101,  102,  103,  104,  105,  106,  107,
 /*   760 */   108,  109,  110,  159,  159,  113,  159,  159,  159,  159,
 /*   770 */   159,  159,  120,  159,  159,  159,  159,  159,  126,  159,
 /*   780 */   159,  129,  130,  131,  132,  133,  134,  135,  136,  137,
 /*   790 */   138,  139,  140,  141,  142,  143,  144,  145,  146,  159,
 /*   800 */   148,  149,  150,  151,  159,  153,  154,   89,  156,   91,
 /*   810 */   159,  159,  159,  159,  159,  159,   98,  159,  100,  101,
 /*   820 */   102,  103,  104,  105,  106,  107,  108,  109,  110,  159,
 /*   830 */   159,  113,  159,  159,  159,  159,  159,  159,  120,  159,
 /*   840 */   159,  159,  159,  159,  126,  159,  159,  129,  130,  131,
 /*   850 */   132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
 /*   860 */   142,  143,  144,  145,  146,  159,  148,  149,  150,  151,
 /*   870 */   159,  153,  154,    1,  156,    3,  159,  159,    6,    7,
 /*   880 */     8,    9,   10,  159,   12,   13,   14,  159,   16,   17,
 /*   890 */    18,   19,  159,   21,  159,   23,   24,   25,   26,   27,
 /*   900 */    28,   29,   30,   31,   32,   33,   34,  120,  159,  159,
 /*   910 */   159,  159,  159,  126,  159,  159,  129,  130,  131,  132,
 /*   920 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*   930 */    58,   45,   46,   47,   48,   49,   50,   51,   52,   53,
 /*   940 */    54,  159,  159,   71,   72,   73,   74,   75,   76,   77,
 /*   950 */    78,   79,   80,   81,    1,   83,    3,  159,  159,    6,
 /*   960 */     7,    8,    9,   10,  159,   12,   13,   14,   15,   16,
 /*   970 */    17,  159,   19,  159,   21,  159,   23,   24,   25,   26,
 /*   980 */    27,   28,   29,   30,   31,   32,   33,   34,  120,  159,
 /*   990 */   159,  159,  159,  159,  126,  159,  159,  129,  130,  131,
 /*  1000 */   132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
 /*  1010 */   159,   58,  159,  159,  159,  159,  159,  159,  159,  159,
 /*  1020 */   159,  159,  159,  159,   71,   72,   73,   74,   75,   76,
 /*  1030 */    77,   78,   79,   80,   81,    1,   83,    3,  159,  159,
 /*  1040 */     6,    7,    8,    9,   10,  159,   12,   13,   14,   15,
 /*  1050 */    16,   17,  159,   19,  159,   21,  159,   23,   24,   25,
 /*  1060 */    26,   27,   28,   29,   30,   31,   32,   33,   34,  120,
 /*  1070 */   159,  159,  159,  159,  159,  126,  159,  159,  129,  130,
 /*  1080 */   131,  132,  133,  134,  135,  136,  137,  138,  139,  140,
 /*  1090 */   120,  159,   58,  159,  159,  159,  126,  159,  159,  129,
 /*  1100 */   130,  131,  132,  133,  134,   71,   72,   73,   74,   75,
 /*  1110 */    76,   77,   78,   79,   80,   81,    1,   83,    3,  159,
 /*  1120 */   159,    6,    7,    8,    9,   10,  159,   12,   13,   14,
 /*  1130 */    15,   16,   17,  159,   19,  159,   21,  159,   23,   24,
 /*  1140 */    25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
 /*  1150 */   120,  159,  159,  159,  159,  159,  126,  159,  159,  129,
 /*  1160 */   130,  131,  132,  133,  134,  135,  136,  137,  138,  139,
 /*  1170 */   120,  159,  159,   58,  159,  159,  126,  159,  159,  129,
 /*  1180 */   130,  131,  132,  133,  134,  135,   71,   72,   73,   74,
 /*  1190 */    75,   76,   77,   78,   79,   80,   81,  159,   83,    0,
 /*  1200 */     1,  159,    3,  159,  159,    6,    7,    8,    9,   10,
 /*  1210 */   159,   12,   13,   14,  159,   16,   17,  159,   19,  159,
 /*  1220 */    21,  159,   23,   24,   25,   26,   27,   28,   29,   30,
 /*  1230 */    31,   32,   33,   34,  120,  159,  159,  159,  159,  159,
 /*  1240 */   126,  159,  159,  129,  130,  131,  132,  133,  134,  135,
 /*  1250 */   136,  137,  138,  120,  159,  159,  159,   58,  159,  126,
 /*  1260 */   159,  159,  129,  130,  131,  132,  133,  134,  135,  136,
 /*  1270 */    71,   72,   73,   74,   75,   76,   77,   78,   79,   80,
 /*  1280 */    81,    1,   83,    3,  159,  159,    6,    7,    8,    9,
 /*  1290 */    10,  159,   12,   13,   14,   15,   16,   17,  159,   19,
 /*  1300 */   159,   21,  159,   23,   24,   25,   26,   27,   28,   29,
 /*  1310 */    30,   31,   32,   33,   34,  120,  159,  159,  159,  159,
 /*  1320 */   159,  126,  159,  159,  129,  130,  131,  132,  133,  134,
 /*  1330 */   135,  136,  137,  120,  159,  159,  159,  159,   58,  126,
 /*  1340 */   159,  159,  129,  130,  131,  132,  133,  134,  135,  136,
 /*  1350 */   159,   71,   72,   73,   74,   75,   76,   77,   78,   79,
 /*  1360 */    80,   81,    1,   83,    3,  159,  159,    6,    7,    8,
 /*  1370 */     9,   10,  159,   12,   13,   14,  159,   16,  159,  159,
 /*  1380 */   159,  159,   21,  159,   23,   24,   25,   26,   27,   28,
 /*  1390 */    29,   30,   31,   32,   33,   34,  120,  159,  159,  159,
 /*  1400 */   159,  159,  126,  159,  159,  129,  130,  131,  132,  133,
 /*  1410 */   134,  135,  136,  159,  120,  159,  159,  159,  159,   58,
 /*  1420 */   126,  159,  159,  129,  130,  131,  132,  133,  134,  135,
 /*  1430 */   159,  159,   71,   72,   73,   74,   75,   76,   77,   78,
 /*  1440 */    79,   80,   81,    1,   83,    3,  159,  159,    6,    7,
 /*  1450 */     8,    9,   10,  159,   12,   13,   14,  159,   16,  159,
 /*  1460 */   159,  159,  159,   21,  159,   23,   24,   25,   26,   27,
 /*  1470 */    28,   29,   30,   31,   32,   33,   34,  159,   11,  120,
 /*  1480 */   159,  159,  159,  159,  159,  126,  159,   20,  129,  130,
 /*  1490 */   131,  132,  133,  134,  159,    6,    7,    8,    9,   10,
 /*  1500 */    58,  159,  159,  159,  159,   16,  159,  159,  159,   89,
 /*  1510 */   159,   91,   23,   71,   72,   73,   74,   75,   76,   77,
 /*  1520 */    78,   79,   80,   81,  159,   83,   59,   60,   61,   62,
 /*  1530 */    63,   64,   65,   66,   67,   68,   69,   70,  159,  159,
 /*  1540 */   120,  159,   89,  159,   91,  125,  126,  127,  128,  129,
 /*  1550 */   130,  131,  132,  133,  134,  135,  136,  137,  138,  139,
 /*  1560 */   140,  141,  142,  143,  144,  145,  146,  147,  148,  159,
 /*  1570 */   159,  159,  152,  120,  159,  159,  159,  157,  125,  126,
 /*  1580 */   127,  128,  129,  130,  131,  132,  133,  134,  135,  136,
 /*  1590 */   137,  138,  139,  140,  141,  142,  143,  144,  145,  146,
 /*  1600 */   147,  148,  159,   89,  159,   91,  120,  159,  159,  159,
 /*  1610 */   159,  158,  126,  159,  159,  129,  130,  131,  132,  133,
 /*  1620 */   134,  159,  159,  159,  159,  159,  159,  159,  159,  159,
 /*  1630 */   159,  159,  159,  159,  120,  159,  159,  159,  159,  125,
 /*  1640 */   126,  127,  128,  129,  130,  131,  132,  133,  134,  135,
 /*  1650 */   136,  137,  138,  139,  140,  141,  142,  143,  144,  145,
 /*  1660 */   146,  147,  148,   89,  159,   91,  159,  120,  159,  159,
 /*  1670 */   159,  159,  158,  126,  159,  159,  129,  130,  131,  132,
 /*  1680 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*  1690 */   143,  144,  159,   89,  120,   91,  159,  159,  159,  125,
 /*  1700 */   126,  127,  128,  129,  130,  131,  132,  133,  134,  135,
 /*  1710 */   136,  137,  138,  139,  140,  141,  142,  143,  144,  145,
 /*  1720 */   146,  147,  148,  159,  120,  159,  152,  159,  159,  125,
 /*  1730 */   126,  127,  128,  129,  130,  131,  132,  133,  134,  135,
 /*  1740 */   136,  137,  138,  139,  140,  141,  142,  143,  144,  145,
 /*  1750 */   146,  147,  148,   89,  159,   91,  152,  159,  159,  159,
 /*  1760 */   120,  159,  159,  159,  159,  159,  126,  159,  159,  129,
 /*  1770 */   130,  131,  132,  133,  134,  159,  159,  159,  159,  159,
 /*  1780 */   159,  159,  159,   89,  120,   91,  159,  159,  159,  125,
 /*  1790 */   126,  127,  128,  129,  130,  131,  132,  133,  134,  135,
 /*  1800 */   136,  137,  138,  139,  140,  141,  142,  143,  144,  145,
 /*  1810 */   146,  147,  148,  159,  120,  159,  152,  159,  159,  125,
 /*  1820 */   126,  127,  128,  129,  130,  131,  132,  133,  134,  135,
 /*  1830 */   136,  137,  138,  139,  140,  141,  142,  143,  144,  145,
 /*  1840 */   146,  147,  148,   89,  159,   91,  152,  120,  159,  159,
 /*  1850 */   159,  159,  159,  126,  159,  159,  129,  130,  131,  132,
 /*  1860 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*  1870 */   143,   87,  159,   89,  120,   91,  159,  159,  159,  125,
 /*  1880 */   126,  127,  128,  129,  130,  131,  132,  133,  134,  135,
 /*  1890 */   136,  137,  138,  139,  140,  141,  142,  143,  144,  145,
 /*  1900 */   146,  147,  148,  159,  120,  159,  159,  159,  159,  125,
 /*  1910 */   126,  159,  128,  129,  130,  131,  132,  133,  134,  135,
 /*  1920 */   136,  137,  138,  139,  140,  141,  142,  143,  144,  145,
 /*  1930 */   146,  147,  148,   87,  159,   89,  159,   91,  159,  159,
 /*  1940 */   120,  159,  159,  159,  159,  159,  126,  159,  159,  129,
 /*  1950 */   130,  131,  132,  133,  134,  159,  159,  159,  159,  159,
 /*  1960 */   159,  159,  159,   87,  159,   89,  120,   91,  159,  159,
 /*  1970 */   159,  125,  126,  159,  128,  129,  130,  131,  132,  133,
 /*  1980 */   134,  135,  136,  137,  138,  139,  140,  141,  142,  143,
 /*  1990 */   144,  145,  146,  147,  148,  159,  120,  159,  159,  159,
 /*  2000 */   159,  125,  126,  159,  128,  129,  130,  131,  132,  133,
 /*  2010 */   134,  135,  136,  137,  138,  139,  140,  141,  142,  143,
 /*  2020 */   144,  145,  146,  147,  148,   89,  159,   91,  159,  159,
 /*  2030 */   120,  159,  159,  159,  159,  159,  126,  159,  159,  129,
 /*  2040 */   130,  131,  132,  133,  134,  159,  159,  159,  159,  159,
 /*  2050 */   159,  159,  159,   87,  159,   89,  120,   91,  159,  159,
 /*  2060 */   159,  125,  126,  127,  128,  129,  130,  131,  132,  133,
 /*  2070 */   134,  135,  136,  137,  138,  139,  140,  141,  142,  143,
 /*  2080 */   144,  145,  146,  147,  148,  159,  120,  159,  159,  159,
 /*  2090 */   159,  125,  126,  159,  128,  129,  130,  131,  132,  133,
 /*  2100 */   134,  135,  136,  137,  138,  139,  140,  141,  142,  143,
 /*  2110 */   144,  145,  146,  147,  148,   89,  159,   91,  159,  159,
 /*  2120 */   159,  159,  120,  159,  159,  159,  159,  159,  126,  159,
 /*  2130 */   159,  129,  130,  131,  132,  133,  134,  159,  159,  159,
 /*  2140 */   159,  159,  159,  159,  159,   89,  120,   91,  159,  159,
 /*  2150 */   159,  125,  126,  127,  128,  129,  130,  131,  132,  133,
 /*  2160 */   134,  135,  136,  137,  138,  139,  140,  141,  142,  143,
 /*  2170 */   144,  145,  146,  147,  148,  159,  120,  159,  159,  159,
 /*  2180 */   159,  125,  126,  127,  128,  129,  130,  131,  132,  133,
 /*  2190 */   134,  135,  136,  137,  138,  139,  140,  141,  142,  143,
 /*  2200 */   144,  145,  146,  147,  148,   89,  159,   91,  159,  159,
 /*  2210 */    94,   95,  159,  159,  159,  159,  159,  159,  159,  159,
 /*  2220 */   159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
 /*  2230 */   159,  159,  159,  159,  159,   89,  120,   91,  159,  159,
 /*  2240 */   159,  159,  126,  159,  128,  129,  130,  131,  132,  133,
 /*  2250 */   134,  135,  136,  137,  138,  139,  140,  141,  142,  143,
 /*  2260 */   144,  145,  146,  159,  148,  159,  120,  159,  159,  159,
 /*  2270 */   159,  125,  126,  159,  128,  129,  130,  131,  132,  133,
 /*  2280 */   134,  135,  136,  137,  138,  139,  140,  141,  142,  143,
 /*  2290 */   144,  145,  146,  147,  148,   89,  159,   91,  159,  159,
 /*  2300 */   159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
 /*  2310 */   159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
 /*  2320 */   159,  159,  159,  159,  159,   89,  120,   91,  159,  159,
 /*  2330 */   159,  125,  126,  159,  128,  129,  130,  131,  132,  133,
 /*  2340 */   134,  135,  136,  137,  138,  139,  140,  141,  142,  143,
 /*  2350 */   144,  145,  146,  147,  148,  159,  120,  159,  159,  159,
 /*  2360 */   159,  125,  126,  159,  128,  129,  130,  131,  132,  133,
 /*  2370 */   134,  135,  136,  137,  138,  139,  140,  141,  142,  143,
 /*  2380 */   144,  145,  146,  147,  148,   89,  159,   91,  159,  159,
 /*  2390 */   159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
 /*  2400 */   159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
 /*  2410 */   159,  159,  159,  159,  159,  159,  120,  159,  159,  159,
 /*  2420 */   159,  125,  126,  159,  128,  129,  130,  131,  132,  133,
 /*  2430 */   134,  135,  136,  137,  138,  139,  140,  141,  142,  143,
 /*  2440 */   144,  145,  146,  147,  148,  159,   89,  159,   91,  159,
 /*  2450 */   159,  159,  159,   96,   97,  159,  159,  159,  159,  159,
 /*  2460 */   159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
 /*  2470 */   159,  159,  159,  159,  159,  159,  159,  120,  159,  159,
 /*  2480 */   159,  159,  159,  126,  159,  128,  129,  130,  131,  132,
 /*  2490 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*  2500 */   143,  144,  145,  146,    6,    7,    8,    9,   10,  159,
 /*  2510 */    12,   13,   14,  159,   16,  159,  159,   19,   89,   21,
 /*  2520 */    91,   23,   24,   25,   26,   27,   28,   29,   30,   31,
 /*  2530 */    32,   33,   34,  159,  159,  159,  159,  159,  159,  159,
 /*  2540 */   159,  159,  159,  159,  159,  159,  159,  159,  159,  120,
 /*  2550 */   159,  159,  159,  159,  159,  126,   58,  128,  129,  130,
 /*  2560 */   131,  132,  133,  134,  135,  136,  137,  138,  139,  140,
 /*  2570 */   141,  142,  143,  144,  145,  146,  159,  148,    6,    7,
 /*  2580 */     8,    9,   10,  159,   12,   13,   14,  159,   16,  159,
 /*  2590 */   159,   19,   89,   21,   91,   23,   24,   25,   26,   27,
 /*  2600 */    28,   29,   30,   31,   32,   33,   34,  159,  159,  159,
 /*  2610 */   159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
 /*  2620 */   159,  159,  159,  120,  159,  159,  159,  159,  159,  126,
 /*  2630 */    58,  128,  129,  130,  131,  132,  133,  134,  135,  136,
 /*  2640 */   137,  138,  139,  140,  141,  142,  143,  144,  145,  146,
 /*  2650 */   147,    6,    7,    8,    9,   10,  159,   12,   13,   14,
 /*  2660 */   159,   16,   17,   88,  159,   90,   21,  159,   23,   24,
 /*  2670 */    25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
 /*  2680 */   159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
 /*  2690 */   159,  159,  159,  118,  159,  159,  121,  122,  123,  124,
 /*  2700 */   159,  159,  159,   58,  159,  159,  159,  159,  159,  159,
 /*  2710 */     6,    7,    8,    9,   10,  159,   12,   13,   14,  159,
 /*  2720 */    16,  159,  159,  159,  159,   21,   22,   23,   24,   25,
 /*  2730 */    26,   27,   28,   29,   30,   31,   32,   33,   34,   89,
 /*  2740 */   159,   91,  159,  159,  159,  159,  159,  159,  159,  159,
 /*  2750 */   159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
 /*  2760 */   159,  159,   58,  159,  159,  159,  159,  159,  159,  159,
 /*  2770 */   120,  159,  159,  159,  159,  159,  126,  159,  128,  129,
 /*  2780 */   130,  131,  132,  133,  134,  135,  136,  137,  138,  139,
 /*  2790 */   140,  141,  142,  143,  144,  145,  146,  159,  148,    6,
 /*  2800 */     7,    8,    9,   10,  159,   12,   13,   14,  159,   16,
 /*  2810 */    17,  159,  159,  159,   21,  159,   23,   24,   25,   26,
 /*  2820 */    27,   28,   29,   30,   31,   32,   33,   34,   89,  159,
 /*  2830 */    91,  159,  159,  159,  159,  159,  159,  159,  159,  159,
 /*  2840 */   159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
 /*  2850 */   159,   58,  159,  159,  159,  159,  159,  159,  159,  120,
 /*  2860 */   159,  159,  159,  159,  159,  126,  159,  128,  129,  130,
 /*  2870 */   131,  132,  133,  134,  135,  136,  137,  138,  139,  140,
 /*  2880 */   141,  142,  143,  144,  145,  146,  159,  148,    6,    7,
 /*  2890 */     8,    9,   10,  159,   12,   13,   14,  159,   16,  159,
 /*  2900 */   159,  159,  159,   21,  159,   23,   24,   25,   26,   27,
 /*  2910 */    28,   29,   30,   31,   32,   33,   34,  159,  159,  159,
 /*  2920 */   159,  159,  159,  159,  159,  159,  159,  159,   11,  159,
 /*  2930 */   159,  159,  159,  159,  159,  159,  159,   20,  159,  159,
 /*  2940 */    58,  159,  159,  159,  159,  159,  159,    6,    7,    8,
 /*  2950 */     9,   10,  159,  159,   13,   14,   15,   16,  159,  159,
 /*  2960 */   159,   89,   21,   91,   23,   24,   25,   26,   27,   28,
 /*  2970 */    29,   30,   31,   32,   33,   34,   59,   60,   61,   62,
 /*  2980 */    63,   64,   65,   66,   67,   68,   69,   70,  159,  159,
 /*  2990 */   159,  159,  120,  159,  159,  159,  159,  159,  126,   58,
 /*  3000 */   128,  129,  130,  131,  132,  133,  134,  135,  136,  137,
 /*  3010 */   138,  139,  140,  141,  142,  143,  144,  145,  146,    6,
 /*  3020 */     7,    8,    9,   10,  159,  159,   13,   14,  159,   16,
 /*  3030 */   159,  159,  159,  159,   21,   22,   23,   24,   25,   26,
 /*  3040 */    27,   28,   29,   30,   31,   32,   33,   34,  159,  159,
 /*  3050 */   159,   89,  159,   91,  159,  159,  159,  159,  159,  159,
 /*  3060 */   159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
 /*  3070 */   159,   58,  159,  159,  159,  159,  159,  159,  159,  159,
 /*  3080 */   159,  159,  120,  159,  159,  159,  159,  159,  126,  159,
 /*  3090 */   128,  129,  130,  131,  132,  133,  134,  135,  136,  137,
 /*  3100 */   138,  139,  140,  141,  142,  143,  144,  145,  146,    6,
 /*  3110 */     7,    8,    9,   10,  159,  159,   13,   14,  159,   16,
 /*  3120 */   159,  159,   19,  159,   21,  159,   23,   24,   25,   26,
 /*  3130 */    27,   28,   29,   30,   31,   32,   33,   34,  159,  159,
 /*  3140 */   159,   89,  159,   91,  159,  159,  159,  159,  159,  159,
 /*  3150 */   159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
 /*  3160 */   159,   58,  159,  159,  159,  159,  159,  159,  159,  159,
 /*  3170 */   159,  159,  120,  159,  159,  159,  159,  159,  126,  159,
 /*  3180 */   128,  129,  130,  131,  132,  133,  134,  135,  136,  137,
 /*  3190 */   138,  139,  140,  141,  142,  143,  144,  145,  146,   89,
 /*  3200 */   159,   91,  159,  159,  159,  159,  159,  159,  159,  159,
 /*  3210 */   159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
 /*  3220 */   159,  159,  159,  159,  159,  159,   89,  159,   91,  159,
 /*  3230 */   120,  159,  159,  159,  159,  159,  126,  159,  128,  129,
 /*  3240 */   130,  131,  132,  133,  134,  135,  136,  137,  138,  139,
 /*  3250 */   140,  141,  142,  143,  144,  145,  146,  120,  159,  159,
 /*  3260 */   159,  159,   89,  126,   91,  128,  129,  130,  131,  132,
 /*  3270 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*  3280 */   143,  144,  145,  146,  159,  159,  159,  159,  159,   89,
 /*  3290 */   159,   91,  159,  120,  159,  159,  159,  159,  159,  126,
 /*  3300 */   159,  128,  129,  130,  131,  132,  133,  134,  135,  136,
 /*  3310 */   137,  138,  139,  140,  141,  142,  143,  144,  145,  146,
 /*  3320 */   120,  159,  159,  159,  159,  159,  126,  159,  128,  129,
 /*  3330 */   130,  131,  132,  133,  134,  135,  136,  137,  138,  139,
 /*  3340 */   140,  141,  142,  143,  144,  145,  146,   89,  159,   91,
 /*  3350 */   159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
 /*  3360 */   159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
 /*  3370 */   159,  159,  159,  159,  159,  159,  159,  159,  120,   89,
 /*  3380 */   159,   91,  159,  159,  126,  159,  128,  129,  130,  131,
 /*  3390 */   132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
 /*  3400 */   142,  143,  144,  145,  146,  159,   89,  159,   91,  159,
 /*  3410 */   120,  159,  159,  159,  159,  159,  126,  159,  128,  129,
 /*  3420 */   130,  131,  132,  133,  134,  135,  136,  137,  138,  139,
 /*  3430 */   140,  141,  142,  143,  144,  145,  146,  120,  159,   89,
 /*  3440 */   159,   91,  159,  126,  159,  128,  129,  130,  131,  132,
 /*  3450 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*  3460 */   143,  144,  145,  146,  159,  159,  159,  159,  159,   89,
 /*  3470 */   120,   91,  159,  159,  159,  159,  126,  159,  128,  129,
 /*  3480 */   130,  131,  132,  133,  134,  135,  136,  137,  138,  139,
 /*  3490 */   140,  141,  142,  143,  144,  145,  146,  159,  159,  159,
 /*  3500 */   120,  159,  159,  159,  159,  159,  126,  159,  128,  129,
 /*  3510 */   130,  131,  132,  133,  134,  135,  136,  137,  138,  139,
 /*  3520 */   140,  141,  142,  143,  144,  145,  146,   89,  159,   91,
 /*  3530 */   159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
 /*  3540 */   159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
 /*  3550 */   159,  159,  159,  159,  159,  159,  159,  159,  120,   89,
 /*  3560 */   159,   91,  159,  159,  126,  159,  128,  129,  130,  131,
 /*  3570 */   132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
 /*  3580 */   142,  143,  144,  145,  146,  159,   89,  159,   91,  159,
 /*  3590 */   120,  159,  159,  159,  159,  159,  126,  159,  128,  129,
 /*  3600 */   130,  131,  132,  133,  134,  135,  136,  137,  138,  139,
 /*  3610 */   140,  141,  142,  143,  144,  145,  146,  120,  159,   89,
 /*  3620 */   159,   91,  159,  126,  159,  128,  129,  130,  131,  132,
 /*  3630 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*  3640 */   143,  144,  145,  146,  159,  159,  159,  159,  159,   89,
 /*  3650 */   120,   91,  159,  159,  159,  159,  126,  159,  128,  129,
 /*  3660 */   130,  131,  132,  133,  134,  135,  136,  137,  138,  139,
 /*  3670 */   140,  141,  142,  143,  144,  145,  146,  159,  159,  159,
 /*  3680 */   120,  159,  159,  159,  159,  159,  126,  159,  128,  129,
 /*  3690 */   130,  131,  132,  133,  134,  135,  136,  137,  138,  139,
 /*  3700 */   140,  141,  142,  143,  144,  145,  146,    6,    7,    8,
 /*  3710 */     9,   10,  159,  159,   13,   14,  159,   16,  159,  159,
 /*  3720 */   159,  159,   21,  159,   23,   24,   25,   26,   27,   28,
 /*  3730 */    29,   30,   31,   32,   33,   34,  159,  159,  159,  159,
 /*  3740 */   159,  159,  159,  159,  159,  159,  159,   11,  159,  159,
 /*  3750 */   159,  159,   16,  159,  159,  159,   20,  159,  159,   58,
 /*  3760 */   159,  159,  159,  159,  159,  159,    6,    7,    8,    9,
 /*  3770 */    10,  159,  159,  159,  159,  159,  159,  159,  159,  159,
 /*  3780 */   159,  159,  159,   23,   24,   25,   26,   27,   28,   29,
 /*  3790 */    30,   31,   32,   33,   34,   59,   60,   61,   62,   63,
 /*  3800 */    64,   65,   66,   67,   68,   69,   70,  159,  159,  159,
 /*  3810 */   159,  159,  159,  159,  159,  159,  159,  159,   82,
};
#define YY_SHIFT_USE_DFLT (-55)
#define YY_SHIFT_MAX 234
static const short yy_shift_ofst[] = {
 /*     0 */   -55, 1280, 1115, 1034,  872, 1199,  953, 1442, 1442, 1361,
 /*    10 */  1361, 1442, 1442, 1442, 1361, 1361, 1361, 1442, 1442, 2572,
 /*    20 */  2498, 2498, 2498, 2498, 2882, 2882, 2882, 2882, 2882, 2882,
 /*    30 */  2882, 2882, 2882, 2882, 2645, 2704, 2793, 2882, 2882, 2941,
 /*    40 */  2882, 2882, 2882, 3701, 3013, 3103, 3701, 3701, 3701, 3701,
 /*    50 */  3701, 3701, 3701, 3701, 3701, 3701, 3701, 3701, 3701, 3701,
 /*    60 */  3701, 3701, 3760, 3760, 3760, 3760, 3760, 3760, 3760, 3760,
 /*    70 */  3760, 3760, 3760, 3760, 3760, 3760, 3760, 3760, 3760, 3760,
 /*    80 */  3760, 3760, 3760, 3760, 3760,   14,  121, 1489,   66,   66,
 /*    90 */    66,   66,   85,   85,   85,   85,  152,  152,  152,  152,
 /*   100 */   152,  152,  152,  164,  287, 3736, 2917, 1467,  886,  886,
 /*   110 */   226,  133,  152,  152,  192,  -55,  -55,  -55,  -55,  -55,
 /*   120 */   -55,  -55,  -29,  -29,  147,  252,  -29,  153,  488,  420,
 /*   130 */   -12,  -12,  352,   21,  268,   -7,  202,  270,  314,  422,
 /*   140 */   356,   84,  270,  320,  217,  270,  270,  353,  344,  290,
 /*   150 */   350,  378,  390,  -54,  423,  413,  415,  428,  430,  393,
 /*   160 */   395,  425,  429,  437,  445,  461,  458,  485,  480,  395,
 /*   170 */   481,  493,  483,  489,  446,  491,  490,  494,  500,  504,
 /*   180 */   517,  519,  527,  526,  538,  537,  492,  557,  555,  549,
 /*   190 */   550,  552,  556,  553,  567,  393,  533,  531,  561,  570,
 /*   200 */   558,  581,  563,  533,  593,  601,  611,  613,  614,  617,
 /*   210 */   615,  446,  618,  619,  579,  620,  622,  624,  621,  625,
 /*   220 */   627,  638,  579,  630,  658,  659,  660,  663,  638,  661,
 /*   230 */   662,  654,  664,  675,  531,
};
#define YY_REDUCE_USE_DFLT (-89)
#define YY_REDUCE_MAX 121
static const short yy_reduce_ofst[] = {
 /*     0 */   181,  -88,  -88,  -88,  -88,  -88,  -88,  384,  112,  652,
 /*    10 */   718,  180,  248,  316,  452,  518,   46,  -22,  584, 1420,
 /*    20 */  1664, 1694, 1574, 1604, 1514, 1453, 1784, 1846, 1876, 1936,
 /*    30 */  1966, 2026, 1754, 2056, 2146, 2116, 2296, 2236, 2206, 2357,
 /*    40 */  2650, 2739, 2429, 2503, 2962, 3052, 2962, 3173, 3258, 3350,
 /*    50 */  3438, 3497, 3530, 3560, 3470, 3380, 3317, 3200, 3137, 2872,
 /*    60 */  3110, 3290, 1547, 1727,  787,  868,  949, 1030, 1114, 1195,
 /*    70 */  1276, 1133, 1213, 1294, 1050,  970,  212, 1640, 1486,  280,
 /*    80 */  1359, 1910, 1820, 2002,  348, 2575, 2575,   78,  416,  484,
 /*    90 */   616,  -30,  154,  189,  191,  -46,  -14,   40,   89,  108,
 /*   100 */   187,  -14,   54,  115,  119,  -34,  -34,    9,  -28,  -28,
 /*   110 */   -20,   80,  193,   80,  195,  185,  184,  221,  251,  260,
 /*   120 */   261,  286,
};
static const YYACTIONTYPE yy_default[] = {
 /*     0 */   571,  632,  632,  632,  632,  632,  632,  632,  632,  632,
 /*    10 */   632,  632,  632,  632,  632,  632,  632,  632,  632,  614,
 /*    20 */   632,  632,  632,  632,  616,  616,  534,  534,  534,  632,
 /*    30 */   534,  632,  632,  632,  632,  632,  632,  632,  632,  632,
 /*    40 */   632,  632,  556,  632,  632,  632,  632,  632,  632,  632,
 /*    50 */   632,  632,  632,  632,  632,  632,  632,  632,  632,  561,
 /*    60 */   632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
 /*    70 */   632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
 /*    80 */   632,  632,  632,  632,  632,  632,  632,  517,  632,  632,
 /*    90 */   632,  632,  414,  414,  414,  414,  632,  632,  632,  632,
 /*   100 */   632,  440,  439,  632,  619,  532,  532,  565,  505,  506,
 /*   110 */   632,  632,  632,  632,  632,  423,  571,  423,  571,  571,
 /*   120 */   571,  571,  480,  478,  632,  454,  479,  632,  454,  632,
 /*   130 */   486,  485,  453,  421,  466,  632,  632,  483,  511,  433,
 /*   140 */   632,  632,  484,  632,  632,  481,  482,  632,  632,  632,
 /*   150 */   632,  632,  632,  632,  632,  632,  632,  520,  632,  490,
 /*   160 */   491,  632,  532,  632,  632,  632,  632,  415,  632,  492,
 /*   170 */   632,  632,  632,  632,  509,  632,  632,  632,  452,  632,
 /*   180 */   632,  632,  434,  632,  555,  632,  632,  632,  553,  632,
 /*   190 */   632,  632,  632,  632,  448,  489,  488,  493,  632,  632,
 /*   200 */   632,  632,  632,  487,  632,  560,  433,  632,  632,  632,
 /*   210 */   632,  510,  632,  632,  507,  632,  632,  632,  632,  632,
 /*   220 */   632,  631,  508,  517,  632,  632,  632,  632,  632,  632,
 /*   230 */   632,  632,  632,  519,  494,  608,  444,  609,  610,  442,
 /*   240 */   611,  441,  612,  613,  617,  615,  618,  440,  439,  620,
 /*   250 */   438,  437,  621,  622,  422,  623,  625,  419,  626,  627,
 /*   260 */   629,  418,  628,  630,  411,  624,  587,  515,  530,  410,
 /*   270 */   456,  535,  529,  513,  514,  551,  409,  552,  557,  554,
 /*   280 */   420,  445,  501,  500,  502,  503,  504,  499,  455,  498,
 /*   290 */   497,  496,  495,  512,  451,  424,  425,  426,  427,  428,
 /*   300 */   429,  412,  413,  417,  416,  430,  431,  432,  434,  435,
 /*   310 */   436,  516,  518,  521,  522,  528,  562,  538,  539,  540,
 /*   320 */   541,  542,  543,  544,  545,  546,  547,  548,  549,  550,
 /*   330 */   477,  523,  476,  524,  525,  475,  558,  474,  559,  563,
 /*   340 */   566,  473,  526,  472,  471,  527,  533,  470,  531,  536,
 /*   350 */   537,  568,  564,  567,  572,  573,  574,  575,  576,  469,
 /*   360 */   577,  578,  579,  583,  468,  569,  467,  465,  570,  464,
 /*   370 */   584,  585,  463,  582,  462,  586,  461,  460,  459,  580,
 /*   380 */   458,  588,  457,  581,  589,  450,  590,  449,  591,  592,
 /*   390 */   593,  447,  594,  595,  596,  597,  446,  598,  599,  443,
 /*   400 */   600,  601,  602,  603,  604,  605,  606,  607,
};
#define YY_SZ_ACTTAB (int)(sizeof(yy_action)/sizeof(yy_action[0]))

/* The next table maps tokens into fallback tokens.  If a construct
** like the following:
** 
**      %fallback ID X Y Z.
**
** appears in the grammar, then ID becomes a fallback token for X, Y,
** and Z.  Whenever one of the tokens X, Y, or Z is input to the parser
** but it does not parse, the type of the token is changed to ID and
** the parse is retried before an error is thrown.
*/
#ifdef YYFALLBACK
static const YYCODETYPE yyFallback[] = {
};
#endif /* YYFALLBACK */

/* The following structure represents a single element of the
** parser's stack.  Information stored includes:
**
**   +  The state number for the parser at this level of the stack.
**
**   +  The value of the token stored at this level of the stack.
**      (In other words, the "major" token.)
**
**   +  The semantic value stored at this level of the stack.  This is
**      the information used by the action routines in the grammar.
**      It is sometimes called the "minor" token.
*/
struct yyStackEntry {
  YYACTIONTYPE stateno;  /* The state-number */
  YYCODETYPE major;      /* The major token value.  This is the code
                         ** number for the token at this stack level */
  YYMINORTYPE minor;     /* The user-supplied minor token value.  This
                         ** is the value of the token  */
};
typedef struct yyStackEntry yyStackEntry;

/* The state of the parser is completely contained in an instance of
** the following structure */
struct yyParser {
  int yyidx;                    /* Index of top element in stack */
#ifdef YYTRACKMAXSTACKDEPTH
  int yyidxMax;                 /* Maximum value of yyidx */
#endif
  int yyerrcnt;                 /* Shifts left before out of the error */
  XecParseARG_SDECL                /* A place to hold %extra_argument */
#if YYSTACKDEPTH<=0
  int yystksz;                  /* Current side of the stack */
  yyStackEntry *yystack;        /* The parser's stack */
#else
  yyStackEntry yystack[YYSTACKDEPTH];  /* The parser's stack */
#endif
};
typedef struct yyParser yyParser;

#ifndef NDEBUG
#include <stdio.h>
static FILE *yyTraceFILE = 0;
static char *yyTracePrompt = 0;
#endif /* NDEBUG */

#ifndef NDEBUG
/* 
** Turn parser tracing on by giving a stream to which to write the trace
** and a prompt to preface each trace message.  Tracing is turned off
** by making either argument NULL 
**
** Inputs:
** <ul>
** <li> A FILE* to which trace output should be written.
**      If NULL, then tracing is turned off.
** <li> A prefix string written at the beginning of every
**      line of trace output.  If NULL, then tracing is
**      turned off.
** </ul>
**
** Outputs:
** None.
*/
void XecParseTrace(FILE *TraceFILE, char *zTracePrompt){
  yyTraceFILE = TraceFILE;
  yyTracePrompt = zTracePrompt;
  if( yyTraceFILE==0 ) yyTracePrompt = 0;
  else if( yyTracePrompt==0 ) yyTraceFILE = 0;
}
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing shifts, the names of all terminals and nonterminals
** are required.  The following table supplies these names */
static const char *const yyTokenName[] = { 
  "$",             "IF",            "ELSE",          "TRY",         
  "CATCH",         "FINALLY",       "YIELD",         "LPN",         
  "IDENTIFIER",    "FUNCTION",      "OBJECT",        "COMMA",       
  "ELLIPSIS",      "PERIOD",        "LBR",           "RBR",         
  "COLON",         "SEMICOLON",     "RPN",           "VAR",         
  "ASSIGN",        "LSQ",           "RSQ",           "NEW",         
  "NULL",          "TRUE",          "FALSE",         "NUMBER",      
  "STRING",        "INCREMENT",     "DECREMENT",     "PLUS",        
  "MINUS",         "XMARK",         "TILDE",         "ASTERISK",    
  "SOLIDUS",       "PERCENT",       "LSHIFT",        "LRSHIFT",     
  "ARSHIFT",       "AMPERSAND",     "CARET",         "VBAR",        
  "CONCATENATE",   "EQUAL",         "NOTEQUAL",      "LESS",        
  "GREATER",       "LESSEQUAL",     "GREATEREQUAL",  "IN",          
  "NOTIN",         "IS",            "NOTIS",         "LOGICAND",    
  "LOGICXOR",      "LOGICOR",       "QMARK",         "MULASSIGN",   
  "DIVASSIGN",     "MODASSIGN",     "INTDIVASSIGN",  "ADDASSIGN",   
  "SUBASSIGN",     "LSHIFTASSIGN",  "LRSHIFTASSIGN",  "ARSHIFTASSIGN",
  "BITANDASSIGN",  "BITXORASSIGN",  "BITORASSIGN",   "WHILE",       
  "DELETE",        "CASE",          "DEFAULT",       "CONTINUE",    
  "BREAK",         "RETURN",        "THROW",         "SWITCH",      
  "DO",            "FOR",           "EACHKEY",       "USING",       
  "error",         "name",          "param_list",    "arg_list",    
  "object_scope",  "newobj_scope",  "func_scope",    "newf_scope",  
  "compare_op",    "assign_op",     "value_lbody",   "value_list",  
  "keyval_lbody",  "keyval_list",   "stmt_block",    "stmt_reblock",
  "stmt_if",       "stmt_switch",   "stmt_while",    "stmt_do",     
  "stmt_doblock",  "scope_for",     "stmt_foreach",  "stmt_for",    
  "stmt_using",    "try_block",     "try_catch",     "scope_catch", 
  "stmt_catch",    "token_yield",   "script",        "stmt_list",   
  "name_list",     "qual_name",     "decl_object",   "object_decls",
  "expr_simple",   "object_decl",   "decl_proto",    "decl_func",   
  "decl_var",      "expr_list",     "expr_index",    "expr_assign", 
  "expr_value",    "expr_yield",    "expr_new",      "expr_postfix",
  "expr_literal",  "expr_suffix",   "expr_unary",    "expr_mul",    
  "expr_add",      "expr_shift",    "expr_bitand",   "expr_bitxor", 
  "expr_bitor",    "expr_concat",   "expr_compare",  "expr_and",    
  "expr_xor",      "expr_or",       "expr_nolbr",    "expr_lbody",  
  "expr_final",    "sexpr_lbody",   "sexpr_list",    "sexpr_assign",
  "condition",     "stmt",          "stmt_common",   "stmt_reuse",  
  "stmt_try",      "for_cond",      "for_expr",    
};
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing reduce actions, the names of all rules are required.
*/
static const char *const yyRuleName[] = {
 /*   0 */ "script ::= stmt_list",
 /*   1 */ "name ::= IDENTIFIER",
 /*   2 */ "name ::= FUNCTION",
 /*   3 */ "name ::= OBJECT",
 /*   4 */ "name_list ::= name",
 /*   5 */ "name_list ::= name_list COMMA name",
 /*   6 */ "param_list ::=",
 /*   7 */ "param_list ::= name_list",
 /*   8 */ "param_list ::= ELLIPSIS",
 /*   9 */ "param_list ::= name_list COMMA ELLIPSIS",
 /*  10 */ "qual_name ::= name",
 /*  11 */ "qual_name ::= qual_name PERIOD IDENTIFIER",
 /*  12 */ "decl_object ::= object_scope LBR object_decls RBR",
 /*  13 */ "object_scope ::= OBJECT qual_name",
 /*  14 */ "object_scope ::= OBJECT qual_name COLON expr_simple",
 /*  15 */ "object_decls ::=",
 /*  16 */ "object_decls ::= object_decls object_decl",
 /*  17 */ "object_decl ::= SEMICOLON",
 /*  18 */ "object_decl ::= decl_object",
 /*  19 */ "object_decl ::= decl_proto",
 /*  20 */ "object_decl ::= decl_func",
 /*  21 */ "object_decl ::= decl_var",
 /*  22 */ "decl_proto ::= FUNCTION qual_name LPN param_list RPN SEMICOLON",
 /*  23 */ "decl_proto ::= FUNCTION qual_name LPN param_list RPN YIELD SEMICOLON",
 /*  24 */ "decl_func ::= func_scope LBR stmt_list RBR",
 /*  25 */ "func_scope ::= FUNCTION qual_name LPN param_list RPN",
 /*  26 */ "func_scope ::= FUNCTION qual_name LPN param_list RPN YIELD",
 /*  27 */ "decl_var ::= VAR name_list SEMICOLON",
 /*  28 */ "decl_var ::= VAR name_list ASSIGN expr_list SEMICOLON",
 /*  29 */ "expr_index ::= LPN expr_assign RPN",
 /*  30 */ "expr_index ::= IDENTIFIER",
 /*  31 */ "expr_index ::= FUNCTION",
 /*  32 */ "expr_index ::= OBJECT",
 /*  33 */ "expr_index ::= expr_index PERIOD IDENTIFIER",
 /*  34 */ "expr_index ::= expr_index PERIOD LSQ expr_value RSQ",
 /*  35 */ "expr_index ::= expr_index LSQ expr_value RSQ",
 /*  36 */ "expr_yield ::= YIELD LPN arg_list RPN",
 /*  37 */ "expr_new ::= NEW expr_index LPN arg_list RPN",
 /*  38 */ "expr_postfix ::= expr_yield",
 /*  39 */ "expr_postfix ::= expr_new",
 /*  40 */ "expr_postfix ::= expr_index LPN arg_list RPN",
 /*  41 */ "expr_postfix ::= expr_postfix PERIOD IDENTIFIER",
 /*  42 */ "expr_postfix ::= expr_postfix PERIOD LSQ expr_value RSQ",
 /*  43 */ "expr_postfix ::= expr_postfix LSQ expr_value RSQ",
 /*  44 */ "expr_postfix ::= expr_postfix LPN arg_list RPN",
 /*  45 */ "expr_simple ::= expr_index",
 /*  46 */ "expr_simple ::= expr_postfix",
 /*  47 */ "expr_simple ::= expr_index LPN arg_list RPN YIELD",
 /*  48 */ "expr_simple ::= expr_postfix LPN arg_list RPN YIELD",
 /*  49 */ "expr_literal ::= expr_simple",
 /*  50 */ "expr_literal ::= NULL",
 /*  51 */ "expr_literal ::= TRUE",
 /*  52 */ "expr_literal ::= FALSE",
 /*  53 */ "expr_literal ::= NUMBER",
 /*  54 */ "expr_literal ::= STRING",
 /*  55 */ "expr_suffix ::= expr_literal",
 /*  56 */ "expr_suffix ::= expr_suffix INCREMENT",
 /*  57 */ "expr_suffix ::= expr_suffix DECREMENT",
 /*  58 */ "expr_unary ::= expr_suffix",
 /*  59 */ "expr_unary ::= PLUS expr_unary",
 /*  60 */ "expr_unary ::= MINUS expr_unary",
 /*  61 */ "expr_unary ::= XMARK expr_unary",
 /*  62 */ "expr_unary ::= TILDE expr_unary",
 /*  63 */ "expr_unary ::= INCREMENT expr_unary",
 /*  64 */ "expr_unary ::= DECREMENT expr_unary",
 /*  65 */ "expr_mul ::= expr_unary",
 /*  66 */ "expr_mul ::= expr_mul ASTERISK expr_unary",
 /*  67 */ "expr_mul ::= expr_mul SOLIDUS expr_unary",
 /*  68 */ "expr_mul ::= expr_mul PERCENT expr_unary",
 /*  69 */ "expr_mul ::= expr_mul TILDE expr_unary",
 /*  70 */ "expr_add ::= expr_mul",
 /*  71 */ "expr_add ::= expr_add PLUS expr_mul",
 /*  72 */ "expr_add ::= expr_add MINUS expr_mul",
 /*  73 */ "expr_shift ::= expr_add",
 /*  74 */ "expr_shift ::= expr_shift LSHIFT expr_add",
 /*  75 */ "expr_shift ::= expr_shift LRSHIFT expr_add",
 /*  76 */ "expr_shift ::= expr_shift ARSHIFT expr_add",
 /*  77 */ "expr_bitand ::= expr_shift",
 /*  78 */ "expr_bitand ::= expr_bitand AMPERSAND expr_shift",
 /*  79 */ "expr_bitxor ::= expr_bitand",
 /*  80 */ "expr_bitxor ::= expr_bitxor CARET expr_bitand",
 /*  81 */ "expr_bitor ::= expr_bitxor",
 /*  82 */ "expr_bitor ::= expr_bitor VBAR expr_bitxor",
 /*  83 */ "expr_concat ::= expr_bitor",
 /*  84 */ "expr_concat ::= expr_concat CONCATENATE expr_bitor",
 /*  85 */ "expr_compare ::= expr_concat",
 /*  86 */ "expr_compare ::= expr_compare compare_op expr_concat",
 /*  87 */ "compare_op ::= EQUAL",
 /*  88 */ "compare_op ::= NOTEQUAL",
 /*  89 */ "compare_op ::= LESS",
 /*  90 */ "compare_op ::= GREATER",
 /*  91 */ "compare_op ::= LESSEQUAL",
 /*  92 */ "compare_op ::= GREATEREQUAL",
 /*  93 */ "compare_op ::= IN",
 /*  94 */ "compare_op ::= NOTIN",
 /*  95 */ "compare_op ::= IS",
 /*  96 */ "compare_op ::= NOTIS",
 /*  97 */ "expr_and ::= expr_compare",
 /*  98 */ "expr_and ::= expr_and LOGICAND expr_compare",
 /*  99 */ "expr_xor ::= expr_and",
 /* 100 */ "expr_xor ::= expr_xor LOGICXOR expr_and",
 /* 101 */ "expr_or ::= expr_xor",
 /* 102 */ "expr_or ::= expr_or LOGICOR expr_xor",
 /* 103 */ "expr_nolbr ::= expr_or",
 /* 104 */ "expr_nolbr ::= expr_or QMARK expr_value COLON expr_value",
 /* 105 */ "expr_nolbr ::= LSQ RSQ",
 /* 106 */ "expr_nolbr ::= LSQ value_list RSQ",
 /* 107 */ "expr_nolbr ::= newobj_scope LBR object_decls RBR",
 /* 108 */ "expr_nolbr ::= newf_scope LBR stmt_list RBR",
 /* 109 */ "newobj_scope ::= COLON",
 /* 110 */ "newobj_scope ::= COLON COLON expr_simple",
 /* 111 */ "newf_scope ::= QMARK LPN param_list RPN",
 /* 112 */ "newf_scope ::= PERIOD QMARK LPN param_list RPN",
 /* 113 */ "newf_scope ::= QMARK LPN param_list RPN YIELD",
 /* 114 */ "newf_scope ::= PERIOD QMARK LPN param_list RPN YIELD",
 /* 115 */ "expr_value ::= expr_nolbr",
 /* 116 */ "expr_value ::= LBR RBR",
 /* 117 */ "expr_value ::= LBR keyval_list RBR",
 /* 118 */ "expr_lbody ::= expr_value",
 /* 119 */ "expr_lbody ::= expr_lbody COMMA expr_value",
 /* 120 */ "expr_final ::= ELLIPSIS",
 /* 121 */ "expr_final ::= expr_postfix ELLIPSIS",
 /* 122 */ "expr_final ::= expr_postfix LSQ RSQ ELLIPSIS",
 /* 123 */ "expr_list ::= expr_final",
 /* 124 */ "expr_list ::= expr_lbody",
 /* 125 */ "expr_list ::= expr_lbody COMMA expr_final",
 /* 126 */ "arg_list ::=",
 /* 127 */ "arg_list ::= expr_list",
 /* 128 */ "expr_assign ::= expr_list",
 /* 129 */ "expr_assign ::= expr_lbody assign_op expr_assign",
 /* 130 */ "assign_op ::= ASSIGN",
 /* 131 */ "assign_op ::= MULASSIGN",
 /* 132 */ "assign_op ::= DIVASSIGN",
 /* 133 */ "assign_op ::= MODASSIGN",
 /* 134 */ "assign_op ::= INTDIVASSIGN",
 /* 135 */ "assign_op ::= ADDASSIGN",
 /* 136 */ "assign_op ::= SUBASSIGN",
 /* 137 */ "assign_op ::= LSHIFTASSIGN",
 /* 138 */ "assign_op ::= LRSHIFTASSIGN",
 /* 139 */ "assign_op ::= ARSHIFTASSIGN",
 /* 140 */ "assign_op ::= BITANDASSIGN",
 /* 141 */ "assign_op ::= BITXORASSIGN",
 /* 142 */ "assign_op ::= BITORASSIGN",
 /* 143 */ "value_lbody ::= expr_value",
 /* 144 */ "value_lbody ::= value_lbody COMMA expr_value",
 /* 145 */ "value_list ::= expr_final",
 /* 146 */ "value_list ::= expr_final COMMA",
 /* 147 */ "value_list ::= value_lbody",
 /* 148 */ "value_list ::= value_lbody COMMA",
 /* 149 */ "value_list ::= value_lbody COMMA expr_final",
 /* 150 */ "keyval_lbody ::= expr_value COLON expr_value",
 /* 151 */ "keyval_lbody ::= keyval_lbody COMMA expr_value COLON expr_value",
 /* 152 */ "keyval_list ::= keyval_lbody",
 /* 153 */ "keyval_list ::= keyval_lbody COMMA",
 /* 154 */ "sexpr_lbody ::= expr_nolbr",
 /* 155 */ "sexpr_lbody ::= sexpr_lbody COMMA expr_value",
 /* 156 */ "sexpr_list ::= expr_final",
 /* 157 */ "sexpr_list ::= sexpr_lbody",
 /* 158 */ "sexpr_list ::= sexpr_lbody COMMA expr_final",
 /* 159 */ "sexpr_assign ::= sexpr_list",
 /* 160 */ "sexpr_assign ::= sexpr_lbody assign_op expr_assign",
 /* 161 */ "condition ::= expr_assign",
 /* 162 */ "condition ::= VAR name_list ASSIGN expr_list",
 /* 163 */ "stmt_list ::=",
 /* 164 */ "stmt_list ::= stmt_list SEMICOLON",
 /* 165 */ "stmt_list ::= stmt_list stmt",
 /* 166 */ "stmt_list ::= stmt_list decl_object",
 /* 167 */ "stmt_list ::= stmt_list decl_func",
 /* 168 */ "stmt_list ::= stmt_list decl_var",
 /* 169 */ "stmt ::= stmt_block stmt_list RBR",
 /* 170 */ "stmt ::= stmt_common",
 /* 171 */ "stmt_block ::= LBR",
 /* 172 */ "stmt_reuse ::= stmt_reblock stmt_list RBR",
 /* 173 */ "stmt_reuse ::= stmt_common",
 /* 174 */ "stmt_reblock ::= LBR",
 /* 175 */ "stmt_common ::= sexpr_assign SEMICOLON",
 /* 176 */ "stmt_common ::= stmt_if LPN condition RPN stmt",
 /* 177 */ "stmt_common ::= stmt_if LPN condition RPN stmt ELSE stmt",
 /* 178 */ "stmt_common ::= stmt_switch LPN condition RPN stmt_reblock stmt_list RPN",
 /* 179 */ "stmt_common ::= stmt_while LPN condition RPN stmt_reuse",
 /* 180 */ "stmt_common ::= stmt_doblock WHILE LPN expr_assign RPN SEMICOLON",
 /* 181 */ "stmt_common ::= stmt_foreach stmt_reuse",
 /* 182 */ "stmt_common ::= stmt_for stmt_reuse",
 /* 183 */ "stmt_common ::= stmt_using LPN condition RPN stmt_reuse",
 /* 184 */ "stmt_common ::= stmt_try",
 /* 185 */ "stmt_common ::= DELETE expr_lbody SEMICOLON",
 /* 186 */ "stmt_common ::= CASE expr_value COLON",
 /* 187 */ "stmt_common ::= DEFAULT COLON",
 /* 188 */ "stmt_common ::= CONTINUE SEMICOLON",
 /* 189 */ "stmt_common ::= BREAK SEMICOLON",
 /* 190 */ "stmt_common ::= RETURN SEMICOLON",
 /* 191 */ "stmt_common ::= RETURN expr_list SEMICOLON",
 /* 192 */ "stmt_common ::= token_yield SEMICOLON",
 /* 193 */ "stmt_common ::= token_yield expr_list SEMICOLON",
 /* 194 */ "stmt_common ::= THROW expr_value SEMICOLON",
 /* 195 */ "stmt_if ::= IF",
 /* 196 */ "stmt_switch ::= SWITCH",
 /* 197 */ "stmt_while ::= WHILE",
 /* 198 */ "stmt_do ::= DO",
 /* 199 */ "stmt_doblock ::= stmt_do stmt_reuse",
 /* 200 */ "scope_for ::= FOR",
 /* 201 */ "stmt_foreach ::= scope_for LPN expr_lbody COLON expr_value RPN",
 /* 202 */ "stmt_foreach ::= scope_for LPN expr_lbody EACHKEY expr_value RPN",
 /* 203 */ "stmt_foreach ::= scope_for LPN VAR name_list COLON expr_value RPN",
 /* 204 */ "stmt_foreach ::= scope_for LPN VAR name_list EACHKEY expr_value RPN",
 /* 205 */ "stmt_for ::= scope_for LPN for_cond SEMICOLON for_expr SEMICOLON for_expr RPN",
 /* 206 */ "for_cond ::=",
 /* 207 */ "for_cond ::= condition",
 /* 208 */ "for_expr ::=",
 /* 209 */ "for_expr ::= expr_assign",
 /* 210 */ "stmt_using ::= USING",
 /* 211 */ "stmt_try ::= try_catch",
 /* 212 */ "stmt_try ::= try_catch FINALLY stmt",
 /* 213 */ "stmt_try ::= try_block FINALLY stmt",
 /* 214 */ "try_block ::= TRY stmt",
 /* 215 */ "try_catch ::= try_block stmt_catch stmt_reuse",
 /* 216 */ "try_catch ::= try_catch stmt_catch stmt_reuse",
 /* 217 */ "scope_catch ::= CATCH",
 /* 218 */ "stmt_catch ::= scope_catch LPN COLON expr_simple RPN",
 /* 219 */ "stmt_catch ::= scope_catch LPN expr_value COLON expr_simple RPN",
 /* 220 */ "stmt_catch ::= scope_catch LPN VAR name COLON expr_simple RPN",
 /* 221 */ "stmt_catch ::= scope_catch LPN expr_value RPN",
 /* 222 */ "stmt_catch ::= scope_catch LPN VAR name RPN",
 /* 223 */ "token_yield ::= YIELD",
};
#endif /* NDEBUG */


#if YYSTACKDEPTH<=0
/*
** Try to increase the size of the parser stack.
*/
static void yyGrowStack(yyParser *p){
  int newSize;
  yyStackEntry *pNew;

  newSize = p->yystksz*2 + 100;
  pNew = realloc(p->yystack, newSize*sizeof(pNew[0]));
  if( pNew ){
    p->yystack = pNew;
    p->yystksz = newSize;
#ifndef NDEBUG
    if( yyTraceFILE ){
      fprintf(yyTraceFILE,"%sStack grows to %d entries!\n",
              yyTracePrompt, p->yystksz);
    }
#endif
  }
}
#endif

/* 
** This function allocates a new parser.
** The only argument is a pointer to a function which works like
** malloc.
**
** Inputs:
** A pointer to the function used to allocate memory.
**
** Outputs:
** A pointer to a parser.  This pointer is used in subsequent calls
** to XecParse and XecParseFree.
*/
void *XecParseAlloc(void *(*mallocProc)(size_t)){
  yyParser *pParser;
  pParser = (yyParser*)(*mallocProc)( (size_t)sizeof(yyParser) );
  if( pParser ){
    pParser->yyidx = -1;
#ifdef YYTRACKMAXSTACKDEPTH
    pParser->yyidxMax = 0;
#endif
#if YYSTACKDEPTH<=0
    pParser->yystack = NULL;
    pParser->yystksz = 0;
    yyGrowStack(pParser);
#endif
  }
  return pParser;
}

/* The following function deletes the value associated with a
** symbol.  The symbol can be either a terminal or nonterminal.
** "yymajor" is the symbol code, and "yypminor" is a pointer to
** the value.
*/
static void yy_destructor(
  yyParser *yypParser,    /* The parser */
  YYCODETYPE yymajor,     /* Type code for object to destroy */
  YYMINORTYPE *yypminor   /* The object to be destroyed */
){
  XecParseARG_FETCH;
  switch( yymajor ){
    /* Here is inserted the actions which take place when a
    ** terminal or non-terminal is destroyed.  This can happen
    ** when the symbol is popped from the stack during a
    ** reduce or during error processing or when a parser is 
    ** being destroyed before it is finished parsing.
    **
    ** Note: during a reduce, the only symbols destroyed are those
    ** which appear on the RHS of the rule, but which are not used
    ** inside the C code.
    */
      /* TERMINAL Destructor */
    case 1: /* IF */
    case 2: /* ELSE */
    case 3: /* TRY */
    case 4: /* CATCH */
    case 5: /* FINALLY */
    case 6: /* YIELD */
    case 7: /* LPN */
    case 8: /* IDENTIFIER */
    case 9: /* FUNCTION */
    case 10: /* OBJECT */
    case 11: /* COMMA */
    case 12: /* ELLIPSIS */
    case 13: /* PERIOD */
    case 14: /* LBR */
    case 15: /* RBR */
    case 16: /* COLON */
    case 17: /* SEMICOLON */
    case 18: /* RPN */
    case 19: /* VAR */
    case 20: /* ASSIGN */
    case 21: /* LSQ */
    case 22: /* RSQ */
    case 23: /* NEW */
    case 24: /* NULL */
    case 25: /* TRUE */
    case 26: /* FALSE */
    case 27: /* NUMBER */
    case 28: /* STRING */
    case 29: /* INCREMENT */
    case 30: /* DECREMENT */
    case 31: /* PLUS */
    case 32: /* MINUS */
    case 33: /* XMARK */
    case 34: /* TILDE */
    case 35: /* ASTERISK */
    case 36: /* SOLIDUS */
    case 37: /* PERCENT */
    case 38: /* LSHIFT */
    case 39: /* LRSHIFT */
    case 40: /* ARSHIFT */
    case 41: /* AMPERSAND */
    case 42: /* CARET */
    case 43: /* VBAR */
    case 44: /* CONCATENATE */
    case 45: /* EQUAL */
    case 46: /* NOTEQUAL */
    case 47: /* LESS */
    case 48: /* GREATER */
    case 49: /* LESSEQUAL */
    case 50: /* GREATEREQUAL */
    case 51: /* IN */
    case 52: /* NOTIN */
    case 53: /* IS */
    case 54: /* NOTIS */
    case 55: /* LOGICAND */
    case 56: /* LOGICXOR */
    case 57: /* LOGICOR */
    case 58: /* QMARK */
    case 59: /* MULASSIGN */
    case 60: /* DIVASSIGN */
    case 61: /* MODASSIGN */
    case 62: /* INTDIVASSIGN */
    case 63: /* ADDASSIGN */
    case 64: /* SUBASSIGN */
    case 65: /* LSHIFTASSIGN */
    case 66: /* LRSHIFTASSIGN */
    case 67: /* ARSHIFTASSIGN */
    case 68: /* BITANDASSIGN */
    case 69: /* BITXORASSIGN */
    case 70: /* BITORASSIGN */
    case 71: /* WHILE */
    case 72: /* DELETE */
    case 73: /* CASE */
    case 74: /* DEFAULT */
    case 75: /* CONTINUE */
    case 76: /* BREAK */
    case 77: /* RETURN */
    case 78: /* THROW */
    case 79: /* SWITCH */
    case 80: /* DO */
    case 81: /* FOR */
    case 82: /* EACHKEY */
    case 83: /* USING */
{
#line 123 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"

    p->destroy( (yypminor->yy0) );

#line 1603 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
}
      break;
      /* Default NON-TERMINAL Destructor */
    case 84: /* error */
    case 85: /* name */
    case 86: /* param_list */
    case 87: /* arg_list */
    case 88: /* object_scope */
    case 89: /* newobj_scope */
    case 90: /* func_scope */
    case 91: /* newf_scope */
    case 92: /* compare_op */
    case 93: /* assign_op */
    case 94: /* value_lbody */
    case 95: /* value_list */
    case 96: /* keyval_lbody */
    case 97: /* keyval_list */
    case 98: /* stmt_block */
    case 99: /* stmt_reblock */
    case 100: /* stmt_if */
    case 101: /* stmt_switch */
    case 102: /* stmt_while */
    case 103: /* stmt_do */
    case 104: /* stmt_doblock */
    case 105: /* scope_for */
    case 106: /* stmt_foreach */
    case 107: /* stmt_for */
    case 108: /* stmt_using */
    case 109: /* try_block */
    case 110: /* try_catch */
    case 111: /* scope_catch */
    case 112: /* stmt_catch */
    case 113: /* token_yield */
    case 114: /* script */
    case 115: /* stmt_list */
    case 116: /* name_list */
    case 117: /* qual_name */
    case 118: /* decl_object */
    case 119: /* object_decls */
    case 120: /* expr_simple */
    case 121: /* object_decl */
    case 122: /* decl_proto */
    case 123: /* decl_func */
    case 124: /* decl_var */
    case 125: /* expr_list */
    case 126: /* expr_index */
    case 127: /* expr_assign */
    case 128: /* expr_value */
    case 129: /* expr_yield */
    case 130: /* expr_new */
    case 131: /* expr_postfix */
    case 132: /* expr_literal */
    case 133: /* expr_suffix */
    case 134: /* expr_unary */
    case 135: /* expr_mul */
    case 136: /* expr_add */
    case 137: /* expr_shift */
    case 138: /* expr_bitand */
    case 139: /* expr_bitxor */
    case 140: /* expr_bitor */
    case 141: /* expr_concat */
    case 142: /* expr_compare */
    case 143: /* expr_and */
    case 144: /* expr_xor */
    case 145: /* expr_or */
    case 146: /* expr_nolbr */
    case 147: /* expr_lbody */
    case 148: /* expr_final */
    case 149: /* sexpr_lbody */
    case 150: /* sexpr_list */
    case 151: /* sexpr_assign */
    case 152: /* condition */
    case 153: /* stmt */
    case 154: /* stmt_common */
    case 155: /* stmt_reuse */
    case 156: /* stmt_try */
    case 157: /* for_cond */
    case 158: /* for_expr */
{
#line 119 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"


#line 1686 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
}
      break;
    default:  break;   /* If no destructor action specified: do nothing */
  }
}

/*
** Pop the parser's stack once.
**
** If there is a destructor routine associated with the token which
** is popped from the stack, then call it.
**
** Return the major token number for the symbol popped.
*/
static int yy_pop_parser_stack(yyParser *pParser){
  YYCODETYPE yymajor;
  yyStackEntry *yytos = &pParser->yystack[pParser->yyidx];

  if( pParser->yyidx<0 ) return 0;
#ifndef NDEBUG
  if( yyTraceFILE && pParser->yyidx>=0 ){
    fprintf(yyTraceFILE,"%sPopping %s\n",
      yyTracePrompt,
      yyTokenName[yytos->major]);
  }
#endif
  yymajor = yytos->major;
  yy_destructor(pParser, yymajor, &yytos->minor);
  pParser->yyidx--;
  return yymajor;
}

/* 
** Deallocate and destroy a parser.  Destructors are all called for
** all stack elements before shutting the parser down.
**
** Inputs:
** <ul>
** <li>  A pointer to the parser.  This should be a pointer
**       obtained from XecParseAlloc.
** <li>  A pointer to a function used to reclaim memory obtained
**       from malloc.
** </ul>
*/
void XecParseFree(
  void *p,                    /* The parser to be deleted */
  void (*freeProc)(void*)     /* Function used to reclaim memory */
){
  yyParser *pParser = (yyParser*)p;
  if( pParser==0 ) return;
  while( pParser->yyidx>=0 ) yy_pop_parser_stack(pParser);
#if YYSTACKDEPTH<=0
  free(pParser->yystack);
#endif
  (*freeProc)((void*)pParser);
}

/*
** Return the peak depth of the stack for a parser.
*/
#ifdef YYTRACKMAXSTACKDEPTH
int XecParseStackPeak(void *p){
  yyParser *pParser = (yyParser*)p;
  return pParser->yyidxMax;
}
#endif

/*
** Find the appropriate action for a parser given the terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
static int yy_find_shift_action(
  yyParser *pParser,        /* The parser */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
  int stateno = pParser->yystack[pParser->yyidx].stateno;
 
  if( stateno>YY_SHIFT_MAX || (i = yy_shift_ofst[stateno])==YY_SHIFT_USE_DFLT ){
    return yy_default[stateno];
  }
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
  if( i<0 || i>=YY_SZ_ACTTAB || yy_lookahead[i]!=iLookAhead ){
    if( iLookAhead>0 ){
#ifdef YYFALLBACK
      YYCODETYPE iFallback;            /* Fallback token */
      if( iLookAhead<sizeof(yyFallback)/sizeof(yyFallback[0])
             && (iFallback = yyFallback[iLookAhead])!=0 ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE, "%sFALLBACK %s => %s\n",
             yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[iFallback]);
        }
#endif
        return yy_find_shift_action(pParser, iFallback);
      }
#endif
#ifdef YYWILDCARD
      {
        int j = i - iLookAhead + YYWILDCARD;
        if( j>=0 && j<YY_SZ_ACTTAB && yy_lookahead[j]==YYWILDCARD ){
#ifndef NDEBUG
          if( yyTraceFILE ){
            fprintf(yyTraceFILE, "%sWILDCARD %s => %s\n",
               yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[YYWILDCARD]);
          }
#endif /* NDEBUG */
          return yy_action[j];
        }
      }
#endif /* YYWILDCARD */
    }
    return yy_default[stateno];
  }else{
    return yy_action[i];
  }
}

/*
** Find the appropriate action for a parser given the non-terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
static int yy_find_reduce_action(
  int stateno,              /* Current state number */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
#ifdef YYERRORSYMBOL
  if( stateno>YY_REDUCE_MAX ){
    return yy_default[stateno];
  }
#else
  assert( stateno<=YY_REDUCE_MAX );
#endif
  i = yy_reduce_ofst[stateno];
  assert( i!=YY_REDUCE_USE_DFLT );
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
#ifdef YYERRORSYMBOL
  if( i<0 || i>=YY_SZ_ACTTAB || yy_lookahead[i]!=iLookAhead ){
    return yy_default[stateno];
  }
#else
  assert( i>=0 && i<YY_SZ_ACTTAB );
  assert( yy_lookahead[i]==iLookAhead );
#endif
  return yy_action[i];
}

/*
** The following routine is called if the stack overflows.
*/
static void yyStackOverflow(yyParser *yypParser, YYMINORTYPE *yypMinor){
   XecParseARG_FETCH;
   yypParser->yyidx--;
#ifndef NDEBUG
   if( yyTraceFILE ){
     fprintf(yyTraceFILE,"%sStack Overflow!\n",yyTracePrompt);
   }
#endif
   while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
   /* Here code is inserted which will execute if the parser
   ** stack every overflows */
   XecParseARG_STORE; /* Suppress warning about unused %extra_argument var */
}

/*
** Perform a shift action.
*/
static void yy_shift(
  yyParser *yypParser,          /* The parser to be shifted */
  int yyNewState,               /* The new state to shift in */
  int yyMajor,                  /* The major token to shift in */
  YYMINORTYPE *yypMinor         /* Pointer to the minor token to shift in */
){
  yyStackEntry *yytos;
  yypParser->yyidx++;
#ifdef YYTRACKMAXSTACKDEPTH
  if( yypParser->yyidx>yypParser->yyidxMax ){
    yypParser->yyidxMax = yypParser->yyidx;
  }
#endif
#if YYSTACKDEPTH>0 
  if( yypParser->yyidx>=YYSTACKDEPTH ){
    yyStackOverflow(yypParser, yypMinor);
    return;
  }
#else
  if( yypParser->yyidx>=yypParser->yystksz ){
    yyGrowStack(yypParser);
    if( yypParser->yyidx>=yypParser->yystksz ){
      yyStackOverflow(yypParser, yypMinor);
      return;
    }
  }
#endif
  yytos = &yypParser->yystack[yypParser->yyidx];
  yytos->stateno = (YYACTIONTYPE)yyNewState;
  yytos->major = (YYCODETYPE)yyMajor;
  yytos->minor = *yypMinor;
#ifndef NDEBUG
  if( yyTraceFILE && yypParser->yyidx>0 ){
    int i;
    fprintf(yyTraceFILE,"%sShift %d\n",yyTracePrompt,yyNewState);
    fprintf(yyTraceFILE,"%sStack:",yyTracePrompt);
    for(i=1; i<=yypParser->yyidx; i++)
      fprintf(yyTraceFILE," %s",yyTokenName[yypParser->yystack[i].major]);
    fprintf(yyTraceFILE,"\n");
  }
#endif
}

/* The following table contains information about every rule that
** is used during the reduce.
*/
static const struct {
  YYCODETYPE lhs;         /* Symbol on the left-hand side of the rule */
  unsigned char nrhs;     /* Number of right-hand side symbols in the rule */
} yyRuleInfo[] = {
  { 114, 1 },
  { 85, 1 },
  { 85, 1 },
  { 85, 1 },
  { 116, 1 },
  { 116, 3 },
  { 86, 0 },
  { 86, 1 },
  { 86, 1 },
  { 86, 3 },
  { 117, 1 },
  { 117, 3 },
  { 118, 4 },
  { 88, 2 },
  { 88, 4 },
  { 119, 0 },
  { 119, 2 },
  { 121, 1 },
  { 121, 1 },
  { 121, 1 },
  { 121, 1 },
  { 121, 1 },
  { 122, 6 },
  { 122, 7 },
  { 123, 4 },
  { 90, 5 },
  { 90, 6 },
  { 124, 3 },
  { 124, 5 },
  { 126, 3 },
  { 126, 1 },
  { 126, 1 },
  { 126, 1 },
  { 126, 3 },
  { 126, 5 },
  { 126, 4 },
  { 129, 4 },
  { 130, 5 },
  { 131, 1 },
  { 131, 1 },
  { 131, 4 },
  { 131, 3 },
  { 131, 5 },
  { 131, 4 },
  { 131, 4 },
  { 120, 1 },
  { 120, 1 },
  { 120, 5 },
  { 120, 5 },
  { 132, 1 },
  { 132, 1 },
  { 132, 1 },
  { 132, 1 },
  { 132, 1 },
  { 132, 1 },
  { 133, 1 },
  { 133, 2 },
  { 133, 2 },
  { 134, 1 },
  { 134, 2 },
  { 134, 2 },
  { 134, 2 },
  { 134, 2 },
  { 134, 2 },
  { 134, 2 },
  { 135, 1 },
  { 135, 3 },
  { 135, 3 },
  { 135, 3 },
  { 135, 3 },
  { 136, 1 },
  { 136, 3 },
  { 136, 3 },
  { 137, 1 },
  { 137, 3 },
  { 137, 3 },
  { 137, 3 },
  { 138, 1 },
  { 138, 3 },
  { 139, 1 },
  { 139, 3 },
  { 140, 1 },
  { 140, 3 },
  { 141, 1 },
  { 141, 3 },
  { 142, 1 },
  { 142, 3 },
  { 92, 1 },
  { 92, 1 },
  { 92, 1 },
  { 92, 1 },
  { 92, 1 },
  { 92, 1 },
  { 92, 1 },
  { 92, 1 },
  { 92, 1 },
  { 92, 1 },
  { 143, 1 },
  { 143, 3 },
  { 144, 1 },
  { 144, 3 },
  { 145, 1 },
  { 145, 3 },
  { 146, 1 },
  { 146, 5 },
  { 146, 2 },
  { 146, 3 },
  { 146, 4 },
  { 146, 4 },
  { 89, 1 },
  { 89, 3 },
  { 91, 4 },
  { 91, 5 },
  { 91, 5 },
  { 91, 6 },
  { 128, 1 },
  { 128, 2 },
  { 128, 3 },
  { 147, 1 },
  { 147, 3 },
  { 148, 1 },
  { 148, 2 },
  { 148, 4 },
  { 125, 1 },
  { 125, 1 },
  { 125, 3 },
  { 87, 0 },
  { 87, 1 },
  { 127, 1 },
  { 127, 3 },
  { 93, 1 },
  { 93, 1 },
  { 93, 1 },
  { 93, 1 },
  { 93, 1 },
  { 93, 1 },
  { 93, 1 },
  { 93, 1 },
  { 93, 1 },
  { 93, 1 },
  { 93, 1 },
  { 93, 1 },
  { 93, 1 },
  { 94, 1 },
  { 94, 3 },
  { 95, 1 },
  { 95, 2 },
  { 95, 1 },
  { 95, 2 },
  { 95, 3 },
  { 96, 3 },
  { 96, 5 },
  { 97, 1 },
  { 97, 2 },
  { 149, 1 },
  { 149, 3 },
  { 150, 1 },
  { 150, 1 },
  { 150, 3 },
  { 151, 1 },
  { 151, 3 },
  { 152, 1 },
  { 152, 4 },
  { 115, 0 },
  { 115, 2 },
  { 115, 2 },
  { 115, 2 },
  { 115, 2 },
  { 115, 2 },
  { 153, 3 },
  { 153, 1 },
  { 98, 1 },
  { 155, 3 },
  { 155, 1 },
  { 99, 1 },
  { 154, 2 },
  { 154, 5 },
  { 154, 7 },
  { 154, 7 },
  { 154, 5 },
  { 154, 6 },
  { 154, 2 },
  { 154, 2 },
  { 154, 5 },
  { 154, 1 },
  { 154, 3 },
  { 154, 3 },
  { 154, 2 },
  { 154, 2 },
  { 154, 2 },
  { 154, 2 },
  { 154, 3 },
  { 154, 2 },
  { 154, 3 },
  { 154, 3 },
  { 100, 1 },
  { 101, 1 },
  { 102, 1 },
  { 103, 1 },
  { 104, 2 },
  { 105, 1 },
  { 106, 6 },
  { 106, 6 },
  { 106, 7 },
  { 106, 7 },
  { 107, 8 },
  { 157, 0 },
  { 157, 1 },
  { 158, 0 },
  { 158, 1 },
  { 108, 1 },
  { 156, 1 },
  { 156, 3 },
  { 156, 3 },
  { 109, 2 },
  { 110, 3 },
  { 110, 3 },
  { 111, 1 },
  { 112, 5 },
  { 112, 6 },
  { 112, 7 },
  { 112, 4 },
  { 112, 5 },
  { 113, 1 },
};

static void yy_accept(yyParser*);  /* Forward Declaration */

/*
** Perform a reduce action and the shift that must immediately
** follow the reduce.
*/
static void yy_reduce(
  yyParser *yypParser,         /* The parser */
  int yyruleno                 /* Number of the rule by which to reduce */
){
  int yygoto;                     /* The next state */
  int yyact;                      /* The next action */
  YYMINORTYPE yygotominor;        /* The LHS of the rule reduced */
  yyStackEntry *yymsp;            /* The top of the parser's stack */
  int yysize;                     /* Amount to pop the stack */
  XecParseARG_FETCH;
  yymsp = &yypParser->yystack[yypParser->yyidx];
#ifndef NDEBUG
  if( yyTraceFILE && yyruleno>=0 
        && yyruleno<(int)(sizeof(yyRuleName)/sizeof(yyRuleName[0])) ){
    fprintf(yyTraceFILE, "%sReduce [%s].\n", yyTracePrompt,
      yyRuleName[yyruleno]);
  }
#endif /* NDEBUG */

  /* Silence complaints from purify about yygotominor being uninitialized
  ** in some cases when it is copied into the stack after the following
  ** switch.  yygotominor is uninitialized when a rule reduces that does
  ** not set the value of its left-hand side nonterminal.  Leaving the
  ** value of the nonterminal uninitialized is utterly harmless as long
  ** as the value is never used.  So really the only thing this code
  ** accomplishes is to quieten purify.  
  **
  ** 2007-01-16:  The wireshark project (www.wireshark.org) reports that
  ** without this code, their parser segfaults.  I'm not sure what there
  ** parser is doing to make this happen.  This is the second bug report
  ** from wireshark this week.  Clearly they are stressing Lemon in ways
  ** that it has not been previously stressed...  (SQLite ticket #2172)
  */
  /*memset(&yygotominor, 0, sizeof(yygotominor));*/
  yygotominor = yyzerominor;


  switch( yyruleno ){
  /* Beginning here are the reduction cases.  A typical example
  ** follows:
  **   case 0:
  **  #line <lineno> <grammarfile>
  **     { ... }           // User supplied code
  **  #line <lineno> <thisfile>
  **     break;
  */
      case 0: /* script ::= stmt_list */
#line 161 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,115,&yymsp[0].minor);
}
#line 2198 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 1: /* name ::= IDENTIFIER */
      case 2: /* name ::= FUNCTION */ yytestcase(yyruleno==2);
      case 3: /* name ::= OBJECT */ yytestcase(yyruleno==3);
#line 172 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy281 = p->alloc< xec_name_name >( yymsp[0].minor.yy0->sloc, yymsp[0].minor.yy0->text );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 2208 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 4: /* name_list ::= name */
      case 10: /* qual_name ::= name */ yytestcase(yyruleno==10);
#line 189 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy59 = yymsp[0].minor.yy281;
                }
#line 2216 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 5: /* name_list ::= name_list COMMA name */
#line 193 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    xec_name_list* l;
                    yygotominor.yy59 = l = p->name_list( yymsp[-2].minor.yy59 );
                    l->names.push_back( yymsp[0].minor.yy281 );
                  yy_destructor(yypParser,11,&yymsp[-1].minor);
}
#line 2226 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 6: /* param_list ::= */
#line 201 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy16 = nullptr;
                }
#line 2233 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 7: /* param_list ::= name_list */
#line 205 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy16 = p->name_list( yymsp[0].minor.yy59 );
                }
#line 2240 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 8: /* param_list ::= ELLIPSIS */
#line 209 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    xec_name_list* l;
                    yygotominor.yy16 = l = p->alloc< xec_name_list >( yymsp[0].minor.yy0->sloc );
                    l->varargs = true;
                }
#line 2249 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 9: /* param_list ::= name_list COMMA ELLIPSIS */
#line 215 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    xec_name_list* l;
                    yygotominor.yy16 = l = p->name_list( yymsp[-2].minor.yy59 );
                    l->varargs = true;
                  yy_destructor(yypParser,11,&yymsp[-1].minor);
  yy_destructor(yypParser,12,&yymsp[0].minor);
}
#line 2260 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 11: /* qual_name ::= qual_name PERIOD IDENTIFIER */
#line 227 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy59 = p->alloc< xec_name_qual >(
                                    yymsp[0].minor.yy0->sloc, yymsp[-2].minor.yy59, yymsp[0].minor.yy0->text );
                    p->destroy( yymsp[0].minor.yy0 );
                  yy_destructor(yypParser,13,&yymsp[-1].minor);
}
#line 2270 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 12: /* decl_object ::= object_scope LBR object_decls RBR */
#line 243 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    p->close_scope( yymsp[-3].minor.yy116->scope );
                  yy_destructor(yypParser,14,&yymsp[-2].minor);
  yy_destructor(yypParser,119,&yymsp[-1].minor);
  yy_destructor(yypParser,15,&yymsp[0].minor);
}
#line 2280 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 13: /* object_scope ::= OBJECT qual_name */
#line 248 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy116 = p->object( yymsp[0].minor.yy59->sloc, yymsp[0].minor.yy59, nullptr );
                  yy_destructor(yypParser,10,&yymsp[-1].minor);
}
#line 2288 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 14: /* object_scope ::= OBJECT qual_name COLON expr_simple */
#line 252 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy116 = p->object( yymsp[-2].minor.yy59->sloc, yymsp[-2].minor.yy59, yymsp[0].minor.yy59 );
                  yy_destructor(yypParser,10,&yymsp[-3].minor);
  yy_destructor(yypParser,16,&yymsp[-1].minor);
}
#line 2297 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 15: /* object_decls ::= */
      case 163: /* stmt_list ::= */ yytestcase(yyruleno==163);
#line 258 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                }
#line 2304 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 16: /* object_decls ::= object_decls object_decl */
#line 261 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,119,&yymsp[-1].minor);
  yy_destructor(yypParser,121,&yymsp[0].minor);
}
#line 2312 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 17: /* object_decl ::= SEMICOLON */
#line 265 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 2319 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 18: /* object_decl ::= decl_object */
#line 268 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,118,&yymsp[0].minor);
}
#line 2326 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 19: /* object_decl ::= decl_proto */
#line 271 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,122,&yymsp[0].minor);
}
#line 2333 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 20: /* object_decl ::= decl_func */
#line 274 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,123,&yymsp[0].minor);
}
#line 2340 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 21: /* object_decl ::= decl_var */
#line 277 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,124,&yymsp[0].minor);
}
#line 2347 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 22: /* decl_proto ::= FUNCTION qual_name LPN param_list RPN SEMICOLON */
#line 283 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    p->prototype( yymsp[-5].minor.yy0->sloc, yymsp[-4].minor.yy59, yymsp[-2].minor.yy16, false );
                    p->destroy( yymsp[-5].minor.yy0 );
                  yy_destructor(yypParser,7,&yymsp[-3].minor);
  yy_destructor(yypParser,18,&yymsp[-1].minor);
  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 2358 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 23: /* decl_proto ::= FUNCTION qual_name LPN param_list RPN YIELD SEMICOLON */
#line 289 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    p->prototype( yymsp[-6].minor.yy0->sloc, yymsp[-5].minor.yy59, yymsp[-3].minor.yy16, true );
                    p->destroy( yymsp[-6].minor.yy0 );
                  yy_destructor(yypParser,7,&yymsp[-4].minor);
  yy_destructor(yypParser,18,&yymsp[-2].minor);
  yy_destructor(yypParser,6,&yymsp[-1].minor);
  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 2370 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 24: /* decl_func ::= func_scope LBR stmt_list RBR */
#line 296 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    p->close_scope( yymsp[-3].minor.yy165->scope );
                  yy_destructor(yypParser,14,&yymsp[-2].minor);
  yy_destructor(yypParser,115,&yymsp[-1].minor);
  yy_destructor(yypParser,15,&yymsp[0].minor);
}
#line 2380 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 25: /* func_scope ::= FUNCTION qual_name LPN param_list RPN */
#line 302 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy165 = p->function( yymsp[-4].minor.yy0->sloc, yymsp[-3].minor.yy59, yymsp[-1].minor.yy16, false, false );
                    p->destroy( yymsp[-4].minor.yy0 );
                  yy_destructor(yypParser,7,&yymsp[-2].minor);
  yy_destructor(yypParser,18,&yymsp[0].minor);
}
#line 2390 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 26: /* func_scope ::= FUNCTION qual_name LPN param_list RPN YIELD */
#line 308 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy165 = p->function( yymsp[-5].minor.yy0->sloc, yymsp[-4].minor.yy59, yymsp[-2].minor.yy16, true, false );
                    p->destroy( yymsp[-5].minor.yy0 );
                  yy_destructor(yypParser,7,&yymsp[-3].minor);
  yy_destructor(yypParser,18,&yymsp[-1].minor);
  yy_destructor(yypParser,6,&yymsp[0].minor);
}
#line 2401 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 27: /* decl_var ::= VAR name_list SEMICOLON */
#line 315 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    p->var( yymsp[-2].minor.yy0->sloc, yymsp[-1].minor.yy59, nullptr );
                    p->destroy( yymsp[-2].minor.yy0 );
                  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 2410 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 28: /* decl_var ::= VAR name_list ASSIGN expr_list SEMICOLON */
#line 321 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    p->var( yymsp[-4].minor.yy0->sloc, yymsp[-3].minor.yy59, yymsp[-1].minor.yy59 );
                    p->destroy( yymsp[-4].minor.yy0 );
                  yy_destructor(yypParser,20,&yymsp[-2].minor);
  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 2420 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 29: /* expr_index ::= LPN expr_assign RPN */
#line 338 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy59 = p->mono( yymsp[-1].minor.yy59 );
                  yy_destructor(yypParser,7,&yymsp[-2].minor);
  yy_destructor(yypParser,18,&yymsp[0].minor);
}
#line 2429 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 30: /* expr_index ::= IDENTIFIER */
      case 31: /* expr_index ::= FUNCTION */ yytestcase(yyruleno==31);
      case 32: /* expr_index ::= OBJECT */ yytestcase(yyruleno==32);
#line 342 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy59 = p->lookup( yymsp[0].minor.yy0->sloc, yymsp[0].minor.yy0->text, true );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 2439 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 33: /* expr_index ::= expr_index PERIOD IDENTIFIER */
      case 41: /* expr_postfix ::= expr_postfix PERIOD IDENTIFIER */ yytestcase(yyruleno==41);
#line 357 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy59 = p->key( yymsp[-2].minor.yy59->sloc, yymsp[-2].minor.yy59, yymsp[0].minor.yy0->text );
                    p->destroy( yymsp[0].minor.yy0 );
                  yy_destructor(yypParser,13,&yymsp[-1].minor);
}
#line 2449 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 34: /* expr_index ::= expr_index PERIOD LSQ expr_value RSQ */
#line 362 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy59 = p->alloc< xec_expr_inkey >( yymsp[-4].minor.yy59->sloc, yymsp[-4].minor.yy59, yymsp[-1].minor.yy59 );
                  yy_destructor(yypParser,13,&yymsp[-3].minor);
  yy_destructor(yypParser,21,&yymsp[-2].minor);
  yy_destructor(yypParser,22,&yymsp[0].minor);
}
#line 2459 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 35: /* expr_index ::= expr_index LSQ expr_value RSQ */
#line 366 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy59 = p->alloc< xec_expr_index >( yymsp[-3].minor.yy59->sloc, yymsp[-3].minor.yy59, yymsp[-1].minor.yy59 );
                  yy_destructor(yypParser,21,&yymsp[-2].minor);
  yy_destructor(yypParser,22,&yymsp[0].minor);
}
#line 2468 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 36: /* expr_yield ::= YIELD LPN arg_list RPN */
#line 371 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    p->check_yield( yymsp[-3].minor.yy0->sloc );
                    yygotominor.yy59 = p->alloc< xec_expr_yield >( yymsp[-3].minor.yy0->sloc, yymsp[-1].minor.yy96 );
                    p->destroy( yymsp[-3].minor.yy0 );
                  yy_destructor(yypParser,7,&yymsp[-2].minor);
  yy_destructor(yypParser,18,&yymsp[0].minor);
}
#line 2479 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 37: /* expr_new ::= NEW expr_index LPN arg_list RPN */
#line 378 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy59 = p->alloc< xec_new_new >( yymsp[-4].minor.yy0->sloc, yymsp[-3].minor.yy59, yymsp[-1].minor.yy96 );
                    p->destroy( yymsp[-4].minor.yy0 );
                  yy_destructor(yypParser,7,&yymsp[-2].minor);
  yy_destructor(yypParser,18,&yymsp[0].minor);
}
#line 2489 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 38: /* expr_postfix ::= expr_yield */
      case 39: /* expr_postfix ::= expr_new */ yytestcase(yyruleno==39);
      case 45: /* expr_simple ::= expr_index */ yytestcase(yyruleno==45);
      case 46: /* expr_simple ::= expr_postfix */ yytestcase(yyruleno==46);
      case 49: /* expr_literal ::= expr_simple */ yytestcase(yyruleno==49);
      case 55: /* expr_suffix ::= expr_literal */ yytestcase(yyruleno==55);
      case 58: /* expr_unary ::= expr_suffix */ yytestcase(yyruleno==58);
      case 65: /* expr_mul ::= expr_unary */ yytestcase(yyruleno==65);
      case 70: /* expr_add ::= expr_mul */ yytestcase(yyruleno==70);
      case 73: /* expr_shift ::= expr_add */ yytestcase(yyruleno==73);
      case 77: /* expr_bitand ::= expr_shift */ yytestcase(yyruleno==77);
      case 79: /* expr_bitxor ::= expr_bitand */ yytestcase(yyruleno==79);
      case 81: /* expr_bitor ::= expr_bitxor */ yytestcase(yyruleno==81);
      case 83: /* expr_concat ::= expr_bitor */ yytestcase(yyruleno==83);
      case 85: /* expr_compare ::= expr_concat */ yytestcase(yyruleno==85);
      case 97: /* expr_and ::= expr_compare */ yytestcase(yyruleno==97);
      case 99: /* expr_xor ::= expr_and */ yytestcase(yyruleno==99);
      case 101: /* expr_or ::= expr_xor */ yytestcase(yyruleno==101);
      case 103: /* expr_nolbr ::= expr_or */ yytestcase(yyruleno==103);
      case 115: /* expr_value ::= expr_nolbr */ yytestcase(yyruleno==115);
      case 118: /* expr_lbody ::= expr_value */ yytestcase(yyruleno==118);
      case 124: /* expr_list ::= expr_lbody */ yytestcase(yyruleno==124);
      case 128: /* expr_assign ::= expr_list */ yytestcase(yyruleno==128);
      case 154: /* sexpr_lbody ::= expr_nolbr */ yytestcase(yyruleno==154);
      case 156: /* sexpr_list ::= expr_final */ yytestcase(yyruleno==156);
      case 157: /* sexpr_list ::= sexpr_lbody */ yytestcase(yyruleno==157);
      case 159: /* sexpr_assign ::= sexpr_list */ yytestcase(yyruleno==159);
      case 161: /* condition ::= expr_assign */ yytestcase(yyruleno==161);
      case 170: /* stmt ::= stmt_common */ yytestcase(yyruleno==170);
      case 173: /* stmt_reuse ::= stmt_common */ yytestcase(yyruleno==173);
      case 184: /* stmt_common ::= stmt_try */ yytestcase(yyruleno==184);
      case 207: /* for_cond ::= condition */ yytestcase(yyruleno==207);
      case 209: /* for_expr ::= expr_assign */ yytestcase(yyruleno==209);
#line 385 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy59 = yymsp[0].minor.yy59;
                }
#line 2528 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 40: /* expr_postfix ::= expr_index LPN arg_list RPN */
      case 44: /* expr_postfix ::= expr_postfix LPN arg_list RPN */ yytestcase(yyruleno==44);
#line 393 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy59 = p->alloc< xec_expr_call >(
                                yymsp[-3].minor.yy59->sloc, yymsp[-3].minor.yy59, yymsp[-1].minor.yy96, false );
                  yy_destructor(yypParser,7,&yymsp[-2].minor);
  yy_destructor(yypParser,18,&yymsp[0].minor);
}
#line 2539 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 42: /* expr_postfix ::= expr_postfix PERIOD LSQ expr_value RSQ */
#line 403 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy59 = p->alloc< xec_expr_inkey >(
                                yymsp[-4].minor.yy59->sloc, yymsp[-4].minor.yy59, yymsp[-1].minor.yy59 );
                  yy_destructor(yypParser,13,&yymsp[-3].minor);
  yy_destructor(yypParser,21,&yymsp[-2].minor);
  yy_destructor(yypParser,22,&yymsp[0].minor);
}
#line 2550 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 43: /* expr_postfix ::= expr_postfix LSQ expr_value RSQ */
#line 408 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy59 = p->alloc< xec_expr_index >(
                                yymsp[-3].minor.yy59->sloc, yymsp[-3].minor.yy59, yymsp[-1].minor.yy59 );
                  yy_destructor(yypParser,21,&yymsp[-2].minor);
  yy_destructor(yypParser,22,&yymsp[0].minor);
}
#line 2560 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 47: /* expr_simple ::= expr_index LPN arg_list RPN YIELD */
      case 48: /* expr_simple ::= expr_postfix LPN arg_list RPN YIELD */ yytestcase(yyruleno==48);
#line 433 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    p->check_yield( yymsp[-4].minor.yy59->sloc );
                    yygotominor.yy59 = p->alloc< xec_expr_call >(
                                yymsp[-4].minor.yy59->sloc, yymsp[-4].minor.yy59, yymsp[-2].minor.yy96, true );
                  yy_destructor(yypParser,7,&yymsp[-3].minor);
  yy_destructor(yypParser,18,&yymsp[-1].minor);
  yy_destructor(yypParser,6,&yymsp[0].minor);
}
#line 2573 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 50: /* expr_literal ::= NULL */
#line 450 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy59 = p->alloc< xec_expr_null >( yymsp[0].minor.yy0->sloc );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 2581 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 51: /* expr_literal ::= TRUE */
#line 455 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy59 = p->alloc< xec_expr_bool >( yymsp[0].minor.yy0->sloc, true );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 2589 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 52: /* expr_literal ::= FALSE */
#line 460 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy59 = p->alloc< xec_expr_bool >( yymsp[0].minor.yy0->sloc, false );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 2597 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 53: /* expr_literal ::= NUMBER */
#line 465 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    double number = p->parse_number( yymsp[0].minor.yy0 );
                    yygotominor.yy59 = p->alloc< xec_expr_number >( yymsp[0].minor.yy0->sloc, number );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 2606 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 54: /* expr_literal ::= STRING */
#line 471 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy59 = p->alloc< xec_expr_string >(
                            yymsp[0].minor.yy0->sloc, yymsp[0].minor.yy0->text, yymsp[0].minor.yy0->size );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 2615 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 56: /* expr_suffix ::= expr_suffix INCREMENT */
#line 482 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy59 = p->lvalue( yymsp[-1].minor.yy59 );
                    yygotominor.yy59 = p->alloc< xec_expr_postop >(
                             yymsp[-1].minor.yy59->sloc, XEC_ASTOP_POSTINC, yymsp[-1].minor.yy59 );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 2625 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 57: /* expr_suffix ::= expr_suffix DECREMENT */
#line 489 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy59 = p->lvalue( yymsp[-1].minor.yy59 );
                    yygotominor.yy59 = p->alloc< xec_expr_postop >(
                             yymsp[-1].minor.yy59->sloc, XEC_ASTOP_POSTDEC, yymsp[-1].minor.yy59 );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 2635 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 59: /* expr_unary ::= PLUS expr_unary */
#line 501 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy59 = p->alloc< xec_expr_unary >(
                             yymsp[-1].minor.yy0->sloc, XEC_ASTOP_POSITIVE, yymsp[0].minor.yy59 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 2644 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 60: /* expr_unary ::= MINUS expr_unary */
#line 507 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy59 = p->alloc< xec_expr_unary >(
                             yymsp[-1].minor.yy0->sloc, XEC_ASTOP_NEGATIVE, yymsp[0].minor.yy59 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 2653 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 61: /* expr_unary ::= XMARK expr_unary */
#line 513 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy59 = p->alloc< xec_expr_unary >(
                             yymsp[-1].minor.yy0->sloc, XEC_ASTOP_LOGICNOT, yymsp[0].minor.yy59 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 2662 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 62: /* expr_unary ::= TILDE expr_unary */
#line 519 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy59 = p->alloc< xec_expr_unary >(
                             yymsp[-1].minor.yy0->sloc, XEC_ASTOP_BITNOT, yymsp[0].minor.yy59 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 2671 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 63: /* expr_unary ::= INCREMENT expr_unary */
#line 525 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[0].minor.yy59 = p->lvalue( yymsp[0].minor.yy59 );
                    yygotominor.yy59 = p->alloc< xec_expr_preop >(
                             yymsp[-1].minor.yy0->sloc, XEC_ASTOP_PREINC, yymsp[0].minor.yy59 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 2681 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 64: /* expr_unary ::= DECREMENT expr_unary */
#line 532 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[0].minor.yy59 = p->lvalue( yymsp[0].minor.yy59 );
                    yygotominor.yy59 = p->alloc< xec_expr_preop >(
                             yymsp[-1].minor.yy0->sloc, XEC_ASTOP_PREDEC, yymsp[0].minor.yy59 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 2691 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 66: /* expr_mul ::= expr_mul ASTERISK expr_unary */
#line 544 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy59 = p->alloc< xec_expr_binary >( yymsp[-2].minor.yy59->sloc,
                                    XEC_ASTOP_MULTIPLY, yymsp[-2].minor.yy59, yymsp[0].minor.yy59 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 2700 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 67: /* expr_mul ::= expr_mul SOLIDUS expr_unary */
#line 550 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy59 = p->alloc< xec_expr_binary >( yymsp[-2].minor.yy59->sloc,
                                    XEC_ASTOP_DIVIDE, yymsp[-2].minor.yy59, yymsp[0].minor.yy59 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 2709 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 68: /* expr_mul ::= expr_mul PERCENT expr_unary */
#line 556 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy59 = p->alloc< xec_expr_binary >( yymsp[-2].minor.yy59->sloc,
                                    XEC_ASTOP_MODULUS, yymsp[-2].minor.yy59, yymsp[0].minor.yy59 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 2718 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 69: /* expr_mul ::= expr_mul TILDE expr_unary */
#line 562 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy59 = p->alloc< xec_expr_binary >( yymsp[-2].minor.yy59->sloc,
                                    XEC_ASTOP_INTDIV, yymsp[-2].minor.yy59, yymsp[0].minor.yy59 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 2727 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 71: /* expr_add ::= expr_add PLUS expr_mul */
#line 573 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy59 = p->alloc< xec_expr_binary >( yymsp[-2].minor.yy59->sloc,
                                    XEC_ASTOP_ADD, yymsp[-2].minor.yy59, yymsp[0].minor.yy59 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 2736 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 72: /* expr_add ::= expr_add MINUS expr_mul */
#line 579 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy59 = p->alloc< xec_expr_binary >( yymsp[-2].minor.yy59->sloc,
                                    XEC_ASTOP_SUBTRACT, yymsp[-2].minor.yy59, yymsp[0].minor.yy59 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 2745 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 74: /* expr_shift ::= expr_shift LSHIFT expr_add */
#line 590 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy59 = p->alloc< xec_expr_binary >( yymsp[-2].minor.yy59->sloc,
                                    XEC_ASTOP_LSHIFT, yymsp[-2].minor.yy59, yymsp[0].minor.yy59 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 2754 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 75: /* expr_shift ::= expr_shift LRSHIFT expr_add */
#line 596 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy59 = p->alloc< xec_expr_binary >( yymsp[-2].minor.yy59->sloc,
                                    XEC_ASTOP_LRSHIFT, yymsp[-2].minor.yy59, yymsp[0].minor.yy59 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 2763 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 76: /* expr_shift ::= expr_shift ARSHIFT expr_add */
#line 602 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy59 = p->alloc< xec_expr_binary >( yymsp[-2].minor.yy59->sloc,
                                    XEC_ASTOP_ARSHIFT, yymsp[-2].minor.yy59, yymsp[0].minor.yy59 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 2772 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 78: /* expr_bitand ::= expr_bitand AMPERSAND expr_shift */
#line 613 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy59 = p->alloc< xec_expr_binary >( yymsp[-2].minor.yy59->sloc,
                                    XEC_ASTOP_BITAND, yymsp[-2].minor.yy59, yymsp[0].minor.yy59 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 2781 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 80: /* expr_bitxor ::= expr_bitxor CARET expr_bitand */
#line 624 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy59 = p->alloc< xec_expr_binary >( yymsp[-2].minor.yy59->sloc,
                                    XEC_ASTOP_BITXOR, yymsp[-2].minor.yy59, yymsp[0].minor.yy59 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 2790 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 82: /* expr_bitor ::= expr_bitor VBAR expr_bitxor */
#line 635 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy59 = p->alloc< xec_expr_binary >( yymsp[-2].minor.yy59->sloc,
                                    XEC_ASTOP_BITOR, yymsp[-2].minor.yy59, yymsp[0].minor.yy59 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 2799 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 84: /* expr_concat ::= expr_concat CONCATENATE expr_bitor */
#line 646 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy59 = p->alloc< xec_expr_binary >( yymsp[-2].minor.yy59->sloc,
                                    XEC_ASTOP_CONCATENATE, yymsp[-2].minor.yy59, yymsp[0].minor.yy59 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 2808 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 86: /* expr_compare ::= expr_compare compare_op expr_concat */
#line 657 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy59 = p->compare( yymsp[-1].minor.yy285.token->sloc, yymsp[-1].minor.yy285.op, yymsp[-2].minor.yy59, yymsp[0].minor.yy59 );
                    p->destroy( yymsp[-1].minor.yy285.token );
                }
#line 2816 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 87: /* compare_op ::= EQUAL */
#line 663 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy285 = make_token_op( yymsp[0].minor.yy0, XEC_ASTOP_EQUAL );
                }
#line 2823 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 88: /* compare_op ::= NOTEQUAL */
#line 667 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy285 = make_token_op( yymsp[0].minor.yy0, XEC_ASTOP_NOTEQUAL );
                }
#line 2830 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 89: /* compare_op ::= LESS */
#line 671 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy285 = make_token_op( yymsp[0].minor.yy0, XEC_ASTOP_LESS );
                }
#line 2837 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 90: /* compare_op ::= GREATER */
#line 675 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy285 = make_token_op( yymsp[0].minor.yy0, XEC_ASTOP_GREATER );
                }
#line 2844 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 91: /* compare_op ::= LESSEQUAL */
#line 679 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy285 = make_token_op( yymsp[0].minor.yy0, XEC_ASTOP_LESSEQUAL );
                }
#line 2851 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 92: /* compare_op ::= GREATEREQUAL */
#line 683 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy285 = make_token_op( yymsp[0].minor.yy0, XEC_ASTOP_GREATEREQUAL );
                }
#line 2858 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 93: /* compare_op ::= IN */
#line 687 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy285 = make_token_op( yymsp[0].minor.yy0, XEC_ASTOP_IN );
                }
#line 2865 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 94: /* compare_op ::= NOTIN */
#line 691 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy285 = make_token_op( yymsp[0].minor.yy0, XEC_ASTOP_NOTIN );
                }
#line 2872 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 95: /* compare_op ::= IS */
#line 695 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy285 = make_token_op( yymsp[0].minor.yy0, XEC_ASTOP_IS );
                }
#line 2879 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 96: /* compare_op ::= NOTIS */
#line 699 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy285 = make_token_op( yymsp[0].minor.yy0, XEC_ASTOP_NOTIS );
                }
#line 2886 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 98: /* expr_and ::= expr_and LOGICAND expr_compare */
#line 709 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy59 = p->alloc< xec_expr_logical >( yymsp[-2].minor.yy59->sloc,
                                    XEC_ASTOP_LOGICAND, yymsp[-2].minor.yy59, yymsp[0].minor.yy59 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 2895 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 100: /* expr_xor ::= expr_xor LOGICXOR expr_and */
#line 720 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy59 = p->alloc< xec_expr_logical >( yymsp[-2].minor.yy59->sloc,
                                    XEC_ASTOP_LOGICXOR, yymsp[-2].minor.yy59, yymsp[0].minor.yy59 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 2904 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 102: /* expr_or ::= expr_or LOGICOR expr_xor */
#line 731 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy59 = p->alloc< xec_expr_logical >( yymsp[-2].minor.yy59->sloc,
                                    XEC_ASTOP_LOGICOR, yymsp[-2].minor.yy59, yymsp[0].minor.yy59 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 2913 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 104: /* expr_nolbr ::= expr_or QMARK expr_value COLON expr_value */
#line 744 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy59 = p->alloc< xec_expr_qmark >(
                            yymsp[-4].minor.yy59->sloc, yymsp[-4].minor.yy59, yymsp[-2].minor.yy59, yymsp[0].minor.yy59 );
                  yy_destructor(yypParser,58,&yymsp[-3].minor);
  yy_destructor(yypParser,16,&yymsp[-1].minor);
}
#line 2923 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 105: /* expr_nolbr ::= LSQ RSQ */
#line 749 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy59 = p->alloc< xec_new_array >( yymsp[-1].minor.yy0->sloc );
                    p->destroy( yymsp[-1].minor.yy0 );
                  yy_destructor(yypParser,22,&yymsp[0].minor);
}
#line 2932 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 106: /* expr_nolbr ::= LSQ value_list RSQ */
#line 754 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy59 = yymsp[-1].minor.yy240;
                    yygotominor.yy59->sloc = yymsp[-2].minor.yy0->sloc;
                    p->destroy( yymsp[-2].minor.yy0 );
                  yy_destructor(yypParser,22,&yymsp[0].minor);
}
#line 2942 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 107: /* expr_nolbr ::= newobj_scope LBR object_decls RBR */
#line 760 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy59 = yymsp[-3].minor.yy116;
                    p->close_scope( yymsp[-3].minor.yy116->scope );
                  yy_destructor(yypParser,14,&yymsp[-2].minor);
  yy_destructor(yypParser,119,&yymsp[-1].minor);
  yy_destructor(yypParser,15,&yymsp[0].minor);
}
#line 2953 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 108: /* expr_nolbr ::= newf_scope LBR stmt_list RBR */
#line 765 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy59 = yymsp[-3].minor.yy165;
                    p->close_scope( yymsp[-3].minor.yy165->scope );
                  yy_destructor(yypParser,14,&yymsp[-2].minor);
  yy_destructor(yypParser,115,&yymsp[-1].minor);
  yy_destructor(yypParser,15,&yymsp[0].minor);
}
#line 2964 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 109: /* newobj_scope ::= COLON */
#line 771 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy116 = p->object( yymsp[0].minor.yy0->sloc, nullptr, nullptr );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 2972 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 110: /* newobj_scope ::= COLON COLON expr_simple */
#line 776 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy116 = p->object( yymsp[-2].minor.yy0->sloc, nullptr, yymsp[0].minor.yy59 );
                    p->destroy( yymsp[-2].minor.yy0 );
                  yy_destructor(yypParser,16,&yymsp[-1].minor);
}
#line 2981 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 111: /* newf_scope ::= QMARK LPN param_list RPN */
#line 782 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy165 = p->function( yymsp[-3].minor.yy0->sloc,
                                    nullptr, yymsp[-1].minor.yy16, false, false );
                    p->destroy( yymsp[-3].minor.yy0 );
                  yy_destructor(yypParser,7,&yymsp[-2].minor);
  yy_destructor(yypParser,18,&yymsp[0].minor);
}
#line 2992 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 112: /* newf_scope ::= PERIOD QMARK LPN param_list RPN */
#line 788 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy165 = p->function( yymsp[-4].minor.yy0->sloc,
                                    nullptr, yymsp[-1].minor.yy16, false, true );
                    p->destroy( yymsp[-4].minor.yy0 );
                  yy_destructor(yypParser,58,&yymsp[-3].minor);
  yy_destructor(yypParser,7,&yymsp[-2].minor);
  yy_destructor(yypParser,18,&yymsp[0].minor);
}
#line 3004 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 113: /* newf_scope ::= QMARK LPN param_list RPN YIELD */
#line 794 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy165 = p->function( yymsp[-4].minor.yy0->sloc,
                                    nullptr, yymsp[-2].minor.yy16, true, false );
                    p->destroy( yymsp[-4].minor.yy0 );
                  yy_destructor(yypParser,7,&yymsp[-3].minor);
  yy_destructor(yypParser,18,&yymsp[-1].minor);
  yy_destructor(yypParser,6,&yymsp[0].minor);
}
#line 3016 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 114: /* newf_scope ::= PERIOD QMARK LPN param_list RPN YIELD */
#line 800 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy165 = p->function( yymsp[-5].minor.yy0->sloc,
                                    nullptr, yymsp[-2].minor.yy16, true, true );
                    p->destroy( yymsp[-5].minor.yy0 );
                  yy_destructor(yypParser,58,&yymsp[-4].minor);
  yy_destructor(yypParser,7,&yymsp[-3].minor);
  yy_destructor(yypParser,18,&yymsp[-1].minor);
  yy_destructor(yypParser,6,&yymsp[0].minor);
}
#line 3029 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 116: /* expr_value ::= LBR RBR */
#line 813 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy59 = p->alloc< xec_new_table >( yymsp[-1].minor.yy0->sloc );
                    p->destroy( yymsp[-1].minor.yy0 );
                  yy_destructor(yypParser,15,&yymsp[0].minor);
}
#line 3038 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 117: /* expr_value ::= LBR keyval_list RBR */
#line 818 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy59 = yymsp[-1].minor.yy71;
                    yygotominor.yy59->sloc = yymsp[-2].minor.yy0->sloc;
                    p->destroy( yymsp[-2].minor.yy0 );
                  yy_destructor(yypParser,15,&yymsp[0].minor);
}
#line 3048 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 119: /* expr_lbody ::= expr_lbody COMMA expr_value */
      case 155: /* sexpr_lbody ::= sexpr_lbody COMMA expr_value */ yytestcase(yyruleno==155);
#line 829 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    xec_expr_list* l;
                    yygotominor.yy59 = l = p->expr_list( yymsp[-2].minor.yy59 );
                    l->values.push_back( yymsp[0].minor.yy59 );
                  yy_destructor(yypParser,11,&yymsp[-1].minor);
}
#line 3059 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 120: /* expr_final ::= ELLIPSIS */
#line 837 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    p->check_vararg( yymsp[0].minor.yy0->sloc );
                    yygotominor.yy59 = p->alloc< xec_expr_vararg >( yymsp[0].minor.yy0->sloc );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3068 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 121: /* expr_final ::= expr_postfix ELLIPSIS */
#line 843 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy59 = p->unpack( yymsp[-1].minor.yy59 );
                  yy_destructor(yypParser,12,&yymsp[0].minor);
}
#line 3076 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 122: /* expr_final ::= expr_postfix LSQ RSQ ELLIPSIS */
#line 847 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy59 = p->alloc< xec_expr_unpack >( yymsp[-3].minor.yy59->sloc, yymsp[-3].minor.yy59 );
                  yy_destructor(yypParser,21,&yymsp[-2].minor);
  yy_destructor(yypParser,22,&yymsp[-1].minor);
  yy_destructor(yypParser,12,&yymsp[0].minor);
}
#line 3086 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 123: /* expr_list ::= expr_final */
#line 852 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    xec_expr_list* l;
                    yygotominor.yy59 = l = p->alloc< xec_expr_list >( yymsp[0].minor.yy59->sloc );
                    l->final = yymsp[0].minor.yy59;
                }
#line 3095 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 125: /* expr_list ::= expr_lbody COMMA expr_final */
      case 158: /* sexpr_list ::= sexpr_lbody COMMA expr_final */ yytestcase(yyruleno==158);
#line 862 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    xec_expr_list* l;
                    yygotominor.yy59 = l = p->expr_list( yymsp[-2].minor.yy59 );
                    l->final = yymsp[0].minor.yy59;
                  yy_destructor(yypParser,11,&yymsp[-1].minor);
}
#line 3106 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 126: /* arg_list ::= */
#line 869 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy96 = nullptr;
                }
#line 3113 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 127: /* arg_list ::= expr_list */
#line 873 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy96 = p->expr_list( yymsp[0].minor.yy59 );
                }
#line 3120 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 129: /* expr_assign ::= expr_lbody assign_op expr_assign */
      case 160: /* sexpr_assign ::= sexpr_lbody assign_op expr_assign */ yytestcase(yyruleno==160);
#line 882 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy59 = p->assign( yymsp[-1].minor.yy285.token->sloc, yymsp[-1].minor.yy285.op, yymsp[-2].minor.yy59, yymsp[0].minor.yy59 );
                    p->destroy( yymsp[-1].minor.yy285.token );
                }
#line 3129 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 130: /* assign_op ::= ASSIGN */
#line 889 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy285 = make_token_op( yymsp[0].minor.yy0, XEC_ASTOP_ASSIGN );
                }
#line 3136 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 131: /* assign_op ::= MULASSIGN */
#line 893 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy285 = make_token_op( yymsp[0].minor.yy0, XEC_ASTOP_MULASSIGN );
                }
#line 3143 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 132: /* assign_op ::= DIVASSIGN */
#line 897 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy285 = make_token_op( yymsp[0].minor.yy0, XEC_ASTOP_DIVASSIGN );
                }
#line 3150 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 133: /* assign_op ::= MODASSIGN */
#line 901 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy285 = make_token_op( yymsp[0].minor.yy0, XEC_ASTOP_MODASSIGN );
                }
#line 3157 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 134: /* assign_op ::= INTDIVASSIGN */
#line 905 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy285 = make_token_op( yymsp[0].minor.yy0, XEC_ASTOP_INTDIVASSIGN );
                }
#line 3164 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 135: /* assign_op ::= ADDASSIGN */
#line 909 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy285 = make_token_op( yymsp[0].minor.yy0, XEC_ASTOP_ADDASSIGN );
                }
#line 3171 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 136: /* assign_op ::= SUBASSIGN */
#line 913 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy285 = make_token_op( yymsp[0].minor.yy0, XEC_ASTOP_SUBASSIGN );
                }
#line 3178 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 137: /* assign_op ::= LSHIFTASSIGN */
#line 917 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy285 = make_token_op( yymsp[0].minor.yy0, XEC_ASTOP_LSHIFTASSIGN );
                }
#line 3185 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 138: /* assign_op ::= LRSHIFTASSIGN */
#line 921 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy285 = make_token_op( yymsp[0].minor.yy0, XEC_ASTOP_LRSHIFTASSIGN );
                }
#line 3192 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 139: /* assign_op ::= ARSHIFTASSIGN */
#line 925 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy285 = make_token_op( yymsp[0].minor.yy0, XEC_ASTOP_ARSHIFTASSIGN );
                }
#line 3199 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 140: /* assign_op ::= BITANDASSIGN */
#line 929 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy285 = make_token_op( yymsp[0].minor.yy0, XEC_ASTOP_BITANDASSIGN );
                }
#line 3206 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 141: /* assign_op ::= BITXORASSIGN */
#line 933 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy285 = make_token_op( yymsp[0].minor.yy0, XEC_ASTOP_BITXORASSIGN );
                }
#line 3213 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 142: /* assign_op ::= BITORASSIGN */
#line 937 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy285 = make_token_op( yymsp[0].minor.yy0, XEC_ASTOP_BITORASSIGN );
                }
#line 3220 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 143: /* value_lbody ::= expr_value */
#line 943 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy240 = p->alloc< xec_new_array >( -1 );
                    yygotominor.yy240->values.push_back( yymsp[0].minor.yy59 );
                }
#line 3228 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 144: /* value_lbody ::= value_lbody COMMA expr_value */
#line 948 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy240 = yymsp[-2].minor.yy240;
                    yygotominor.yy240->values.push_back( yymsp[0].minor.yy59 );
                  yy_destructor(yypParser,11,&yymsp[-1].minor);
}
#line 3237 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 145: /* value_list ::= expr_final */
#line 954 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy240 = p->alloc< xec_new_array >( -1 );
                    yygotominor.yy240->final = yymsp[0].minor.yy59;
                }
#line 3245 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 146: /* value_list ::= expr_final COMMA */
#line 959 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy240 = p->alloc< xec_new_array >( -1 );
                    yygotominor.yy240->final = yymsp[-1].minor.yy59;
                  yy_destructor(yypParser,11,&yymsp[0].minor);
}
#line 3254 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 147: /* value_list ::= value_lbody */
#line 964 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy240 = yymsp[0].minor.yy240;
                }
#line 3261 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 148: /* value_list ::= value_lbody COMMA */
#line 968 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy240 = yymsp[-1].minor.yy240;
                  yy_destructor(yypParser,11,&yymsp[0].minor);
}
#line 3269 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 149: /* value_list ::= value_lbody COMMA expr_final */
#line 972 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy240 = yymsp[-2].minor.yy240;
                    yygotominor.yy240->final = yymsp[0].minor.yy59;
                  yy_destructor(yypParser,11,&yymsp[-1].minor);
}
#line 3278 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 150: /* keyval_lbody ::= expr_value COLON expr_value */
#line 979 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy71 = new xec_new_table( -1 );
                    yygotominor.yy71->elements.emplace_back( yymsp[-2].minor.yy59, yymsp[0].minor.yy59 );
                  yy_destructor(yypParser,16,&yymsp[-1].minor);
}
#line 3287 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 151: /* keyval_lbody ::= keyval_lbody COMMA expr_value COLON expr_value */
#line 985 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy71 = yymsp[-4].minor.yy71;
                    yygotominor.yy71->elements.emplace_back( yymsp[-2].minor.yy59, yymsp[0].minor.yy59 );
                  yy_destructor(yypParser,11,&yymsp[-3].minor);
  yy_destructor(yypParser,16,&yymsp[-1].minor);
}
#line 3297 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 152: /* keyval_list ::= keyval_lbody */
#line 991 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy71 = yymsp[0].minor.yy71;
                }
#line 3304 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 153: /* keyval_list ::= keyval_lbody COMMA */
#line 995 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy71 = yymsp[-1].minor.yy71;
                  yy_destructor(yypParser,11,&yymsp[0].minor);
}
#line 3312 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 162: /* condition ::= VAR name_list ASSIGN expr_list */
#line 1057 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy59 = p->varstmt( yymsp[-3].minor.yy0->sloc, yymsp[-2].minor.yy59, yymsp[0].minor.yy59 );
                    p->destroy( yymsp[-3].minor.yy0 );
                  yy_destructor(yypParser,20,&yymsp[-1].minor);
}
#line 3321 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 164: /* stmt_list ::= stmt_list SEMICOLON */
#line 1070 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,115,&yymsp[-1].minor);
  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 3329 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 165: /* stmt_list ::= stmt_list stmt */
#line 1073 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    p->statement( yymsp[0].minor.yy59 );
                  yy_destructor(yypParser,115,&yymsp[-1].minor);
}
#line 3337 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 166: /* stmt_list ::= stmt_list decl_object */
#line 1077 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,115,&yymsp[-1].minor);
  yy_destructor(yypParser,118,&yymsp[0].minor);
}
#line 3345 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 167: /* stmt_list ::= stmt_list decl_func */
#line 1080 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,115,&yymsp[-1].minor);
  yy_destructor(yypParser,123,&yymsp[0].minor);
}
#line 3353 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 168: /* stmt_list ::= stmt_list decl_var */
#line 1083 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,115,&yymsp[-1].minor);
  yy_destructor(yypParser,124,&yymsp[0].minor);
}
#line 3361 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 169: /* stmt ::= stmt_block stmt_list RBR */
#line 1089 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy59 = yymsp[-2].minor.yy192;
                    p->close_scope( yymsp[-2].minor.yy192->scope );
                  yy_destructor(yypParser,115,&yymsp[-1].minor);
  yy_destructor(yypParser,15,&yymsp[0].minor);
}
#line 3371 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 171: /* stmt_block ::= LBR */
#line 1099 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy192 = p->alloc< xec_stmt_block >( yymsp[0].minor.yy0->sloc );
                    yygotominor.yy192->scope = p->block_scope( yygotominor.yy192 );
                    yygotominor.yy192->scope->block = yygotominor.yy192;
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3381 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 172: /* stmt_reuse ::= stmt_reblock stmt_list RBR */
#line 1109 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy59 = yymsp[-2].minor.yy192;
                  yy_destructor(yypParser,115,&yymsp[-1].minor);
  yy_destructor(yypParser,15,&yymsp[0].minor);
}
#line 3390 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 174: /* stmt_reblock ::= LBR */
#line 1118 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy192 = p->alloc< xec_stmt_block >( yymsp[0].minor.yy0->sloc );
                    p->get_scope()->block = yygotominor.yy192;
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3399 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 175: /* stmt_common ::= sexpr_assign SEMICOLON */
#line 1128 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy59 = yymsp[-1].minor.yy59;
                  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 3407 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 176: /* stmt_common ::= stmt_if LPN condition RPN stmt */
#line 1132 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-4].minor.yy10->condition = yymsp[-2].minor.yy59;
                    yymsp[-4].minor.yy10->iftrue    = yymsp[0].minor.yy59;
                    p->close_scope( yymsp[-4].minor.yy10->scope );
                    yygotominor.yy59 = yymsp[-4].minor.yy10;
                  yy_destructor(yypParser,7,&yymsp[-3].minor);
  yy_destructor(yypParser,18,&yymsp[-1].minor);
}
#line 3419 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 177: /* stmt_common ::= stmt_if LPN condition RPN stmt ELSE stmt */
#line 1140 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-6].minor.yy10->condition = yymsp[-4].minor.yy59;
                    yymsp[-6].minor.yy10->iftrue    = yymsp[-2].minor.yy59;
                    yymsp[-6].minor.yy10->iffalse   = yymsp[0].minor.yy59;
                    p->close_scope( yymsp[-6].minor.yy10->scope );
                    yygotominor.yy59 = yymsp[-6].minor.yy10;
                  yy_destructor(yypParser,7,&yymsp[-5].minor);
  yy_destructor(yypParser,18,&yymsp[-3].minor);
  yy_destructor(yypParser,2,&yymsp[-1].minor);
}
#line 3433 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 178: /* stmt_common ::= stmt_switch LPN condition RPN stmt_reblock stmt_list RPN */
#line 1149 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-6].minor.yy265->value     = yymsp[-4].minor.yy59;
                    yymsp[-6].minor.yy265->body      = yymsp[-2].minor.yy192;
                    p->close_switch( yymsp[-6].minor.yy265->scope );
                    yygotominor.yy59 = yymsp[-6].minor.yy265;
                  yy_destructor(yypParser,7,&yymsp[-5].minor);
  yy_destructor(yypParser,18,&yymsp[-3].minor);
  yy_destructor(yypParser,115,&yymsp[-1].minor);
  yy_destructor(yypParser,18,&yymsp[0].minor);
}
#line 3447 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 179: /* stmt_common ::= stmt_while LPN condition RPN stmt_reuse */
#line 1157 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-4].minor.yy108->condition = yymsp[-2].minor.yy59;
                    yymsp[-4].minor.yy108->body      = yymsp[0].minor.yy59;
                    p->close_scope( yymsp[-4].minor.yy108->scope );
                    yygotominor.yy59 = yymsp[-4].minor.yy108;
                  yy_destructor(yypParser,7,&yymsp[-3].minor);
  yy_destructor(yypParser,18,&yymsp[-1].minor);
}
#line 3459 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 180: /* stmt_common ::= stmt_doblock WHILE LPN expr_assign RPN SEMICOLON */
#line 1165 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-5].minor.yy117->condition = yymsp[-2].minor.yy59;
                    p->close_scope( yymsp[-5].minor.yy117->scope );
                    yygotominor.yy59 = yymsp[-5].minor.yy117;
                  yy_destructor(yypParser,71,&yymsp[-4].minor);
  yy_destructor(yypParser,7,&yymsp[-3].minor);
  yy_destructor(yypParser,18,&yymsp[-1].minor);
  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 3472 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 181: /* stmt_common ::= stmt_foreach stmt_reuse */
#line 1171 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy147->body      = yymsp[0].minor.yy59;
                    p->close_scope( yymsp[-1].minor.yy147->scope );
                    yygotominor.yy59 = yymsp[-1].minor.yy147;
                }
#line 3481 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 182: /* stmt_common ::= stmt_for stmt_reuse */
#line 1177 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy296->body      = yymsp[0].minor.yy59;
                    p->close_scope( yymsp[-1].minor.yy296->scope );
                    yygotominor.yy59 = yymsp[-1].minor.yy296;
                }
#line 3490 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 183: /* stmt_common ::= stmt_using LPN condition RPN stmt_reuse */
#line 1184 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-4].minor.yy55->uvalue    = yymsp[-2].minor.yy59;
                    yymsp[-4].minor.yy55->body      = yymsp[0].minor.yy59;
                    p->close_scope( yymsp[-4].minor.yy55->scope );
                    yygotominor.yy59 = yymsp[-4].minor.yy55;
                  yy_destructor(yypParser,7,&yymsp[-3].minor);
  yy_destructor(yypParser,18,&yymsp[-1].minor);
}
#line 3502 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 185: /* stmt_common ::= DELETE expr_lbody SEMICOLON */
#line 1195 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy59 = p->delstmt( yymsp[-2].minor.yy0->sloc, yymsp[-1].minor.yy59 );
                    p->destroy( yymsp[-2].minor.yy0 );
                  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 3511 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 186: /* stmt_common ::= CASE expr_value COLON */
#line 1200 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy59 = p->alloc< xec_stmt_case >( yymsp[-2].minor.yy0->sloc, yymsp[-1].minor.yy59 );
                    p->destroy( yymsp[-2].minor.yy0 );
                  yy_destructor(yypParser,16,&yymsp[0].minor);
}
#line 3520 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 187: /* stmt_common ::= DEFAULT COLON */
#line 1205 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy59 = p->alloc< xec_stmt_case >( yymsp[-1].minor.yy0->sloc, nullptr );
                    p->destroy( yymsp[-1].minor.yy0 );
                  yy_destructor(yypParser,16,&yymsp[0].minor);
}
#line 3529 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 188: /* stmt_common ::= CONTINUE SEMICOLON */
#line 1210 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    xec_ast_scope* target = p->continue_target( yymsp[-1].minor.yy0->sloc );
                    yygotominor.yy59 = p->alloc< xec_stmt_continue >(
                                yymsp[-1].minor.yy0->sloc, p->get_scope(), target );
                    target->continued = true;
                    p->destroy( yymsp[-1].minor.yy0 );
                  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 3541 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 189: /* stmt_common ::= BREAK SEMICOLON */
#line 1218 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    xec_ast_scope* target = p->break_target( yymsp[-1].minor.yy0->sloc );
                    yygotominor.yy59 = p->alloc< xec_stmt_break >(
                                yymsp[-1].minor.yy0->sloc, p->get_scope(), target );
                    p->destroy( yymsp[-1].minor.yy0 );
                  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 3552 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 190: /* stmt_common ::= RETURN SEMICOLON */
#line 1225 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy59 = p->alloc< xec_stmt_return >(
                                yymsp[-1].minor.yy0->sloc, p->get_scope(), nullptr );
                    p->destroy( yymsp[-1].minor.yy0 );
                  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 3562 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 191: /* stmt_common ::= RETURN expr_list SEMICOLON */
#line 1231 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy59 = p->alloc< xec_stmt_return >(
                                yymsp[-2].minor.yy0->sloc, p->get_scope(), yymsp[-1].minor.yy59 );
                    p->destroy( yymsp[-2].minor.yy0 );
                  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 3572 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 192: /* stmt_common ::= token_yield SEMICOLON */
#line 1237 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    p->check_yield( yymsp[-1].minor.yy115->sloc );
                    yygotominor.yy59 = p->alloc< xec_expr_yield >( yymsp[-1].minor.yy115->sloc, nullptr );
                    p->destroy( yymsp[-1].minor.yy115 );
                  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 3582 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 193: /* stmt_common ::= token_yield expr_list SEMICOLON */
#line 1243 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy59 = p->alloc< xec_expr_yield >( yymsp[-2].minor.yy115->sloc, yymsp[-1].minor.yy59 );
                    p->destroy( yymsp[-2].minor.yy115 );
                  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 3591 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 194: /* stmt_common ::= THROW expr_value SEMICOLON */
#line 1248 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy59 = p->alloc< xec_stmt_throw >( yymsp[-2].minor.yy0->sloc, yymsp[-1].minor.yy59 );
                    p->destroy( yymsp[-2].minor.yy0 );
                  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 3600 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 195: /* stmt_if ::= IF */
#line 1257 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy10 = p->alloc< xec_stmt_if >( yymsp[0].minor.yy0->sloc );
                    yygotominor.yy10->scope = p->block_scope( yygotominor.yy10 );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3609 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 196: /* stmt_switch ::= SWITCH */
#line 1264 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy265 = p->alloc< xec_stmt_switch >( yymsp[0].minor.yy0->sloc );
                    yygotominor.yy265->scope = p->block_scope( yygotominor.yy265 );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3618 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 197: /* stmt_while ::= WHILE */
#line 1271 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy108 = p->alloc< xec_stmt_while >( yymsp[0].minor.yy0->sloc );
                    yygotominor.yy108->scope = p->block_scope( yygotominor.yy108 );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3627 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 198: /* stmt_do ::= DO */
#line 1278 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy117 = p->alloc< xec_stmt_do >( yymsp[0].minor.yy0->sloc );
                    yygotominor.yy117->scope = p->block_scope( yygotominor.yy117 );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3636 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 199: /* stmt_doblock ::= stmt_do stmt_reuse */
#line 1285 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy117->body = yymsp[0].minor.yy59;
                    p->dowhile( yymsp[-1].minor.yy117->scope );
                    yygotominor.yy117 = yymsp[-1].minor.yy117;
                }
#line 3645 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 200: /* scope_for ::= FOR */
#line 1292 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    // open scope before we know the kind of statement.
                    yygotominor.yy236 = make_token_scope( yymsp[0].minor.yy0, p->block_scope( nullptr ) );
                }
#line 3653 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 201: /* stmt_foreach ::= scope_for LPN expr_lbody COLON expr_value RPN */
#line 1299 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy147 = p->foreachstmt( yymsp[-5].minor.yy236.token->sloc,
                            yymsp[-5].minor.yy236.scope, yymsp[-3].minor.yy59, yymsp[-1].minor.yy59, false, false );
                    p->destroy( yymsp[-5].minor.yy236.token );
                  yy_destructor(yypParser,7,&yymsp[-4].minor);
  yy_destructor(yypParser,16,&yymsp[-2].minor);
  yy_destructor(yypParser,18,&yymsp[0].minor);
}
#line 3665 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 202: /* stmt_foreach ::= scope_for LPN expr_lbody EACHKEY expr_value RPN */
#line 1306 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy147 = p->foreachstmt( yymsp[-5].minor.yy236.token->sloc,
                            yymsp[-5].minor.yy236.scope, yymsp[-3].minor.yy59, yymsp[-1].minor.yy59, false, true );
                    p->destroy( yymsp[-5].minor.yy236.token );
                  yy_destructor(yypParser,7,&yymsp[-4].minor);
  yy_destructor(yypParser,82,&yymsp[-2].minor);
  yy_destructor(yypParser,18,&yymsp[0].minor);
}
#line 3677 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 203: /* stmt_foreach ::= scope_for LPN VAR name_list COLON expr_value RPN */
#line 1313 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy147 = p->foreachstmt( yymsp[-6].minor.yy236.token->sloc,
                            yymsp[-6].minor.yy236.scope, yymsp[-3].minor.yy59, yymsp[-1].minor.yy59, true, false );
                    p->destroy( yymsp[-6].minor.yy236.token );
                  yy_destructor(yypParser,7,&yymsp[-5].minor);
  yy_destructor(yypParser,19,&yymsp[-4].minor);
  yy_destructor(yypParser,16,&yymsp[-2].minor);
  yy_destructor(yypParser,18,&yymsp[0].minor);
}
#line 3690 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 204: /* stmt_foreach ::= scope_for LPN VAR name_list EACHKEY expr_value RPN */
#line 1320 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy147 = p->foreachstmt( yymsp[-6].minor.yy236.token->sloc,
                            yymsp[-6].minor.yy236.scope, yymsp[-3].minor.yy59, yymsp[-1].minor.yy59, true, true );
                    p->destroy( yymsp[-6].minor.yy236.token );
                  yy_destructor(yypParser,7,&yymsp[-5].minor);
  yy_destructor(yypParser,19,&yymsp[-4].minor);
  yy_destructor(yypParser,82,&yymsp[-2].minor);
  yy_destructor(yypParser,18,&yymsp[0].minor);
}
#line 3703 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 205: /* stmt_for ::= scope_for LPN for_cond SEMICOLON for_expr SEMICOLON for_expr RPN */
#line 1330 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy296 = p->alloc< xec_stmt_for >( yymsp[-7].minor.yy236.token->sloc );
                    yymsp[-7].minor.yy236.scope->node = yygotominor.yy296;
                    yygotominor.yy296->scope        = yymsp[-7].minor.yy236.scope;
                    yygotominor.yy296->init         = yymsp[-5].minor.yy59;
                    yygotominor.yy296->condition    = yymsp[-3].minor.yy59;
                    yygotominor.yy296->update       = yymsp[-1].minor.yy59;
                    p->destroy( yymsp[-7].minor.yy236.token );
                  yy_destructor(yypParser,7,&yymsp[-6].minor);
  yy_destructor(yypParser,17,&yymsp[-4].minor);
  yy_destructor(yypParser,17,&yymsp[-2].minor);
  yy_destructor(yypParser,18,&yymsp[0].minor);
}
#line 3720 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 206: /* for_cond ::= */
      case 208: /* for_expr ::= */ yytestcase(yyruleno==208);
#line 1341 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy59 = nullptr;
                }
#line 3728 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 210: /* stmt_using ::= USING */
#line 1359 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy55 = p->alloc< xec_stmt_using >( yymsp[0].minor.yy0->sloc );
                    yygotominor.yy55->scope = p->block_scope( yygotominor.yy55 );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3737 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 211: /* stmt_try ::= try_catch */
#line 1369 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy59 = yymsp[0].minor.yy297;
                }
#line 3744 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 212: /* stmt_try ::= try_catch FINALLY stmt */
      case 213: /* stmt_try ::= try_block FINALLY stmt */ yytestcase(yyruleno==213);
#line 1373 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-2].minor.yy297->fstmt = yymsp[0].minor.yy59;
                    yygotominor.yy59 = yymsp[-2].minor.yy297;
                  yy_destructor(yypParser,5,&yymsp[-1].minor);
}
#line 3754 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 214: /* try_block ::= TRY stmt */
#line 1384 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy297 = p->alloc< xec_stmt_try >( yymsp[-1].minor.yy0->sloc, yymsp[0].minor.yy59 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 3762 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 215: /* try_catch ::= try_block stmt_catch stmt_reuse */
      case 216: /* try_catch ::= try_catch stmt_catch stmt_reuse */ yytestcase(yyruleno==216);
#line 1390 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy298->body = yymsp[0].minor.yy59;
                    p->close_scope( yymsp[-1].minor.yy298->scope );
                    yymsp[-2].minor.yy297->clist.push_back( yymsp[-1].minor.yy298 );
                    yygotominor.yy297 = yymsp[-2].minor.yy297;
                }
#line 3773 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 217: /* scope_catch ::= CATCH */
#line 1405 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    // open scope here ready for declarations.
                    yygotominor.yy236 = make_token_scope( yymsp[0].minor.yy0, p->block_scope( nullptr ) );
                }
#line 3781 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 218: /* stmt_catch ::= scope_catch LPN COLON expr_simple RPN */
#line 1411 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy298 = p->catchstmt( yymsp[-4].minor.yy236.token->sloc,
                            yymsp[-4].minor.yy236.scope, nullptr, yymsp[-1].minor.yy59, false );
                    p->destroy( yymsp[-4].minor.yy236.token );
                  yy_destructor(yypParser,7,&yymsp[-3].minor);
  yy_destructor(yypParser,16,&yymsp[-2].minor);
  yy_destructor(yypParser,18,&yymsp[0].minor);
}
#line 3793 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 219: /* stmt_catch ::= scope_catch LPN expr_value COLON expr_simple RPN */
#line 1418 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy298 = p->catchstmt( yymsp[-5].minor.yy236.token->sloc,
                            yymsp[-5].minor.yy236.scope, yymsp[-3].minor.yy59, yymsp[-1].minor.yy59, false );
                    p->destroy( yymsp[-5].minor.yy236.token );
                  yy_destructor(yypParser,7,&yymsp[-4].minor);
  yy_destructor(yypParser,16,&yymsp[-2].minor);
  yy_destructor(yypParser,18,&yymsp[0].minor);
}
#line 3805 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 220: /* stmt_catch ::= scope_catch LPN VAR name COLON expr_simple RPN */
#line 1425 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy298 = p->catchstmt( yymsp[-6].minor.yy236.token->sloc,
                            yymsp[-6].minor.yy236.scope, yymsp[-3].minor.yy281, yymsp[-1].minor.yy59, true );
                    p->destroy( yymsp[-6].minor.yy236.token );
                  yy_destructor(yypParser,7,&yymsp[-5].minor);
  yy_destructor(yypParser,19,&yymsp[-4].minor);
  yy_destructor(yypParser,16,&yymsp[-2].minor);
  yy_destructor(yypParser,18,&yymsp[0].minor);
}
#line 3818 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 221: /* stmt_catch ::= scope_catch LPN expr_value RPN */
#line 1431 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy298 = p->catchstmt( yymsp[-3].minor.yy236.token->sloc,
                            yymsp[-3].minor.yy236.scope, yymsp[-1].minor.yy59, nullptr, false );
                    p->destroy( yymsp[-3].minor.yy236.token );
                  yy_destructor(yypParser,7,&yymsp[-2].minor);
  yy_destructor(yypParser,18,&yymsp[0].minor);
}
#line 3829 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 222: /* stmt_catch ::= scope_catch LPN VAR name RPN */
#line 1437 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy298 = p->catchstmt( yymsp[-4].minor.yy236.token->sloc,
                            yymsp[-4].minor.yy236.scope, yymsp[-1].minor.yy281, nullptr, true );
                    p->destroy( yymsp[-4].minor.yy236.token );
                  yy_destructor(yypParser,7,&yymsp[-3].minor);
  yy_destructor(yypParser,19,&yymsp[-2].minor);
  yy_destructor(yypParser,18,&yymsp[0].minor);
}
#line 3841 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 223: /* token_yield ::= YIELD */
#line 1453 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy115 = yymsp[0].minor.yy0;
                }
#line 3848 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      default:
        break;
  };
  yygoto = yyRuleInfo[yyruleno].lhs;
  yysize = yyRuleInfo[yyruleno].nrhs;
  yypParser->yyidx -= yysize;
  yyact = yy_find_reduce_action(yymsp[-yysize].stateno,(YYCODETYPE)yygoto);
  if( yyact < YYNSTATE ){
#ifdef NDEBUG
    /* If we are not debugging and the reduce action popped at least
    ** one element off the stack, then we can push the new element back
    ** onto the stack here, and skip the stack overflow test in yy_shift().
    ** That gives a significant speed improvement. */
    if( yysize ){
      yypParser->yyidx++;
      yymsp -= yysize-1;
      yymsp->stateno = (YYACTIONTYPE)yyact;
      yymsp->major = (YYCODETYPE)yygoto;
      yymsp->minor = yygotominor;
    }else
#endif
    {
      yy_shift(yypParser,yyact,yygoto,&yygotominor);
    }
  }else{
    assert( yyact == YYNSTATE + YYNRULE + 1 );
    yy_accept(yypParser);
  }
}

/*
** The following code executes when the parse fails
*/
#ifndef YYNOERRORRECOVERY
static void yy_parse_failed(
  yyParser *yypParser           /* The parser */
){
  XecParseARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sFail!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser fails */
  XecParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}
#endif /* YYNOERRORRECOVERY */

/*
** The following code executes when a syntax error first occurs.
*/
static void yy_syntax_error(
  yyParser *yypParser,           /* The parser */
  int yymajor,                   /* The major type of the error token */
  YYMINORTYPE yyminor            /* The minor type of the error token */
){
  XecParseARG_FETCH;
#define TOKEN (yyminor.yy0)
#line 1465 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"

    p->get_root()->script->error( TOKEN->sloc,
            "unexpected %s", TOKEN->get_spelling().c_str() );
#line 3914 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
  XecParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/*
** The following is executed when the parser accepts
*/
static void yy_accept(
  yyParser *yypParser           /* The parser */
){
  XecParseARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sAccept!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser accepts */
  XecParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/* The main parser program.
** The first argument is a pointer to a structure obtained from
** "XecParseAlloc" which describes the current state of the parser.
** The second argument is the major token number.  The third is
** the minor token.  The fourth optional argument is whatever the
** user wants (and specified in the grammar) and is available for
** use by the action routines.
**
** Inputs:
** <ul>
** <li> A pointer to the parser (an opaque structure.)
** <li> The major token number.
** <li> The minor token number.
** <li> An option argument of a grammar-specified type.
** </ul>
**
** Outputs:
** None.
*/
void XecParse(
  void *yyp,                   /* The parser */
  int yymajor,                 /* The major token code number */
  XecParseTOKENTYPE yyminor       /* The value for the token */
  XecParseARG_PDECL               /* Optional %extra_argument parameter */
){
  YYMINORTYPE yyminorunion;
  int yyact;            /* The parser action. */
  int yyendofinput;     /* True if we are at the end of input */
#ifdef YYERRORSYMBOL
  int yyerrorhit = 0;   /* True if yymajor has invoked an error */
#endif
  yyParser *yypParser;  /* The parser */

  /* (re)initialize the parser, if necessary */
  yypParser = (yyParser*)yyp;
  if( yypParser->yyidx<0 ){
#if YYSTACKDEPTH<=0
    if( yypParser->yystksz <=0 ){
      /*memset(&yyminorunion, 0, sizeof(yyminorunion));*/
      yyminorunion = yyzerominor;
      yyStackOverflow(yypParser, &yyminorunion);
      return;
    }
#endif
    yypParser->yyidx = 0;
    yypParser->yyerrcnt = -1;
    yypParser->yystack[0].stateno = 0;
    yypParser->yystack[0].major = 0;
  }
  yyminorunion.yy0 = yyminor;
  yyendofinput = (yymajor==0);
  XecParseARG_STORE;

#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sInput %s\n",yyTracePrompt,yyTokenName[yymajor]);
  }
#endif

  do{
    yyact = yy_find_shift_action(yypParser,(YYCODETYPE)yymajor);
    if( yyact<YYNSTATE ){
      assert( !yyendofinput );  /* Impossible to shift the $ token */
      yy_shift(yypParser,yyact,yymajor,&yyminorunion);
      yypParser->yyerrcnt--;
      yymajor = YYNOCODE;
    }else if( yyact < YYNSTATE + YYNRULE ){
      yy_reduce(yypParser,yyact-YYNSTATE);
    }else{
      assert( yyact == YY_ERROR_ACTION );
#ifdef YYERRORSYMBOL
      int yymx;
#endif
#ifndef NDEBUG
      if( yyTraceFILE ){
        fprintf(yyTraceFILE,"%sSyntax Error!\n",yyTracePrompt);
      }
#endif
#ifdef YYERRORSYMBOL
      /* A syntax error has occurred.
      ** The response to an error depends upon whether or not the
      ** grammar defines an error token "ERROR".  
      **
      ** This is what we do if the grammar does define ERROR:
      **
      **  * Call the %syntax_error function.
      **
      **  * Begin popping the stack until we enter a state where
      **    it is legal to shift the error symbol, then shift
      **    the error symbol.
      **
      **  * Set the error count to three.
      **
      **  * Begin accepting and shifting new tokens.  No new error
      **    processing will occur until three tokens have been
      **    shifted successfully.
      **
      */
      if( yypParser->yyerrcnt<0 ){
        yy_syntax_error(yypParser,yymajor,yyminorunion);
      }
      yymx = yypParser->yystack[yypParser->yyidx].major;
      if( yymx==YYERRORSYMBOL || yyerrorhit ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE,"%sDiscard input token %s\n",
             yyTracePrompt,yyTokenName[yymajor]);
        }
#endif
        yy_destructor(yypParser, (YYCODETYPE)yymajor,&yyminorunion);
        yymajor = YYNOCODE;
      }else{
         while(
          yypParser->yyidx >= 0 &&
          yymx != YYERRORSYMBOL &&
          (yyact = yy_find_reduce_action(
                        yypParser->yystack[yypParser->yyidx].stateno,
                        YYERRORSYMBOL)) >= YYNSTATE
        ){
          yy_pop_parser_stack(yypParser);
        }
        if( yypParser->yyidx < 0 || yymajor==0 ){
          yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
          yy_parse_failed(yypParser);
          yymajor = YYNOCODE;
        }else if( yymx!=YYERRORSYMBOL ){
          YYMINORTYPE u2;
          u2.YYERRSYMDT = 0;
          yy_shift(yypParser,yyact,YYERRORSYMBOL,&u2);
        }
      }
      yypParser->yyerrcnt = 3;
      yyerrorhit = 1;
#elif defined(YYNOERRORRECOVERY)
      /* If the YYNOERRORRECOVERY macro is defined, then do not attempt to
      ** do any kind of error recovery.  Instead, simply invoke the syntax
      ** error routine and continue going as if nothing had happened.
      **
      ** Applications can set this macro (for example inside %include) if
      ** they intend to abandon the parse upon the first syntax error seen.
      */
      yy_syntax_error(yypParser,yymajor,yyminorunion);
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      yymajor = YYNOCODE;
      
#else  /* YYERRORSYMBOL is not defined */
      /* This is what we do if the grammar does not define ERROR:
      **
      **  * Report an error message, and throw away the input token.
      **
      **  * If the input token is $, then fail the parse.
      **
      ** As before, subsequent error messages are suppressed until
      ** three input tokens have been successfully shifted.
      */
      if( yypParser->yyerrcnt<=0 ){
        yy_syntax_error(yypParser,yymajor,yyminorunion);
      }
      yypParser->yyerrcnt = 3;
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      if( yyendofinput ){
        yy_parse_failed(yypParser);
      }
      yymajor = YYNOCODE;
#endif
    }
  }while( yymajor!=YYNOCODE && yypParser->yyidx>=0 );
  return;
}
