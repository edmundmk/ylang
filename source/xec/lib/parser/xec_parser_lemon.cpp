/* Driver template for the LEMON parser generator.
** The author disclaims copyright to this source code.
*/
/* First off, code is included that follows the "include" declaration
** in the input grammar file. */
#include <stdio.h>
#line 19 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"


#include <assert.h>
#include "xec_parser.h"
#include "xec_token.h"
#include "xec_ast.h"


struct xec_token_scope
{
    xec_token*      token;
    xec_ast_scope*  scope;
};


inline xec_token_scope make_token_scope(
                xec_token* token, xec_ast_scope* scope )
{
    xec_token_scope result;
    result.token = token;
    result.scope = scope;
    return result;
}


#line 89 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"



void xec_parser::destroy( xec_token* token )
{
    token->~xec_token();
    recycle_tokens.push_back( token );
}


#line 45 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
/* Next is all token values, in a form suitable for use by makeheaders.
** This section will be null unless lemon is run with the -m switch.
*/
/* 
** These constants (all generated automatically by the parser generator)
** specify the various kinds of tokens (terminals) that the parser
** understands. 
**
** Each symbol here is a terminal symbol in the grammar.
*/
/* Make sure the INTERFACE macro is defined.
*/
#ifndef INTERFACE
# define INTERFACE 1
#endif
/* The next thing included is series of defines which control
** various aspects of the generated parser.
**    YYCODETYPE         is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 terminals
**                       and nonterminals.  "int" is used otherwise.
**    YYNOCODE           is a number of type YYCODETYPE which corresponds
**                       to no legal terminal or nonterminal number.  This
**                       number is used to fill in empty slots of the hash 
**                       table.
**    YYFALLBACK         If defined, this indicates that one or more tokens
**                       have fall-back values which should be used if the
**                       original value of the token will not parse.
**    YYACTIONTYPE       is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 rules and
**                       states combined.  "int" is used otherwise.
**    XecParseTOKENTYPE     is the data type used for minor tokens given 
**                       directly to the parser from the tokenizer.
**    YYMINORTYPE        is the data type used for all minor tokens.
**                       This is typically a union of many types, one of
**                       which is XecParseTOKENTYPE.  The entry in the union
**                       for base tokens is called "yy0".
**    YYSTACKDEPTH       is the maximum depth of the parser's stack.  If
**                       zero the stack is dynamically sized using realloc()
**    XecParseARG_SDECL     A static variable declaration for the %extra_argument
**    XecParseARG_PDECL     A parameter declaration for the %extra_argument
**    XecParseARG_STORE     Code to store %extra_argument into yypParser
**    XecParseARG_FETCH     Code to extract %extra_argument from yypParser
**    YYNSTATE           the combined number of states.
**    YYNRULE            the number of rules in the grammar
**    YYERRORSYMBOL      is the code number of the error symbol.  If not
**                       defined, then do no error processing.
*/
#define YYCODETYPE unsigned char
#define YYNOCODE 155
#define YYACTIONTYPE unsigned short int
#define XecParseTOKENTYPE  xec_token* 
typedef union {
  int yyinit;
  XecParseTOKENTYPE yy0;
  xec_stmt_switch* yy3;
  xec_stmt_for* yy36;
  xec_token* yy43;
  xec_stmt_do* yy60;
  xec_stmt_if* yy76;
  xec_stmt_foreach* yy81;
  xec_ast_node* yy91;
  xec_new_table* yy92;
  xec_unqual_name* yy96;
  xec_stmt_block* yy97;
  xec_stmt_catch* yy98;
  xec_stmt_while* yy130;
  xec_expr_call* yy132;
  xec_new_object* yy134;
  xec_expr_yield* yy139;
  xec_token_scope yy190;
  xec_new_list* yy195;
  xec_unqual_list* yy203;
  xec_stmt_using* yy231;
  xec_ast_func* yy245;
  xec_stmt_try* yy252;
  xec_unqual_proto* yy271;
} YYMINORTYPE;
#ifndef YYSTACKDEPTH
#define YYSTACKDEPTH 100
#endif
#define XecParseARG_SDECL  xec_parser* p ;
#define XecParseARG_PDECL , xec_parser* p 
#define XecParseARG_FETCH  xec_parser* p  = yypParser->p 
#define XecParseARG_STORE yypParser->p  = p 
#define YYNSTATE 494
#define YYNRULE 241
#define YY_NO_ACTION      (YYNSTATE+YYNRULE+2)
#define YY_ACCEPT_ACTION  (YYNSTATE+YYNRULE+1)
#define YY_ERROR_ACTION   (YYNSTATE+YYNRULE)

/* The yyzerominor constant is used to initialize instances of
** YYMINORTYPE objects to zero. */
static const YYMINORTYPE yyzerominor = { 0 };

/* Define the yytestcase() macro to be a no-op if is not already defined
** otherwise.
**
** Applications can choose to define yytestcase() in the %include section
** to a macro that can assist in verifying code coverage.  For production
** code the yytestcase() macro should be turned off.  But it is useful
** for testing.
*/
#ifndef yytestcase
# define yytestcase(X)
#endif


/* Next are the tables used to determine what action to take based on the
** current state and lookahead token.  These tables are used to implement
** functions that take a state number and lookahead value and return an
** action integer.  
**
** Suppose the action integer is N.  Then the action is determined as
** follows
**
**   0 <= N < YYNSTATE                  Shift N.  That is, push the lookahead
**                                      token onto the stack and goto state N.
**
**   YYNSTATE <= N < YYNSTATE+YYNRULE   Reduce by rule N-YYNSTATE.
**
**   N == YYNSTATE+YYNRULE              A syntax error has occurred.
**
**   N == YYNSTATE+YYNRULE+1            The parser accepts its input.
**
**   N == YYNSTATE+YYNRULE+2            No such action.  Denotes unused
**                                      slots in the yy_action[] table.
**
** The action table is constructed as a single large table named yy_action[].
** Given state S and lookahead X, the action is computed as
**
**      yy_action[ yy_shift_ofst[S] + X ]
**
** If the index value yy_shift_ofst[S]+X is out of range or if the value
** yy_lookahead[yy_shift_ofst[S]+X] is not equal to X or if yy_shift_ofst[S]
** is equal to YY_SHIFT_USE_DFLT, it means that the action is not in the table
** and that yy_default[S] should be used instead.  
**
** The formula above is for computing the action when the lookahead is
** a terminal symbol.  If the lookahead is a non-terminal (as occurs after
** a reduce action) then the yy_reduce_ofst[] array is used in place of
** the yy_shift_ofst[] array and YY_REDUCE_USE_DFLT is used in place of
** YY_SHIFT_USE_DFLT.
**
** The following are the tables generated in this section:
**
**  yy_action[]        A single table containing all actions.
**  yy_lookahead[]     A table containing the lookahead for each entry in
**                     yy_action.  Used to detect hash collisions.
**  yy_shift_ofst[]    For each state, the offset into yy_action for
**                     shifting terminals.
**  yy_reduce_ofst[]   For each state, the offset into yy_action for
**                     shifting non-terminals after a reduce.
**  yy_default[]       Default action for each state.
*/
static const YYACTIONTYPE yy_action[] = {
 /*     0 */   147,  150,  158,  140,  139,  141,  142,  117,  115,  116,
 /*    10 */   108,  452,   13,  453,  143,  363,  242,  250,  283,   14,
 /*    20 */   222,   15,    9,  246,  127,  126,  474,   39,   30,  190,
 /*    30 */   303,  149,   35,  410,  193,  324,  364,  411,   84,  239,
 /*    40 */   241,  169,  360,   59,  171,  159,  330,  178,  339,  153,
 /*    50 */   176,  164,  247,  256,  249,  243,  145,  207,  205,  177,
 /*    60 */   383,  101,  402,  133,  403,  237,  100,  404,  406,  318,
 /*    70 */   426,  147,  150,  158,  140,  139,  141,  142,   20,   83,
 /*    80 */   422,  482,  346,  210,   24,  311,  138,  242,  250,  283,
 /*    90 */    14,  222,   15,    9,  246,  127,  126,  125,   34,   30,
 /*   100 */   191,  308,  149,   37,  410,  173,  324,  366,  411,   52,
 /*   110 */   239,  241,  169,  356,   67,  171,  159,  330,  178,  339,
 /*   120 */   153,  176,  164,  247,  256,  249,  243,  145,  207,  205,
 /*   130 */   177,  383,  465,  402,  133,  403,  237,  204,   18,  421,
 /*   140 */   425,  426,  147,  150,  158,  140,  139,  141,  142,   46,
 /*   150 */   310,  277,  736,    2,  347,  124,  143,  359,  242,  250,
 /*   160 */   283,   14,  222,   15,    9,  246,  127,  126,  486,   43,
 /*   170 */    30,  175,  276,  149,   36,  410,  189,  324,  357,  411,
 /*   180 */    73,  239,  241,  169,  136,   76,  171,  159,  330,  178,
 /*   190 */   339,  153,  176,  164,  247,  256,  249,  243,  145,  207,
 /*   200 */   205,  177,  383,  493,  402,  133,  403,  237,  427,  448,
 /*   210 */   406,   61,  426,  147,  150,  158,  140,  139,  141,  142,
 /*   220 */   106,  107,  105,  104,  103,  251,   40,  134,  138,  242,
 /*   230 */   250,  283,   14,  222,   15,    9,  246,  127,  126,  319,
 /*   240 */    35,   30,  193,  102,  149,   38,  410,  173,  324,   69,
 /*   250 */   411,   77,  239,  241,  169,  492,   57,  171,  159,  330,
 /*   260 */   178,  339,  153,  176,  164,  247,  256,  249,  243,  145,
 /*   270 */   207,  205,  177,  383,  466,  402,  133,  403,  237,  185,
 /*   280 */   155,  421,  423,  426,  147,  150,  158,  140,  139,  141,
 /*   290 */   142,  311,  331,  332,  349,   86,   80,   27,  130,  138,
 /*   300 */   242,  250,  283,   14,  222,   15,    9,  246,  127,  126,
 /*   310 */   320,   38,   30,  173,  491,  149,   42,  410,  187,  324,
 /*   320 */    78,  411,   67,  239,  241,  169,  467,   56,  171,  159,
 /*   330 */   330,  178,  339,  153,  176,  164,  247,  256,  249,  243,
 /*   340 */   145,  207,  205,  177,  383,  477,  402,  133,  403,  237,
 /*   350 */   185,  186,  421,  293,  426,  147,  150,  158,  140,  139,
 /*   360 */   141,  142,  478,  311,   45,  137,  460,  184,  179,  143,
 /*   370 */   130,  242,  250,  283,   14,  222,   15,    9,  246,  127,
 /*   380 */   126,  321,   42,   30,  187,   21,  149,   46,  410,  189,
 /*   390 */   324,   79,  411,   81,  239,  241,  169,  489,   53,  171,
 /*   400 */   159,  330,  178,  339,  153,  176,  164,  247,  256,  249,
 /*   410 */   243,  145,  207,  205,  177,  383,  490,  402,  133,  403,
 /*   420 */   237,  475,  449,  406,  312,  426,  147,  150,  158,  140,
 /*   430 */   139,  141,  142,  488,   63,   24,  311,  452,   16,  204,
 /*   440 */    12,  138,  242,  250,  283,   14,  222,   15,    9,  246,
 /*   450 */   127,  126,  322,   34,   30,  191,  468,  149,   46,  410,
 /*   460 */   189,  324,   75,  411,   70,  239,  241,  169,  476,   76,
 /*   470 */   171,  159,  330,  178,  339,  153,  176,  164,  247,  256,
 /*   480 */   249,  243,  145,  207,  205,  177,  383,  479,  402,  133,
 /*   490 */   403,  237,  469,  480,  421,  456,  426,  147,  150,  158,
 /*   500 */   140,  139,  141,  142,  353,  312,  481,  356,  473,  487,
 /*   510 */   354,  143,  470,  242,  250,  283,   14,  222,   15,    9,
 /*   520 */   246,  127,  126,  314,  483,   30,  471,  485,  149,  166,
 /*   530 */   410,  348,  324,   68,  411,  484,  239,  241,  169,  165,
 /*   540 */   359,  171,  159,  330,  178,  339,  153,  176,  164,  247,
 /*   550 */   256,  249,  243,  145,  207,  205,  177,  383,  355,  402,
 /*   560 */   133,  403,  237,  378,  416,  406,    5,  426,  147,  150,
 /*   570 */   158,  140,  139,  141,  142,    1,    3,    6,  119,  381,
 /*   580 */     4,  144,  143,  118,  242,  250,  283,   14,  222,   15,
 /*   590 */     9,  246,  127,  126,  418,  309,   30,  379,   25,  149,
 /*   600 */    29,  410,   88,  324,  370,  411,  323,  239,  241,  169,
 /*   610 */    74,  454,  171,  159,  330,  178,  339,  153,  176,  164,
 /*   620 */   247,  256,  249,  243,  145,  207,  205,  177,  383,   72,
 /*   630 */   402,  133,  403,  237,  123,  450,  406,   71,  426,  147,
 /*   640 */   150,  158,  140,  139,  141,  142,   50,   54,   87,  315,
 /*   650 */    99,   33,  446,  143,   22,  242,  250,  283,   14,  222,
 /*   660 */    15,    9,  246,  127,  126,   26,   28,   30,  316,  445,
 /*   670 */   149,  444,  410,  443,  324,  442,  411,  122,  239,  241,
 /*   680 */   169,  317,  436,  171,  159,  330,  178,  339,  153,  176,
 /*   690 */   164,  247,  256,  249,  243,  145,  207,  205,  177,  383,
 /*   700 */   435,  402,  133,  403,  237,  433,  417,  406,  431,  426,
 /*   710 */   147,  150,  158,  140,  139,  141,  142,  367,  181,    8,
 /*   720 */   455,  430,   44,  174,  429,  138,  242,  250,  283,   14,
 /*   730 */   222,   15,    9,  246,  127,  126,  305,  409,   30,  365,
 /*   740 */   412,  149,  428,  410,   41,  324,  413,  411,  458,  239,
 /*   750 */   241,  169,   23,  363,  171,  159,  330,  178,  339,  153,
 /*   760 */   176,  164,  247,  256,  249,  243,  145,  207,  205,  177,
 /*   770 */   383,  313,  402,  133,  403,  237,   17,   82,  421,  457,
 /*   780 */   426,  147,  150,  158,  140,  139,  141,  142,   11,   48,
 /*   790 */    19,  464,  737,  255,  737,  737,  138,  242,  250,  283,
 /*   800 */    14,  222,   15,    9,  246,  127,  126,  737,  737,   30,
 /*   810 */   737,  737,  149,  737,  410,  737,  324,  737,  411,  737,
 /*   820 */   239,  241,  169,  737,  737,  171,  159,  330,  178,  339,
 /*   830 */   153,  176,  164,  247,  256,  249,  243,  145,  207,  205,
 /*   840 */   177,  383,  737,  402,  133,  403,  237,  737,  737,  421,
 /*   850 */   424,  426,  147,  150,  158,  140,  139,  141,  142,   65,
 /*   860 */   737,  737,   45,  137,  737,  737,  737,  138,  242,  250,
 /*   870 */   283,   14,  222,   15,    9,  246,  127,  126,  737,  737,
 /*   880 */    30,  737,  737,  149,  737,  410,  737,  324,  737,  411,
 /*   890 */   737,  239,  241,  169,  737,  737,  171,  159,  330,  178,
 /*   900 */   339,  153,  176,  164,  247,  256,  249,  243,  145,  207,
 /*   910 */   205,  177,  383,  737,  402,  133,  403,  237,  384,   50,
 /*   920 */   421,  451,  426,  437,  737,    7,   60,  737,  213,   24,
 /*   930 */   311,  304,  737,  358,  407,  120,  408,  130,  737,  737,
 /*   940 */    32,  737,  125,  325,  326,  327,  328,  329,  114,  113,
 /*   950 */   111,  110,  109,  112,  737,  737,  737,  737,  737,  385,
 /*   960 */   386,  387,  388,  389,  390,  391,  392,  393,  394,  395,
 /*   970 */   396,  737,  737,  737,  737,  737,  737,  300,  375,   91,
 /*   980 */    89,   92,   95,   96,   98,   97,   90,   94,   93,  737,
 /*   990 */   737,  439,   51,   85,  236,  235,  232,   31,   66,  438,
 /*  1000 */   440,  441,  437,  447,    7,  737,  737,  213,   24,  311,
 /*  1010 */   304,  737,  420,  407,  120,  408,  130,  737,  737,   32,
 /*  1020 */   737,  125,  325,  326,  327,  328,  329,  114,  113,  111,
 /*  1030 */   110,  109,  112,  737,  192,   43,  737,  175,  737,  737,
 /*  1040 */   357,  210,   24,  311,  737,  737,   55,  362,   46,  737,
 /*  1050 */   189,  737,  737,  347,  124,  125,  300,  375,  737,   53,
 /*  1060 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  1070 */   439,   51,   85,  236,  235,  232,   31,   66,  438,  440,
 /*  1080 */   441,  437,  447,    7,  459,  737,  213,   24,  311,  304,
 /*  1090 */   737,  405,  407,  120,  408,  130,  737,  737,   32,  737,
 /*  1100 */   125,  325,  326,  327,  328,  329,  114,  113,  111,  110,
 /*  1110 */   109,  112,  737,  273,   39,  737,  190,  737,  737,  737,
 /*  1120 */   737,  737,  737,  737,  737,   58,  737,  737,  737,  737,
 /*  1130 */   737,  737,  737,  737,  737,  300,  375,  737,  737,  737,
 /*  1140 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  439,
 /*  1150 */    51,   85,  236,  235,  232,   31,   66,  438,  440,  441,
 /*  1160 */   437,  447,    7,  472,  737,  213,   24,  311,  304,  737,
 /*  1170 */   382,  407,  120,  408,  130,  737,  737,   32,  737,  125,
 /*  1180 */   325,  326,  327,  328,  329,  114,  113,  111,  110,  109,
 /*  1190 */   112,  737,  271,   43,  737,  175,  737,  737,  737,  737,
 /*  1200 */   737,  737,  737,  737,   55,  737,  737,  737,  737,  737,
 /*  1210 */   737,  737,  737,  737,  300,  375,  737,  737,  737,  737,
 /*  1220 */   737,  737,  737,  737,  737,  737,  737,  737,  439,   51,
 /*  1230 */    85,  236,  235,  232,   31,   66,  438,  440,  441,  437,
 /*  1240 */   447,    7,  459,  737,  213,   24,  311,  304,  419,  737,
 /*  1250 */   407,  120,  408,  130,  737,  737,   32,  737,  125,  325,
 /*  1260 */   326,  327,  328,  329,  114,  113,  111,  110,  109,  112,
 /*  1270 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  1280 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  1290 */   737,  737,  737,  300,  375,  737,  737,  737,  737,  737,
 /*  1300 */   737,  737,  737,  737,  737,  737,  737,  439,   51,   85,
 /*  1310 */   236,  235,  232,   31,   66,  438,  440,  441,  737,  447,
 /*  1320 */   494,  437,  737,    7,  737,  737,  213,   24,  311,  304,
 /*  1330 */   737,  737,  407,  120,  408,  130,  737,  737,   32,  737,
 /*  1340 */   125,  325,  326,  327,  328,  329,  114,  113,  111,  110,
 /*  1350 */   109,  112,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  1360 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  1370 */   737,  737,  737,  737,  737,  300,  375,  737,  737,  737,
 /*  1380 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  439,
 /*  1390 */    51,   85,  236,  235,  232,   31,   66,  438,  440,  441,
 /*  1400 */   437,  447,    7,  737,  737,  213,   24,  311,  304,  737,
 /*  1410 */   737,  407,  120,  408,  130,  737,  737,   32,  737,  125,
 /*  1420 */   325,  326,  327,  328,  329,  114,  113,  111,  110,  109,
 /*  1430 */   112,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  1440 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  1450 */   737,  737,  737,  737,  300,  375,  737,  737,  737,  737,
 /*  1460 */   737,  737,  737,  737,  737,  737,  737,  737,  439,   51,
 /*  1470 */    85,  236,  235,  232,   31,   66,  438,  440,  441,  437,
 /*  1480 */   447,    7,  737,  737,  213,   24,  311,  304,  737,  737,
 /*  1490 */   418,  120,  408,  130,  737,  737,   32,  737,  125,  325,
 /*  1500 */   326,  327,  328,  329,  114,  113,  111,  110,  109,  112,
 /*  1510 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  1520 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  1530 */   737,  737,  737,  300,  375,  737,  737,  737,  148,  150,
 /*  1540 */   158,  737,  139,  737,  142,  737,  737,  439,   51,   85,
 /*  1550 */   236,  235,  232,   31,   66,  438,  440,  441,  737,  447,
 /*  1560 */   737,   64,  737,  737,  384,   50,  737,  737,  737,  161,
 /*  1570 */   399,  737,  737,  324,  737,  737,  737,  415,  737,  169,
 /*  1580 */   414,  373,  171,  159,  330,  178,  339,  153,  176,  164,
 /*  1590 */   247,  256,  249,  243,  145,  207,  205,  177,  368,  132,
 /*  1600 */   377,  737,  737,  737,  245,  385,  386,  387,  388,  389,
 /*  1610 */   390,  391,  392,  393,  394,  395,  396,  148,  150,  158,
 /*  1620 */   737,  139,  737,  142,  737,  737,  737,  737,   62,  737,
 /*  1630 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  1640 */   737,  737,  737,  737,  737,  737,  737,  737,  161,  399,
 /*  1650 */   737,  737,  324,  737,  737,  737,  415,  737,  169,  414,
 /*  1660 */   373,  171,  159,  330,  178,  339,  153,  176,  164,  247,
 /*  1670 */   256,  249,  243,  145,  207,  205,  177,  368,  132,  377,
 /*  1680 */   148,  150,  158,  252,  139,  737,  142,  737,  737,  737,
 /*  1690 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  1700 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  1710 */   737,  161,  399,  737,  737,  324,  737,  737,  737,  415,
 /*  1720 */   737,  169,  414,  373,  171,  159,  330,  178,  339,  153,
 /*  1730 */   176,  164,  247,  256,  249,  243,  145,  207,  205,  177,
 /*  1740 */   368,  131,  377,  148,  150,  158,  214,  139,  737,  142,
 /*  1750 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  1760 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  1770 */   737,  737,  737,  737,  161,  399,  737,  737,  324,  737,
 /*  1780 */   737,  737,  415,  737,  169,  414,  373,  171,  159,  330,
 /*  1790 */   178,  339,  153,  176,  164,  247,  256,  249,  243,  145,
 /*  1800 */   207,  205,  177,  368,  132,  377,  148,  150,  158,  244,
 /*  1810 */   139,  737,  142,  737,  737,  737,  737,  737,  737,  737,
 /*  1820 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  1830 */   737,  737,  737,  737,  737,  737,  737,  161,  399,  737,
 /*  1840 */   737,  324,  737,  737,  737,  415,  737,  169,  414,  373,
 /*  1850 */   171,  159,  330,  178,  339,  153,  176,  164,  247,  256,
 /*  1860 */   249,  243,  145,  207,  205,  177,  368,  132,  377,  148,
 /*  1870 */   150,  158,  234,  139,  737,  142,  737,  737,  737,  737,
 /*  1880 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  1890 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  1900 */   161,  399,  737,  737,  324,  737,  737,  737,  737,  737,
 /*  1910 */   169,  212,  373,  171,  159,  330,  178,  339,  153,  176,
 /*  1920 */   164,  247,  256,  249,  243,  145,  207,  205,  177,  368,
 /*  1930 */   132,  377,  148,  150,  158,  737,  139,  737,  142,  737,
 /*  1940 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  1950 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  1960 */   737,  737,  737,  161,  399,  737,  737,  324,  737,  737,
 /*  1970 */   737,  737,  737,  169,  400,  373,  171,  159,  330,  178,
 /*  1980 */   339,  153,  176,  164,  247,  256,  249,  243,  145,  207,
 /*  1990 */   205,  177,  368,  132,  377,  148,  150,  158,  737,  139,
 /*  2000 */   737,  142,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  2010 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  2020 */   737,  737,  737,  737,  737,  737,  161,  399,  737,  737,
 /*  2030 */   324,  737,  737,  737,  737,  737,  169,  253,  373,  171,
 /*  2040 */   159,  330,  178,  339,  153,  176,  164,  247,  256,  249,
 /*  2050 */   243,  145,  207,  205,  177,  368,  132,  377,  148,  150,
 /*  2060 */   158,  737,  139,  737,  142,  737,  737,  737,  737,  737,
 /*  2070 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  2080 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  161,
 /*  2090 */   399,  737,  737,  324,  737,  737,  737,  737,  737,  169,
 /*  2100 */   211,  373,  171,  159,  330,  178,  339,  153,  176,  164,
 /*  2110 */   247,  256,  249,  243,  145,  207,  205,  177,  368,  132,
 /*  2120 */   377,  148,  150,  158,  737,  139,  737,  142,  737,  737,
 /*  2130 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  2140 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  2150 */   737,  737,  161,  399,  737,  737,  324,  737,  737,  737,
 /*  2160 */   737,  737,  169,  401,  373,  171,  159,  330,  178,  339,
 /*  2170 */   153,  176,  164,  247,  256,  249,  243,  145,  207,  205,
 /*  2180 */   177,  368,  132,  377,  148,  150,  158,  737,  139,  737,
 /*  2190 */   142,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  2200 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  2210 */   737,  737,  737,  737,  737,  161,  399,  737,  737,  324,
 /*  2220 */   737,  737,  737,  737,  737,  169,  297,  373,  171,  159,
 /*  2230 */   330,  178,  339,  153,  176,  164,  247,  256,  249,  243,
 /*  2240 */   145,  207,  205,  177,  368,  132,  377,  148,  150,  158,
 /*  2250 */   737,  139,  737,  142,  737,  737,  737,  737,  737,  737,
 /*  2260 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  2270 */   737,  737,  737,  737,  737,  737,  737,  737,  161,  230,
 /*  2280 */   737,  737,  324,  737,  737,  737,  737,  737,  169,  737,
 /*  2290 */   373,  171,  159,  330,  178,  339,  153,  176,  164,  247,
 /*  2300 */   256,  249,  243,  145,  207,  205,  177,  368,  203,  377,
 /*  2310 */   148,  150,  158,  737,  139,  737,  142,  737,  737,  737,
 /*  2320 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  2330 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  2340 */   737,  161,  228,  737,  737,  324,  737,  737,  737,  737,
 /*  2350 */   737,  169,  737,  373,  171,  159,  330,  178,  339,  153,
 /*  2360 */   176,  164,  247,  256,  249,  243,  145,  207,  205,  177,
 /*  2370 */   368,  203,  377,  737,  148,  150,  158,  737,  139,  737,
 /*  2380 */   142,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  2390 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  2400 */   737,  737,  737,  737,  737,  161,  361,  737,  737,  324,
 /*  2410 */   737,  737,  737,  737,  737,  169,  737,  373,  171,  159,
 /*  2420 */   330,  178,  339,  153,  176,  164,  247,  256,  249,  243,
 /*  2430 */   145,  207,  205,  177,  368,  203,  377,  148,  150,  158,
 /*  2440 */   737,  139,  737,  142,  737,  737,  737,  737,  737,  737,
 /*  2450 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  2460 */   737,  737,  737,  737,  737,  737,  737,  737,  161,  288,
 /*  2470 */   737,  737,  324,  737,  737,  737,  737,  737,  169,  737,
 /*  2480 */   373,  171,  159,  330,  178,  339,  153,  176,  164,  247,
 /*  2490 */   256,  249,  243,  145,  207,  205,  177,  368,  203,  377,
 /*  2500 */   737,  148,  150,  158,  737,  139,  737,  142,  737,  737,
 /*  2510 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  2520 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  2530 */   737,  737,  161,  380,  737,  737,  324,  737,  737,  737,
 /*  2540 */   737,  737,  169,  737,  373,  171,  159,  330,  178,  339,
 /*  2550 */   153,  176,  164,  247,  256,  249,  243,  145,  207,  205,
 /*  2560 */   177,  368,  203,  377,  148,  150,  158,  737,  139,  737,
 /*  2570 */   142,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  2580 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  2590 */   737,  737,  737,  737,  737,  161,  265,  737,  737,  324,
 /*  2600 */   737,  737,  737,  737,  737,  169,  737,  373,  171,  159,
 /*  2610 */   330,  178,  339,  153,  176,  164,  247,  256,  249,  243,
 /*  2620 */   145,  207,  205,  177,  368,  203,  377,  737,  148,  150,
 /*  2630 */   158,  737,  139,  737,  142,  737,  737,  737,  737,  737,
 /*  2640 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  2650 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  161,
 /*  2660 */   280,  737,  737,  324,  737,  737,  737,  737,  737,  169,
 /*  2670 */   737,  373,  171,  159,  330,  178,  339,  153,  176,  164,
 /*  2680 */   247,  256,  249,  243,  145,  207,  205,  177,  368,  203,
 /*  2690 */   377,  148,  150,  158,  737,  139,  737,  142,  737,  737,
 /*  2700 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  2710 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  2720 */   737,  737,  161,  278,  737,  737,  324,  737,  737,  737,
 /*  2730 */   737,  737,  169,  737,  373,  171,  159,  330,  178,  339,
 /*  2740 */   153,  176,  164,  247,  256,  249,  243,  145,  207,  205,
 /*  2750 */   177,  368,  203,  377,  737,  148,  150,  158,  737,  139,
 /*  2760 */   737,  142,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  2770 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  2780 */   737,  737,  737,  737,  737,  737,  161,  307,  737,  737,
 /*  2790 */   324,  737,  737,  737,  737,  737,  169,  737,  373,  171,
 /*  2800 */   159,  330,  178,  339,  153,  176,  164,  247,  256,  249,
 /*  2810 */   243,  145,  207,  205,  177,  368,  203,  377,  148,  150,
 /*  2820 */   158,  737,  139,  737,  142,  737,  737,  737,  737,  737,
 /*  2830 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  2840 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  161,
 /*  2850 */   272,  737,  737,  324,  737,  737,  737,  737,  737,  169,
 /*  2860 */   737,  373,  171,  159,  330,  178,  339,  153,  176,  164,
 /*  2870 */   247,  256,  249,  243,  145,  207,  205,  177,  368,  203,
 /*  2880 */   377,  737,  148,  150,  158,  737,  139,  737,  142,  737,
 /*  2890 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  2900 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  2910 */   737,  737,  737,  161,  275,  737,  737,  324,  737,  737,
 /*  2920 */   737,  737,  737,  169,  737,  373,  171,  159,  330,  178,
 /*  2930 */   339,  153,  176,  164,  247,  256,  249,  243,  145,  207,
 /*  2940 */   205,  177,  368,  203,  377,  148,  150,  158,  737,  139,
 /*  2950 */   737,  142,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  2960 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  2970 */   737,  737,  737,  737,  737,  737,  161,  267,  737,  737,
 /*  2980 */   324,  737,  737,  737,  737,  737,  169,  737,  373,  171,
 /*  2990 */   159,  330,  178,  339,  153,  176,  164,  247,  256,  249,
 /*  3000 */   243,  145,  207,  205,  177,  368,  203,  377,  737,  148,
 /*  3010 */   150,  158,  737,  139,  737,  142,  737,  737,  737,  737,
 /*  3020 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  3030 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  3040 */   161,  284,  737,  737,  324,  737,  737,  737,  737,  737,
 /*  3050 */   169,  737,  373,  171,  159,  330,  178,  339,  153,  176,
 /*  3060 */   164,  247,  256,  249,  243,  145,  207,  205,  177,  368,
 /*  3070 */   203,  377,  148,  150,  158,  737,  139,  737,  142,  737,
 /*  3080 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  3090 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  3100 */   737,  737,  737,  161,  258,  737,  737,  324,  737,  737,
 /*  3110 */   737,  737,  737,  169,  737,  373,  171,  159,  330,  178,
 /*  3120 */   339,  153,  176,  164,  247,  256,  249,  243,  145,  207,
 /*  3130 */   205,  177,  368,  203,  377,  737,  148,  150,  158,  737,
 /*  3140 */   139,  737,  142,  737,  737,  737,  737,  737,  737,  737,
 /*  3150 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  3160 */   737,  737,  737,  737,  737,  737,  737,  161,  215,  737,
 /*  3170 */   737,  324,  737,  737,  737,  737,  737,  169,  737,  373,
 /*  3180 */   171,  159,  330,  178,  339,  153,  176,  164,  247,  256,
 /*  3190 */   249,  243,  145,  207,  205,  177,  368,  203,  377,  148,
 /*  3200 */   150,  158,  737,  139,  737,  142,  737,  737,  737,  295,
 /*  3210 */   291,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  3220 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  3230 */   161,  737,  737,  737,  324,  737,  737,  737,  737,  737,
 /*  3240 */   169,  737,  461,  171,  159,  330,  178,  339,  153,  176,
 /*  3250 */   164,  247,  256,  249,  243,  145,  207,  205,  177,  368,
 /*  3260 */   737,  294,  737,  148,  150,  158,  737,  139,  737,  142,
 /*  3270 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  3280 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  3290 */   737,  737,  737,  737,  161,  302,  737,  737,  324,  737,
 /*  3300 */   737,  737,  737,  737,  169,  737,  373,  171,  159,  330,
 /*  3310 */   178,  339,  153,  176,  164,  247,  256,  249,  243,  145,
 /*  3320 */   207,  205,  177,  368,  203,  377,  152,  151,  167,  737,
 /*  3330 */   139,  737,  142,  737,  737,  737,  737,  737,  200,  196,
 /*  3340 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  3350 */   737,  737,  737,  737,  737,  384,   49,  163,  737,  737,
 /*  3360 */   737,  324,  737,  737,  737,  737,  737,  170,  737,  198,
 /*  3370 */   162,  160,  330,  178,  339,  153,  176,  164,  247,  256,
 /*  3380 */   249,  243,  145,  207,  205,  177,  368,  737,  148,  150,
 /*  3390 */   158,  737,  139,  737,  142,  737,  385,  386,  387,  388,
 /*  3400 */   389,  390,  391,  392,  393,  394,  395,  396,  737,  737,
 /*  3410 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  161,
 /*  3420 */   737,  737,  737,  324,  737,  737,  737,  737,  737,  169,
 /*  3430 */   737,  462,  171,  159,  330,  178,  339,  153,  176,  164,
 /*  3440 */   247,  256,  249,  243,  145,  207,  205,  177,  368,  737,
 /*  3450 */   463,  152,  151,  167,  737,  139,  737,  142,  737,  737,
 /*  3460 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  3470 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  3480 */   737,  737,  163,  737,  737,  737,  324,  152,  151,  167,
 /*  3490 */   737,  737,  170,  737,  373,  162,  160,  330,  178,  339,
 /*  3500 */   153,  176,  164,  247,  256,  249,  243,  145,  207,  205,
 /*  3510 */   177,  368,  183,  148,  150,  158,  737,  139,  163,  142,
 /*  3520 */   737,  737,  324,  737,  737,  737,  737,  737,  170,  737,
 /*  3530 */   737,  162,  160,  330,  178,  339,  153,  182,  737,  737,
 /*  3540 */   737,  737,  737,  737,  161,  737,  737,  737,  324,  737,
 /*  3550 */   737,  737,  737,  737,  169,  737,  374,  171,  159,  330,
 /*  3560 */   178,  339,  153,  176,  164,  247,  256,  249,  243,  145,
 /*  3570 */   207,  205,  177,  368,  737,  376,  148,  150,  158,  737,
 /*  3580 */   139,  737,  142,  737,  737,  737,  737,  737,  737,  737,
 /*  3590 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  3600 */   737,  737,  737,  737,  737,  737,  737,  161,  737,  737,
 /*  3610 */   737,  324,  152,  151,  167,  737,  737,  169,  737,  397,
 /*  3620 */   171,  159,  330,  178,  339,  153,  176,  164,  247,  256,
 /*  3630 */   249,  243,  145,  207,  205,  177,  368,  737,  398,  737,
 /*  3640 */   152,  151,  167,  163,  139,  737,  142,  324,  737,  737,
 /*  3650 */   737,  737,  737,  170,  737,  737,  162,  160,  330,  178,
 /*  3660 */   339,  153,  188,  737,  737,  737,  737,  737,  737,  737,
 /*  3670 */   737,  163,  737,  737,  737,  324,  737,  737,  737,  737,
 /*  3680 */   737,  170,  737,  227,  162,  160,  330,  178,  339,  153,
 /*  3690 */   176,  164,  247,  256,  249,  243,  145,  207,  205,  177,
 /*  3700 */   368,  152,  151,  167,  737,  139,  737,  142,  737,  737,
 /*  3710 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  3720 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  3730 */   737,  737,  163,  737,  737,  737,  324,  737,  737,  737,
 /*  3740 */   737,  737,  170,  737,  374,  162,  160,  330,  178,  339,
 /*  3750 */   153,  176,  164,  247,  256,  249,  243,  145,  207,  205,
 /*  3760 */   177,  368,  210,   24,  311,  152,  151,  167,  737,  139,
 /*  3770 */   737,  142,  737,  737,  737,  737,  125,  325,  326,  327,
 /*  3780 */   328,  329,  114,  113,  111,  110,  109,  112,  737,  737,
 /*  3790 */   737,  737,  737,  737,  737,  737,  163,  737,  737,  737,
 /*  3800 */   324,  737,  737,  737,  737,  737,  170,  737,  201,  162,
 /*  3810 */   160,  330,  178,  339,  153,  176,  164,  247,  256,  249,
 /*  3820 */   243,  145,  207,  205,  177,  368,  152,  151,  167,  737,
 /*  3830 */   139,  737,  142,  737,  737,  737,  737,  737,  737,  737,
 /*  3840 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  3850 */   737,  737,  737,  737,  737,  737,  737,  163,  737,  737,
 /*  3860 */   737,  324,  152,  151,  167,  737,  737,  170,  737,  292,
 /*  3870 */   162,  160,  330,  178,  339,  153,  176,  164,  247,  256,
 /*  3880 */   249,  243,  145,  207,  205,  177,  368,  737,  737,  737,
 /*  3890 */   152,  151,  167,  163,  139,  737,  142,  324,  737,  737,
 /*  3900 */   737,  737,  737,  170,  737,  737,  162,  160,  330,  178,
 /*  3910 */   339,  153,  176,  164,  254,  737,  737,  737,  737,  737,
 /*  3920 */   737,  163,  737,  737,  737,  324,  737,  737,  737,  737,
 /*  3930 */   737,  170,  737,  216,  162,  160,  330,  178,  339,  153,
 /*  3940 */   176,  164,  247,  256,  249,  243,  145,  207,  205,  177,
 /*  3950 */   368,  152,  151,  167,  737,  139,  737,  142,  737,  737,
 /*  3960 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  3970 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  3980 */   737,  737,  163,  737,  737,  737,  324,  152,  151,  167,
 /*  3990 */   737,  737,  170,  737,  296,  162,  160,  330,  178,  339,
 /*  4000 */   153,  176,  164,  247,  256,  249,  243,  145,  207,  205,
 /*  4010 */   177,  368,  737,  737,  737,  152,  151,  167,  163,  139,
 /*  4020 */   737,  142,  324,  737,  737,  737,  737,  737,  170,  737,
 /*  4030 */   737,  162,  160,  330,  178,  339,  153,  176,  168,  737,
 /*  4040 */   737,  737,  737,  737,  737,  737,  163,  737,  737,  737,
 /*  4050 */   324,  737,  737,  737,  737,  737,  170,  737,  260,  162,
 /*  4060 */   160,  330,  178,  339,  153,  176,  164,  247,  256,  249,
 /*  4070 */   243,  145,  207,  205,  177,  368,  152,  151,  167,  737,
 /*  4080 */   139,  737,  142,  737,  737,  737,  737,  737,  737,  737,
 /*  4090 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  4100 */   737,  737,  737,  737,  737,  737,  737,  163,  737,  737,
 /*  4110 */   737,  324,  152,  151,  167,  737,  737,  170,  737,  262,
 /*  4120 */   162,  160,  330,  178,  339,  153,  176,  164,  247,  256,
 /*  4130 */   249,  243,  145,  207,  205,  177,  368,  737,  737,  737,
 /*  4140 */   152,  151,  167,  163,  139,  737,  142,  324,  737,  737,
 /*  4150 */   737,  737,  737,  170,  737,  737,  162,  160,  330,  178,
 /*  4160 */   339,  153,  180,  737,  737,  737,  737,  737,  737,  737,
 /*  4170 */   737,  163,  737,  737,  737,  324,  737,  737,  737,  737,
 /*  4180 */   737,  170,  737,  281,  162,  160,  330,  178,  339,  153,
 /*  4190 */   176,  164,  247,  256,  249,  243,  145,  207,  205,  177,
 /*  4200 */   368,  152,  151,  167,  737,  139,  737,  142,  737,  737,
 /*  4210 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  4220 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  4230 */   737,  737,  163,  737,  737,  737,  324,  152,  151,  167,
 /*  4240 */   737,  737,  170,  737,  269,  162,  160,  330,  178,  339,
 /*  4250 */   153,  176,  164,  247,  256,  249,  243,  145,  207,  205,
 /*  4260 */   177,  368,  737,  737,  737,  152,  151,  167,  163,  139,
 /*  4270 */   737,  142,  324,  737,  737,  737,  737,  737,  170,  737,
 /*  4280 */   737,  162,  160,  330,  178,  339,  154,  737,  737,  737,
 /*  4290 */   737,  737,  737,  737,  737,  737,  163,  737,  737,  737,
 /*  4300 */   324,  737,  737,  737,  737,  737,  170,  737,  279,  162,
 /*  4310 */   160,  330,  178,  339,  153,  176,  164,  247,  256,  249,
 /*  4320 */   243,  145,  207,  205,  177,  368,  152,  151,  167,  737,
 /*  4330 */   139,  737,  142,  737,  737,  737,  737,  737,  737,  737,
 /*  4340 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  4350 */   737,  737,  737,  737,  737,  737,  737,  163,  737,  737,
 /*  4360 */   737,  324,  152,  151,  167,  737,  737,  170,  737,  259,
 /*  4370 */   162,  160,  330,  178,  339,  153,  176,  164,  247,  256,
 /*  4380 */   249,  243,  145,  207,  205,  177,  368,  737,  737,  737,
 /*  4390 */   152,  151,  167,  163,  139,  737,  142,  324,  737,  737,
 /*  4400 */   737,  737,  737,  170,  737,  737,  162,  160,  330,  178,
 /*  4410 */   339,  156,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  4420 */   737,  163,  737,  737,  737,  324,  737,  737,  737,  737,
 /*  4430 */   737,  170,  737,  223,  162,  160,  330,  178,  339,  153,
 /*  4440 */   176,  164,  247,  256,  249,  243,  145,  207,  205,  177,
 /*  4450 */   368,  152,  151,  167,  737,  139,  737,  142,  737,  737,
 /*  4460 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  4470 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  4480 */   737,  737,  163,  737,  737,  737,  324,  152,  151,  167,
 /*  4490 */   737,  737,  170,  737,  290,  162,  160,  330,  178,  339,
 /*  4500 */   153,  176,  164,  247,  256,  249,  243,  145,  207,  205,
 /*  4510 */   177,  368,  737,  737,  737,  152,  151,  167,  163,  139,
 /*  4520 */   737,  142,  324,  737,  737,  737,  737,  737,  170,  737,
 /*  4530 */   737,  162,  160,  330,  178,  337,  737,  737,  737,  737,
 /*  4540 */   737,  737,  737,  737,  737,  737,  163,  737,  737,  737,
 /*  4550 */   324,  737,  737,  737,  737,  737,  170,  737,  238,  162,
 /*  4560 */   160,  330,  178,  339,  153,  176,  164,  247,  256,  249,
 /*  4570 */   243,  145,  207,  205,  177,  368,  152,  151,  167,  737,
 /*  4580 */   139,  737,  142,  737,  737,  737,  737,  737,  737,  737,
 /*  4590 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  4600 */   737,  737,  737,  737,  737,  737,  737,  163,  737,  737,
 /*  4610 */   737,  324,  152,  151,  167,  737,  737,  170,  737,  206,
 /*  4620 */   162,  160,  330,  178,  339,  153,  176,  164,  247,  256,
 /*  4630 */   249,  243,  145,  207,  205,  177,  368,  737,  737,  737,
 /*  4640 */   152,  151,  167,  163,  139,  737,  142,  324,  737,  737,
 /*  4650 */   737,  737,  737,  170,  737,  737,  162,  160,  330,  178,
 /*  4660 */   343,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  4670 */   737,  163,  737,  737,  737,  324,  737,  737,  737,  737,
 /*  4680 */   737,  170,  737,  197,  162,  160,  330,  178,  339,  153,
 /*  4690 */   176,  164,  247,  256,  249,  243,  145,  207,  205,  177,
 /*  4700 */   368,  152,  151,  167,  737,  139,  737,  142,  737,  737,
 /*  4710 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  4720 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  4730 */   737,  737,  163,  737,  737,  737,  324,  152,  151,  167,
 /*  4740 */   737,  737,  170,  737,  221,  162,  160,  330,  178,  339,
 /*  4750 */   153,  176,  164,  247,  256,  249,  243,  145,  207,  205,
 /*  4760 */   177,  368,  737,  737,  737,  152,  151,  167,  163,  139,
 /*  4770 */   737,  142,  324,  737,  737,  737,  737,  737,  170,  737,
 /*  4780 */   737,  162,  160,  330,  178,  341,  737,  737,  737,  737,
 /*  4790 */   737,  737,  737,  737,  737,  737,  163,  737,  737,  737,
 /*  4800 */   324,  737,  737,  737,  737,  737,  170,  737,  344,  162,
 /*  4810 */   160,  330,  178,  339,  153,  176,  164,  247,  256,  249,
 /*  4820 */   243,  145,  207,  205,  177,  368,  152,  151,  167,  737,
 /*  4830 */   139,  737,  142,  737,  737,  737,  737,  737,  737,  737,
 /*  4840 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  4850 */   737,  737,  737,  737,  737,  737,  737,  163,  737,  737,
 /*  4860 */   737,  324,  152,  151,  167,  737,  737,  170,  737,  218,
 /*  4870 */   162,  160,  330,  178,  339,  153,  176,  164,  247,  256,
 /*  4880 */   249,  243,  145,  207,  205,  177,  368,  737,  737,  737,
 /*  4890 */   152,  151,  167,  163,  139,  737,  142,  324,  737,  737,
 /*  4900 */   737,  737,  737,  170,  737,  737,  162,  160,  330,  178,
 /*  4910 */   335,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  4920 */   737,  163,  737,  737,  737,  324,  737,  737,  737,  737,
 /*  4930 */   737,  170,  737,  282,  162,  160,  330,  178,  339,  153,
 /*  4940 */   176,  164,  247,  256,  249,  243,  145,  207,  205,  177,
 /*  4950 */   368,  152,  151,  167,  737,  139,  737,  142,  737,  737,
 /*  4960 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  4970 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  4980 */   737,  737,  163,  737,  737,  737,  324,  152,  151,  167,
 /*  4990 */   737,  737,  170,  737,  219,  162,  160,  330,  178,  339,
 /*  5000 */   153,  176,  164,  247,  256,  249,  243,  145,  207,  205,
 /*  5010 */   177,  368,  737,  737,  737,  152,  151,  167,  163,  139,
 /*  5020 */   737,  142,  324,  737,  737,  737,  737,  737,  170,  737,
 /*  5030 */   737,  162,  160,  330,  178,  342,  737,  737,  737,  737,
 /*  5040 */   737,  737,  737,  737,  737,  737,  163,  737,  737,  737,
 /*  5050 */   324,  737,  737,  737,  737,  737,  170,  737,  202,  162,
 /*  5060 */   160,  330,  178,  339,  153,  176,  164,  247,  256,  249,
 /*  5070 */   243,  145,  207,  205,  177,  368,  152,  151,  167,  737,
 /*  5080 */   139,  737,  142,  737,  737,  737,  737,  737,  737,  737,
 /*  5090 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  5100 */   737,  737,  737,  737,  737,  737,  737,  163,  737,  737,
 /*  5110 */   737,  324,  152,  151,  167,  737,  737,  170,  737,  289,
 /*  5120 */   162,  160,  330,  178,  339,  153,  176,  164,  247,  256,
 /*  5130 */   249,  243,  145,  207,  205,  177,  368,  737,  737,  737,
 /*  5140 */   152,  151,  167,  163,  139,  737,  142,  324,  737,  737,
 /*  5150 */   737,  737,  737,  170,  737,  737,  162,  160,  330,  178,
 /*  5160 */   334,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  5170 */   737,  163,  737,  737,  737,  324,  737,  737,  737,  737,
 /*  5180 */   737,  170,  737,  371,  162,  160,  330,  178,  339,  153,
 /*  5190 */   176,  164,  247,  256,  249,  243,  145,  207,  205,  177,
 /*  5200 */   368,  152,  151,  167,  737,  139,  737,  142,  737,  737,
 /*  5210 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  5220 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  5230 */   737,  737,  163,  737,  737,  737,  324,  152,  151,  167,
 /*  5240 */   737,  737,  170,  737,  261,  162,  160,  330,  178,  339,
 /*  5250 */   153,  176,  164,  247,  256,  249,  243,  145,  207,  205,
 /*  5260 */   177,  368,  737,  737,  737,  152,  151,  167,  163,  139,
 /*  5270 */   737,  142,  324,  737,  737,  737,  737,  737,  170,  737,
 /*  5280 */   737,  162,  160,  330,  178,  333,  737,  737,  737,  737,
 /*  5290 */   737,  737,  737,  737,  737,  737,  163,  737,  737,  737,
 /*  5300 */   324,  737,  737,  737,  737,  737,  170,  737,  372,  162,
 /*  5310 */   160,  330,  178,  339,  153,  176,  164,  247,  256,  249,
 /*  5320 */   243,  145,  207,  205,  177,  368,  210,   24,  311,  304,
 /*  5330 */   737,  172,   47,  120,  140,  128,  141,  737,   32,  737,
 /*  5340 */   125,  325,  326,  327,  328,  329,  114,  113,  111,  110,
 /*  5350 */   109,  112,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  5360 */   737,  737,  157,  737,  351,  737,  737,  350,  352,  263,
 /*  5370 */   266,  270,  737,  737,  737,  300,  375,  737,  737,  737,
 /*  5380 */   737,  737,  210,   24,  311,  304,  737,  737,   47,  120,
 /*  5390 */   737,  129,  737,  737,   32,  737,  125,  325,  326,  327,
 /*  5400 */   328,  329,  114,  113,  111,  110,  109,  112,  737,  737,
 /*  5410 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  5420 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  5430 */   737,  300,  375,  152,  151,  167,  737,  737,  210,   24,
 /*  5440 */   311,  304,  737,  737,   47,  120,  432,  737,  737,  737,
 /*  5450 */    32,  737,  125,  325,  326,  327,  328,  329,  114,  113,
 /*  5460 */   111,  110,  109,  112,  163,  737,  737,  737,  324,  737,
 /*  5470 */   737,  737,  737,  737,  170,  737,  737,  162,  160,  330,
 /*  5480 */   178,  339,  153,  176,  164,  247,  248,  300,  375,  152,
 /*  5490 */   151,  167,  737,  737,  210,   24,  311,  304,  737,  737,
 /*  5500 */    47,  120,  737,  737,  737,  737,   32,  345,  125,  325,
 /*  5510 */   326,  327,  328,  329,  114,  113,  111,  110,  109,  112,
 /*  5520 */   163,  737,  737,  737,  324,  737,  737,  737,  737,  737,
 /*  5530 */   170,  737,  737,  162,  160,  330,  178,  336,  737,  737,
 /*  5540 */   737,  737,  737,  300,  375,  152,  151,  167,  737,  737,
 /*  5550 */   210,   24,  311,  304,  737,  737,   47,  120,  434,  737,
 /*  5560 */   737,  737,   32,  737,  125,  325,  326,  327,  328,  329,
 /*  5570 */   114,  113,  111,  110,  109,  112,  163,  737,  737,  737,
 /*  5580 */   324,  737,  737,  737,  737,  737,  170,  737,  737,  162,
 /*  5590 */   160,  330,  178,  338,  737,  737,  737,  737,  737,  300,
 /*  5600 */   375,  152,  151,  167,  737,  737,  210,   24,  311,  304,
 /*  5610 */   737,  737,   47,  120,  737,  737,  737,  737,   32,  737,
 /*  5620 */   125,  325,  326,  327,  328,  329,  114,  113,  111,  110,
 /*  5630 */   109,  112,  163,  737,  737,  737,  324,  737,  737,  737,
 /*  5640 */   737,  737,  170,  737,  737,  162,  160,  330,  178,  340,
 /*  5650 */   737,  737,  737,  737,  737,  300,  375,  152,  151,  167,
 /*  5660 */   737,  737,  210,   24,  311,  304,  737,  737,   47,  121,
 /*  5670 */   737,  135,  737,  737,   32,  737,  125,  325,  326,  327,
 /*  5680 */   328,  329,  114,  113,  111,  110,  109,  112,  163,  737,
 /*  5690 */   737,  737,  199,  737,  737,  737,  737,  737,  170,  737,
 /*  5700 */   737,  162,  160,  737,  737,  737,  737,  737,  737,  737,
 /*  5710 */   737,  300,  737,  152,  151,  167,  737,  737,  210,   24,
 /*  5720 */   311,  304,  737,  737,   47,  120,  737,  737,  737,  737,
 /*  5730 */    32,  287,  125,  325,  326,  327,  328,  329,  114,  113,
 /*  5740 */   111,  110,  109,  112,  163,  737,  737,  737,  268,  737,
 /*  5750 */   737,  737,  737,  737,  170,  737,  737,  162,  160,  737,
 /*  5760 */   737,  737,  737,  737,  737,  737,  737,  300,  737,  152,
 /*  5770 */   151,  167,  737,  737,  210,   24,  311,  304,  737,  737,
 /*  5780 */    47,  120,  737,  737,  737,  737,   32,  257,  125,  325,
 /*  5790 */   326,  327,  328,  329,  114,  113,  111,  110,  109,  112,
 /*  5800 */   163,  737,  737,  737,  306,  737,  737,  737,  737,  737,
 /*  5810 */   170,  737,  737,  162,  160,  737,  737,  737,  737,  737,
 /*  5820 */   737,  737,  737,  300,  737,  737,  152,  151,  167,  737,
 /*  5830 */   210,   24,  311,  304,  737,  369,   47,  120,  737,  737,
 /*  5840 */   737,  737,   32,  737,  125,  325,  326,  327,  328,  329,
 /*  5850 */   114,  113,  111,  110,  109,  112,  737,  163,  152,  151,
 /*  5860 */   167,  298,  737,  737,  737,  737,  737,  170,  737,  737,
 /*  5870 */   162,  160,  737,  737,  737,  737,  737,  737,  737,  300,
 /*  5880 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  163,
 /*  5890 */   737,  737,  737,  324,  737,  737,  737,  737,  737,  170,
 /*  5900 */   737,  737,  162,  160,  330,  178,  339,  153,  176,  164,
 /*  5910 */   247,  256,  249,  243,  145,  207,  301,  210,   24,  311,
 /*  5920 */   304,  737,  737,   47,  120,  737,  152,  151,  167,   32,
 /*  5930 */   264,  125,  325,  326,  327,  328,  329,  114,  113,  111,
 /*  5940 */   110,  109,  112,  737,  737,  737,  737,  737,  737,  737,
 /*  5950 */   737,  737,  737,  737,  737,  737,  737,  163,  737,  737,
 /*  5960 */   737,  194,  737,  737,  737,  737,  300,  170,  737,  737,
 /*  5970 */   162,  160,  737,  210,   24,  311,  304,  737,  737,   47,
 /*  5980 */   120,  737,  737,  737,  737,   32,  286,  125,  325,  326,
 /*  5990 */   327,  328,  329,  114,  113,  111,  110,  109,  112,  737,
 /*  6000 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  6010 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  6020 */   737,  737,  300,  737,  737,  737,  737,  737,  737,  210,
 /*  6030 */    24,  311,  304,  737,  737,   47,  120,  737,  737,  737,
 /*  6040 */   737,   32,  274,  125,  325,  326,  327,  328,  329,  114,
 /*  6050 */   113,  111,  110,  109,  112,  737,  737,  737,  737,  737,
 /*  6060 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  6070 */   737,  737,  737,  737,  737,  737,  737,  737,  300,  737,
 /*  6080 */   737,  737,  737,  737,  737,  210,   24,  311,  304,  737,
 /*  6090 */   737,   47,  120,  737,  737,  737,  737,   32,  285,  125,
 /*  6100 */   325,  326,  327,  328,  329,  114,  113,  111,  110,  109,
 /*  6110 */   112,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  6120 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  6130 */   737,  737,  737,  737,  300,  737,  737,  737,  737,  737,
 /*  6140 */   737,  210,   24,  311,  304,  737,  737,   47,  120,  737,
 /*  6150 */   737,  737,  737,   32,  299,  125,  325,  326,  327,  328,
 /*  6160 */   329,  114,  113,  111,  110,  109,  112,  737,  737,  737,
 /*  6170 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  6180 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  6190 */   300,  737,  737,  737,  737,  737,  737,  210,   24,  311,
 /*  6200 */   304,  737,  737,   47,  120,  737,  737,  737,  737,   32,
 /*  6210 */   737,  125,  325,  326,  327,  328,  329,  114,  113,  111,
 /*  6220 */   110,  109,  112,  737,  737,  152,  151,  167,  737,  737,
 /*  6230 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  6240 */   737,  737,  737,  737,  737,  737,  300,  737,  737,  737,
 /*  6250 */   737,  737,  737,  737,  737,  737,  163,  737,  737,  737,
 /*  6260 */   324,  737,  737,  737,  737,  737,  170,  737,  737,  162,
 /*  6270 */   160,  330,  178,  339,  153,  176,  164,  247,  256,  249,
 /*  6280 */   243,  145,  195,  152,  151,  167,  737,  737,  737,  737,
 /*  6290 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  6300 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  152,
 /*  6310 */   151,  167,  737,  737,  163,  737,  737,  737,  324,  737,
 /*  6320 */   737,  737,  737,  737,  170,  737,  737,  162,  160,  330,
 /*  6330 */   178,  339,  153,  176,  164,  247,  256,  249,  243,  146,
 /*  6340 */   163,  737,  737,  737,  324,  737,  737,  737,  737,  737,
 /*  6350 */   170,  737,  737,  162,  160,  330,  178,  339,  153,  176,
 /*  6360 */   164,  247,  256,  249,  226,  152,  151,  167,  737,  737,
 /*  6370 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  6380 */   737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
 /*  6390 */   737,  737,  737,  152,  151,  167,  163,  737,  737,  737,
 /*  6400 */   324,  737,  737,  737,  737,  737,  170,  737,  737,  162,
 /*  6410 */   160,  330,  178,  339,  153,  176,  164,  247,  256,  249,
 /*  6420 */   220,  152,  151,  167,  163,  737,  737,  737,  324,  737,
 /*  6430 */   737,  737,  737,  737,  170,  737,  737,  162,  160,  330,
 /*  6440 */   178,  339,  153,  176,  164,  247,  256,  249,  208,  152,
 /*  6450 */   151,  167,  163,  737,  737,  737,  324,  737,  737,  737,
 /*  6460 */   737,  737,  170,  737,  737,  162,  160,  330,  178,  339,
 /*  6470 */   153,  176,  164,  247,  256,  249,  224,  152,  151,  167,
 /*  6480 */   163,  737,  737,  737,  324,  737,  737,  737,  737,  737,
 /*  6490 */   170,  737,  737,  162,  160,  330,  178,  339,  153,  176,
 /*  6500 */   164,  247,  256,  249,  229,  152,  151,  167,  163,  737,
 /*  6510 */   737,  737,  324,  737,  737,  737,  737,  737,  170,  737,
 /*  6520 */   737,  162,  160,  330,  178,  339,  153,  176,  164,  247,
 /*  6530 */   256,  249,  209,  152,  151,  167,  163,  737,  737,  737,
 /*  6540 */   324,  737,  737,  737,  737,  737,  170,  737,  737,  162,
 /*  6550 */   160,  330,  178,  339,  153,  176,  164,  247,  256,  249,
 /*  6560 */   233,  152,  151,  167,  163,  737,  737,  737,  324,  737,
 /*  6570 */   737,  737,  737,  737,  170,  737,  737,  162,  160,  330,
 /*  6580 */   178,  339,  153,  176,  164,  247,  256,  249,  225,  152,
 /*  6590 */   151,  167,  163,  737,  737,  737,  324,  737,  737,  737,
 /*  6600 */   737,  737,  170,  737,  737,  162,  160,  330,  178,  339,
 /*  6610 */   153,  176,  164,  247,  256,  249,  217,  152,  151,  167,
 /*  6620 */   163,  737,  737,  737,  324,  737,  737,  737,  737,  737,
 /*  6630 */   170,  737,  737,  162,  160,  330,  178,  339,  153,  176,
 /*  6640 */   164,  247,  256,  249,  231,  737,  737,  737,  163,  737,
 /*  6650 */   737,  737,  324,  737,  737,  737,  737,  737,  170,  737,
 /*  6660 */   737,  162,  160,  330,  178,  339,  153,  176,  164,  247,
 /*  6670 */   256,  240,
};
static const YYCODETYPE yy_lookahead[] = {
 /*     0 */    83,   84,   85,   86,   87,   88,   89,   31,   32,   33,
 /*    10 */    34,    4,    5,   10,   97,   12,   99,  100,  101,  102,
 /*    20 */   103,  104,  105,  106,  107,  108,    6,    7,  111,    9,
 /*    30 */     6,  114,    7,  116,    9,  118,   12,  120,   18,  122,
 /*    40 */   123,  124,   19,   18,  127,  128,  129,  130,  131,  132,
 /*    50 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*    60 */   143,   39,  145,  146,  147,  148,   40,  150,  151,    8,
 /*    70 */   153,   83,   84,   85,   86,   87,   88,   89,    7,   18,
 /*    80 */    14,   56,   19,    6,    7,    8,   98,   99,  100,  101,
 /*    90 */   102,  103,  104,  105,  106,  107,  108,   20,    7,  111,
 /*   100 */     9,    6,  114,    7,  116,    9,  118,   12,  120,   18,
 /*   110 */   122,  123,  124,   12,   18,  127,  128,  129,  130,  131,
 /*   120 */   132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
 /*   130 */   142,  143,   19,  145,  146,  147,  148,  109,  110,  151,
 /*   140 */   152,  153,   83,   84,   85,   86,   87,   88,   89,    7,
 /*   150 */    19,    9,  112,  113,   12,   13,   97,   56,   99,  100,
 /*   160 */   101,  102,  103,  104,  105,  106,  107,  108,    6,    7,
 /*   170 */   111,    9,    6,  114,    7,  116,    9,  118,   12,  120,
 /*   180 */    18,  122,  123,  124,   10,   18,  127,  128,  129,  130,
 /*   190 */   131,  132,  133,  134,  135,  136,  137,  138,  139,  140,
 /*   200 */   141,  142,  143,   10,  145,  146,  147,  148,   14,  150,
 /*   210 */   151,   17,  153,   83,   84,   85,   86,   87,   88,   89,
 /*   220 */    28,   29,   35,   36,   37,   10,   16,   17,   98,   99,
 /*   230 */   100,  101,  102,  103,  104,  105,  106,  107,  108,    8,
 /*   240 */     7,  111,    9,   38,  114,    7,  116,    9,  118,   18,
 /*   250 */   120,   18,  122,  123,  124,   56,   18,  127,  128,  129,
 /*   260 */   130,  131,  132,  133,  134,  135,  136,  137,  138,  139,
 /*   270 */   140,  141,  142,  143,   56,  145,  146,  147,  148,   90,
 /*   280 */    91,  151,  152,  153,   83,   84,   85,   86,   87,   88,
 /*   290 */    89,    8,   26,   27,   11,   54,   55,    7,   15,   98,
 /*   300 */    99,  100,  101,  102,  103,  104,  105,  106,  107,  108,
 /*   310 */     8,    7,  111,    9,   56,  114,    7,  116,    9,  118,
 /*   320 */    18,  120,   18,  122,  123,  124,   10,   18,  127,  128,
 /*   330 */   129,  130,  131,  132,  133,  134,  135,  136,  137,  138,
 /*   340 */   139,  140,  141,  142,  143,   56,  145,  146,  147,  148,
 /*   350 */    90,   91,  151,  152,  153,   83,   84,   85,   86,   87,
 /*   360 */    88,   89,   10,    8,   16,   17,   11,   90,   91,   97,
 /*   370 */    15,   99,  100,  101,  102,  103,  104,  105,  106,  107,
 /*   380 */   108,    8,    7,  111,    9,    7,  114,    7,  116,    9,
 /*   390 */   118,   18,  120,   18,  122,  123,  124,   10,   18,  127,
 /*   400 */   128,  129,  130,  131,  132,  133,  134,  135,  136,  137,
 /*   410 */   138,  139,  140,  141,  142,  143,   19,  145,  146,  147,
 /*   420 */   148,   19,  150,  151,    8,  153,   83,   84,   85,   86,
 /*   430 */    87,   88,   89,   10,   18,    7,    8,    4,    5,  109,
 /*   440 */   110,   98,   99,  100,  101,  102,  103,  104,  105,  106,
 /*   450 */   107,  108,    8,    7,  111,    9,   19,  114,    7,  116,
 /*   460 */     9,  118,   18,  120,   18,  122,  123,  124,   19,   18,
 /*   470 */   127,  128,  129,  130,  131,  132,  133,  134,  135,  136,
 /*   480 */   137,  138,  139,  140,  141,  142,  143,   19,  145,  146,
 /*   490 */   147,  148,   19,   19,  151,  152,  153,   83,   84,   85,
 /*   500 */    86,   87,   88,   89,   14,    8,   56,   12,   10,   10,
 /*   510 */    14,   97,   56,   99,  100,  101,  102,  103,  104,  105,
 /*   520 */   106,  107,  108,    8,   10,  111,   56,   10,  114,  114,
 /*   530 */   116,   12,  118,   18,  120,   19,  122,  123,  124,  124,
 /*   540 */    56,  127,  128,  129,  130,  131,  132,  133,  134,  135,
 /*   550 */   136,  137,  138,  139,  140,  141,  142,  143,   14,  145,
 /*   560 */   146,  147,  148,    8,  150,  151,  113,  153,   83,   84,
 /*   570 */    85,   86,   87,   88,   89,  113,  113,  113,  117,   90,
 /*   580 */   113,   98,   97,  117,   99,  100,  101,  102,  103,  104,
 /*   590 */   105,  106,  107,  108,   12,   90,  111,   90,   92,  114,
 /*   600 */    92,  116,   52,  118,   11,  120,   19,  122,  123,  124,
 /*   610 */    13,   10,  127,  128,  129,  130,  131,  132,  133,  134,
 /*   620 */   135,  136,  137,  138,  139,  140,  141,  142,  143,   17,
 /*   630 */   145,  146,  147,  148,   13,  150,  151,   13,  153,   83,
 /*   640 */    84,   85,   86,   87,   88,   89,   17,    7,   53,   19,
 /*   650 */    41,    7,   10,   97,    7,   99,  100,  101,  102,  103,
 /*   660 */   104,  105,  106,  107,  108,   14,   14,  111,   10,   10,
 /*   670 */   114,   10,  116,   10,  118,   10,  120,   13,  122,  123,
 /*   680 */   124,   19,   14,  127,  128,  129,  130,  131,  132,  133,
 /*   690 */   134,  135,  136,  137,  138,  139,  140,  141,  142,  143,
 /*   700 */    14,  145,  146,  147,  148,   14,  150,  151,   14,  153,
 /*   710 */    83,   84,   85,   86,   87,   88,   89,   12,   10,   10,
 /*   720 */    10,   14,    7,   10,   13,   98,   99,  100,  101,  102,
 /*   730 */   103,  104,  105,  106,  107,  108,   55,   14,  111,   12,
 /*   740 */    14,  114,   13,  116,    7,  118,   14,  120,   56,  122,
 /*   750 */   123,  124,    7,   12,  127,  128,  129,  130,  131,  132,
 /*   760 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*   770 */   143,   10,  145,  146,  147,  148,   10,   13,  151,  152,
 /*   780 */   153,   83,   84,   85,   86,   87,   88,   89,   10,   17,
 /*   790 */     7,   17,  154,   69,  154,  154,   98,   99,  100,  101,
 /*   800 */   102,  103,  104,  105,  106,  107,  108,  154,  154,  111,
 /*   810 */   154,  154,  114,  154,  116,  154,  118,  154,  120,  154,
 /*   820 */   122,  123,  124,  154,  154,  127,  128,  129,  130,  131,
 /*   830 */   132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
 /*   840 */   142,  143,  154,  145,  146,  147,  148,  154,  154,  151,
 /*   850 */   152,  153,   83,   84,   85,   86,   87,   88,   89,   13,
 /*   860 */   154,  154,   16,   17,  154,  154,  154,   98,   99,  100,
 /*   870 */   101,  102,  103,  104,  105,  106,  107,  108,  154,  154,
 /*   880 */   111,  154,  154,  114,  154,  116,  154,  118,  154,  120,
 /*   890 */   154,  122,  123,  124,  154,  154,  127,  128,  129,  130,
 /*   900 */   131,  132,  133,  134,  135,  136,  137,  138,  139,  140,
 /*   910 */   141,  142,  143,  154,  145,  146,  147,  148,   16,   17,
 /*   920 */   151,  152,  153,    1,  154,    3,   80,  154,    6,    7,
 /*   930 */     8,    9,  154,   11,   12,   13,   14,   15,  154,  154,
 /*   940 */    18,  154,   20,   21,   22,   23,   24,   25,   26,   27,
 /*   950 */    28,   29,   30,   31,  154,  154,  154,  154,  154,   57,
 /*   960 */    58,   59,   60,   61,   62,   63,   64,   65,   66,   67,
 /*   970 */    68,  154,  154,  154,  154,  154,  154,   55,   56,   42,
 /*   980 */    43,   44,   45,   46,   47,   48,   49,   50,   51,  154,
 /*   990 */   154,   69,   70,   71,   72,   73,   74,   75,   76,   77,
 /*  1000 */    78,   79,    1,   81,    3,  154,  154,    6,    7,    8,
 /*  1010 */     9,  154,   11,   12,   13,   14,   15,  154,  154,   18,
 /*  1020 */   154,   20,   21,   22,   23,   24,   25,   26,   27,   28,
 /*  1030 */    29,   30,   31,  154,    6,    7,  154,    9,  154,  154,
 /*  1040 */    12,    6,    7,    8,  154,  154,   18,   12,    7,  154,
 /*  1050 */     9,  154,  154,   12,   13,   20,   55,   56,  154,   18,
 /*  1060 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  1070 */    69,   70,   71,   72,   73,   74,   75,   76,   77,   78,
 /*  1080 */    79,    1,   81,    3,   56,  154,    6,    7,    8,    9,
 /*  1090 */   154,   11,   12,   13,   14,   15,  154,  154,   18,  154,
 /*  1100 */    20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
 /*  1110 */    30,   31,  154,    6,    7,  154,    9,  154,  154,  154,
 /*  1120 */   154,  154,  154,  154,  154,   18,  154,  154,  154,  154,
 /*  1130 */   154,  154,  154,  154,  154,   55,   56,  154,  154,  154,
 /*  1140 */   154,  154,  154,  154,  154,  154,  154,  154,  154,   69,
 /*  1150 */    70,   71,   72,   73,   74,   75,   76,   77,   78,   79,
 /*  1160 */     1,   81,    3,   56,  154,    6,    7,    8,    9,  154,
 /*  1170 */    11,   12,   13,   14,   15,  154,  154,   18,  154,   20,
 /*  1180 */    21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
 /*  1190 */    31,  154,    6,    7,  154,    9,  154,  154,  154,  154,
 /*  1200 */   154,  154,  154,  154,   18,  154,  154,  154,  154,  154,
 /*  1210 */   154,  154,  154,  154,   55,   56,  154,  154,  154,  154,
 /*  1220 */   154,  154,  154,  154,  154,  154,  154,  154,   69,   70,
 /*  1230 */    71,   72,   73,   74,   75,   76,   77,   78,   79,    1,
 /*  1240 */    81,    3,   56,  154,    6,    7,    8,    9,   10,  154,
 /*  1250 */    12,   13,   14,   15,  154,  154,   18,  154,   20,   21,
 /*  1260 */    22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
 /*  1270 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  1280 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  1290 */   154,  154,  154,   55,   56,  154,  154,  154,  154,  154,
 /*  1300 */   154,  154,  154,  154,  154,  154,  154,   69,   70,   71,
 /*  1310 */    72,   73,   74,   75,   76,   77,   78,   79,  154,   81,
 /*  1320 */     0,    1,  154,    3,  154,  154,    6,    7,    8,    9,
 /*  1330 */   154,  154,   12,   13,   14,   15,  154,  154,   18,  154,
 /*  1340 */    20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
 /*  1350 */    30,   31,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  1360 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  1370 */   154,  154,  154,  154,  154,   55,   56,  154,  154,  154,
 /*  1380 */   154,  154,  154,  154,  154,  154,  154,  154,  154,   69,
 /*  1390 */    70,   71,   72,   73,   74,   75,   76,   77,   78,   79,
 /*  1400 */     1,   81,    3,  154,  154,    6,    7,    8,    9,  154,
 /*  1410 */   154,   12,   13,   14,   15,  154,  154,   18,  154,   20,
 /*  1420 */    21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
 /*  1430 */    31,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  1440 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  1450 */   154,  154,  154,  154,   55,   56,  154,  154,  154,  154,
 /*  1460 */   154,  154,  154,  154,  154,  154,  154,  154,   69,   70,
 /*  1470 */    71,   72,   73,   74,   75,   76,   77,   78,   79,    1,
 /*  1480 */    81,    3,  154,  154,    6,    7,    8,    9,  154,  154,
 /*  1490 */    12,   13,   14,   15,  154,  154,   18,  154,   20,   21,
 /*  1500 */    22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
 /*  1510 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  1520 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  1530 */   154,  154,  154,   55,   56,  154,  154,  154,   83,   84,
 /*  1540 */    85,  154,   87,  154,   89,  154,  154,   69,   70,   71,
 /*  1550 */    72,   73,   74,   75,   76,   77,   78,   79,  154,   81,
 /*  1560 */   154,   13,  154,  154,   16,   17,  154,  154,  154,  114,
 /*  1570 */   115,  154,  154,  118,  154,  154,  154,  122,  154,  124,
 /*  1580 */   125,  126,  127,  128,  129,  130,  131,  132,  133,  134,
 /*  1590 */   135,  136,  137,  138,  139,  140,  141,  142,  143,  144,
 /*  1600 */   145,  154,  154,  154,  149,   57,   58,   59,   60,   61,
 /*  1610 */    62,   63,   64,   65,   66,   67,   68,   83,   84,   85,
 /*  1620 */   154,   87,  154,   89,  154,  154,  154,  154,   80,  154,
 /*  1630 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  1640 */   154,  154,  154,  154,  154,  154,  154,  154,  114,  115,
 /*  1650 */   154,  154,  118,  154,  154,  154,  122,  154,  124,  125,
 /*  1660 */   126,  127,  128,  129,  130,  131,  132,  133,  134,  135,
 /*  1670 */   136,  137,  138,  139,  140,  141,  142,  143,  144,  145,
 /*  1680 */    83,   84,   85,  149,   87,  154,   89,  154,  154,  154,
 /*  1690 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  1700 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  1710 */   154,  114,  115,  154,  154,  118,  154,  154,  154,  122,
 /*  1720 */   154,  124,  125,  126,  127,  128,  129,  130,  131,  132,
 /*  1730 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*  1740 */   143,  144,  145,   83,   84,   85,  149,   87,  154,   89,
 /*  1750 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  1760 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  1770 */   154,  154,  154,  154,  114,  115,  154,  154,  118,  154,
 /*  1780 */   154,  154,  122,  154,  124,  125,  126,  127,  128,  129,
 /*  1790 */   130,  131,  132,  133,  134,  135,  136,  137,  138,  139,
 /*  1800 */   140,  141,  142,  143,  144,  145,   83,   84,   85,  149,
 /*  1810 */    87,  154,   89,  154,  154,  154,  154,  154,  154,  154,
 /*  1820 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  1830 */   154,  154,  154,  154,  154,  154,  154,  114,  115,  154,
 /*  1840 */   154,  118,  154,  154,  154,  122,  154,  124,  125,  126,
 /*  1850 */   127,  128,  129,  130,  131,  132,  133,  134,  135,  136,
 /*  1860 */   137,  138,  139,  140,  141,  142,  143,  144,  145,   83,
 /*  1870 */    84,   85,  149,   87,  154,   89,  154,  154,  154,  154,
 /*  1880 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  1890 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  1900 */   114,  115,  154,  154,  118,  154,  154,  154,  154,  154,
 /*  1910 */   124,  125,  126,  127,  128,  129,  130,  131,  132,  133,
 /*  1920 */   134,  135,  136,  137,  138,  139,  140,  141,  142,  143,
 /*  1930 */   144,  145,   83,   84,   85,  154,   87,  154,   89,  154,
 /*  1940 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  1950 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  1960 */   154,  154,  154,  114,  115,  154,  154,  118,  154,  154,
 /*  1970 */   154,  154,  154,  124,  125,  126,  127,  128,  129,  130,
 /*  1980 */   131,  132,  133,  134,  135,  136,  137,  138,  139,  140,
 /*  1990 */   141,  142,  143,  144,  145,   83,   84,   85,  154,   87,
 /*  2000 */   154,   89,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  2010 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  2020 */   154,  154,  154,  154,  154,  154,  114,  115,  154,  154,
 /*  2030 */   118,  154,  154,  154,  154,  154,  124,  125,  126,  127,
 /*  2040 */   128,  129,  130,  131,  132,  133,  134,  135,  136,  137,
 /*  2050 */   138,  139,  140,  141,  142,  143,  144,  145,   83,   84,
 /*  2060 */    85,  154,   87,  154,   89,  154,  154,  154,  154,  154,
 /*  2070 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  2080 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  114,
 /*  2090 */   115,  154,  154,  118,  154,  154,  154,  154,  154,  124,
 /*  2100 */   125,  126,  127,  128,  129,  130,  131,  132,  133,  134,
 /*  2110 */   135,  136,  137,  138,  139,  140,  141,  142,  143,  144,
 /*  2120 */   145,   83,   84,   85,  154,   87,  154,   89,  154,  154,
 /*  2130 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  2140 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  2150 */   154,  154,  114,  115,  154,  154,  118,  154,  154,  154,
 /*  2160 */   154,  154,  124,  125,  126,  127,  128,  129,  130,  131,
 /*  2170 */   132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
 /*  2180 */   142,  143,  144,  145,   83,   84,   85,  154,   87,  154,
 /*  2190 */    89,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  2200 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  2210 */   154,  154,  154,  154,  154,  114,  115,  154,  154,  118,
 /*  2220 */   154,  154,  154,  154,  154,  124,  125,  126,  127,  128,
 /*  2230 */   129,  130,  131,  132,  133,  134,  135,  136,  137,  138,
 /*  2240 */   139,  140,  141,  142,  143,  144,  145,   83,   84,   85,
 /*  2250 */   154,   87,  154,   89,  154,  154,  154,  154,  154,  154,
 /*  2260 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  2270 */   154,  154,  154,  154,  154,  154,  154,  154,  114,  115,
 /*  2280 */   154,  154,  118,  154,  154,  154,  154,  154,  124,  154,
 /*  2290 */   126,  127,  128,  129,  130,  131,  132,  133,  134,  135,
 /*  2300 */   136,  137,  138,  139,  140,  141,  142,  143,  144,  145,
 /*  2310 */    83,   84,   85,  154,   87,  154,   89,  154,  154,  154,
 /*  2320 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  2330 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  2340 */   154,  114,  115,  154,  154,  118,  154,  154,  154,  154,
 /*  2350 */   154,  124,  154,  126,  127,  128,  129,  130,  131,  132,
 /*  2360 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*  2370 */   143,  144,  145,  154,   83,   84,   85,  154,   87,  154,
 /*  2380 */    89,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  2390 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  2400 */   154,  154,  154,  154,  154,  114,  115,  154,  154,  118,
 /*  2410 */   154,  154,  154,  154,  154,  124,  154,  126,  127,  128,
 /*  2420 */   129,  130,  131,  132,  133,  134,  135,  136,  137,  138,
 /*  2430 */   139,  140,  141,  142,  143,  144,  145,   83,   84,   85,
 /*  2440 */   154,   87,  154,   89,  154,  154,  154,  154,  154,  154,
 /*  2450 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  2460 */   154,  154,  154,  154,  154,  154,  154,  154,  114,  115,
 /*  2470 */   154,  154,  118,  154,  154,  154,  154,  154,  124,  154,
 /*  2480 */   126,  127,  128,  129,  130,  131,  132,  133,  134,  135,
 /*  2490 */   136,  137,  138,  139,  140,  141,  142,  143,  144,  145,
 /*  2500 */   154,   83,   84,   85,  154,   87,  154,   89,  154,  154,
 /*  2510 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  2520 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  2530 */   154,  154,  114,  115,  154,  154,  118,  154,  154,  154,
 /*  2540 */   154,  154,  124,  154,  126,  127,  128,  129,  130,  131,
 /*  2550 */   132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
 /*  2560 */   142,  143,  144,  145,   83,   84,   85,  154,   87,  154,
 /*  2570 */    89,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  2580 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  2590 */   154,  154,  154,  154,  154,  114,  115,  154,  154,  118,
 /*  2600 */   154,  154,  154,  154,  154,  124,  154,  126,  127,  128,
 /*  2610 */   129,  130,  131,  132,  133,  134,  135,  136,  137,  138,
 /*  2620 */   139,  140,  141,  142,  143,  144,  145,  154,   83,   84,
 /*  2630 */    85,  154,   87,  154,   89,  154,  154,  154,  154,  154,
 /*  2640 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  2650 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  114,
 /*  2660 */   115,  154,  154,  118,  154,  154,  154,  154,  154,  124,
 /*  2670 */   154,  126,  127,  128,  129,  130,  131,  132,  133,  134,
 /*  2680 */   135,  136,  137,  138,  139,  140,  141,  142,  143,  144,
 /*  2690 */   145,   83,   84,   85,  154,   87,  154,   89,  154,  154,
 /*  2700 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  2710 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  2720 */   154,  154,  114,  115,  154,  154,  118,  154,  154,  154,
 /*  2730 */   154,  154,  124,  154,  126,  127,  128,  129,  130,  131,
 /*  2740 */   132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
 /*  2750 */   142,  143,  144,  145,  154,   83,   84,   85,  154,   87,
 /*  2760 */   154,   89,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  2770 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  2780 */   154,  154,  154,  154,  154,  154,  114,  115,  154,  154,
 /*  2790 */   118,  154,  154,  154,  154,  154,  124,  154,  126,  127,
 /*  2800 */   128,  129,  130,  131,  132,  133,  134,  135,  136,  137,
 /*  2810 */   138,  139,  140,  141,  142,  143,  144,  145,   83,   84,
 /*  2820 */    85,  154,   87,  154,   89,  154,  154,  154,  154,  154,
 /*  2830 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  2840 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  114,
 /*  2850 */   115,  154,  154,  118,  154,  154,  154,  154,  154,  124,
 /*  2860 */   154,  126,  127,  128,  129,  130,  131,  132,  133,  134,
 /*  2870 */   135,  136,  137,  138,  139,  140,  141,  142,  143,  144,
 /*  2880 */   145,  154,   83,   84,   85,  154,   87,  154,   89,  154,
 /*  2890 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  2900 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  2910 */   154,  154,  154,  114,  115,  154,  154,  118,  154,  154,
 /*  2920 */   154,  154,  154,  124,  154,  126,  127,  128,  129,  130,
 /*  2930 */   131,  132,  133,  134,  135,  136,  137,  138,  139,  140,
 /*  2940 */   141,  142,  143,  144,  145,   83,   84,   85,  154,   87,
 /*  2950 */   154,   89,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  2960 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  2970 */   154,  154,  154,  154,  154,  154,  114,  115,  154,  154,
 /*  2980 */   118,  154,  154,  154,  154,  154,  124,  154,  126,  127,
 /*  2990 */   128,  129,  130,  131,  132,  133,  134,  135,  136,  137,
 /*  3000 */   138,  139,  140,  141,  142,  143,  144,  145,  154,   83,
 /*  3010 */    84,   85,  154,   87,  154,   89,  154,  154,  154,  154,
 /*  3020 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  3030 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  3040 */   114,  115,  154,  154,  118,  154,  154,  154,  154,  154,
 /*  3050 */   124,  154,  126,  127,  128,  129,  130,  131,  132,  133,
 /*  3060 */   134,  135,  136,  137,  138,  139,  140,  141,  142,  143,
 /*  3070 */   144,  145,   83,   84,   85,  154,   87,  154,   89,  154,
 /*  3080 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  3090 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  3100 */   154,  154,  154,  114,  115,  154,  154,  118,  154,  154,
 /*  3110 */   154,  154,  154,  124,  154,  126,  127,  128,  129,  130,
 /*  3120 */   131,  132,  133,  134,  135,  136,  137,  138,  139,  140,
 /*  3130 */   141,  142,  143,  144,  145,  154,   83,   84,   85,  154,
 /*  3140 */    87,  154,   89,  154,  154,  154,  154,  154,  154,  154,
 /*  3150 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  3160 */   154,  154,  154,  154,  154,  154,  154,  114,  115,  154,
 /*  3170 */   154,  118,  154,  154,  154,  154,  154,  124,  154,  126,
 /*  3180 */   127,  128,  129,  130,  131,  132,  133,  134,  135,  136,
 /*  3190 */   137,  138,  139,  140,  141,  142,  143,  144,  145,   83,
 /*  3200 */    84,   85,  154,   87,  154,   89,  154,  154,  154,   93,
 /*  3210 */    94,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  3220 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  3230 */   114,  154,  154,  154,  118,  154,  154,  154,  154,  154,
 /*  3240 */   124,  154,  126,  127,  128,  129,  130,  131,  132,  133,
 /*  3250 */   134,  135,  136,  137,  138,  139,  140,  141,  142,  143,
 /*  3260 */   154,  145,  154,   83,   84,   85,  154,   87,  154,   89,
 /*  3270 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  3280 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  3290 */   154,  154,  154,  154,  114,  115,  154,  154,  118,  154,
 /*  3300 */   154,  154,  154,  154,  124,  154,  126,  127,  128,  129,
 /*  3310 */   130,  131,  132,  133,  134,  135,  136,  137,  138,  139,
 /*  3320 */   140,  141,  142,  143,  144,  145,   83,   84,   85,  154,
 /*  3330 */    87,  154,   89,  154,  154,  154,  154,  154,   95,   96,
 /*  3340 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  3350 */   154,  154,  154,  154,  154,   16,   17,  114,  154,  154,
 /*  3360 */   154,  118,  154,  154,  154,  154,  154,  124,  154,  126,
 /*  3370 */   127,  128,  129,  130,  131,  132,  133,  134,  135,  136,
 /*  3380 */   137,  138,  139,  140,  141,  142,  143,  154,   83,   84,
 /*  3390 */    85,  154,   87,  154,   89,  154,   57,   58,   59,   60,
 /*  3400 */    61,   62,   63,   64,   65,   66,   67,   68,  154,  154,
 /*  3410 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  114,
 /*  3420 */   154,  154,  154,  118,  154,  154,  154,  154,  154,  124,
 /*  3430 */   154,  126,  127,  128,  129,  130,  131,  132,  133,  134,
 /*  3440 */   135,  136,  137,  138,  139,  140,  141,  142,  143,  154,
 /*  3450 */   145,   83,   84,   85,  154,   87,  154,   89,  154,  154,
 /*  3460 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  3470 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  3480 */   154,  154,  114,  154,  154,  154,  118,   83,   84,   85,
 /*  3490 */   154,  154,  124,  154,  126,  127,  128,  129,  130,  131,
 /*  3500 */   132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
 /*  3510 */   142,  143,  144,   83,   84,   85,  154,   87,  114,   89,
 /*  3520 */   154,  154,  118,  154,  154,  154,  154,  154,  124,  154,
 /*  3530 */   154,  127,  128,  129,  130,  131,  132,  133,  154,  154,
 /*  3540 */   154,  154,  154,  154,  114,  154,  154,  154,  118,  154,
 /*  3550 */   154,  154,  154,  154,  124,  154,  126,  127,  128,  129,
 /*  3560 */   130,  131,  132,  133,  134,  135,  136,  137,  138,  139,
 /*  3570 */   140,  141,  142,  143,  154,  145,   83,   84,   85,  154,
 /*  3580 */    87,  154,   89,  154,  154,  154,  154,  154,  154,  154,
 /*  3590 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  3600 */   154,  154,  154,  154,  154,  154,  154,  114,  154,  154,
 /*  3610 */   154,  118,   83,   84,   85,  154,  154,  124,  154,  126,
 /*  3620 */   127,  128,  129,  130,  131,  132,  133,  134,  135,  136,
 /*  3630 */   137,  138,  139,  140,  141,  142,  143,  154,  145,  154,
 /*  3640 */    83,   84,   85,  114,   87,  154,   89,  118,  154,  154,
 /*  3650 */   154,  154,  154,  124,  154,  154,  127,  128,  129,  130,
 /*  3660 */   131,  132,  133,  154,  154,  154,  154,  154,  154,  154,
 /*  3670 */   154,  114,  154,  154,  154,  118,  154,  154,  154,  154,
 /*  3680 */   154,  124,  154,  126,  127,  128,  129,  130,  131,  132,
 /*  3690 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*  3700 */   143,   83,   84,   85,  154,   87,  154,   89,  154,  154,
 /*  3710 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  3720 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  3730 */   154,  154,  114,  154,  154,  154,  118,  154,  154,  154,
 /*  3740 */   154,  154,  124,  154,  126,  127,  128,  129,  130,  131,
 /*  3750 */   132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
 /*  3760 */   142,  143,    6,    7,    8,   83,   84,   85,  154,   87,
 /*  3770 */   154,   89,  154,  154,  154,  154,   20,   21,   22,   23,
 /*  3780 */    24,   25,   26,   27,   28,   29,   30,   31,  154,  154,
 /*  3790 */   154,  154,  154,  154,  154,  154,  114,  154,  154,  154,
 /*  3800 */   118,  154,  154,  154,  154,  154,  124,  154,  126,  127,
 /*  3810 */   128,  129,  130,  131,  132,  133,  134,  135,  136,  137,
 /*  3820 */   138,  139,  140,  141,  142,  143,   83,   84,   85,  154,
 /*  3830 */    87,  154,   89,  154,  154,  154,  154,  154,  154,  154,
 /*  3840 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  3850 */   154,  154,  154,  154,  154,  154,  154,  114,  154,  154,
 /*  3860 */   154,  118,   83,   84,   85,  154,  154,  124,  154,  126,
 /*  3870 */   127,  128,  129,  130,  131,  132,  133,  134,  135,  136,
 /*  3880 */   137,  138,  139,  140,  141,  142,  143,  154,  154,  154,
 /*  3890 */    83,   84,   85,  114,   87,  154,   89,  118,  154,  154,
 /*  3900 */   154,  154,  154,  124,  154,  154,  127,  128,  129,  130,
 /*  3910 */   131,  132,  133,  134,  135,  154,  154,  154,  154,  154,
 /*  3920 */   154,  114,  154,  154,  154,  118,  154,  154,  154,  154,
 /*  3930 */   154,  124,  154,  126,  127,  128,  129,  130,  131,  132,
 /*  3940 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*  3950 */   143,   83,   84,   85,  154,   87,  154,   89,  154,  154,
 /*  3960 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  3970 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  3980 */   154,  154,  114,  154,  154,  154,  118,   83,   84,   85,
 /*  3990 */   154,  154,  124,  154,  126,  127,  128,  129,  130,  131,
 /*  4000 */   132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
 /*  4010 */   142,  143,  154,  154,  154,   83,   84,   85,  114,   87,
 /*  4020 */   154,   89,  118,  154,  154,  154,  154,  154,  124,  154,
 /*  4030 */   154,  127,  128,  129,  130,  131,  132,  133,  134,  154,
 /*  4040 */   154,  154,  154,  154,  154,  154,  114,  154,  154,  154,
 /*  4050 */   118,  154,  154,  154,  154,  154,  124,  154,  126,  127,
 /*  4060 */   128,  129,  130,  131,  132,  133,  134,  135,  136,  137,
 /*  4070 */   138,  139,  140,  141,  142,  143,   83,   84,   85,  154,
 /*  4080 */    87,  154,   89,  154,  154,  154,  154,  154,  154,  154,
 /*  4090 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  4100 */   154,  154,  154,  154,  154,  154,  154,  114,  154,  154,
 /*  4110 */   154,  118,   83,   84,   85,  154,  154,  124,  154,  126,
 /*  4120 */   127,  128,  129,  130,  131,  132,  133,  134,  135,  136,
 /*  4130 */   137,  138,  139,  140,  141,  142,  143,  154,  154,  154,
 /*  4140 */    83,   84,   85,  114,   87,  154,   89,  118,  154,  154,
 /*  4150 */   154,  154,  154,  124,  154,  154,  127,  128,  129,  130,
 /*  4160 */   131,  132,  133,  154,  154,  154,  154,  154,  154,  154,
 /*  4170 */   154,  114,  154,  154,  154,  118,  154,  154,  154,  154,
 /*  4180 */   154,  124,  154,  126,  127,  128,  129,  130,  131,  132,
 /*  4190 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*  4200 */   143,   83,   84,   85,  154,   87,  154,   89,  154,  154,
 /*  4210 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  4220 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  4230 */   154,  154,  114,  154,  154,  154,  118,   83,   84,   85,
 /*  4240 */   154,  154,  124,  154,  126,  127,  128,  129,  130,  131,
 /*  4250 */   132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
 /*  4260 */   142,  143,  154,  154,  154,   83,   84,   85,  114,   87,
 /*  4270 */   154,   89,  118,  154,  154,  154,  154,  154,  124,  154,
 /*  4280 */   154,  127,  128,  129,  130,  131,  132,  154,  154,  154,
 /*  4290 */   154,  154,  154,  154,  154,  154,  114,  154,  154,  154,
 /*  4300 */   118,  154,  154,  154,  154,  154,  124,  154,  126,  127,
 /*  4310 */   128,  129,  130,  131,  132,  133,  134,  135,  136,  137,
 /*  4320 */   138,  139,  140,  141,  142,  143,   83,   84,   85,  154,
 /*  4330 */    87,  154,   89,  154,  154,  154,  154,  154,  154,  154,
 /*  4340 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  4350 */   154,  154,  154,  154,  154,  154,  154,  114,  154,  154,
 /*  4360 */   154,  118,   83,   84,   85,  154,  154,  124,  154,  126,
 /*  4370 */   127,  128,  129,  130,  131,  132,  133,  134,  135,  136,
 /*  4380 */   137,  138,  139,  140,  141,  142,  143,  154,  154,  154,
 /*  4390 */    83,   84,   85,  114,   87,  154,   89,  118,  154,  154,
 /*  4400 */   154,  154,  154,  124,  154,  154,  127,  128,  129,  130,
 /*  4410 */   131,  132,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  4420 */   154,  114,  154,  154,  154,  118,  154,  154,  154,  154,
 /*  4430 */   154,  124,  154,  126,  127,  128,  129,  130,  131,  132,
 /*  4440 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*  4450 */   143,   83,   84,   85,  154,   87,  154,   89,  154,  154,
 /*  4460 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  4470 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  4480 */   154,  154,  114,  154,  154,  154,  118,   83,   84,   85,
 /*  4490 */   154,  154,  124,  154,  126,  127,  128,  129,  130,  131,
 /*  4500 */   132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
 /*  4510 */   142,  143,  154,  154,  154,   83,   84,   85,  114,   87,
 /*  4520 */   154,   89,  118,  154,  154,  154,  154,  154,  124,  154,
 /*  4530 */   154,  127,  128,  129,  130,  131,  154,  154,  154,  154,
 /*  4540 */   154,  154,  154,  154,  154,  154,  114,  154,  154,  154,
 /*  4550 */   118,  154,  154,  154,  154,  154,  124,  154,  126,  127,
 /*  4560 */   128,  129,  130,  131,  132,  133,  134,  135,  136,  137,
 /*  4570 */   138,  139,  140,  141,  142,  143,   83,   84,   85,  154,
 /*  4580 */    87,  154,   89,  154,  154,  154,  154,  154,  154,  154,
 /*  4590 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  4600 */   154,  154,  154,  154,  154,  154,  154,  114,  154,  154,
 /*  4610 */   154,  118,   83,   84,   85,  154,  154,  124,  154,  126,
 /*  4620 */   127,  128,  129,  130,  131,  132,  133,  134,  135,  136,
 /*  4630 */   137,  138,  139,  140,  141,  142,  143,  154,  154,  154,
 /*  4640 */    83,   84,   85,  114,   87,  154,   89,  118,  154,  154,
 /*  4650 */   154,  154,  154,  124,  154,  154,  127,  128,  129,  130,
 /*  4660 */   131,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  4670 */   154,  114,  154,  154,  154,  118,  154,  154,  154,  154,
 /*  4680 */   154,  124,  154,  126,  127,  128,  129,  130,  131,  132,
 /*  4690 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*  4700 */   143,   83,   84,   85,  154,   87,  154,   89,  154,  154,
 /*  4710 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  4720 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  4730 */   154,  154,  114,  154,  154,  154,  118,   83,   84,   85,
 /*  4740 */   154,  154,  124,  154,  126,  127,  128,  129,  130,  131,
 /*  4750 */   132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
 /*  4760 */   142,  143,  154,  154,  154,   83,   84,   85,  114,   87,
 /*  4770 */   154,   89,  118,  154,  154,  154,  154,  154,  124,  154,
 /*  4780 */   154,  127,  128,  129,  130,  131,  154,  154,  154,  154,
 /*  4790 */   154,  154,  154,  154,  154,  154,  114,  154,  154,  154,
 /*  4800 */   118,  154,  154,  154,  154,  154,  124,  154,  126,  127,
 /*  4810 */   128,  129,  130,  131,  132,  133,  134,  135,  136,  137,
 /*  4820 */   138,  139,  140,  141,  142,  143,   83,   84,   85,  154,
 /*  4830 */    87,  154,   89,  154,  154,  154,  154,  154,  154,  154,
 /*  4840 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  4850 */   154,  154,  154,  154,  154,  154,  154,  114,  154,  154,
 /*  4860 */   154,  118,   83,   84,   85,  154,  154,  124,  154,  126,
 /*  4870 */   127,  128,  129,  130,  131,  132,  133,  134,  135,  136,
 /*  4880 */   137,  138,  139,  140,  141,  142,  143,  154,  154,  154,
 /*  4890 */    83,   84,   85,  114,   87,  154,   89,  118,  154,  154,
 /*  4900 */   154,  154,  154,  124,  154,  154,  127,  128,  129,  130,
 /*  4910 */   131,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  4920 */   154,  114,  154,  154,  154,  118,  154,  154,  154,  154,
 /*  4930 */   154,  124,  154,  126,  127,  128,  129,  130,  131,  132,
 /*  4940 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*  4950 */   143,   83,   84,   85,  154,   87,  154,   89,  154,  154,
 /*  4960 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  4970 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  4980 */   154,  154,  114,  154,  154,  154,  118,   83,   84,   85,
 /*  4990 */   154,  154,  124,  154,  126,  127,  128,  129,  130,  131,
 /*  5000 */   132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
 /*  5010 */   142,  143,  154,  154,  154,   83,   84,   85,  114,   87,
 /*  5020 */   154,   89,  118,  154,  154,  154,  154,  154,  124,  154,
 /*  5030 */   154,  127,  128,  129,  130,  131,  154,  154,  154,  154,
 /*  5040 */   154,  154,  154,  154,  154,  154,  114,  154,  154,  154,
 /*  5050 */   118,  154,  154,  154,  154,  154,  124,  154,  126,  127,
 /*  5060 */   128,  129,  130,  131,  132,  133,  134,  135,  136,  137,
 /*  5070 */   138,  139,  140,  141,  142,  143,   83,   84,   85,  154,
 /*  5080 */    87,  154,   89,  154,  154,  154,  154,  154,  154,  154,
 /*  5090 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  5100 */   154,  154,  154,  154,  154,  154,  154,  114,  154,  154,
 /*  5110 */   154,  118,   83,   84,   85,  154,  154,  124,  154,  126,
 /*  5120 */   127,  128,  129,  130,  131,  132,  133,  134,  135,  136,
 /*  5130 */   137,  138,  139,  140,  141,  142,  143,  154,  154,  154,
 /*  5140 */    83,   84,   85,  114,   87,  154,   89,  118,  154,  154,
 /*  5150 */   154,  154,  154,  124,  154,  154,  127,  128,  129,  130,
 /*  5160 */   131,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  5170 */   154,  114,  154,  154,  154,  118,  154,  154,  154,  154,
 /*  5180 */   154,  124,  154,  126,  127,  128,  129,  130,  131,  132,
 /*  5190 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*  5200 */   143,   83,   84,   85,  154,   87,  154,   89,  154,  154,
 /*  5210 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  5220 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  5230 */   154,  154,  114,  154,  154,  154,  118,   83,   84,   85,
 /*  5240 */   154,  154,  124,  154,  126,  127,  128,  129,  130,  131,
 /*  5250 */   132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
 /*  5260 */   142,  143,  154,  154,  154,   83,   84,   85,  114,   87,
 /*  5270 */   154,   89,  118,  154,  154,  154,  154,  154,  124,  154,
 /*  5280 */   154,  127,  128,  129,  130,  131,  154,  154,  154,  154,
 /*  5290 */   154,  154,  154,  154,  154,  154,  114,  154,  154,  154,
 /*  5300 */   118,  154,  154,  154,  154,  154,  124,  154,  126,  127,
 /*  5310 */   128,  129,  130,  131,  132,  133,  134,  135,  136,  137,
 /*  5320 */   138,  139,  140,  141,  142,  143,    6,    7,    8,    9,
 /*  5330 */   154,   83,   12,   13,   86,   15,   88,  154,   18,  154,
 /*  5340 */    20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
 /*  5350 */    30,   31,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  5360 */   154,  154,  114,  154,  116,  154,  154,  119,  120,  121,
 /*  5370 */   122,  123,  154,  154,  154,   55,   56,  154,  154,  154,
 /*  5380 */   154,  154,    6,    7,    8,    9,  154,  154,   12,   13,
 /*  5390 */   154,   15,  154,  154,   18,  154,   20,   21,   22,   23,
 /*  5400 */    24,   25,   26,   27,   28,   29,   30,   31,  154,  154,
 /*  5410 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  5420 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  5430 */   154,   55,   56,   83,   84,   85,  154,  154,    6,    7,
 /*  5440 */     8,    9,  154,  154,   12,   13,   14,  154,  154,  154,
 /*  5450 */    18,  154,   20,   21,   22,   23,   24,   25,   26,   27,
 /*  5460 */    28,   29,   30,   31,  114,  154,  154,  154,  118,  154,
 /*  5470 */   154,  154,  154,  154,  124,  154,  154,  127,  128,  129,
 /*  5480 */   130,  131,  132,  133,  134,  135,  136,   55,   56,   83,
 /*  5490 */    84,   85,  154,  154,    6,    7,    8,    9,  154,  154,
 /*  5500 */    12,   13,  154,  154,  154,  154,   18,   19,   20,   21,
 /*  5510 */    22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
 /*  5520 */   114,  154,  154,  154,  118,  154,  154,  154,  154,  154,
 /*  5530 */   124,  154,  154,  127,  128,  129,  130,  131,  154,  154,
 /*  5540 */   154,  154,  154,   55,   56,   83,   84,   85,  154,  154,
 /*  5550 */     6,    7,    8,    9,  154,  154,   12,   13,   14,  154,
 /*  5560 */   154,  154,   18,  154,   20,   21,   22,   23,   24,   25,
 /*  5570 */    26,   27,   28,   29,   30,   31,  114,  154,  154,  154,
 /*  5580 */   118,  154,  154,  154,  154,  154,  124,  154,  154,  127,
 /*  5590 */   128,  129,  130,  131,  154,  154,  154,  154,  154,   55,
 /*  5600 */    56,   83,   84,   85,  154,  154,    6,    7,    8,    9,
 /*  5610 */   154,  154,   12,   13,  154,  154,  154,  154,   18,  154,
 /*  5620 */    20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
 /*  5630 */    30,   31,  114,  154,  154,  154,  118,  154,  154,  154,
 /*  5640 */   154,  154,  124,  154,  154,  127,  128,  129,  130,  131,
 /*  5650 */   154,  154,  154,  154,  154,   55,   56,   83,   84,   85,
 /*  5660 */   154,  154,    6,    7,    8,    9,  154,  154,   12,   13,
 /*  5670 */   154,   15,  154,  154,   18,  154,   20,   21,   22,   23,
 /*  5680 */    24,   25,   26,   27,   28,   29,   30,   31,  114,  154,
 /*  5690 */   154,  154,  118,  154,  154,  154,  154,  154,  124,  154,
 /*  5700 */   154,  127,  128,  154,  154,  154,  154,  154,  154,  154,
 /*  5710 */   154,   55,  154,   83,   84,   85,  154,  154,    6,    7,
 /*  5720 */     8,    9,  154,  154,   12,   13,  154,  154,  154,  154,
 /*  5730 */    18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
 /*  5740 */    28,   29,   30,   31,  114,  154,  154,  154,  118,  154,
 /*  5750 */   154,  154,  154,  154,  124,  154,  154,  127,  128,  154,
 /*  5760 */   154,  154,  154,  154,  154,  154,  154,   55,  154,   83,
 /*  5770 */    84,   85,  154,  154,    6,    7,    8,    9,  154,  154,
 /*  5780 */    12,   13,  154,  154,  154,  154,   18,   19,   20,   21,
 /*  5790 */    22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
 /*  5800 */   114,  154,  154,  154,  118,  154,  154,  154,  154,  154,
 /*  5810 */   124,  154,  154,  127,  128,  154,  154,  154,  154,  154,
 /*  5820 */   154,  154,  154,   55,  154,  154,   83,   84,   85,  154,
 /*  5830 */     6,    7,    8,    9,  154,   11,   12,   13,  154,  154,
 /*  5840 */   154,  154,   18,  154,   20,   21,   22,   23,   24,   25,
 /*  5850 */    26,   27,   28,   29,   30,   31,  154,  114,   83,   84,
 /*  5860 */    85,  118,  154,  154,  154,  154,  154,  124,  154,  154,
 /*  5870 */   127,  128,  154,  154,  154,  154,  154,  154,  154,   55,
 /*  5880 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  114,
 /*  5890 */   154,  154,  154,  118,  154,  154,  154,  154,  154,  124,
 /*  5900 */   154,  154,  127,  128,  129,  130,  131,  132,  133,  134,
 /*  5910 */   135,  136,  137,  138,  139,  140,  141,    6,    7,    8,
 /*  5920 */     9,  154,  154,   12,   13,  154,   83,   84,   85,   18,
 /*  5930 */    19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
 /*  5940 */    29,   30,   31,  154,  154,  154,  154,  154,  154,  154,
 /*  5950 */   154,  154,  154,  154,  154,  154,  154,  114,  154,  154,
 /*  5960 */   154,  118,  154,  154,  154,  154,   55,  124,  154,  154,
 /*  5970 */   127,  128,  154,    6,    7,    8,    9,  154,  154,   12,
 /*  5980 */    13,  154,  154,  154,  154,   18,   19,   20,   21,   22,
 /*  5990 */    23,   24,   25,   26,   27,   28,   29,   30,   31,  154,
 /*  6000 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  6010 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  6020 */   154,  154,   55,  154,  154,  154,  154,  154,  154,    6,
 /*  6030 */     7,    8,    9,  154,  154,   12,   13,  154,  154,  154,
 /*  6040 */   154,   18,   19,   20,   21,   22,   23,   24,   25,   26,
 /*  6050 */    27,   28,   29,   30,   31,  154,  154,  154,  154,  154,
 /*  6060 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  6070 */   154,  154,  154,  154,  154,  154,  154,  154,   55,  154,
 /*  6080 */   154,  154,  154,  154,  154,    6,    7,    8,    9,  154,
 /*  6090 */   154,   12,   13,  154,  154,  154,  154,   18,   19,   20,
 /*  6100 */    21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
 /*  6110 */    31,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  6120 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  6130 */   154,  154,  154,  154,   55,  154,  154,  154,  154,  154,
 /*  6140 */   154,    6,    7,    8,    9,  154,  154,   12,   13,  154,
 /*  6150 */   154,  154,  154,   18,   19,   20,   21,   22,   23,   24,
 /*  6160 */    25,   26,   27,   28,   29,   30,   31,  154,  154,  154,
 /*  6170 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  6180 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  6190 */    55,  154,  154,  154,  154,  154,  154,    6,    7,    8,
 /*  6200 */     9,  154,  154,   12,   13,  154,  154,  154,  154,   18,
 /*  6210 */   154,   20,   21,   22,   23,   24,   25,   26,   27,   28,
 /*  6220 */    29,   30,   31,  154,  154,   83,   84,   85,  154,  154,
 /*  6230 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  6240 */   154,  154,  154,  154,  154,  154,   55,  154,  154,  154,
 /*  6250 */   154,  154,  154,  154,  154,  154,  114,  154,  154,  154,
 /*  6260 */   118,  154,  154,  154,  154,  154,  124,  154,  154,  127,
 /*  6270 */   128,  129,  130,  131,  132,  133,  134,  135,  136,  137,
 /*  6280 */   138,  139,  140,   83,   84,   85,  154,  154,  154,  154,
 /*  6290 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  6300 */   154,  154,  154,  154,  154,  154,  154,  154,  154,   83,
 /*  6310 */    84,   85,  154,  154,  114,  154,  154,  154,  118,  154,
 /*  6320 */   154,  154,  154,  154,  124,  154,  154,  127,  128,  129,
 /*  6330 */   130,  131,  132,  133,  134,  135,  136,  137,  138,  139,
 /*  6340 */   114,  154,  154,  154,  118,  154,  154,  154,  154,  154,
 /*  6350 */   124,  154,  154,  127,  128,  129,  130,  131,  132,  133,
 /*  6360 */   134,  135,  136,  137,  138,   83,   84,   85,  154,  154,
 /*  6370 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  6380 */   154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
 /*  6390 */   154,  154,  154,   83,   84,   85,  114,  154,  154,  154,
 /*  6400 */   118,  154,  154,  154,  154,  154,  124,  154,  154,  127,
 /*  6410 */   128,  129,  130,  131,  132,  133,  134,  135,  136,  137,
 /*  6420 */   138,   83,   84,   85,  114,  154,  154,  154,  118,  154,
 /*  6430 */   154,  154,  154,  154,  124,  154,  154,  127,  128,  129,
 /*  6440 */   130,  131,  132,  133,  134,  135,  136,  137,  138,   83,
 /*  6450 */    84,   85,  114,  154,  154,  154,  118,  154,  154,  154,
 /*  6460 */   154,  154,  124,  154,  154,  127,  128,  129,  130,  131,
 /*  6470 */   132,  133,  134,  135,  136,  137,  138,   83,   84,   85,
 /*  6480 */   114,  154,  154,  154,  118,  154,  154,  154,  154,  154,
 /*  6490 */   124,  154,  154,  127,  128,  129,  130,  131,  132,  133,
 /*  6500 */   134,  135,  136,  137,  138,   83,   84,   85,  114,  154,
 /*  6510 */   154,  154,  118,  154,  154,  154,  154,  154,  124,  154,
 /*  6520 */   154,  127,  128,  129,  130,  131,  132,  133,  134,  135,
 /*  6530 */   136,  137,  138,   83,   84,   85,  114,  154,  154,  154,
 /*  6540 */   118,  154,  154,  154,  154,  154,  124,  154,  154,  127,
 /*  6550 */   128,  129,  130,  131,  132,  133,  134,  135,  136,  137,
 /*  6560 */   138,   83,   84,   85,  114,  154,  154,  154,  118,  154,
 /*  6570 */   154,  154,  154,  154,  124,  154,  154,  127,  128,  129,
 /*  6580 */   130,  131,  132,  133,  134,  135,  136,  137,  138,   83,
 /*  6590 */    84,   85,  114,  154,  154,  154,  118,  154,  154,  154,
 /*  6600 */   154,  154,  124,  154,  154,  127,  128,  129,  130,  131,
 /*  6610 */   132,  133,  134,  135,  136,  137,  138,   83,   84,   85,
 /*  6620 */   114,  154,  154,  154,  118,  154,  154,  154,  154,  154,
 /*  6630 */   124,  154,  154,  127,  128,  129,  130,  131,  132,  133,
 /*  6640 */   134,  135,  136,  137,  138,  154,  154,  154,  114,  154,
 /*  6650 */   154,  154,  118,  154,  154,  154,  154,  154,  124,  154,
 /*  6660 */   154,  127,  128,  129,  130,  131,  132,  133,  134,  135,
 /*  6670 */   136,  137,
};
#define YY_SHIFT_USE_DFLT (-25)
#define YY_SHIFT_MAX 309
static const short yy_shift_ofst[] = {
 /*     0 */   -25, 1080, 1320, 1159, 1001, 1238,  922, 1399, 1478, 1478,
 /*    10 */  1399, 1399, 1478, 1399, 1478, 1478, 1399, 1478, 1478, 5376,
 /*    20 */  5376, 5376, 5320, 5376, 5600, 5600, 5600, 5600, 5600, 5600,
 /*    30 */  5544, 5432, 5488, 5600, 5600, 5600, 5600, 5600, 5600, 5600,
 /*    40 */  5600, 5600, 5600, 5600, 5600, 5600, 5600, 5824, 5600, 5600,
 /*    50 */  5600, 6191, 5768, 5712, 5656, 6135, 5967, 6079, 6023, 5911,
 /*    60 */  6191, 6191, 6191, 6191, 6191, 6191, 6191, 6191, 6191, 6191,
 /*    70 */  6191, 6191, 6191, 6191, 6191, 6191, 6191, 6191, 6191, 6191,
 /*    80 */  6191, 6191, 6191, 6191, 6191, 6191, 3756, 3756, 3756, 3756,
 /*    90 */  3756, 3756, 3756, 3756, 3756, 3756, 3756, 3756, 3756, 3756,
 /*   100 */  3756, 3756, 3756, 3756, 3756, 3756, 3756, 3756, 3756, 3756,
 /*   110 */  3756, 3756, 3756, 3756, 3756, 3756, 3756, 3756,  355,  283,
 /*   120 */  1035, 1035,   77,   77,   77,  428,  433,    7,  555,  555,
 /*   130 */   555, 1548,  902, 3339,  555,  555,  582,  555,  -25,  -25,
 /*   140 */   -25,  -25,  -25,  -25,  -25,  937,  937, 1028, 1186, 1041,
 /*   150 */  1107,   20,  162,  -24,  -24,  846,  -24,  142,   25,  309,
 /*   160 */   375,  380,  446,  451,  187,   96,  167,  233,  187,  238,
 /*   170 */   304,   91,  166,  515,   24,   61,  192,  241,  266,  348,
 /*   180 */   192,   95,  192,  194,  210,  210,  348,  444,  192,  416,
 /*   190 */   373,  302,  101,  231,    3,  550,  593,  587,  597,  601,
 /*   200 */   612,  621,  624,  629,  640,  595,  630,  550,  609,  609,
 /*   210 */   644,  642,  651,  644,  652,  658,  659,  609,  661,  663,
 /*   220 */   609,  665,  647,  662,  609,  609,  609,  668,  686,  609,
 /*   230 */   691,  609,  694,  609,  709,  707,  711,  723,  729,  726,
 /*   240 */    26,  732,  745,  609,  766,  778,  783,  205,   22,   26,
 /*   250 */    71,   66,  174,  215,  205,  290,   22,  289,  352,  402,
 /*   260 */   449,  468,  474,  490,  450,  498,  496,  514,  519,  516,
 /*   270 */   544,  484,  517,  470,  456,  499,  495,  497,  423,  473,
 /*   280 */   387,  437,  397,  378,  316,  258,  218,  199,  193,  131,
 /*   290 */   113,   63,   23,  724,  774,  772,  764,  761,  741,  692,
 /*   300 */   737,  595,  713,  727,  681,  715,  710,  708,  705,  664,
};
#define YY_REDUCE_USE_DFLT (-84)
#define YY_REDUCE_MAX 144
static const short yy_reduce_ofst[] = {
 /*     0 */    40,  -83,  -83,  -83,  -83,  -83,  -83,  485,  627,  698,
 /*    10 */   556,  414,  343,  272,  201,  130,   59,  -12,  769, 1660,
 /*    20 */  1534, 1723, 1597, 1455, 2101, 2038, 1975, 1912, 1786, 1849,
 /*    30 */  2227, 2164, 3116, 3053, 2989, 2862, 2799, 2608, 2545, 2481,
 /*    40 */  2291, 3180, 2926, 2735, 2672, 2418, 2354, 3243, 3305, 3493,
 /*    50 */  3430, 3368, 3932, 4307, 3682, 3743, 4368, 4493, 4182, 3993,
 /*    60 */  4868, 3618, 3807, 4993, 4743, 4618, 3557, 4493, 4807, 5118,
 /*    70 */  3932, 5182, 4932, 3743, 5057, 4557, 4307, 3993, 4243, 4057,
 /*    80 */  3868, 4368, 4682, 4118, 4182, 4432, 5775, 6142, 6200, 6506,
 /*    90 */  6478, 6422, 6366, 6310, 6394, 6226, 6450, 6282, 6338, 6534,
 /*   100 */  5350, 3779, 3904, 3529, 3404, 4029, 4154, 4279, 4904, 4779,
 /*   110 */  5029, 5154, 5406, 5462, 4404, 5518, 4654, 4529, 5248, 5248,
 /*   120 */  5743, 5843, 5686, 5574, 5630,  415,  330,   28,  189,  260,
 /*   130 */   277,  508,  508,  506,  507,  505,  483,  489,  467,  466,
 /*   140 */   461,  464,  463,  462,  453,
};
static const YYACTIONTYPE yy_default[] = {
 /*     0 */   680,  735,  735,  735,  735,  735,  735,  735,  735,  735,
 /*    10 */   735,  735,  735,  735,  735,  735,  735,  735,  735,  735,
 /*    20 */   735,  735,  735,  735,  735,  735,  735,  735,  735,  735,
 /*    30 */   735,  735,  735,  735,  735,  735,  735,  735,  735,  735,
 /*    40 */   735,  735,  735,  735,  735,  735,  735,  735,  665,  735,
 /*    50 */   735,  735,  735,  735,  735,  735,  735,  735,  735,  735,
 /*    60 */   735,  735,  735,  735,  735,  735,  735,  735,  735,  735,
 /*    70 */   735,  735,  670,  735,  735,  735,  735,  735,  735,  735,
 /*    80 */   735,  735,  735,  735,  735,  735,  735,  735,  735,  735,
 /*    90 */   735,  735,  735,  735,  735,  735,  735,  735,  735,  735,
 /*   100 */   735,  735,  735,  735,  735,  735,  735,  735,  735,  735,
 /*   110 */   735,  735,  735,  735,  735,  735,  735,  735,  735,  735,
 /*   120 */   735,  735,  735,  735,  735,  735,  724,  735,  735,  735,
 /*   130 */   735,  643,  643,  674,  735,  735,  735,  735,  680,  501,
 /*   140 */   501,  680,  680,  680,  680,  606,  607,  551,  551,  550,
 /*   150 */   555,  555,  551,  580,  581,  735,  582,  735,  553,  556,
 /*   160 */   556,  550,  554,  550,  587,  735,  735,  553,  588,  552,
 /*   170 */   552,  554,  508,  735,  735,  735,  583,  612,  568,  516,
 /*   180 */   584,  735,  585,  735,  515,  735,  735,  735,  586,  735,
 /*   190 */   735,  735,  557,  735,  735,  609,  735,  735,  735,  735,
 /*   200 */   669,  735,  735,  643,  735,  610,  735,  608,  605,  604,
 /*   210 */   735,  735,  735,  734,  735,  735,  735,  603,  735,  735,
 /*   220 */   602,  735,  735,  735,  601,  600,  599,  735,  735,  598,
 /*   230 */   735,  597,  735,  596,  735,  735,  735,  735,  735,  735,
 /*   240 */   594,  735,  735,  595,  735,  735,  735,  589,  592,  593,
 /*   250 */   735,  735,  735,  735,  590,  735,  591,  735,  735,  735,
 /*   260 */   735,  735,  735,  735,  735,  735,  735,  735,  735,  735,
 /*   270 */   735,  557,  735,  558,  735,  735,  509,  735,  735,  735,
 /*   280 */   735,  735,  735,  735,  735,  735,  735,  735,  735,  735,
 /*   290 */   735,  735,  735,  735,  662,  664,  735,  735,  735,  735,
 /*   300 */   735,  611,  735,  735,  735,  735,  735,  735,  735,  735,
 /*   310 */   521,  495,  496,  520,  523,  525,  526,  522,  535,  538,
 /*   320 */   541,  544,  547,  548,  559,  560,  561,  562,  563,  564,
 /*   330 */   565,  566,  567,  569,  570,  571,  572,  573,  574,  575,
 /*   340 */   576,  577,  578,  579,  613,  614,  615,  499,  500,  498,
 /*   350 */   502,  503,  504,  505,  506,  507,  512,  511,  510,  633,
 /*   360 */   537,  513,  618,  619,  620,  622,  621,  623,  624,  625,
 /*   370 */   626,  667,  668,  627,  628,  629,  644,  642,  517,  518,
 /*   380 */   514,  519,  617,  671,  647,  648,  649,  650,  651,  652,
 /*   390 */   653,  654,  655,  656,  657,  658,  659,  672,  675,  645,
 /*   400 */   646,  677,  673,  676,  681,  682,  683,  684,  688,  689,
 /*   410 */   690,  691,  692,  693,  678,  679,  694,  695,  687,  696,
 /*   420 */   685,  686,  698,  699,  700,  701,  702,  703,  704,  705,
 /*   430 */   706,  707,  708,  709,  710,  711,  712,  713,  714,  715,
 /*   440 */   716,  717,  720,  721,  718,  719,  722,  723,  725,  726,
 /*   450 */   727,  728,  730,  731,  732,  733,  729,  697,  636,  630,
 /*   460 */   616,  660,  661,  666,  663,  549,  641,  534,  545,  546,
 /*   470 */   640,  634,  631,  533,  558,  542,  543,  639,  532,  539,
 /*   480 */   540,  638,  632,  531,  536,  529,  557,  527,  528,  530,
 /*   490 */   524,  637,  635,  497,
};
#define YY_SZ_ACTTAB (int)(sizeof(yy_action)/sizeof(yy_action[0]))

/* The next table maps tokens into fallback tokens.  If a construct
** like the following:
** 
**      %fallback ID X Y Z.
**
** appears in the grammar, then ID becomes a fallback token for X, Y,
** and Z.  Whenever one of the tokens X, Y, or Z is input to the parser
** but it does not parse, the type of the token is changed to ID and
** the parse is retried before an error is thrown.
*/
#ifdef YYFALLBACK
static const YYCODETYPE yyFallback[] = {
};
#endif /* YYFALLBACK */

/* The following structure represents a single element of the
** parser's stack.  Information stored includes:
**
**   +  The state number for the parser at this level of the stack.
**
**   +  The value of the token stored at this level of the stack.
**      (In other words, the "major" token.)
**
**   +  The semantic value stored at this level of the stack.  This is
**      the information used by the action routines in the grammar.
**      It is sometimes called the "minor" token.
*/
struct yyStackEntry {
  YYACTIONTYPE stateno;  /* The state-number */
  YYCODETYPE major;      /* The major token value.  This is the code
                         ** number for the token at this stack level */
  YYMINORTYPE minor;     /* The user-supplied minor token value.  This
                         ** is the value of the token  */
};
typedef struct yyStackEntry yyStackEntry;

/* The state of the parser is completely contained in an instance of
** the following structure */
struct yyParser {
  int yyidx;                    /* Index of top element in stack */
#ifdef YYTRACKMAXSTACKDEPTH
  int yyidxMax;                 /* Maximum value of yyidx */
#endif
  int yyerrcnt;                 /* Shifts left before out of the error */
  XecParseARG_SDECL                /* A place to hold %extra_argument */
#if YYSTACKDEPTH<=0
  int yystksz;                  /* Current side of the stack */
  yyStackEntry *yystack;        /* The parser's stack */
#else
  yyStackEntry yystack[YYSTACKDEPTH];  /* The parser's stack */
#endif
};
typedef struct yyParser yyParser;

#ifndef NDEBUG
#include <stdio.h>
static FILE *yyTraceFILE = 0;
static char *yyTracePrompt = 0;
#endif /* NDEBUG */

#ifndef NDEBUG
/* 
** Turn parser tracing on by giving a stream to which to write the trace
** and a prompt to preface each trace message.  Tracing is turned off
** by making either argument NULL 
**
** Inputs:
** <ul>
** <li> A FILE* to which trace output should be written.
**      If NULL, then tracing is turned off.
** <li> A prefix string written at the beginning of every
**      line of trace output.  If NULL, then tracing is
**      turned off.
** </ul>
**
** Outputs:
** None.
*/
void XecParseTrace(FILE *TraceFILE, char *zTracePrompt){
  yyTraceFILE = TraceFILE;
  yyTracePrompt = zTracePrompt;
  if( yyTraceFILE==0 ) yyTracePrompt = 0;
  else if( yyTracePrompt==0 ) yyTraceFILE = 0;
}
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing shifts, the names of all terminals and nonterminals
** are required.  The following table supplies these names */
static const char *const yyTokenName[] = { 
  "$",             "IF",            "ELSE",          "TRY",         
  "CATCH",         "FINALLY",       "YIELD",         "LPN",         
  "IDENTIFIER",    "PERIOD",        "RPN",           "RBR",         
  "LBR",           "COLON",         "SEMICOLON",     "VAR",         
  "ASSIGN",        "COMMA",         "LSQ",           "RSQ",         
  "NEW",           "NULL",          "TRUE",          "FALSE",       
  "NUMBER",        "STRING",        "INCREMENT",     "DECREMENT",   
  "PLUS",          "MINUS",         "XMARK",         "TILDE",       
  "ASTERISK",      "SOLIDUS",       "PERCENT",       "LSHIFT",      
  "RSHIFT",        "URSHIFT",       "AMPERSAND",     "CARET",       
  "VBAR",          "CONCATENATE",   "EQUAL",         "NOTEQUAL",    
  "LESS",          "GREATER",       "LESSEQUAL",     "GREATEREQUAL",
  "IN",            "NOTIN",         "IS",            "NOTIS",       
  "LOGICAND",      "LOGICXOR",      "LOGICOR",       "QMARK",       
  "ELLIPSIS",      "MULASSIGN",     "DIVASSIGN",     "MODASSIGN",   
  "INTDIVASSIGN",  "ADDASSIGN",     "SUBASSIGN",     "LSHIFTASSIGN",
  "RSHIFTASSIGN",  "URSHIFTASSIGN",  "BITANDASSIGN",  "BITXORASSIGN",
  "BITORASSIGN",   "WHILE",         "DELETE",        "CASE",        
  "DEFAULT",       "CONTINUE",      "BREAK",         "RETURN",      
  "THROW",         "SWITCH",        "DO",            "FOR",         
  "EACHKEY",       "USING",         "error",         "proto",       
  "expr_call",     "expr_yield",    "object_lbr",    "newobj_lbr",  
  "func_lbr",      "newfunc_lbr",   "varname",       "varname_list",
  "assign_op",     "value_lbody",   "value_list",    "keyval_lbody",
  "keyval_list",   "stmt_lbr",      "stmt_lbr_ru",   "stmt_if",     
  "stmt_switch",   "stmt_while",    "stmt_do",       "scope_for",   
  "stmt_foreach",  "stmt_for",      "stmt_using",    "try_block",   
  "try_catch",     "scope_catch",   "stmt_catch",    "token_yield", 
  "script",        "stmt_list",     "name",          "expr_list",   
  "decl_object",   "object_decls",  "expr_simple",   "object_decl", 
  "decl_func",     "decl_proto",    "decl_var",      "decl_noinit", 
  "expr_index",    "expr_assign",   "expr_value",    "expr_new",    
  "expr_postfix",  "expr_literal",  "expr_suffix",   "expr_unary",  
  "expr_mul",      "expr_add",      "expr_shift",    "expr_bitand", 
  "expr_bitxor",   "expr_bitor",    "expr_concat",   "expr_compare",
  "expr_and",      "expr_xor",      "expr_or",       "expr_nolbr",  
  "expr_lbody",    "expr_final",    "sexpr_lbody",   "sexpr_list",  
  "sexpr_assign",  "condition",     "stmt",          "stmt_common", 
  "stmt_reuse",    "stmt_try",    
};
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing reduce actions, the names of all rules are required.
*/
static const char *const yyRuleName[] = {
 /*   0 */ "script ::= stmt_list",
 /*   1 */ "name ::= IDENTIFIER",
 /*   2 */ "name ::= name PERIOD IDENTIFIER",
 /*   3 */ "proto ::= name LPN expr_list RPN",
 /*   4 */ "decl_object ::= object_lbr object_decls RBR",
 /*   5 */ "object_lbr ::= name LBR",
 /*   6 */ "object_lbr ::= name COLON expr_simple LBR",
 /*   7 */ "object_decls ::=",
 /*   8 */ "object_decls ::= object_decls object_decl",
 /*   9 */ "object_decl ::= decl_object",
 /*  10 */ "object_decl ::= decl_func",
 /*  11 */ "object_decl ::= decl_proto SEMICOLON",
 /*  12 */ "object_decl ::= decl_var SEMICOLON",
 /*  13 */ "object_decl ::= decl_noinit SEMICOLON",
 /*  14 */ "decl_proto ::= proto",
 /*  15 */ "decl_proto ::= proto YIELD",
 /*  16 */ "decl_func ::= func_lbr stmt_list RBR",
 /*  17 */ "func_lbr ::= proto LBR",
 /*  18 */ "func_lbr ::= proto YIELD LBR",
 /*  19 */ "decl_var ::= VAR varname ASSIGN expr_list",
 /*  20 */ "decl_var ::= VAR varname_list ASSIGN expr_list",
 /*  21 */ "decl_noinit ::= VAR varname",
 /*  22 */ "decl_noinit ::= VAR varname_list",
 /*  23 */ "varname ::= IDENTIFIER",
 /*  24 */ "varname_list ::= varname COMMA varname",
 /*  25 */ "varname_list ::= varname_list COMMA varname",
 /*  26 */ "expr_index ::= LPN expr_assign RPN",
 /*  27 */ "expr_index ::= name PERIOD LSQ expr_value RSQ",
 /*  28 */ "expr_index ::= name LSQ expr_value RSQ",
 /*  29 */ "expr_index ::= expr_index PERIOD IDENTIFIER",
 /*  30 */ "expr_index ::= expr_index PERIOD LSQ expr_value RSQ",
 /*  31 */ "expr_index ::= expr_index LSQ expr_value RSQ",
 /*  32 */ "expr_yield ::= YIELD LPN expr_list RPN",
 /*  33 */ "expr_new ::= NEW name LPN expr_list RPN",
 /*  34 */ "expr_new ::= NEW expr_index LPN expr_list RPN",
 /*  35 */ "expr_call ::= proto LPN expr_list RPN",
 /*  36 */ "expr_call ::= expr_index LPN expr_list RPN",
 /*  37 */ "expr_call ::= expr_yield LPN expr_list RPN",
 /*  38 */ "expr_call ::= expr_new LPN expr_list RPN",
 /*  39 */ "expr_call ::= expr_call LPN expr_list RPN",
 /*  40 */ "expr_call ::= expr_postfix LPN expr_list RPN",
 /*  41 */ "expr_postfix ::= proto PERIOD IDENTIFIER",
 /*  42 */ "expr_postfix ::= proto PERIOD LSQ expr_value RSQ",
 /*  43 */ "expr_postfix ::= proto LSQ expr_value RSQ",
 /*  44 */ "expr_postfix ::= expr_yield PERIOD IDENTIFIER",
 /*  45 */ "expr_postfix ::= expr_yield PERIOD LSQ expr_value RSQ",
 /*  46 */ "expr_postfix ::= expr_yield LSQ expr_value RSQ",
 /*  47 */ "expr_postfix ::= expr_new PERIOD IDENTIFIER",
 /*  48 */ "expr_postfix ::= expr_new PERIOD LSQ expr_value RSQ",
 /*  49 */ "expr_postfix ::= expr_new LSQ expr_value RSQ",
 /*  50 */ "expr_postfix ::= expr_call PERIOD IDENTIFIER",
 /*  51 */ "expr_postfix ::= expr_call PERIOD LSQ expr_value RSQ",
 /*  52 */ "expr_postfix ::= expr_call LSQ expr_value RSQ",
 /*  53 */ "expr_postfix ::= expr_postfix PERIOD IDENTIFIER",
 /*  54 */ "expr_postfix ::= expr_postfix PERIOD LSQ expr_value RSQ",
 /*  55 */ "expr_postfix ::= expr_postfix LSQ expr_value RSQ",
 /*  56 */ "expr_simple ::= name",
 /*  57 */ "expr_simple ::= proto",
 /*  58 */ "expr_simple ::= expr_index",
 /*  59 */ "expr_simple ::= expr_yield",
 /*  60 */ "expr_simple ::= expr_new",
 /*  61 */ "expr_simple ::= expr_call",
 /*  62 */ "expr_simple ::= expr_postfix",
 /*  63 */ "expr_simple ::= proto YIELD",
 /*  64 */ "expr_simple ::= expr_call YIELD",
 /*  65 */ "expr_literal ::= expr_simple",
 /*  66 */ "expr_literal ::= NULL",
 /*  67 */ "expr_literal ::= TRUE",
 /*  68 */ "expr_literal ::= FALSE",
 /*  69 */ "expr_literal ::= NUMBER",
 /*  70 */ "expr_literal ::= STRING",
 /*  71 */ "expr_suffix ::= expr_literal",
 /*  72 */ "expr_suffix ::= expr_suffix INCREMENT",
 /*  73 */ "expr_suffix ::= expr_suffix DECREMENT",
 /*  74 */ "expr_unary ::= expr_suffix",
 /*  75 */ "expr_unary ::= PLUS expr_unary",
 /*  76 */ "expr_unary ::= MINUS expr_unary",
 /*  77 */ "expr_unary ::= XMARK expr_unary",
 /*  78 */ "expr_unary ::= TILDE expr_unary",
 /*  79 */ "expr_unary ::= INCREMENT expr_unary",
 /*  80 */ "expr_unary ::= DECREMENT expr_unary",
 /*  81 */ "expr_mul ::= expr_unary",
 /*  82 */ "expr_mul ::= expr_mul ASTERISK expr_unary",
 /*  83 */ "expr_mul ::= expr_mul SOLIDUS expr_unary",
 /*  84 */ "expr_mul ::= expr_mul PERCENT expr_unary",
 /*  85 */ "expr_mul ::= expr_mul TILDE expr_unary",
 /*  86 */ "expr_add ::= expr_mul",
 /*  87 */ "expr_add ::= expr_add PLUS expr_mul",
 /*  88 */ "expr_add ::= expr_add MINUS expr_mul",
 /*  89 */ "expr_shift ::= expr_add",
 /*  90 */ "expr_shift ::= expr_shift LSHIFT expr_add",
 /*  91 */ "expr_shift ::= expr_shift RSHIFT expr_add",
 /*  92 */ "expr_shift ::= expr_shift URSHIFT expr_add",
 /*  93 */ "expr_bitand ::= expr_shift",
 /*  94 */ "expr_bitand ::= expr_bitand AMPERSAND expr_shift",
 /*  95 */ "expr_bitxor ::= expr_bitand",
 /*  96 */ "expr_bitxor ::= expr_bitxor CARET expr_bitand",
 /*  97 */ "expr_bitor ::= expr_bitxor",
 /*  98 */ "expr_bitor ::= expr_bitor VBAR expr_bitxor",
 /*  99 */ "expr_concat ::= expr_bitor",
 /* 100 */ "expr_concat ::= expr_concat CONCATENATE expr_bitor",
 /* 101 */ "expr_compare ::= expr_concat",
 /* 102 */ "expr_compare ::= expr_compare EQUAL expr_concat",
 /* 103 */ "expr_compare ::= expr_compare NOTEQUAL expr_concat",
 /* 104 */ "expr_compare ::= expr_compare LESS expr_concat",
 /* 105 */ "expr_compare ::= expr_compare GREATER expr_concat",
 /* 106 */ "expr_compare ::= expr_compare LESSEQUAL expr_concat",
 /* 107 */ "expr_compare ::= expr_compare GREATEREQUAL expr_concat",
 /* 108 */ "expr_compare ::= expr_compare IN expr_concat",
 /* 109 */ "expr_compare ::= expr_compare NOTIN expr_concat",
 /* 110 */ "expr_compare ::= expr_compare IS expr_concat",
 /* 111 */ "expr_compare ::= expr_compare NOTIS expr_concat",
 /* 112 */ "expr_and ::= expr_compare",
 /* 113 */ "expr_and ::= expr_and LOGICAND expr_compare",
 /* 114 */ "expr_xor ::= expr_and",
 /* 115 */ "expr_xor ::= expr_xor LOGICXOR expr_and",
 /* 116 */ "expr_or ::= expr_xor",
 /* 117 */ "expr_or ::= expr_or LOGICOR expr_xor",
 /* 118 */ "expr_nolbr ::= expr_or",
 /* 119 */ "expr_nolbr ::= expr_or QMARK expr_value COLON expr_value",
 /* 120 */ "expr_nolbr ::= LSQ RSQ",
 /* 121 */ "expr_nolbr ::= LSQ value_list RSQ",
 /* 122 */ "expr_nolbr ::= newobj_lbr object_decls RBR",
 /* 123 */ "expr_nolbr ::= newfunc_lbr stmt_list RBR",
 /* 124 */ "newobj_lbr ::= COLON LBR",
 /* 125 */ "newobj_lbr ::= COLON expr_simple LBR",
 /* 126 */ "newfunc_lbr ::= QMARK LPN expr_list RPN LBR",
 /* 127 */ "newfunc_lbr ::= PERIOD QMARK LPN expr_list RPN LBR",
 /* 128 */ "newfunc_lbr ::= QMARK LPN expr_list RPN YIELD LBR",
 /* 129 */ "newfunc_lbr ::= PERIOD QMARK LPN expr_list RPN YIELD LBR",
 /* 130 */ "expr_value ::= expr_nolbr",
 /* 131 */ "expr_value ::= LBR RBR",
 /* 132 */ "expr_value ::= LBR keyval_list RBR",
 /* 133 */ "expr_lbody ::= expr_value",
 /* 134 */ "expr_lbody ::= expr_lbody COMMA expr_value",
 /* 135 */ "expr_final ::= ELLIPSIS",
 /* 136 */ "expr_final ::= proto ELLIPSIS",
 /* 137 */ "expr_final ::= expr_call ELLIPSIS",
 /* 138 */ "expr_final ::= expr_yield ELLIPSIS",
 /* 139 */ "expr_final ::= proto YIELD ELLIPSIS",
 /* 140 */ "expr_final ::= expr_call YIELD ELLIPSIS",
 /* 141 */ "expr_final ::= name LSQ RSQ ELLIPSIS",
 /* 142 */ "expr_final ::= proto LSQ RSQ ELLIPSIS",
 /* 143 */ "expr_final ::= expr_index LSQ RSQ ELLIPSIS",
 /* 144 */ "expr_final ::= expr_yield LSQ RSQ ELLIPSIS",
 /* 145 */ "expr_final ::= expr_new LSQ RSQ ELLIPSIS",
 /* 146 */ "expr_final ::= expr_call LSQ RSQ ELLIPSIS",
 /* 147 */ "expr_final ::= expr_postfix LSQ RSQ ELLIPSIS",
 /* 148 */ "expr_list ::= expr_final",
 /* 149 */ "expr_list ::= expr_lbody",
 /* 150 */ "expr_list ::= expr_lbody COMMA expr_final",
 /* 151 */ "expr_assign ::= expr_list",
 /* 152 */ "expr_assign ::= expr_lbody assign_op expr_assign",
 /* 153 */ "assign_op ::= ASSIGN",
 /* 154 */ "assign_op ::= MULASSIGN",
 /* 155 */ "assign_op ::= DIVASSIGN",
 /* 156 */ "assign_op ::= MODASSIGN",
 /* 157 */ "assign_op ::= INTDIVASSIGN",
 /* 158 */ "assign_op ::= ADDASSIGN",
 /* 159 */ "assign_op ::= SUBASSIGN",
 /* 160 */ "assign_op ::= LSHIFTASSIGN",
 /* 161 */ "assign_op ::= RSHIFTASSIGN",
 /* 162 */ "assign_op ::= URSHIFTASSIGN",
 /* 163 */ "assign_op ::= BITANDASSIGN",
 /* 164 */ "assign_op ::= BITXORASSIGN",
 /* 165 */ "assign_op ::= BITORASSIGN",
 /* 166 */ "value_lbody ::= expr_value",
 /* 167 */ "value_lbody ::= value_lbody COMMA expr_value",
 /* 168 */ "value_list ::= expr_final",
 /* 169 */ "value_list ::= expr_final COMMA",
 /* 170 */ "value_list ::= value_lbody",
 /* 171 */ "value_list ::= value_lbody COMMA",
 /* 172 */ "value_list ::= value_lbody COMMA expr_final",
 /* 173 */ "keyval_lbody ::= expr_value COLON expr_value",
 /* 174 */ "keyval_lbody ::= keyval_lbody COMMA expr_value COLON expr_value",
 /* 175 */ "keyval_list ::= keyval_lbody",
 /* 176 */ "keyval_list ::= keyval_lbody COMMA",
 /* 177 */ "sexpr_lbody ::= expr_nolbr",
 /* 178 */ "sexpr_lbody ::= sexpr_lbody COMMA expr_value",
 /* 179 */ "sexpr_list ::= expr_final",
 /* 180 */ "sexpr_list ::= sexpr_lbody",
 /* 181 */ "sexpr_list ::= sexpr_lbody COMMA expr_final",
 /* 182 */ "sexpr_assign ::= sexpr_list",
 /* 183 */ "sexpr_assign ::= sexpr_lbody assign_op expr_assign",
 /* 184 */ "condition ::= expr_assign",
 /* 185 */ "condition ::= decl_var",
 /* 186 */ "stmt_list ::=",
 /* 187 */ "stmt_list ::= stmt_list stmt",
 /* 188 */ "stmt ::= stmt_lbr stmt_list RBR",
 /* 189 */ "stmt ::= stmt_common",
 /* 190 */ "stmt_lbr ::= LBR",
 /* 191 */ "stmt_reuse ::= stmt_lbr_ru stmt_list RBR",
 /* 192 */ "stmt_reuse ::= stmt_common",
 /* 193 */ "stmt_lbr_ru ::= LBR",
 /* 194 */ "stmt_common ::= SEMICOLON",
 /* 195 */ "stmt_common ::= sexpr_assign SEMICOLON",
 /* 196 */ "stmt_common ::= decl_object",
 /* 197 */ "stmt_common ::= decl_func",
 /* 198 */ "stmt_common ::= decl_var SEMICOLON",
 /* 199 */ "stmt_common ::= decl_noinit SEMICOLON",
 /* 200 */ "stmt_common ::= stmt_if LPN condition RPN stmt",
 /* 201 */ "stmt_common ::= stmt_if LPN condition RPN stmt ELSE stmt",
 /* 202 */ "stmt_common ::= stmt_switch LPN condition RPN stmt_lbr_ru stmt_list RPN",
 /* 203 */ "stmt_common ::= stmt_while LPN condition RPN stmt_reuse",
 /* 204 */ "stmt_common ::= stmt_do stmt_reuse WHILE LPN expr_assign RPN SEMICOLON",
 /* 205 */ "stmt_common ::= stmt_foreach stmt_reuse",
 /* 206 */ "stmt_common ::= stmt_for stmt_reuse",
 /* 207 */ "stmt_common ::= stmt_using LPN condition RPN stmt_reuse",
 /* 208 */ "stmt_common ::= stmt_try",
 /* 209 */ "stmt_common ::= DELETE expr_lbody SEMICOLON",
 /* 210 */ "stmt_common ::= CASE expr_value COLON",
 /* 211 */ "stmt_common ::= DEFAULT COLON",
 /* 212 */ "stmt_common ::= CONTINUE SEMICOLON",
 /* 213 */ "stmt_common ::= BREAK SEMICOLON",
 /* 214 */ "stmt_common ::= RETURN SEMICOLON",
 /* 215 */ "stmt_common ::= RETURN expr_list SEMICOLON",
 /* 216 */ "stmt_common ::= token_yield SEMICOLON",
 /* 217 */ "stmt_common ::= token_yield expr_list SEMICOLON",
 /* 218 */ "stmt_common ::= THROW expr_value SEMICOLON",
 /* 219 */ "stmt_if ::= IF",
 /* 220 */ "stmt_switch ::= SWITCH",
 /* 221 */ "stmt_while ::= WHILE",
 /* 222 */ "stmt_do ::= DO",
 /* 223 */ "scope_for ::= FOR",
 /* 224 */ "stmt_foreach ::= scope_for LPN expr_lbody COLON expr_value RPN",
 /* 225 */ "stmt_foreach ::= scope_for LPN expr_lbody EACHKEY expr_value RPN",
 /* 226 */ "stmt_foreach ::= scope_for LPN VAR varname_list COLON expr_value RPN",
 /* 227 */ "stmt_foreach ::= scope_for LPN VAR varname_list EACHKEY expr_value RPN",
 /* 228 */ "stmt_for ::= scope_for LPN condition SEMICOLON expr_assign SEMICOLON expr_assign RPN",
 /* 229 */ "stmt_using ::= USING",
 /* 230 */ "stmt_try ::= try_catch",
 /* 231 */ "stmt_try ::= try_catch FINALLY stmt",
 /* 232 */ "stmt_try ::= try_block FINALLY stmt",
 /* 233 */ "try_block ::= TRY stmt",
 /* 234 */ "try_catch ::= try_block stmt_catch stmt_reuse",
 /* 235 */ "try_catch ::= try_catch stmt_catch stmt_reuse",
 /* 236 */ "scope_catch ::= CATCH",
 /* 237 */ "stmt_catch ::= scope_catch LPN COLON expr_simple RPN",
 /* 238 */ "stmt_catch ::= scope_catch LPN expr_value COLON expr_simple RPN",
 /* 239 */ "stmt_catch ::= scope_catch LPN VAR varname COLON expr_simple RPN",
 /* 240 */ "token_yield ::= YIELD",
};
#endif /* NDEBUG */


#if YYSTACKDEPTH<=0
/*
** Try to increase the size of the parser stack.
*/
static void yyGrowStack(yyParser *p){
  int newSize;
  yyStackEntry *pNew;

  newSize = p->yystksz*2 + 100;
  pNew = realloc(p->yystack, newSize*sizeof(pNew[0]));
  if( pNew ){
    p->yystack = pNew;
    p->yystksz = newSize;
#ifndef NDEBUG
    if( yyTraceFILE ){
      fprintf(yyTraceFILE,"%sStack grows to %d entries!\n",
              yyTracePrompt, p->yystksz);
    }
#endif
  }
}
#endif

/* 
** This function allocates a new parser.
** The only argument is a pointer to a function which works like
** malloc.
**
** Inputs:
** A pointer to the function used to allocate memory.
**
** Outputs:
** A pointer to a parser.  This pointer is used in subsequent calls
** to XecParse and XecParseFree.
*/
void *XecParseAlloc(void *(*mallocProc)(size_t)){
  yyParser *pParser;
  pParser = (yyParser*)(*mallocProc)( (size_t)sizeof(yyParser) );
  if( pParser ){
    pParser->yyidx = -1;
#ifdef YYTRACKMAXSTACKDEPTH
    pParser->yyidxMax = 0;
#endif
#if YYSTACKDEPTH<=0
    pParser->yystack = NULL;
    pParser->yystksz = 0;
    yyGrowStack(pParser);
#endif
  }
  return pParser;
}

/* The following function deletes the value associated with a
** symbol.  The symbol can be either a terminal or nonterminal.
** "yymajor" is the symbol code, and "yypminor" is a pointer to
** the value.
*/
static void yy_destructor(
  yyParser *yypParser,    /* The parser */
  YYCODETYPE yymajor,     /* Type code for object to destroy */
  YYMINORTYPE *yypminor   /* The object to be destroyed */
){
  XecParseARG_FETCH;
  switch( yymajor ){
    /* Here is inserted the actions which take place when a
    ** terminal or non-terminal is destroyed.  This can happen
    ** when the symbol is popped from the stack during a
    ** reduce or during error processing or when a parser is 
    ** being destroyed before it is finished parsing.
    **
    ** Note: during a reduce, the only symbols destroyed are those
    ** which appear on the RHS of the rule, but which are not used
    ** inside the C code.
    */
      /* TERMINAL Destructor */
    case 1: /* IF */
    case 2: /* ELSE */
    case 3: /* TRY */
    case 4: /* CATCH */
    case 5: /* FINALLY */
    case 6: /* YIELD */
    case 7: /* LPN */
    case 8: /* IDENTIFIER */
    case 9: /* PERIOD */
    case 10: /* RPN */
    case 11: /* RBR */
    case 12: /* LBR */
    case 13: /* COLON */
    case 14: /* SEMICOLON */
    case 15: /* VAR */
    case 16: /* ASSIGN */
    case 17: /* COMMA */
    case 18: /* LSQ */
    case 19: /* RSQ */
    case 20: /* NEW */
    case 21: /* NULL */
    case 22: /* TRUE */
    case 23: /* FALSE */
    case 24: /* NUMBER */
    case 25: /* STRING */
    case 26: /* INCREMENT */
    case 27: /* DECREMENT */
    case 28: /* PLUS */
    case 29: /* MINUS */
    case 30: /* XMARK */
    case 31: /* TILDE */
    case 32: /* ASTERISK */
    case 33: /* SOLIDUS */
    case 34: /* PERCENT */
    case 35: /* LSHIFT */
    case 36: /* RSHIFT */
    case 37: /* URSHIFT */
    case 38: /* AMPERSAND */
    case 39: /* CARET */
    case 40: /* VBAR */
    case 41: /* CONCATENATE */
    case 42: /* EQUAL */
    case 43: /* NOTEQUAL */
    case 44: /* LESS */
    case 45: /* GREATER */
    case 46: /* LESSEQUAL */
    case 47: /* GREATEREQUAL */
    case 48: /* IN */
    case 49: /* NOTIN */
    case 50: /* IS */
    case 51: /* NOTIS */
    case 52: /* LOGICAND */
    case 53: /* LOGICXOR */
    case 54: /* LOGICOR */
    case 55: /* QMARK */
    case 56: /* ELLIPSIS */
    case 57: /* MULASSIGN */
    case 58: /* DIVASSIGN */
    case 59: /* MODASSIGN */
    case 60: /* INTDIVASSIGN */
    case 61: /* ADDASSIGN */
    case 62: /* SUBASSIGN */
    case 63: /* LSHIFTASSIGN */
    case 64: /* RSHIFTASSIGN */
    case 65: /* URSHIFTASSIGN */
    case 66: /* BITANDASSIGN */
    case 67: /* BITXORASSIGN */
    case 68: /* BITORASSIGN */
    case 69: /* WHILE */
    case 70: /* DELETE */
    case 71: /* CASE */
    case 72: /* DEFAULT */
    case 73: /* CONTINUE */
    case 74: /* BREAK */
    case 75: /* RETURN */
    case 76: /* THROW */
    case 77: /* SWITCH */
    case 78: /* DO */
    case 79: /* FOR */
    case 80: /* EACHKEY */
    case 81: /* USING */
{
#line 108 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"

    p->destroy( (yypminor->yy0) );

#line 2192 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
}
      break;
      /* Default NON-TERMINAL Destructor */
    case 82: /* error */
    case 83: /* proto */
    case 84: /* expr_call */
    case 85: /* expr_yield */
    case 86: /* object_lbr */
    case 87: /* newobj_lbr */
    case 88: /* func_lbr */
    case 89: /* newfunc_lbr */
    case 90: /* varname */
    case 91: /* varname_list */
    case 92: /* assign_op */
    case 93: /* value_lbody */
    case 94: /* value_list */
    case 95: /* keyval_lbody */
    case 96: /* keyval_list */
    case 97: /* stmt_lbr */
    case 98: /* stmt_lbr_ru */
    case 99: /* stmt_if */
    case 100: /* stmt_switch */
    case 101: /* stmt_while */
    case 102: /* stmt_do */
    case 103: /* scope_for */
    case 104: /* stmt_foreach */
    case 105: /* stmt_for */
    case 106: /* stmt_using */
    case 107: /* try_block */
    case 108: /* try_catch */
    case 109: /* scope_catch */
    case 110: /* stmt_catch */
    case 111: /* token_yield */
    case 112: /* script */
    case 113: /* stmt_list */
    case 114: /* name */
    case 115: /* expr_list */
    case 116: /* decl_object */
    case 117: /* object_decls */
    case 118: /* expr_simple */
    case 119: /* object_decl */
    case 120: /* decl_func */
    case 121: /* decl_proto */
    case 122: /* decl_var */
    case 123: /* decl_noinit */
    case 124: /* expr_index */
    case 125: /* expr_assign */
    case 126: /* expr_value */
    case 127: /* expr_new */
    case 128: /* expr_postfix */
    case 129: /* expr_literal */
    case 130: /* expr_suffix */
    case 131: /* expr_unary */
    case 132: /* expr_mul */
    case 133: /* expr_add */
    case 134: /* expr_shift */
    case 135: /* expr_bitand */
    case 136: /* expr_bitxor */
    case 137: /* expr_bitor */
    case 138: /* expr_concat */
    case 139: /* expr_compare */
    case 140: /* expr_and */
    case 141: /* expr_xor */
    case 142: /* expr_or */
    case 143: /* expr_nolbr */
    case 144: /* expr_lbody */
    case 145: /* expr_final */
    case 146: /* sexpr_lbody */
    case 147: /* sexpr_list */
    case 148: /* sexpr_assign */
    case 149: /* condition */
    case 150: /* stmt */
    case 151: /* stmt_common */
    case 152: /* stmt_reuse */
    case 153: /* stmt_try */
{
#line 103 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"

    delete (yypminor->yy91);

#line 2273 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
}
      break;
    default:  break;   /* If no destructor action specified: do nothing */
  }
}

/*
** Pop the parser's stack once.
**
** If there is a destructor routine associated with the token which
** is popped from the stack, then call it.
**
** Return the major token number for the symbol popped.
*/
static int yy_pop_parser_stack(yyParser *pParser){
  YYCODETYPE yymajor;
  yyStackEntry *yytos = &pParser->yystack[pParser->yyidx];

  if( pParser->yyidx<0 ) return 0;
#ifndef NDEBUG
  if( yyTraceFILE && pParser->yyidx>=0 ){
    fprintf(yyTraceFILE,"%sPopping %s\n",
      yyTracePrompt,
      yyTokenName[yytos->major]);
  }
#endif
  yymajor = yytos->major;
  yy_destructor(pParser, yymajor, &yytos->minor);
  pParser->yyidx--;
  return yymajor;
}

/* 
** Deallocate and destroy a parser.  Destructors are all called for
** all stack elements before shutting the parser down.
**
** Inputs:
** <ul>
** <li>  A pointer to the parser.  This should be a pointer
**       obtained from XecParseAlloc.
** <li>  A pointer to a function used to reclaim memory obtained
**       from malloc.
** </ul>
*/
void XecParseFree(
  void *p,                    /* The parser to be deleted */
  void (*freeProc)(void*)     /* Function used to reclaim memory */
){
  yyParser *pParser = (yyParser*)p;
  if( pParser==0 ) return;
  while( pParser->yyidx>=0 ) yy_pop_parser_stack(pParser);
#if YYSTACKDEPTH<=0
  free(pParser->yystack);
#endif
  (*freeProc)((void*)pParser);
}

/*
** Return the peak depth of the stack for a parser.
*/
#ifdef YYTRACKMAXSTACKDEPTH
int XecParseStackPeak(void *p){
  yyParser *pParser = (yyParser*)p;
  return pParser->yyidxMax;
}
#endif

/*
** Find the appropriate action for a parser given the terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
static int yy_find_shift_action(
  yyParser *pParser,        /* The parser */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
  int stateno = pParser->yystack[pParser->yyidx].stateno;
 
  if( stateno>YY_SHIFT_MAX || (i = yy_shift_ofst[stateno])==YY_SHIFT_USE_DFLT ){
    return yy_default[stateno];
  }
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
  if( i<0 || i>=YY_SZ_ACTTAB || yy_lookahead[i]!=iLookAhead ){
    if( iLookAhead>0 ){
#ifdef YYFALLBACK
      YYCODETYPE iFallback;            /* Fallback token */
      if( iLookAhead<sizeof(yyFallback)/sizeof(yyFallback[0])
             && (iFallback = yyFallback[iLookAhead])!=0 ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE, "%sFALLBACK %s => %s\n",
             yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[iFallback]);
        }
#endif
        return yy_find_shift_action(pParser, iFallback);
      }
#endif
#ifdef YYWILDCARD
      {
        int j = i - iLookAhead + YYWILDCARD;
        if( j>=0 && j<YY_SZ_ACTTAB && yy_lookahead[j]==YYWILDCARD ){
#ifndef NDEBUG
          if( yyTraceFILE ){
            fprintf(yyTraceFILE, "%sWILDCARD %s => %s\n",
               yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[YYWILDCARD]);
          }
#endif /* NDEBUG */
          return yy_action[j];
        }
      }
#endif /* YYWILDCARD */
    }
    return yy_default[stateno];
  }else{
    return yy_action[i];
  }
}

/*
** Find the appropriate action for a parser given the non-terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
static int yy_find_reduce_action(
  int stateno,              /* Current state number */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
#ifdef YYERRORSYMBOL
  if( stateno>YY_REDUCE_MAX ){
    return yy_default[stateno];
  }
#else
  assert( stateno<=YY_REDUCE_MAX );
#endif
  i = yy_reduce_ofst[stateno];
  assert( i!=YY_REDUCE_USE_DFLT );
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
#ifdef YYERRORSYMBOL
  if( i<0 || i>=YY_SZ_ACTTAB || yy_lookahead[i]!=iLookAhead ){
    return yy_default[stateno];
  }
#else
  assert( i>=0 && i<YY_SZ_ACTTAB );
  assert( yy_lookahead[i]==iLookAhead );
#endif
  return yy_action[i];
}

/*
** The following routine is called if the stack overflows.
*/
static void yyStackOverflow(yyParser *yypParser, YYMINORTYPE *yypMinor){
   XecParseARG_FETCH;
   yypParser->yyidx--;
#ifndef NDEBUG
   if( yyTraceFILE ){
     fprintf(yyTraceFILE,"%sStack Overflow!\n",yyTracePrompt);
   }
#endif
   while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
   /* Here code is inserted which will execute if the parser
   ** stack every overflows */
   XecParseARG_STORE; /* Suppress warning about unused %extra_argument var */
}

/*
** Perform a shift action.
*/
static void yy_shift(
  yyParser *yypParser,          /* The parser to be shifted */
  int yyNewState,               /* The new state to shift in */
  int yyMajor,                  /* The major token to shift in */
  YYMINORTYPE *yypMinor         /* Pointer to the minor token to shift in */
){
  yyStackEntry *yytos;
  yypParser->yyidx++;
#ifdef YYTRACKMAXSTACKDEPTH
  if( yypParser->yyidx>yypParser->yyidxMax ){
    yypParser->yyidxMax = yypParser->yyidx;
  }
#endif
#if YYSTACKDEPTH>0 
  if( yypParser->yyidx>=YYSTACKDEPTH ){
    yyStackOverflow(yypParser, yypMinor);
    return;
  }
#else
  if( yypParser->yyidx>=yypParser->yystksz ){
    yyGrowStack(yypParser);
    if( yypParser->yyidx>=yypParser->yystksz ){
      yyStackOverflow(yypParser, yypMinor);
      return;
    }
  }
#endif
  yytos = &yypParser->yystack[yypParser->yyidx];
  yytos->stateno = (YYACTIONTYPE)yyNewState;
  yytos->major = (YYCODETYPE)yyMajor;
  yytos->minor = *yypMinor;
#ifndef NDEBUG
  if( yyTraceFILE && yypParser->yyidx>0 ){
    int i;
    fprintf(yyTraceFILE,"%sShift %d\n",yyTracePrompt,yyNewState);
    fprintf(yyTraceFILE,"%sStack:",yyTracePrompt);
    for(i=1; i<=yypParser->yyidx; i++)
      fprintf(yyTraceFILE," %s",yyTokenName[yypParser->yystack[i].major]);
    fprintf(yyTraceFILE,"\n");
  }
#endif
}

/* The following table contains information about every rule that
** is used during the reduce.
*/
static const struct {
  YYCODETYPE lhs;         /* Symbol on the left-hand side of the rule */
  unsigned char nrhs;     /* Number of right-hand side symbols in the rule */
} yyRuleInfo[] = {
  { 112, 1 },
  { 114, 1 },
  { 114, 3 },
  { 83, 4 },
  { 116, 3 },
  { 86, 2 },
  { 86, 4 },
  { 117, 0 },
  { 117, 2 },
  { 119, 1 },
  { 119, 1 },
  { 119, 2 },
  { 119, 2 },
  { 119, 2 },
  { 121, 1 },
  { 121, 2 },
  { 120, 3 },
  { 88, 2 },
  { 88, 3 },
  { 122, 4 },
  { 122, 4 },
  { 123, 2 },
  { 123, 2 },
  { 90, 1 },
  { 91, 3 },
  { 91, 3 },
  { 124, 3 },
  { 124, 5 },
  { 124, 4 },
  { 124, 3 },
  { 124, 5 },
  { 124, 4 },
  { 85, 4 },
  { 127, 5 },
  { 127, 5 },
  { 84, 4 },
  { 84, 4 },
  { 84, 4 },
  { 84, 4 },
  { 84, 4 },
  { 84, 4 },
  { 128, 3 },
  { 128, 5 },
  { 128, 4 },
  { 128, 3 },
  { 128, 5 },
  { 128, 4 },
  { 128, 3 },
  { 128, 5 },
  { 128, 4 },
  { 128, 3 },
  { 128, 5 },
  { 128, 4 },
  { 128, 3 },
  { 128, 5 },
  { 128, 4 },
  { 118, 1 },
  { 118, 1 },
  { 118, 1 },
  { 118, 1 },
  { 118, 1 },
  { 118, 1 },
  { 118, 1 },
  { 118, 2 },
  { 118, 2 },
  { 129, 1 },
  { 129, 1 },
  { 129, 1 },
  { 129, 1 },
  { 129, 1 },
  { 129, 1 },
  { 130, 1 },
  { 130, 2 },
  { 130, 2 },
  { 131, 1 },
  { 131, 2 },
  { 131, 2 },
  { 131, 2 },
  { 131, 2 },
  { 131, 2 },
  { 131, 2 },
  { 132, 1 },
  { 132, 3 },
  { 132, 3 },
  { 132, 3 },
  { 132, 3 },
  { 133, 1 },
  { 133, 3 },
  { 133, 3 },
  { 134, 1 },
  { 134, 3 },
  { 134, 3 },
  { 134, 3 },
  { 135, 1 },
  { 135, 3 },
  { 136, 1 },
  { 136, 3 },
  { 137, 1 },
  { 137, 3 },
  { 138, 1 },
  { 138, 3 },
  { 139, 1 },
  { 139, 3 },
  { 139, 3 },
  { 139, 3 },
  { 139, 3 },
  { 139, 3 },
  { 139, 3 },
  { 139, 3 },
  { 139, 3 },
  { 139, 3 },
  { 139, 3 },
  { 140, 1 },
  { 140, 3 },
  { 141, 1 },
  { 141, 3 },
  { 142, 1 },
  { 142, 3 },
  { 143, 1 },
  { 143, 5 },
  { 143, 2 },
  { 143, 3 },
  { 143, 3 },
  { 143, 3 },
  { 87, 2 },
  { 87, 3 },
  { 89, 5 },
  { 89, 6 },
  { 89, 6 },
  { 89, 7 },
  { 126, 1 },
  { 126, 2 },
  { 126, 3 },
  { 144, 1 },
  { 144, 3 },
  { 145, 1 },
  { 145, 2 },
  { 145, 2 },
  { 145, 2 },
  { 145, 3 },
  { 145, 3 },
  { 145, 4 },
  { 145, 4 },
  { 145, 4 },
  { 145, 4 },
  { 145, 4 },
  { 145, 4 },
  { 145, 4 },
  { 115, 1 },
  { 115, 1 },
  { 115, 3 },
  { 125, 1 },
  { 125, 3 },
  { 92, 1 },
  { 92, 1 },
  { 92, 1 },
  { 92, 1 },
  { 92, 1 },
  { 92, 1 },
  { 92, 1 },
  { 92, 1 },
  { 92, 1 },
  { 92, 1 },
  { 92, 1 },
  { 92, 1 },
  { 92, 1 },
  { 93, 1 },
  { 93, 3 },
  { 94, 1 },
  { 94, 2 },
  { 94, 1 },
  { 94, 2 },
  { 94, 3 },
  { 95, 3 },
  { 95, 5 },
  { 96, 1 },
  { 96, 2 },
  { 146, 1 },
  { 146, 3 },
  { 147, 1 },
  { 147, 1 },
  { 147, 3 },
  { 148, 1 },
  { 148, 3 },
  { 149, 1 },
  { 149, 1 },
  { 113, 0 },
  { 113, 2 },
  { 150, 3 },
  { 150, 1 },
  { 97, 1 },
  { 152, 3 },
  { 152, 1 },
  { 98, 1 },
  { 151, 1 },
  { 151, 2 },
  { 151, 1 },
  { 151, 1 },
  { 151, 2 },
  { 151, 2 },
  { 151, 5 },
  { 151, 7 },
  { 151, 7 },
  { 151, 5 },
  { 151, 7 },
  { 151, 2 },
  { 151, 2 },
  { 151, 5 },
  { 151, 1 },
  { 151, 3 },
  { 151, 3 },
  { 151, 2 },
  { 151, 2 },
  { 151, 2 },
  { 151, 2 },
  { 151, 3 },
  { 151, 2 },
  { 151, 3 },
  { 151, 3 },
  { 99, 1 },
  { 100, 1 },
  { 101, 1 },
  { 102, 1 },
  { 103, 1 },
  { 104, 6 },
  { 104, 6 },
  { 104, 7 },
  { 104, 7 },
  { 105, 8 },
  { 106, 1 },
  { 153, 1 },
  { 153, 3 },
  { 153, 3 },
  { 107, 2 },
  { 108, 3 },
  { 108, 3 },
  { 109, 1 },
  { 110, 5 },
  { 110, 6 },
  { 110, 7 },
  { 111, 1 },
};

static void yy_accept(yyParser*);  /* Forward Declaration */

/*
** Perform a reduce action and the shift that must immediately
** follow the reduce.
*/
static void yy_reduce(
  yyParser *yypParser,         /* The parser */
  int yyruleno                 /* Number of the rule by which to reduce */
){
  int yygoto;                     /* The next state */
  int yyact;                      /* The next action */
  YYMINORTYPE yygotominor;        /* The LHS of the rule reduced */
  yyStackEntry *yymsp;            /* The top of the parser's stack */
  int yysize;                     /* Amount to pop the stack */
  XecParseARG_FETCH;
  yymsp = &yypParser->yystack[yypParser->yyidx];
#ifndef NDEBUG
  if( yyTraceFILE && yyruleno>=0 
        && yyruleno<(int)(sizeof(yyRuleName)/sizeof(yyRuleName[0])) ){
    fprintf(yyTraceFILE, "%sReduce [%s].\n", yyTracePrompt,
      yyRuleName[yyruleno]);
  }
#endif /* NDEBUG */

  /* Silence complaints from purify about yygotominor being uninitialized
  ** in some cases when it is copied into the stack after the following
  ** switch.  yygotominor is uninitialized when a rule reduces that does
  ** not set the value of its left-hand side nonterminal.  Leaving the
  ** value of the nonterminal uninitialized is utterly harmless as long
  ** as the value is never used.  So really the only thing this code
  ** accomplishes is to quieten purify.  
  **
  ** 2007-01-16:  The wireshark project (www.wireshark.org) reports that
  ** without this code, their parser segfaults.  I'm not sure what there
  ** parser is doing to make this happen.  This is the second bug report
  ** from wireshark this week.  Clearly they are stressing Lemon in ways
  ** that it has not been previously stressed...  (SQLite ticket #2172)
  */
  /*memset(&yygotominor, 0, sizeof(yygotominor));*/
  yygotominor = yyzerominor;


  switch( yyruleno ){
  /* Beginning here are the reduction cases.  A typical example
  ** follows:
  **   case 0:
  **  #line <lineno> <grammarfile>
  **     { ... }           // User supplied code
  **  #line <lineno> <thisfile>
  **     break;
  */
      case 0: /* script ::= stmt_list */
#line 140 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
  yy_destructor(yypParser,113,&yymsp[0].minor);
}
#line 2802 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 1: /* name ::= IDENTIFIER */
#line 151 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy91 = p->alloc< xec_unqual_name >(
                                    yymsp[0].minor.yy0->sloc, yymsp[0].minor.yy0->text );
                }
#line 2810 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 2: /* name ::= name PERIOD IDENTIFIER */
#line 156 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy91 = p->alloc< xec_expr_key >(
                                    yymsp[0].minor.yy0->sloc, yymsp[-2].minor.yy91, yymsp[0].minor.yy0->text );
                  yy_destructor(yypParser,9,&yymsp[-1].minor);
}
#line 2819 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 3: /* proto ::= name LPN expr_list RPN */
#line 162 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy271 = p->alloc< xec_unqual_proto >(
                                    yymsp[-3].minor.yy91->sloc, yymsp[-3].minor.yy91, p->list( yymsp[-1].minor.yy91 ) );
                  yy_destructor(yypParser,7,&yymsp[-2].minor);
  yy_destructor(yypParser,10,&yymsp[0].minor);
}
#line 2829 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 4: /* decl_object ::= object_lbr object_decls RBR */
      case 122: /* expr_nolbr ::= newobj_lbr object_decls RBR */ yytestcase(yyruleno==122);
#line 177 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy91 = yymsp[-2].minor.yy134;
                    p->close_scope( yymsp[-2].minor.yy134->scope );
                  yy_destructor(yypParser,117,&yymsp[-1].minor);
  yy_destructor(yypParser,11,&yymsp[0].minor);
}
#line 2840 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 5: /* object_lbr ::= name LBR */
#line 183 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy134 = p->alloc< xec_new_object >( yymsp[-1].minor.yy91->sloc, nullptr );
                    yygotominor.yy134->scope = p->object_scope( yymsp[-1].minor.yy91 );
                  yy_destructor(yypParser,12,&yymsp[0].minor);
}
#line 2849 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 6: /* object_lbr ::= name COLON expr_simple LBR */
#line 188 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy134 = p->alloc< xec_new_object >( yymsp[-3].minor.yy91->sloc, yymsp[-1].minor.yy91 );
                    yygotominor.yy134->scope = p->object_scope( yymsp[-3].minor.yy91 );
                  yy_destructor(yypParser,13,&yymsp[-2].minor);
  yy_destructor(yypParser,12,&yymsp[0].minor);
}
#line 2859 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 7: /* object_decls ::= */
      case 186: /* stmt_list ::= */ yytestcase(yyruleno==186);
#line 194 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                }
#line 2866 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 8: /* object_decls ::= object_decls object_decl */
#line 197 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    p->objmember( yymsp[0].minor.yy91 );
                  yy_destructor(yypParser,117,&yymsp[-1].minor);
}
#line 2874 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 9: /* object_decl ::= decl_object */
      case 10: /* object_decl ::= decl_func */ yytestcase(yyruleno==10);
      case 58: /* expr_simple ::= expr_index */ yytestcase(yyruleno==58);
      case 60: /* expr_simple ::= expr_new */ yytestcase(yyruleno==60);
      case 62: /* expr_simple ::= expr_postfix */ yytestcase(yyruleno==62);
      case 65: /* expr_literal ::= expr_simple */ yytestcase(yyruleno==65);
      case 71: /* expr_suffix ::= expr_literal */ yytestcase(yyruleno==71);
      case 74: /* expr_unary ::= expr_suffix */ yytestcase(yyruleno==74);
      case 81: /* expr_mul ::= expr_unary */ yytestcase(yyruleno==81);
      case 86: /* expr_add ::= expr_mul */ yytestcase(yyruleno==86);
      case 89: /* expr_shift ::= expr_add */ yytestcase(yyruleno==89);
      case 93: /* expr_bitand ::= expr_shift */ yytestcase(yyruleno==93);
      case 95: /* expr_bitxor ::= expr_bitand */ yytestcase(yyruleno==95);
      case 97: /* expr_bitor ::= expr_bitxor */ yytestcase(yyruleno==97);
      case 99: /* expr_concat ::= expr_bitor */ yytestcase(yyruleno==99);
      case 101: /* expr_compare ::= expr_concat */ yytestcase(yyruleno==101);
      case 112: /* expr_and ::= expr_compare */ yytestcase(yyruleno==112);
      case 114: /* expr_xor ::= expr_and */ yytestcase(yyruleno==114);
      case 116: /* expr_or ::= expr_xor */ yytestcase(yyruleno==116);
      case 118: /* expr_nolbr ::= expr_or */ yytestcase(yyruleno==118);
      case 130: /* expr_value ::= expr_nolbr */ yytestcase(yyruleno==130);
      case 133: /* expr_lbody ::= expr_value */ yytestcase(yyruleno==133);
      case 148: /* expr_list ::= expr_final */ yytestcase(yyruleno==148);
      case 149: /* expr_list ::= expr_lbody */ yytestcase(yyruleno==149);
      case 151: /* expr_assign ::= expr_list */ yytestcase(yyruleno==151);
      case 177: /* sexpr_lbody ::= expr_nolbr */ yytestcase(yyruleno==177);
      case 179: /* sexpr_list ::= expr_final */ yytestcase(yyruleno==179);
      case 180: /* sexpr_list ::= sexpr_lbody */ yytestcase(yyruleno==180);
      case 182: /* sexpr_assign ::= sexpr_list */ yytestcase(yyruleno==182);
      case 184: /* condition ::= expr_assign */ yytestcase(yyruleno==184);
      case 185: /* condition ::= decl_var */ yytestcase(yyruleno==185);
      case 189: /* stmt ::= stmt_common */ yytestcase(yyruleno==189);
      case 192: /* stmt_reuse ::= stmt_common */ yytestcase(yyruleno==192);
      case 196: /* stmt_common ::= decl_object */ yytestcase(yyruleno==196);
      case 197: /* stmt_common ::= decl_func */ yytestcase(yyruleno==197);
      case 208: /* stmt_common ::= stmt_try */ yytestcase(yyruleno==208);
#line 202 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy91 = yymsp[0].minor.yy91;
                }
#line 2916 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 11: /* object_decl ::= decl_proto SEMICOLON */
      case 12: /* object_decl ::= decl_var SEMICOLON */ yytestcase(yyruleno==12);
      case 13: /* object_decl ::= decl_noinit SEMICOLON */ yytestcase(yyruleno==13);
      case 195: /* stmt_common ::= sexpr_assign SEMICOLON */ yytestcase(yyruleno==195);
      case 198: /* stmt_common ::= decl_var SEMICOLON */ yytestcase(yyruleno==198);
      case 199: /* stmt_common ::= decl_noinit SEMICOLON */ yytestcase(yyruleno==199);
#line 210 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy91 = yymsp[-1].minor.yy91;
                  yy_destructor(yypParser,14,&yymsp[0].minor);
}
#line 2929 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 14: /* decl_proto ::= proto */
#line 226 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy91 = yymsp[0].minor.yy271;
                }
#line 2936 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 15: /* decl_proto ::= proto YIELD */
#line 230 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy271->coroutine = true;
                    yygotominor.yy91 = yymsp[-1].minor.yy271;
                  yy_destructor(yypParser,6,&yymsp[0].minor);
}
#line 2945 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 16: /* decl_func ::= func_lbr stmt_list RBR */
      case 123: /* expr_nolbr ::= newfunc_lbr stmt_list RBR */ yytestcase(yyruleno==123);
#line 238 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy91 = yymsp[-2].minor.yy245;
                    p->close_scope( yymsp[-2].minor.yy245->scope );
                  yy_destructor(yypParser,113,&yymsp[-1].minor);
  yy_destructor(yypParser,11,&yymsp[0].minor);
}
#line 2956 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 17: /* func_lbr ::= proto LBR */
#line 244 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy245 = p->function( yymsp[-1].minor.yy271->sloc, yymsp[-1].minor.yy271->name,
                                    yymsp[-1].minor.yy271->params, yymsp[-1].minor.yy271->coroutine, false );
                  yy_destructor(yypParser,12,&yymsp[0].minor);
}
#line 2965 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 18: /* func_lbr ::= proto YIELD LBR */
#line 249 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-2].minor.yy271->coroutine = true;
                    yygotominor.yy245 = p->function( yymsp[-2].minor.yy271->sloc, yymsp[-2].minor.yy271->name,
                                    yymsp[-2].minor.yy271->params, yymsp[-2].minor.yy271->coroutine, false );
                  yy_destructor(yypParser,6,&yymsp[-1].minor);
  yy_destructor(yypParser,12,&yymsp[0].minor);
}
#line 2976 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 19: /* decl_var ::= VAR varname ASSIGN expr_list */
#line 258 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    xec_ast_declare* decl =
                            p->alloc< xec_ast_declare >( yymsp[-3].minor.yy0->sloc );
                    decl->value   = yymsp[0].minor.yy91;
                    decl->name    = p->declare( yymsp[-2].minor.yy96 );
                    yygotominor.yy91 = decl;
                    p->destroy( yymsp[-3].minor.yy0 );
                  yy_destructor(yypParser,16,&yymsp[-1].minor);
}
#line 2989 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 20: /* decl_var ::= VAR varname_list ASSIGN expr_list */
#line 267 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    xec_ast_declare_list* decl =
                            p->alloc< xec_ast_declare_list >( yymsp[-3].minor.yy0->sloc );
                    decl->values = yymsp[0].minor.yy91;
                    p->declare_list( yymsp[-2].minor.yy203, &decl->names );
                    yygotominor.yy91 = decl;
                    p->destroy( yymsp[-3].minor.yy0 );
                  yy_destructor(yypParser,16,&yymsp[-1].minor);
}
#line 3002 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 21: /* decl_noinit ::= VAR varname */
#line 277 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    xec_ast_declare* decl =
                            p->alloc< xec_ast_declare >( yymsp[-1].minor.yy0->sloc );
                    decl->name = p->declare( yymsp[0].minor.yy96 );
                    yygotominor.yy91 = decl;
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 3013 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 22: /* decl_noinit ::= VAR varname_list */
#line 285 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    xec_ast_declare_list* decl =
                            p->alloc< xec_ast_declare_list >( yymsp[-1].minor.yy0->sloc );
                    p->declare_list( yymsp[0].minor.yy203, &decl->names );
                    yygotominor.yy91 = decl;
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 3024 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 23: /* varname ::= IDENTIFIER */
#line 294 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy96 = p->alloc< xec_unqual_name >( yymsp[0].minor.yy0->sloc, yymsp[0].minor.yy0->text );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3032 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 24: /* varname_list ::= varname COMMA varname */
#line 300 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy203 = p->alloc< xec_unqual_list >( yymsp[-2].minor.yy96->sloc );
                    yygotominor.yy203->names.push_back( yymsp[-2].minor.yy96 );
                    yygotominor.yy203->names.push_back( yymsp[0].minor.yy96 );
                  yy_destructor(yypParser,17,&yymsp[-1].minor);
}
#line 3042 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 25: /* varname_list ::= varname_list COMMA varname */
#line 306 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy203 = yymsp[-2].minor.yy203;
                    yygotominor.yy203->names.push_back( yymsp[0].minor.yy96 );
                  yy_destructor(yypParser,17,&yymsp[-1].minor);
}
#line 3051 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 26: /* expr_index ::= LPN expr_assign RPN */
#line 322 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    switch ( yymsp[-1].minor.yy91->kind )
                    {
                    case XEC_EXPR_KEY:
                    case XEC_EXPR_INKEY:
                    case XEC_EXPR_CALL:
                    case XEC_EXPR_CALLKEY:
                    case XEC_EXPR_CALLINKEY:
                    case XEC_EXPR_YIELD:
                    case XEC_EXPR_VARARG:
                    case XEC_EXPR_UNPACK:
                    case XEC_EXPR_LIST:
                    case XEC_AST_ASSIGN_LIST:
                        yygotominor.yy91 = p->alloc< xec_expr_mono >( yymsp[-1].minor.yy91->sloc, yymsp[-1].minor.yy91 );
                        break;
                        
                    default:
                        yygotominor.yy91 = yymsp[-1].minor.yy91;
                        break;
                    }
                  yy_destructor(yypParser,7,&yymsp[-2].minor);
  yy_destructor(yypParser,10,&yymsp[0].minor);
}
#line 3078 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 27: /* expr_index ::= name PERIOD LSQ expr_value RSQ */
#line 344 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-4].minor.yy91 = p->resolve( yymsp[-4].minor.yy91 );
                    yygotominor.yy91 = p->alloc< xec_expr_inkey >( yymsp[-4].minor.yy91->sloc, yymsp[-4].minor.yy91, yymsp[-1].minor.yy91 );
                  yy_destructor(yypParser,9,&yymsp[-3].minor);
  yy_destructor(yypParser,18,&yymsp[-2].minor);
  yy_destructor(yypParser,19,&yymsp[0].minor);
}
#line 3089 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 28: /* expr_index ::= name LSQ expr_value RSQ */
#line 349 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-3].minor.yy91 = p->resolve( yymsp[-3].minor.yy91 );
                    yygotominor.yy91 = p->alloc< xec_expr_index >( yymsp[-3].minor.yy91->sloc, yymsp[-3].minor.yy91, yymsp[-1].minor.yy91 );
                  yy_destructor(yypParser,18,&yymsp[-2].minor);
  yy_destructor(yypParser,19,&yymsp[0].minor);
}
#line 3099 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 29: /* expr_index ::= expr_index PERIOD IDENTIFIER */
#line 354 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy91 = p->alloc< xec_expr_key >( yymsp[-2].minor.yy91->sloc, yymsp[-2].minor.yy91, yymsp[0].minor.yy0->text );
                    p->destroy( yymsp[0].minor.yy0 );
                  yy_destructor(yypParser,9,&yymsp[-1].minor);
}
#line 3108 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 30: /* expr_index ::= expr_index PERIOD LSQ expr_value RSQ */
#line 359 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy91 = p->alloc< xec_expr_inkey >( yymsp[-4].minor.yy91->sloc, yymsp[-4].minor.yy91, yymsp[-1].minor.yy91 );
                  yy_destructor(yypParser,9,&yymsp[-3].minor);
  yy_destructor(yypParser,18,&yymsp[-2].minor);
  yy_destructor(yypParser,19,&yymsp[0].minor);
}
#line 3118 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 31: /* expr_index ::= expr_index LSQ expr_value RSQ */
#line 363 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy91 = p->alloc< xec_expr_index >( yymsp[-3].minor.yy91->sloc, yymsp[-3].minor.yy91, yymsp[-1].minor.yy91 );
                  yy_destructor(yypParser,18,&yymsp[-2].minor);
  yy_destructor(yypParser,19,&yymsp[0].minor);
}
#line 3127 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 32: /* expr_yield ::= YIELD LPN expr_list RPN */
#line 370 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy139 = p->alloc< xec_expr_yield >(
                                    yymsp[-3].minor.yy0->sloc, p->list( yymsp[-1].minor.yy91 ) );
                    p->destroy( yymsp[-3].minor.yy0 );
                  yy_destructor(yypParser,7,&yymsp[-2].minor);
  yy_destructor(yypParser,10,&yymsp[0].minor);
}
#line 3138 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 33: /* expr_new ::= NEW name LPN expr_list RPN */
#line 378 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-3].minor.yy91 = p->resolve( yymsp[-3].minor.yy91 );
                    yygotominor.yy91 = p->alloc< xec_new_new >(
                                    yymsp[-4].minor.yy0->sloc, yymsp[-3].minor.yy91, p->list( yymsp[-1].minor.yy91 ) );
                    p->destroy( yymsp[-4].minor.yy0 );
                  yy_destructor(yypParser,7,&yymsp[-2].minor);
  yy_destructor(yypParser,10,&yymsp[0].minor);
}
#line 3150 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 34: /* expr_new ::= NEW expr_index LPN expr_list RPN */
#line 385 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy91 = p->alloc< xec_new_new >(
                                    yymsp[-4].minor.yy0->sloc, yymsp[-3].minor.yy91, p->list( yymsp[-1].minor.yy91 ) );
                    p->destroy( yymsp[-4].minor.yy0 );
                  yy_destructor(yypParser,7,&yymsp[-2].minor);
  yy_destructor(yypParser,10,&yymsp[0].minor);
}
#line 3161 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 35: /* expr_call ::= proto LPN expr_list RPN */
#line 393 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    xec_expr_call* call = p->resolve( yymsp[-3].minor.yy271 );
                    yygotominor.yy132 = p->alloc< xec_expr_call >(
                                call->sloc, call, p->list( yymsp[-1].minor.yy91 ) );
                  yy_destructor(yypParser,7,&yymsp[-2].minor);
  yy_destructor(yypParser,10,&yymsp[0].minor);
}
#line 3172 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 36: /* expr_call ::= expr_index LPN expr_list RPN */
      case 38: /* expr_call ::= expr_new LPN expr_list RPN */ yytestcase(yyruleno==38);
      case 40: /* expr_call ::= expr_postfix LPN expr_list RPN */ yytestcase(yyruleno==40);
#line 399 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy132 = p->alloc< xec_expr_call >(
                                yymsp[-3].minor.yy91->sloc, yymsp[-3].minor.yy91, p->list( yymsp[-1].minor.yy91 ) );
                  yy_destructor(yypParser,7,&yymsp[-2].minor);
  yy_destructor(yypParser,10,&yymsp[0].minor);
}
#line 3184 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 37: /* expr_call ::= expr_yield LPN expr_list RPN */
#line 404 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy132 = p->alloc< xec_expr_call >(
                                yymsp[-3].minor.yy139->sloc, yymsp[-3].minor.yy139, p->list( yymsp[-1].minor.yy91 ) );
                  yy_destructor(yypParser,7,&yymsp[-2].minor);
  yy_destructor(yypParser,10,&yymsp[0].minor);
}
#line 3194 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 39: /* expr_call ::= expr_call LPN expr_list RPN */
#line 414 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy132 = p->alloc< xec_expr_call >(
                                yymsp[-3].minor.yy132->sloc, yymsp[-3].minor.yy132, p->list( yymsp[-1].minor.yy91 ) );
                  yy_destructor(yypParser,7,&yymsp[-2].minor);
  yy_destructor(yypParser,10,&yymsp[0].minor);
}
#line 3204 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 41: /* expr_postfix ::= proto PERIOD IDENTIFIER */
#line 426 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    xec_expr_call* call = p->resolve( yymsp[-2].minor.yy271 );
                    yygotominor.yy91 = p->alloc< xec_expr_key >(
                             call->sloc, call, yymsp[0].minor.yy0->text );
                    p->destroy( yymsp[0].minor.yy0 );
                  yy_destructor(yypParser,9,&yymsp[-1].minor);
}
#line 3215 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 42: /* expr_postfix ::= proto PERIOD LSQ expr_value RSQ */
#line 433 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    xec_expr_call* call = p->resolve( yymsp[-4].minor.yy271 );
                    yygotominor.yy91 = p->alloc< xec_expr_inkey >(
                             call->sloc, call, yymsp[-1].minor.yy91 );
                  yy_destructor(yypParser,9,&yymsp[-3].minor);
  yy_destructor(yypParser,18,&yymsp[-2].minor);
  yy_destructor(yypParser,19,&yymsp[0].minor);
}
#line 3227 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 43: /* expr_postfix ::= proto LSQ expr_value RSQ */
#line 439 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    xec_expr_call* call = p->resolve( yymsp[-3].minor.yy271 );
                    yygotominor.yy91 = p->alloc< xec_expr_index >(
                             call->sloc, call, yymsp[-1].minor.yy91 );
                  yy_destructor(yypParser,18,&yymsp[-2].minor);
  yy_destructor(yypParser,19,&yymsp[0].minor);
}
#line 3238 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 44: /* expr_postfix ::= expr_yield PERIOD IDENTIFIER */
#line 445 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy91 = p->alloc< xec_expr_key >(
                             yymsp[-2].minor.yy139->sloc, yymsp[-2].minor.yy139, yymsp[0].minor.yy0->text );
                    p->destroy( yymsp[0].minor.yy0 );
                  yy_destructor(yypParser,9,&yymsp[-1].minor);
}
#line 3248 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 45: /* expr_postfix ::= expr_yield PERIOD LSQ expr_value RSQ */
#line 451 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy91 = p->alloc< xec_expr_inkey >(
                             yymsp[-4].minor.yy139->sloc, yymsp[-4].minor.yy139, yymsp[-1].minor.yy91 );
                  yy_destructor(yypParser,9,&yymsp[-3].minor);
  yy_destructor(yypParser,18,&yymsp[-2].minor);
  yy_destructor(yypParser,19,&yymsp[0].minor);
}
#line 3259 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 46: /* expr_postfix ::= expr_yield LSQ expr_value RSQ */
#line 456 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy91 = p->alloc< xec_expr_index >(
                             yymsp[-3].minor.yy139->sloc, yymsp[-3].minor.yy139, yymsp[-1].minor.yy91 );
                  yy_destructor(yypParser,18,&yymsp[-2].minor);
  yy_destructor(yypParser,19,&yymsp[0].minor);
}
#line 3269 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 47: /* expr_postfix ::= expr_new PERIOD IDENTIFIER */
      case 53: /* expr_postfix ::= expr_postfix PERIOD IDENTIFIER */ yytestcase(yyruleno==53);
#line 461 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy91 = p->alloc< xec_expr_key >(
                             yymsp[-2].minor.yy91->sloc, yymsp[-2].minor.yy91, yymsp[0].minor.yy0->text );
                    p->destroy( yymsp[0].minor.yy0 );
                  yy_destructor(yypParser,9,&yymsp[-1].minor);
}
#line 3280 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 48: /* expr_postfix ::= expr_new PERIOD LSQ expr_value RSQ */
      case 54: /* expr_postfix ::= expr_postfix PERIOD LSQ expr_value RSQ */ yytestcase(yyruleno==54);
#line 467 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy91 = p->alloc< xec_expr_inkey >(
                             yymsp[-4].minor.yy91->sloc, yymsp[-4].minor.yy91, yymsp[-1].minor.yy91 );
                  yy_destructor(yypParser,9,&yymsp[-3].minor);
  yy_destructor(yypParser,18,&yymsp[-2].minor);
  yy_destructor(yypParser,19,&yymsp[0].minor);
}
#line 3292 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 49: /* expr_postfix ::= expr_new LSQ expr_value RSQ */
      case 55: /* expr_postfix ::= expr_postfix LSQ expr_value RSQ */ yytestcase(yyruleno==55);
#line 472 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy91 = p->alloc< xec_expr_index >(
                             yymsp[-3].minor.yy91->sloc, yymsp[-3].minor.yy91, yymsp[-1].minor.yy91 );
                  yy_destructor(yypParser,18,&yymsp[-2].minor);
  yy_destructor(yypParser,19,&yymsp[0].minor);
}
#line 3303 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 50: /* expr_postfix ::= expr_call PERIOD IDENTIFIER */
#line 477 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy91 = p->alloc< xec_expr_key >(
                             yymsp[-2].minor.yy132->sloc, yymsp[-2].minor.yy132, yymsp[0].minor.yy0->text );
                    p->destroy( yymsp[0].minor.yy0 );
                  yy_destructor(yypParser,9,&yymsp[-1].minor);
}
#line 3313 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 51: /* expr_postfix ::= expr_call PERIOD LSQ expr_value RSQ */
#line 483 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy91 = p->alloc< xec_expr_inkey >(
                             yymsp[-4].minor.yy132->sloc, yymsp[-4].minor.yy132, yymsp[-1].minor.yy91 );
                  yy_destructor(yypParser,9,&yymsp[-3].minor);
  yy_destructor(yypParser,18,&yymsp[-2].minor);
  yy_destructor(yypParser,19,&yymsp[0].minor);
}
#line 3324 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 52: /* expr_postfix ::= expr_call LSQ expr_value RSQ */
#line 488 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy91 = p->alloc< xec_expr_index >(
                             yymsp[-3].minor.yy132->sloc, yymsp[-3].minor.yy132, yymsp[-1].minor.yy91 );
                  yy_destructor(yypParser,18,&yymsp[-2].minor);
  yy_destructor(yypParser,19,&yymsp[0].minor);
}
#line 3334 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 56: /* expr_simple ::= name */
#line 515 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy91 = p->resolve( yymsp[0].minor.yy91 );
                }
#line 3341 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 57: /* expr_simple ::= proto */
#line 519 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy91 = p->resolve( yymsp[0].minor.yy271 );
                }
#line 3348 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 59: /* expr_simple ::= expr_yield */
#line 527 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy91 = yymsp[0].minor.yy139;
                }
#line 3355 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 61: /* expr_simple ::= expr_call */
#line 535 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy91 = yymsp[0].minor.yy132;
                }
#line 3362 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 63: /* expr_simple ::= proto YIELD */
#line 543 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    xec_expr_call* call = p->resolve( yymsp[-1].minor.yy271 );
                    call->yieldcall = true;
                    yygotominor.yy91 = call;
                  yy_destructor(yypParser,6,&yymsp[0].minor);
}
#line 3372 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 64: /* expr_simple ::= expr_call YIELD */
#line 549 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy132->yieldcall = true;
                    yygotominor.yy91 = yymsp[-1].minor.yy132;
                  yy_destructor(yypParser,6,&yymsp[0].minor);
}
#line 3381 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 66: /* expr_literal ::= NULL */
#line 559 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy91 = p->alloc< xec_expr_null >( yymsp[0].minor.yy0->sloc );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3389 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 67: /* expr_literal ::= TRUE */
#line 564 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy91 = p->alloc< xec_expr_bool >( yymsp[0].minor.yy0->sloc, true );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3397 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 68: /* expr_literal ::= FALSE */
#line 569 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy91 = p->alloc< xec_expr_bool >( yymsp[0].minor.yy0->sloc, false );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3405 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 69: /* expr_literal ::= NUMBER */
#line 574 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    double number = p->parse_number( yymsp[0].minor.yy0 );
                    yygotominor.yy91 = p->alloc< xec_expr_number >( yymsp[0].minor.yy0->sloc, number );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3414 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 70: /* expr_literal ::= STRING */
#line 580 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy91 = p->alloc< xec_expr_string >(
                            yymsp[0].minor.yy0->sloc, yymsp[0].minor.yy0->text, yymsp[0].minor.yy0->size );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3423 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 72: /* expr_suffix ::= expr_suffix INCREMENT */
      case 73: /* expr_suffix ::= expr_suffix DECREMENT */ yytestcase(yyruleno==73);
#line 591 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy91 = p->lvalue( yymsp[-1].minor.yy91 );
                    yygotominor.yy91 = p->alloc< xec_expr_postop >(
                             yymsp[-1].minor.yy91->sloc, yymsp[0].minor.yy0->kind, yymsp[-1].minor.yy91 );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3434 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 75: /* expr_unary ::= PLUS expr_unary */
      case 76: /* expr_unary ::= MINUS expr_unary */ yytestcase(yyruleno==76);
      case 77: /* expr_unary ::= XMARK expr_unary */ yytestcase(yyruleno==77);
      case 78: /* expr_unary ::= TILDE expr_unary */ yytestcase(yyruleno==78);
#line 610 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy91 = p->alloc< xec_expr_unary >(
                             yymsp[-1].minor.yy0->sloc, yymsp[-1].minor.yy0->kind, yymsp[0].minor.yy91 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 3446 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 79: /* expr_unary ::= INCREMENT expr_unary */
      case 80: /* expr_unary ::= DECREMENT expr_unary */ yytestcase(yyruleno==80);
#line 634 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[0].minor.yy91 = p->lvalue( yymsp[0].minor.yy91 );
                    yygotominor.yy91 = p->alloc< xec_expr_preop >(
                             yymsp[-1].minor.yy0->sloc, yymsp[-1].minor.yy0->kind, yymsp[0].minor.yy91 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 3457 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 82: /* expr_mul ::= expr_mul ASTERISK expr_unary */
      case 83: /* expr_mul ::= expr_mul SOLIDUS expr_unary */ yytestcase(yyruleno==83);
      case 84: /* expr_mul ::= expr_mul PERCENT expr_unary */ yytestcase(yyruleno==84);
      case 85: /* expr_mul ::= expr_mul TILDE expr_unary */ yytestcase(yyruleno==85);
      case 87: /* expr_add ::= expr_add PLUS expr_mul */ yytestcase(yyruleno==87);
      case 88: /* expr_add ::= expr_add MINUS expr_mul */ yytestcase(yyruleno==88);
      case 90: /* expr_shift ::= expr_shift LSHIFT expr_add */ yytestcase(yyruleno==90);
      case 91: /* expr_shift ::= expr_shift RSHIFT expr_add */ yytestcase(yyruleno==91);
      case 92: /* expr_shift ::= expr_shift URSHIFT expr_add */ yytestcase(yyruleno==92);
      case 94: /* expr_bitand ::= expr_bitand AMPERSAND expr_shift */ yytestcase(yyruleno==94);
      case 96: /* expr_bitxor ::= expr_bitxor CARET expr_bitand */ yytestcase(yyruleno==96);
      case 98: /* expr_bitor ::= expr_bitor VBAR expr_bitxor */ yytestcase(yyruleno==98);
      case 100: /* expr_concat ::= expr_concat CONCATENATE expr_bitor */ yytestcase(yyruleno==100);
#line 653 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy91 = p->alloc< xec_expr_binary >(
                                    yymsp[-2].minor.yy91->sloc, yymsp[-1].minor.yy0->kind, yymsp[-2].minor.yy91, yymsp[0].minor.yy91 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 3478 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 102: /* expr_compare ::= expr_compare EQUAL expr_concat */
      case 103: /* expr_compare ::= expr_compare NOTEQUAL expr_concat */ yytestcase(yyruleno==103);
      case 104: /* expr_compare ::= expr_compare LESS expr_concat */ yytestcase(yyruleno==104);
      case 105: /* expr_compare ::= expr_compare GREATER expr_concat */ yytestcase(yyruleno==105);
      case 106: /* expr_compare ::= expr_compare LESSEQUAL expr_concat */ yytestcase(yyruleno==106);
      case 107: /* expr_compare ::= expr_compare GREATEREQUAL expr_concat */ yytestcase(yyruleno==107);
      case 108: /* expr_compare ::= expr_compare IN expr_concat */ yytestcase(yyruleno==108);
      case 109: /* expr_compare ::= expr_compare NOTIN expr_concat */ yytestcase(yyruleno==109);
      case 110: /* expr_compare ::= expr_compare IS expr_concat */ yytestcase(yyruleno==110);
      case 111: /* expr_compare ::= expr_compare NOTIS expr_concat */ yytestcase(yyruleno==111);
#line 766 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy91 = p->compare( yymsp[-1].minor.yy0, yymsp[-2].minor.yy91, yymsp[0].minor.yy91 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 3495 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 113: /* expr_and ::= expr_and LOGICAND expr_compare */
      case 115: /* expr_xor ::= expr_xor LOGICXOR expr_and */ yytestcase(yyruleno==115);
      case 117: /* expr_or ::= expr_or LOGICOR expr_xor */ yytestcase(yyruleno==117);
#line 822 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy91 = p->alloc< xec_expr_logical >(
                                    yymsp[-2].minor.yy91->sloc, yymsp[-1].minor.yy0->kind, yymsp[-2].minor.yy91, yymsp[0].minor.yy91 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 3506 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 119: /* expr_nolbr ::= expr_or QMARK expr_value COLON expr_value */
#line 857 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy91 = p->alloc< xec_expr_qmark >(
                            yymsp[-4].minor.yy91->sloc, yymsp[-4].minor.yy91, yymsp[-2].minor.yy91, yymsp[0].minor.yy91 );
                  yy_destructor(yypParser,55,&yymsp[-3].minor);
  yy_destructor(yypParser,13,&yymsp[-1].minor);
}
#line 3516 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 120: /* expr_nolbr ::= LSQ RSQ */
#line 862 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy91 = p->alloc< xec_new_list >( yymsp[-1].minor.yy0->sloc );
                    p->destroy( yymsp[-1].minor.yy0 );
                  yy_destructor(yypParser,19,&yymsp[0].minor);
}
#line 3525 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 121: /* expr_nolbr ::= LSQ value_list RSQ */
#line 867 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy91 = yymsp[-1].minor.yy195;
                    yygotominor.yy91->sloc = yymsp[-2].minor.yy0->sloc;
                    p->destroy( yymsp[-2].minor.yy0 );
                  yy_destructor(yypParser,19,&yymsp[0].minor);
}
#line 3535 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 124: /* newobj_lbr ::= COLON LBR */
#line 884 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy134 = p->alloc< xec_new_object >( yymsp[-1].minor.yy0->sloc, nullptr );
                    yygotominor.yy134->scope = p->object_scope( nullptr );
                    p->destroy( yymsp[-1].minor.yy0 );
                  yy_destructor(yypParser,12,&yymsp[0].minor);
}
#line 3545 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 125: /* newobj_lbr ::= COLON expr_simple LBR */
#line 890 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy134 = p->alloc< xec_new_object >( yymsp[-2].minor.yy0->sloc, yymsp[-1].minor.yy91 );
                    yygotominor.yy134->scope = p->object_scope( nullptr );
                    p->destroy( yymsp[-2].minor.yy0 );
                  yy_destructor(yypParser,12,&yymsp[0].minor);
}
#line 3555 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 126: /* newfunc_lbr ::= QMARK LPN expr_list RPN LBR */
#line 897 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy245 = p->function( yymsp[-4].minor.yy0->sloc, nullptr,
                                    p->list( yymsp[-2].minor.yy91 ), false, false );
                    p->destroy( yymsp[-4].minor.yy0 );
                  yy_destructor(yypParser,7,&yymsp[-3].minor);
  yy_destructor(yypParser,10,&yymsp[-1].minor);
  yy_destructor(yypParser,12,&yymsp[0].minor);
}
#line 3567 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 127: /* newfunc_lbr ::= PERIOD QMARK LPN expr_list RPN LBR */
#line 903 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy245 = p->function( yymsp[-5].minor.yy0->sloc, nullptr,
                                    p->list( yymsp[-2].minor.yy91 ), false, true );
                    p->destroy( yymsp[-5].minor.yy0 );
                  yy_destructor(yypParser,55,&yymsp[-4].minor);
  yy_destructor(yypParser,7,&yymsp[-3].minor);
  yy_destructor(yypParser,10,&yymsp[-1].minor);
  yy_destructor(yypParser,12,&yymsp[0].minor);
}
#line 3580 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 128: /* newfunc_lbr ::= QMARK LPN expr_list RPN YIELD LBR */
#line 909 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy245 = p->function( yymsp[-5].minor.yy0->sloc, nullptr,
                                    p->list( yymsp[-3].minor.yy91 ), true, false );
                    p->destroy( yymsp[-5].minor.yy0 );
                  yy_destructor(yypParser,7,&yymsp[-4].minor);
  yy_destructor(yypParser,10,&yymsp[-2].minor);
  yy_destructor(yypParser,6,&yymsp[-1].minor);
  yy_destructor(yypParser,12,&yymsp[0].minor);
}
#line 3593 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 129: /* newfunc_lbr ::= PERIOD QMARK LPN expr_list RPN YIELD LBR */
#line 915 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy245 = p->function( yymsp[-6].minor.yy0->sloc, nullptr,
                                    p->list( yymsp[-3].minor.yy91 ), true, true );
                    p->destroy( yymsp[-6].minor.yy0 );
                  yy_destructor(yypParser,55,&yymsp[-5].minor);
  yy_destructor(yypParser,7,&yymsp[-4].minor);
  yy_destructor(yypParser,10,&yymsp[-2].minor);
  yy_destructor(yypParser,6,&yymsp[-1].minor);
  yy_destructor(yypParser,12,&yymsp[0].minor);
}
#line 3607 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 131: /* expr_value ::= LBR RBR */
#line 928 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy91 = p->alloc< xec_new_table >( yymsp[-1].minor.yy0->sloc );
                    p->destroy( yymsp[-1].minor.yy0 );
                  yy_destructor(yypParser,11,&yymsp[0].minor);
}
#line 3616 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 132: /* expr_value ::= LBR keyval_list RBR */
#line 933 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy91 = yymsp[-1].minor.yy92;
                    yygotominor.yy91->sloc = yymsp[-2].minor.yy0->sloc;
                    p->destroy( yymsp[-2].minor.yy0 );
                  yy_destructor(yypParser,11,&yymsp[0].minor);
}
#line 3626 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 134: /* expr_lbody ::= expr_lbody COMMA expr_value */
      case 178: /* sexpr_lbody ::= sexpr_lbody COMMA expr_value */ yytestcase(yyruleno==178);
#line 944 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy91 = p->append( yymsp[-2].minor.yy91, yymsp[0].minor.yy91 );
                  yy_destructor(yypParser,17,&yymsp[-1].minor);
}
#line 3635 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 135: /* expr_final ::= ELLIPSIS */
#line 950 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy91 = p->alloc< xec_expr_vararg >( yymsp[0].minor.yy0->sloc );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3643 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 136: /* expr_final ::= proto ELLIPSIS */
#line 955 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    xec_expr_call* call = p->resolve( yymsp[-1].minor.yy271 );
                    call->unpack = true;
                    yygotominor.yy91 = call;
                  yy_destructor(yypParser,56,&yymsp[0].minor);
}
#line 3653 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 137: /* expr_final ::= expr_call ELLIPSIS */
#line 961 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy132->unpack = true;
                    yygotominor.yy91 = yymsp[-1].minor.yy132;
                  yy_destructor(yypParser,56,&yymsp[0].minor);
}
#line 3662 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 138: /* expr_final ::= expr_yield ELLIPSIS */
#line 966 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy139->unpack = true;
                    yygotominor.yy91 = yymsp[-1].minor.yy139;
                  yy_destructor(yypParser,56,&yymsp[0].minor);
}
#line 3671 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 139: /* expr_final ::= proto YIELD ELLIPSIS */
#line 971 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    xec_expr_call* call = p->resolve( yymsp[-2].minor.yy271 );
                    call->yieldcall = true;
                    call->unpack = true;
                    yygotominor.yy91 = call;
                  yy_destructor(yypParser,6,&yymsp[-1].minor);
  yy_destructor(yypParser,56,&yymsp[0].minor);
}
#line 3683 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 140: /* expr_final ::= expr_call YIELD ELLIPSIS */
#line 978 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-2].minor.yy132->yieldcall = true;
                    yymsp[-2].minor.yy132->unpack = true;
                    yygotominor.yy91 = yymsp[-2].minor.yy132;
                  yy_destructor(yypParser,6,&yymsp[-1].minor);
  yy_destructor(yypParser,56,&yymsp[0].minor);
}
#line 3694 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 141: /* expr_final ::= name LSQ RSQ ELLIPSIS */
#line 984 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-3].minor.yy91 = p->resolve( yymsp[-3].minor.yy91 );
                    yygotominor.yy91 = p->alloc< xec_expr_unpack >( yymsp[-3].minor.yy91->sloc, yymsp[-3].minor.yy91 );
                  yy_destructor(yypParser,18,&yymsp[-2].minor);
  yy_destructor(yypParser,19,&yymsp[-1].minor);
  yy_destructor(yypParser,56,&yymsp[0].minor);
}
#line 3705 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 142: /* expr_final ::= proto LSQ RSQ ELLIPSIS */
#line 989 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    xec_expr_call* call = p->resolve( yymsp[-3].minor.yy271 );
                    yygotominor.yy91 = p->alloc< xec_expr_unpack >( call->sloc, call );
                  yy_destructor(yypParser,18,&yymsp[-2].minor);
  yy_destructor(yypParser,19,&yymsp[-1].minor);
  yy_destructor(yypParser,56,&yymsp[0].minor);
}
#line 3716 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 143: /* expr_final ::= expr_index LSQ RSQ ELLIPSIS */
      case 145: /* expr_final ::= expr_new LSQ RSQ ELLIPSIS */ yytestcase(yyruleno==145);
      case 147: /* expr_final ::= expr_postfix LSQ RSQ ELLIPSIS */ yytestcase(yyruleno==147);
#line 994 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy91 = p->alloc< xec_expr_unpack >( yymsp[-3].minor.yy91->sloc, yymsp[-3].minor.yy91 );
                  yy_destructor(yypParser,18,&yymsp[-2].minor);
  yy_destructor(yypParser,19,&yymsp[-1].minor);
  yy_destructor(yypParser,56,&yymsp[0].minor);
}
#line 3728 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 144: /* expr_final ::= expr_yield LSQ RSQ ELLIPSIS */
#line 998 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy91 = p->alloc< xec_expr_unpack >( yymsp[-3].minor.yy139->sloc, yymsp[-3].minor.yy139 );
                  yy_destructor(yypParser,18,&yymsp[-2].minor);
  yy_destructor(yypParser,19,&yymsp[-1].minor);
  yy_destructor(yypParser,56,&yymsp[0].minor);
}
#line 3738 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 146: /* expr_final ::= expr_call LSQ RSQ ELLIPSIS */
#line 1006 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy91 = p->alloc< xec_expr_unpack >( yymsp[-3].minor.yy132->sloc, yymsp[-3].minor.yy132 );
                  yy_destructor(yypParser,18,&yymsp[-2].minor);
  yy_destructor(yypParser,19,&yymsp[-1].minor);
  yy_destructor(yypParser,56,&yymsp[0].minor);
}
#line 3748 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 150: /* expr_list ::= expr_lbody COMMA expr_final */
      case 181: /* sexpr_list ::= sexpr_lbody COMMA expr_final */ yytestcase(yyruleno==181);
#line 1023 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy91 = p->final( yymsp[-2].minor.yy91, yymsp[0].minor.yy91 );
                  yy_destructor(yypParser,17,&yymsp[-1].minor);
}
#line 3757 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 152: /* expr_assign ::= expr_lbody assign_op expr_assign */
      case 183: /* sexpr_assign ::= sexpr_lbody assign_op expr_assign */ yytestcase(yyruleno==183);
#line 1032 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy91 = p->assign( yymsp[-1].minor.yy43, yymsp[-2].minor.yy91, yymsp[0].minor.yy91 );
                    p->destroy( yymsp[-1].minor.yy43 );
                }
#line 3766 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 153: /* assign_op ::= ASSIGN */
      case 154: /* assign_op ::= MULASSIGN */ yytestcase(yyruleno==154);
      case 155: /* assign_op ::= DIVASSIGN */ yytestcase(yyruleno==155);
      case 156: /* assign_op ::= MODASSIGN */ yytestcase(yyruleno==156);
      case 157: /* assign_op ::= INTDIVASSIGN */ yytestcase(yyruleno==157);
      case 158: /* assign_op ::= ADDASSIGN */ yytestcase(yyruleno==158);
      case 159: /* assign_op ::= SUBASSIGN */ yytestcase(yyruleno==159);
      case 160: /* assign_op ::= LSHIFTASSIGN */ yytestcase(yyruleno==160);
      case 161: /* assign_op ::= RSHIFTASSIGN */ yytestcase(yyruleno==161);
      case 162: /* assign_op ::= URSHIFTASSIGN */ yytestcase(yyruleno==162);
      case 163: /* assign_op ::= BITANDASSIGN */ yytestcase(yyruleno==163);
      case 164: /* assign_op ::= BITXORASSIGN */ yytestcase(yyruleno==164);
      case 165: /* assign_op ::= BITORASSIGN */ yytestcase(yyruleno==165);
      case 240: /* token_yield ::= YIELD */ yytestcase(yyruleno==240);
#line 1039 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy43 = yymsp[0].minor.yy0;
                }
#line 3786 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 166: /* value_lbody ::= expr_value */
#line 1093 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy195 = p->alloc< xec_new_list >( -1 );
                    yygotominor.yy195->values.push_back( yymsp[0].minor.yy91 );
                }
#line 3794 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 167: /* value_lbody ::= value_lbody COMMA expr_value */
#line 1098 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy195 = yymsp[-2].minor.yy195;
                    yygotominor.yy195->values.push_back( yymsp[0].minor.yy91 );
                  yy_destructor(yypParser,17,&yymsp[-1].minor);
}
#line 3803 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 168: /* value_list ::= expr_final */
#line 1104 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy195 = p->alloc< xec_new_list >( -1 );
                    yygotominor.yy195->unpack = yymsp[0].minor.yy91;
                }
#line 3811 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 169: /* value_list ::= expr_final COMMA */
#line 1109 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy195 = p->alloc< xec_new_list >( -1 );
                    yygotominor.yy195->unpack = yymsp[-1].minor.yy91;
                  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 3820 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 170: /* value_list ::= value_lbody */
#line 1114 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy195 = yymsp[0].minor.yy195;
                }
#line 3827 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 171: /* value_list ::= value_lbody COMMA */
#line 1118 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy195 = yymsp[-1].minor.yy195;
                  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 3835 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 172: /* value_list ::= value_lbody COMMA expr_final */
#line 1122 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy195 = yymsp[-2].minor.yy195;
                    yygotominor.yy195->unpack = yymsp[0].minor.yy91;
                  yy_destructor(yypParser,17,&yymsp[-1].minor);
}
#line 3844 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 173: /* keyval_lbody ::= expr_value COLON expr_value */
#line 1129 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy92 = new xec_new_table( -1 );
                    yygotominor.yy92->elements.emplace_back( yymsp[-2].minor.yy91, yymsp[0].minor.yy91 );
                  yy_destructor(yypParser,13,&yymsp[-1].minor);
}
#line 3853 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 174: /* keyval_lbody ::= keyval_lbody COMMA expr_value COLON expr_value */
#line 1135 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy92 = yymsp[-4].minor.yy92;
                    yygotominor.yy92->elements.emplace_back( yymsp[-2].minor.yy91, yymsp[0].minor.yy91 );
                  yy_destructor(yypParser,17,&yymsp[-3].minor);
  yy_destructor(yypParser,13,&yymsp[-1].minor);
}
#line 3863 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 175: /* keyval_list ::= keyval_lbody */
#line 1141 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy92 = yymsp[0].minor.yy92;
                }
#line 3870 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 176: /* keyval_list ::= keyval_lbody COMMA */
#line 1145 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy92 = yymsp[-1].minor.yy92;
                  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 3878 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 187: /* stmt_list ::= stmt_list stmt */
#line 1213 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    p->statement( yymsp[0].minor.yy91 );
                  yy_destructor(yypParser,113,&yymsp[-1].minor);
}
#line 3886 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 188: /* stmt ::= stmt_lbr stmt_list RBR */
#line 1220 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy91 = yymsp[-2].minor.yy97;
                    p->close_scope( yymsp[-2].minor.yy97->scope );
                  yy_destructor(yypParser,113,&yymsp[-1].minor);
  yy_destructor(yypParser,11,&yymsp[0].minor);
}
#line 3896 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 190: /* stmt_lbr ::= LBR */
#line 1230 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy97 = p->alloc< xec_stmt_block >( yymsp[0].minor.yy0->sloc );
                    yygotominor.yy97->scope = p->block_scope( yygotominor.yy97 );
                    yygotominor.yy97->scope->block = yygotominor.yy97;
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3906 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 191: /* stmt_reuse ::= stmt_lbr_ru stmt_list RBR */
#line 1240 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy91 = yymsp[-2].minor.yy97;
                  yy_destructor(yypParser,113,&yymsp[-1].minor);
  yy_destructor(yypParser,11,&yymsp[0].minor);
}
#line 3915 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 193: /* stmt_lbr_ru ::= LBR */
#line 1249 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy97 = p->alloc< xec_stmt_block >( yymsp[0].minor.yy0->sloc );
                    yygotominor.yy97->scope = p->get_scope();
                    yygotominor.yy97->scope->block = yygotominor.yy97;
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3925 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 194: /* stmt_common ::= SEMICOLON */
#line 1260 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy91 = nullptr;
                  yy_destructor(yypParser,14,&yymsp[0].minor);
}
#line 3933 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 200: /* stmt_common ::= stmt_if LPN condition RPN stmt */
#line 1284 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-4].minor.yy76->condition = yymsp[-2].minor.yy91;
                    yymsp[-4].minor.yy76->iftrue    = p->nodecl( yymsp[0].minor.yy91 );
                    p->close_scope( yymsp[-4].minor.yy76->scope );
                    yygotominor.yy91 = yymsp[-4].minor.yy76;
                  yy_destructor(yypParser,7,&yymsp[-3].minor);
  yy_destructor(yypParser,10,&yymsp[-1].minor);
}
#line 3945 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 201: /* stmt_common ::= stmt_if LPN condition RPN stmt ELSE stmt */
#line 1292 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-6].minor.yy76->condition = yymsp[-4].minor.yy91;
                    yymsp[-6].minor.yy76->iftrue    = p->nodecl( yymsp[-2].minor.yy91 );
                    yymsp[-6].minor.yy76->iffalse   = p->nodecl( yymsp[0].minor.yy91 );
                    p->close_scope( yymsp[-6].minor.yy76->scope );
                    yygotominor.yy91 = yymsp[-6].minor.yy76;
                  yy_destructor(yypParser,7,&yymsp[-5].minor);
  yy_destructor(yypParser,10,&yymsp[-3].minor);
  yy_destructor(yypParser,2,&yymsp[-1].minor);
}
#line 3959 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 202: /* stmt_common ::= stmt_switch LPN condition RPN stmt_lbr_ru stmt_list RPN */
#line 1301 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-6].minor.yy3->value     = yymsp[-4].minor.yy91;
                    yymsp[-6].minor.yy3->body      = yymsp[-2].minor.yy97;
                    p->close_scope( yymsp[-6].minor.yy3->scope );
                    yygotominor.yy91 = yymsp[-6].minor.yy3;
                  yy_destructor(yypParser,7,&yymsp[-5].minor);
  yy_destructor(yypParser,10,&yymsp[-3].minor);
  yy_destructor(yypParser,113,&yymsp[-1].minor);
  yy_destructor(yypParser,10,&yymsp[0].minor);
}
#line 3973 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 203: /* stmt_common ::= stmt_while LPN condition RPN stmt_reuse */
#line 1309 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-4].minor.yy130->condition = yymsp[-2].minor.yy91;
                    yymsp[-4].minor.yy130->body      = p->nodecl( yymsp[0].minor.yy91 );
                    p->close_scope( yymsp[-4].minor.yy130->scope );
                    yygotominor.yy91 = yymsp[-4].minor.yy130;
                  yy_destructor(yypParser,7,&yymsp[-3].minor);
  yy_destructor(yypParser,10,&yymsp[-1].minor);
}
#line 3985 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 204: /* stmt_common ::= stmt_do stmt_reuse WHILE LPN expr_assign RPN SEMICOLON */
#line 1317 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-6].minor.yy60->body      = p->nodecl( yymsp[-5].minor.yy91 );
                    yymsp[-6].minor.yy60->condition = yymsp[-2].minor.yy91;
                    p->close_scope( yymsp[-6].minor.yy60->scope );
                    yygotominor.yy91 = yymsp[-6].minor.yy60;
                  yy_destructor(yypParser,69,&yymsp[-4].minor);
  yy_destructor(yypParser,7,&yymsp[-3].minor);
  yy_destructor(yypParser,10,&yymsp[-1].minor);
  yy_destructor(yypParser,14,&yymsp[0].minor);
}
#line 3999 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 205: /* stmt_common ::= stmt_foreach stmt_reuse */
#line 1324 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy81->body      = yymsp[0].minor.yy91;
                    p->close_scope( yymsp[-1].minor.yy81->scope );
                    yygotominor.yy91 = yymsp[-1].minor.yy81;
                }
#line 4008 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 206: /* stmt_common ::= stmt_for stmt_reuse */
#line 1330 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy36->body      = yymsp[0].minor.yy91;
                    p->close_scope( yymsp[-1].minor.yy36->scope );
                    yygotominor.yy91 = yymsp[-1].minor.yy36;
                }
#line 4017 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 207: /* stmt_common ::= stmt_using LPN condition RPN stmt_reuse */
#line 1337 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-4].minor.yy231->uvalue    = yymsp[-2].minor.yy91;
                    yymsp[-4].minor.yy231->body      = p->nodecl( yymsp[0].minor.yy91 );
                    p->close_scope( yymsp[-4].minor.yy231->scope );
                    yygotominor.yy91 = yymsp[-4].minor.yy231;
                  yy_destructor(yypParser,7,&yymsp[-3].minor);
  yy_destructor(yypParser,10,&yymsp[-1].minor);
}
#line 4029 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 209: /* stmt_common ::= DELETE expr_lbody SEMICOLON */
#line 1348 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    xec_stmt_delete* s;
                    yygotominor.yy91 = s = p->alloc< xec_stmt_delete >( yymsp[-2].minor.yy0->sloc );
                    p->delval_list( yymsp[-1].minor.yy91, &s->delvals );
                    p->destroy( yymsp[-2].minor.yy0 );
                  yy_destructor(yypParser,14,&yymsp[0].minor);
}
#line 4040 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 210: /* stmt_common ::= CASE expr_value COLON */
#line 1355 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy91 = p->alloc< xec_stmt_case >( yymsp[-2].minor.yy0->sloc, yymsp[-1].minor.yy91 );
                    p->destroy( yymsp[-2].minor.yy0 );
                  yy_destructor(yypParser,13,&yymsp[0].minor);
}
#line 4049 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 211: /* stmt_common ::= DEFAULT COLON */
#line 1360 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy91 = p->alloc< xec_stmt_case >( yymsp[-1].minor.yy0->sloc, nullptr );
                    p->destroy( yymsp[-1].minor.yy0 );
                  yy_destructor(yypParser,13,&yymsp[0].minor);
}
#line 4058 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 212: /* stmt_common ::= CONTINUE SEMICOLON */
#line 1365 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    xec_ast_node* target = p->continue_target( yymsp[-1].minor.yy0->sloc );
                    yygotominor.yy91 = p->alloc< xec_stmt_continue >( yymsp[-1].minor.yy0->sloc, target );
                    p->destroy( yymsp[-1].minor.yy0 );
                  yy_destructor(yypParser,14,&yymsp[0].minor);
}
#line 4068 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 213: /* stmt_common ::= BREAK SEMICOLON */
#line 1371 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    xec_ast_node* target = p->break_target( yymsp[-1].minor.yy0->sloc );
                    yygotominor.yy91 = p->alloc< xec_stmt_break >( yymsp[-1].minor.yy0->sloc, target );
                    p->destroy( yymsp[-1].minor.yy0 );
                  yy_destructor(yypParser,14,&yymsp[0].minor);
}
#line 4078 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 214: /* stmt_common ::= RETURN SEMICOLON */
#line 1377 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy91 = p->alloc< xec_stmt_return >( yymsp[-1].minor.yy0->sloc, nullptr );
                    p->destroy( yymsp[-1].minor.yy0 );
                  yy_destructor(yypParser,14,&yymsp[0].minor);
}
#line 4087 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 215: /* stmt_common ::= RETURN expr_list SEMICOLON */
#line 1382 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy91 = p->alloc< xec_stmt_return >( yymsp[-2].minor.yy0->sloc, yymsp[-1].minor.yy91 );
                    p->destroy( yymsp[-2].minor.yy0 );
                  yy_destructor(yypParser,14,&yymsp[0].minor);
}
#line 4096 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 216: /* stmt_common ::= token_yield SEMICOLON */
#line 1387 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy91 = p->alloc< xec_expr_yield >( yymsp[-1].minor.yy43->sloc, nullptr );
                    p->destroy( yymsp[-1].minor.yy43 );
                  yy_destructor(yypParser,14,&yymsp[0].minor);
}
#line 4105 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 217: /* stmt_common ::= token_yield expr_list SEMICOLON */
#line 1392 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy91 = p->alloc< xec_expr_yield >( yymsp[-2].minor.yy43->sloc, yymsp[-1].minor.yy91 );
                    p->destroy( yymsp[-2].minor.yy43 );
                  yy_destructor(yypParser,14,&yymsp[0].minor);
}
#line 4114 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 218: /* stmt_common ::= THROW expr_value SEMICOLON */
#line 1397 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy91 = p->alloc< xec_stmt_throw >( yymsp[-2].minor.yy0->sloc, yymsp[-1].minor.yy91 );
                    p->destroy( yymsp[-2].minor.yy0 );
                  yy_destructor(yypParser,14,&yymsp[0].minor);
}
#line 4123 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 219: /* stmt_if ::= IF */
#line 1406 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy76 = p->alloc< xec_stmt_if >( yymsp[0].minor.yy0->sloc );
                    yygotominor.yy76->scope = p->block_scope( yygotominor.yy76 );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 4132 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 220: /* stmt_switch ::= SWITCH */
#line 1413 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy3 = p->alloc< xec_stmt_switch >( yymsp[0].minor.yy0->sloc );
                    yygotominor.yy3->scope = p->block_scope( yygotominor.yy3 );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 4141 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 221: /* stmt_while ::= WHILE */
#line 1420 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy130 = p->alloc< xec_stmt_while >( yymsp[0].minor.yy0->sloc );
                    yygotominor.yy130->scope = p->block_scope( yygotominor.yy130 );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 4150 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 222: /* stmt_do ::= DO */
#line 1427 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy60 = p->alloc< xec_stmt_do >( yymsp[0].minor.yy0->sloc );
                    yygotominor.yy60->scope = p->block_scope( yygotominor.yy60 );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 4159 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 223: /* scope_for ::= FOR */
#line 1434 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    // open scope before we know the kind of statement.
                    yygotominor.yy190 = make_token_scope( yymsp[0].minor.yy0, p->block_scope( nullptr ) );
                }
#line 4167 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 224: /* stmt_foreach ::= scope_for LPN expr_lbody COLON expr_value RPN */
#line 1441 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy81 = p->alloc< xec_stmt_foreach >( yymsp[-5].minor.yy190.token->sloc );
                    yymsp[-5].minor.yy190.scope->node = yygotominor.yy81;
                    yygotominor.yy81->scope    = yymsp[-5].minor.yy190.scope;
                    p->lvalue_list( yymsp[-3].minor.yy91, &yygotominor.yy81->lvalues );
                    yygotominor.yy81->list     = yymsp[-1].minor.yy91;
                    p->destroy( yymsp[-5].minor.yy190.token );
                  yy_destructor(yypParser,7,&yymsp[-4].minor);
  yy_destructor(yypParser,13,&yymsp[-2].minor);
  yy_destructor(yypParser,10,&yymsp[0].minor);
}
#line 4182 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 225: /* stmt_foreach ::= scope_for LPN expr_lbody EACHKEY expr_value RPN */
#line 1451 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy81 = p->alloc< xec_stmt_foreach >( yymsp[-5].minor.yy190.token->sloc );
                    yymsp[-5].minor.yy190.scope->node = yygotominor.yy81;
                    yygotominor.yy81->scope    = yymsp[-5].minor.yy190.scope;
                    p->lvalue_list( yymsp[-3].minor.yy91, &yygotominor.yy81->lvalues );
                    yygotominor.yy81->list     = yymsp[-1].minor.yy91;
                    yygotominor.yy81->eachkey  = true;
                    p->destroy( yymsp[-5].minor.yy190.token );
                  yy_destructor(yypParser,7,&yymsp[-4].minor);
  yy_destructor(yypParser,80,&yymsp[-2].minor);
  yy_destructor(yypParser,10,&yymsp[0].minor);
}
#line 4198 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 226: /* stmt_foreach ::= scope_for LPN VAR varname_list COLON expr_value RPN */
#line 1462 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy81 = p->alloc< xec_stmt_foreach >( yymsp[-6].minor.yy190.token->sloc );
                    yymsp[-6].minor.yy190.scope->node = yygotominor.yy81;
                    yygotominor.yy81->scope    = yymsp[-6].minor.yy190.scope;
                    yygotominor.yy81->list     = yymsp[-1].minor.yy91;
                    p->declare_list( yymsp[-3].minor.yy203, &yygotominor.yy81->names );
                    yygotominor.yy81->declare  = true;
                    p->destroy( yymsp[-6].minor.yy190.token );
                  yy_destructor(yypParser,7,&yymsp[-5].minor);
  yy_destructor(yypParser,15,&yymsp[-4].minor);
  yy_destructor(yypParser,13,&yymsp[-2].minor);
  yy_destructor(yypParser,10,&yymsp[0].minor);
}
#line 4215 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 227: /* stmt_foreach ::= scope_for LPN VAR varname_list EACHKEY expr_value RPN */
#line 1473 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy81 = p->alloc< xec_stmt_foreach >( yymsp[-6].minor.yy190.token->sloc );
                    yymsp[-6].minor.yy190.scope->node = yygotominor.yy81;
                    yygotominor.yy81->scope    = yymsp[-6].minor.yy190.scope;
                    yygotominor.yy81->list     = yymsp[-1].minor.yy91;
                    p->declare_list( yymsp[-3].minor.yy203, &yygotominor.yy81->names );
                    yygotominor.yy81->declare  = true;
                    yygotominor.yy81->eachkey  = true;
                    p->destroy( yymsp[-6].minor.yy190.token );
                  yy_destructor(yypParser,7,&yymsp[-5].minor);
  yy_destructor(yypParser,15,&yymsp[-4].minor);
  yy_destructor(yypParser,80,&yymsp[-2].minor);
  yy_destructor(yypParser,10,&yymsp[0].minor);
}
#line 4233 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 228: /* stmt_for ::= scope_for LPN condition SEMICOLON expr_assign SEMICOLON expr_assign RPN */
#line 1488 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy36 = p->alloc< xec_stmt_for >( yymsp[-7].minor.yy190.token->sloc );
                    yymsp[-7].minor.yy190.scope->node = yygotominor.yy36;
                    yygotominor.yy36->scope        = yymsp[-7].minor.yy190.scope;
                    yygotominor.yy36->init         = yymsp[-5].minor.yy91;
                    yygotominor.yy36->condition    = yymsp[-3].minor.yy91;
                    yygotominor.yy36->update       = yymsp[-1].minor.yy91;
                    p->destroy( yymsp[-7].minor.yy190.token );
                  yy_destructor(yypParser,7,&yymsp[-6].minor);
  yy_destructor(yypParser,14,&yymsp[-4].minor);
  yy_destructor(yypParser,14,&yymsp[-2].minor);
  yy_destructor(yypParser,10,&yymsp[0].minor);
}
#line 4250 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 229: /* stmt_using ::= USING */
#line 1499 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy231 = p->alloc< xec_stmt_using >( yymsp[0].minor.yy0->sloc );
                    yygotominor.yy231->scope = p->block_scope( yygotominor.yy231 );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 4259 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 230: /* stmt_try ::= try_catch */
#line 1509 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy91 = yymsp[0].minor.yy252;
                }
#line 4266 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 231: /* stmt_try ::= try_catch FINALLY stmt */
      case 232: /* stmt_try ::= try_block FINALLY stmt */ yytestcase(yyruleno==232);
#line 1513 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-2].minor.yy252->fstmt = p->nodecl( yymsp[0].minor.yy91 );
                    yygotominor.yy91 = yymsp[-2].minor.yy252;
                  yy_destructor(yypParser,5,&yymsp[-1].minor);
}
#line 4276 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 233: /* try_block ::= TRY stmt */
#line 1524 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy252 = p->alloc< xec_stmt_try >( yymsp[-1].minor.yy0->sloc, yymsp[0].minor.yy91 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 4284 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 234: /* try_catch ::= try_block stmt_catch stmt_reuse */
#line 1530 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy98->body = p->nodecl( yymsp[0].minor.yy91 );
                    p->close_scope( yymsp[-1].minor.yy98->scope );
                    yymsp[-2].minor.yy252->clist.push_back( yymsp[-1].minor.yy98 );
                    yygotominor.yy252 = yymsp[-2].minor.yy252;
                }
#line 4294 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 235: /* try_catch ::= try_catch stmt_catch stmt_reuse */
#line 1537 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy98->body = p->nodecl(yymsp[0].minor.yy91);
                    p->close_scope( yymsp[-1].minor.yy98->scope );
                    yymsp[-2].minor.yy252->clist.push_back( yymsp[-1].minor.yy98 );
                    yygotominor.yy252 = yymsp[-2].minor.yy252;
                }
#line 4304 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 236: /* scope_catch ::= CATCH */
#line 1545 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    // open scope here ready for declarations.
                    yygotominor.yy190 = make_token_scope( yymsp[0].minor.yy0, p->block_scope( nullptr ) );
                }
#line 4312 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 237: /* stmt_catch ::= scope_catch LPN COLON expr_simple RPN */
#line 1551 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy98 = p->alloc< xec_stmt_catch >( yymsp[-4].minor.yy190.token->sloc );
                    yymsp[-4].minor.yy190.scope->node = yygotominor.yy98;
                    yygotominor.yy98->proto    = yymsp[-1].minor.yy91;
                    p->destroy( yymsp[-4].minor.yy190.token );
                  yy_destructor(yypParser,7,&yymsp[-3].minor);
  yy_destructor(yypParser,13,&yymsp[-2].minor);
  yy_destructor(yypParser,10,&yymsp[0].minor);
}
#line 4325 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 238: /* stmt_catch ::= scope_catch LPN expr_value COLON expr_simple RPN */
#line 1559 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy98 = p->alloc< xec_stmt_catch >( yymsp[-5].minor.yy190.token->sloc );
                    yymsp[-5].minor.yy190.scope->node = yygotominor.yy98;
                    yygotominor.yy98->lvalue   = yymsp[-3].minor.yy91;
                    yygotominor.yy98->proto    = yymsp[-1].minor.yy91;
                    p->destroy( yymsp[-5].minor.yy190.token );
                  yy_destructor(yypParser,7,&yymsp[-4].minor);
  yy_destructor(yypParser,13,&yymsp[-2].minor);
  yy_destructor(yypParser,10,&yymsp[0].minor);
}
#line 4339 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 239: /* stmt_catch ::= scope_catch LPN VAR varname COLON expr_simple RPN */
#line 1568 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy98 = p->alloc< xec_stmt_catch >( yymsp[-6].minor.yy190.token->sloc );
                    yymsp[-6].minor.yy190.scope->node = yygotominor.yy98;
                    yygotominor.yy98->proto    = yymsp[-1].minor.yy91;
                    yygotominor.yy98->name     = p->declare( yymsp[-3].minor.yy96 );
                    yygotominor.yy98->declare  = true;
                    p->destroy( yymsp[-6].minor.yy190.token );
                  yy_destructor(yypParser,7,&yymsp[-5].minor);
  yy_destructor(yypParser,15,&yymsp[-4].minor);
  yy_destructor(yypParser,13,&yymsp[-2].minor);
  yy_destructor(yypParser,10,&yymsp[0].minor);
}
#line 4355 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      default:
        break;
  };
  yygoto = yyRuleInfo[yyruleno].lhs;
  yysize = yyRuleInfo[yyruleno].nrhs;
  yypParser->yyidx -= yysize;
  yyact = yy_find_reduce_action(yymsp[-yysize].stateno,(YYCODETYPE)yygoto);
  if( yyact < YYNSTATE ){
#ifdef NDEBUG
    /* If we are not debugging and the reduce action popped at least
    ** one element off the stack, then we can push the new element back
    ** onto the stack here, and skip the stack overflow test in yy_shift().
    ** That gives a significant speed improvement. */
    if( yysize ){
      yypParser->yyidx++;
      yymsp -= yysize-1;
      yymsp->stateno = (YYACTIONTYPE)yyact;
      yymsp->major = (YYCODETYPE)yygoto;
      yymsp->minor = yygotominor;
    }else
#endif
    {
      yy_shift(yypParser,yyact,yygoto,&yygotominor);
    }
  }else{
    assert( yyact == YYNSTATE + YYNRULE + 1 );
    yy_accept(yypParser);
  }
}

/*
** The following code executes when the parse fails
*/
#ifndef YYNOERRORRECOVERY
static void yy_parse_failed(
  yyParser *yypParser           /* The parser */
){
  XecParseARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sFail!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser fails */
  XecParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}
#endif /* YYNOERRORRECOVERY */

/*
** The following code executes when a syntax error first occurs.
*/
static void yy_syntax_error(
  yyParser *yypParser,           /* The parser */
  int yymajor,                   /* The major type of the error token */
  YYMINORTYPE yyminor            /* The minor type of the error token */
){
  XecParseARG_FETCH;
#define TOKEN (yyminor.yy0)
#line 1599 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"

    p->get_script()->diagnostic( TOKEN->sloc,
            "unexpected %s", TOKEN->get_spelling().c_str() );
#line 4421 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
  XecParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/*
** The following is executed when the parser accepts
*/
static void yy_accept(
  yyParser *yypParser           /* The parser */
){
  XecParseARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sAccept!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser accepts */
  XecParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/* The main parser program.
** The first argument is a pointer to a structure obtained from
** "XecParseAlloc" which describes the current state of the parser.
** The second argument is the major token number.  The third is
** the minor token.  The fourth optional argument is whatever the
** user wants (and specified in the grammar) and is available for
** use by the action routines.
**
** Inputs:
** <ul>
** <li> A pointer to the parser (an opaque structure.)
** <li> The major token number.
** <li> The minor token number.
** <li> An option argument of a grammar-specified type.
** </ul>
**
** Outputs:
** None.
*/
void XecParse(
  void *yyp,                   /* The parser */
  int yymajor,                 /* The major token code number */
  XecParseTOKENTYPE yyminor       /* The value for the token */
  XecParseARG_PDECL               /* Optional %extra_argument parameter */
){
  YYMINORTYPE yyminorunion;
  int yyact;            /* The parser action. */
  int yyendofinput;     /* True if we are at the end of input */
#ifdef YYERRORSYMBOL
  int yyerrorhit = 0;   /* True if yymajor has invoked an error */
#endif
  yyParser *yypParser;  /* The parser */

  /* (re)initialize the parser, if necessary */
  yypParser = (yyParser*)yyp;
  if( yypParser->yyidx<0 ){
#if YYSTACKDEPTH<=0
    if( yypParser->yystksz <=0 ){
      /*memset(&yyminorunion, 0, sizeof(yyminorunion));*/
      yyminorunion = yyzerominor;
      yyStackOverflow(yypParser, &yyminorunion);
      return;
    }
#endif
    yypParser->yyidx = 0;
    yypParser->yyerrcnt = -1;
    yypParser->yystack[0].stateno = 0;
    yypParser->yystack[0].major = 0;
  }
  yyminorunion.yy0 = yyminor;
  yyendofinput = (yymajor==0);
  XecParseARG_STORE;

#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sInput %s\n",yyTracePrompt,yyTokenName[yymajor]);
  }
#endif

  do{
    yyact = yy_find_shift_action(yypParser,(YYCODETYPE)yymajor);
    if( yyact<YYNSTATE ){
      assert( !yyendofinput );  /* Impossible to shift the $ token */
      yy_shift(yypParser,yyact,yymajor,&yyminorunion);
      yypParser->yyerrcnt--;
      yymajor = YYNOCODE;
    }else if( yyact < YYNSTATE + YYNRULE ){
      yy_reduce(yypParser,yyact-YYNSTATE);
    }else{
      assert( yyact == YY_ERROR_ACTION );
#ifdef YYERRORSYMBOL
      int yymx;
#endif
#ifndef NDEBUG
      if( yyTraceFILE ){
        fprintf(yyTraceFILE,"%sSyntax Error!\n",yyTracePrompt);
      }
#endif
#ifdef YYERRORSYMBOL
      /* A syntax error has occurred.
      ** The response to an error depends upon whether or not the
      ** grammar defines an error token "ERROR".  
      **
      ** This is what we do if the grammar does define ERROR:
      **
      **  * Call the %syntax_error function.
      **
      **  * Begin popping the stack until we enter a state where
      **    it is legal to shift the error symbol, then shift
      **    the error symbol.
      **
      **  * Set the error count to three.
      **
      **  * Begin accepting and shifting new tokens.  No new error
      **    processing will occur until three tokens have been
      **    shifted successfully.
      **
      */
      if( yypParser->yyerrcnt<0 ){
        yy_syntax_error(yypParser,yymajor,yyminorunion);
      }
      yymx = yypParser->yystack[yypParser->yyidx].major;
      if( yymx==YYERRORSYMBOL || yyerrorhit ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE,"%sDiscard input token %s\n",
             yyTracePrompt,yyTokenName[yymajor]);
        }
#endif
        yy_destructor(yypParser, (YYCODETYPE)yymajor,&yyminorunion);
        yymajor = YYNOCODE;
      }else{
         while(
          yypParser->yyidx >= 0 &&
          yymx != YYERRORSYMBOL &&
          (yyact = yy_find_reduce_action(
                        yypParser->yystack[yypParser->yyidx].stateno,
                        YYERRORSYMBOL)) >= YYNSTATE
        ){
          yy_pop_parser_stack(yypParser);
        }
        if( yypParser->yyidx < 0 || yymajor==0 ){
          yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
          yy_parse_failed(yypParser);
          yymajor = YYNOCODE;
        }else if( yymx!=YYERRORSYMBOL ){
          YYMINORTYPE u2;
          u2.YYERRSYMDT = 0;
          yy_shift(yypParser,yyact,YYERRORSYMBOL,&u2);
        }
      }
      yypParser->yyerrcnt = 3;
      yyerrorhit = 1;
#elif defined(YYNOERRORRECOVERY)
      /* If the YYNOERRORRECOVERY macro is defined, then do not attempt to
      ** do any kind of error recovery.  Instead, simply invoke the syntax
      ** error routine and continue going as if nothing had happened.
      **
      ** Applications can set this macro (for example inside %include) if
      ** they intend to abandon the parse upon the first syntax error seen.
      */
      yy_syntax_error(yypParser,yymajor,yyminorunion);
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      yymajor = YYNOCODE;
      
#else  /* YYERRORSYMBOL is not defined */
      /* This is what we do if the grammar does not define ERROR:
      **
      **  * Report an error message, and throw away the input token.
      **
      **  * If the input token is $, then fail the parse.
      **
      ** As before, subsequent error messages are suppressed until
      ** three input tokens have been successfully shifted.
      */
      if( yypParser->yyerrcnt<=0 ){
        yy_syntax_error(yypParser,yymajor,yyminorunion);
      }
      yypParser->yyerrcnt = 3;
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      if( yyendofinput ){
        yy_parse_failed(yypParser);
      }
      yymajor = YYNOCODE;
#endif
    }
  }while( yymajor!=YYNOCODE && yypParser->yyidx>=0 );
  return;
}
