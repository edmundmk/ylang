/* Driver template for the LEMON parser generator.
** The author disclaims copyright to this source code.
*/
/* First off, code is included that follows the "include" declaration
** in the input grammar file. */
#include <stdio.h>
#line 19 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"


#include <assert.h>
#include "xec_parser.h"
#include "xec_token.h"
#include "xec_ast.h"


struct xec_token_scope
{
    xec_token*      token;
    xec_ast_scope*  scope;
};


inline xec_token_scope make_token_scope(
                xec_token* token, xec_ast_scope* scope )
{
    xec_token_scope result;
    result.token = token;
    result.scope = scope;
    return result;
}


#line 90 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"



void xec_parser::destroy( xec_token* token )
{
    token->~xec_token();
    recycle_tokens.push_back( token );
}


#line 45 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
/* Next is all token values, in a form suitable for use by makeheaders.
** This section will be null unless lemon is run with the -m switch.
*/
/* 
** These constants (all generated automatically by the parser generator)
** specify the various kinds of tokens (terminals) that the parser
** understands. 
**
** Each symbol here is a terminal symbol in the grammar.
*/
/* Make sure the INTERFACE macro is defined.
*/
#ifndef INTERFACE
# define INTERFACE 1
#endif
/* The next thing included is series of defines which control
** various aspects of the generated parser.
**    YYCODETYPE         is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 terminals
**                       and nonterminals.  "int" is used otherwise.
**    YYNOCODE           is a number of type YYCODETYPE which corresponds
**                       to no legal terminal or nonterminal number.  This
**                       number is used to fill in empty slots of the hash 
**                       table.
**    YYFALLBACK         If defined, this indicates that one or more tokens
**                       have fall-back values which should be used if the
**                       original value of the token will not parse.
**    YYACTIONTYPE       is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 rules and
**                       states combined.  "int" is used otherwise.
**    XecParseTOKENTYPE     is the data type used for minor tokens given 
**                       directly to the parser from the tokenizer.
**    YYMINORTYPE        is the data type used for all minor tokens.
**                       This is typically a union of many types, one of
**                       which is XecParseTOKENTYPE.  The entry in the union
**                       for base tokens is called "yy0".
**    YYSTACKDEPTH       is the maximum depth of the parser's stack.  If
**                       zero the stack is dynamically sized using realloc()
**    XecParseARG_SDECL     A static variable declaration for the %extra_argument
**    XecParseARG_PDECL     A parameter declaration for the %extra_argument
**    XecParseARG_STORE     Code to store %extra_argument into yypParser
**    XecParseARG_FETCH     Code to extract %extra_argument from yypParser
**    YYNSTATE           the combined number of states.
**    YYNRULE            the number of rules in the grammar
**    YYERRORSYMBOL      is the code number of the error symbol.  If not
**                       defined, then do no error processing.
*/
#define YYCODETYPE unsigned char
#define YYNOCODE 157
#define YYACTIONTYPE unsigned short int
#define XecParseTOKENTYPE  xec_token* 
typedef union {
  int yyinit;
  XecParseTOKENTYPE yy0;
  xec_stmt_while* yy6;
  xec_stmt_using* yy19;
  xec_stmt_block* yy36;
  xec_unqual_proto* yy55;
  xec_stmt_do* yy56;
  xec_stmt_for* yy57;
  xec_token* yy91;
  xec_new_list* yy92;
  xec_ast_func* yy93;
  xec_unqual_list* yy99;
  xec_unqual_name* yy124;
  xec_expr_yield* yy143;
  xec_stmt_catch* yy184;
  xec_ast_node* yy191;
  xec_stmt_switch* yy199;
  xec_stmt_if* yy208;
  xec_stmt_foreach* yy213;
  xec_token_scope yy218;
  xec_new_object* yy230;
  xec_stmt_try* yy236;
  xec_expr_call* yy252;
  xec_new_table* yy287;
} YYMINORTYPE;
#ifndef YYSTACKDEPTH
#define YYSTACKDEPTH 100
#endif
#define XecParseARG_SDECL  xec_parser* p ;
#define XecParseARG_PDECL , xec_parser* p 
#define XecParseARG_FETCH  xec_parser* p  = yypParser->p 
#define XecParseARG_STORE yypParser->p  = p 
#define YYNSTATE 473
#define YYNRULE 247
#define YY_NO_ACTION      (YYNSTATE+YYNRULE+2)
#define YY_ACCEPT_ACTION  (YYNSTATE+YYNRULE+1)
#define YY_ERROR_ACTION   (YYNSTATE+YYNRULE)

/* The yyzerominor constant is used to initialize instances of
** YYMINORTYPE objects to zero. */
static const YYMINORTYPE yyzerominor = { 0 };

/* Define the yytestcase() macro to be a no-op if is not already defined
** otherwise.
**
** Applications can choose to define yytestcase() in the %include section
** to a macro that can assist in verifying code coverage.  For production
** code the yytestcase() macro should be turned off.  But it is useful
** for testing.
*/
#ifndef yytestcase
# define yytestcase(X)
#endif


/* Next are the tables used to determine what action to take based on the
** current state and lookahead token.  These tables are used to implement
** functions that take a state number and lookahead value and return an
** action integer.  
**
** Suppose the action integer is N.  Then the action is determined as
** follows
**
**   0 <= N < YYNSTATE                  Shift N.  That is, push the lookahead
**                                      token onto the stack and goto state N.
**
**   YYNSTATE <= N < YYNSTATE+YYNRULE   Reduce by rule N-YYNSTATE.
**
**   N == YYNSTATE+YYNRULE              A syntax error has occurred.
**
**   N == YYNSTATE+YYNRULE+1            The parser accepts its input.
**
**   N == YYNSTATE+YYNRULE+2            No such action.  Denotes unused
**                                      slots in the yy_action[] table.
**
** The action table is constructed as a single large table named yy_action[].
** Given state S and lookahead X, the action is computed as
**
**      yy_action[ yy_shift_ofst[S] + X ]
**
** If the index value yy_shift_ofst[S]+X is out of range or if the value
** yy_lookahead[yy_shift_ofst[S]+X] is not equal to X or if yy_shift_ofst[S]
** is equal to YY_SHIFT_USE_DFLT, it means that the action is not in the table
** and that yy_default[S] should be used instead.  
**
** The formula above is for computing the action when the lookahead is
** a terminal symbol.  If the lookahead is a non-terminal (as occurs after
** a reduce action) then the yy_reduce_ofst[] array is used in place of
** the yy_shift_ofst[] array and YY_REDUCE_USE_DFLT is used in place of
** YY_SHIFT_USE_DFLT.
**
** The following are the tables generated in this section:
**
**  yy_action[]        A single table containing all actions.
**  yy_lookahead[]     A table containing the lookahead for each entry in
**                     yy_action.  Used to detect hash collisions.
**  yy_shift_ofst[]    For each state, the offset into yy_action for
**                     shifting terminals.
**  yy_reduce_ofst[]   For each state, the offset into yy_action for
**                     shifting non-terminals after a reduce.
**  yy_default[]       Default action for each state.
*/
static const YYACTIONTYPE yy_action[] = {
 /*     0 */   119,  122,  123,  149,  144,  148,  150,  275,  442,   12,
 /*    10 */   451,  199,   10,  331,  112,  145,   83,  266,  257,  255,
 /*    20 */    13,  223,   11,    9,  243,  109,  108,  275,  291,   30,
 /*    30 */   329,  282,  120,  331,  112,  392,  470,  295,   72,  393,
 /*    40 */   472,  251,  249,  127,  442,   15,  133,  130,  301,  171,
 /*    50 */   310,  153,  176,  156,  254,  258,  264,  211,  117,  265,
 /*    60 */   261,  163,  365,  346,  388,  116,  389,  238,  417,  391,
 /*    70 */   397,   77,  416,  121,  122,  123,   84,  144,   31,  150,
 /*    80 */   166,  199,   17,  327,  105,   88,   86,   87,  145,   44,
 /*    90 */   266,  257,  255,   13,  223,   11,    9,  243,  109,  108,
 /*   100 */    24,  275,   30,  169,   31,  135,  174,  721,    3,  338,
 /*   110 */   295,  443,   31,  346,  229,   49,  127,  327,  105,  133,
 /*   120 */   130,  301,  171,  310,  153,  176,  156,  254,  258,  264,
 /*   130 */   211,  117,  265,  261,  163,  365,  469,  388,  116,  389,
 /*   140 */   238,  289,  406,  397,  274,  416,  121,  122,  123,  444,
 /*   150 */   144,   53,  150,  341,   93,   96,   95,   94,   50,  205,
 /*   160 */    24,  275,  147,  266,  257,  255,   13,  223,   11,    9,
 /*   170 */   243,  109,  108,  110,  134,   30,  182,   31,  135,  174,
 /*   180 */   161,  162,  107,  295,  337,  137,  468,   60,   49,  127,
 /*   190 */    35,  139,  133,  130,  301,  171,  310,  153,  176,  156,
 /*   200 */   254,  258,  264,  211,  117,  265,  261,  163,  365,  348,
 /*   210 */   388,  116,  389,  238,  172,  170,  411,  415,  416,  121,
 /*   220 */   122,  123,  279,  144,  207,  150,  341,  336,  161,  152,
 /*   230 */   349,  445,   71,   37,  140,  147,  266,  257,  255,   13,
 /*   240 */   223,   11,    9,  243,  109,  108,   35,  139,   30,  230,
 /*   250 */    31,  135,  160,   31,   58,  175,  295,   78,   54,  337,
 /*   260 */   283,   46,  127,  142,   47,  133,  130,  301,  171,  310,
 /*   270 */   153,  176,  156,  254,  258,  264,  211,  117,  265,  261,
 /*   280 */   163,  365,  200,  388,  116,  389,  238,  293,  338,  411,
 /*   290 */   447,  416,  121,  122,  123,  276,  144,   61,  150,  360,
 /*   300 */    38,  139,  449,  340,  448,   73,  335,  145,  344,  266,
 /*   310 */   257,  255,   13,  223,   11,    9,  243,  109,  108,  464,
 /*   320 */    31,   30,  174,   34,  135,  460,   31,  452,  160,  295,
 /*   330 */   436,   75,  302,  303,  340,  127,  350,   74,  133,  130,
 /*   340 */   301,  171,  310,  153,  176,  156,  254,  258,  264,  211,
 /*   350 */   117,  265,  261,  163,  365,  454,  388,  116,  389,  238,
 /*   360 */    29,  439,  397,   27,  416,  121,  122,  123,  285,  144,
 /*   370 */    31,  150,  159,   36,  140,   89,   90,    1,   69,   41,
 /*   380 */   145,   45,  266,  257,  255,   13,  223,   11,    9,  243,
 /*   390 */   109,  108,  334,   31,   30,  166,   31,  135,  166,   31,
 /*   400 */   201,  158,  295,  435,   44,  101,  347,   65,  127,   82,
 /*   410 */    48,  133,  130,  301,  171,  310,  153,  176,  156,  254,
 /*   420 */   258,  264,  211,  117,  265,  261,  163,  365,    5,  388,
 /*   430 */   116,  389,  238,  287,  407,  397,    4,  416,  121,  122,
 /*   440 */   123,  353,  144,   68,  150,    2,   59,    6,  434,  102,
 /*   450 */   280,  146,   52,  408,  147,  266,  257,  255,   13,  223,
 /*   460 */    11,    9,  243,  109,  108,  433,   31,   30,  165,   31,
 /*   470 */   135,  165,   31,   66,  175,  295,   31,   76,  432,  356,
 /*   480 */    51,  127,  157,   57,  133,  130,  301,  171,  310,  153,
 /*   490 */   176,  156,  254,  258,  264,  211,  117,  265,  261,  163,
 /*   500 */   365,  294,  388,  116,  389,  238,  173,  402,  411,  441,
 /*   510 */   416,  121,  122,  123,   22,  144,   31,  150,  159,  401,
 /*   520 */   328,  357,  404,  358,  426,  466,  145,   62,  266,  257,
 /*   530 */   255,   13,  223,   11,    9,  243,  109,  108,  189,   31,
 /*   540 */    30,  158,  425,  135,  276,  288,  359,  423,  295,  278,
 /*   550 */    56,  421,  277,  465,  127,  292,  420,  133,  130,  301,
 /*   560 */   171,  310,  153,  176,  156,  254,  258,  264,  211,  117,
 /*   570 */   265,  261,  163,  365,  361,  388,  116,  389,  238,  419,
 /*   580 */   440,  397,  286,  416,  121,  122,  123,  362,  144,  467,
 /*   590 */   150,  399,  326,  418,  284,  290,    8,   19,   70,  145,
 /*   600 */    26,  266,  257,  255,   13,  223,   11,    9,  243,  109,
 /*   610 */   108,  412,  245,   30,   81,  247,  135,  395,   28,   25,
 /*   620 */    79,  295,  394,    7,   21,   85,  463,  127,  143,   23,
 /*   630 */   133,  130,  301,  171,  310,  153,  176,  156,  254,  258,
 /*   640 */   264,  211,  117,  265,  261,  163,  365,  462,  388,  116,
 /*   650 */   389,  238,  458,  438,  397,  343,  416,  121,  122,  123,
 /*   660 */    14,  144,   80,  150,  461,  459,   40,   20,  106,  722,
 /*   670 */   722,  722,  722,  147,  266,  257,  255,   13,  223,   11,
 /*   680 */     9,  243,  109,  108,  722,  722,   30,  722,  722,  135,
 /*   690 */   722,  722,  722,  722,  295,  722,  722,  722,  722,  722,
 /*   700 */   127,  722,  722,  133,  130,  301,  171,  310,  153,  176,
 /*   710 */   156,  254,  258,  264,  211,  117,  265,  261,  163,  365,
 /*   720 */   722,  388,  116,  389,  238,  722,  722,  411,  413,  416,
 /*   730 */   121,  122,  123,  722,  144,  722,  150,  722,  722,  722,
 /*   740 */   722,  722,  722,  722,  722,  722,  147,  266,  257,  255,
 /*   750 */    13,  223,   11,    9,  243,  109,  108,  722,  722,   30,
 /*   760 */   722,  722,  135,  722,  722,  722,  722,  295,  722,  722,
 /*   770 */   722,  722,  722,  127,  722,  722,  133,  130,  301,  171,
 /*   780 */   310,  153,  176,  156,  254,  258,  264,  211,  117,  265,
 /*   790 */   261,  163,  365,  722,  388,  116,  389,  238,  722,  722,
 /*   800 */   411,  248,  416,  121,  122,  123,  722,  144,  722,  150,
 /*   810 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  147,
 /*   820 */   266,  257,  255,   13,  223,   11,    9,  243,  109,  108,
 /*   830 */   722,  722,   30,  722,  722,  135,  722,  722,  722,  722,
 /*   840 */   295,  722,  722,  722,  722,  722,  127,  722,  722,  133,
 /*   850 */   130,  301,  171,  310,  153,  176,  156,  254,  258,  264,
 /*   860 */   211,  117,  265,  261,  163,  365,  722,  388,  116,  389,
 /*   870 */   238,  722,  722,  411,  446,  416,  121,  122,  123,  722,
 /*   880 */   144,  722,  150,  722,  722,  722,  722,  722,  722,  722,
 /*   890 */   722,  722,  147,  266,  257,  255,   13,  223,   11,    9,
 /*   900 */   243,  109,  108,  722,  722,   30,  722,  722,  135,  722,
 /*   910 */   722,  722,  722,  295,  722,  722,  722,  722,  722,  127,
 /*   920 */   722,  722,  133,  130,  301,  171,  310,  153,  176,  156,
 /*   930 */   254,  258,  264,  211,  117,  265,  261,  163,  365,  722,
 /*   940 */   388,  116,  389,  238,  366,   40,  411,  414,  416,  473,
 /*   950 */   427,  722,   18,  722,  722,  272,   24,  275,  203,  722,
 /*   960 */   722,  398,  103,  390,  112,  722,  722,   33,  722,  110,
 /*   970 */   296,  297,  298,  299,  300,   98,   97,   92,  100,   99,
 /*   980 */    91,  722,  722,  722,  722,  367,  368,  369,  370,  371,
 /*   990 */   372,  373,  374,  375,  376,  377,  378,  722,  722,  722,
 /*  1000 */   722,  722,  722,  722,  141,  364,  315,  316,  317,  318,
 /*  1010 */   319,  320,  321,  322,  323,  324,  722,  722,  429,   43,
 /*  1020 */    55,  236,  234,  233,   32,   67,  428,  430,  431,  427,
 /*  1030 */   437,   18,  722,  722,  272,   24,  275,  203,  722,  363,
 /*  1040 */   398,  103,  390,  112,  722,  722,   33,  722,  110,  296,
 /*  1050 */   297,  298,  299,  300,   98,   97,   92,  100,   99,   91,
 /*  1060 */   205,   24,  275,  722,  722,  722,  345,  722,  722,  722,
 /*  1070 */   722,  722,  722,  722,  110,  722,  722,  722,  722,  722,
 /*  1080 */   722,  722,  722,  141,  364,  722,  722,  722,  722,  722,
 /*  1090 */   722,  722,  722,  722,  722,  722,  722,  429,   43,   55,
 /*  1100 */   236,  234,  233,   32,   67,  428,  430,  431,  427,  437,
 /*  1110 */    18,  722,  722,  272,   24,  275,  203,  409,  722,  398,
 /*  1120 */   103,  390,  112,  722,  722,   33,  722,  110,  296,  297,
 /*  1130 */   298,  299,  300,   98,   97,   92,  100,   99,   91,  722,
 /*  1140 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  1150 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  1160 */   722,  722,  141,  364,  722,  722,  722,  722,  722,  722,
 /*  1170 */   722,  722,  722,  722,  722,  722,  429,   43,   55,  236,
 /*  1180 */   234,  233,   32,   67,  428,  430,  431,  427,  437,   18,
 /*  1190 */   722,  722,  272,   24,  275,  203,  722,  410,  398,  103,
 /*  1200 */   390,  112,  722,  722,   33,  722,  110,  296,  297,  298,
 /*  1210 */   299,  300,   98,   97,   92,  100,   99,   91,  722,  722,
 /*  1220 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  1230 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  1240 */   722,  141,  364,  722,  722,  722,  722,  722,  722,  722,
 /*  1250 */   722,  722,  722,  722,  722,  429,   43,   55,  236,  234,
 /*  1260 */   233,   32,   67,  428,  430,  431,  427,  437,   18,  722,
 /*  1270 */   722,  272,   24,  275,  203,  722,  339,  398,  103,  390,
 /*  1280 */   112,  722,  722,   33,  722,  110,  296,  297,  298,  299,
 /*  1290 */   300,   98,   97,   92,  100,   99,   91,  722,  722,  722,
 /*  1300 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  1310 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  1320 */   141,  364,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  1330 */   722,  722,  722,  722,  429,   43,   55,  236,  234,  233,
 /*  1340 */    32,   67,  428,  430,  431,  427,  437,   18,  722,  722,
 /*  1350 */   272,   24,  275,  203,  722,  396,  398,  103,  390,  112,
 /*  1360 */   722,  722,   33,  722,  110,  296,  297,  298,  299,  300,
 /*  1370 */    98,   97,   92,  100,   99,   91,  722,  722,  722,  722,
 /*  1380 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  1390 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  141,
 /*  1400 */   364,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  1410 */   722,  722,  722,  429,   43,   55,  236,  234,  233,   32,
 /*  1420 */    67,  428,  430,  431,  427,  437,   18,  722,  722,  272,
 /*  1430 */    24,  275,  203,  722,  722,  408,  103,  125,  124,  129,
 /*  1440 */   722,   33,  722,  110,  296,  297,  298,  299,  300,   98,
 /*  1450 */    97,   92,  100,   99,   91,  722,  722,  722,  722,  722,
 /*  1460 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  131,
 /*  1470 */   722,  722,  722,  722,  295,  722,  722,  722,  141,  364,
 /*  1480 */   128,  722,  722,  136,  132,  301,  171,  310,  153,  176,
 /*  1490 */   156,  263,  429,   43,   55,  236,  234,  233,   32,   67,
 /*  1500 */   428,  430,  431,  427,  437,   18,  722,  722,  272,   24,
 /*  1510 */   275,  203,  722,  167,  398,  103,  149,  722,  148,  722,
 /*  1520 */    33,  722,  110,  296,  297,  298,  299,  300,   98,   97,
 /*  1530 */    92,  100,   99,   91,  722,  722,  722,  722,  722,  722,
 /*  1540 */   722,  722,  722,  722,  722,  126,  722,  722,  332,  722,
 /*  1550 */   722,  330,  333,  210,  204,  202,  722,  141,  364,  722,
 /*  1560 */   722,  722,  121,  122,  123,  722,  144,  722,  150,  722,
 /*  1570 */   722,  429,   43,   55,  236,  234,  233,   32,   67,  428,
 /*  1580 */   430,  431,  722,  437,  722,  722,  722,  722,  722,  722,
 /*  1590 */   722,  722,  722,  722,  135,  722,  385,  722,  722,  295,
 /*  1600 */   722,  722,  722,  722,  722,  127,  400,  381,  133,  130,
 /*  1610 */   301,  171,  310,  153,  176,  156,  254,  258,  264,  211,
 /*  1620 */   117,  265,  261,  163,  351,  115,  384,  722,  722,  722,
 /*  1630 */   260,  722,  722,  722,  722,  722,  722,  205,   24,  275,
 /*  1640 */   722,  121,  122,  123,  722,  144,  722,  150,  722,  722,
 /*  1650 */   722,  110,  296,  297,  298,  299,  300,   98,   97,   92,
 /*  1660 */   100,   99,   91,  722,  722,  722,  722,  722,  722,  722,
 /*  1670 */   722,  722,  722,  135,  722,  385,  366,   42,  295,  722,
 /*  1680 */   722,  722,  722,  722,  127,  400,  381,  133,  130,  301,
 /*  1690 */   171,  310,  153,  176,  156,  254,  258,  264,  211,  117,
 /*  1700 */   265,  261,  163,  351,  115,  384,  121,  122,  123,  242,
 /*  1710 */   144,  722,  150,  722,  722,  722,  722,  367,  368,  369,
 /*  1720 */   370,  371,  372,  373,  374,  375,  376,  377,  378,  722,
 /*  1730 */   722,  722,  722,  722,  722,  722,  722,  722,  135,  722,
 /*  1740 */   385,  722,  722,  295,  125,  124,  129,  722,  722,  127,
 /*  1750 */   400,  381,  133,  130,  301,  171,  310,  153,  176,  156,
 /*  1760 */   254,  258,  264,  211,  117,  265,  261,  163,  351,  115,
 /*  1770 */   384,  121,  122,  123,  252,  144,  131,  150,  722,  722,
 /*  1780 */   722,  295,  722,  722,  722,  722,  722,  128,  722,  722,
 /*  1790 */   136,  132,  301,  171,  310,  153,  176,  155,  722,  722,
 /*  1800 */   722,  722,  722,  135,  722,  385,  722,  722,  295,  125,
 /*  1810 */   124,  129,  722,  722,  127,  400,  381,  133,  130,  301,
 /*  1820 */   171,  310,  153,  176,  156,  254,  258,  264,  211,  117,
 /*  1830 */   265,  261,  163,  351,  115,  384,  121,  122,  123,  256,
 /*  1840 */   144,  131,  150,  722,  722,  722,  295,  722,  722,  722,
 /*  1850 */   722,  722,  128,  722,  722,  136,  132,  301,  171,  310,
 /*  1860 */   153,  177,  722,  722,  722,  722,  722,  722,  135,  722,
 /*  1870 */   385,  722,  722,  295,  125,  124,  129,  722,  722,  127,
 /*  1880 */   400,  381,  133,  130,  301,  171,  310,  153,  176,  156,
 /*  1890 */   254,  258,  264,  211,  117,  265,  261,  163,  351,  114,
 /*  1900 */   384,  121,  122,  123,  209,  144,  131,  150,  722,  722,
 /*  1910 */   722,  295,  722,  722,  722,  722,  722,  128,  722,  722,
 /*  1920 */   136,  132,  301,  171,  310,  153,  178,  722,  722,  722,
 /*  1930 */   722,  722,  722,  135,  722,  385,  722,  722,  295,  125,
 /*  1940 */   124,  129,  722,  722,  127,  208,  381,  133,  130,  301,
 /*  1950 */   171,  310,  153,  176,  156,  254,  258,  264,  211,  117,
 /*  1960 */   265,  261,  163,  351,  115,  384,  121,  122,  123,  722,
 /*  1970 */   144,  131,  150,  722,  722,  722,  295,  722,  722,  722,
 /*  1980 */   722,  722,  128,  722,  722,  136,  132,  301,  171,  310,
 /*  1990 */   153,  179,  722,  722,  722,  722,  722,  722,  135,  722,
 /*  2000 */   385,  722,  722,  295,  125,  124,  129,  722,  722,  127,
 /*  2010 */   246,  381,  133,  130,  301,  171,  310,  153,  176,  156,
 /*  2020 */   254,  258,  264,  211,  117,  265,  261,  163,  351,  115,
 /*  2030 */   384,  121,  122,  123,  722,  144,  131,  150,  722,  722,
 /*  2040 */   722,  295,  722,  722,  722,  722,  722,  128,  722,  722,
 /*  2050 */   136,  132,  301,  171,  310,  151,  722,  722,  722,  722,
 /*  2060 */   722,  722,  722,  135,  722,  385,  722,  722,  295,  125,
 /*  2070 */   124,  129,  722,  722,  127,  232,  381,  133,  130,  301,
 /*  2080 */   171,  310,  153,  176,  156,  254,  258,  264,  211,  117,
 /*  2090 */   265,  261,  163,  351,  115,  384,  121,  122,  123,  722,
 /*  2100 */   144,  131,  150,  722,  722,  722,  295,  722,  722,  722,
 /*  2110 */   722,  722,  128,  722,  722,  136,  132,  301,  171,  310,
 /*  2120 */   154,  722,  722,  722,  722,  722,  722,  722,  135,  722,
 /*  2130 */   385,  722,  722,  295,  125,  124,  129,  722,  722,  127,
 /*  2140 */   387,  381,  133,  130,  301,  171,  310,  153,  176,  156,
 /*  2150 */   254,  258,  264,  211,  117,  265,  261,  163,  351,  115,
 /*  2160 */   384,  121,  122,  123,  722,  144,  131,  150,  722,  722,
 /*  2170 */   722,  295,  722,  722,  722,  722,  722,  128,  722,  722,
 /*  2180 */   136,  132,  301,  171,  314,  722,  722,  722,  722,  722,
 /*  2190 */   722,  722,  722,  135,  722,  385,  722,  722,  295,  125,
 /*  2200 */   124,  129,  722,  722,  127,  386,  381,  133,  130,  301,
 /*  2210 */   171,  310,  153,  176,  156,  254,  258,  264,  211,  117,
 /*  2220 */   265,  261,  163,  351,  115,  384,  121,  122,  123,  722,
 /*  2230 */   144,  131,  150,  722,  722,  722,  295,  722,  722,  722,
 /*  2240 */   722,  722,  128,  722,  722,  136,  132,  301,  171,  306,
 /*  2250 */   722,  722,  722,  722,  722,  722,  722,  722,  135,  722,
 /*  2260 */   385,  722,  722,  295,  125,  124,  129,  722,  722,  127,
 /*  2270 */   206,  381,  133,  130,  301,  171,  310,  153,  176,  156,
 /*  2280 */   254,  258,  264,  211,  117,  265,  261,  163,  351,  115,
 /*  2290 */   384,  121,  122,  123,  722,  144,  131,  150,  722,  722,
 /*  2300 */   722,  295,  722,  722,  722,  722,  722,  128,  722,  722,
 /*  2310 */   136,  132,  301,  171,  309,  722,  722,  722,  722,  722,
 /*  2320 */   722,  722,  722,  135,  722,  403,  722,  722,  295,  125,
 /*  2330 */   124,  129,  722,  722,  127,  722,  381,  133,  130,  301,
 /*  2340 */   171,  310,  153,  176,  156,  254,  258,  264,  211,  117,
 /*  2350 */   265,  261,  163,  351,  262,  384,  121,  122,  123,  722,
 /*  2360 */   144,  131,  150,  722,  722,  722,  295,  722,  722,  722,
 /*  2370 */   722,  722,  128,  722,  722,  136,  132,  301,  171,  305,
 /*  2380 */   722,  722,  722,  722,  722,  722,  722,  722,  135,  722,
 /*  2390 */   195,  722,  722,  295,  125,  124,  129,  722,  722,  127,
 /*  2400 */   722,  381,  133,  130,  301,  171,  310,  153,  176,  156,
 /*  2410 */   254,  258,  264,  211,  117,  265,  261,  163,  351,  262,
 /*  2420 */   384,  121,  122,  123,  722,  144,  131,  150,  722,  722,
 /*  2430 */   722,  295,  722,  722,  722,  722,  722,  128,  722,  722,
 /*  2440 */   136,  132,  301,  171,  307,  722,  722,  722,  722,  722,
 /*  2450 */   722,  722,  722,  135,  722,  405,  722,  722,  295,  125,
 /*  2460 */   124,  129,  722,  722,  127,  722,  381,  133,  130,  301,
 /*  2470 */   171,  310,  153,  176,  156,  254,  258,  264,  211,  117,
 /*  2480 */   265,  261,  163,  351,  262,  384,  121,  122,  123,  722,
 /*  2490 */   144,  131,  150,  722,  722,  722,  295,  722,  722,  722,
 /*  2500 */   722,  722,  128,  722,  722,  136,  132,  301,  171,  304,
 /*  2510 */   722,  722,  722,  722,  722,  722,  722,  722,  135,  722,
 /*  2520 */   227,  722,  722,  295,  125,  124,  129,  722,  722,  127,
 /*  2530 */   722,  381,  133,  130,  301,  171,  310,  153,  176,  156,
 /*  2540 */   254,  258,  264,  211,  117,  265,  261,  163,  351,  262,
 /*  2550 */   384,  121,  122,  123,  722,  144,  131,  150,  722,  722,
 /*  2560 */   722,  295,  722,  722,  722,  722,  722,  128,  722,  722,
 /*  2570 */   136,  132,  301,  171,  313,  722,  722,  722,  722,  722,
 /*  2580 */   722,  722,  722,  135,  722,  450,  722,  722,  295,  125,
 /*  2590 */   124,  129,  722,  722,  127,  722,  381,  133,  130,  301,
 /*  2600 */   171,  310,  153,  176,  156,  254,  258,  264,  211,  117,
 /*  2610 */   265,  261,  163,  351,  262,  384,  121,  122,  123,  722,
 /*  2620 */   144,  131,  150,  722,  722,  722,  295,  722,  722,  722,
 /*  2630 */   722,  722,  128,  722,  722,  136,  132,  301,  171,  312,
 /*  2640 */   722,  722,  722,  722,  722,  722,  722,  722,  135,  722,
 /*  2650 */   342,  722,  722,  295,  125,  124,  129,  722,  722,  127,
 /*  2660 */   722,  381,  133,  130,  301,  171,  310,  153,  176,  156,
 /*  2670 */   254,  258,  264,  211,  117,  265,  261,  163,  351,  262,
 /*  2680 */   384,  121,  122,  123,  722,  144,  131,  150,  722,  722,
 /*  2690 */   722,  295,  180,  181,  722,  722,  722,  128,  722,  722,
 /*  2700 */   136,  132,  301,  171,  308,  722,  722,  722,  722,  722,
 /*  2710 */   722,  722,  722,  135,  722,  722,  722,  722,  295,  125,
 /*  2720 */   124,  129,  722,  722,  127,  722,  455,  133,  130,  301,
 /*  2730 */   171,  310,  153,  176,  156,  254,  258,  264,  211,  117,
 /*  2740 */   265,  261,  163,  351,  722,  270,  121,  122,  123,  722,
 /*  2750 */   144,  131,  150,  722,  722,  722,  295,  722,  722,  722,
 /*  2760 */   722,  722,  128,  722,  722,  136,  132,  301,  171,  311,
 /*  2770 */   722,  722,  722,  722,  722,  722,  722,  722,  135,  722,
 /*  2780 */   231,  722,  722,  295,  125,  124,  129,  722,  722,  127,
 /*  2790 */   722,  381,  133,  130,  301,  171,  310,  153,  176,  156,
 /*  2800 */   254,  258,  264,  211,  117,  265,  261,  163,  351,  262,
 /*  2810 */   384,  121,  122,  123,  722,  144,  131,  150,  722,  722,
 /*  2820 */   722,  187,  722,  722,  722,  722,  722,  128,  722,  722,
 /*  2830 */   136,  132,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  2840 */   722,  722,  722,  135,  722,  196,  722,  722,  295,  125,
 /*  2850 */   124,  129,  722,  722,  127,  722,  381,  133,  130,  301,
 /*  2860 */   171,  310,  153,  176,  156,  254,  258,  264,  211,  117,
 /*  2870 */   265,  261,  163,  351,  262,  384,  125,  124,  129,  722,
 /*  2880 */   144,  131,  150,  722,  722,  722,  192,  722,  722,  217,
 /*  2890 */   212,  722,  128,  722,  722,  136,  132,  722,  722,  722,
 /*  2900 */   722,  722,  722,   63,  722,  722,  366,   40,  131,  722,
 /*  2910 */   722,  722,  722,  295,  722,  722,  722,  722,  722,  128,
 /*  2920 */   722,  214,  136,  132,  301,  171,  310,  153,  176,  156,
 /*  2930 */   254,  258,  264,  211,  117,  265,  261,  163,  351,  722,
 /*  2940 */   125,  124,  129,  722,  144,  722,  150,  367,  368,  369,
 /*  2950 */   370,  371,  372,  373,  374,  375,  376,  377,  378,  722,
 /*  2960 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  2970 */    64,  722,  131,  722,  121,  122,  123,  295,  144,  722,
 /*  2980 */   150,  722,  722,  128,  722,  381,  136,  132,  301,  171,
 /*  2990 */   310,  153,  176,  156,  254,  258,  264,  211,  117,  265,
 /*  3000 */   261,  163,  351,  164,  722,  722,  135,  722,  121,  122,
 /*  3010 */   123,  295,  144,  722,  150,  722,  722,  127,  722,  379,
 /*  3020 */   133,  130,  301,  171,  310,  153,  176,  156,  254,  258,
 /*  3030 */   264,  211,  117,  265,  261,  163,  351,  722,  380,  722,
 /*  3040 */   135,  722,  722,  722,  722,  295,  722,  722,  722,  722,
 /*  3050 */   722,  127,  722,  456,  133,  130,  301,  171,  310,  153,
 /*  3060 */   176,  156,  254,  258,  264,  211,  117,  265,  261,  163,
 /*  3070 */   351,  722,  457,  121,  122,  123,  722,  144,  722,  150,
 /*  3080 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  3090 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  3100 */   722,  722,  722,  722,  722,  135,  722,  125,  124,  129,
 /*  3110 */   295,  144,  722,  150,  722,  722,  127,  722,  382,  133,
 /*  3120 */   130,  301,  171,  310,  153,  176,  156,  254,  258,  264,
 /*  3130 */   211,  117,  265,  261,  163,  351,  722,  383,  722,  131,
 /*  3140 */   722,  125,  124,  129,  295,  144,  722,  150,  722,  722,
 /*  3150 */   128,  722,  271,  136,  132,  301,  171,  310,  153,  176,
 /*  3160 */   156,  254,  258,  264,  211,  117,  265,  261,  163,  351,
 /*  3170 */   722,  722,  722,  131,  722,  722,  722,  722,  295,  722,
 /*  3180 */   722,  722,  722,  722,  128,  722,  184,  136,  132,  301,
 /*  3190 */   171,  310,  153,  176,  156,  254,  258,  264,  211,  117,
 /*  3200 */   265,  261,  163,  351,  125,  124,  129,  722,  144,  722,
 /*  3210 */   150,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  3220 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  3230 */   722,  722,  722,  722,  722,  722,  131,  722,  125,  124,
 /*  3240 */   129,  295,  144,  722,  150,  722,  722,  128,  722,  382,
 /*  3250 */   136,  132,  301,  171,  310,  153,  176,  156,  254,  258,
 /*  3260 */   264,  211,  117,  265,  261,  163,  351,  722,  722,  722,
 /*  3270 */   131,  722,  125,  124,  129,  295,  144,  722,  150,  722,
 /*  3280 */   722,  128,  722,  215,  136,  132,  301,  171,  310,  153,
 /*  3290 */   176,  156,  254,  258,  264,  211,  117,  265,  261,  163,
 /*  3300 */   351,  722,  722,  722,  131,  722,  722,  722,  722,  295,
 /*  3310 */   722,  722,  722,  722,  722,  128,  722,  273,  136,  132,
 /*  3320 */   301,  171,  310,  153,  176,  156,  254,  258,  264,  211,
 /*  3330 */   117,  265,  261,  163,  351,  125,  124,  129,  722,  144,
 /*  3340 */   722,  150,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  3350 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  3360 */   722,  722,  722,  722,  722,  722,  722,  131,  722,  125,
 /*  3370 */   124,  129,  295,  144,  722,  150,  722,  722,  128,  722,
 /*  3380 */   235,  136,  132,  301,  171,  310,  153,  176,  156,  254,
 /*  3390 */   258,  264,  211,  117,  265,  261,  163,  351,  722,  722,
 /*  3400 */   722,  131,  722,  125,  124,  129,  295,  144,  722,  150,
 /*  3410 */   722,  722,  128,  722,  221,  136,  132,  301,  171,  310,
 /*  3420 */   153,  176,  156,  254,  258,  264,  211,  117,  265,  261,
 /*  3430 */   163,  351,  722,  722,  722,  131,  722,  722,  722,  722,
 /*  3440 */   295,  722,  722,  722,  722,  722,  128,  722,  239,  136,
 /*  3450 */   132,  301,  171,  310,  153,  176,  156,  254,  258,  264,
 /*  3460 */   211,  117,  265,  261,  163,  351,  125,  124,  129,  722,
 /*  3470 */   144,  722,  150,  722,  722,  722,  722,  722,  722,  722,
 /*  3480 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  3490 */   722,  722,  722,  722,  722,  722,  722,  722,  131,  722,
 /*  3500 */   125,  124,  129,  295,  144,  722,  150,  722,  722,  128,
 /*  3510 */   722,  269,  136,  132,  301,  171,  310,  153,  176,  156,
 /*  3520 */   254,  258,  264,  211,  117,  265,  261,  163,  351,  722,
 /*  3530 */   722,  722,  131,  722,  125,  124,  129,  295,  144,  722,
 /*  3540 */   150,  722,  722,  128,  722,  226,  136,  132,  301,  171,
 /*  3550 */   310,  153,  176,  156,  254,  258,  264,  211,  117,  265,
 /*  3560 */   261,  163,  351,  722,  722,  722,  131,  722,  722,  722,
 /*  3570 */   722,  295,  722,  722,  722,  722,  722,  128,  722,  325,
 /*  3580 */   136,  132,  301,  171,  310,  153,  176,  156,  254,  258,
 /*  3590 */   264,  211,  117,  265,  261,  163,  351,  125,  124,  129,
 /*  3600 */   722,  144,  722,  150,  722,  722,  722,  722,  722,  722,
 /*  3610 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  3620 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  131,
 /*  3630 */   722,  125,  124,  129,  295,  144,  722,  150,  722,  722,
 /*  3640 */   128,  722,  198,  136,  132,  301,  171,  310,  153,  176,
 /*  3650 */   156,  254,  258,  264,  211,  117,  265,  261,  163,  351,
 /*  3660 */   722,  722,  722,  131,  722,  125,  124,  129,  295,  144,
 /*  3670 */   722,  150,  722,  722,  128,  722,  267,  136,  132,  301,
 /*  3680 */   171,  310,  153,  176,  156,  254,  258,  264,  211,  117,
 /*  3690 */   265,  261,  163,  351,  722,  722,  722,  131,  722,  722,
 /*  3700 */   722,  722,  295,  722,  722,  722,  722,  722,  128,  722,
 /*  3710 */   188,  136,  132,  301,  171,  310,  153,  176,  156,  254,
 /*  3720 */   258,  264,  211,  117,  265,  261,  163,  351,  125,  124,
 /*  3730 */   129,  722,  144,  722,  150,  722,  722,  722,  722,  722,
 /*  3740 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  3750 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  3760 */   131,  722,  125,  124,  129,  295,  144,  722,  150,  722,
 /*  3770 */   722,  128,  722,  219,  136,  132,  301,  171,  310,  153,
 /*  3780 */   176,  156,  254,  258,  264,  211,  117,  265,  261,  163,
 /*  3790 */   351,  722,  722,  722,  131,  722,  125,  124,  129,  295,
 /*  3800 */   144,  722,  150,  722,  722,  128,  722,  355,  136,  132,
 /*  3810 */   301,  171,  310,  153,  176,  156,  254,  258,  264,  211,
 /*  3820 */   117,  265,  261,  163,  351,  722,  722,  722,  131,  722,
 /*  3830 */   722,  722,  722,  295,  722,  722,  722,  722,  722,  128,
 /*  3840 */   722,  225,  136,  132,  301,  171,  310,  153,  176,  156,
 /*  3850 */   254,  258,  264,  211,  117,  265,  261,  163,  351,  125,
 /*  3860 */   124,  129,  722,  144,  722,  150,  722,  722,  722,  722,
 /*  3870 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  3880 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  3890 */   722,  131,  722,  125,  124,  129,  295,  144,  722,  150,
 /*  3900 */   722,  722,  128,  722,  218,  136,  132,  301,  171,  310,
 /*  3910 */   153,  176,  156,  254,  258,  264,  211,  117,  265,  261,
 /*  3920 */   163,  351,  722,  722,  722,  131,  722,  125,  124,  129,
 /*  3930 */   295,  144,  722,  150,  722,  722,  128,  722,  268,  136,
 /*  3940 */   132,  301,  171,  310,  153,  176,  156,  254,  258,  264,
 /*  3950 */   211,  117,  265,  261,  163,  351,  722,  722,  722,  131,
 /*  3960 */   722,  722,  722,  722,  295,  722,  722,  722,  722,  722,
 /*  3970 */   128,  722,  186,  136,  132,  301,  171,  310,  153,  176,
 /*  3980 */   156,  254,  258,  264,  211,  117,  265,  261,  163,  351,
 /*  3990 */   125,  124,  129,  722,  144,  722,  150,  722,  722,  722,
 /*  4000 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  4010 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  4020 */   722,  722,  131,  722,  125,  124,  129,  295,  144,  722,
 /*  4030 */   150,  722,  722,  128,  722,  216,  136,  132,  301,  171,
 /*  4040 */   310,  153,  176,  156,  254,  258,  264,  211,  117,  265,
 /*  4050 */   261,  163,  351,  722,  722,  722,  131,  722,  125,  124,
 /*  4060 */   129,  295,  144,  722,  150,  722,  722,  128,  722,  194,
 /*  4070 */   136,  132,  301,  171,  310,  153,  176,  156,  254,  258,
 /*  4080 */   264,  211,  117,  265,  261,  163,  351,  722,  722,  722,
 /*  4090 */   131,  722,  722,  722,  722,  295,  722,  722,  722,  722,
 /*  4100 */   722,  128,  722,  213,  136,  132,  301,  171,  310,  153,
 /*  4110 */   176,  156,  254,  258,  264,  211,  117,  265,  261,  163,
 /*  4120 */   351,  125,  124,  129,  722,  144,  722,  150,  722,  722,
 /*  4130 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  4140 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  4150 */   722,  722,  722,  131,  722,  125,  124,  129,  295,  144,
 /*  4160 */   722,  150,  722,  722,  128,  722,  240,  136,  132,  301,
 /*  4170 */   171,  310,  153,  176,  156,  254,  258,  264,  211,  117,
 /*  4180 */   265,  261,  163,  351,  722,  722,  722,  131,  722,  125,
 /*  4190 */   124,  129,  295,  144,  722,  150,  722,  722,  128,  722,
 /*  4200 */   244,  136,  132,  301,  171,  310,  153,  176,  156,  254,
 /*  4210 */   258,  264,  211,  117,  265,  261,  163,  351,  722,  722,
 /*  4220 */   722,  131,  722,  722,  722,  722,  295,  722,  722,  722,
 /*  4230 */   722,  722,  128,  722,  220,  136,  132,  301,  171,  310,
 /*  4240 */   153,  176,  156,  254,  258,  264,  211,  117,  265,  261,
 /*  4250 */   163,  351,  125,  124,  129,  722,  144,  722,  150,  722,
 /*  4260 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  4270 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  4280 */   722,  722,  722,  722,  131,  722,  722,  722,  722,  295,
 /*  4290 */   722,  722,  722,  722,  722,  128,  722,  354,  136,  132,
 /*  4300 */   301,  171,  310,  153,  176,  156,  254,  258,  264,  211,
 /*  4310 */   117,  265,  261,  163,  351,  205,   24,  275,  203,  722,
 /*  4320 */   722,   39,  103,  722,  113,  722,  722,   33,  722,  110,
 /*  4330 */   296,  297,  298,  299,  300,   98,   97,   92,  100,   99,
 /*  4340 */    91,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  4350 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  4360 */   722,  722,  722,  722,  141,  364,  722,  722,  125,  124,
 /*  4370 */   129,  205,   24,  275,  203,  722,  722,   39,  103,  424,
 /*  4380 */   722,  722,  722,   33,  722,  110,  296,  297,  298,  299,
 /*  4390 */   300,   98,   97,   92,  100,   99,   91,  722,  722,  722,
 /*  4400 */   131,  722,  722,  722,  722,  168,  722,  722,  722,  722,
 /*  4410 */   722,  128,  722,  722,  136,  132,  722,  722,  722,  722,
 /*  4420 */   141,  364,  125,  124,  129,  722,  722,  205,   24,  275,
 /*  4430 */   203,  281,  722,   39,  103,  722,  722,  722,  722,   33,
 /*  4440 */   722,  110,  296,  297,  298,  299,  300,   98,   97,   92,
 /*  4450 */   100,   99,   91,  722,  131,  722,  722,  722,  722,  224,
 /*  4460 */   722,  722,  722,  722,  722,  128,  722,  722,  136,  132,
 /*  4470 */   722,  722,  722,  722,  722,  722,  141,  364,  125,  124,
 /*  4480 */   129,  722,  722,  205,   24,  275,  203,  722,  722,   39,
 /*  4490 */   103,  722,  111,  722,  722,   33,  722,  110,  296,  297,
 /*  4500 */   298,  299,  300,   98,   97,   92,  100,   99,   91,  722,
 /*  4510 */   131,  722,  722,  722,  722,  190,  722,  722,  722,  722,
 /*  4520 */   722,  128,  722,  722,  136,  132,  722,  722,  722,  722,
 /*  4530 */   722,  722,  141,  364,  722,  722,  722,  722,  722,  205,
 /*  4540 */    24,  275,  203,  471,  722,   39,  103,  722,  722,  722,
 /*  4550 */   722,   33,  722,  110,  296,  297,  298,  299,  300,   98,
 /*  4560 */    97,   92,  100,   99,   91,  722,  722,  722,  722,  722,
 /*  4570 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  4580 */   722,  722,  722,  722,  722,  722,  722,  722,  141,  364,
 /*  4590 */   722,  722,  722,  722,  722,  205,   24,  275,  203,  722,
 /*  4600 */   722,   39,  103,  722,  722,  722,  722,   33,  453,  110,
 /*  4610 */   296,  297,  298,  299,  300,   98,   97,   92,  100,   99,
 /*  4620 */    91,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  4630 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  4640 */   722,  722,  722,  722,  141,  364,  722,  722,  722,  722,
 /*  4650 */   722,  205,   24,  275,  203,  722,  722,   39,  103,  422,
 /*  4660 */   722,  722,  722,   33,  722,  110,  296,  297,  298,  299,
 /*  4670 */   300,   98,   97,   92,  100,   99,   91,  722,  722,  722,
 /*  4680 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  4690 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  4700 */   141,  364,  722,  722,  722,  722,  722,  205,   24,  275,
 /*  4710 */   203,  722,  722,   39,  103,  722,  722,  722,  722,   33,
 /*  4720 */   722,  110,  296,  297,  298,  299,  300,   98,   97,   92,
 /*  4730 */   100,   99,   91,  722,  722,  125,  124,  129,  722,  722,
 /*  4740 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  4750 */   722,  722,  722,  722,  722,  722,  141,  364,  722,  722,
 /*  4760 */   722,  722,  722,  722,  722,  722,  722,  131,  722,  722,
 /*  4770 */   722,  722,  295,  722,  722,  722,  722,  722,  128,  722,
 /*  4780 */   722,  136,  132,  301,  171,  310,  153,  176,  156,  254,
 /*  4790 */   258,  264,  211,  117,  265,  250,  205,   24,  275,  203,
 /*  4800 */   722,  722,   39,  103,  722,  722,  722,  722,   33,  237,
 /*  4810 */   110,  296,  297,  298,  299,  300,   98,   97,   92,  100,
 /*  4820 */    99,   91,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  4830 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  4840 */   722,  722,  722,  722,  722,  141,  722,  722,  722,  722,
 /*  4850 */   722,  722,  205,   24,  275,  203,  722,  722,   39,  104,
 /*  4860 */   722,  138,  722,  722,   33,  722,  110,  296,  297,  298,
 /*  4870 */   299,  300,   98,   97,   92,  100,   99,   91,  722,  722,
 /*  4880 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  4890 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  4900 */   722,  141,  722,  722,  722,  722,  722,  722,  205,   24,
 /*  4910 */   275,  203,  722,  722,   39,  103,  722,  722,  722,  722,
 /*  4920 */    33,  183,  110,  296,  297,  298,  299,  300,   98,   97,
 /*  4930 */    92,  100,   99,   91,  722,  722,  722,  722,  722,  722,
 /*  4940 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  4950 */   722,  722,  722,  722,  722,  722,  722,  141,  722,  722,
 /*  4960 */   722,  722,  722,  722,  205,   24,  275,  203,  722,  722,
 /*  4970 */    39,  103,  722,  722,  722,  722,   33,  222,  110,  296,
 /*  4980 */   297,  298,  299,  300,   98,   97,   92,  100,   99,   91,
 /*  4990 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  5000 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  5010 */   722,  722,  722,  141,  722,  722,  722,  722,  722,  722,
 /*  5020 */   205,   24,  275,  203,  722,  722,   39,  103,  722,  722,
 /*  5030 */   722,  722,   33,  185,  110,  296,  297,  298,  299,  300,
 /*  5040 */    98,   97,   92,  100,   99,   91,  722,  722,  722,  722,
 /*  5050 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  5060 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  141,
 /*  5070 */   722,  722,  722,  722,  722,  722,  205,   24,  275,  203,
 /*  5080 */   722,  722,   39,  103,  722,  722,  722,  722,   33,  228,
 /*  5090 */   110,  296,  297,  298,  299,  300,   98,   97,   92,  100,
 /*  5100 */    99,   91,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  5110 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  5120 */   722,  722,  722,  722,  722,  141,  722,  722,  722,  722,
 /*  5130 */   722,  722,  205,   24,  275,  203,  722,  722,   39,  103,
 /*  5140 */   722,  722,  722,  722,   33,  191,  110,  296,  297,  298,
 /*  5150 */   299,  300,   98,   97,   92,  100,   99,   91,  722,  722,
 /*  5160 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  5170 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  5180 */   722,  141,  722,  722,  722,  722,  722,  722,  205,   24,
 /*  5190 */   275,  203,  722,  722,   39,  103,  722,  722,  722,  722,
 /*  5200 */    33,  193,  110,  296,  297,  298,  299,  300,   98,   97,
 /*  5210 */    92,  100,   99,   91,  722,  722,  722,  722,  722,  722,
 /*  5220 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  5230 */   722,  722,  722,  722,  722,  722,  722,  141,  722,  722,
 /*  5240 */   722,  722,  722,  722,  205,   24,  275,  203,  722,  352,
 /*  5250 */    39,  103,  722,  722,  722,  722,   33,  722,  110,  296,
 /*  5260 */   297,  298,  299,  300,   98,   97,   92,  100,   99,   91,
 /*  5270 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  5280 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  5290 */   722,  722,  722,  141,  722,  722,  722,  722,  722,  722,
 /*  5300 */   205,   24,  275,  203,  722,  722,   39,  103,  722,  722,
 /*  5310 */   722,  722,   33,  722,  110,  296,  297,  298,  299,  300,
 /*  5320 */    98,   97,   92,  100,   99,   91,  722,  722,  125,  124,
 /*  5330 */   129,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  5340 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  141,
 /*  5350 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  5360 */   131,  722,  722,  722,  722,  295,  722,  722,  722,  722,
 /*  5370 */   722,  128,  722,  722,  136,  132,  301,  171,  310,  153,
 /*  5380 */   176,  156,  254,  258,  264,  211,  117,  259,  722,  722,
 /*  5390 */   125,  124,  129,  722,  722,  722,  722,  722,  722,  722,
 /*  5400 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  5410 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  5420 */   722,  722,  131,  722,  722,  722,  722,  295,  722,  722,
 /*  5430 */   722,  722,  722,  128,  722,  722,  136,  132,  301,  171,
 /*  5440 */   310,  153,  176,  156,  254,  258,  264,  211,  118,  125,
 /*  5450 */   124,  129,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  5460 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  5470 */   722,  722,  722,  722,  722,  125,  124,  129,  722,  722,
 /*  5480 */   722,  131,  722,  722,  722,  722,  295,  722,  722,  722,
 /*  5490 */   722,  722,  128,  722,  722,  136,  132,  301,  171,  310,
 /*  5500 */   153,  176,  156,  254,  258,  264,  253,  131,  722,  722,
 /*  5510 */   722,  722,  295,  722,  722,  722,  722,  722,  128,  722,
 /*  5520 */   722,  136,  132,  301,  171,  310,  153,  176,  156,  254,
 /*  5530 */   258,  241,  125,  124,  129,  722,  722,  722,  722,  722,
 /*  5540 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  5550 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  5560 */   722,  722,  722,  722,  131,  722,  722,  722,  722,  295,
 /*  5570 */   722,  722,  722,  722,  722,  128,  722,  722,  136,  132,
 /*  5580 */   301,  171,  310,  153,  176,  156,  254,  197,
};
static const YYCODETYPE yy_lookahead[] = {
 /*     0 */    83,   84,   85,   86,   87,   88,   89,    8,    4,    5,
 /*    10 */    11,  110,  111,   14,   15,   98,   40,  100,  101,  102,
 /*    20 */   103,  104,  105,  106,  107,  108,  109,    8,    8,  112,
 /*    30 */    11,   10,  115,   14,   15,  118,   56,  120,   18,  122,
 /*    40 */    10,  124,  125,  126,    4,    5,  129,  130,  131,  132,
 /*    50 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*    60 */   143,  144,  145,   12,  147,  148,  149,  150,   14,  152,
 /*    70 */   153,   17,  155,   83,   84,   85,   39,   87,    7,   89,
 /*    80 */     9,  110,  111,   12,   13,   35,   36,   37,   98,   18,
 /*    90 */   100,  101,  102,  103,  104,  105,  106,  107,  108,  109,
 /*   100 */     7,    8,  112,    6,    7,  115,    9,  113,  114,   12,
 /*   110 */   120,   10,    7,   12,    9,   18,  126,   12,   13,  129,
 /*   120 */   130,  131,  132,  133,  134,  135,  136,  137,  138,  139,
 /*   130 */   140,  141,  142,  143,  144,  145,   56,  147,  148,  149,
 /*   140 */   150,    8,  152,  153,   19,  155,   83,   84,   85,   10,
 /*   150 */    87,   18,   89,   56,   31,   32,   33,   34,    7,    6,
 /*   160 */     7,    8,   99,  100,  101,  102,  103,  104,  105,  106,
 /*   170 */   107,  108,  109,   20,  115,  112,    6,    7,  115,    9,
 /*   180 */    90,   91,   13,  120,   12,  126,   19,   13,   18,  126,
 /*   190 */    16,   17,  129,  130,  131,  132,  133,  134,  135,  136,
 /*   200 */   137,  138,  139,  140,  141,  142,  143,  144,  145,   12,
 /*   210 */   147,  148,  149,  150,   90,   91,  153,  154,  155,   83,
 /*   220 */    84,   85,    8,   87,    6,   89,   56,   14,   90,   91,
 /*   230 */    12,   10,   18,   16,   17,   99,  100,  101,  102,  103,
 /*   240 */   104,  105,  106,  107,  108,  109,   16,   17,  112,    6,
 /*   250 */     7,  115,    9,    7,   80,    9,  120,   54,   55,   12,
 /*   260 */    19,   18,  126,   55,   18,  129,  130,  131,  132,  133,
 /*   270 */   134,  135,  136,  137,  138,  139,  140,  141,  142,  143,
 /*   280 */   144,  145,    6,  147,  148,  149,  150,    8,   12,  153,
 /*   290 */   154,  155,   83,   84,   85,    8,   87,   18,   89,   56,
 /*   300 */    16,   17,   56,   56,   56,   18,   14,   98,   19,  100,
 /*   310 */   101,  102,  103,  104,  105,  106,  107,  108,  109,    6,
 /*   320 */     7,  112,    9,    7,  115,    6,    7,   56,    9,  120,
 /*   330 */    10,   18,   26,   27,   56,  126,   12,   18,  129,  130,
 /*   340 */   131,  132,  133,  134,  135,  136,  137,  138,  139,  140,
 /*   350 */   141,  142,  143,  144,  145,   19,  147,  148,  149,  150,
 /*   360 */    14,  152,  153,   14,  155,   83,   84,   85,    8,   87,
 /*   370 */     7,   89,    9,   16,   17,   28,   29,  114,   18,   17,
 /*   380 */    98,   18,  100,  101,  102,  103,  104,  105,  106,  107,
 /*   390 */   108,  109,   14,    7,  112,    9,    7,  115,    9,    7,
 /*   400 */     6,    9,  120,   10,   18,  119,   12,   18,  126,   41,
 /*   410 */    18,  129,  130,  131,  132,  133,  134,  135,  136,  137,
 /*   420 */   138,  139,  140,  141,  142,  143,  144,  145,  114,  147,
 /*   430 */   148,  149,  150,    8,  152,  153,  114,  155,   83,   84,
 /*   440 */    85,   11,   87,   18,   89,  114,   13,  114,   10,  119,
 /*   450 */    19,   99,   17,   12,   99,  100,  101,  102,  103,  104,
 /*   460 */   105,  106,  107,  108,  109,   10,    7,  112,    9,    7,
 /*   470 */   115,    9,    7,   13,    9,  120,    7,   18,   10,   56,
 /*   480 */    18,  126,  116,   18,  129,  130,  131,  132,  133,  134,
 /*   490 */   135,  136,  137,  138,  139,  140,  141,  142,  143,  144,
 /*   500 */   145,   19,  147,  148,  149,  150,  116,   90,  153,  154,
 /*   510 */   155,   83,   84,   85,    7,   87,    7,   89,    9,    8,
 /*   520 */    12,   19,   90,   56,   14,  116,   98,   18,  100,  101,
 /*   530 */   102,  103,  104,  105,  106,  107,  108,  109,   90,    7,
 /*   540 */   112,    9,   14,  115,    8,  116,   56,   14,  120,   10,
 /*   550 */    18,   14,  116,  116,  126,  116,   14,  129,  130,  131,
 /*   560 */   132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
 /*   570 */   142,  143,  144,  145,   19,  147,  148,  149,  150,   13,
 /*   580 */   152,  153,  116,  155,   83,   84,   85,   56,   87,  116,
 /*   590 */    89,   14,   19,   13,  116,  116,   10,    7,   13,   98,
 /*   600 */     7,  100,  101,  102,  103,  104,  105,  106,  107,  108,
 /*   610 */   109,   14,   10,  112,   92,   69,  115,   14,   93,   93,
 /*   620 */    53,  120,   14,   10,    7,   38,   19,  126,   10,    7,
 /*   630 */   129,  130,  131,  132,  133,  134,  135,  136,  137,  138,
 /*   640 */   139,  140,  141,  142,  143,  144,  145,   19,  147,  148,
 /*   650 */   149,  150,   17,  152,  153,   19,  155,   83,   84,   85,
 /*   660 */    10,   87,   52,   89,   19,   19,   17,    7,   13,  156,
 /*   670 */   156,  156,  156,   99,  100,  101,  102,  103,  104,  105,
 /*   680 */   106,  107,  108,  109,  156,  156,  112,  156,  156,  115,
 /*   690 */   156,  156,  156,  156,  120,  156,  156,  156,  156,  156,
 /*   700 */   126,  156,  156,  129,  130,  131,  132,  133,  134,  135,
 /*   710 */   136,  137,  138,  139,  140,  141,  142,  143,  144,  145,
 /*   720 */   156,  147,  148,  149,  150,  156,  156,  153,  154,  155,
 /*   730 */    83,   84,   85,  156,   87,  156,   89,  156,  156,  156,
 /*   740 */   156,  156,  156,  156,  156,  156,   99,  100,  101,  102,
 /*   750 */   103,  104,  105,  106,  107,  108,  109,  156,  156,  112,
 /*   760 */   156,  156,  115,  156,  156,  156,  156,  120,  156,  156,
 /*   770 */   156,  156,  156,  126,  156,  156,  129,  130,  131,  132,
 /*   780 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*   790 */   143,  144,  145,  156,  147,  148,  149,  150,  156,  156,
 /*   800 */   153,  154,  155,   83,   84,   85,  156,   87,  156,   89,
 /*   810 */   156,  156,  156,  156,  156,  156,  156,  156,  156,   99,
 /*   820 */   100,  101,  102,  103,  104,  105,  106,  107,  108,  109,
 /*   830 */   156,  156,  112,  156,  156,  115,  156,  156,  156,  156,
 /*   840 */   120,  156,  156,  156,  156,  156,  126,  156,  156,  129,
 /*   850 */   130,  131,  132,  133,  134,  135,  136,  137,  138,  139,
 /*   860 */   140,  141,  142,  143,  144,  145,  156,  147,  148,  149,
 /*   870 */   150,  156,  156,  153,  154,  155,   83,   84,   85,  156,
 /*   880 */    87,  156,   89,  156,  156,  156,  156,  156,  156,  156,
 /*   890 */   156,  156,   99,  100,  101,  102,  103,  104,  105,  106,
 /*   900 */   107,  108,  109,  156,  156,  112,  156,  156,  115,  156,
 /*   910 */   156,  156,  156,  120,  156,  156,  156,  156,  156,  126,
 /*   920 */   156,  156,  129,  130,  131,  132,  133,  134,  135,  136,
 /*   930 */   137,  138,  139,  140,  141,  142,  143,  144,  145,  156,
 /*   940 */   147,  148,  149,  150,   16,   17,  153,  154,  155,    0,
 /*   950 */     1,  156,    3,  156,  156,    6,    7,    8,    9,  156,
 /*   960 */   156,   12,   13,   14,   15,  156,  156,   18,  156,   20,
 /*   970 */    21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
 /*   980 */    31,  156,  156,  156,  156,   57,   58,   59,   60,   61,
 /*   990 */    62,   63,   64,   65,   66,   67,   68,  156,  156,  156,
 /*  1000 */   156,  156,  156,  156,   55,   56,   42,   43,   44,   45,
 /*  1010 */    46,   47,   48,   49,   50,   51,  156,  156,   69,   70,
 /*  1020 */    71,   72,   73,   74,   75,   76,   77,   78,   79,    1,
 /*  1030 */    81,    3,  156,  156,    6,    7,    8,    9,  156,   11,
 /*  1040 */    12,   13,   14,   15,  156,  156,   18,  156,   20,   21,
 /*  1050 */    22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
 /*  1060 */     6,    7,    8,  156,  156,  156,   12,  156,  156,  156,
 /*  1070 */   156,  156,  156,  156,   20,  156,  156,  156,  156,  156,
 /*  1080 */   156,  156,  156,   55,   56,  156,  156,  156,  156,  156,
 /*  1090 */   156,  156,  156,  156,  156,  156,  156,   69,   70,   71,
 /*  1100 */    72,   73,   74,   75,   76,   77,   78,   79,    1,   81,
 /*  1110 */     3,  156,  156,    6,    7,    8,    9,   10,  156,   12,
 /*  1120 */    13,   14,   15,  156,  156,   18,  156,   20,   21,   22,
 /*  1130 */    23,   24,   25,   26,   27,   28,   29,   30,   31,  156,
 /*  1140 */   156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  1150 */   156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  1160 */   156,  156,   55,   56,  156,  156,  156,  156,  156,  156,
 /*  1170 */   156,  156,  156,  156,  156,  156,   69,   70,   71,   72,
 /*  1180 */    73,   74,   75,   76,   77,   78,   79,    1,   81,    3,
 /*  1190 */   156,  156,    6,    7,    8,    9,  156,   11,   12,   13,
 /*  1200 */    14,   15,  156,  156,   18,  156,   20,   21,   22,   23,
 /*  1210 */    24,   25,   26,   27,   28,   29,   30,   31,  156,  156,
 /*  1220 */   156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  1230 */   156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  1240 */   156,   55,   56,  156,  156,  156,  156,  156,  156,  156,
 /*  1250 */   156,  156,  156,  156,  156,   69,   70,   71,   72,   73,
 /*  1260 */    74,   75,   76,   77,   78,   79,    1,   81,    3,  156,
 /*  1270 */   156,    6,    7,    8,    9,  156,   11,   12,   13,   14,
 /*  1280 */    15,  156,  156,   18,  156,   20,   21,   22,   23,   24,
 /*  1290 */    25,   26,   27,   28,   29,   30,   31,  156,  156,  156,
 /*  1300 */   156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  1310 */   156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  1320 */    55,   56,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  1330 */   156,  156,  156,  156,   69,   70,   71,   72,   73,   74,
 /*  1340 */    75,   76,   77,   78,   79,    1,   81,    3,  156,  156,
 /*  1350 */     6,    7,    8,    9,  156,   11,   12,   13,   14,   15,
 /*  1360 */   156,  156,   18,  156,   20,   21,   22,   23,   24,   25,
 /*  1370 */    26,   27,   28,   29,   30,   31,  156,  156,  156,  156,
 /*  1380 */   156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  1390 */   156,  156,  156,  156,  156,  156,  156,  156,  156,   55,
 /*  1400 */    56,  156,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  1410 */   156,  156,  156,   69,   70,   71,   72,   73,   74,   75,
 /*  1420 */    76,   77,   78,   79,    1,   81,    3,  156,  156,    6,
 /*  1430 */     7,    8,    9,  156,  156,   12,   13,   83,   84,   85,
 /*  1440 */   156,   18,  156,   20,   21,   22,   23,   24,   25,   26,
 /*  1450 */    27,   28,   29,   30,   31,  156,  156,  156,  156,  156,
 /*  1460 */   156,  156,  156,  156,  156,  156,  156,  156,  156,  115,
 /*  1470 */   156,  156,  156,  156,  120,  156,  156,  156,   55,   56,
 /*  1480 */   126,  156,  156,  129,  130,  131,  132,  133,  134,  135,
 /*  1490 */   136,  137,   69,   70,   71,   72,   73,   74,   75,   76,
 /*  1500 */    77,   78,   79,    1,   81,    3,  156,  156,    6,    7,
 /*  1510 */     8,    9,  156,   83,   12,   13,   86,  156,   88,  156,
 /*  1520 */    18,  156,   20,   21,   22,   23,   24,   25,   26,   27,
 /*  1530 */    28,   29,   30,   31,  156,  156,  156,  156,  156,  156,
 /*  1540 */   156,  156,  156,  156,  156,  115,  156,  156,  118,  156,
 /*  1550 */   156,  121,  122,  123,  124,  125,  156,   55,   56,  156,
 /*  1560 */   156,  156,   83,   84,   85,  156,   87,  156,   89,  156,
 /*  1570 */   156,   69,   70,   71,   72,   73,   74,   75,   76,   77,
 /*  1580 */    78,   79,  156,   81,  156,  156,  156,  156,  156,  156,
 /*  1590 */   156,  156,  156,  156,  115,  156,  117,  156,  156,  120,
 /*  1600 */   156,  156,  156,  156,  156,  126,  127,  128,  129,  130,
 /*  1610 */   131,  132,  133,  134,  135,  136,  137,  138,  139,  140,
 /*  1620 */   141,  142,  143,  144,  145,  146,  147,  156,  156,  156,
 /*  1630 */   151,  156,  156,  156,  156,  156,  156,    6,    7,    8,
 /*  1640 */   156,   83,   84,   85,  156,   87,  156,   89,  156,  156,
 /*  1650 */   156,   20,   21,   22,   23,   24,   25,   26,   27,   28,
 /*  1660 */    29,   30,   31,  156,  156,  156,  156,  156,  156,  156,
 /*  1670 */   156,  156,  156,  115,  156,  117,   16,   17,  120,  156,
 /*  1680 */   156,  156,  156,  156,  126,  127,  128,  129,  130,  131,
 /*  1690 */   132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
 /*  1700 */   142,  143,  144,  145,  146,  147,   83,   84,   85,  151,
 /*  1710 */    87,  156,   89,  156,  156,  156,  156,   57,   58,   59,
 /*  1720 */    60,   61,   62,   63,   64,   65,   66,   67,   68,  156,
 /*  1730 */   156,  156,  156,  156,  156,  156,  156,  156,  115,  156,
 /*  1740 */   117,  156,  156,  120,   83,   84,   85,  156,  156,  126,
 /*  1750 */   127,  128,  129,  130,  131,  132,  133,  134,  135,  136,
 /*  1760 */   137,  138,  139,  140,  141,  142,  143,  144,  145,  146,
 /*  1770 */   147,   83,   84,   85,  151,   87,  115,   89,  156,  156,
 /*  1780 */   156,  120,  156,  156,  156,  156,  156,  126,  156,  156,
 /*  1790 */   129,  130,  131,  132,  133,  134,  135,  136,  156,  156,
 /*  1800 */   156,  156,  156,  115,  156,  117,  156,  156,  120,   83,
 /*  1810 */    84,   85,  156,  156,  126,  127,  128,  129,  130,  131,
 /*  1820 */   132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
 /*  1830 */   142,  143,  144,  145,  146,  147,   83,   84,   85,  151,
 /*  1840 */    87,  115,   89,  156,  156,  156,  120,  156,  156,  156,
 /*  1850 */   156,  156,  126,  156,  156,  129,  130,  131,  132,  133,
 /*  1860 */   134,  135,  156,  156,  156,  156,  156,  156,  115,  156,
 /*  1870 */   117,  156,  156,  120,   83,   84,   85,  156,  156,  126,
 /*  1880 */   127,  128,  129,  130,  131,  132,  133,  134,  135,  136,
 /*  1890 */   137,  138,  139,  140,  141,  142,  143,  144,  145,  146,
 /*  1900 */   147,   83,   84,   85,  151,   87,  115,   89,  156,  156,
 /*  1910 */   156,  120,  156,  156,  156,  156,  156,  126,  156,  156,
 /*  1920 */   129,  130,  131,  132,  133,  134,  135,  156,  156,  156,
 /*  1930 */   156,  156,  156,  115,  156,  117,  156,  156,  120,   83,
 /*  1940 */    84,   85,  156,  156,  126,  127,  128,  129,  130,  131,
 /*  1950 */   132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
 /*  1960 */   142,  143,  144,  145,  146,  147,   83,   84,   85,  156,
 /*  1970 */    87,  115,   89,  156,  156,  156,  120,  156,  156,  156,
 /*  1980 */   156,  156,  126,  156,  156,  129,  130,  131,  132,  133,
 /*  1990 */   134,  135,  156,  156,  156,  156,  156,  156,  115,  156,
 /*  2000 */   117,  156,  156,  120,   83,   84,   85,  156,  156,  126,
 /*  2010 */   127,  128,  129,  130,  131,  132,  133,  134,  135,  136,
 /*  2020 */   137,  138,  139,  140,  141,  142,  143,  144,  145,  146,
 /*  2030 */   147,   83,   84,   85,  156,   87,  115,   89,  156,  156,
 /*  2040 */   156,  120,  156,  156,  156,  156,  156,  126,  156,  156,
 /*  2050 */   129,  130,  131,  132,  133,  134,  156,  156,  156,  156,
 /*  2060 */   156,  156,  156,  115,  156,  117,  156,  156,  120,   83,
 /*  2070 */    84,   85,  156,  156,  126,  127,  128,  129,  130,  131,
 /*  2080 */   132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
 /*  2090 */   142,  143,  144,  145,  146,  147,   83,   84,   85,  156,
 /*  2100 */    87,  115,   89,  156,  156,  156,  120,  156,  156,  156,
 /*  2110 */   156,  156,  126,  156,  156,  129,  130,  131,  132,  133,
 /*  2120 */   134,  156,  156,  156,  156,  156,  156,  156,  115,  156,
 /*  2130 */   117,  156,  156,  120,   83,   84,   85,  156,  156,  126,
 /*  2140 */   127,  128,  129,  130,  131,  132,  133,  134,  135,  136,
 /*  2150 */   137,  138,  139,  140,  141,  142,  143,  144,  145,  146,
 /*  2160 */   147,   83,   84,   85,  156,   87,  115,   89,  156,  156,
 /*  2170 */   156,  120,  156,  156,  156,  156,  156,  126,  156,  156,
 /*  2180 */   129,  130,  131,  132,  133,  156,  156,  156,  156,  156,
 /*  2190 */   156,  156,  156,  115,  156,  117,  156,  156,  120,   83,
 /*  2200 */    84,   85,  156,  156,  126,  127,  128,  129,  130,  131,
 /*  2210 */   132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
 /*  2220 */   142,  143,  144,  145,  146,  147,   83,   84,   85,  156,
 /*  2230 */    87,  115,   89,  156,  156,  156,  120,  156,  156,  156,
 /*  2240 */   156,  156,  126,  156,  156,  129,  130,  131,  132,  133,
 /*  2250 */   156,  156,  156,  156,  156,  156,  156,  156,  115,  156,
 /*  2260 */   117,  156,  156,  120,   83,   84,   85,  156,  156,  126,
 /*  2270 */   127,  128,  129,  130,  131,  132,  133,  134,  135,  136,
 /*  2280 */   137,  138,  139,  140,  141,  142,  143,  144,  145,  146,
 /*  2290 */   147,   83,   84,   85,  156,   87,  115,   89,  156,  156,
 /*  2300 */   156,  120,  156,  156,  156,  156,  156,  126,  156,  156,
 /*  2310 */   129,  130,  131,  132,  133,  156,  156,  156,  156,  156,
 /*  2320 */   156,  156,  156,  115,  156,  117,  156,  156,  120,   83,
 /*  2330 */    84,   85,  156,  156,  126,  156,  128,  129,  130,  131,
 /*  2340 */   132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
 /*  2350 */   142,  143,  144,  145,  146,  147,   83,   84,   85,  156,
 /*  2360 */    87,  115,   89,  156,  156,  156,  120,  156,  156,  156,
 /*  2370 */   156,  156,  126,  156,  156,  129,  130,  131,  132,  133,
 /*  2380 */   156,  156,  156,  156,  156,  156,  156,  156,  115,  156,
 /*  2390 */   117,  156,  156,  120,   83,   84,   85,  156,  156,  126,
 /*  2400 */   156,  128,  129,  130,  131,  132,  133,  134,  135,  136,
 /*  2410 */   137,  138,  139,  140,  141,  142,  143,  144,  145,  146,
 /*  2420 */   147,   83,   84,   85,  156,   87,  115,   89,  156,  156,
 /*  2430 */   156,  120,  156,  156,  156,  156,  156,  126,  156,  156,
 /*  2440 */   129,  130,  131,  132,  133,  156,  156,  156,  156,  156,
 /*  2450 */   156,  156,  156,  115,  156,  117,  156,  156,  120,   83,
 /*  2460 */    84,   85,  156,  156,  126,  156,  128,  129,  130,  131,
 /*  2470 */   132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
 /*  2480 */   142,  143,  144,  145,  146,  147,   83,   84,   85,  156,
 /*  2490 */    87,  115,   89,  156,  156,  156,  120,  156,  156,  156,
 /*  2500 */   156,  156,  126,  156,  156,  129,  130,  131,  132,  133,
 /*  2510 */   156,  156,  156,  156,  156,  156,  156,  156,  115,  156,
 /*  2520 */   117,  156,  156,  120,   83,   84,   85,  156,  156,  126,
 /*  2530 */   156,  128,  129,  130,  131,  132,  133,  134,  135,  136,
 /*  2540 */   137,  138,  139,  140,  141,  142,  143,  144,  145,  146,
 /*  2550 */   147,   83,   84,   85,  156,   87,  115,   89,  156,  156,
 /*  2560 */   156,  120,  156,  156,  156,  156,  156,  126,  156,  156,
 /*  2570 */   129,  130,  131,  132,  133,  156,  156,  156,  156,  156,
 /*  2580 */   156,  156,  156,  115,  156,  117,  156,  156,  120,   83,
 /*  2590 */    84,   85,  156,  156,  126,  156,  128,  129,  130,  131,
 /*  2600 */   132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
 /*  2610 */   142,  143,  144,  145,  146,  147,   83,   84,   85,  156,
 /*  2620 */    87,  115,   89,  156,  156,  156,  120,  156,  156,  156,
 /*  2630 */   156,  156,  126,  156,  156,  129,  130,  131,  132,  133,
 /*  2640 */   156,  156,  156,  156,  156,  156,  156,  156,  115,  156,
 /*  2650 */   117,  156,  156,  120,   83,   84,   85,  156,  156,  126,
 /*  2660 */   156,  128,  129,  130,  131,  132,  133,  134,  135,  136,
 /*  2670 */   137,  138,  139,  140,  141,  142,  143,  144,  145,  146,
 /*  2680 */   147,   83,   84,   85,  156,   87,  115,   89,  156,  156,
 /*  2690 */   156,  120,   94,   95,  156,  156,  156,  126,  156,  156,
 /*  2700 */   129,  130,  131,  132,  133,  156,  156,  156,  156,  156,
 /*  2710 */   156,  156,  156,  115,  156,  156,  156,  156,  120,   83,
 /*  2720 */    84,   85,  156,  156,  126,  156,  128,  129,  130,  131,
 /*  2730 */   132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
 /*  2740 */   142,  143,  144,  145,  156,  147,   83,   84,   85,  156,
 /*  2750 */    87,  115,   89,  156,  156,  156,  120,  156,  156,  156,
 /*  2760 */   156,  156,  126,  156,  156,  129,  130,  131,  132,  133,
 /*  2770 */   156,  156,  156,  156,  156,  156,  156,  156,  115,  156,
 /*  2780 */   117,  156,  156,  120,   83,   84,   85,  156,  156,  126,
 /*  2790 */   156,  128,  129,  130,  131,  132,  133,  134,  135,  136,
 /*  2800 */   137,  138,  139,  140,  141,  142,  143,  144,  145,  146,
 /*  2810 */   147,   83,   84,   85,  156,   87,  115,   89,  156,  156,
 /*  2820 */   156,  120,  156,  156,  156,  156,  156,  126,  156,  156,
 /*  2830 */   129,  130,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  2840 */   156,  156,  156,  115,  156,  117,  156,  156,  120,   83,
 /*  2850 */    84,   85,  156,  156,  126,  156,  128,  129,  130,  131,
 /*  2860 */   132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
 /*  2870 */   142,  143,  144,  145,  146,  147,   83,   84,   85,  156,
 /*  2880 */    87,  115,   89,  156,  156,  156,  120,  156,  156,   96,
 /*  2890 */    97,  156,  126,  156,  156,  129,  130,  156,  156,  156,
 /*  2900 */   156,  156,  156,   13,  156,  156,   16,   17,  115,  156,
 /*  2910 */   156,  156,  156,  120,  156,  156,  156,  156,  156,  126,
 /*  2920 */   156,  128,  129,  130,  131,  132,  133,  134,  135,  136,
 /*  2930 */   137,  138,  139,  140,  141,  142,  143,  144,  145,  156,
 /*  2940 */    83,   84,   85,  156,   87,  156,   89,   57,   58,   59,
 /*  2950 */    60,   61,   62,   63,   64,   65,   66,   67,   68,  156,
 /*  2960 */   156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  2970 */    80,  156,  115,  156,   83,   84,   85,  120,   87,  156,
 /*  2980 */    89,  156,  156,  126,  156,  128,  129,  130,  131,  132,
 /*  2990 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*  3000 */   143,  144,  145,  146,  156,  156,  115,  156,   83,   84,
 /*  3010 */    85,  120,   87,  156,   89,  156,  156,  126,  156,  128,
 /*  3020 */   129,  130,  131,  132,  133,  134,  135,  136,  137,  138,
 /*  3030 */   139,  140,  141,  142,  143,  144,  145,  156,  147,  156,
 /*  3040 */   115,  156,  156,  156,  156,  120,  156,  156,  156,  156,
 /*  3050 */   156,  126,  156,  128,  129,  130,  131,  132,  133,  134,
 /*  3060 */   135,  136,  137,  138,  139,  140,  141,  142,  143,  144,
 /*  3070 */   145,  156,  147,   83,   84,   85,  156,   87,  156,   89,
 /*  3080 */   156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  3090 */   156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  3100 */   156,  156,  156,  156,  156,  115,  156,   83,   84,   85,
 /*  3110 */   120,   87,  156,   89,  156,  156,  126,  156,  128,  129,
 /*  3120 */   130,  131,  132,  133,  134,  135,  136,  137,  138,  139,
 /*  3130 */   140,  141,  142,  143,  144,  145,  156,  147,  156,  115,
 /*  3140 */   156,   83,   84,   85,  120,   87,  156,   89,  156,  156,
 /*  3150 */   126,  156,  128,  129,  130,  131,  132,  133,  134,  135,
 /*  3160 */   136,  137,  138,  139,  140,  141,  142,  143,  144,  145,
 /*  3170 */   156,  156,  156,  115,  156,  156,  156,  156,  120,  156,
 /*  3180 */   156,  156,  156,  156,  126,  156,  128,  129,  130,  131,
 /*  3190 */   132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
 /*  3200 */   142,  143,  144,  145,   83,   84,   85,  156,   87,  156,
 /*  3210 */    89,  156,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  3220 */   156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  3230 */   156,  156,  156,  156,  156,  156,  115,  156,   83,   84,
 /*  3240 */    85,  120,   87,  156,   89,  156,  156,  126,  156,  128,
 /*  3250 */   129,  130,  131,  132,  133,  134,  135,  136,  137,  138,
 /*  3260 */   139,  140,  141,  142,  143,  144,  145,  156,  156,  156,
 /*  3270 */   115,  156,   83,   84,   85,  120,   87,  156,   89,  156,
 /*  3280 */   156,  126,  156,  128,  129,  130,  131,  132,  133,  134,
 /*  3290 */   135,  136,  137,  138,  139,  140,  141,  142,  143,  144,
 /*  3300 */   145,  156,  156,  156,  115,  156,  156,  156,  156,  120,
 /*  3310 */   156,  156,  156,  156,  156,  126,  156,  128,  129,  130,
 /*  3320 */   131,  132,  133,  134,  135,  136,  137,  138,  139,  140,
 /*  3330 */   141,  142,  143,  144,  145,   83,   84,   85,  156,   87,
 /*  3340 */   156,   89,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  3350 */   156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  3360 */   156,  156,  156,  156,  156,  156,  156,  115,  156,   83,
 /*  3370 */    84,   85,  120,   87,  156,   89,  156,  156,  126,  156,
 /*  3380 */   128,  129,  130,  131,  132,  133,  134,  135,  136,  137,
 /*  3390 */   138,  139,  140,  141,  142,  143,  144,  145,  156,  156,
 /*  3400 */   156,  115,  156,   83,   84,   85,  120,   87,  156,   89,
 /*  3410 */   156,  156,  126,  156,  128,  129,  130,  131,  132,  133,
 /*  3420 */   134,  135,  136,  137,  138,  139,  140,  141,  142,  143,
 /*  3430 */   144,  145,  156,  156,  156,  115,  156,  156,  156,  156,
 /*  3440 */   120,  156,  156,  156,  156,  156,  126,  156,  128,  129,
 /*  3450 */   130,  131,  132,  133,  134,  135,  136,  137,  138,  139,
 /*  3460 */   140,  141,  142,  143,  144,  145,   83,   84,   85,  156,
 /*  3470 */    87,  156,   89,  156,  156,  156,  156,  156,  156,  156,
 /*  3480 */   156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  3490 */   156,  156,  156,  156,  156,  156,  156,  156,  115,  156,
 /*  3500 */    83,   84,   85,  120,   87,  156,   89,  156,  156,  126,
 /*  3510 */   156,  128,  129,  130,  131,  132,  133,  134,  135,  136,
 /*  3520 */   137,  138,  139,  140,  141,  142,  143,  144,  145,  156,
 /*  3530 */   156,  156,  115,  156,   83,   84,   85,  120,   87,  156,
 /*  3540 */    89,  156,  156,  126,  156,  128,  129,  130,  131,  132,
 /*  3550 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*  3560 */   143,  144,  145,  156,  156,  156,  115,  156,  156,  156,
 /*  3570 */   156,  120,  156,  156,  156,  156,  156,  126,  156,  128,
 /*  3580 */   129,  130,  131,  132,  133,  134,  135,  136,  137,  138,
 /*  3590 */   139,  140,  141,  142,  143,  144,  145,   83,   84,   85,
 /*  3600 */   156,   87,  156,   89,  156,  156,  156,  156,  156,  156,
 /*  3610 */   156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  3620 */   156,  156,  156,  156,  156,  156,  156,  156,  156,  115,
 /*  3630 */   156,   83,   84,   85,  120,   87,  156,   89,  156,  156,
 /*  3640 */   126,  156,  128,  129,  130,  131,  132,  133,  134,  135,
 /*  3650 */   136,  137,  138,  139,  140,  141,  142,  143,  144,  145,
 /*  3660 */   156,  156,  156,  115,  156,   83,   84,   85,  120,   87,
 /*  3670 */   156,   89,  156,  156,  126,  156,  128,  129,  130,  131,
 /*  3680 */   132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
 /*  3690 */   142,  143,  144,  145,  156,  156,  156,  115,  156,  156,
 /*  3700 */   156,  156,  120,  156,  156,  156,  156,  156,  126,  156,
 /*  3710 */   128,  129,  130,  131,  132,  133,  134,  135,  136,  137,
 /*  3720 */   138,  139,  140,  141,  142,  143,  144,  145,   83,   84,
 /*  3730 */    85,  156,   87,  156,   89,  156,  156,  156,  156,  156,
 /*  3740 */   156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  3750 */   156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  3760 */   115,  156,   83,   84,   85,  120,   87,  156,   89,  156,
 /*  3770 */   156,  126,  156,  128,  129,  130,  131,  132,  133,  134,
 /*  3780 */   135,  136,  137,  138,  139,  140,  141,  142,  143,  144,
 /*  3790 */   145,  156,  156,  156,  115,  156,   83,   84,   85,  120,
 /*  3800 */    87,  156,   89,  156,  156,  126,  156,  128,  129,  130,
 /*  3810 */   131,  132,  133,  134,  135,  136,  137,  138,  139,  140,
 /*  3820 */   141,  142,  143,  144,  145,  156,  156,  156,  115,  156,
 /*  3830 */   156,  156,  156,  120,  156,  156,  156,  156,  156,  126,
 /*  3840 */   156,  128,  129,  130,  131,  132,  133,  134,  135,  136,
 /*  3850 */   137,  138,  139,  140,  141,  142,  143,  144,  145,   83,
 /*  3860 */    84,   85,  156,   87,  156,   89,  156,  156,  156,  156,
 /*  3870 */   156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  3880 */   156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  3890 */   156,  115,  156,   83,   84,   85,  120,   87,  156,   89,
 /*  3900 */   156,  156,  126,  156,  128,  129,  130,  131,  132,  133,
 /*  3910 */   134,  135,  136,  137,  138,  139,  140,  141,  142,  143,
 /*  3920 */   144,  145,  156,  156,  156,  115,  156,   83,   84,   85,
 /*  3930 */   120,   87,  156,   89,  156,  156,  126,  156,  128,  129,
 /*  3940 */   130,  131,  132,  133,  134,  135,  136,  137,  138,  139,
 /*  3950 */   140,  141,  142,  143,  144,  145,  156,  156,  156,  115,
 /*  3960 */   156,  156,  156,  156,  120,  156,  156,  156,  156,  156,
 /*  3970 */   126,  156,  128,  129,  130,  131,  132,  133,  134,  135,
 /*  3980 */   136,  137,  138,  139,  140,  141,  142,  143,  144,  145,
 /*  3990 */    83,   84,   85,  156,   87,  156,   89,  156,  156,  156,
 /*  4000 */   156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  4010 */   156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  4020 */   156,  156,  115,  156,   83,   84,   85,  120,   87,  156,
 /*  4030 */    89,  156,  156,  126,  156,  128,  129,  130,  131,  132,
 /*  4040 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*  4050 */   143,  144,  145,  156,  156,  156,  115,  156,   83,   84,
 /*  4060 */    85,  120,   87,  156,   89,  156,  156,  126,  156,  128,
 /*  4070 */   129,  130,  131,  132,  133,  134,  135,  136,  137,  138,
 /*  4080 */   139,  140,  141,  142,  143,  144,  145,  156,  156,  156,
 /*  4090 */   115,  156,  156,  156,  156,  120,  156,  156,  156,  156,
 /*  4100 */   156,  126,  156,  128,  129,  130,  131,  132,  133,  134,
 /*  4110 */   135,  136,  137,  138,  139,  140,  141,  142,  143,  144,
 /*  4120 */   145,   83,   84,   85,  156,   87,  156,   89,  156,  156,
 /*  4130 */   156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  4140 */   156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  4150 */   156,  156,  156,  115,  156,   83,   84,   85,  120,   87,
 /*  4160 */   156,   89,  156,  156,  126,  156,  128,  129,  130,  131,
 /*  4170 */   132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
 /*  4180 */   142,  143,  144,  145,  156,  156,  156,  115,  156,   83,
 /*  4190 */    84,   85,  120,   87,  156,   89,  156,  156,  126,  156,
 /*  4200 */   128,  129,  130,  131,  132,  133,  134,  135,  136,  137,
 /*  4210 */   138,  139,  140,  141,  142,  143,  144,  145,  156,  156,
 /*  4220 */   156,  115,  156,  156,  156,  156,  120,  156,  156,  156,
 /*  4230 */   156,  156,  126,  156,  128,  129,  130,  131,  132,  133,
 /*  4240 */   134,  135,  136,  137,  138,  139,  140,  141,  142,  143,
 /*  4250 */   144,  145,   83,   84,   85,  156,   87,  156,   89,  156,
 /*  4260 */   156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  4270 */   156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  4280 */   156,  156,  156,  156,  115,  156,  156,  156,  156,  120,
 /*  4290 */   156,  156,  156,  156,  156,  126,  156,  128,  129,  130,
 /*  4300 */   131,  132,  133,  134,  135,  136,  137,  138,  139,  140,
 /*  4310 */   141,  142,  143,  144,  145,    6,    7,    8,    9,  156,
 /*  4320 */   156,   12,   13,  156,   15,  156,  156,   18,  156,   20,
 /*  4330 */    21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
 /*  4340 */    31,  156,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  4350 */   156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  4360 */   156,  156,  156,  156,   55,   56,  156,  156,   83,   84,
 /*  4370 */    85,    6,    7,    8,    9,  156,  156,   12,   13,   14,
 /*  4380 */   156,  156,  156,   18,  156,   20,   21,   22,   23,   24,
 /*  4390 */    25,   26,   27,   28,   29,   30,   31,  156,  156,  156,
 /*  4400 */   115,  156,  156,  156,  156,  120,  156,  156,  156,  156,
 /*  4410 */   156,  126,  156,  156,  129,  130,  156,  156,  156,  156,
 /*  4420 */    55,   56,   83,   84,   85,  156,  156,    6,    7,    8,
 /*  4430 */     9,   10,  156,   12,   13,  156,  156,  156,  156,   18,
 /*  4440 */   156,   20,   21,   22,   23,   24,   25,   26,   27,   28,
 /*  4450 */    29,   30,   31,  156,  115,  156,  156,  156,  156,  120,
 /*  4460 */   156,  156,  156,  156,  156,  126,  156,  156,  129,  130,
 /*  4470 */   156,  156,  156,  156,  156,  156,   55,   56,   83,   84,
 /*  4480 */    85,  156,  156,    6,    7,    8,    9,  156,  156,   12,
 /*  4490 */    13,  156,   15,  156,  156,   18,  156,   20,   21,   22,
 /*  4500 */    23,   24,   25,   26,   27,   28,   29,   30,   31,  156,
 /*  4510 */   115,  156,  156,  156,  156,  120,  156,  156,  156,  156,
 /*  4520 */   156,  126,  156,  156,  129,  130,  156,  156,  156,  156,
 /*  4530 */   156,  156,   55,   56,  156,  156,  156,  156,  156,    6,
 /*  4540 */     7,    8,    9,   10,  156,   12,   13,  156,  156,  156,
 /*  4550 */   156,   18,  156,   20,   21,   22,   23,   24,   25,   26,
 /*  4560 */    27,   28,   29,   30,   31,  156,  156,  156,  156,  156,
 /*  4570 */   156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  4580 */   156,  156,  156,  156,  156,  156,  156,  156,   55,   56,
 /*  4590 */   156,  156,  156,  156,  156,    6,    7,    8,    9,  156,
 /*  4600 */   156,   12,   13,  156,  156,  156,  156,   18,   19,   20,
 /*  4610 */    21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
 /*  4620 */    31,  156,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  4630 */   156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  4640 */   156,  156,  156,  156,   55,   56,  156,  156,  156,  156,
 /*  4650 */   156,    6,    7,    8,    9,  156,  156,   12,   13,   14,
 /*  4660 */   156,  156,  156,   18,  156,   20,   21,   22,   23,   24,
 /*  4670 */    25,   26,   27,   28,   29,   30,   31,  156,  156,  156,
 /*  4680 */   156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  4690 */   156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  4700 */    55,   56,  156,  156,  156,  156,  156,    6,    7,    8,
 /*  4710 */     9,  156,  156,   12,   13,  156,  156,  156,  156,   18,
 /*  4720 */   156,   20,   21,   22,   23,   24,   25,   26,   27,   28,
 /*  4730 */    29,   30,   31,  156,  156,   83,   84,   85,  156,  156,
 /*  4740 */   156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  4750 */   156,  156,  156,  156,  156,  156,   55,   56,  156,  156,
 /*  4760 */   156,  156,  156,  156,  156,  156,  156,  115,  156,  156,
 /*  4770 */   156,  156,  120,  156,  156,  156,  156,  156,  126,  156,
 /*  4780 */   156,  129,  130,  131,  132,  133,  134,  135,  136,  137,
 /*  4790 */   138,  139,  140,  141,  142,  143,    6,    7,    8,    9,
 /*  4800 */   156,  156,   12,   13,  156,  156,  156,  156,   18,   19,
 /*  4810 */    20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
 /*  4820 */    30,   31,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  4830 */   156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  4840 */   156,  156,  156,  156,  156,   55,  156,  156,  156,  156,
 /*  4850 */   156,  156,    6,    7,    8,    9,  156,  156,   12,   13,
 /*  4860 */   156,   15,  156,  156,   18,  156,   20,   21,   22,   23,
 /*  4870 */    24,   25,   26,   27,   28,   29,   30,   31,  156,  156,
 /*  4880 */   156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  4890 */   156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  4900 */   156,   55,  156,  156,  156,  156,  156,  156,    6,    7,
 /*  4910 */     8,    9,  156,  156,   12,   13,  156,  156,  156,  156,
 /*  4920 */    18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
 /*  4930 */    28,   29,   30,   31,  156,  156,  156,  156,  156,  156,
 /*  4940 */   156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  4950 */   156,  156,  156,  156,  156,  156,  156,   55,  156,  156,
 /*  4960 */   156,  156,  156,  156,    6,    7,    8,    9,  156,  156,
 /*  4970 */    12,   13,  156,  156,  156,  156,   18,   19,   20,   21,
 /*  4980 */    22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
 /*  4990 */   156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  5000 */   156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  5010 */   156,  156,  156,   55,  156,  156,  156,  156,  156,  156,
 /*  5020 */     6,    7,    8,    9,  156,  156,   12,   13,  156,  156,
 /*  5030 */   156,  156,   18,   19,   20,   21,   22,   23,   24,   25,
 /*  5040 */    26,   27,   28,   29,   30,   31,  156,  156,  156,  156,
 /*  5050 */   156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  5060 */   156,  156,  156,  156,  156,  156,  156,  156,  156,   55,
 /*  5070 */   156,  156,  156,  156,  156,  156,    6,    7,    8,    9,
 /*  5080 */   156,  156,   12,   13,  156,  156,  156,  156,   18,   19,
 /*  5090 */    20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
 /*  5100 */    30,   31,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  5110 */   156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  5120 */   156,  156,  156,  156,  156,   55,  156,  156,  156,  156,
 /*  5130 */   156,  156,    6,    7,    8,    9,  156,  156,   12,   13,
 /*  5140 */   156,  156,  156,  156,   18,   19,   20,   21,   22,   23,
 /*  5150 */    24,   25,   26,   27,   28,   29,   30,   31,  156,  156,
 /*  5160 */   156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  5170 */   156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  5180 */   156,   55,  156,  156,  156,  156,  156,  156,    6,    7,
 /*  5190 */     8,    9,  156,  156,   12,   13,  156,  156,  156,  156,
 /*  5200 */    18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
 /*  5210 */    28,   29,   30,   31,  156,  156,  156,  156,  156,  156,
 /*  5220 */   156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  5230 */   156,  156,  156,  156,  156,  156,  156,   55,  156,  156,
 /*  5240 */   156,  156,  156,  156,    6,    7,    8,    9,  156,   11,
 /*  5250 */    12,   13,  156,  156,  156,  156,   18,  156,   20,   21,
 /*  5260 */    22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
 /*  5270 */   156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  5280 */   156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  5290 */   156,  156,  156,   55,  156,  156,  156,  156,  156,  156,
 /*  5300 */     6,    7,    8,    9,  156,  156,   12,   13,  156,  156,
 /*  5310 */   156,  156,   18,  156,   20,   21,   22,   23,   24,   25,
 /*  5320 */    26,   27,   28,   29,   30,   31,  156,  156,   83,   84,
 /*  5330 */    85,  156,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  5340 */   156,  156,  156,  156,  156,  156,  156,  156,  156,   55,
 /*  5350 */   156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  5360 */   115,  156,  156,  156,  156,  120,  156,  156,  156,  156,
 /*  5370 */   156,  126,  156,  156,  129,  130,  131,  132,  133,  134,
 /*  5380 */   135,  136,  137,  138,  139,  140,  141,  142,  156,  156,
 /*  5390 */    83,   84,   85,  156,  156,  156,  156,  156,  156,  156,
 /*  5400 */   156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  5410 */   156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  5420 */   156,  156,  115,  156,  156,  156,  156,  120,  156,  156,
 /*  5430 */   156,  156,  156,  126,  156,  156,  129,  130,  131,  132,
 /*  5440 */   133,  134,  135,  136,  137,  138,  139,  140,  141,   83,
 /*  5450 */    84,   85,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  5460 */   156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  5470 */   156,  156,  156,  156,  156,   83,   84,   85,  156,  156,
 /*  5480 */   156,  115,  156,  156,  156,  156,  120,  156,  156,  156,
 /*  5490 */   156,  156,  126,  156,  156,  129,  130,  131,  132,  133,
 /*  5500 */   134,  135,  136,  137,  138,  139,  140,  115,  156,  156,
 /*  5510 */   156,  156,  120,  156,  156,  156,  156,  156,  126,  156,
 /*  5520 */   156,  129,  130,  131,  132,  133,  134,  135,  136,  137,
 /*  5530 */   138,  139,   83,   84,   85,  156,  156,  156,  156,  156,
 /*  5540 */   156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  5550 */   156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  5560 */   156,  156,  156,  156,  115,  156,  156,  156,  156,  120,
 /*  5570 */   156,  156,  156,  156,  156,  126,  156,  156,  129,  130,
 /*  5580 */   131,  132,  133,  134,  135,  136,  137,  138,
};
#define YY_SHIFT_USE_DFLT (-25)
#define YY_SHIFT_MAX 273
static const short yy_shift_ofst[] = {
 /*     0 */   -25, 1028, 1107,  949, 1186, 1265, 1344, 1423, 1423, 1423,
 /*    10 */  1423, 1423, 1502, 1423, 1502, 1502, 1502, 1423, 1502, 4477,
 /*    20 */  4477, 4477, 4309, 4477, 4701, 4701, 4701, 4701, 4701, 4701,
 /*    30 */  4365, 4533, 4645, 4589, 4421, 4701, 4701, 4701, 4701, 5238,
 /*    40 */  4701, 4701, 4701, 5294, 5182, 5126, 5070, 5014, 4958, 4902,
 /*    50 */  4846, 4790, 5294, 5294, 5294, 5294, 5294, 5294, 5294, 5294,
 /*    60 */  5294, 5294, 5294, 5294, 5294, 5294, 5294, 5294, 5294, 5294,
 /*    70 */  5294, 5294, 5294, 5294, 5294, 5294, 5294, 5294, 1631, 1631,
 /*    80 */  1631, 1631, 1631, 1631, 1631, 1631, 1631, 1631, 1631, 1631,
 /*    90 */  1631, 1631, 1631, 1631, 1631, 1631, 1631, 1631, 1631, 1631,
 /*   100 */  1631,   19,   -1, 1054, 1054,  153,  153,  153,    4,   40,
 /*   110 */    93,  511,  511,  511, 2890,  928, 1660,  964,  964,   97,
 /*   120 */    71,  170,  243,  246,  319,  313,  105,  363,  509,  465,
 /*   130 */   462,  389,  459,  392,  389,  386,  532,  509,  511,  511,
 /*   140 */   511,  469,  469,  441,  -25,  -25,  -25,  -25,  -25,  -25,
 /*   150 */   -25,  123,  174,  123,  123,   50,   50,  218,  133,  214,
 /*   160 */    20,  217,  230,  203,   54,  279,  287,  276,  101,  247,
 /*   170 */   284,  306,  357,  394,  360,  425,  347,  347,  347,  347,
 /*   180 */   362,  336,  278,  271,  289,  248,  241,  221,  167,  169,
 /*   190 */   139,   80,   51,  -20,  655,   21,   30,   37,  125,  151,
 /*   200 */   172,  197,  213,  208,  292,  316,  320,  324,  346,  349,
 /*   210 */   378,  368,  430,  393,  433,  438,  431,  435,  455,  460,
 /*   220 */   482,  468,  423,  507,  508,  510,  502,  528,  467,  536,
 /*   230 */   490,  533,  539,  537,  542,  555,  566,  531,  577,  573,
 /*   240 */   580,  -24,  586,  590,  585,  597,  602,  593,  546,  603,
 /*   250 */   567,  608,  613,  368,  587,  617,  618,  622,   37,  610,
 /*   260 */   650,  567,  649,  587,  -24,  610,  660,  646,  645,  636,
 /*   270 */   635,  628,  316,  607,
};
#define YY_REDUCE_USE_DFLT (-100)
#define YY_REDUCE_MAX 150
static const short yy_reduce_ofst[] = {
 /*     0 */    -6,  -83,  -83,  -83,  -83,  -83,  -83,  136,   63,  793,
 /*    10 */   720,  574,  501,  647,  -10,  209,  282,  355,  428, 1558,
 /*    20 */  1479, 1623, 1753, 1688, 1948, 2078, 1883, 1818, 2013, 2143,
 /*    30 */  2403, 2728, 2663, 2598, 2273, 2338, 2533, 2208, 2468, 2793,
 /*    40 */  2990, 2925, 2891, 2857, 3844, 3907, 3417, 3383, 3058, 3320,
 /*    50 */  3941, 3252, 3645, 3810, 4072, 4038, 3058, 3383, 3975, 4169,
 /*    60 */  3155, 4106, 3907, 3286, 3776, 3844, 3679, 3713, 3024, 3189,
 /*    70 */  3451, 3582, 3548, 3514, 3417, 3320, 3252, 3121, 4652, 5245,
 /*    80 */  5307, 5366, 5392, 5449, 1354, 1661, 1791, 1856, 1726, 1921,
 /*    90 */  1986, 2311, 2376, 2051, 2441, 2506, 2636, 2181, 2571, 2116,
 /*   100 */  2246, 1430, 1430, 2766, 4285, 4339, 4395, 2701,  -99,  -29,
 /*   110 */    59,   90,  124,  138,  526,  526,  525,  522,  522,  478,
 /*   120 */   436,  478,  479,  466,  479,  478,  436,  473,  473,  466,
 /*   130 */   439,  436,  439,  429,  437,  436,  429,  409,  448,  432,
 /*   140 */   417,  390,  366,  352,  330,  333,  331,  322,  314,  286,
 /*   150 */   263,
};
static const YYACTIONTYPE yy_default[] = {
 /*     0 */   665,  720,  720,  720,  720,  720,  720,  720,  720,  720,
 /*    10 */   720,  720,  720,  720,  720,  720,  720,  720,  720,  720,
 /*    20 */   720,  720,  720,  720,  720,  720,  720,  720,  720,  720,
 /*    30 */   720,  720,  720,  720,  720,  720,  720,  720,  720,  720,
 /*    40 */   720,  649,  720,  720,  720,  720,  720,  720,  720,  720,
 /*    50 */   720,  720,  654,  720,  720,  720,  720,  720,  720,  720,
 /*    60 */   720,  720,  720,  720,  720,  720,  720,  720,  720,  720,
 /*    70 */   720,  720,  720,  720,  720,  720,  720,  720,  720,  720,
 /*    80 */   720,  720,  720,  720,  720,  720,  720,  720,  720,  720,
 /*    90 */   720,  720,  720,  720,  720,  720,  720,  720,  720,  720,
 /*   100 */   720,  720,  720,  720,  720,  720,  720,  720,  709,  720,
 /*   110 */   720,  720,  720,  720,  627,  627,  658,  590,  591,  534,
 /*   120 */   533,  534,  538,  536,  538,  534,  720,  535,  535,  536,
 /*   130 */   539,  533,  539,  537,  720,  533,  537,  720,  720,  720,
 /*   140 */   720,  720,  720,  720,  482,  665,  665,  665,  665,  482,
 /*   150 */   665,  564,  720,  563,  565,  571,  570,  720,  720,  720,
 /*   160 */   720,  720,  720,  596,  720,  720,  720,  490,  720,  540,
 /*   170 */   498,  551,  497,  720,  720,  720,  566,  567,  568,  569,
 /*   180 */   648,  720,  540,  720,  720,  720,  720,  720,  720,  720,
 /*   190 */   720,  720,  720,  720,  720,  720,  720,  575,  720,  720,
 /*   200 */   491,  720,  720,  720,  720,  720,  720,  720,  720,  720,
 /*   210 */   720,  578,  720,  720,  720,  720,  720,  653,  720,  720,
 /*   220 */   720,  720,  720,  720,  720,  720,  720,  720,  720,  720,
 /*   230 */   541,  720,  720,  720,  720,  720,  720,  720,  720,  720,
 /*   240 */   720,  577,  720,  720,  720,  720,  720,  720,  720,  720,
 /*   250 */   595,  720,  720,  579,  572,  720,  720,  720,  574,  593,
 /*   260 */   720,  594,  627,  573,  576,  592,  720,  720,  720,  720,
 /*   270 */   646,  720,  719,  720,  503,  474,  475,  476,  502,  505,
 /*   280 */   507,  508,  509,  504,  512,  518,  514,  521,  515,  524,
 /*   290 */   516,  527,  517,  530,  531,  542,  543,  544,  545,  546,
 /*   300 */   547,  548,  549,  550,  552,  553,  554,  555,  556,  557,
 /*   310 */   558,  559,  560,  561,  562,  580,  581,  582,  583,  584,
 /*   320 */   585,  586,  587,  588,  589,  597,  520,  480,  481,  479,
 /*   330 */   483,  484,  485,  486,  487,  488,  489,  494,  493,  492,
 /*   340 */   617,  614,  495,  523,  526,  602,  603,  604,  606,  605,
 /*   350 */   607,  608,  609,  610,  651,  652,  623,  529,  624,  618,
 /*   360 */   615,  532,  625,  601,  613,  655,  631,  632,  633,  634,
 /*   370 */   635,  636,  637,  638,  639,  640,  641,  642,  643,  656,
 /*   380 */   659,  611,  612,  628,  626,  629,  630,  661,  657,  660,
 /*   390 */   666,  667,  668,  669,  670,  671,  672,  673,  674,  678,
 /*   400 */   662,  499,  500,  663,  501,  664,  679,  680,  677,  681,
 /*   410 */   675,  676,  683,  684,  685,  686,  687,  688,  689,  690,
 /*   420 */   691,  692,  693,  694,  695,  696,  697,  698,  699,  700,
 /*   430 */   701,  702,  703,  704,  705,  706,  707,  708,  710,  711,
 /*   440 */   712,  713,  715,  716,  717,  718,  714,  682,  622,  616,
 /*   450 */   496,  600,  620,  598,  599,  644,  645,  650,  647,  528,
 /*   460 */   541,  525,  522,  519,  540,  510,  511,  513,  506,  621,
 /*   470 */   619,  477,  478,
};
#define YY_SZ_ACTTAB (int)(sizeof(yy_action)/sizeof(yy_action[0]))

/* The next table maps tokens into fallback tokens.  If a construct
** like the following:
** 
**      %fallback ID X Y Z.
**
** appears in the grammar, then ID becomes a fallback token for X, Y,
** and Z.  Whenever one of the tokens X, Y, or Z is input to the parser
** but it does not parse, the type of the token is changed to ID and
** the parse is retried before an error is thrown.
*/
#ifdef YYFALLBACK
static const YYCODETYPE yyFallback[] = {
};
#endif /* YYFALLBACK */

/* The following structure represents a single element of the
** parser's stack.  Information stored includes:
**
**   +  The state number for the parser at this level of the stack.
**
**   +  The value of the token stored at this level of the stack.
**      (In other words, the "major" token.)
**
**   +  The semantic value stored at this level of the stack.  This is
**      the information used by the action routines in the grammar.
**      It is sometimes called the "minor" token.
*/
struct yyStackEntry {
  YYACTIONTYPE stateno;  /* The state-number */
  YYCODETYPE major;      /* The major token value.  This is the code
                         ** number for the token at this stack level */
  YYMINORTYPE minor;     /* The user-supplied minor token value.  This
                         ** is the value of the token  */
};
typedef struct yyStackEntry yyStackEntry;

/* The state of the parser is completely contained in an instance of
** the following structure */
struct yyParser {
  int yyidx;                    /* Index of top element in stack */
#ifdef YYTRACKMAXSTACKDEPTH
  int yyidxMax;                 /* Maximum value of yyidx */
#endif
  int yyerrcnt;                 /* Shifts left before out of the error */
  XecParseARG_SDECL                /* A place to hold %extra_argument */
#if YYSTACKDEPTH<=0
  int yystksz;                  /* Current side of the stack */
  yyStackEntry *yystack;        /* The parser's stack */
#else
  yyStackEntry yystack[YYSTACKDEPTH];  /* The parser's stack */
#endif
};
typedef struct yyParser yyParser;

#ifndef NDEBUG
#include <stdio.h>
static FILE *yyTraceFILE = 0;
static char *yyTracePrompt = 0;
#endif /* NDEBUG */

#ifndef NDEBUG
/* 
** Turn parser tracing on by giving a stream to which to write the trace
** and a prompt to preface each trace message.  Tracing is turned off
** by making either argument NULL 
**
** Inputs:
** <ul>
** <li> A FILE* to which trace output should be written.
**      If NULL, then tracing is turned off.
** <li> A prefix string written at the beginning of every
**      line of trace output.  If NULL, then tracing is
**      turned off.
** </ul>
**
** Outputs:
** None.
*/
void XecParseTrace(FILE *TraceFILE, char *zTracePrompt){
  yyTraceFILE = TraceFILE;
  yyTracePrompt = zTracePrompt;
  if( yyTraceFILE==0 ) yyTracePrompt = 0;
  else if( yyTracePrompt==0 ) yyTraceFILE = 0;
}
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing shifts, the names of all terminals and nonterminals
** are required.  The following table supplies these names */
static const char *const yyTokenName[] = { 
  "$",             "IF",            "ELSE",          "TRY",         
  "CATCH",         "FINALLY",       "YIELD",         "LPN",         
  "IDENTIFIER",    "PERIOD",        "RPN",           "RBR",         
  "LBR",           "COLON",         "SEMICOLON",     "VAR",         
  "ASSIGN",        "COMMA",         "LSQ",           "RSQ",         
  "NEW",           "NULL",          "TRUE",          "FALSE",       
  "NUMBER",        "STRING",        "INCREMENT",     "DECREMENT",   
  "PLUS",          "MINUS",         "XMARK",         "TILDE",       
  "ASTERISK",      "SOLIDUS",       "PERCENT",       "LSHIFT",      
  "RSHIFT",        "URSHIFT",       "AMPERSAND",     "CARET",       
  "VBAR",          "CONCATENATE",   "EQUAL",         "NOTEQUAL",    
  "LESS",          "GREATER",       "LESSEQUAL",     "GREATEREQUAL",
  "IN",            "NOTIN",         "IS",            "NOTIS",       
  "LOGICAND",      "LOGICXOR",      "LOGICOR",       "QMARK",       
  "ELLIPSIS",      "MULASSIGN",     "DIVASSIGN",     "MODASSIGN",   
  "INTDIVASSIGN",  "ADDASSIGN",     "SUBASSIGN",     "LSHIFTASSIGN",
  "RSHIFTASSIGN",  "URSHIFTASSIGN",  "BITANDASSIGN",  "BITXORASSIGN",
  "BITORASSIGN",   "WHILE",         "DELETE",        "CASE",        
  "DEFAULT",       "CONTINUE",      "BREAK",         "RETURN",      
  "THROW",         "SWITCH",        "DO",            "FOR",         
  "EACHKEY",       "USING",         "error",         "proto",       
  "expr_call",     "expr_yield",    "object_lbr",    "newobj_lbr",  
  "func_lbr",      "newfunc_lbr",   "varname",       "varname_list",
  "compare_op",    "assign_op",     "value_lbody",   "value_list",  
  "keyval_lbody",  "keyval_list",   "stmt_lbr",      "stmt_lbr_ru", 
  "stmt_if",       "stmt_switch",   "stmt_while",    "stmt_do",     
  "scope_for",     "stmt_foreach",  "stmt_for",      "stmt_using",  
  "try_block",     "try_catch",     "scope_catch",   "stmt_catch",  
  "token_yield",   "script",        "stmt_list",     "name",        
  "expr_paren",    "expr_list",     "decl_object",   "object_decls",
  "expr_simple",   "object_decl",   "decl_func",     "decl_proto",  
  "decl_var",      "decl_noinit",   "expr_index",    "expr_assign", 
  "expr_value",    "expr_new",      "expr_postfix",  "expr_literal",
  "expr_suffix",   "expr_unary",    "expr_mul",      "expr_add",    
  "expr_shift",    "expr_bitand",   "expr_bitxor",   "expr_bitor",  
  "expr_concat",   "expr_compare",  "expr_and",      "expr_xor",    
  "expr_or",       "expr_nolbr",    "expr_lbody",    "expr_final",  
  "sexpr_lbody",   "sexpr_list",    "sexpr_assign",  "condition",   
  "stmt",          "stmt_common",   "stmt_reuse",    "stmt_try",    
};
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing reduce actions, the names of all rules are required.
*/
static const char *const yyRuleName[] = {
 /*   0 */ "script ::= stmt_list",
 /*   1 */ "name ::= IDENTIFIER",
 /*   2 */ "name ::= name PERIOD IDENTIFIER",
 /*   3 */ "proto ::= name expr_paren",
 /*   4 */ "expr_paren ::= LPN RPN",
 /*   5 */ "expr_paren ::= LPN expr_list RPN",
 /*   6 */ "decl_object ::= object_lbr object_decls RBR",
 /*   7 */ "object_lbr ::= name LBR",
 /*   8 */ "object_lbr ::= name COLON expr_simple LBR",
 /*   9 */ "object_decls ::=",
 /*  10 */ "object_decls ::= object_decls object_decl",
 /*  11 */ "object_decl ::= SEMICOLON",
 /*  12 */ "object_decl ::= decl_object",
 /*  13 */ "object_decl ::= decl_func",
 /*  14 */ "object_decl ::= decl_proto SEMICOLON",
 /*  15 */ "object_decl ::= decl_var SEMICOLON",
 /*  16 */ "object_decl ::= decl_noinit SEMICOLON",
 /*  17 */ "decl_proto ::= proto",
 /*  18 */ "decl_proto ::= proto YIELD",
 /*  19 */ "decl_func ::= func_lbr stmt_list RBR",
 /*  20 */ "func_lbr ::= proto LBR",
 /*  21 */ "func_lbr ::= proto YIELD LBR",
 /*  22 */ "decl_var ::= VAR varname ASSIGN expr_list",
 /*  23 */ "decl_var ::= VAR varname_list ASSIGN expr_list",
 /*  24 */ "decl_noinit ::= VAR varname",
 /*  25 */ "decl_noinit ::= VAR varname_list",
 /*  26 */ "varname ::= IDENTIFIER",
 /*  27 */ "varname_list ::= varname COMMA varname",
 /*  28 */ "varname_list ::= varname_list COMMA varname",
 /*  29 */ "expr_index ::= LPN expr_assign RPN",
 /*  30 */ "expr_index ::= name PERIOD LSQ expr_value RSQ",
 /*  31 */ "expr_index ::= name LSQ expr_value RSQ",
 /*  32 */ "expr_index ::= expr_index PERIOD IDENTIFIER",
 /*  33 */ "expr_index ::= expr_index PERIOD LSQ expr_value RSQ",
 /*  34 */ "expr_index ::= expr_index LSQ expr_value RSQ",
 /*  35 */ "expr_yield ::= YIELD LPN RPN",
 /*  36 */ "expr_yield ::= YIELD LPN expr_list RPN",
 /*  37 */ "expr_new ::= NEW name expr_paren",
 /*  38 */ "expr_new ::= NEW expr_index expr_paren",
 /*  39 */ "expr_call ::= proto expr_paren",
 /*  40 */ "expr_call ::= expr_index expr_paren",
 /*  41 */ "expr_call ::= expr_yield expr_paren",
 /*  42 */ "expr_call ::= expr_new expr_paren",
 /*  43 */ "expr_call ::= expr_call expr_paren",
 /*  44 */ "expr_call ::= expr_postfix expr_paren",
 /*  45 */ "expr_postfix ::= proto PERIOD IDENTIFIER",
 /*  46 */ "expr_postfix ::= proto PERIOD LSQ expr_value RSQ",
 /*  47 */ "expr_postfix ::= proto LSQ expr_value RSQ",
 /*  48 */ "expr_postfix ::= expr_yield PERIOD IDENTIFIER",
 /*  49 */ "expr_postfix ::= expr_yield PERIOD LSQ expr_value RSQ",
 /*  50 */ "expr_postfix ::= expr_yield LSQ expr_value RSQ",
 /*  51 */ "expr_postfix ::= expr_new PERIOD IDENTIFIER",
 /*  52 */ "expr_postfix ::= expr_new PERIOD LSQ expr_value RSQ",
 /*  53 */ "expr_postfix ::= expr_new LSQ expr_value RSQ",
 /*  54 */ "expr_postfix ::= expr_call PERIOD IDENTIFIER",
 /*  55 */ "expr_postfix ::= expr_call PERIOD LSQ expr_value RSQ",
 /*  56 */ "expr_postfix ::= expr_call LSQ expr_value RSQ",
 /*  57 */ "expr_postfix ::= expr_postfix PERIOD IDENTIFIER",
 /*  58 */ "expr_postfix ::= expr_postfix PERIOD LSQ expr_value RSQ",
 /*  59 */ "expr_postfix ::= expr_postfix LSQ expr_value RSQ",
 /*  60 */ "expr_simple ::= name",
 /*  61 */ "expr_simple ::= proto",
 /*  62 */ "expr_simple ::= expr_index",
 /*  63 */ "expr_simple ::= expr_yield",
 /*  64 */ "expr_simple ::= expr_new",
 /*  65 */ "expr_simple ::= expr_call",
 /*  66 */ "expr_simple ::= expr_postfix",
 /*  67 */ "expr_simple ::= proto YIELD",
 /*  68 */ "expr_simple ::= expr_call YIELD",
 /*  69 */ "expr_literal ::= expr_simple",
 /*  70 */ "expr_literal ::= NULL",
 /*  71 */ "expr_literal ::= TRUE",
 /*  72 */ "expr_literal ::= FALSE",
 /*  73 */ "expr_literal ::= NUMBER",
 /*  74 */ "expr_literal ::= STRING",
 /*  75 */ "expr_suffix ::= expr_literal",
 /*  76 */ "expr_suffix ::= expr_suffix INCREMENT",
 /*  77 */ "expr_suffix ::= expr_suffix DECREMENT",
 /*  78 */ "expr_unary ::= expr_suffix",
 /*  79 */ "expr_unary ::= PLUS expr_unary",
 /*  80 */ "expr_unary ::= MINUS expr_unary",
 /*  81 */ "expr_unary ::= XMARK expr_unary",
 /*  82 */ "expr_unary ::= TILDE expr_unary",
 /*  83 */ "expr_unary ::= INCREMENT expr_unary",
 /*  84 */ "expr_unary ::= DECREMENT expr_unary",
 /*  85 */ "expr_mul ::= expr_unary",
 /*  86 */ "expr_mul ::= expr_mul ASTERISK expr_unary",
 /*  87 */ "expr_mul ::= expr_mul SOLIDUS expr_unary",
 /*  88 */ "expr_mul ::= expr_mul PERCENT expr_unary",
 /*  89 */ "expr_mul ::= expr_mul TILDE expr_unary",
 /*  90 */ "expr_add ::= expr_mul",
 /*  91 */ "expr_add ::= expr_add PLUS expr_mul",
 /*  92 */ "expr_add ::= expr_add MINUS expr_mul",
 /*  93 */ "expr_shift ::= expr_add",
 /*  94 */ "expr_shift ::= expr_shift LSHIFT expr_add",
 /*  95 */ "expr_shift ::= expr_shift RSHIFT expr_add",
 /*  96 */ "expr_shift ::= expr_shift URSHIFT expr_add",
 /*  97 */ "expr_bitand ::= expr_shift",
 /*  98 */ "expr_bitand ::= expr_bitand AMPERSAND expr_shift",
 /*  99 */ "expr_bitxor ::= expr_bitand",
 /* 100 */ "expr_bitxor ::= expr_bitxor CARET expr_bitand",
 /* 101 */ "expr_bitor ::= expr_bitxor",
 /* 102 */ "expr_bitor ::= expr_bitor VBAR expr_bitxor",
 /* 103 */ "expr_concat ::= expr_bitor",
 /* 104 */ "expr_concat ::= expr_concat CONCATENATE expr_bitor",
 /* 105 */ "expr_compare ::= expr_concat",
 /* 106 */ "expr_compare ::= expr_compare compare_op expr_concat",
 /* 107 */ "compare_op ::= EQUAL",
 /* 108 */ "compare_op ::= NOTEQUAL",
 /* 109 */ "compare_op ::= LESS",
 /* 110 */ "compare_op ::= GREATER",
 /* 111 */ "compare_op ::= LESSEQUAL",
 /* 112 */ "compare_op ::= GREATEREQUAL",
 /* 113 */ "compare_op ::= IN",
 /* 114 */ "compare_op ::= NOTIN",
 /* 115 */ "compare_op ::= IS",
 /* 116 */ "compare_op ::= NOTIS",
 /* 117 */ "expr_and ::= expr_compare",
 /* 118 */ "expr_and ::= expr_and LOGICAND expr_compare",
 /* 119 */ "expr_xor ::= expr_and",
 /* 120 */ "expr_xor ::= expr_xor LOGICXOR expr_and",
 /* 121 */ "expr_or ::= expr_xor",
 /* 122 */ "expr_or ::= expr_or LOGICOR expr_xor",
 /* 123 */ "expr_nolbr ::= expr_or",
 /* 124 */ "expr_nolbr ::= expr_or QMARK expr_value COLON expr_value",
 /* 125 */ "expr_nolbr ::= LSQ RSQ",
 /* 126 */ "expr_nolbr ::= LSQ value_list RSQ",
 /* 127 */ "expr_nolbr ::= newobj_lbr object_decls RBR",
 /* 128 */ "expr_nolbr ::= newfunc_lbr stmt_list RBR",
 /* 129 */ "newobj_lbr ::= COLON LBR",
 /* 130 */ "newobj_lbr ::= COLON expr_simple LBR",
 /* 131 */ "newfunc_lbr ::= QMARK expr_paren LBR",
 /* 132 */ "newfunc_lbr ::= PERIOD QMARK expr_paren LBR",
 /* 133 */ "newfunc_lbr ::= QMARK expr_paren YIELD LBR",
 /* 134 */ "newfunc_lbr ::= PERIOD QMARK expr_paren YIELD LBR",
 /* 135 */ "expr_value ::= expr_nolbr",
 /* 136 */ "expr_value ::= LBR RBR",
 /* 137 */ "expr_value ::= LBR keyval_list RBR",
 /* 138 */ "expr_lbody ::= expr_value",
 /* 139 */ "expr_lbody ::= expr_lbody COMMA expr_value",
 /* 140 */ "expr_final ::= ELLIPSIS",
 /* 141 */ "expr_final ::= proto ELLIPSIS",
 /* 142 */ "expr_final ::= expr_call ELLIPSIS",
 /* 143 */ "expr_final ::= expr_yield ELLIPSIS",
 /* 144 */ "expr_final ::= proto YIELD ELLIPSIS",
 /* 145 */ "expr_final ::= expr_call YIELD ELLIPSIS",
 /* 146 */ "expr_final ::= name LSQ RSQ ELLIPSIS",
 /* 147 */ "expr_final ::= proto LSQ RSQ ELLIPSIS",
 /* 148 */ "expr_final ::= expr_index LSQ RSQ ELLIPSIS",
 /* 149 */ "expr_final ::= expr_yield LSQ RSQ ELLIPSIS",
 /* 150 */ "expr_final ::= expr_new LSQ RSQ ELLIPSIS",
 /* 151 */ "expr_final ::= expr_call LSQ RSQ ELLIPSIS",
 /* 152 */ "expr_final ::= expr_postfix LSQ RSQ ELLIPSIS",
 /* 153 */ "expr_list ::= expr_final",
 /* 154 */ "expr_list ::= expr_lbody",
 /* 155 */ "expr_list ::= expr_lbody COMMA expr_final",
 /* 156 */ "expr_assign ::= expr_list",
 /* 157 */ "expr_assign ::= expr_lbody assign_op expr_assign",
 /* 158 */ "assign_op ::= ASSIGN",
 /* 159 */ "assign_op ::= MULASSIGN",
 /* 160 */ "assign_op ::= DIVASSIGN",
 /* 161 */ "assign_op ::= MODASSIGN",
 /* 162 */ "assign_op ::= INTDIVASSIGN",
 /* 163 */ "assign_op ::= ADDASSIGN",
 /* 164 */ "assign_op ::= SUBASSIGN",
 /* 165 */ "assign_op ::= LSHIFTASSIGN",
 /* 166 */ "assign_op ::= RSHIFTASSIGN",
 /* 167 */ "assign_op ::= URSHIFTASSIGN",
 /* 168 */ "assign_op ::= BITANDASSIGN",
 /* 169 */ "assign_op ::= BITXORASSIGN",
 /* 170 */ "assign_op ::= BITORASSIGN",
 /* 171 */ "value_lbody ::= expr_value",
 /* 172 */ "value_lbody ::= value_lbody COMMA expr_value",
 /* 173 */ "value_list ::= expr_final",
 /* 174 */ "value_list ::= expr_final COMMA",
 /* 175 */ "value_list ::= value_lbody",
 /* 176 */ "value_list ::= value_lbody COMMA",
 /* 177 */ "value_list ::= value_lbody COMMA expr_final",
 /* 178 */ "keyval_lbody ::= expr_value COLON expr_value",
 /* 179 */ "keyval_lbody ::= keyval_lbody COMMA expr_value COLON expr_value",
 /* 180 */ "keyval_list ::= keyval_lbody",
 /* 181 */ "keyval_list ::= keyval_lbody COMMA",
 /* 182 */ "sexpr_lbody ::= expr_nolbr",
 /* 183 */ "sexpr_lbody ::= sexpr_lbody COMMA expr_value",
 /* 184 */ "sexpr_list ::= expr_final",
 /* 185 */ "sexpr_list ::= sexpr_lbody",
 /* 186 */ "sexpr_list ::= sexpr_lbody COMMA expr_final",
 /* 187 */ "sexpr_assign ::= sexpr_list",
 /* 188 */ "sexpr_assign ::= sexpr_lbody assign_op expr_assign",
 /* 189 */ "condition ::= expr_assign",
 /* 190 */ "condition ::= VAR varname ASSIGN expr_list",
 /* 191 */ "condition ::= VAR varname_list ASSIGN expr_list",
 /* 192 */ "stmt_list ::=",
 /* 193 */ "stmt_list ::= stmt_list SEMICOLON",
 /* 194 */ "stmt_list ::= stmt_list stmt",
 /* 195 */ "stmt_list ::= stmt_list decl_object",
 /* 196 */ "stmt_list ::= stmt_list decl_func",
 /* 197 */ "stmt_list ::= stmt_list decl_var SEMICOLON",
 /* 198 */ "stmt_list ::= stmt_list decl_noinit SEMICOLON",
 /* 199 */ "stmt ::= stmt_lbr stmt_list RBR",
 /* 200 */ "stmt ::= stmt_common",
 /* 201 */ "stmt_lbr ::= LBR",
 /* 202 */ "stmt_reuse ::= stmt_lbr_ru stmt_list RBR",
 /* 203 */ "stmt_reuse ::= stmt_common",
 /* 204 */ "stmt_lbr_ru ::= LBR",
 /* 205 */ "stmt_common ::= sexpr_assign SEMICOLON",
 /* 206 */ "stmt_common ::= stmt_if LPN condition RPN stmt",
 /* 207 */ "stmt_common ::= stmt_if LPN condition RPN stmt ELSE stmt",
 /* 208 */ "stmt_common ::= stmt_switch LPN condition RPN stmt_lbr_ru stmt_list RPN",
 /* 209 */ "stmt_common ::= stmt_while LPN condition RPN stmt_reuse",
 /* 210 */ "stmt_common ::= stmt_do stmt_reuse WHILE LPN expr_assign RPN SEMICOLON",
 /* 211 */ "stmt_common ::= stmt_foreach stmt_reuse",
 /* 212 */ "stmt_common ::= stmt_for stmt_reuse",
 /* 213 */ "stmt_common ::= stmt_using LPN condition RPN stmt_reuse",
 /* 214 */ "stmt_common ::= stmt_try",
 /* 215 */ "stmt_common ::= DELETE expr_lbody SEMICOLON",
 /* 216 */ "stmt_common ::= CASE expr_value COLON",
 /* 217 */ "stmt_common ::= DEFAULT COLON",
 /* 218 */ "stmt_common ::= CONTINUE SEMICOLON",
 /* 219 */ "stmt_common ::= BREAK SEMICOLON",
 /* 220 */ "stmt_common ::= RETURN SEMICOLON",
 /* 221 */ "stmt_common ::= RETURN expr_list SEMICOLON",
 /* 222 */ "stmt_common ::= token_yield SEMICOLON",
 /* 223 */ "stmt_common ::= token_yield expr_list SEMICOLON",
 /* 224 */ "stmt_common ::= THROW expr_value SEMICOLON",
 /* 225 */ "stmt_if ::= IF",
 /* 226 */ "stmt_switch ::= SWITCH",
 /* 227 */ "stmt_while ::= WHILE",
 /* 228 */ "stmt_do ::= DO",
 /* 229 */ "scope_for ::= FOR",
 /* 230 */ "stmt_foreach ::= scope_for LPN expr_lbody COLON expr_value RPN",
 /* 231 */ "stmt_foreach ::= scope_for LPN expr_lbody EACHKEY expr_value RPN",
 /* 232 */ "stmt_foreach ::= scope_for LPN VAR varname_list COLON expr_value RPN",
 /* 233 */ "stmt_foreach ::= scope_for LPN VAR varname_list EACHKEY expr_value RPN",
 /* 234 */ "stmt_for ::= scope_for LPN condition SEMICOLON expr_assign SEMICOLON expr_assign RPN",
 /* 235 */ "stmt_using ::= USING",
 /* 236 */ "stmt_try ::= try_catch",
 /* 237 */ "stmt_try ::= try_catch FINALLY stmt",
 /* 238 */ "stmt_try ::= try_block FINALLY stmt",
 /* 239 */ "try_block ::= TRY stmt",
 /* 240 */ "try_catch ::= try_block stmt_catch stmt_reuse",
 /* 241 */ "try_catch ::= try_catch stmt_catch stmt_reuse",
 /* 242 */ "scope_catch ::= CATCH",
 /* 243 */ "stmt_catch ::= scope_catch LPN COLON expr_simple RPN",
 /* 244 */ "stmt_catch ::= scope_catch LPN expr_value COLON expr_simple RPN",
 /* 245 */ "stmt_catch ::= scope_catch LPN VAR varname COLON expr_simple RPN",
 /* 246 */ "token_yield ::= YIELD",
};
#endif /* NDEBUG */


#if YYSTACKDEPTH<=0
/*
** Try to increase the size of the parser stack.
*/
static void yyGrowStack(yyParser *p){
  int newSize;
  yyStackEntry *pNew;

  newSize = p->yystksz*2 + 100;
  pNew = realloc(p->yystack, newSize*sizeof(pNew[0]));
  if( pNew ){
    p->yystack = pNew;
    p->yystksz = newSize;
#ifndef NDEBUG
    if( yyTraceFILE ){
      fprintf(yyTraceFILE,"%sStack grows to %d entries!\n",
              yyTracePrompt, p->yystksz);
    }
#endif
  }
}
#endif

/* 
** This function allocates a new parser.
** The only argument is a pointer to a function which works like
** malloc.
**
** Inputs:
** A pointer to the function used to allocate memory.
**
** Outputs:
** A pointer to a parser.  This pointer is used in subsequent calls
** to XecParse and XecParseFree.
*/
void *XecParseAlloc(void *(*mallocProc)(size_t)){
  yyParser *pParser;
  pParser = (yyParser*)(*mallocProc)( (size_t)sizeof(yyParser) );
  if( pParser ){
    pParser->yyidx = -1;
#ifdef YYTRACKMAXSTACKDEPTH
    pParser->yyidxMax = 0;
#endif
#if YYSTACKDEPTH<=0
    pParser->yystack = NULL;
    pParser->yystksz = 0;
    yyGrowStack(pParser);
#endif
  }
  return pParser;
}

/* The following function deletes the value associated with a
** symbol.  The symbol can be either a terminal or nonterminal.
** "yymajor" is the symbol code, and "yypminor" is a pointer to
** the value.
*/
static void yy_destructor(
  yyParser *yypParser,    /* The parser */
  YYCODETYPE yymajor,     /* Type code for object to destroy */
  YYMINORTYPE *yypminor   /* The object to be destroyed */
){
  XecParseARG_FETCH;
  switch( yymajor ){
    /* Here is inserted the actions which take place when a
    ** terminal or non-terminal is destroyed.  This can happen
    ** when the symbol is popped from the stack during a
    ** reduce or during error processing or when a parser is 
    ** being destroyed before it is finished parsing.
    **
    ** Note: during a reduce, the only symbols destroyed are those
    ** which appear on the RHS of the rule, but which are not used
    ** inside the C code.
    */
      /* TERMINAL Destructor */
    case 1: /* IF */
    case 2: /* ELSE */
    case 3: /* TRY */
    case 4: /* CATCH */
    case 5: /* FINALLY */
    case 6: /* YIELD */
    case 7: /* LPN */
    case 8: /* IDENTIFIER */
    case 9: /* PERIOD */
    case 10: /* RPN */
    case 11: /* RBR */
    case 12: /* LBR */
    case 13: /* COLON */
    case 14: /* SEMICOLON */
    case 15: /* VAR */
    case 16: /* ASSIGN */
    case 17: /* COMMA */
    case 18: /* LSQ */
    case 19: /* RSQ */
    case 20: /* NEW */
    case 21: /* NULL */
    case 22: /* TRUE */
    case 23: /* FALSE */
    case 24: /* NUMBER */
    case 25: /* STRING */
    case 26: /* INCREMENT */
    case 27: /* DECREMENT */
    case 28: /* PLUS */
    case 29: /* MINUS */
    case 30: /* XMARK */
    case 31: /* TILDE */
    case 32: /* ASTERISK */
    case 33: /* SOLIDUS */
    case 34: /* PERCENT */
    case 35: /* LSHIFT */
    case 36: /* RSHIFT */
    case 37: /* URSHIFT */
    case 38: /* AMPERSAND */
    case 39: /* CARET */
    case 40: /* VBAR */
    case 41: /* CONCATENATE */
    case 42: /* EQUAL */
    case 43: /* NOTEQUAL */
    case 44: /* LESS */
    case 45: /* GREATER */
    case 46: /* LESSEQUAL */
    case 47: /* GREATEREQUAL */
    case 48: /* IN */
    case 49: /* NOTIN */
    case 50: /* IS */
    case 51: /* NOTIS */
    case 52: /* LOGICAND */
    case 53: /* LOGICXOR */
    case 54: /* LOGICOR */
    case 55: /* QMARK */
    case 56: /* ELLIPSIS */
    case 57: /* MULASSIGN */
    case 58: /* DIVASSIGN */
    case 59: /* MODASSIGN */
    case 60: /* INTDIVASSIGN */
    case 61: /* ADDASSIGN */
    case 62: /* SUBASSIGN */
    case 63: /* LSHIFTASSIGN */
    case 64: /* RSHIFTASSIGN */
    case 65: /* URSHIFTASSIGN */
    case 66: /* BITANDASSIGN */
    case 67: /* BITXORASSIGN */
    case 68: /* BITORASSIGN */
    case 69: /* WHILE */
    case 70: /* DELETE */
    case 71: /* CASE */
    case 72: /* DEFAULT */
    case 73: /* CONTINUE */
    case 74: /* BREAK */
    case 75: /* RETURN */
    case 76: /* THROW */
    case 77: /* SWITCH */
    case 78: /* DO */
    case 79: /* FOR */
    case 80: /* EACHKEY */
    case 81: /* USING */
{
#line 109 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"

    p->destroy( (yypminor->yy0) );

#line 1976 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
}
      break;
      /* Default NON-TERMINAL Destructor */
    case 82: /* error */
    case 83: /* proto */
    case 84: /* expr_call */
    case 85: /* expr_yield */
    case 86: /* object_lbr */
    case 87: /* newobj_lbr */
    case 88: /* func_lbr */
    case 89: /* newfunc_lbr */
    case 90: /* varname */
    case 91: /* varname_list */
    case 92: /* compare_op */
    case 93: /* assign_op */
    case 94: /* value_lbody */
    case 95: /* value_list */
    case 96: /* keyval_lbody */
    case 97: /* keyval_list */
    case 98: /* stmt_lbr */
    case 99: /* stmt_lbr_ru */
    case 100: /* stmt_if */
    case 101: /* stmt_switch */
    case 102: /* stmt_while */
    case 103: /* stmt_do */
    case 104: /* scope_for */
    case 105: /* stmt_foreach */
    case 106: /* stmt_for */
    case 107: /* stmt_using */
    case 108: /* try_block */
    case 109: /* try_catch */
    case 110: /* scope_catch */
    case 111: /* stmt_catch */
    case 112: /* token_yield */
    case 113: /* script */
    case 114: /* stmt_list */
    case 115: /* name */
    case 116: /* expr_paren */
    case 117: /* expr_list */
    case 118: /* decl_object */
    case 119: /* object_decls */
    case 120: /* expr_simple */
    case 121: /* object_decl */
    case 122: /* decl_func */
    case 123: /* decl_proto */
    case 124: /* decl_var */
    case 125: /* decl_noinit */
    case 126: /* expr_index */
    case 127: /* expr_assign */
    case 128: /* expr_value */
    case 129: /* expr_new */
    case 130: /* expr_postfix */
    case 131: /* expr_literal */
    case 132: /* expr_suffix */
    case 133: /* expr_unary */
    case 134: /* expr_mul */
    case 135: /* expr_add */
    case 136: /* expr_shift */
    case 137: /* expr_bitand */
    case 138: /* expr_bitxor */
    case 139: /* expr_bitor */
    case 140: /* expr_concat */
    case 141: /* expr_compare */
    case 142: /* expr_and */
    case 143: /* expr_xor */
    case 144: /* expr_or */
    case 145: /* expr_nolbr */
    case 146: /* expr_lbody */
    case 147: /* expr_final */
    case 148: /* sexpr_lbody */
    case 149: /* sexpr_list */
    case 150: /* sexpr_assign */
    case 151: /* condition */
    case 152: /* stmt */
    case 153: /* stmt_common */
    case 154: /* stmt_reuse */
    case 155: /* stmt_try */
{
#line 104 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"

    delete (yypminor->yy191);

#line 2059 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
}
      break;
    default:  break;   /* If no destructor action specified: do nothing */
  }
}

/*
** Pop the parser's stack once.
**
** If there is a destructor routine associated with the token which
** is popped from the stack, then call it.
**
** Return the major token number for the symbol popped.
*/
static int yy_pop_parser_stack(yyParser *pParser){
  YYCODETYPE yymajor;
  yyStackEntry *yytos = &pParser->yystack[pParser->yyidx];

  if( pParser->yyidx<0 ) return 0;
#ifndef NDEBUG
  if( yyTraceFILE && pParser->yyidx>=0 ){
    fprintf(yyTraceFILE,"%sPopping %s\n",
      yyTracePrompt,
      yyTokenName[yytos->major]);
  }
#endif
  yymajor = yytos->major;
  yy_destructor(pParser, yymajor, &yytos->minor);
  pParser->yyidx--;
  return yymajor;
}

/* 
** Deallocate and destroy a parser.  Destructors are all called for
** all stack elements before shutting the parser down.
**
** Inputs:
** <ul>
** <li>  A pointer to the parser.  This should be a pointer
**       obtained from XecParseAlloc.
** <li>  A pointer to a function used to reclaim memory obtained
**       from malloc.
** </ul>
*/
void XecParseFree(
  void *p,                    /* The parser to be deleted */
  void (*freeProc)(void*)     /* Function used to reclaim memory */
){
  yyParser *pParser = (yyParser*)p;
  if( pParser==0 ) return;
  while( pParser->yyidx>=0 ) yy_pop_parser_stack(pParser);
#if YYSTACKDEPTH<=0
  free(pParser->yystack);
#endif
  (*freeProc)((void*)pParser);
}

/*
** Return the peak depth of the stack for a parser.
*/
#ifdef YYTRACKMAXSTACKDEPTH
int XecParseStackPeak(void *p){
  yyParser *pParser = (yyParser*)p;
  return pParser->yyidxMax;
}
#endif

/*
** Find the appropriate action for a parser given the terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
static int yy_find_shift_action(
  yyParser *pParser,        /* The parser */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
  int stateno = pParser->yystack[pParser->yyidx].stateno;
 
  if( stateno>YY_SHIFT_MAX || (i = yy_shift_ofst[stateno])==YY_SHIFT_USE_DFLT ){
    return yy_default[stateno];
  }
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
  if( i<0 || i>=YY_SZ_ACTTAB || yy_lookahead[i]!=iLookAhead ){
    if( iLookAhead>0 ){
#ifdef YYFALLBACK
      YYCODETYPE iFallback;            /* Fallback token */
      if( iLookAhead<sizeof(yyFallback)/sizeof(yyFallback[0])
             && (iFallback = yyFallback[iLookAhead])!=0 ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE, "%sFALLBACK %s => %s\n",
             yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[iFallback]);
        }
#endif
        return yy_find_shift_action(pParser, iFallback);
      }
#endif
#ifdef YYWILDCARD
      {
        int j = i - iLookAhead + YYWILDCARD;
        if( j>=0 && j<YY_SZ_ACTTAB && yy_lookahead[j]==YYWILDCARD ){
#ifndef NDEBUG
          if( yyTraceFILE ){
            fprintf(yyTraceFILE, "%sWILDCARD %s => %s\n",
               yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[YYWILDCARD]);
          }
#endif /* NDEBUG */
          return yy_action[j];
        }
      }
#endif /* YYWILDCARD */
    }
    return yy_default[stateno];
  }else{
    return yy_action[i];
  }
}

/*
** Find the appropriate action for a parser given the non-terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
static int yy_find_reduce_action(
  int stateno,              /* Current state number */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
#ifdef YYERRORSYMBOL
  if( stateno>YY_REDUCE_MAX ){
    return yy_default[stateno];
  }
#else
  assert( stateno<=YY_REDUCE_MAX );
#endif
  i = yy_reduce_ofst[stateno];
  assert( i!=YY_REDUCE_USE_DFLT );
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
#ifdef YYERRORSYMBOL
  if( i<0 || i>=YY_SZ_ACTTAB || yy_lookahead[i]!=iLookAhead ){
    return yy_default[stateno];
  }
#else
  assert( i>=0 && i<YY_SZ_ACTTAB );
  assert( yy_lookahead[i]==iLookAhead );
#endif
  return yy_action[i];
}

/*
** The following routine is called if the stack overflows.
*/
static void yyStackOverflow(yyParser *yypParser, YYMINORTYPE *yypMinor){
   XecParseARG_FETCH;
   yypParser->yyidx--;
#ifndef NDEBUG
   if( yyTraceFILE ){
     fprintf(yyTraceFILE,"%sStack Overflow!\n",yyTracePrompt);
   }
#endif
   while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
   /* Here code is inserted which will execute if the parser
   ** stack every overflows */
   XecParseARG_STORE; /* Suppress warning about unused %extra_argument var */
}

/*
** Perform a shift action.
*/
static void yy_shift(
  yyParser *yypParser,          /* The parser to be shifted */
  int yyNewState,               /* The new state to shift in */
  int yyMajor,                  /* The major token to shift in */
  YYMINORTYPE *yypMinor         /* Pointer to the minor token to shift in */
){
  yyStackEntry *yytos;
  yypParser->yyidx++;
#ifdef YYTRACKMAXSTACKDEPTH
  if( yypParser->yyidx>yypParser->yyidxMax ){
    yypParser->yyidxMax = yypParser->yyidx;
  }
#endif
#if YYSTACKDEPTH>0 
  if( yypParser->yyidx>=YYSTACKDEPTH ){
    yyStackOverflow(yypParser, yypMinor);
    return;
  }
#else
  if( yypParser->yyidx>=yypParser->yystksz ){
    yyGrowStack(yypParser);
    if( yypParser->yyidx>=yypParser->yystksz ){
      yyStackOverflow(yypParser, yypMinor);
      return;
    }
  }
#endif
  yytos = &yypParser->yystack[yypParser->yyidx];
  yytos->stateno = (YYACTIONTYPE)yyNewState;
  yytos->major = (YYCODETYPE)yyMajor;
  yytos->minor = *yypMinor;
#ifndef NDEBUG
  if( yyTraceFILE && yypParser->yyidx>0 ){
    int i;
    fprintf(yyTraceFILE,"%sShift %d\n",yyTracePrompt,yyNewState);
    fprintf(yyTraceFILE,"%sStack:",yyTracePrompt);
    for(i=1; i<=yypParser->yyidx; i++)
      fprintf(yyTraceFILE," %s",yyTokenName[yypParser->yystack[i].major]);
    fprintf(yyTraceFILE,"\n");
  }
#endif
}

/* The following table contains information about every rule that
** is used during the reduce.
*/
static const struct {
  YYCODETYPE lhs;         /* Symbol on the left-hand side of the rule */
  unsigned char nrhs;     /* Number of right-hand side symbols in the rule */
} yyRuleInfo[] = {
  { 113, 1 },
  { 115, 1 },
  { 115, 3 },
  { 83, 2 },
  { 116, 2 },
  { 116, 3 },
  { 118, 3 },
  { 86, 2 },
  { 86, 4 },
  { 119, 0 },
  { 119, 2 },
  { 121, 1 },
  { 121, 1 },
  { 121, 1 },
  { 121, 2 },
  { 121, 2 },
  { 121, 2 },
  { 123, 1 },
  { 123, 2 },
  { 122, 3 },
  { 88, 2 },
  { 88, 3 },
  { 124, 4 },
  { 124, 4 },
  { 125, 2 },
  { 125, 2 },
  { 90, 1 },
  { 91, 3 },
  { 91, 3 },
  { 126, 3 },
  { 126, 5 },
  { 126, 4 },
  { 126, 3 },
  { 126, 5 },
  { 126, 4 },
  { 85, 3 },
  { 85, 4 },
  { 129, 3 },
  { 129, 3 },
  { 84, 2 },
  { 84, 2 },
  { 84, 2 },
  { 84, 2 },
  { 84, 2 },
  { 84, 2 },
  { 130, 3 },
  { 130, 5 },
  { 130, 4 },
  { 130, 3 },
  { 130, 5 },
  { 130, 4 },
  { 130, 3 },
  { 130, 5 },
  { 130, 4 },
  { 130, 3 },
  { 130, 5 },
  { 130, 4 },
  { 130, 3 },
  { 130, 5 },
  { 130, 4 },
  { 120, 1 },
  { 120, 1 },
  { 120, 1 },
  { 120, 1 },
  { 120, 1 },
  { 120, 1 },
  { 120, 1 },
  { 120, 2 },
  { 120, 2 },
  { 131, 1 },
  { 131, 1 },
  { 131, 1 },
  { 131, 1 },
  { 131, 1 },
  { 131, 1 },
  { 132, 1 },
  { 132, 2 },
  { 132, 2 },
  { 133, 1 },
  { 133, 2 },
  { 133, 2 },
  { 133, 2 },
  { 133, 2 },
  { 133, 2 },
  { 133, 2 },
  { 134, 1 },
  { 134, 3 },
  { 134, 3 },
  { 134, 3 },
  { 134, 3 },
  { 135, 1 },
  { 135, 3 },
  { 135, 3 },
  { 136, 1 },
  { 136, 3 },
  { 136, 3 },
  { 136, 3 },
  { 137, 1 },
  { 137, 3 },
  { 138, 1 },
  { 138, 3 },
  { 139, 1 },
  { 139, 3 },
  { 140, 1 },
  { 140, 3 },
  { 141, 1 },
  { 141, 3 },
  { 92, 1 },
  { 92, 1 },
  { 92, 1 },
  { 92, 1 },
  { 92, 1 },
  { 92, 1 },
  { 92, 1 },
  { 92, 1 },
  { 92, 1 },
  { 92, 1 },
  { 142, 1 },
  { 142, 3 },
  { 143, 1 },
  { 143, 3 },
  { 144, 1 },
  { 144, 3 },
  { 145, 1 },
  { 145, 5 },
  { 145, 2 },
  { 145, 3 },
  { 145, 3 },
  { 145, 3 },
  { 87, 2 },
  { 87, 3 },
  { 89, 3 },
  { 89, 4 },
  { 89, 4 },
  { 89, 5 },
  { 128, 1 },
  { 128, 2 },
  { 128, 3 },
  { 146, 1 },
  { 146, 3 },
  { 147, 1 },
  { 147, 2 },
  { 147, 2 },
  { 147, 2 },
  { 147, 3 },
  { 147, 3 },
  { 147, 4 },
  { 147, 4 },
  { 147, 4 },
  { 147, 4 },
  { 147, 4 },
  { 147, 4 },
  { 147, 4 },
  { 117, 1 },
  { 117, 1 },
  { 117, 3 },
  { 127, 1 },
  { 127, 3 },
  { 93, 1 },
  { 93, 1 },
  { 93, 1 },
  { 93, 1 },
  { 93, 1 },
  { 93, 1 },
  { 93, 1 },
  { 93, 1 },
  { 93, 1 },
  { 93, 1 },
  { 93, 1 },
  { 93, 1 },
  { 93, 1 },
  { 94, 1 },
  { 94, 3 },
  { 95, 1 },
  { 95, 2 },
  { 95, 1 },
  { 95, 2 },
  { 95, 3 },
  { 96, 3 },
  { 96, 5 },
  { 97, 1 },
  { 97, 2 },
  { 148, 1 },
  { 148, 3 },
  { 149, 1 },
  { 149, 1 },
  { 149, 3 },
  { 150, 1 },
  { 150, 3 },
  { 151, 1 },
  { 151, 4 },
  { 151, 4 },
  { 114, 0 },
  { 114, 2 },
  { 114, 2 },
  { 114, 2 },
  { 114, 2 },
  { 114, 3 },
  { 114, 3 },
  { 152, 3 },
  { 152, 1 },
  { 98, 1 },
  { 154, 3 },
  { 154, 1 },
  { 99, 1 },
  { 153, 2 },
  { 153, 5 },
  { 153, 7 },
  { 153, 7 },
  { 153, 5 },
  { 153, 7 },
  { 153, 2 },
  { 153, 2 },
  { 153, 5 },
  { 153, 1 },
  { 153, 3 },
  { 153, 3 },
  { 153, 2 },
  { 153, 2 },
  { 153, 2 },
  { 153, 2 },
  { 153, 3 },
  { 153, 2 },
  { 153, 3 },
  { 153, 3 },
  { 100, 1 },
  { 101, 1 },
  { 102, 1 },
  { 103, 1 },
  { 104, 1 },
  { 105, 6 },
  { 105, 6 },
  { 105, 7 },
  { 105, 7 },
  { 106, 8 },
  { 107, 1 },
  { 155, 1 },
  { 155, 3 },
  { 155, 3 },
  { 108, 2 },
  { 109, 3 },
  { 109, 3 },
  { 110, 1 },
  { 111, 5 },
  { 111, 6 },
  { 111, 7 },
  { 112, 1 },
};

static void yy_accept(yyParser*);  /* Forward Declaration */

/*
** Perform a reduce action and the shift that must immediately
** follow the reduce.
*/
static void yy_reduce(
  yyParser *yypParser,         /* The parser */
  int yyruleno                 /* Number of the rule by which to reduce */
){
  int yygoto;                     /* The next state */
  int yyact;                      /* The next action */
  YYMINORTYPE yygotominor;        /* The LHS of the rule reduced */
  yyStackEntry *yymsp;            /* The top of the parser's stack */
  int yysize;                     /* Amount to pop the stack */
  XecParseARG_FETCH;
  yymsp = &yypParser->yystack[yypParser->yyidx];
#ifndef NDEBUG
  if( yyTraceFILE && yyruleno>=0 
        && yyruleno<(int)(sizeof(yyRuleName)/sizeof(yyRuleName[0])) ){
    fprintf(yyTraceFILE, "%sReduce [%s].\n", yyTracePrompt,
      yyRuleName[yyruleno]);
  }
#endif /* NDEBUG */

  /* Silence complaints from purify about yygotominor being uninitialized
  ** in some cases when it is copied into the stack after the following
  ** switch.  yygotominor is uninitialized when a rule reduces that does
  ** not set the value of its left-hand side nonterminal.  Leaving the
  ** value of the nonterminal uninitialized is utterly harmless as long
  ** as the value is never used.  So really the only thing this code
  ** accomplishes is to quieten purify.  
  **
  ** 2007-01-16:  The wireshark project (www.wireshark.org) reports that
  ** without this code, their parser segfaults.  I'm not sure what there
  ** parser is doing to make this happen.  This is the second bug report
  ** from wireshark this week.  Clearly they are stressing Lemon in ways
  ** that it has not been previously stressed...  (SQLite ticket #2172)
  */
  /*memset(&yygotominor, 0, sizeof(yygotominor));*/
  yygotominor = yyzerominor;


  switch( yyruleno ){
  /* Beginning here are the reduction cases.  A typical example
  ** follows:
  **   case 0:
  **  #line <lineno> <grammarfile>
  **     { ... }           // User supplied code
  **  #line <lineno> <thisfile>
  **     break;
  */
      case 0: /* script ::= stmt_list */
#line 142 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,114,&yymsp[0].minor);
}
#line 2594 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 1: /* name ::= IDENTIFIER */
#line 154 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy191 = p->alloc< xec_unqual_name >(
                                    yymsp[0].minor.yy0->sloc, yymsp[0].minor.yy0->text );
                }
#line 2602 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 2: /* name ::= name PERIOD IDENTIFIER */
#line 159 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy191 = p->alloc< xec_unqual_qual >(
                                    yymsp[0].minor.yy0->sloc, yymsp[-2].minor.yy191, yymsp[0].minor.yy0->text );
                  yy_destructor(yypParser,9,&yymsp[-1].minor);
}
#line 2611 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 3: /* proto ::= name expr_paren */
#line 165 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy55 = p->alloc< xec_unqual_proto >(
                                    yymsp[-1].minor.yy191->sloc, yymsp[-1].minor.yy191, p->list( yymsp[0].minor.yy191 ) );
                }
#line 2619 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 4: /* expr_paren ::= LPN RPN */
#line 171 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy191 = nullptr;
                  yy_destructor(yypParser,7,&yymsp[-1].minor);
  yy_destructor(yypParser,10,&yymsp[0].minor);
}
#line 2628 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 5: /* expr_paren ::= LPN expr_list RPN */
#line 175 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy191 = yymsp[-1].minor.yy191;
                  yy_destructor(yypParser,7,&yymsp[-2].minor);
  yy_destructor(yypParser,10,&yymsp[0].minor);
}
#line 2637 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 6: /* decl_object ::= object_lbr object_decls RBR */
#line 189 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    p->close_scope( yymsp[-2].minor.yy230->scope );
                  yy_destructor(yypParser,119,&yymsp[-1].minor);
  yy_destructor(yypParser,11,&yymsp[0].minor);
}
#line 2646 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 7: /* object_lbr ::= name LBR */
#line 194 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy230 = p->object( yymsp[-1].minor.yy191->sloc, yymsp[-1].minor.yy191, nullptr );
                  yy_destructor(yypParser,12,&yymsp[0].minor);
}
#line 2654 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 8: /* object_lbr ::= name COLON expr_simple LBR */
#line 198 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy191 = p->resolve( yymsp[-1].minor.yy191 );
                    yygotominor.yy230 = p->object( yymsp[-3].minor.yy191->sloc, yymsp[-3].minor.yy191, yymsp[-1].minor.yy191 );
                  yy_destructor(yypParser,13,&yymsp[-2].minor);
  yy_destructor(yypParser,12,&yymsp[0].minor);
}
#line 2664 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 9: /* object_decls ::= */
      case 192: /* stmt_list ::= */ yytestcase(yyruleno==192);
#line 204 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                }
#line 2671 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 10: /* object_decls ::= object_decls object_decl */
#line 207 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,119,&yymsp[-1].minor);
  yy_destructor(yypParser,121,&yymsp[0].minor);
}
#line 2679 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 11: /* object_decl ::= SEMICOLON */
#line 211 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,14,&yymsp[0].minor);
}
#line 2686 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 12: /* object_decl ::= decl_object */
#line 214 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,118,&yymsp[0].minor);
}
#line 2693 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 13: /* object_decl ::= decl_func */
#line 217 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,122,&yymsp[0].minor);
}
#line 2700 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 14: /* object_decl ::= decl_proto SEMICOLON */
#line 220 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,123,&yymsp[-1].minor);
  yy_destructor(yypParser,14,&yymsp[0].minor);
}
#line 2708 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 15: /* object_decl ::= decl_var SEMICOLON */
#line 223 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,124,&yymsp[-1].minor);
  yy_destructor(yypParser,14,&yymsp[0].minor);
}
#line 2716 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 16: /* object_decl ::= decl_noinit SEMICOLON */
#line 226 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,125,&yymsp[-1].minor);
  yy_destructor(yypParser,14,&yymsp[0].minor);
}
#line 2724 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 17: /* decl_proto ::= proto */
#line 233 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    p->prototype( yymsp[0].minor.yy55->sloc, yymsp[0].minor.yy55 );
                }
#line 2731 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 18: /* decl_proto ::= proto YIELD */
#line 237 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy55->coroutine = true;
                    p->prototype( yymsp[-1].minor.yy55->sloc, yymsp[-1].minor.yy55 );
                  yy_destructor(yypParser,6,&yymsp[0].minor);
}
#line 2740 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 19: /* decl_func ::= func_lbr stmt_list RBR */
#line 245 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    p->close_scope( yymsp[-2].minor.yy93->scope );
                  yy_destructor(yypParser,114,&yymsp[-1].minor);
  yy_destructor(yypParser,11,&yymsp[0].minor);
}
#line 2749 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 20: /* func_lbr ::= proto LBR */
#line 250 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy93 = p->function( yymsp[-1].minor.yy55->sloc, yymsp[-1].minor.yy55->name,
                                    yymsp[-1].minor.yy55->params, yymsp[-1].minor.yy55->coroutine, false );
                  yy_destructor(yypParser,12,&yymsp[0].minor);
}
#line 2758 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 21: /* func_lbr ::= proto YIELD LBR */
#line 255 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-2].minor.yy55->coroutine = true;
                    yygotominor.yy93 = p->function( yymsp[-2].minor.yy55->sloc, yymsp[-2].minor.yy55->name,
                                    yymsp[-2].minor.yy55->params, yymsp[-2].minor.yy55->coroutine, false );
                  yy_destructor(yypParser,6,&yymsp[-1].minor);
  yy_destructor(yypParser,12,&yymsp[0].minor);
}
#line 2769 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 22: /* decl_var ::= VAR varname ASSIGN expr_list */
#line 264 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    p->var( yymsp[-3].minor.yy0->sloc, yymsp[-2].minor.yy124, p->resolve( yymsp[0].minor.yy191 ) );
                    p->destroy( yymsp[-3].minor.yy0 );
                  yy_destructor(yypParser,16,&yymsp[-1].minor);
}
#line 2778 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 23: /* decl_var ::= VAR varname_list ASSIGN expr_list */
#line 269 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    p->var_list( yymsp[-3].minor.yy0->sloc, yymsp[-2].minor.yy99, p->resolve( yymsp[0].minor.yy191 ) );
                    p->destroy( yymsp[-3].minor.yy0 );
                  yy_destructor(yypParser,16,&yymsp[-1].minor);
}
#line 2787 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 24: /* decl_noinit ::= VAR varname */
#line 275 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    p->var( yymsp[-1].minor.yy0->sloc, yymsp[0].minor.yy124, nullptr );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 2795 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 25: /* decl_noinit ::= VAR varname_list */
#line 280 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    p->var_list( yymsp[-1].minor.yy0->sloc, yymsp[0].minor.yy99, nullptr );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 2803 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 26: /* varname ::= IDENTIFIER */
#line 288 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy124 = p->alloc< xec_unqual_name >( yymsp[0].minor.yy0->sloc, yymsp[0].minor.yy0->text );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 2811 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 27: /* varname_list ::= varname COMMA varname */
#line 294 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy99 = p->alloc< xec_unqual_list >( yymsp[-2].minor.yy124->sloc );
                    yygotominor.yy99->names.push_back( yymsp[-2].minor.yy124 );
                    yygotominor.yy99->names.push_back( yymsp[0].minor.yy124 );
                  yy_destructor(yypParser,17,&yymsp[-1].minor);
}
#line 2821 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 28: /* varname_list ::= varname_list COMMA varname */
#line 300 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy99 = yymsp[-2].minor.yy99;
                    yygotominor.yy99->names.push_back( yymsp[0].minor.yy124 );
                  yy_destructor(yypParser,17,&yymsp[-1].minor);
}
#line 2830 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 29: /* expr_index ::= LPN expr_assign RPN */
#line 316 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy191 = p->resolve( yymsp[-1].minor.yy191 );
                    switch ( yymsp[-1].minor.yy191->kind )
                    {
                    case XEC_EXPR_KEY:
                    case XEC_EXPR_INKEY:
                    case XEC_EXPR_CALL:
                    case XEC_EXPR_CALLKEY:
                    case XEC_EXPR_CALLINKEY:
                    case XEC_EXPR_YIELD:
                    case XEC_EXPR_VARARG:
                    case XEC_EXPR_UNPACK:
                    case XEC_EXPR_LIST:
                    case XEC_EXPR_ASSIGN_LIST:
                        yygotominor.yy191 = p->alloc< xec_expr_mono >( yymsp[-1].minor.yy191->sloc, yymsp[-1].minor.yy191 );
                        break;
                        
                    default:
                        yygotominor.yy191 = yymsp[-1].minor.yy191;
                        break;
                    }
                  yy_destructor(yypParser,7,&yymsp[-2].minor);
  yy_destructor(yypParser,10,&yymsp[0].minor);
}
#line 2858 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 30: /* expr_index ::= name PERIOD LSQ expr_value RSQ */
      case 33: /* expr_index ::= expr_index PERIOD LSQ expr_value RSQ */ yytestcase(yyruleno==33);
#line 339 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-4].minor.yy191  = p->resolve( yymsp[-4].minor.yy191 );
                    yymsp[-1].minor.yy191   = p->resolve( yymsp[-1].minor.yy191 );
                    yygotominor.yy191 = p->alloc< xec_expr_inkey >( yymsp[-4].minor.yy191->sloc, yymsp[-4].minor.yy191, yymsp[-1].minor.yy191 );
                  yy_destructor(yypParser,9,&yymsp[-3].minor);
  yy_destructor(yypParser,18,&yymsp[-2].minor);
  yy_destructor(yypParser,19,&yymsp[0].minor);
}
#line 2871 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 31: /* expr_index ::= name LSQ expr_value RSQ */
      case 34: /* expr_index ::= expr_index LSQ expr_value RSQ */ yytestcase(yyruleno==34);
#line 345 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-3].minor.yy191  = p->resolve( yymsp[-3].minor.yy191 );
                    yymsp[-1].minor.yy191 = p->resolve( yymsp[-1].minor.yy191 );
                    yygotominor.yy191 = p->alloc< xec_expr_index >( yymsp[-3].minor.yy191->sloc, yymsp[-3].minor.yy191, yymsp[-1].minor.yy191 );
                  yy_destructor(yypParser,18,&yymsp[-2].minor);
  yy_destructor(yypParser,19,&yymsp[0].minor);
}
#line 2883 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 32: /* expr_index ::= expr_index PERIOD IDENTIFIER */
#line 351 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-2].minor.yy191  = p->resolve( yymsp[-2].minor.yy191 );
                    yygotominor.yy191 = p->alloc< xec_expr_key >( yymsp[-2].minor.yy191->sloc, yymsp[-2].minor.yy191, yymsp[0].minor.yy0->text );
                    p->destroy( yymsp[0].minor.yy0 );
                  yy_destructor(yypParser,9,&yymsp[-1].minor);
}
#line 2893 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 35: /* expr_yield ::= YIELD LPN RPN */
#line 372 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy143 = p->alloc< xec_expr_yield >( yymsp[-2].minor.yy0->sloc, nullptr );
                    p->destroy( yymsp[-2].minor.yy0 );
                  yy_destructor(yypParser,7,&yymsp[-1].minor);
  yy_destructor(yypParser,10,&yymsp[0].minor);
}
#line 2903 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 36: /* expr_yield ::= YIELD LPN expr_list RPN */
#line 378 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy143 = p->alloc< xec_expr_yield >(
                            yymsp[-3].minor.yy0->sloc, p->list( p->resolve( yymsp[-1].minor.yy191 ) ) );
                    p->destroy( yymsp[-3].minor.yy0 );
                  yy_destructor(yypParser,7,&yymsp[-2].minor);
  yy_destructor(yypParser,10,&yymsp[0].minor);
}
#line 2914 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 37: /* expr_new ::= NEW name expr_paren */
#line 386 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy191 = p->resolve( yymsp[-1].minor.yy191 );
                    yygotominor.yy191 = p->alloc< xec_new_new >(
                            yymsp[-2].minor.yy0->sloc, yymsp[-1].minor.yy191, p->list( p->resolve( yymsp[0].minor.yy191 ) ) );
                    p->destroy( yymsp[-2].minor.yy0 );
                }
#line 2924 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 38: /* expr_new ::= NEW expr_index expr_paren */
#line 393 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy191 = p->alloc< xec_new_new >(
                            yymsp[-2].minor.yy0->sloc, yymsp[-1].minor.yy191, p->list( p->resolve( yymsp[0].minor.yy191 ) ) );
                    p->destroy( yymsp[-2].minor.yy0 );
                }
#line 2933 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 39: /* expr_call ::= proto expr_paren */
#line 401 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    xec_expr_call* call = p->resolve( yymsp[-1].minor.yy55 );
                    yygotominor.yy252 = p->alloc< xec_expr_call >(
                            call->sloc, call, p->list( p->resolve( yymsp[0].minor.yy191 ) ) );
                }
#line 2942 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 40: /* expr_call ::= expr_index expr_paren */
      case 42: /* expr_call ::= expr_new expr_paren */ yytestcase(yyruleno==42);
      case 44: /* expr_call ::= expr_postfix expr_paren */ yytestcase(yyruleno==44);
#line 407 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy252 = p->alloc< xec_expr_call >(
                            yymsp[-1].minor.yy191->sloc, yymsp[-1].minor.yy191, p->list( p->resolve( yymsp[0].minor.yy191 ) ) );
                }
#line 2952 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 41: /* expr_call ::= expr_yield expr_paren */
#line 412 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy252 = p->alloc< xec_expr_call >(
                            yymsp[-1].minor.yy143->sloc, yymsp[-1].minor.yy143, p->list( p->resolve( yymsp[0].minor.yy191 ) ) );
                }
#line 2960 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 43: /* expr_call ::= expr_call expr_paren */
#line 422 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy252 = p->alloc< xec_expr_call >(
                            yymsp[-1].minor.yy252->sloc, yymsp[-1].minor.yy252, p->list( p->resolve( yymsp[0].minor.yy191 ) ) );
                }
#line 2968 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 45: /* expr_postfix ::= proto PERIOD IDENTIFIER */
#line 434 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    xec_expr_call* call = p->resolve( yymsp[-2].minor.yy55 );
                    yygotominor.yy191 = p->alloc< xec_expr_key >(
                             call->sloc, call, yymsp[0].minor.yy0->text );
                    p->destroy( yymsp[0].minor.yy0 );
                  yy_destructor(yypParser,9,&yymsp[-1].minor);
}
#line 2979 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 46: /* expr_postfix ::= proto PERIOD LSQ expr_value RSQ */
#line 441 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    xec_expr_call* call = p->resolve( yymsp[-4].minor.yy55 );
                    yymsp[-1].minor.yy191 = p->resolve( yymsp[-1].minor.yy191 );
                    yygotominor.yy191 = p->alloc< xec_expr_inkey >(
                             call->sloc, call, yymsp[-1].minor.yy191 );
                  yy_destructor(yypParser,9,&yymsp[-3].minor);
  yy_destructor(yypParser,18,&yymsp[-2].minor);
  yy_destructor(yypParser,19,&yymsp[0].minor);
}
#line 2992 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 47: /* expr_postfix ::= proto LSQ expr_value RSQ */
#line 448 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    xec_expr_call* call = p->resolve( yymsp[-3].minor.yy55 );
                    yymsp[-1].minor.yy191 = p->resolve( yymsp[-1].minor.yy191 );
                    yygotominor.yy191 = p->alloc< xec_expr_index >(
                             call->sloc, call, yymsp[-1].minor.yy191 );
                  yy_destructor(yypParser,18,&yymsp[-2].minor);
  yy_destructor(yypParser,19,&yymsp[0].minor);
}
#line 3004 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 48: /* expr_postfix ::= expr_yield PERIOD IDENTIFIER */
#line 455 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy191 = p->alloc< xec_expr_key >(
                             yymsp[-2].minor.yy143->sloc, yymsp[-2].minor.yy143, yymsp[0].minor.yy0->text );
                    p->destroy( yymsp[0].minor.yy0 );
                  yy_destructor(yypParser,9,&yymsp[-1].minor);
}
#line 3014 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 49: /* expr_postfix ::= expr_yield PERIOD LSQ expr_value RSQ */
#line 461 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy191 = p->resolve( yymsp[-1].minor.yy191 );
                    yygotominor.yy191 = p->alloc< xec_expr_inkey >(
                             yymsp[-4].minor.yy143->sloc, yymsp[-4].minor.yy143, yymsp[-1].minor.yy191 );
                  yy_destructor(yypParser,9,&yymsp[-3].minor);
  yy_destructor(yypParser,18,&yymsp[-2].minor);
  yy_destructor(yypParser,19,&yymsp[0].minor);
}
#line 3026 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 50: /* expr_postfix ::= expr_yield LSQ expr_value RSQ */
#line 467 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy191 = p->resolve( yymsp[-1].minor.yy191 );
                    yygotominor.yy191 = p->alloc< xec_expr_index >(
                             yymsp[-3].minor.yy143->sloc, yymsp[-3].minor.yy143, yymsp[-1].minor.yy191 );
                  yy_destructor(yypParser,18,&yymsp[-2].minor);
  yy_destructor(yypParser,19,&yymsp[0].minor);
}
#line 3037 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 51: /* expr_postfix ::= expr_new PERIOD IDENTIFIER */
      case 57: /* expr_postfix ::= expr_postfix PERIOD IDENTIFIER */ yytestcase(yyruleno==57);
#line 473 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy191 = p->alloc< xec_expr_key >(
                             yymsp[-2].minor.yy191->sloc, yymsp[-2].minor.yy191, yymsp[0].minor.yy0->text );
                    p->destroy( yymsp[0].minor.yy0 );
                  yy_destructor(yypParser,9,&yymsp[-1].minor);
}
#line 3048 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 52: /* expr_postfix ::= expr_new PERIOD LSQ expr_value RSQ */
      case 58: /* expr_postfix ::= expr_postfix PERIOD LSQ expr_value RSQ */ yytestcase(yyruleno==58);
#line 479 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy191 = p->resolve( yymsp[-1].minor.yy191 );
                    yygotominor.yy191 = p->alloc< xec_expr_inkey >(
                             yymsp[-4].minor.yy191->sloc, yymsp[-4].minor.yy191, yymsp[-1].minor.yy191 );
                  yy_destructor(yypParser,9,&yymsp[-3].minor);
  yy_destructor(yypParser,18,&yymsp[-2].minor);
  yy_destructor(yypParser,19,&yymsp[0].minor);
}
#line 3061 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 53: /* expr_postfix ::= expr_new LSQ expr_value RSQ */
      case 59: /* expr_postfix ::= expr_postfix LSQ expr_value RSQ */ yytestcase(yyruleno==59);
#line 485 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy191 = p->resolve( yymsp[-1].minor.yy191 );
                    yygotominor.yy191 = p->alloc< xec_expr_index >(
                             yymsp[-3].minor.yy191->sloc, yymsp[-3].minor.yy191, yymsp[-1].minor.yy191 );
                  yy_destructor(yypParser,18,&yymsp[-2].minor);
  yy_destructor(yypParser,19,&yymsp[0].minor);
}
#line 3073 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 54: /* expr_postfix ::= expr_call PERIOD IDENTIFIER */
#line 491 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy191 = p->alloc< xec_expr_key >(
                             yymsp[-2].minor.yy252->sloc, yymsp[-2].minor.yy252, yymsp[0].minor.yy0->text );
                    p->destroy( yymsp[0].minor.yy0 );
                  yy_destructor(yypParser,9,&yymsp[-1].minor);
}
#line 3083 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 55: /* expr_postfix ::= expr_call PERIOD LSQ expr_value RSQ */
#line 497 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy191 = p->resolve( yymsp[-1].minor.yy191 );
                    yygotominor.yy191 = p->alloc< xec_expr_inkey >(
                             yymsp[-4].minor.yy252->sloc, yymsp[-4].minor.yy252, yymsp[-1].minor.yy191 );
                  yy_destructor(yypParser,9,&yymsp[-3].minor);
  yy_destructor(yypParser,18,&yymsp[-2].minor);
  yy_destructor(yypParser,19,&yymsp[0].minor);
}
#line 3095 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 56: /* expr_postfix ::= expr_call LSQ expr_value RSQ */
#line 503 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy191 = p->resolve( yymsp[-1].minor.yy191 );
                    yygotominor.yy191 = p->alloc< xec_expr_index >(
                             yymsp[-3].minor.yy252->sloc, yymsp[-3].minor.yy252, yymsp[-1].minor.yy191 );
                  yy_destructor(yypParser,18,&yymsp[-2].minor);
  yy_destructor(yypParser,19,&yymsp[0].minor);
}
#line 3106 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 60: /* expr_simple ::= name */
#line 533 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    // Don't resolve the name here, as it may be a parameter
                    // declaration for a prototype or function.
                    yygotominor.yy191 = yymsp[0].minor.yy191;
                }
#line 3115 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 61: /* expr_simple ::= proto */
#line 539 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy191 = p->resolve( yymsp[0].minor.yy55 );
                }
#line 3122 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 62: /* expr_simple ::= expr_index */
      case 64: /* expr_simple ::= expr_new */ yytestcase(yyruleno==64);
      case 66: /* expr_simple ::= expr_postfix */ yytestcase(yyruleno==66);
      case 69: /* expr_literal ::= expr_simple */ yytestcase(yyruleno==69);
      case 75: /* expr_suffix ::= expr_literal */ yytestcase(yyruleno==75);
      case 78: /* expr_unary ::= expr_suffix */ yytestcase(yyruleno==78);
      case 85: /* expr_mul ::= expr_unary */ yytestcase(yyruleno==85);
      case 90: /* expr_add ::= expr_mul */ yytestcase(yyruleno==90);
      case 93: /* expr_shift ::= expr_add */ yytestcase(yyruleno==93);
      case 97: /* expr_bitand ::= expr_shift */ yytestcase(yyruleno==97);
      case 99: /* expr_bitxor ::= expr_bitand */ yytestcase(yyruleno==99);
      case 101: /* expr_bitor ::= expr_bitxor */ yytestcase(yyruleno==101);
      case 103: /* expr_concat ::= expr_bitor */ yytestcase(yyruleno==103);
      case 105: /* expr_compare ::= expr_concat */ yytestcase(yyruleno==105);
      case 117: /* expr_and ::= expr_compare */ yytestcase(yyruleno==117);
      case 119: /* expr_xor ::= expr_and */ yytestcase(yyruleno==119);
      case 121: /* expr_or ::= expr_xor */ yytestcase(yyruleno==121);
      case 123: /* expr_nolbr ::= expr_or */ yytestcase(yyruleno==123);
      case 135: /* expr_value ::= expr_nolbr */ yytestcase(yyruleno==135);
      case 138: /* expr_lbody ::= expr_value */ yytestcase(yyruleno==138);
      case 153: /* expr_list ::= expr_final */ yytestcase(yyruleno==153);
      case 154: /* expr_list ::= expr_lbody */ yytestcase(yyruleno==154);
      case 184: /* sexpr_list ::= expr_final */ yytestcase(yyruleno==184);
      case 185: /* sexpr_list ::= sexpr_lbody */ yytestcase(yyruleno==185);
      case 187: /* sexpr_assign ::= sexpr_list */ yytestcase(yyruleno==187);
      case 189: /* condition ::= expr_assign */ yytestcase(yyruleno==189);
      case 200: /* stmt ::= stmt_common */ yytestcase(yyruleno==200);
      case 203: /* stmt_reuse ::= stmt_common */ yytestcase(yyruleno==203);
      case 214: /* stmt_common ::= stmt_try */ yytestcase(yyruleno==214);
#line 543 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy191 = yymsp[0].minor.yy191;
                }
#line 3157 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 63: /* expr_simple ::= expr_yield */
#line 547 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy191 = yymsp[0].minor.yy143;
                }
#line 3164 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 65: /* expr_simple ::= expr_call */
#line 555 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy191 = yymsp[0].minor.yy252;
                }
#line 3171 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 67: /* expr_simple ::= proto YIELD */
#line 563 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    xec_expr_call* call = p->resolve( yymsp[-1].minor.yy55 );
                    call->yieldcall = true;
                    yygotominor.yy191 = call;
                  yy_destructor(yypParser,6,&yymsp[0].minor);
}
#line 3181 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 68: /* expr_simple ::= expr_call YIELD */
#line 569 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy252->yieldcall = true;
                    yygotominor.yy191 = yymsp[-1].minor.yy252;
                  yy_destructor(yypParser,6,&yymsp[0].minor);
}
#line 3190 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 70: /* expr_literal ::= NULL */
#line 579 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy191 = p->alloc< xec_expr_null >( yymsp[0].minor.yy0->sloc );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3198 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 71: /* expr_literal ::= TRUE */
#line 584 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy191 = p->alloc< xec_expr_bool >( yymsp[0].minor.yy0->sloc, true );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3206 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 72: /* expr_literal ::= FALSE */
#line 589 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy191 = p->alloc< xec_expr_bool >( yymsp[0].minor.yy0->sloc, false );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3214 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 73: /* expr_literal ::= NUMBER */
#line 594 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    double number = p->parse_number( yymsp[0].minor.yy0 );
                    yygotominor.yy191 = p->alloc< xec_expr_number >( yymsp[0].minor.yy0->sloc, number );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3223 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 74: /* expr_literal ::= STRING */
#line 600 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy191 = p->alloc< xec_expr_string >(
                            yymsp[0].minor.yy0->sloc, yymsp[0].minor.yy0->text, yymsp[0].minor.yy0->size );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3232 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 76: /* expr_suffix ::= expr_suffix INCREMENT */
      case 77: /* expr_suffix ::= expr_suffix DECREMENT */ yytestcase(yyruleno==77);
#line 611 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy191 = p->resolve( yymsp[-1].minor.yy191 );
                    yymsp[-1].minor.yy191 = p->lvalue( yymsp[-1].minor.yy191 );
                    yygotominor.yy191 = p->alloc< xec_expr_postop >(
                             yymsp[-1].minor.yy191->sloc, yymsp[0].minor.yy0->kind, yymsp[-1].minor.yy191 );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3244 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 79: /* expr_unary ::= PLUS expr_unary */
      case 80: /* expr_unary ::= MINUS expr_unary */ yytestcase(yyruleno==80);
      case 81: /* expr_unary ::= XMARK expr_unary */ yytestcase(yyruleno==81);
      case 82: /* expr_unary ::= TILDE expr_unary */ yytestcase(yyruleno==82);
#line 632 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[0].minor.yy191 = p->resolve( yymsp[0].minor.yy191 );
                    yygotominor.yy191 = p->alloc< xec_expr_unary >(
                             yymsp[-1].minor.yy0->sloc, yymsp[-1].minor.yy0->kind, yymsp[0].minor.yy191 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 3257 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 83: /* expr_unary ::= INCREMENT expr_unary */
      case 84: /* expr_unary ::= DECREMENT expr_unary */ yytestcase(yyruleno==84);
#line 660 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[0].minor.yy191 = p->resolve( yymsp[0].minor.yy191 );
                    yymsp[0].minor.yy191 = p->lvalue( yymsp[0].minor.yy191 );
                    yygotominor.yy191 = p->alloc< xec_expr_preop >(
                             yymsp[-1].minor.yy0->sloc, yymsp[-1].minor.yy0->kind, yymsp[0].minor.yy191 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 3269 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 86: /* expr_mul ::= expr_mul ASTERISK expr_unary */
      case 87: /* expr_mul ::= expr_mul SOLIDUS expr_unary */ yytestcase(yyruleno==87);
      case 88: /* expr_mul ::= expr_mul PERCENT expr_unary */ yytestcase(yyruleno==88);
      case 89: /* expr_mul ::= expr_mul TILDE expr_unary */ yytestcase(yyruleno==89);
      case 91: /* expr_add ::= expr_add PLUS expr_mul */ yytestcase(yyruleno==91);
      case 92: /* expr_add ::= expr_add MINUS expr_mul */ yytestcase(yyruleno==92);
      case 94: /* expr_shift ::= expr_shift LSHIFT expr_add */ yytestcase(yyruleno==94);
      case 95: /* expr_shift ::= expr_shift RSHIFT expr_add */ yytestcase(yyruleno==95);
      case 96: /* expr_shift ::= expr_shift URSHIFT expr_add */ yytestcase(yyruleno==96);
      case 98: /* expr_bitand ::= expr_bitand AMPERSAND expr_shift */ yytestcase(yyruleno==98);
      case 100: /* expr_bitxor ::= expr_bitxor CARET expr_bitand */ yytestcase(yyruleno==100);
      case 102: /* expr_bitor ::= expr_bitor VBAR expr_bitxor */ yytestcase(yyruleno==102);
      case 104: /* expr_concat ::= expr_concat CONCATENATE expr_bitor */ yytestcase(yyruleno==104);
#line 681 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-2].minor.yy191 = p->resolve( yymsp[-2].minor.yy191 );
                    yymsp[0].minor.yy191 = p->resolve( yymsp[0].minor.yy191 );
                    yygotominor.yy191 = p->alloc< xec_expr_binary >(
                                    yymsp[-2].minor.yy191->sloc, yymsp[-1].minor.yy0->kind, yymsp[-2].minor.yy191, yymsp[0].minor.yy191 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 3292 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 106: /* expr_compare ::= expr_compare compare_op expr_concat */
#line 820 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-2].minor.yy191 = p->resolve( yymsp[-2].minor.yy191 );
                    yymsp[0].minor.yy191 = p->resolve( yymsp[0].minor.yy191 );
                    yygotominor.yy191 = p->compare( yymsp[-1].minor.yy91, yymsp[-2].minor.yy191, yymsp[0].minor.yy191 );
                    p->destroy( yymsp[-1].minor.yy91 );
                }
#line 3302 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 107: /* compare_op ::= EQUAL */
      case 108: /* compare_op ::= NOTEQUAL */ yytestcase(yyruleno==108);
      case 109: /* compare_op ::= LESS */ yytestcase(yyruleno==109);
      case 110: /* compare_op ::= GREATER */ yytestcase(yyruleno==110);
      case 111: /* compare_op ::= LESSEQUAL */ yytestcase(yyruleno==111);
      case 112: /* compare_op ::= GREATEREQUAL */ yytestcase(yyruleno==112);
      case 113: /* compare_op ::= IN */ yytestcase(yyruleno==113);
      case 114: /* compare_op ::= NOTIN */ yytestcase(yyruleno==114);
      case 115: /* compare_op ::= IS */ yytestcase(yyruleno==115);
      case 116: /* compare_op ::= NOTIS */ yytestcase(yyruleno==116);
      case 158: /* assign_op ::= ASSIGN */ yytestcase(yyruleno==158);
      case 159: /* assign_op ::= MULASSIGN */ yytestcase(yyruleno==159);
      case 160: /* assign_op ::= DIVASSIGN */ yytestcase(yyruleno==160);
      case 161: /* assign_op ::= MODASSIGN */ yytestcase(yyruleno==161);
      case 162: /* assign_op ::= INTDIVASSIGN */ yytestcase(yyruleno==162);
      case 163: /* assign_op ::= ADDASSIGN */ yytestcase(yyruleno==163);
      case 164: /* assign_op ::= SUBASSIGN */ yytestcase(yyruleno==164);
      case 165: /* assign_op ::= LSHIFTASSIGN */ yytestcase(yyruleno==165);
      case 166: /* assign_op ::= RSHIFTASSIGN */ yytestcase(yyruleno==166);
      case 167: /* assign_op ::= URSHIFTASSIGN */ yytestcase(yyruleno==167);
      case 168: /* assign_op ::= BITANDASSIGN */ yytestcase(yyruleno==168);
      case 169: /* assign_op ::= BITXORASSIGN */ yytestcase(yyruleno==169);
      case 170: /* assign_op ::= BITORASSIGN */ yytestcase(yyruleno==170);
      case 246: /* token_yield ::= YIELD */ yytestcase(yyruleno==246);
#line 828 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy91 = yymsp[0].minor.yy0;
                }
#line 3332 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 118: /* expr_and ::= expr_and LOGICAND expr_compare */
      case 120: /* expr_xor ::= expr_xor LOGICXOR expr_and */ yytestcase(yyruleno==120);
      case 122: /* expr_or ::= expr_or LOGICOR expr_xor */ yytestcase(yyruleno==122);
#line 874 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-2].minor.yy191 = p->resolve( yymsp[-2].minor.yy191 );
                    yymsp[0].minor.yy191 = p->resolve( yymsp[0].minor.yy191 );
                    yygotominor.yy191 = p->alloc< xec_expr_logical >(
                                    yymsp[-2].minor.yy191->sloc, yymsp[-1].minor.yy0->kind, yymsp[-2].minor.yy191, yymsp[0].minor.yy191 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 3345 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 124: /* expr_nolbr ::= expr_or QMARK expr_value COLON expr_value */
#line 915 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-4].minor.yy191 = p->resolve( yymsp[-4].minor.yy191 );
                    yymsp[-2].minor.yy191    = p->resolve( yymsp[-2].minor.yy191 );
                    yymsp[0].minor.yy191   = p->resolve( yymsp[0].minor.yy191 );
                    yygotominor.yy191 = p->alloc< xec_expr_qmark >(
                            yymsp[-4].minor.yy191->sloc, yymsp[-4].minor.yy191, yymsp[-2].minor.yy191, yymsp[0].minor.yy191 );
                  yy_destructor(yypParser,55,&yymsp[-3].minor);
  yy_destructor(yypParser,13,&yymsp[-1].minor);
}
#line 3358 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 125: /* expr_nolbr ::= LSQ RSQ */
#line 923 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy191 = p->alloc< xec_new_list >( yymsp[-1].minor.yy0->sloc );
                    p->destroy( yymsp[-1].minor.yy0 );
                  yy_destructor(yypParser,19,&yymsp[0].minor);
}
#line 3367 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 126: /* expr_nolbr ::= LSQ value_list RSQ */
#line 928 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy191 = yymsp[-1].minor.yy92;
                    yygotominor.yy191->sloc = yymsp[-2].minor.yy0->sloc;
                    p->destroy( yymsp[-2].minor.yy0 );
                  yy_destructor(yypParser,19,&yymsp[0].minor);
}
#line 3377 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 127: /* expr_nolbr ::= newobj_lbr object_decls RBR */
#line 934 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy191 = yymsp[-2].minor.yy230;
                    p->close_scope( yymsp[-2].minor.yy230->scope );
                  yy_destructor(yypParser,119,&yymsp[-1].minor);
  yy_destructor(yypParser,11,&yymsp[0].minor);
}
#line 3387 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 128: /* expr_nolbr ::= newfunc_lbr stmt_list RBR */
#line 939 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy191 = yymsp[-2].minor.yy93;
                    p->close_scope( yymsp[-2].minor.yy93->scope );
                  yy_destructor(yypParser,114,&yymsp[-1].minor);
  yy_destructor(yypParser,11,&yymsp[0].minor);
}
#line 3397 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 129: /* newobj_lbr ::= COLON LBR */
#line 945 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy230 = p->object( yymsp[-1].minor.yy0->sloc, nullptr, nullptr );
                    p->destroy( yymsp[-1].minor.yy0 );
                  yy_destructor(yypParser,12,&yymsp[0].minor);
}
#line 3406 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 130: /* newobj_lbr ::= COLON expr_simple LBR */
#line 950 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy191 = p->resolve( yymsp[-1].minor.yy191 );
                    yygotominor.yy230 = p->object( yymsp[-2].minor.yy0->sloc, nullptr, yymsp[-1].minor.yy191 );
                    p->destroy( yymsp[-2].minor.yy0 );
                  yy_destructor(yypParser,12,&yymsp[0].minor);
}
#line 3416 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 131: /* newfunc_lbr ::= QMARK expr_paren LBR */
#line 957 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy93 = p->function( yymsp[-2].minor.yy0->sloc,
                                    nullptr, yymsp[-1].minor.yy191, false, false );
                    p->destroy( yymsp[-2].minor.yy0 );
                  yy_destructor(yypParser,12,&yymsp[0].minor);
}
#line 3426 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 132: /* newfunc_lbr ::= PERIOD QMARK expr_paren LBR */
#line 963 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy93 = p->function( yymsp[-3].minor.yy0->sloc,
                                    nullptr, yymsp[-1].minor.yy191, false, true );
                    p->destroy( yymsp[-3].minor.yy0 );
                  yy_destructor(yypParser,55,&yymsp[-2].minor);
  yy_destructor(yypParser,12,&yymsp[0].minor);
}
#line 3437 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 133: /* newfunc_lbr ::= QMARK expr_paren YIELD LBR */
#line 969 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy93 = p->function( yymsp[-3].minor.yy0->sloc,
                                    nullptr, yymsp[-2].minor.yy191, true, false );
                    p->destroy( yymsp[-3].minor.yy0 );
                  yy_destructor(yypParser,6,&yymsp[-1].minor);
  yy_destructor(yypParser,12,&yymsp[0].minor);
}
#line 3448 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 134: /* newfunc_lbr ::= PERIOD QMARK expr_paren YIELD LBR */
#line 975 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy93 = p->function( yymsp[-4].minor.yy0->sloc,
                                    nullptr, yymsp[-2].minor.yy191, true, true );
                    p->destroy( yymsp[-4].minor.yy0 );
                  yy_destructor(yypParser,55,&yymsp[-3].minor);
  yy_destructor(yypParser,6,&yymsp[-1].minor);
  yy_destructor(yypParser,12,&yymsp[0].minor);
}
#line 3460 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 136: /* expr_value ::= LBR RBR */
#line 988 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy191 = p->alloc< xec_new_table >( yymsp[-1].minor.yy0->sloc );
                    p->destroy( yymsp[-1].minor.yy0 );
                  yy_destructor(yypParser,11,&yymsp[0].minor);
}
#line 3469 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 137: /* expr_value ::= LBR keyval_list RBR */
#line 993 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy191 = yymsp[-1].minor.yy287;
                    yygotominor.yy191->sloc = yymsp[-2].minor.yy0->sloc;
                    p->destroy( yymsp[-2].minor.yy0 );
                  yy_destructor(yypParser,11,&yymsp[0].minor);
}
#line 3479 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 139: /* expr_lbody ::= expr_lbody COMMA expr_value */
#line 1004 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    // Do not resolve.
                    yygotominor.yy191 = p->append( yymsp[-2].minor.yy191, yymsp[0].minor.yy191 );
                  yy_destructor(yypParser,17,&yymsp[-1].minor);
}
#line 3488 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 140: /* expr_final ::= ELLIPSIS */
#line 1011 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy191 = p->alloc< xec_expr_vararg >( yymsp[0].minor.yy0->sloc );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3496 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 141: /* expr_final ::= proto ELLIPSIS */
#line 1016 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    xec_expr_call* call = p->resolve( yymsp[-1].minor.yy55 );
                    call->unpack = true;
                    yygotominor.yy191 = call;
                  yy_destructor(yypParser,56,&yymsp[0].minor);
}
#line 3506 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 142: /* expr_final ::= expr_call ELLIPSIS */
#line 1022 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy252->unpack = true;
                    yygotominor.yy191 = yymsp[-1].minor.yy252;
                  yy_destructor(yypParser,56,&yymsp[0].minor);
}
#line 3515 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 143: /* expr_final ::= expr_yield ELLIPSIS */
#line 1027 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy143->unpack = true;
                    yygotominor.yy191 = yymsp[-1].minor.yy143;
                  yy_destructor(yypParser,56,&yymsp[0].minor);
}
#line 3524 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 144: /* expr_final ::= proto YIELD ELLIPSIS */
#line 1032 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    xec_expr_call* call = p->resolve( yymsp[-2].minor.yy55 );
                    call->yieldcall = true;
                    call->unpack = true;
                    yygotominor.yy191 = call;
                  yy_destructor(yypParser,6,&yymsp[-1].minor);
  yy_destructor(yypParser,56,&yymsp[0].minor);
}
#line 3536 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 145: /* expr_final ::= expr_call YIELD ELLIPSIS */
#line 1039 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-2].minor.yy252->yieldcall = true;
                    yymsp[-2].minor.yy252->unpack = true;
                    yygotominor.yy191 = yymsp[-2].minor.yy252;
                  yy_destructor(yypParser,6,&yymsp[-1].minor);
  yy_destructor(yypParser,56,&yymsp[0].minor);
}
#line 3547 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 146: /* expr_final ::= name LSQ RSQ ELLIPSIS */
#line 1045 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-3].minor.yy191 = p->resolve( yymsp[-3].minor.yy191 );
                    yygotominor.yy191 = p->alloc< xec_expr_unpack >( yymsp[-3].minor.yy191->sloc, yymsp[-3].minor.yy191 );
                  yy_destructor(yypParser,18,&yymsp[-2].minor);
  yy_destructor(yypParser,19,&yymsp[-1].minor);
  yy_destructor(yypParser,56,&yymsp[0].minor);
}
#line 3558 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 147: /* expr_final ::= proto LSQ RSQ ELLIPSIS */
#line 1050 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    xec_expr_call* call = p->resolve( yymsp[-3].minor.yy55 );
                    yygotominor.yy191 = p->alloc< xec_expr_unpack >( call->sloc, call );
                  yy_destructor(yypParser,18,&yymsp[-2].minor);
  yy_destructor(yypParser,19,&yymsp[-1].minor);
  yy_destructor(yypParser,56,&yymsp[0].minor);
}
#line 3569 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 148: /* expr_final ::= expr_index LSQ RSQ ELLIPSIS */
      case 150: /* expr_final ::= expr_new LSQ RSQ ELLIPSIS */ yytestcase(yyruleno==150);
      case 152: /* expr_final ::= expr_postfix LSQ RSQ ELLIPSIS */ yytestcase(yyruleno==152);
#line 1055 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy191 = p->alloc< xec_expr_unpack >( yymsp[-3].minor.yy191->sloc, yymsp[-3].minor.yy191 );
                  yy_destructor(yypParser,18,&yymsp[-2].minor);
  yy_destructor(yypParser,19,&yymsp[-1].minor);
  yy_destructor(yypParser,56,&yymsp[0].minor);
}
#line 3581 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 149: /* expr_final ::= expr_yield LSQ RSQ ELLIPSIS */
#line 1059 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy191 = p->alloc< xec_expr_unpack >( yymsp[-3].minor.yy143->sloc, yymsp[-3].minor.yy143 );
                  yy_destructor(yypParser,18,&yymsp[-2].minor);
  yy_destructor(yypParser,19,&yymsp[-1].minor);
  yy_destructor(yypParser,56,&yymsp[0].minor);
}
#line 3591 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 151: /* expr_final ::= expr_call LSQ RSQ ELLIPSIS */
#line 1067 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy191 = p->alloc< xec_expr_unpack >( yymsp[-3].minor.yy252->sloc, yymsp[-3].minor.yy252 );
                  yy_destructor(yypParser,18,&yymsp[-2].minor);
  yy_destructor(yypParser,19,&yymsp[-1].minor);
  yy_destructor(yypParser,56,&yymsp[0].minor);
}
#line 3601 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 155: /* expr_list ::= expr_lbody COMMA expr_final */
      case 186: /* sexpr_list ::= sexpr_lbody COMMA expr_final */ yytestcase(yyruleno==186);
#line 1084 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy191 = p->final( yymsp[-2].minor.yy191, yymsp[0].minor.yy191 );
                  yy_destructor(yypParser,17,&yymsp[-1].minor);
}
#line 3610 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 156: /* expr_assign ::= expr_list */
      case 182: /* sexpr_lbody ::= expr_nolbr */ yytestcase(yyruleno==182);
#line 1089 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[0].minor.yy191 = p->resolve( yymsp[0].minor.yy191 );
                    yygotominor.yy191 = yymsp[0].minor.yy191;
                }
#line 3619 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 157: /* expr_assign ::= expr_lbody assign_op expr_assign */
#line 1094 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-2].minor.yy191 = p->resolve( yymsp[-2].minor.yy191 );
                    yymsp[0].minor.yy191 = p->resolve( yymsp[0].minor.yy191 );
                    yygotominor.yy191 = p->assign( yymsp[-1].minor.yy91, yymsp[-2].minor.yy191, yymsp[0].minor.yy191 );
                    p->destroy( yymsp[-1].minor.yy91 );
                }
#line 3629 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 171: /* value_lbody ::= expr_value */
#line 1157 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[0].minor.yy191 = p->resolve( yymsp[0].minor.yy191 );
                    yygotominor.yy92 = p->alloc< xec_new_list >( -1 );
                    yygotominor.yy92->values.push_back( yymsp[0].minor.yy191 );
                }
#line 3638 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 172: /* value_lbody ::= value_lbody COMMA expr_value */
#line 1163 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[0].minor.yy191 = p->resolve( yymsp[0].minor.yy191 );
                    yygotominor.yy92 = yymsp[-2].minor.yy92;
                    yygotominor.yy92->values.push_back( yymsp[0].minor.yy191 );
                  yy_destructor(yypParser,17,&yymsp[-1].minor);
}
#line 3648 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 173: /* value_list ::= expr_final */
#line 1170 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy92 = p->alloc< xec_new_list >( -1 );
                    yygotominor.yy92->unpack = yymsp[0].minor.yy191;
                }
#line 3656 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 174: /* value_list ::= expr_final COMMA */
#line 1175 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy92 = p->alloc< xec_new_list >( -1 );
                    yygotominor.yy92->unpack = yymsp[-1].minor.yy191;
                  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 3665 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 175: /* value_list ::= value_lbody */
#line 1180 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy92 = yymsp[0].minor.yy92;
                }
#line 3672 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 176: /* value_list ::= value_lbody COMMA */
#line 1184 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy92 = yymsp[-1].minor.yy92;
                  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 3680 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 177: /* value_list ::= value_lbody COMMA expr_final */
#line 1188 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy92 = yymsp[-2].minor.yy92;
                    yygotominor.yy92->unpack = yymsp[0].minor.yy191;
                  yy_destructor(yypParser,17,&yymsp[-1].minor);
}
#line 3689 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 178: /* keyval_lbody ::= expr_value COLON expr_value */
#line 1195 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-2].minor.yy191   = p->resolve( yymsp[-2].minor.yy191 );
                    yymsp[0].minor.yy191 = p->resolve( yymsp[0].minor.yy191 );
                    yygotominor.yy287 = new xec_new_table( -1 );
                    yygotominor.yy287->elements.emplace_back( yymsp[-2].minor.yy191, yymsp[0].minor.yy191 );
                  yy_destructor(yypParser,13,&yymsp[-1].minor);
}
#line 3700 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 179: /* keyval_lbody ::= keyval_lbody COMMA expr_value COLON expr_value */
#line 1203 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-2].minor.yy191   = p->resolve( yymsp[-2].minor.yy191 );
                    yymsp[0].minor.yy191 = p->resolve( yymsp[0].minor.yy191 );
                    yygotominor.yy287 = yymsp[-4].minor.yy287;
                    yygotominor.yy287->elements.emplace_back( yymsp[-2].minor.yy191, yymsp[0].minor.yy191 );
                  yy_destructor(yypParser,17,&yymsp[-3].minor);
  yy_destructor(yypParser,13,&yymsp[-1].minor);
}
#line 3712 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 180: /* keyval_list ::= keyval_lbody */
#line 1211 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy287 = yymsp[0].minor.yy287;
                }
#line 3719 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 181: /* keyval_list ::= keyval_lbody COMMA */
#line 1215 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy287 = yymsp[-1].minor.yy287;
                  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 3727 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 183: /* sexpr_lbody ::= sexpr_lbody COMMA expr_value */
#line 1232 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[0].minor.yy191 = p->resolve( yymsp[0].minor.yy191 );
                    yygotominor.yy191 = p->append( yymsp[-2].minor.yy191, yymsp[0].minor.yy191 );
                  yy_destructor(yypParser,17,&yymsp[-1].minor);
}
#line 3736 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 188: /* sexpr_assign ::= sexpr_lbody assign_op expr_assign */
#line 1255 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[0].minor.yy191 = p->resolve( yymsp[0].minor.yy191 );
                    yygotominor.yy191 = p->assign( yymsp[-1].minor.yy91, yymsp[-2].minor.yy191, yymsp[0].minor.yy191 );
                    p->destroy( yymsp[-1].minor.yy91 );
                }
#line 3745 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 190: /* condition ::= VAR varname ASSIGN expr_list */
#line 1276 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[0].minor.yy191 = p->resolve( yymsp[0].minor.yy191 );
                    xec_expr_assign* assign = p->alloc< xec_expr_assign >(
                                    yymsp[-3].minor.yy0->sloc, XEC_TOKEN_ASSIGN );
                    assign->lvalue = p->declare_local( yymsp[-2].minor.yy124 );
                    assign->rvalue = yymsp[0].minor.yy191;
                    yygotominor.yy191 = assign;
                    p->destroy( yymsp[-3].minor.yy0 );
                  yy_destructor(yypParser,16,&yymsp[-1].minor);
}
#line 3759 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 191: /* condition ::= VAR varname_list ASSIGN expr_list */
#line 1286 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[0].minor.yy191 = p->resolve( yymsp[0].minor.yy191 );
                    xec_expr_assign_list* assign =
                            p->alloc< xec_expr_assign_list >(
                                    yymsp[-3].minor.yy0->sloc, XEC_TOKEN_ASSIGN );
                    p->declare_local_list( yymsp[-2].minor.yy99, &assign->lvalues );
                    assign->rvalues = yymsp[0].minor.yy191;
                    yygotominor.yy191 = assign;
                    p->destroy( yymsp[-3].minor.yy0 );
                  yy_destructor(yypParser,16,&yymsp[-1].minor);
}
#line 3774 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 193: /* stmt_list ::= stmt_list SEMICOLON */
#line 1305 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,114,&yymsp[-1].minor);
  yy_destructor(yypParser,14,&yymsp[0].minor);
}
#line 3782 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 194: /* stmt_list ::= stmt_list stmt */
#line 1308 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    p->statement( yymsp[0].minor.yy191 );
                  yy_destructor(yypParser,114,&yymsp[-1].minor);
}
#line 3790 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 195: /* stmt_list ::= stmt_list decl_object */
#line 1312 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,114,&yymsp[-1].minor);
  yy_destructor(yypParser,118,&yymsp[0].minor);
}
#line 3798 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 196: /* stmt_list ::= stmt_list decl_func */
#line 1315 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,114,&yymsp[-1].minor);
  yy_destructor(yypParser,122,&yymsp[0].minor);
}
#line 3806 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 197: /* stmt_list ::= stmt_list decl_var SEMICOLON */
#line 1318 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,114,&yymsp[-2].minor);
  yy_destructor(yypParser,124,&yymsp[-1].minor);
  yy_destructor(yypParser,14,&yymsp[0].minor);
}
#line 3815 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 198: /* stmt_list ::= stmt_list decl_noinit SEMICOLON */
#line 1321 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,114,&yymsp[-2].minor);
  yy_destructor(yypParser,125,&yymsp[-1].minor);
  yy_destructor(yypParser,14,&yymsp[0].minor);
}
#line 3824 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 199: /* stmt ::= stmt_lbr stmt_list RBR */
#line 1327 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy191 = yymsp[-2].minor.yy36;
                    p->close_scope( yymsp[-2].minor.yy36->scope );
                  yy_destructor(yypParser,114,&yymsp[-1].minor);
  yy_destructor(yypParser,11,&yymsp[0].minor);
}
#line 3834 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 201: /* stmt_lbr ::= LBR */
#line 1337 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy36 = p->alloc< xec_stmt_block >( yymsp[0].minor.yy0->sloc );
                    yygotominor.yy36->scope = p->block_scope( yygotominor.yy36 );
                    yygotominor.yy36->scope->block = yygotominor.yy36;
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3844 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 202: /* stmt_reuse ::= stmt_lbr_ru stmt_list RBR */
#line 1347 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy191 = yymsp[-2].minor.yy36;
                  yy_destructor(yypParser,114,&yymsp[-1].minor);
  yy_destructor(yypParser,11,&yymsp[0].minor);
}
#line 3853 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 204: /* stmt_lbr_ru ::= LBR */
#line 1356 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy36 = p->alloc< xec_stmt_block >( yymsp[0].minor.yy0->sloc );
                    yygotominor.yy36->scope = p->get_scope();
                    yygotominor.yy36->scope->block = yygotominor.yy36;
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3863 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 205: /* stmt_common ::= sexpr_assign SEMICOLON */
#line 1367 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy191 = yymsp[-1].minor.yy191;
                  yy_destructor(yypParser,14,&yymsp[0].minor);
}
#line 3871 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 206: /* stmt_common ::= stmt_if LPN condition RPN stmt */
#line 1371 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-4].minor.yy208->condition = yymsp[-2].minor.yy191;
                    yymsp[-4].minor.yy208->iftrue    = yymsp[0].minor.yy191;
                    p->close_scope( yymsp[-4].minor.yy208->scope );
                    yygotominor.yy191 = yymsp[-4].minor.yy208;
                  yy_destructor(yypParser,7,&yymsp[-3].minor);
  yy_destructor(yypParser,10,&yymsp[-1].minor);
}
#line 3883 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 207: /* stmt_common ::= stmt_if LPN condition RPN stmt ELSE stmt */
#line 1379 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-6].minor.yy208->condition = yymsp[-4].minor.yy191;
                    yymsp[-6].minor.yy208->iftrue    = yymsp[-2].minor.yy191;
                    yymsp[-6].minor.yy208->iffalse   = yymsp[0].minor.yy191;
                    p->close_scope( yymsp[-6].minor.yy208->scope );
                    yygotominor.yy191 = yymsp[-6].minor.yy208;
                  yy_destructor(yypParser,7,&yymsp[-5].minor);
  yy_destructor(yypParser,10,&yymsp[-3].minor);
  yy_destructor(yypParser,2,&yymsp[-1].minor);
}
#line 3897 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 208: /* stmt_common ::= stmt_switch LPN condition RPN stmt_lbr_ru stmt_list RPN */
#line 1388 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-6].minor.yy199->value     = yymsp[-4].minor.yy191;
                    yymsp[-6].minor.yy199->body      = yymsp[-2].minor.yy36;
                    p->close_scope( yymsp[-6].minor.yy199->scope );
                    yygotominor.yy191 = yymsp[-6].minor.yy199;
                  yy_destructor(yypParser,7,&yymsp[-5].minor);
  yy_destructor(yypParser,10,&yymsp[-3].minor);
  yy_destructor(yypParser,114,&yymsp[-1].minor);
  yy_destructor(yypParser,10,&yymsp[0].minor);
}
#line 3911 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 209: /* stmt_common ::= stmt_while LPN condition RPN stmt_reuse */
#line 1396 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-4].minor.yy6->condition = yymsp[-2].minor.yy191;
                    yymsp[-4].minor.yy6->body      = yymsp[0].minor.yy191;
                    p->close_scope( yymsp[-4].minor.yy6->scope );
                    yygotominor.yy191 = yymsp[-4].minor.yy6;
                  yy_destructor(yypParser,7,&yymsp[-3].minor);
  yy_destructor(yypParser,10,&yymsp[-1].minor);
}
#line 3923 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 210: /* stmt_common ::= stmt_do stmt_reuse WHILE LPN expr_assign RPN SEMICOLON */
#line 1404 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-6].minor.yy56->body      = yymsp[-5].minor.yy191;
                    yymsp[-6].minor.yy56->condition = yymsp[-2].minor.yy191;
                    p->close_scope( yymsp[-6].minor.yy56->scope );
                    yygotominor.yy191 = yymsp[-6].minor.yy56;
                  yy_destructor(yypParser,69,&yymsp[-4].minor);
  yy_destructor(yypParser,7,&yymsp[-3].minor);
  yy_destructor(yypParser,10,&yymsp[-1].minor);
  yy_destructor(yypParser,14,&yymsp[0].minor);
}
#line 3937 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 211: /* stmt_common ::= stmt_foreach stmt_reuse */
#line 1411 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy213->body      = yymsp[0].minor.yy191;
                    p->close_scope( yymsp[-1].minor.yy213->scope );
                    yygotominor.yy191 = yymsp[-1].minor.yy213;
                }
#line 3946 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 212: /* stmt_common ::= stmt_for stmt_reuse */
#line 1417 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy57->body      = yymsp[0].minor.yy191;
                    p->close_scope( yymsp[-1].minor.yy57->scope );
                    yygotominor.yy191 = yymsp[-1].minor.yy57;
                }
#line 3955 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 213: /* stmt_common ::= stmt_using LPN condition RPN stmt_reuse */
#line 1424 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-4].minor.yy19->uvalue    = yymsp[-2].minor.yy191;
                    yymsp[-4].minor.yy19->body      = yymsp[0].minor.yy191;
                    p->close_scope( yymsp[-4].minor.yy19->scope );
                    yygotominor.yy191 = yymsp[-4].minor.yy19;
                  yy_destructor(yypParser,7,&yymsp[-3].minor);
  yy_destructor(yypParser,10,&yymsp[-1].minor);
}
#line 3967 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 215: /* stmt_common ::= DELETE expr_lbody SEMICOLON */
#line 1435 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    xec_stmt_delete* s;
                    yygotominor.yy191 = s = p->alloc< xec_stmt_delete >( yymsp[-2].minor.yy0->sloc );
                    p->delval_list( yymsp[-1].minor.yy191, &s->delvals );
                    p->destroy( yymsp[-2].minor.yy0 );
                  yy_destructor(yypParser,14,&yymsp[0].minor);
}
#line 3978 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 216: /* stmt_common ::= CASE expr_value COLON */
#line 1442 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy191 = p->resolve( yymsp[-1].minor.yy191 );
                    yygotominor.yy191 = p->alloc< xec_stmt_case >( yymsp[-2].minor.yy0->sloc, yymsp[-1].minor.yy191 );
                    p->destroy( yymsp[-2].minor.yy0 );
                  yy_destructor(yypParser,13,&yymsp[0].minor);
}
#line 3988 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 217: /* stmt_common ::= DEFAULT COLON */
#line 1448 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy191 = p->alloc< xec_stmt_case >( yymsp[-1].minor.yy0->sloc, nullptr );
                    p->destroy( yymsp[-1].minor.yy0 );
                  yy_destructor(yypParser,13,&yymsp[0].minor);
}
#line 3997 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 218: /* stmt_common ::= CONTINUE SEMICOLON */
#line 1453 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    xec_ast_node* target = p->continue_target( yymsp[-1].minor.yy0->sloc );
                    yygotominor.yy191 = p->alloc< xec_stmt_continue >( yymsp[-1].minor.yy0->sloc, target );
                    p->destroy( yymsp[-1].minor.yy0 );
                  yy_destructor(yypParser,14,&yymsp[0].minor);
}
#line 4007 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 219: /* stmt_common ::= BREAK SEMICOLON */
#line 1459 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    xec_ast_node* target = p->break_target( yymsp[-1].minor.yy0->sloc );
                    yygotominor.yy191 = p->alloc< xec_stmt_break >( yymsp[-1].minor.yy0->sloc, target );
                    p->destroy( yymsp[-1].minor.yy0 );
                  yy_destructor(yypParser,14,&yymsp[0].minor);
}
#line 4017 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 220: /* stmt_common ::= RETURN SEMICOLON */
#line 1465 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy191 = p->alloc< xec_stmt_return >( yymsp[-1].minor.yy0->sloc, nullptr );
                    p->destroy( yymsp[-1].minor.yy0 );
                  yy_destructor(yypParser,14,&yymsp[0].minor);
}
#line 4026 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 221: /* stmt_common ::= RETURN expr_list SEMICOLON */
#line 1470 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy191 = p->resolve( yymsp[-1].minor.yy191 );
                    yygotominor.yy191 = p->alloc< xec_stmt_return >( yymsp[-2].minor.yy0->sloc, yymsp[-1].minor.yy191 );
                    p->destroy( yymsp[-2].minor.yy0 );
                  yy_destructor(yypParser,14,&yymsp[0].minor);
}
#line 4036 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 222: /* stmt_common ::= token_yield SEMICOLON */
#line 1476 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy191 = p->alloc< xec_expr_yield >( yymsp[-1].minor.yy91->sloc, nullptr );
                    p->destroy( yymsp[-1].minor.yy91 );
                  yy_destructor(yypParser,14,&yymsp[0].minor);
}
#line 4045 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 223: /* stmt_common ::= token_yield expr_list SEMICOLON */
#line 1481 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy191 = p->resolve( yymsp[-1].minor.yy191 );
                    yygotominor.yy191 = p->alloc< xec_expr_yield >( yymsp[-2].minor.yy91->sloc, yymsp[-1].minor.yy191 );
                    p->destroy( yymsp[-2].minor.yy91 );
                  yy_destructor(yypParser,14,&yymsp[0].minor);
}
#line 4055 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 224: /* stmt_common ::= THROW expr_value SEMICOLON */
#line 1487 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy191 = p->resolve( yymsp[-1].minor.yy191 );
                    yygotominor.yy191 = p->alloc< xec_stmt_throw >( yymsp[-2].minor.yy0->sloc, yymsp[-1].minor.yy191 );
                    p->destroy( yymsp[-2].minor.yy0 );
                  yy_destructor(yypParser,14,&yymsp[0].minor);
}
#line 4065 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 225: /* stmt_if ::= IF */
#line 1497 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy208 = p->alloc< xec_stmt_if >( yymsp[0].minor.yy0->sloc );
                    yygotominor.yy208->scope = p->block_scope( yygotominor.yy208 );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 4074 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 226: /* stmt_switch ::= SWITCH */
#line 1504 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy199 = p->alloc< xec_stmt_switch >( yymsp[0].minor.yy0->sloc );
                    yygotominor.yy199->scope = p->block_scope( yygotominor.yy199 );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 4083 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 227: /* stmt_while ::= WHILE */
#line 1511 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy6 = p->alloc< xec_stmt_while >( yymsp[0].minor.yy0->sloc );
                    yygotominor.yy6->scope = p->block_scope( yygotominor.yy6 );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 4092 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 228: /* stmt_do ::= DO */
#line 1518 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy56 = p->alloc< xec_stmt_do >( yymsp[0].minor.yy0->sloc );
                    yygotominor.yy56->scope = p->block_scope( yygotominor.yy56 );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 4101 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 229: /* scope_for ::= FOR */
#line 1525 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    // open scope before we know the kind of statement.
                    yygotominor.yy218 = make_token_scope( yymsp[0].minor.yy0, p->block_scope( nullptr ) );
                }
#line 4109 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 230: /* stmt_foreach ::= scope_for LPN expr_lbody COLON expr_value RPN */
#line 1532 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy191 = p->resolve( yymsp[-1].minor.yy191 );
                    yygotominor.yy213 = p->alloc< xec_stmt_foreach >( yymsp[-5].minor.yy218.token->sloc );
                    yymsp[-5].minor.yy218.scope->node = yygotominor.yy213;
                    yygotominor.yy213->scope    = yymsp[-5].minor.yy218.scope;
                    p->lvalue_list( yymsp[-3].minor.yy191, &yygotominor.yy213->lvalues );
                    yygotominor.yy213->list     = yymsp[-1].minor.yy191;
                    p->destroy( yymsp[-5].minor.yy218.token );
                  yy_destructor(yypParser,7,&yymsp[-4].minor);
  yy_destructor(yypParser,13,&yymsp[-2].minor);
  yy_destructor(yypParser,10,&yymsp[0].minor);
}
#line 4125 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 231: /* stmt_foreach ::= scope_for LPN expr_lbody EACHKEY expr_value RPN */
#line 1543 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy191 = p->resolve( yymsp[-1].minor.yy191 );
                    yygotominor.yy213 = p->alloc< xec_stmt_foreach >( yymsp[-5].minor.yy218.token->sloc );
                    yymsp[-5].minor.yy218.scope->node = yygotominor.yy213;
                    yygotominor.yy213->scope    = yymsp[-5].minor.yy218.scope;
                    p->lvalue_list( yymsp[-3].minor.yy191, &yygotominor.yy213->lvalues );
                    yygotominor.yy213->list     = yymsp[-1].minor.yy191;
                    yygotominor.yy213->eachkey  = true;
                    p->destroy( yymsp[-5].minor.yy218.token );
                  yy_destructor(yypParser,7,&yymsp[-4].minor);
  yy_destructor(yypParser,80,&yymsp[-2].minor);
  yy_destructor(yypParser,10,&yymsp[0].minor);
}
#line 4142 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 232: /* stmt_foreach ::= scope_for LPN VAR varname_list COLON expr_value RPN */
#line 1555 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy191 = p->resolve( yymsp[-1].minor.yy191 );
                    yygotominor.yy213 = p->alloc< xec_stmt_foreach >( yymsp[-6].minor.yy218.token->sloc );
                    yymsp[-6].minor.yy218.scope->node = yygotominor.yy213;
                    yygotominor.yy213->scope    = yymsp[-6].minor.yy218.scope;
                    p->declare_local_list( yymsp[-3].minor.yy99, &yygotominor.yy213->lvalues );
                    yygotominor.yy213->list     = yymsp[-1].minor.yy191;
                    p->destroy( yymsp[-6].minor.yy218.token );
                  yy_destructor(yypParser,7,&yymsp[-5].minor);
  yy_destructor(yypParser,15,&yymsp[-4].minor);
  yy_destructor(yypParser,13,&yymsp[-2].minor);
  yy_destructor(yypParser,10,&yymsp[0].minor);
}
#line 4159 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 233: /* stmt_foreach ::= scope_for LPN VAR varname_list EACHKEY expr_value RPN */
#line 1566 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy191 = p->resolve( yymsp[-1].minor.yy191 );
                    yygotominor.yy213 = p->alloc< xec_stmt_foreach >( yymsp[-6].minor.yy218.token->sloc );
                    yymsp[-6].minor.yy218.scope->node = yygotominor.yy213;
                    yygotominor.yy213->scope    = yymsp[-6].minor.yy218.scope;
                    p->declare_local_list( yymsp[-3].minor.yy99, &yygotominor.yy213->lvalues );
                    yygotominor.yy213->list     = yymsp[-1].minor.yy191;
                    yygotominor.yy213->eachkey  = true;
                    p->destroy( yymsp[-6].minor.yy218.token );
                  yy_destructor(yypParser,7,&yymsp[-5].minor);
  yy_destructor(yypParser,15,&yymsp[-4].minor);
  yy_destructor(yypParser,80,&yymsp[-2].minor);
  yy_destructor(yypParser,10,&yymsp[0].minor);
}
#line 4177 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 234: /* stmt_for ::= scope_for LPN condition SEMICOLON expr_assign SEMICOLON expr_assign RPN */
#line 1581 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy57 = p->alloc< xec_stmt_for >( yymsp[-7].minor.yy218.token->sloc );
                    yymsp[-7].minor.yy218.scope->node = yygotominor.yy57;
                    yygotominor.yy57->scope        = yymsp[-7].minor.yy218.scope;
                    yygotominor.yy57->init         = yymsp[-5].minor.yy191;
                    yygotominor.yy57->condition    = yymsp[-3].minor.yy191;
                    yygotominor.yy57->update       = yymsp[-1].minor.yy191;
                    p->destroy( yymsp[-7].minor.yy218.token );
                  yy_destructor(yypParser,7,&yymsp[-6].minor);
  yy_destructor(yypParser,14,&yymsp[-4].minor);
  yy_destructor(yypParser,14,&yymsp[-2].minor);
  yy_destructor(yypParser,10,&yymsp[0].minor);
}
#line 4194 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 235: /* stmt_using ::= USING */
#line 1592 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy19 = p->alloc< xec_stmt_using >( yymsp[0].minor.yy0->sloc );
                    yygotominor.yy19->scope = p->block_scope( yygotominor.yy19 );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 4203 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 236: /* stmt_try ::= try_catch */
#line 1602 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy191 = yymsp[0].minor.yy236;
                }
#line 4210 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 237: /* stmt_try ::= try_catch FINALLY stmt */
      case 238: /* stmt_try ::= try_block FINALLY stmt */ yytestcase(yyruleno==238);
#line 1606 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-2].minor.yy236->fstmt = yymsp[0].minor.yy191;
                    yygotominor.yy191 = yymsp[-2].minor.yy236;
                  yy_destructor(yypParser,5,&yymsp[-1].minor);
}
#line 4220 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 239: /* try_block ::= TRY stmt */
#line 1617 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy236 = p->alloc< xec_stmt_try >( yymsp[-1].minor.yy0->sloc, yymsp[0].minor.yy191 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 4228 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 240: /* try_catch ::= try_block stmt_catch stmt_reuse */
      case 241: /* try_catch ::= try_catch stmt_catch stmt_reuse */ yytestcase(yyruleno==241);
#line 1623 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy184->body = yymsp[0].minor.yy191;
                    p->close_scope( yymsp[-1].minor.yy184->scope );
                    yymsp[-2].minor.yy236->clist.push_back( yymsp[-1].minor.yy184 );
                    yygotominor.yy236 = yymsp[-2].minor.yy236;
                }
#line 4239 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 242: /* scope_catch ::= CATCH */
#line 1638 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    // open scope here ready for declarations.
                    yygotominor.yy218 = make_token_scope( yymsp[0].minor.yy0, p->block_scope( nullptr ) );
                }
#line 4247 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 243: /* stmt_catch ::= scope_catch LPN COLON expr_simple RPN */
#line 1644 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy191 = p->resolve( yymsp[-1].minor.yy191 );
                    yygotominor.yy184 = p->alloc< xec_stmt_catch >( yymsp[-4].minor.yy218.token->sloc );
                    yymsp[-4].minor.yy218.scope->node = yygotominor.yy184;
                    yygotominor.yy184->proto    = yymsp[-1].minor.yy191;
                    p->destroy( yymsp[-4].minor.yy218.token );
                  yy_destructor(yypParser,7,&yymsp[-3].minor);
  yy_destructor(yypParser,13,&yymsp[-2].minor);
  yy_destructor(yypParser,10,&yymsp[0].minor);
}
#line 4261 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 244: /* stmt_catch ::= scope_catch LPN expr_value COLON expr_simple RPN */
#line 1653 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-3].minor.yy191 = p->resolve( yymsp[-3].minor.yy191 );
                    yymsp[-1].minor.yy191 = p->resolve( yymsp[-1].minor.yy191 );
                    yygotominor.yy184 = p->alloc< xec_stmt_catch >( yymsp[-5].minor.yy218.token->sloc );
                    yymsp[-5].minor.yy218.scope->node = yygotominor.yy184;
                    yygotominor.yy184->lvalue   = p->lvalue( yymsp[-3].minor.yy191 );
                    yygotominor.yy184->proto    = yymsp[-1].minor.yy191;
                    p->destroy( yymsp[-5].minor.yy218.token );
                  yy_destructor(yypParser,7,&yymsp[-4].minor);
  yy_destructor(yypParser,13,&yymsp[-2].minor);
  yy_destructor(yypParser,10,&yymsp[0].minor);
}
#line 4277 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 245: /* stmt_catch ::= scope_catch LPN VAR varname COLON expr_simple RPN */
#line 1664 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy191 = p->resolve( yymsp[-1].minor.yy191 );
                    yygotominor.yy184 = p->alloc< xec_stmt_catch >( yymsp[-6].minor.yy218.token->sloc );
                    yymsp[-6].minor.yy218.scope->node = yygotominor.yy184;
                    yygotominor.yy184->lvalue   = p->declare_local( yymsp[-3].minor.yy124 );
                    yygotominor.yy184->proto    = yymsp[-1].minor.yy191;
                    p->destroy( yymsp[-6].minor.yy218.token );
                  yy_destructor(yypParser,7,&yymsp[-5].minor);
  yy_destructor(yypParser,15,&yymsp[-4].minor);
  yy_destructor(yypParser,13,&yymsp[-2].minor);
  yy_destructor(yypParser,10,&yymsp[0].minor);
}
#line 4293 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      default:
        break;
  };
  yygoto = yyRuleInfo[yyruleno].lhs;
  yysize = yyRuleInfo[yyruleno].nrhs;
  yypParser->yyidx -= yysize;
  yyact = yy_find_reduce_action(yymsp[-yysize].stateno,(YYCODETYPE)yygoto);
  if( yyact < YYNSTATE ){
#ifdef NDEBUG
    /* If we are not debugging and the reduce action popped at least
    ** one element off the stack, then we can push the new element back
    ** onto the stack here, and skip the stack overflow test in yy_shift().
    ** That gives a significant speed improvement. */
    if( yysize ){
      yypParser->yyidx++;
      yymsp -= yysize-1;
      yymsp->stateno = (YYACTIONTYPE)yyact;
      yymsp->major = (YYCODETYPE)yygoto;
      yymsp->minor = yygotominor;
    }else
#endif
    {
      yy_shift(yypParser,yyact,yygoto,&yygotominor);
    }
  }else{
    assert( yyact == YYNSTATE + YYNRULE + 1 );
    yy_accept(yypParser);
  }
}

/*
** The following code executes when the parse fails
*/
#ifndef YYNOERRORRECOVERY
static void yy_parse_failed(
  yyParser *yypParser           /* The parser */
){
  XecParseARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sFail!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser fails */
  XecParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}
#endif /* YYNOERRORRECOVERY */

/*
** The following code executes when a syntax error first occurs.
*/
static void yy_syntax_error(
  yyParser *yypParser,           /* The parser */
  int yymajor,                   /* The major type of the error token */
  YYMINORTYPE yyminor            /* The minor type of the error token */
){
  XecParseARG_FETCH;
#define TOKEN (yyminor.yy0)
#line 1695 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"

    p->get_script()->diagnostic( TOKEN->sloc,
            "unexpected %s", TOKEN->get_spelling().c_str() );
#line 4359 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
  XecParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/*
** The following is executed when the parser accepts
*/
static void yy_accept(
  yyParser *yypParser           /* The parser */
){
  XecParseARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sAccept!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser accepts */
  XecParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/* The main parser program.
** The first argument is a pointer to a structure obtained from
** "XecParseAlloc" which describes the current state of the parser.
** The second argument is the major token number.  The third is
** the minor token.  The fourth optional argument is whatever the
** user wants (and specified in the grammar) and is available for
** use by the action routines.
**
** Inputs:
** <ul>
** <li> A pointer to the parser (an opaque structure.)
** <li> The major token number.
** <li> The minor token number.
** <li> An option argument of a grammar-specified type.
** </ul>
**
** Outputs:
** None.
*/
void XecParse(
  void *yyp,                   /* The parser */
  int yymajor,                 /* The major token code number */
  XecParseTOKENTYPE yyminor       /* The value for the token */
  XecParseARG_PDECL               /* Optional %extra_argument parameter */
){
  YYMINORTYPE yyminorunion;
  int yyact;            /* The parser action. */
  int yyendofinput;     /* True if we are at the end of input */
#ifdef YYERRORSYMBOL
  int yyerrorhit = 0;   /* True if yymajor has invoked an error */
#endif
  yyParser *yypParser;  /* The parser */

  /* (re)initialize the parser, if necessary */
  yypParser = (yyParser*)yyp;
  if( yypParser->yyidx<0 ){
#if YYSTACKDEPTH<=0
    if( yypParser->yystksz <=0 ){
      /*memset(&yyminorunion, 0, sizeof(yyminorunion));*/
      yyminorunion = yyzerominor;
      yyStackOverflow(yypParser, &yyminorunion);
      return;
    }
#endif
    yypParser->yyidx = 0;
    yypParser->yyerrcnt = -1;
    yypParser->yystack[0].stateno = 0;
    yypParser->yystack[0].major = 0;
  }
  yyminorunion.yy0 = yyminor;
  yyendofinput = (yymajor==0);
  XecParseARG_STORE;

#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sInput %s\n",yyTracePrompt,yyTokenName[yymajor]);
  }
#endif

  do{
    yyact = yy_find_shift_action(yypParser,(YYCODETYPE)yymajor);
    if( yyact<YYNSTATE ){
      assert( !yyendofinput );  /* Impossible to shift the $ token */
      yy_shift(yypParser,yyact,yymajor,&yyminorunion);
      yypParser->yyerrcnt--;
      yymajor = YYNOCODE;
    }else if( yyact < YYNSTATE + YYNRULE ){
      yy_reduce(yypParser,yyact-YYNSTATE);
    }else{
      assert( yyact == YY_ERROR_ACTION );
#ifdef YYERRORSYMBOL
      int yymx;
#endif
#ifndef NDEBUG
      if( yyTraceFILE ){
        fprintf(yyTraceFILE,"%sSyntax Error!\n",yyTracePrompt);
      }
#endif
#ifdef YYERRORSYMBOL
      /* A syntax error has occurred.
      ** The response to an error depends upon whether or not the
      ** grammar defines an error token "ERROR".  
      **
      ** This is what we do if the grammar does define ERROR:
      **
      **  * Call the %syntax_error function.
      **
      **  * Begin popping the stack until we enter a state where
      **    it is legal to shift the error symbol, then shift
      **    the error symbol.
      **
      **  * Set the error count to three.
      **
      **  * Begin accepting and shifting new tokens.  No new error
      **    processing will occur until three tokens have been
      **    shifted successfully.
      **
      */
      if( yypParser->yyerrcnt<0 ){
        yy_syntax_error(yypParser,yymajor,yyminorunion);
      }
      yymx = yypParser->yystack[yypParser->yyidx].major;
      if( yymx==YYERRORSYMBOL || yyerrorhit ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE,"%sDiscard input token %s\n",
             yyTracePrompt,yyTokenName[yymajor]);
        }
#endif
        yy_destructor(yypParser, (YYCODETYPE)yymajor,&yyminorunion);
        yymajor = YYNOCODE;
      }else{
         while(
          yypParser->yyidx >= 0 &&
          yymx != YYERRORSYMBOL &&
          (yyact = yy_find_reduce_action(
                        yypParser->yystack[yypParser->yyidx].stateno,
                        YYERRORSYMBOL)) >= YYNSTATE
        ){
          yy_pop_parser_stack(yypParser);
        }
        if( yypParser->yyidx < 0 || yymajor==0 ){
          yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
          yy_parse_failed(yypParser);
          yymajor = YYNOCODE;
        }else if( yymx!=YYERRORSYMBOL ){
          YYMINORTYPE u2;
          u2.YYERRSYMDT = 0;
          yy_shift(yypParser,yyact,YYERRORSYMBOL,&u2);
        }
      }
      yypParser->yyerrcnt = 3;
      yyerrorhit = 1;
#elif defined(YYNOERRORRECOVERY)
      /* If the YYNOERRORRECOVERY macro is defined, then do not attempt to
      ** do any kind of error recovery.  Instead, simply invoke the syntax
      ** error routine and continue going as if nothing had happened.
      **
      ** Applications can set this macro (for example inside %include) if
      ** they intend to abandon the parse upon the first syntax error seen.
      */
      yy_syntax_error(yypParser,yymajor,yyminorunion);
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      yymajor = YYNOCODE;
      
#else  /* YYERRORSYMBOL is not defined */
      /* This is what we do if the grammar does not define ERROR:
      **
      **  * Report an error message, and throw away the input token.
      **
      **  * If the input token is $, then fail the parse.
      **
      ** As before, subsequent error messages are suppressed until
      ** three input tokens have been successfully shifted.
      */
      if( yypParser->yyerrcnt<=0 ){
        yy_syntax_error(yypParser,yymajor,yyminorunion);
      }
      yypParser->yyerrcnt = 3;
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      if( yyendofinput ){
        yy_parse_failed(yypParser);
      }
      yymajor = YYNOCODE;
#endif
    }
  }while( yymajor!=YYNOCODE && yypParser->yyidx>=0 );
  return;
}
