/* Driver template for the LEMON parser generator.
** The author disclaims copyright to this source code.
*/
/* First off, code is included that follows the "include" declaration
** in the input grammar file. */
#include <stdio.h>
#line 19 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"


#include <assert.h>
#include "xec_parser.h"
#include "xec_token.h"
#include "xec_ast.h"


struct xec_token_scope
{
    xec_token*      token;
    xec_ast_scope*  scope;
};


inline xec_token_scope make_token_scope(
                xec_token* token, xec_ast_scope* scope )
{
    xec_token_scope result;
    result.token = token;
    result.scope = scope;
    return result;
}


#line 90 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"



void xec_parser::destroy( xec_token* token )
{
    token->~xec_token();
    recycle_tokens.push_back( token );
}


#line 45 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
/* Next is all token values, in a form suitable for use by makeheaders.
** This section will be null unless lemon is run with the -m switch.
*/
/* 
** These constants (all generated automatically by the parser generator)
** specify the various kinds of tokens (terminals) that the parser
** understands. 
**
** Each symbol here is a terminal symbol in the grammar.
*/
/* Make sure the INTERFACE macro is defined.
*/
#ifndef INTERFACE
# define INTERFACE 1
#endif
/* The next thing included is series of defines which control
** various aspects of the generated parser.
**    YYCODETYPE         is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 terminals
**                       and nonterminals.  "int" is used otherwise.
**    YYNOCODE           is a number of type YYCODETYPE which corresponds
**                       to no legal terminal or nonterminal number.  This
**                       number is used to fill in empty slots of the hash 
**                       table.
**    YYFALLBACK         If defined, this indicates that one or more tokens
**                       have fall-back values which should be used if the
**                       original value of the token will not parse.
**    YYACTIONTYPE       is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 rules and
**                       states combined.  "int" is used otherwise.
**    XecParseTOKENTYPE     is the data type used for minor tokens given 
**                       directly to the parser from the tokenizer.
**    YYMINORTYPE        is the data type used for all minor tokens.
**                       This is typically a union of many types, one of
**                       which is XecParseTOKENTYPE.  The entry in the union
**                       for base tokens is called "yy0".
**    YYSTACKDEPTH       is the maximum depth of the parser's stack.  If
**                       zero the stack is dynamically sized using realloc()
**    XecParseARG_SDECL     A static variable declaration for the %extra_argument
**    XecParseARG_PDECL     A parameter declaration for the %extra_argument
**    XecParseARG_STORE     Code to store %extra_argument into yypParser
**    XecParseARG_FETCH     Code to extract %extra_argument from yypParser
**    YYNSTATE           the combined number of states.
**    YYNRULE            the number of rules in the grammar
**    YYERRORSYMBOL      is the code number of the error symbol.  If not
**                       defined, then do no error processing.
*/
#define YYCODETYPE unsigned char
#define YYNOCODE 159
#define YYACTIONTYPE unsigned short int
#define XecParseTOKENTYPE  xec_token* 
typedef union {
  int yyinit;
  XecParseTOKENTYPE yy0;
  xec_stmt_for* yy16;
  xec_token* yy19;
  xec_ast_func* yy45;
  xec_expr_call* yy52;
  xec_expr_yield* yy55;
  xec_new_list* yy87;
  xec_new_object* yy182;
  xec_stmt_if* yy188;
  xec_new_table* yy191;
  xec_stmt_do* yy208;
  xec_token_scope yy218;
  xec_unqual_proto* yy219;
  xec_stmt_try* yy224;
  xec_stmt_using* yy227;
  xec_stmt_foreach* yy237;
  xec_unqual_name* yy240;
  xec_stmt_catch* yy256;
  xec_ast_node* yy259;
  xec_stmt_switch* yy267;
  xec_stmt_block* yy268;
  xec_stmt_while* yy278;
  xec_unqual_list* yy283;
} YYMINORTYPE;
#ifndef YYSTACKDEPTH
#define YYSTACKDEPTH 100
#endif
#define XecParseARG_SDECL  xec_parser* p ;
#define XecParseARG_PDECL , xec_parser* p 
#define XecParseARG_FETCH  xec_parser* p  = yypParser->p 
#define XecParseARG_STORE yypParser->p  = p 
#define YYNSTATE 484
#define YYNRULE 255
#define YY_NO_ACTION      (YYNSTATE+YYNRULE+2)
#define YY_ACCEPT_ACTION  (YYNSTATE+YYNRULE+1)
#define YY_ERROR_ACTION   (YYNSTATE+YYNRULE)

/* The yyzerominor constant is used to initialize instances of
** YYMINORTYPE objects to zero. */
static const YYMINORTYPE yyzerominor = { 0 };

/* Define the yytestcase() macro to be a no-op if is not already defined
** otherwise.
**
** Applications can choose to define yytestcase() in the %include section
** to a macro that can assist in verifying code coverage.  For production
** code the yytestcase() macro should be turned off.  But it is useful
** for testing.
*/
#ifndef yytestcase
# define yytestcase(X)
#endif


/* Next are the tables used to determine what action to take based on the
** current state and lookahead token.  These tables are used to implement
** functions that take a state number and lookahead value and return an
** action integer.  
**
** Suppose the action integer is N.  Then the action is determined as
** follows
**
**   0 <= N < YYNSTATE                  Shift N.  That is, push the lookahead
**                                      token onto the stack and goto state N.
**
**   YYNSTATE <= N < YYNSTATE+YYNRULE   Reduce by rule N-YYNSTATE.
**
**   N == YYNSTATE+YYNRULE              A syntax error has occurred.
**
**   N == YYNSTATE+YYNRULE+1            The parser accepts its input.
**
**   N == YYNSTATE+YYNRULE+2            No such action.  Denotes unused
**                                      slots in the yy_action[] table.
**
** The action table is constructed as a single large table named yy_action[].
** Given state S and lookahead X, the action is computed as
**
**      yy_action[ yy_shift_ofst[S] + X ]
**
** If the index value yy_shift_ofst[S]+X is out of range or if the value
** yy_lookahead[yy_shift_ofst[S]+X] is not equal to X or if yy_shift_ofst[S]
** is equal to YY_SHIFT_USE_DFLT, it means that the action is not in the table
** and that yy_default[S] should be used instead.  
**
** The formula above is for computing the action when the lookahead is
** a terminal symbol.  If the lookahead is a non-terminal (as occurs after
** a reduce action) then the yy_reduce_ofst[] array is used in place of
** the yy_shift_ofst[] array and YY_REDUCE_USE_DFLT is used in place of
** YY_SHIFT_USE_DFLT.
**
** The following are the tables generated in this section:
**
**  yy_action[]        A single table containing all actions.
**  yy_lookahead[]     A table containing the lookahead for each entry in
**                     yy_action.  Used to detect hash collisions.
**  yy_shift_ofst[]    For each state, the offset into yy_action for
**                     shifting terminals.
**  yy_reduce_ofst[]   For each state, the offset into yy_action for
**                     shifting non-terminals after a reduce.
**  yy_default[]       Default action for each state.
*/
static const YYACTIONTYPE yy_action[] = {
 /*     0 */   121,  124,  127,  152,  149,  151,  146,   97,   94,   95,
 /*    10 */    98,  474,   90,   89,   88,  150,  134,  248,  237,  233,
 /*    20 */    16,  201,   15,   14,  223,  111,  110,  131,  298,   33,
 /*    30 */   451,   12,  123,  218,   31,  397,  177,  300,   65,  398,
 /*    40 */    19,  250,  230,  137,   63,   47,  135,  132,  306,  178,
 /*    50 */   315,  156,  169,  158,  234,  236,  241,  244,  119,  245,
 /*    60 */   240,  161,  370,  437,  393,  117,  394,  249,  454,  396,
 /*    70 */   402,  109,  421,  122,  124,  127,  333,  149,  280,  146,
 /*    80 */   299,  334,  438,  365,  336,  115,  451,   11,  150,  431,
 /*    90 */   248,  237,  233,   16,  201,   15,   14,  223,  111,  110,
 /*   100 */    29,  280,   33,  171,   31,  129,  162,  261,    8,  343,
 /*   110 */   300,  280,  261,    9,  462,   49,  137,  336,  115,  135,
 /*   120 */   132,  306,  178,  315,  156,  169,  158,  234,  236,  241,
 /*   130 */   244,  119,  245,  240,  161,  370,  355,  393,  117,  394,
 /*   140 */   249,  290,  411,  402,   60,  421,  122,  124,  127,  430,
 /*   150 */   149,   58,  146,  346,   59,  154,  155,   71,  176,  170,
 /*   160 */    36,  140,  147,  248,  237,  233,   16,  201,   15,   14,
 /*   170 */   223,  111,  110,  285,   31,   33,  172,  279,  129,  332,
 /*   180 */   107,  281,   31,  300,  209,   50,  483,  332,  107,  137,
 /*   190 */   183,  168,  135,  132,  306,  178,  315,  156,  169,  158,
 /*   200 */   234,  236,  241,  244,  119,  245,  240,  161,  370,  428,
 /*   210 */   393,  117,  394,  249,  740,    5,  416,  418,  421,  122,
 /*   220 */   124,  127,  264,  149,   72,  146,   80,   53,  343,  198,
 /*   230 */    35,  140,   92,   91,  150,  354,  248,  237,  233,   16,
 /*   240 */   201,   15,   14,  223,  111,  110,  342,  284,   33,  256,
 /*   250 */    31,  129,  162,   31,  439,  165,  300,   68,   36,  140,
 /*   260 */   456,   49,  137,  108,   45,  135,  132,  306,  178,  315,
 /*   270 */   156,  169,  158,  234,  236,  241,  244,  119,  245,  240,
 /*   280 */   161,  370,  361,  393,  117,  394,  249,  292,  449,  402,
 /*   290 */   345,  421,  122,  124,  127,  281,  149,   75,  146,  346,
 /*   300 */    38,  144,  460,   69,  145,   77,   38,  144,  147,  248,
 /*   310 */   237,  233,   16,  201,   15,   14,  223,  111,  110,  471,
 /*   320 */    31,   33,  177,  294,  129,  475,   31,  481,  162,  300,
 /*   330 */   452,   76,  351,   79,  440,  137,  426,   73,  135,  132,
 /*   340 */   306,  178,  315,  156,  169,  158,  234,  236,  241,  244,
 /*   350 */   119,  245,  240,  161,  370,  425,  393,  117,  394,  249,
 /*   360 */   307,  308,  416,  419,  421,  122,  124,  127,  187,  149,
 /*   370 */    70,  146,  422,  362,  352,   56,   37,  144,  278,   29,
 /*   380 */   280,  147,  248,  237,  233,   16,  201,   15,   14,  223,
 /*   390 */   111,  110,  112,   31,   33,  163,   31,  129,  173,   31,
 /*   400 */   480,  172,  300,  424,   64,  339,  363,   52,  137,  353,
 /*   410 */    62,  135,  132,  306,  178,  315,  156,  169,  158,  234,
 /*   420 */   236,  241,  244,  119,  245,  240,  161,  370,  331,  393,
 /*   430 */   117,  394,  249,  296,  479,  416,  457,  421,  122,  124,
 /*   440 */   127,  364,  149,   55,  146,  441,  423,  283,   25,  103,
 /*   450 */    13,    2,    6,    3,  147,  248,  237,  233,   16,  201,
 /*   460 */    15,   14,  223,  111,  110,  366,   31,   33,  166,   31,
 /*   470 */   129,  173,   31,   23,  165,  300,  104,   46,  367,    4,
 /*   480 */    44,  137,   54,   74,  135,  132,  306,  178,  315,  156,
 /*   490 */   169,  158,  234,  236,  241,  244,  119,  245,  240,  161,
 /*   500 */   370,  417,  393,  117,  394,  249,  226,    1,  416,  458,
 /*   510 */   421,  122,  124,  127,  167,  149,   31,  146,  163,   28,
 /*   520 */    31,  228,  407,  406,  400,   81,  150,   51,  248,  237,
 /*   530 */   233,   16,  201,   15,   14,  223,  111,  110,  148,   31,
 /*   540 */    33,  172,   31,  129,  166,  413,   17,   22,  300,   87,
 /*   550 */    50,  143,  180,   78,  137,   86,   21,  135,  132,  306,
 /*   560 */   178,  315,  156,  169,  158,  234,  236,  241,  244,  119,
 /*   570 */   245,  240,  161,  370,  175,  393,  117,  394,  249,  409,
 /*   580 */   448,  402,   82,  421,  122,  124,  127,   18,  149,  478,
 /*   590 */   146,  297,   85,   41,  291,  293,   84,  476,  477,  150,
 /*   600 */    20,  248,  237,  233,   16,  201,   15,   14,  223,  111,
 /*   610 */   110,  282,  404,   33,  399,  459,  129,  455,  295,  289,
 /*   620 */   463,  300,  348,  345,  465,  453,   83,  137,   40,   32,
 /*   630 */   135,  132,  306,  178,  315,  156,  169,  158,  234,  236,
 /*   640 */   241,  244,  119,  245,  240,  161,  370,   26,  393,  117,
 /*   650 */   394,  249,   48,  412,  402,   27,  421,  122,  124,  127,
 /*   660 */   469,  149,  287,  146,  442,  342,  443,  470,  349,  288,
 /*   670 */   472,  340,  150,  341,  248,  237,  233,   16,  201,   15,
 /*   680 */    14,  223,  111,  110,   24,  473,   33,  351,  358,  129,
 /*   690 */   741,  741,  741,  741,  300,  741,  741,  741,  741,  741,
 /*   700 */   137,  741,  741,  135,  132,  306,  178,  315,  156,  169,
 /*   710 */   158,  234,  236,  241,  244,  119,  245,  240,  161,  370,
 /*   720 */   741,  393,  117,  394,  249,  741,  447,  402,  741,  421,
 /*   730 */   122,  124,  127,  741,  149,  741,  146,  741,  741,  741,
 /*   740 */   741,  741,  741,  741,  741,  741,  147,  248,  237,  233,
 /*   750 */    16,  201,   15,   14,  223,  111,  110,  741,  741,   33,
 /*   760 */   741,  741,  129,  741,  741,  741,  741,  300,  741,  741,
 /*   770 */   741,  741,  741,  137,  741,  741,  135,  132,  306,  178,
 /*   780 */   315,  156,  169,  158,  234,  236,  241,  244,  119,  245,
 /*   790 */   240,  161,  370,  741,  393,  117,  394,  249,  741,  741,
 /*   800 */   416,  420,  421,  122,  124,  127,  741,  149,  741,  146,
 /*   810 */   741,  741,  741,  741,  741,  741,  741,  741,  741,  147,
 /*   820 */   248,  237,  233,   16,  201,   15,   14,  223,  111,  110,
 /*   830 */   741,  741,   33,  741,  741,  129,  741,  741,  741,  741,
 /*   840 */   300,  741,  741,  741,  741,  741,  137,  741,  741,  135,
 /*   850 */   132,  306,  178,  315,  156,  169,  158,  234,  236,  241,
 /*   860 */   244,  119,  245,  240,  161,  370,  741,  393,  117,  394,
 /*   870 */   249,  741,  741,  416,  450,  421,  122,  124,  127,  741,
 /*   880 */   149,  741,  146,  741,  741,  741,  741,  741,  741,  741,
 /*   890 */   741,  741,  147,  248,  237,  233,   16,  201,   15,   14,
 /*   900 */   223,  111,  110,  741,  741,   33,  741,  741,  129,  741,
 /*   910 */   741,  741,  741,  300,  741,  741,  741,  741,  741,  137,
 /*   920 */   741,  741,  135,  132,  306,  178,  315,  156,  169,  158,
 /*   930 */   234,  236,  241,  244,  119,  245,  240,  161,  370,  741,
 /*   940 */   393,  117,  394,  249,  371,   41,  416,  229,  421,  432,
 /*   950 */   741,   10,  741,  741,  260,   29,  280,  192,  741,  344,
 /*   960 */   403,  106,  395,  115,  741,  741,   30,  741,  112,  301,
 /*   970 */   302,  303,  304,  305,   99,   96,   93,  100,  102,  101,
 /*   980 */   741,  741,  741,  741,  741,  372,  373,  374,  375,  376,
 /*   990 */   377,  378,  379,  380,  381,  382,  383,  741,  741,  741,
 /*  1000 */   741,  741,  741,  142,  369,  320,  321,  322,  323,  324,
 /*  1010 */   325,  326,  327,  328,  329,  741,  741,  434,   43,   57,
 /*  1020 */   215,  213,  212,   34,   61,  433,  435,  436,  432,  446,
 /*  1030 */    10,  741,  741,  260,   29,  280,  192,  414,  741,  403,
 /*  1040 */   106,  395,  115,  741,  741,   30,  741,  112,  301,  302,
 /*  1050 */   303,  304,  305,   99,   96,   93,  100,  102,  101,  278,
 /*  1060 */    29,  280,  741,  741,  741,  350,  741,  741,  741,  741,
 /*  1070 */   741,  741,  741,  112,  741,  741,  741,  741,  741,  741,
 /*  1080 */   741,  741,  142,  369,  741,  741,  741,  741,  741,  741,
 /*  1090 */   741,  741,  741,  741,  741,  741,  434,   43,   57,  215,
 /*  1100 */   213,  212,   34,   61,  433,  435,  436,  432,  446,   10,
 /*  1110 */   741,  741,  260,   29,  280,  192,  741,  401,  403,  106,
 /*  1120 */   395,  115,  741,  741,   30,  741,  112,  301,  302,  303,
 /*  1130 */   304,  305,   99,   96,   93,  100,  102,  101,  741,  741,
 /*  1140 */   741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
 /*  1150 */   741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
 /*  1160 */   741,  142,  369,  741,  741,  741,  741,  741,  741,  741,
 /*  1170 */   741,  741,  741,  741,  741,  434,   43,   57,  215,  213,
 /*  1180 */   212,   34,   61,  433,  435,  436,  432,  446,   10,  741,
 /*  1190 */   741,  260,   29,  280,  192,  741,  368,  403,  106,  395,
 /*  1200 */   115,  741,  741,   30,  741,  112,  301,  302,  303,  304,
 /*  1210 */   305,   99,   96,   93,  100,  102,  101,  741,  741,  741,
 /*  1220 */   741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
 /*  1230 */   741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
 /*  1240 */   142,  369,  741,  741,  741,  741,  741,  741,  741,  741,
 /*  1250 */   741,  741,  741,  741,  434,   43,   57,  215,  213,  212,
 /*  1260 */    34,   61,  433,  435,  436,  432,  446,   10,  741,  741,
 /*  1270 */   260,   29,  280,  192,  741,  415,  403,  106,  395,  115,
 /*  1280 */   741,  741,   30,  741,  112,  301,  302,  303,  304,  305,
 /*  1290 */    99,   96,   93,  100,  102,  101,  741,  741,  741,  741,
 /*  1300 */   741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
 /*  1310 */   741,  741,  741,  741,  741,  741,  741,  741,  741,  142,
 /*  1320 */   369,  741,  741,  741,  741,  741,  741,  741,  741,  741,
 /*  1330 */   741,  741,  741,  434,   43,   57,  215,  213,  212,   34,
 /*  1340 */    61,  433,  435,  436,  741,  446,  484,  432,  741,   10,
 /*  1350 */   741,  741,  260,   29,  280,  192,  741,  741,  403,  106,
 /*  1360 */   395,  115,  741,  741,   30,  741,  112,  301,  302,  303,
 /*  1370 */   304,  305,   99,   96,   93,  100,  102,  101,  741,  741,
 /*  1380 */   741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
 /*  1390 */   741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
 /*  1400 */   741,  142,  369,  741,  741,  741,  741,  741,  741,  741,
 /*  1410 */   741,  741,  741,  741,  741,  434,   43,   57,  215,  213,
 /*  1420 */   212,   34,   61,  433,  435,  436,  432,  446,   10,  741,
 /*  1430 */   741,  260,   29,  280,  192,  741,  741,  403,  106,  125,
 /*  1440 */   126,  136,  741,   30,  741,  112,  301,  302,  303,  304,
 /*  1450 */   305,   99,   96,   93,  100,  102,  101,  741,  741,  741,
 /*  1460 */   741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
 /*  1470 */   741,  130,  741,  741,  741,  741,  300,  741,  741,  741,
 /*  1480 */   142,  369,  139,  741,  741,  133,  138,  306,  178,  315,
 /*  1490 */   156,  169,  158,  252,  434,   43,   57,  215,  213,  212,
 /*  1500 */    34,   61,  433,  435,  436,  432,  446,   10,  741,  741,
 /*  1510 */   260,   29,  280,  192,  741,  160,  413,  106,  152,  741,
 /*  1520 */   151,  741,   30,  741,  112,  301,  302,  303,  304,  305,
 /*  1530 */    99,   96,   93,  100,  102,  101,  741,  741,  741,  741,
 /*  1540 */   741,  741,  741,  741,  741,  741,  741,  128,  741,  741,
 /*  1550 */   337,  741,  741,  335,  338,  188,  276,  269,  741,  142,
 /*  1560 */   369,  741,  741,  741,  122,  124,  127,  741,  149,  741,
 /*  1570 */   146,  741,  741,  434,   43,   57,  215,  213,  212,   34,
 /*  1580 */    61,  433,  435,  436,  741,  446,  741,  741,  741,  741,
 /*  1590 */   741,  741,  741,  741,  741,  741,  129,  741,  390,  741,
 /*  1600 */   741,  300,  741,  741,  741,  741,  741,  137,  405,  386,
 /*  1610 */   135,  132,  306,  178,  315,  156,  169,  158,  234,  236,
 /*  1620 */   241,  244,  119,  245,  240,  161,  356,  116,  389,  741,
 /*  1630 */   741,  741,  445,  741,  741,  741,  741,  275,  741,  278,
 /*  1640 */    29,  280,  741,  122,  124,  127,  741,  149,  741,  146,
 /*  1650 */   741,  741,  741,  112,  301,  302,  303,  304,  305,   99,
 /*  1660 */    96,   93,  100,  102,  101,  741,  741,  741,  741,  741,
 /*  1670 */   741,  741,  741,  741,  741,  129,  741,  390,  371,   42,
 /*  1680 */   300,  741,  741,  741,  741,  741,  137,  405,  386,  135,
 /*  1690 */   132,  306,  178,  315,  156,  169,  158,  234,  236,  241,
 /*  1700 */   244,  119,  245,  240,  161,  356,  118,  389,  122,  124,
 /*  1710 */   127,  239,  149,  741,  146,  741,  741,  741,  741,  372,
 /*  1720 */   373,  374,  375,  376,  377,  378,  379,  380,  381,  382,
 /*  1730 */   383,  741,  741,  741,  741,  741,  741,  741,  741,  741,
 /*  1740 */   129,  741,  390,  741,  741,  300,  125,  126,  136,  741,
 /*  1750 */   741,  137,  405,  386,  135,  132,  306,  178,  315,  156,
 /*  1760 */   169,  158,  234,  236,  241,  244,  119,  245,  240,  161,
 /*  1770 */   356,  118,  389,  122,  124,  127,  232,  149,  130,  146,
 /*  1780 */   741,  741,  741,  300,  741,  741,  741,  741,  741,  139,
 /*  1790 */   741,  741,  133,  138,  306,  178,  315,  156,  169,  159,
 /*  1800 */   741,  741,  741,  741,  741,  129,  741,  390,  741,  741,
 /*  1810 */   300,  125,  126,  136,  741,  741,  137,  405,  386,  135,
 /*  1820 */   132,  306,  178,  315,  156,  169,  158,  234,  236,  241,
 /*  1830 */   244,  119,  245,  240,  161,  356,  118,  389,  122,  124,
 /*  1840 */   127,  235,  149,  130,  146,  741,  741,  741,  300,  741,
 /*  1850 */   741,  741,  741,  741,  139,  741,  741,  133,  138,  306,
 /*  1860 */   178,  315,  156,  184,  741,  741,  741,  741,  741,  741,
 /*  1870 */   129,  741,  390,  741,  741,  300,  125,  126,  136,  741,
 /*  1880 */   741,  137,  444,  386,  135,  132,  306,  178,  315,  156,
 /*  1890 */   169,  158,  234,  236,  241,  244,  119,  245,  240,  161,
 /*  1900 */   356,  118,  389,  122,  124,  127,  741,  149,  130,  146,
 /*  1910 */   741,  741,  272,  300,  741,  741,  741,  741,  741,  139,
 /*  1920 */   741,  741,  133,  138,  306,  178,  315,  156,  179,  741,
 /*  1930 */   741,  741,  741,  741,  741,  129,  741,  390,  741,  741,
 /*  1940 */   300,  125,  126,  136,  741,  741,  137,  405,  386,  135,
 /*  1950 */   132,  306,  178,  315,  156,  169,  158,  234,  236,  241,
 /*  1960 */   244,  119,  245,  240,  161,  356,  118,  389,  122,  124,
 /*  1970 */   127,  221,  149,  130,  146,  741,  741,  741,  300,  741,
 /*  1980 */   741,  741,  741,  741,  139,  741,  741,  133,  138,  306,
 /*  1990 */   178,  315,  156,  181,  741,  741,  741,  741,  741,  741,
 /*  2000 */   129,  741,  390,  741,  741,  300,  125,  126,  136,  741,
 /*  2010 */   741,  137,  444,  386,  135,  132,  306,  178,  315,  156,
 /*  2020 */   169,  158,  234,  236,  241,  244,  119,  245,  240,  161,
 /*  2030 */   356,  118,  389,  122,  124,  127,  741,  149,  130,  146,
 /*  2040 */   741,  741,  271,  300,  741,  741,  741,  741,  741,  139,
 /*  2050 */   741,  741,  133,  138,  306,  178,  315,  157,  741,  741,
 /*  2060 */   741,  741,  741,  741,  741,  129,  741,  390,  741,  741,
 /*  2070 */   300,  125,  126,  136,  741,  741,  137,  220,  386,  135,
 /*  2080 */   132,  306,  178,  315,  156,  169,  158,  234,  236,  241,
 /*  2090 */   244,  119,  245,  240,  161,  356,  118,  389,  122,  124,
 /*  2100 */   127,  741,  149,  130,  146,  741,  741,  741,  300,  741,
 /*  2110 */   741,  741,  741,  741,  139,  741,  741,  133,  138,  306,
 /*  2120 */   178,  315,  153,  741,  741,  741,  741,  741,  741,  741,
 /*  2130 */   129,  741,  390,  741,  741,  300,  125,  126,  136,  741,
 /*  2140 */   741,  137,  227,  386,  135,  132,  306,  178,  315,  156,
 /*  2150 */   169,  158,  234,  236,  241,  244,  119,  245,  240,  161,
 /*  2160 */   356,  118,  389,  122,  124,  127,  741,  149,  130,  146,
 /*  2170 */   741,  741,  741,  300,  741,  741,  741,  741,  741,  139,
 /*  2180 */   741,  741,  133,  138,  306,  178,  311,  741,  741,  741,
 /*  2190 */   741,  741,  741,  741,  741,  129,  741,  390,  741,  741,
 /*  2200 */   300,  125,  126,  136,  741,  741,  137,  391,  386,  135,
 /*  2210 */   132,  306,  178,  315,  156,  169,  158,  234,  236,  241,
 /*  2220 */   244,  119,  245,  240,  161,  356,  118,  389,  122,  124,
 /*  2230 */   127,  741,  149,  130,  146,  741,  741,  741,  300,  741,
 /*  2240 */   741,  741,  741,  741,  139,  741,  741,  133,  138,  306,
 /*  2250 */   178,  309,  741,  741,  741,  741,  741,  741,  741,  741,
 /*  2260 */   129,  741,  390,  741,  741,  300,  125,  126,  136,  741,
 /*  2270 */   741,  137,  392,  386,  135,  132,  306,  178,  315,  156,
 /*  2280 */   169,  158,  234,  236,  241,  244,  119,  245,  240,  161,
 /*  2290 */   356,  118,  389,  122,  124,  127,  741,  149,  130,  146,
 /*  2300 */   741,  741,  741,  300,  741,  741,  741,  741,  741,  139,
 /*  2310 */   741,  741,  133,  138,  306,  178,  318,  741,  741,  741,
 /*  2320 */   741,  741,  741,  741,  741,  129,  741,  410,  741,  741,
 /*  2330 */   300,  125,  126,  136,  741,  741,  137,  741,  386,  135,
 /*  2340 */   132,  306,  178,  315,  156,  169,  158,  234,  236,  241,
 /*  2350 */   244,  119,  245,  240,  161,  356,  242,  389,  122,  124,
 /*  2360 */   127,  741,  149,  130,  146,  741,  741,  741,  300,  741,
 /*  2370 */   741,  741,  741,  741,  139,  741,  741,  133,  138,  306,
 /*  2380 */   178,  312,  741,  741,  741,  741,  741,  741,  741,  741,
 /*  2390 */   129,  741,  207,  741,  741,  300,  125,  126,  136,  741,
 /*  2400 */   741,  137,  741,  386,  135,  132,  306,  178,  315,  156,
 /*  2410 */   169,  158,  234,  236,  241,  244,  119,  245,  240,  161,
 /*  2420 */   356,  242,  389,  122,  124,  127,  741,  149,  130,  146,
 /*  2430 */   741,  741,  741,  300,  741,  741,  741,  741,  741,  139,
 /*  2440 */   741,  741,  133,  138,  306,  178,  316,  741,  741,  741,
 /*  2450 */   741,  741,  741,  741,  741,  129,  741,  347,  741,  741,
 /*  2460 */   300,  125,  126,  136,  741,  741,  137,  741,  386,  135,
 /*  2470 */   132,  306,  178,  315,  156,  169,  158,  234,  236,  241,
 /*  2480 */   244,  119,  245,  240,  161,  356,  242,  389,  122,  124,
 /*  2490 */   127,  741,  149,  130,  146,  741,  741,  741,  300,  259,
 /*  2500 */   257,  741,  741,  741,  139,  741,  741,  133,  138,  306,
 /*  2510 */   178,  319,  741,  741,  741,  741,  741,  741,  741,  741,
 /*  2520 */   129,  741,  741,  741,  741,  300,  125,  126,  136,  741,
 /*  2530 */   741,  137,  741,  466,  135,  132,  306,  178,  315,  156,
 /*  2540 */   169,  158,  234,  236,  241,  244,  119,  245,  240,  161,
 /*  2550 */   356,  741,  262,  122,  124,  127,  741,  149,  130,  146,
 /*  2560 */   741,  741,  741,  300,  741,  741,  741,  741,  741,  139,
 /*  2570 */   741,  741,  133,  138,  306,  178,  310,  741,  741,  741,
 /*  2580 */   741,  741,  741,  741,  741,  129,  741,  210,  741,  741,
 /*  2590 */   300,  125,  126,  136,  741,  741,  137,  741,  386,  135,
 /*  2600 */   132,  306,  178,  315,  156,  169,  158,  234,  236,  241,
 /*  2610 */   244,  119,  245,  240,  161,  356,  242,  389,  122,  124,
 /*  2620 */   127,  741,  149,  130,  146,  741,  741,  741,  300,  741,
 /*  2630 */   741,  741,  741,  741,  139,  741,  741,  133,  138,  306,
 /*  2640 */   178,  317,  741,  741,  741,  741,  741,  741,  741,  741,
 /*  2650 */   129,  741,  194,  741,  741,  300,  125,  126,  136,  741,
 /*  2660 */   741,  137,  741,  386,  135,  132,  306,  178,  315,  156,
 /*  2670 */   169,  158,  234,  236,  241,  244,  119,  245,  240,  161,
 /*  2680 */   356,  242,  389,  122,  124,  127,  741,  149,  130,  146,
 /*  2690 */   741,  741,  741,  300,  741,  741,  741,  741,  741,  139,
 /*  2700 */   741,  741,  133,  138,  306,  178,  314,  741,  741,  741,
 /*  2710 */   741,  741,  741,  741,  741,  129,  741,  461,  741,  741,
 /*  2720 */   300,  125,  126,  136,  741,  741,  137,  741,  386,  135,
 /*  2730 */   132,  306,  178,  315,  156,  169,  158,  234,  236,  241,
 /*  2740 */   244,  119,  245,  240,  161,  356,  242,  389,  122,  124,
 /*  2750 */   127,  741,  149,  130,  146,  741,  741,  741,  300,  741,
 /*  2760 */   741,  741,  741,  741,  139,  741,  741,  133,  138,  306,
 /*  2770 */   178,  313,  741,  741,  741,  741,  741,  741,  741,  741,
 /*  2780 */   129,  741,  263,  741,  741,  300,  125,  126,  136,  741,
 /*  2790 */   741,  137,  741,  386,  135,  132,  306,  178,  315,  156,
 /*  2800 */   169,  158,  234,  236,  241,  244,  119,  245,  240,  161,
 /*  2810 */   356,  242,  389,  122,  124,  127,  741,  149,  130,  146,
 /*  2820 */   741,  741,  741,  258,  741,  741,  741,  741,  741,  139,
 /*  2830 */   741,  741,  133,  138,  741,  741,  741,  741,  741,  741,
 /*  2840 */   741,  741,  741,  741,  741,  129,  741,  408,  741,  741,
 /*  2850 */   300,  125,  126,  136,  741,  741,  137,  741,  386,  135,
 /*  2860 */   132,  306,  178,  315,  156,  169,  158,  234,  236,  241,
 /*  2870 */   244,  119,  245,  240,  161,  356,  242,  389,  125,  126,
 /*  2880 */   136,  741,  149,  130,  146,  741,  741,  741,  174,  741,
 /*  2890 */   741,  206,  202,  741,  139,  741,  741,  133,  138,  741,
 /*  2900 */   741,  741,  741,  741,  741,   66,  741,  741,  371,   41,
 /*  2910 */   130,  741,  741,  741,  741,  300,  741,  741,  741,  741,
 /*  2920 */   741,  139,  741,  203,  133,  138,  306,  178,  315,  156,
 /*  2930 */   169,  158,  234,  236,  241,  244,  119,  245,  240,  161,
 /*  2940 */   356,  741,  122,  124,  127,  741,  149,  741,  146,  372,
 /*  2950 */   373,  374,  375,  376,  377,  378,  379,  380,  381,  382,
 /*  2960 */   383,  741,  741,  741,  741,  741,  741,  741,  741,  741,
 /*  2970 */   741,  741,   67,  741,  129,  741,  122,  124,  127,  300,
 /*  2980 */   149,  741,  146,  741,  741,  137,  741,  467,  135,  132,
 /*  2990 */   306,  178,  315,  156,  169,  158,  234,  236,  241,  244,
 /*  3000 */   119,  245,  240,  161,  356,  741,  468,  741,  129,  741,
 /*  3010 */   122,  124,  127,  300,  149,  741,  146,  741,  741,  137,
 /*  3020 */   741,  387,  135,  132,  306,  178,  315,  156,  169,  158,
 /*  3030 */   234,  236,  241,  244,  119,  245,  240,  161,  356,  741,
 /*  3040 */   388,  741,  129,  741,  741,  741,  741,  300,  741,  741,
 /*  3050 */   741,  741,  741,  137,  741,  384,  135,  132,  306,  178,
 /*  3060 */   315,  156,  169,  158,  234,  236,  241,  244,  119,  245,
 /*  3070 */   240,  161,  356,  741,  385,  125,  126,  136,  741,  149,
 /*  3080 */   741,  146,  741,  741,  741,  741,  741,  741,  741,  741,
 /*  3090 */   741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
 /*  3100 */   741,  741,  741,  741,  741,  741,  741,  130,  741,  125,
 /*  3110 */   126,  136,  300,  149,  741,  146,  741,  741,  139,  741,
 /*  3120 */   386,  133,  138,  306,  178,  315,  156,  169,  158,  234,
 /*  3130 */   236,  241,  244,  119,  245,  240,  161,  356,  182,  741,
 /*  3140 */   741,  130,  741,  125,  126,  136,  300,  149,  741,  146,
 /*  3150 */   741,  741,  139,  741,  330,  133,  138,  306,  178,  315,
 /*  3160 */   156,  169,  158,  234,  236,  241,  244,  119,  245,  240,
 /*  3170 */   161,  356,  741,  741,  741,  130,  741,  741,  741,  741,
 /*  3180 */   300,  741,  741,  741,  741,  741,  139,  741,  222,  133,
 /*  3190 */   138,  306,  178,  315,  156,  169,  158,  234,  236,  241,
 /*  3200 */   244,  119,  245,  240,  161,  356,  125,  126,  136,  741,
 /*  3210 */   149,  741,  146,  741,  741,  741,  741,  741,  741,  741,
 /*  3220 */   741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
 /*  3230 */   741,  741,  741,  741,  741,  741,  741,  741,  130,  741,
 /*  3240 */   125,  126,  136,  300,  149,  741,  146,  741,  741,  139,
 /*  3250 */   741,  225,  133,  138,  306,  178,  315,  156,  169,  158,
 /*  3260 */   234,  236,  241,  244,  119,  245,  240,  161,  356,  741,
 /*  3270 */   741,  741,  130,  741,  125,  126,  136,  300,  149,  741,
 /*  3280 */   146,  741,  741,  139,  741,  214,  133,  138,  306,  178,
 /*  3290 */   315,  156,  169,  158,  234,  236,  241,  244,  119,  245,
 /*  3300 */   240,  161,  356,  741,  741,  741,  130,  741,  741,  741,
 /*  3310 */   741,  300,  741,  741,  741,  741,  741,  139,  741,  266,
 /*  3320 */   133,  138,  306,  178,  315,  156,  169,  158,  234,  236,
 /*  3330 */   241,  244,  119,  245,  240,  161,  356,  125,  126,  136,
 /*  3340 */   741,  149,  741,  146,  741,  741,  741,  741,  741,  741,
 /*  3350 */   741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
 /*  3360 */   741,  741,  741,  741,  741,  741,  741,  741,  741,  130,
 /*  3370 */   741,  125,  126,  136,  300,  149,  741,  146,  741,  741,
 /*  3380 */   139,  741,  164,  133,  138,  306,  178,  315,  156,  169,
 /*  3390 */   158,  234,  236,  241,  244,  119,  245,  240,  161,  356,
 /*  3400 */   741,  741,  741,  130,  741,  125,  126,  136,  300,  149,
 /*  3410 */   741,  146,  741,  741,  139,  741,  196,  133,  138,  306,
 /*  3420 */   178,  315,  156,  169,  158,  234,  236,  241,  244,  119,
 /*  3430 */   245,  240,  161,  356,  741,  741,  741,  130,  741,  741,
 /*  3440 */   741,  741,  300,  741,  741,  741,  741,  741,  139,  741,
 /*  3450 */   217,  133,  138,  306,  178,  315,  156,  169,  158,  234,
 /*  3460 */   236,  241,  244,  119,  245,  240,  161,  356,  125,  126,
 /*  3470 */   136,  741,  149,  741,  146,  741,  741,  741,  741,  741,
 /*  3480 */   741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
 /*  3490 */   741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
 /*  3500 */   130,  741,  125,  126,  136,  300,  149,  741,  146,  741,
 /*  3510 */   741,  139,  741,  267,  133,  138,  306,  178,  315,  156,
 /*  3520 */   169,  158,  234,  236,  241,  244,  119,  245,  240,  161,
 /*  3530 */   356,  741,  741,  741,  130,  741,  125,  126,  136,  300,
 /*  3540 */   149,  741,  146,  741,  741,  139,  741,  195,  133,  138,
 /*  3550 */   306,  178,  315,  156,  169,  158,  234,  236,  241,  244,
 /*  3560 */   119,  245,  240,  161,  356,  741,  741,  741,  130,  741,
 /*  3570 */   741,  741,  741,  300,  741,  741,  741,  741,  741,  139,
 /*  3580 */   741,  268,  133,  138,  306,  178,  315,  156,  169,  158,
 /*  3590 */   234,  236,  241,  244,  119,  245,  240,  161,  356,  125,
 /*  3600 */   126,  136,  741,  149,  741,  146,  741,  741,  741,  741,
 /*  3610 */   741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
 /*  3620 */   741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
 /*  3630 */   741,  130,  741,  125,  126,  136,  300,  149,  741,  146,
 /*  3640 */   741,  741,  139,  741,  270,  133,  138,  306,  178,  315,
 /*  3650 */   156,  169,  158,  234,  236,  241,  244,  119,  245,  240,
 /*  3660 */   161,  356,  741,  741,  741,  130,  741,  125,  126,  136,
 /*  3670 */   300,  149,  741,  146,  741,  741,  139,  741,  255,  133,
 /*  3680 */   138,  306,  178,  315,  156,  169,  158,  234,  236,  241,
 /*  3690 */   244,  119,  245,  240,  161,  356,  741,  741,  741,  130,
 /*  3700 */   741,  741,  741,  741,  300,  741,  741,  741,  741,  741,
 /*  3710 */   139,  741,  277,  133,  138,  306,  178,  315,  156,  169,
 /*  3720 */   158,  234,  236,  241,  244,  119,  245,  240,  161,  356,
 /*  3730 */   125,  126,  136,  741,  149,  741,  146,  741,  741,  741,
 /*  3740 */   741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
 /*  3750 */   741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
 /*  3760 */   741,  741,  130,  741,  125,  126,  136,  300,  149,  741,
 /*  3770 */   146,  741,  741,  139,  741,  185,  133,  138,  306,  178,
 /*  3780 */   315,  156,  169,  158,  234,  236,  241,  244,  119,  245,
 /*  3790 */   240,  161,  356,  741,  741,  741,  130,  741,  125,  126,
 /*  3800 */   136,  300,  149,  741,  146,  741,  741,  139,  741,  190,
 /*  3810 */   133,  138,  306,  178,  315,  156,  169,  158,  234,  236,
 /*  3820 */   241,  244,  119,  245,  240,  161,  356,  741,  741,  741,
 /*  3830 */   130,  741,  741,  741,  741,  300,  741,  741,  741,  741,
 /*  3840 */   741,  139,  741,  193,  133,  138,  306,  178,  315,  156,
 /*  3850 */   169,  158,  234,  236,  241,  244,  119,  245,  240,  161,
 /*  3860 */   356,  125,  126,  136,  741,  149,  741,  146,  741,  741,
 /*  3870 */   741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
 /*  3880 */   741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
 /*  3890 */   741,  741,  741,  130,  741,  125,  126,  136,  300,  149,
 /*  3900 */   741,  146,  741,  741,  139,  741,  186,  133,  138,  306,
 /*  3910 */   178,  315,  156,  169,  158,  234,  236,  241,  244,  119,
 /*  3920 */   245,  240,  161,  356,  741,  741,  741,  130,  741,  125,
 /*  3930 */   126,  136,  300,  149,  741,  146,  741,  741,  139,  741,
 /*  3940 */   197,  133,  138,  306,  178,  315,  156,  169,  158,  234,
 /*  3950 */   236,  241,  244,  119,  245,  240,  161,  356,  741,  741,
 /*  3960 */   741,  130,  741,  741,  741,  741,  300,  741,  741,  741,
 /*  3970 */   741,  741,  139,  741,  200,  133,  138,  306,  178,  315,
 /*  3980 */   156,  169,  158,  234,  236,  241,  244,  119,  245,  240,
 /*  3990 */   161,  356,  125,  126,  136,  741,  149,  741,  146,  741,
 /*  4000 */   741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
 /*  4010 */   741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
 /*  4020 */   741,  741,  741,  741,  130,  741,  125,  126,  136,  300,
 /*  4030 */   149,  741,  146,  741,  741,  139,  741,  208,  133,  138,
 /*  4040 */   306,  178,  315,  156,  169,  158,  234,  236,  241,  244,
 /*  4050 */   119,  245,  240,  161,  356,  741,  741,  741,  130,  741,
 /*  4060 */   125,  126,  136,  300,  149,  741,  146,  741,  741,  139,
 /*  4070 */   741,  359,  133,  138,  306,  178,  315,  156,  169,  158,
 /*  4080 */   234,  236,  241,  244,  119,  245,  240,  161,  356,  741,
 /*  4090 */   741,  741,  130,  741,  741,  741,  741,  300,  741,  741,
 /*  4100 */   741,  741,  741,  139,  741,  360,  133,  138,  306,  178,
 /*  4110 */   315,  156,  169,  158,  234,  236,  241,  244,  119,  245,
 /*  4120 */   240,  161,  356,  125,  126,  136,  741,  149,  741,  146,
 /*  4130 */   741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
 /*  4140 */   741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
 /*  4150 */   741,  741,  741,  741,  741,  130,  741,  125,  126,  136,
 /*  4160 */   300,  149,  741,  146,  741,  741,  139,  741,  205,  133,
 /*  4170 */   138,  306,  178,  315,  156,  169,  158,  234,  236,  241,
 /*  4180 */   244,  119,  245,  240,  161,  356,  741,  741,  741,  130,
 /*  4190 */   741,  125,  126,  136,  300,  149,  741,  146,  741,  741,
 /*  4200 */   139,  741,  199,  133,  138,  306,  178,  315,  156,  169,
 /*  4210 */   158,  234,  236,  241,  244,  119,  245,  240,  161,  356,
 /*  4220 */   741,  741,  741,  130,  741,  741,  741,  741,  300,  741,
 /*  4230 */   741,  741,  741,  741,  139,  741,  273,  133,  138,  306,
 /*  4240 */   178,  315,  156,  169,  158,  234,  236,  241,  244,  119,
 /*  4250 */   245,  240,  161,  356,  125,  126,  136,  741,  149,  741,
 /*  4260 */   146,  741,  741,  741,  741,  741,  741,  741,  741,  741,
 /*  4270 */   741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
 /*  4280 */   741,  741,  741,  741,  741,  741,  130,  741,  125,  126,
 /*  4290 */   136,  300,  149,  741,  146,  741,  741,  139,  741,  219,
 /*  4300 */   133,  138,  306,  178,  315,  156,  169,  158,  234,  236,
 /*  4310 */   241,  244,  119,  245,  240,  161,  356,  741,  741,  741,
 /*  4320 */   130,  741,  125,  126,  136,  300,  149,  741,  146,  741,
 /*  4330 */   741,  139,  741,  387,  133,  138,  306,  178,  315,  156,
 /*  4340 */   169,  158,  234,  236,  241,  244,  119,  245,  240,  161,
 /*  4350 */   356,  741,  741,  741,  130,  741,  741,  741,  741,  300,
 /*  4360 */   741,  741,  741,  741,  741,  139,  741,  265,  133,  138,
 /*  4370 */   306,  178,  315,  156,  169,  158,  234,  236,  241,  244,
 /*  4380 */   119,  245,  240,  161,  356,  278,   29,  280,  192,  482,
 /*  4390 */   741,   39,  106,  125,  126,  136,  741,   30,  741,  112,
 /*  4400 */   301,  302,  303,  304,  305,   99,   96,   93,  100,  102,
 /*  4410 */   101,  741,  741,  741,  741,  741,  741,  741,  741,  741,
 /*  4420 */   741,  741,  741,  741,  741,  130,  741,  741,  741,  741,
 /*  4430 */   253,  741,  741,  741,  142,  369,  139,  741,  741,  133,
 /*  4440 */   138,  278,   29,  280,  192,  741,  741,   39,  106,  741,
 /*  4450 */   114,  741,  741,   30,  741,  112,  301,  302,  303,  304,
 /*  4460 */   305,   99,   96,   93,  100,  102,  101,  741,  741,  741,
 /*  4470 */   741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
 /*  4480 */   741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
 /*  4490 */   142,  369,  125,  126,  136,  741,  741,  278,   29,  280,
 /*  4500 */   192,  741,  741,   39,  106,  427,  741,  741,  741,   30,
 /*  4510 */   741,  112,  301,  302,  303,  304,  305,   99,   96,   93,
 /*  4520 */   100,  102,  101,  741,  130,  741,  741,  741,  741,  274,
 /*  4530 */   741,  741,  741,  741,  741,  139,  741,  741,  133,  138,
 /*  4540 */   741,  741,  741,  741,  741,  741,  142,  369,  125,  126,
 /*  4550 */   136,  741,  741,  278,   29,  280,  192,  741,  741,   39,
 /*  4560 */   106,  429,  741,  741,  741,   30,  741,  112,  301,  302,
 /*  4570 */   303,  304,  305,   99,   96,   93,  100,  102,  101,  741,
 /*  4580 */   130,  741,  741,  741,  741,  204,  741,  741,  741,  741,
 /*  4590 */   741,  139,  741,  741,  133,  138,  741,  741,  741,  741,
 /*  4600 */   741,  741,  142,  369,  741,  741,  741,  741,  741,  278,
 /*  4610 */    29,  280,  192,  286,  741,   39,  106,  741,  741,  741,
 /*  4620 */   741,   30,  741,  112,  301,  302,  303,  304,  305,   99,
 /*  4630 */    96,   93,  100,  102,  101,  741,  741,  741,  741,  741,
 /*  4640 */   741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
 /*  4650 */   741,  741,  741,  741,  741,  741,  741,  741,  142,  369,
 /*  4660 */   741,  741,  741,  741,  741,  278,   29,  280,  192,  741,
 /*  4670 */   741,   39,  106,  741,  741,  741,  741,   30,  464,  112,
 /*  4680 */   301,  302,  303,  304,  305,   99,   96,   93,  100,  102,
 /*  4690 */   101,  741,  741,  741,  741,  741,  741,  741,  741,  741,
 /*  4700 */   741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
 /*  4710 */   741,  741,  741,  741,  142,  369,  741,  741,  741,  741,
 /*  4720 */   741,  278,   29,  280,  192,  741,  741,   39,  106,  741,
 /*  4730 */   113,  741,  741,   30,  741,  112,  301,  302,  303,  304,
 /*  4740 */   305,   99,   96,   93,  100,  102,  101,  741,  741,  741,
 /*  4750 */   741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
 /*  4760 */   741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
 /*  4770 */   142,  369,  741,  741,  741,  741,  741,  278,   29,  280,
 /*  4780 */   192,  741,  741,   39,  106,  741,  741,  741,  741,   30,
 /*  4790 */   741,  112,  301,  302,  303,  304,  305,   99,   96,   93,
 /*  4800 */   100,  102,  101,  741,  741,  741,  741,  741,  741,  741,
 /*  4810 */   741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
 /*  4820 */   741,  741,  741,  741,  741,  741,  142,  369,  741,  741,
 /*  4830 */   741,  741,  741,  278,   29,  280,  192,  741,  741,   39,
 /*  4840 */   106,  741,  741,  741,  741,   30,  254,  112,  301,  302,
 /*  4850 */   303,  304,  305,   99,   96,   93,  100,  102,  101,  741,
 /*  4860 */   741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
 /*  4870 */   741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
 /*  4880 */   741,  741,  142,  741,  741,  741,  741,  741,  741,  278,
 /*  4890 */    29,  280,  192,  741,  741,   39,  106,  741,  741,  741,
 /*  4900 */   741,   30,  224,  112,  301,  302,  303,  304,  305,   99,
 /*  4910 */    96,   93,  100,  102,  101,  741,  741,  125,  126,  136,
 /*  4920 */   741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
 /*  4930 */   741,  741,  741,  741,  741,  741,  741,  741,  142,  741,
 /*  4940 */   741,  741,  741,  741,  741,  741,  741,  741,  741,  130,
 /*  4950 */   741,  741,  741,  741,  300,  741,  741,  741,  741,  741,
 /*  4960 */   139,  741,  741,  133,  138,  306,  178,  315,  156,  169,
 /*  4970 */   158,  234,  236,  241,  244,  119,  245,  231,  278,   29,
 /*  4980 */   280,  192,  741,  357,   39,  106,  741,  741,  741,  741,
 /*  4990 */    30,  741,  112,  301,  302,  303,  304,  305,   99,   96,
 /*  5000 */    93,  100,  102,  101,  741,  741,  741,  741,  741,  741,
 /*  5010 */   741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
 /*  5020 */   741,  741,  741,  741,  741,  741,  741,  142,  741,  741,
 /*  5030 */   741,  741,  741,  741,  278,   29,  280,  192,  741,  741,
 /*  5040 */    39,  105,  741,  141,  741,  741,   30,  741,  112,  301,
 /*  5050 */   302,  303,  304,  305,   99,   96,   93,  100,  102,  101,
 /*  5060 */   741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
 /*  5070 */   741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
 /*  5080 */   741,  741,  741,  142,  741,  741,  741,  741,  741,  741,
 /*  5090 */   278,   29,  280,  192,  741,  741,   39,  106,  741,  741,
 /*  5100 */   741,  741,   30,  191,  112,  301,  302,  303,  304,  305,
 /*  5110 */    99,   96,   93,  100,  102,  101,  741,  741,  741,  741,
 /*  5120 */   741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
 /*  5130 */   741,  741,  741,  741,  741,  741,  741,  741,  741,  142,
 /*  5140 */   741,  741,  741,  741,  741,  741,  278,   29,  280,  192,
 /*  5150 */   741,  741,   39,  106,  741,  741,  741,  741,   30,  251,
 /*  5160 */   112,  301,  302,  303,  304,  305,   99,   96,   93,  100,
 /*  5170 */   102,  101,  741,  741,  741,  741,  741,  741,  741,  741,
 /*  5180 */   741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
 /*  5190 */   741,  741,  741,  741,  741,  142,  741,  741,  741,  741,
 /*  5200 */   741,  741,  278,   29,  280,  192,  741,  741,   39,  106,
 /*  5210 */   741,  741,  741,  741,   30,  211,  112,  301,  302,  303,
 /*  5220 */   304,  305,   99,   96,   93,  100,  102,  101,  741,  741,
 /*  5230 */   741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
 /*  5240 */   741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
 /*  5250 */   741,  142,  741,  741,  741,  741,  741,  741,  278,   29,
 /*  5260 */   280,  192,  741,  741,   39,  106,  741,  741,  741,  741,
 /*  5270 */    30,  189,  112,  301,  302,  303,  304,  305,   99,   96,
 /*  5280 */    93,  100,  102,  101,  741,  741,  741,  741,  741,  741,
 /*  5290 */   741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
 /*  5300 */   741,  741,  741,  741,  741,  741,  741,  142,  741,  741,
 /*  5310 */   741,  741,  741,  741,  278,   29,  280,  192,  741,  741,
 /*  5320 */    39,  106,  741,  741,  741,  741,   30,  216,  112,  301,
 /*  5330 */   302,  303,  304,  305,   99,   96,   93,  100,  102,  101,
 /*  5340 */   741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
 /*  5350 */   741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
 /*  5360 */   741,  741,  741,  142,  741,  741,  741,  741,  741,  741,
 /*  5370 */   278,   29,  280,  192,  741,  741,   39,  106,  741,  741,
 /*  5380 */   741,  741,   30,  741,  112,  301,  302,  303,  304,  305,
 /*  5390 */    99,   96,   93,  100,  102,  101,  741,  741,  125,  126,
 /*  5400 */   136,  741,  741,  741,  741,  741,  741,  741,  741,  741,
 /*  5410 */   741,  741,  741,  741,  741,  741,  741,  741,  741,  142,
 /*  5420 */   741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
 /*  5430 */   130,  741,  741,  741,  741,  300,  741,  741,  741,  741,
 /*  5440 */   741,  139,  741,  741,  133,  138,  306,  178,  315,  156,
 /*  5450 */   169,  158,  234,  236,  241,  244,  119,  238,  741,  741,
 /*  5460 */   125,  126,  136,  741,  741,  741,  741,  741,  741,  741,
 /*  5470 */   741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
 /*  5480 */   741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
 /*  5490 */   741,  741,  130,  741,  741,  741,  741,  300,  741,  741,
 /*  5500 */   741,  741,  741,  139,  741,  741,  133,  138,  306,  178,
 /*  5510 */   315,  156,  169,  158,  234,  236,  241,  244,  120,  125,
 /*  5520 */   126,  136,  741,  741,  741,  741,  741,  741,  741,  741,
 /*  5530 */   741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
 /*  5540 */   741,  741,  741,  741,  741,  125,  126,  136,  741,  741,
 /*  5550 */   741,  130,  741,  741,  741,  741,  300,  741,  741,  741,
 /*  5560 */   741,  741,  139,  741,  741,  133,  138,  306,  178,  315,
 /*  5570 */   156,  169,  158,  234,  236,  241,  247,  130,  741,  741,
 /*  5580 */   741,  741,  300,  741,  741,  741,  741,  741,  139,  741,
 /*  5590 */   741,  133,  138,  306,  178,  315,  156,  169,  158,  234,
 /*  5600 */   236,  246,  125,  126,  136,  741,  741,  741,  741,  741,
 /*  5610 */   741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
 /*  5620 */   741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
 /*  5630 */   741,  741,  741,  741,  130,  741,  741,  741,  741,  300,
 /*  5640 */   741,  741,  741,  741,  741,  139,  741,  741,  133,  138,
 /*  5650 */   306,  178,  315,  156,  169,  158,  234,  243,
};
static const YYCODETYPE yy_lookahead[] = {
 /*     0 */    83,   84,   85,   86,   87,   88,   89,   31,   32,   33,
 /*    10 */    34,   19,   35,   36,   37,   98,  115,  100,  101,  102,
 /*    20 */   103,  104,  105,  106,  107,  108,  109,  126,    8,  112,
 /*    30 */     4,    5,  115,    6,    7,  118,    9,  120,   18,  122,
 /*    40 */     7,  124,  125,  126,   13,   18,  129,  130,  131,  132,
 /*    50 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*    60 */   143,  144,  145,   10,  147,  148,  149,  150,   10,  152,
 /*    70 */   153,   13,  155,   83,   84,   85,   12,   87,    8,   89,
 /*    80 */    19,   11,   10,   56,   14,   15,    4,    5,   98,   14,
 /*    90 */   100,  101,  102,  103,  104,  105,  106,  107,  108,  109,
 /*   100 */     7,    8,  112,    6,    7,  115,    9,  110,  111,   12,
 /*   110 */   120,    8,  110,  111,   11,   18,  126,   14,   15,  129,
 /*   120 */   130,  131,  132,  133,  134,  135,  136,  137,  138,  139,
 /*   130 */   140,  141,  142,  143,  144,  145,   12,  147,  148,  149,
 /*   140 */   150,    8,  152,  153,   17,  155,   83,   84,   85,   14,
 /*   150 */    87,   18,   89,   56,   13,   90,   91,   13,   90,   91,
 /*   160 */    16,   17,   99,  100,  101,  102,  103,  104,  105,  106,
 /*   170 */   107,  108,  109,   19,    7,  112,    9,   19,  115,   12,
 /*   180 */    13,    8,    7,  120,    9,   18,   10,   12,   13,  126,
 /*   190 */    90,   91,  129,  130,  131,  132,  133,  134,  135,  136,
 /*   200 */   137,  138,  139,  140,  141,  142,  143,  144,  145,   14,
 /*   210 */   147,  148,  149,  150,  113,  114,  153,  154,  155,   83,
 /*   220 */    84,   85,    6,   87,   80,   89,   54,   55,   12,    6,
 /*   230 */    16,   17,   28,   29,   98,   12,  100,  101,  102,  103,
 /*   240 */   104,  105,  106,  107,  108,  109,   12,    8,  112,    6,
 /*   250 */     7,  115,    9,    7,   10,    9,  120,   18,   16,   17,
 /*   260 */    10,   18,  126,   13,   18,  129,  130,  131,  132,  133,
 /*   270 */   134,  135,  136,  137,  138,  139,  140,  141,  142,  143,
 /*   280 */   144,  145,   56,  147,  148,  149,  150,    8,  152,  153,
 /*   290 */    56,  155,   83,   84,   85,    8,   87,   18,   89,   56,
 /*   300 */    16,   17,   56,   13,   55,   18,   16,   17,   99,  100,
 /*   310 */   101,  102,  103,  104,  105,  106,  107,  108,  109,    6,
 /*   320 */     7,  112,    9,    8,  115,    6,    7,   56,    9,  120,
 /*   330 */    10,   18,   12,   18,   10,  126,   14,   18,  129,  130,
 /*   340 */   131,  132,  133,  134,  135,  136,  137,  138,  139,  140,
 /*   350 */   141,  142,  143,  144,  145,   14,  147,  148,  149,  150,
 /*   360 */    26,   27,  153,  154,  155,   83,   84,   85,    6,   87,
 /*   370 */    80,   89,   14,   19,   12,   17,   16,   17,    6,    7,
 /*   380 */     8,   99,  100,  101,  102,  103,  104,  105,  106,  107,
 /*   390 */   108,  109,   20,    7,  112,    9,    7,  115,    9,    7,
 /*   400 */    56,    9,  120,   13,   18,   14,   56,   18,  126,   12,
 /*   410 */    18,  129,  130,  131,  132,  133,  134,  135,  136,  137,
 /*   420 */   138,  139,  140,  141,  142,  143,  144,  145,   19,  147,
 /*   430 */   148,  149,  150,    8,   19,  153,  154,  155,   83,   84,
 /*   440 */    85,   56,   87,   18,   89,   10,   13,   10,   14,  119,
 /*   450 */    10,  114,  114,  114,   99,  100,  101,  102,  103,  104,
 /*   460 */   105,  106,  107,  108,  109,   19,    7,  112,    9,    7,
 /*   470 */   115,    9,    7,    7,    9,  120,  119,   18,   56,  114,
 /*   480 */    18,  126,   13,   18,  129,  130,  131,  132,  133,  134,
 /*   490 */   135,  136,  137,  138,  139,  140,  141,  142,  143,  144,
 /*   500 */   145,   14,  147,  148,  149,  150,   10,  114,  153,  154,
 /*   510 */   155,   83,   84,   85,  116,   87,    7,   89,    9,    7,
 /*   520 */     7,   69,   90,    8,   14,   53,   98,   18,  100,  101,
 /*   530 */   102,  103,  104,  105,  106,  107,  108,  109,   99,    7,
 /*   540 */   112,    9,    7,  115,    9,   12,   10,    7,  120,   38,
 /*   550 */    18,   10,  116,   18,  126,   39,    7,  129,  130,  131,
 /*   560 */   132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
 /*   570 */   142,  143,  144,  145,   90,  147,  148,  149,  150,   90,
 /*   580 */   152,  153,   52,  155,   83,   84,   85,   10,   87,  116,
 /*   590 */    89,  116,   40,   17,  116,  116,   41,  116,  116,   98,
 /*   600 */     7,  100,  101,  102,  103,  104,  105,  106,  107,  108,
 /*   610 */   109,  116,   14,  112,   14,   56,  115,   10,  116,  116,
 /*   620 */    56,  120,   19,   56,   19,   10,   92,  126,   17,    7,
 /*   630 */   129,  130,  131,  132,  133,  134,  135,  136,  137,  138,
 /*   640 */   139,  140,  141,  142,  143,  144,  145,   93,  147,  148,
 /*   650 */   149,  150,    7,  152,  153,   93,  155,   83,   84,   85,
 /*   660 */    17,   87,   10,   89,   10,   12,   10,   19,   19,   19,
 /*   670 */    19,   14,   98,   14,  100,  101,  102,  103,  104,  105,
 /*   680 */   106,  107,  108,  109,   14,   19,  112,   12,   11,  115,
 /*   690 */   158,  158,  158,  158,  120,  158,  158,  158,  158,  158,
 /*   700 */   126,  158,  158,  129,  130,  131,  132,  133,  134,  135,
 /*   710 */   136,  137,  138,  139,  140,  141,  142,  143,  144,  145,
 /*   720 */   158,  147,  148,  149,  150,  158,  152,  153,  158,  155,
 /*   730 */    83,   84,   85,  158,   87,  158,   89,  158,  158,  158,
 /*   740 */   158,  158,  158,  158,  158,  158,   99,  100,  101,  102,
 /*   750 */   103,  104,  105,  106,  107,  108,  109,  158,  158,  112,
 /*   760 */   158,  158,  115,  158,  158,  158,  158,  120,  158,  158,
 /*   770 */   158,  158,  158,  126,  158,  158,  129,  130,  131,  132,
 /*   780 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*   790 */   143,  144,  145,  158,  147,  148,  149,  150,  158,  158,
 /*   800 */   153,  154,  155,   83,   84,   85,  158,   87,  158,   89,
 /*   810 */   158,  158,  158,  158,  158,  158,  158,  158,  158,   99,
 /*   820 */   100,  101,  102,  103,  104,  105,  106,  107,  108,  109,
 /*   830 */   158,  158,  112,  158,  158,  115,  158,  158,  158,  158,
 /*   840 */   120,  158,  158,  158,  158,  158,  126,  158,  158,  129,
 /*   850 */   130,  131,  132,  133,  134,  135,  136,  137,  138,  139,
 /*   860 */   140,  141,  142,  143,  144,  145,  158,  147,  148,  149,
 /*   870 */   150,  158,  158,  153,  154,  155,   83,   84,   85,  158,
 /*   880 */    87,  158,   89,  158,  158,  158,  158,  158,  158,  158,
 /*   890 */   158,  158,   99,  100,  101,  102,  103,  104,  105,  106,
 /*   900 */   107,  108,  109,  158,  158,  112,  158,  158,  115,  158,
 /*   910 */   158,  158,  158,  120,  158,  158,  158,  158,  158,  126,
 /*   920 */   158,  158,  129,  130,  131,  132,  133,  134,  135,  136,
 /*   930 */   137,  138,  139,  140,  141,  142,  143,  144,  145,  158,
 /*   940 */   147,  148,  149,  150,   16,   17,  153,  154,  155,    1,
 /*   950 */   158,    3,  158,  158,    6,    7,    8,    9,  158,   11,
 /*   960 */    12,   13,   14,   15,  158,  158,   18,  158,   20,   21,
 /*   970 */    22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
 /*   980 */   158,  158,  158,  158,  158,   57,   58,   59,   60,   61,
 /*   990 */    62,   63,   64,   65,   66,   67,   68,  158,  158,  158,
 /*  1000 */   158,  158,  158,   55,   56,   42,   43,   44,   45,   46,
 /*  1010 */    47,   48,   49,   50,   51,  158,  158,   69,   70,   71,
 /*  1020 */    72,   73,   74,   75,   76,   77,   78,   79,    1,   81,
 /*  1030 */     3,  158,  158,    6,    7,    8,    9,   10,  158,   12,
 /*  1040 */    13,   14,   15,  158,  158,   18,  158,   20,   21,   22,
 /*  1050 */    23,   24,   25,   26,   27,   28,   29,   30,   31,    6,
 /*  1060 */     7,    8,  158,  158,  158,   12,  158,  158,  158,  158,
 /*  1070 */   158,  158,  158,   20,  158,  158,  158,  158,  158,  158,
 /*  1080 */   158,  158,   55,   56,  158,  158,  158,  158,  158,  158,
 /*  1090 */   158,  158,  158,  158,  158,  158,   69,   70,   71,   72,
 /*  1100 */    73,   74,   75,   76,   77,   78,   79,    1,   81,    3,
 /*  1110 */   158,  158,    6,    7,    8,    9,  158,   11,   12,   13,
 /*  1120 */    14,   15,  158,  158,   18,  158,   20,   21,   22,   23,
 /*  1130 */    24,   25,   26,   27,   28,   29,   30,   31,  158,  158,
 /*  1140 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  1150 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  1160 */   158,   55,   56,  158,  158,  158,  158,  158,  158,  158,
 /*  1170 */   158,  158,  158,  158,  158,   69,   70,   71,   72,   73,
 /*  1180 */    74,   75,   76,   77,   78,   79,    1,   81,    3,  158,
 /*  1190 */   158,    6,    7,    8,    9,  158,   11,   12,   13,   14,
 /*  1200 */    15,  158,  158,   18,  158,   20,   21,   22,   23,   24,
 /*  1210 */    25,   26,   27,   28,   29,   30,   31,  158,  158,  158,
 /*  1220 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  1230 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  1240 */    55,   56,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  1250 */   158,  158,  158,  158,   69,   70,   71,   72,   73,   74,
 /*  1260 */    75,   76,   77,   78,   79,    1,   81,    3,  158,  158,
 /*  1270 */     6,    7,    8,    9,  158,   11,   12,   13,   14,   15,
 /*  1280 */   158,  158,   18,  158,   20,   21,   22,   23,   24,   25,
 /*  1290 */    26,   27,   28,   29,   30,   31,  158,  158,  158,  158,
 /*  1300 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  1310 */   158,  158,  158,  158,  158,  158,  158,  158,  158,   55,
 /*  1320 */    56,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  1330 */   158,  158,  158,   69,   70,   71,   72,   73,   74,   75,
 /*  1340 */    76,   77,   78,   79,  158,   81,    0,    1,  158,    3,
 /*  1350 */   158,  158,    6,    7,    8,    9,  158,  158,   12,   13,
 /*  1360 */    14,   15,  158,  158,   18,  158,   20,   21,   22,   23,
 /*  1370 */    24,   25,   26,   27,   28,   29,   30,   31,  158,  158,
 /*  1380 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  1390 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  1400 */   158,   55,   56,  158,  158,  158,  158,  158,  158,  158,
 /*  1410 */   158,  158,  158,  158,  158,   69,   70,   71,   72,   73,
 /*  1420 */    74,   75,   76,   77,   78,   79,    1,   81,    3,  158,
 /*  1430 */   158,    6,    7,    8,    9,  158,  158,   12,   13,   83,
 /*  1440 */    84,   85,  158,   18,  158,   20,   21,   22,   23,   24,
 /*  1450 */    25,   26,   27,   28,   29,   30,   31,  158,  158,  158,
 /*  1460 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  1470 */   158,  115,  158,  158,  158,  158,  120,  158,  158,  158,
 /*  1480 */    55,   56,  126,  158,  158,  129,  130,  131,  132,  133,
 /*  1490 */   134,  135,  136,  137,   69,   70,   71,   72,   73,   74,
 /*  1500 */    75,   76,   77,   78,   79,    1,   81,    3,  158,  158,
 /*  1510 */     6,    7,    8,    9,  158,   83,   12,   13,   86,  158,
 /*  1520 */    88,  158,   18,  158,   20,   21,   22,   23,   24,   25,
 /*  1530 */    26,   27,   28,   29,   30,   31,  158,  158,  158,  158,
 /*  1540 */   158,  158,  158,  158,  158,  158,  158,  115,  158,  158,
 /*  1550 */   118,  158,  158,  121,  122,  123,  124,  125,  158,   55,
 /*  1560 */    56,  158,  158,  158,   83,   84,   85,  158,   87,  158,
 /*  1570 */    89,  158,  158,   69,   70,   71,   72,   73,   74,   75,
 /*  1580 */    76,   77,   78,   79,  158,   81,  158,  158,  158,  158,
 /*  1590 */   158,  158,  158,  158,  158,  158,  115,  158,  117,  158,
 /*  1600 */   158,  120,  158,  158,  158,  158,  158,  126,  127,  128,
 /*  1610 */   129,  130,  131,  132,  133,  134,  135,  136,  137,  138,
 /*  1620 */   139,  140,  141,  142,  143,  144,  145,  146,  147,  158,
 /*  1630 */   158,  158,  151,  158,  158,  158,  158,  156,  158,    6,
 /*  1640 */     7,    8,  158,   83,   84,   85,  158,   87,  158,   89,
 /*  1650 */   158,  158,  158,   20,   21,   22,   23,   24,   25,   26,
 /*  1660 */    27,   28,   29,   30,   31,  158,  158,  158,  158,  158,
 /*  1670 */   158,  158,  158,  158,  158,  115,  158,  117,   16,   17,
 /*  1680 */   120,  158,  158,  158,  158,  158,  126,  127,  128,  129,
 /*  1690 */   130,  131,  132,  133,  134,  135,  136,  137,  138,  139,
 /*  1700 */   140,  141,  142,  143,  144,  145,  146,  147,   83,   84,
 /*  1710 */    85,  151,   87,  158,   89,  158,  158,  158,  158,   57,
 /*  1720 */    58,   59,   60,   61,   62,   63,   64,   65,   66,   67,
 /*  1730 */    68,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  1740 */   115,  158,  117,  158,  158,  120,   83,   84,   85,  158,
 /*  1750 */   158,  126,  127,  128,  129,  130,  131,  132,  133,  134,
 /*  1760 */   135,  136,  137,  138,  139,  140,  141,  142,  143,  144,
 /*  1770 */   145,  146,  147,   83,   84,   85,  151,   87,  115,   89,
 /*  1780 */   158,  158,  158,  120,  158,  158,  158,  158,  158,  126,
 /*  1790 */   158,  158,  129,  130,  131,  132,  133,  134,  135,  136,
 /*  1800 */   158,  158,  158,  158,  158,  115,  158,  117,  158,  158,
 /*  1810 */   120,   83,   84,   85,  158,  158,  126,  127,  128,  129,
 /*  1820 */   130,  131,  132,  133,  134,  135,  136,  137,  138,  139,
 /*  1830 */   140,  141,  142,  143,  144,  145,  146,  147,   83,   84,
 /*  1840 */    85,  151,   87,  115,   89,  158,  158,  158,  120,  158,
 /*  1850 */   158,  158,  158,  158,  126,  158,  158,  129,  130,  131,
 /*  1860 */   132,  133,  134,  135,  158,  158,  158,  158,  158,  158,
 /*  1870 */   115,  158,  117,  158,  158,  120,   83,   84,   85,  158,
 /*  1880 */   158,  126,  127,  128,  129,  130,  131,  132,  133,  134,
 /*  1890 */   135,  136,  137,  138,  139,  140,  141,  142,  143,  144,
 /*  1900 */   145,  146,  147,   83,   84,   85,  158,   87,  115,   89,
 /*  1910 */   158,  158,  157,  120,  158,  158,  158,  158,  158,  126,
 /*  1920 */   158,  158,  129,  130,  131,  132,  133,  134,  135,  158,
 /*  1930 */   158,  158,  158,  158,  158,  115,  158,  117,  158,  158,
 /*  1940 */   120,   83,   84,   85,  158,  158,  126,  127,  128,  129,
 /*  1950 */   130,  131,  132,  133,  134,  135,  136,  137,  138,  139,
 /*  1960 */   140,  141,  142,  143,  144,  145,  146,  147,   83,   84,
 /*  1970 */    85,  151,   87,  115,   89,  158,  158,  158,  120,  158,
 /*  1980 */   158,  158,  158,  158,  126,  158,  158,  129,  130,  131,
 /*  1990 */   132,  133,  134,  135,  158,  158,  158,  158,  158,  158,
 /*  2000 */   115,  158,  117,  158,  158,  120,   83,   84,   85,  158,
 /*  2010 */   158,  126,  127,  128,  129,  130,  131,  132,  133,  134,
 /*  2020 */   135,  136,  137,  138,  139,  140,  141,  142,  143,  144,
 /*  2030 */   145,  146,  147,   83,   84,   85,  158,   87,  115,   89,
 /*  2040 */   158,  158,  157,  120,  158,  158,  158,  158,  158,  126,
 /*  2050 */   158,  158,  129,  130,  131,  132,  133,  134,  158,  158,
 /*  2060 */   158,  158,  158,  158,  158,  115,  158,  117,  158,  158,
 /*  2070 */   120,   83,   84,   85,  158,  158,  126,  127,  128,  129,
 /*  2080 */   130,  131,  132,  133,  134,  135,  136,  137,  138,  139,
 /*  2090 */   140,  141,  142,  143,  144,  145,  146,  147,   83,   84,
 /*  2100 */    85,  158,   87,  115,   89,  158,  158,  158,  120,  158,
 /*  2110 */   158,  158,  158,  158,  126,  158,  158,  129,  130,  131,
 /*  2120 */   132,  133,  134,  158,  158,  158,  158,  158,  158,  158,
 /*  2130 */   115,  158,  117,  158,  158,  120,   83,   84,   85,  158,
 /*  2140 */   158,  126,  127,  128,  129,  130,  131,  132,  133,  134,
 /*  2150 */   135,  136,  137,  138,  139,  140,  141,  142,  143,  144,
 /*  2160 */   145,  146,  147,   83,   84,   85,  158,   87,  115,   89,
 /*  2170 */   158,  158,  158,  120,  158,  158,  158,  158,  158,  126,
 /*  2180 */   158,  158,  129,  130,  131,  132,  133,  158,  158,  158,
 /*  2190 */   158,  158,  158,  158,  158,  115,  158,  117,  158,  158,
 /*  2200 */   120,   83,   84,   85,  158,  158,  126,  127,  128,  129,
 /*  2210 */   130,  131,  132,  133,  134,  135,  136,  137,  138,  139,
 /*  2220 */   140,  141,  142,  143,  144,  145,  146,  147,   83,   84,
 /*  2230 */    85,  158,   87,  115,   89,  158,  158,  158,  120,  158,
 /*  2240 */   158,  158,  158,  158,  126,  158,  158,  129,  130,  131,
 /*  2250 */   132,  133,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  2260 */   115,  158,  117,  158,  158,  120,   83,   84,   85,  158,
 /*  2270 */   158,  126,  127,  128,  129,  130,  131,  132,  133,  134,
 /*  2280 */   135,  136,  137,  138,  139,  140,  141,  142,  143,  144,
 /*  2290 */   145,  146,  147,   83,   84,   85,  158,   87,  115,   89,
 /*  2300 */   158,  158,  158,  120,  158,  158,  158,  158,  158,  126,
 /*  2310 */   158,  158,  129,  130,  131,  132,  133,  158,  158,  158,
 /*  2320 */   158,  158,  158,  158,  158,  115,  158,  117,  158,  158,
 /*  2330 */   120,   83,   84,   85,  158,  158,  126,  158,  128,  129,
 /*  2340 */   130,  131,  132,  133,  134,  135,  136,  137,  138,  139,
 /*  2350 */   140,  141,  142,  143,  144,  145,  146,  147,   83,   84,
 /*  2360 */    85,  158,   87,  115,   89,  158,  158,  158,  120,  158,
 /*  2370 */   158,  158,  158,  158,  126,  158,  158,  129,  130,  131,
 /*  2380 */   132,  133,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  2390 */   115,  158,  117,  158,  158,  120,   83,   84,   85,  158,
 /*  2400 */   158,  126,  158,  128,  129,  130,  131,  132,  133,  134,
 /*  2410 */   135,  136,  137,  138,  139,  140,  141,  142,  143,  144,
 /*  2420 */   145,  146,  147,   83,   84,   85,  158,   87,  115,   89,
 /*  2430 */   158,  158,  158,  120,  158,  158,  158,  158,  158,  126,
 /*  2440 */   158,  158,  129,  130,  131,  132,  133,  158,  158,  158,
 /*  2450 */   158,  158,  158,  158,  158,  115,  158,  117,  158,  158,
 /*  2460 */   120,   83,   84,   85,  158,  158,  126,  158,  128,  129,
 /*  2470 */   130,  131,  132,  133,  134,  135,  136,  137,  138,  139,
 /*  2480 */   140,  141,  142,  143,  144,  145,  146,  147,   83,   84,
 /*  2490 */    85,  158,   87,  115,   89,  158,  158,  158,  120,   94,
 /*  2500 */    95,  158,  158,  158,  126,  158,  158,  129,  130,  131,
 /*  2510 */   132,  133,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  2520 */   115,  158,  158,  158,  158,  120,   83,   84,   85,  158,
 /*  2530 */   158,  126,  158,  128,  129,  130,  131,  132,  133,  134,
 /*  2540 */   135,  136,  137,  138,  139,  140,  141,  142,  143,  144,
 /*  2550 */   145,  158,  147,   83,   84,   85,  158,   87,  115,   89,
 /*  2560 */   158,  158,  158,  120,  158,  158,  158,  158,  158,  126,
 /*  2570 */   158,  158,  129,  130,  131,  132,  133,  158,  158,  158,
 /*  2580 */   158,  158,  158,  158,  158,  115,  158,  117,  158,  158,
 /*  2590 */   120,   83,   84,   85,  158,  158,  126,  158,  128,  129,
 /*  2600 */   130,  131,  132,  133,  134,  135,  136,  137,  138,  139,
 /*  2610 */   140,  141,  142,  143,  144,  145,  146,  147,   83,   84,
 /*  2620 */    85,  158,   87,  115,   89,  158,  158,  158,  120,  158,
 /*  2630 */   158,  158,  158,  158,  126,  158,  158,  129,  130,  131,
 /*  2640 */   132,  133,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  2650 */   115,  158,  117,  158,  158,  120,   83,   84,   85,  158,
 /*  2660 */   158,  126,  158,  128,  129,  130,  131,  132,  133,  134,
 /*  2670 */   135,  136,  137,  138,  139,  140,  141,  142,  143,  144,
 /*  2680 */   145,  146,  147,   83,   84,   85,  158,   87,  115,   89,
 /*  2690 */   158,  158,  158,  120,  158,  158,  158,  158,  158,  126,
 /*  2700 */   158,  158,  129,  130,  131,  132,  133,  158,  158,  158,
 /*  2710 */   158,  158,  158,  158,  158,  115,  158,  117,  158,  158,
 /*  2720 */   120,   83,   84,   85,  158,  158,  126,  158,  128,  129,
 /*  2730 */   130,  131,  132,  133,  134,  135,  136,  137,  138,  139,
 /*  2740 */   140,  141,  142,  143,  144,  145,  146,  147,   83,   84,
 /*  2750 */    85,  158,   87,  115,   89,  158,  158,  158,  120,  158,
 /*  2760 */   158,  158,  158,  158,  126,  158,  158,  129,  130,  131,
 /*  2770 */   132,  133,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  2780 */   115,  158,  117,  158,  158,  120,   83,   84,   85,  158,
 /*  2790 */   158,  126,  158,  128,  129,  130,  131,  132,  133,  134,
 /*  2800 */   135,  136,  137,  138,  139,  140,  141,  142,  143,  144,
 /*  2810 */   145,  146,  147,   83,   84,   85,  158,   87,  115,   89,
 /*  2820 */   158,  158,  158,  120,  158,  158,  158,  158,  158,  126,
 /*  2830 */   158,  158,  129,  130,  158,  158,  158,  158,  158,  158,
 /*  2840 */   158,  158,  158,  158,  158,  115,  158,  117,  158,  158,
 /*  2850 */   120,   83,   84,   85,  158,  158,  126,  158,  128,  129,
 /*  2860 */   130,  131,  132,  133,  134,  135,  136,  137,  138,  139,
 /*  2870 */   140,  141,  142,  143,  144,  145,  146,  147,   83,   84,
 /*  2880 */    85,  158,   87,  115,   89,  158,  158,  158,  120,  158,
 /*  2890 */   158,   96,   97,  158,  126,  158,  158,  129,  130,  158,
 /*  2900 */   158,  158,  158,  158,  158,   13,  158,  158,   16,   17,
 /*  2910 */   115,  158,  158,  158,  158,  120,  158,  158,  158,  158,
 /*  2920 */   158,  126,  158,  128,  129,  130,  131,  132,  133,  134,
 /*  2930 */   135,  136,  137,  138,  139,  140,  141,  142,  143,  144,
 /*  2940 */   145,  158,   83,   84,   85,  158,   87,  158,   89,   57,
 /*  2950 */    58,   59,   60,   61,   62,   63,   64,   65,   66,   67,
 /*  2960 */    68,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  2970 */   158,  158,   80,  158,  115,  158,   83,   84,   85,  120,
 /*  2980 */    87,  158,   89,  158,  158,  126,  158,  128,  129,  130,
 /*  2990 */   131,  132,  133,  134,  135,  136,  137,  138,  139,  140,
 /*  3000 */   141,  142,  143,  144,  145,  158,  147,  158,  115,  158,
 /*  3010 */    83,   84,   85,  120,   87,  158,   89,  158,  158,  126,
 /*  3020 */   158,  128,  129,  130,  131,  132,  133,  134,  135,  136,
 /*  3030 */   137,  138,  139,  140,  141,  142,  143,  144,  145,  158,
 /*  3040 */   147,  158,  115,  158,  158,  158,  158,  120,  158,  158,
 /*  3050 */   158,  158,  158,  126,  158,  128,  129,  130,  131,  132,
 /*  3060 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*  3070 */   143,  144,  145,  158,  147,   83,   84,   85,  158,   87,
 /*  3080 */   158,   89,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  3090 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  3100 */   158,  158,  158,  158,  158,  158,  158,  115,  158,   83,
 /*  3110 */    84,   85,  120,   87,  158,   89,  158,  158,  126,  158,
 /*  3120 */   128,  129,  130,  131,  132,  133,  134,  135,  136,  137,
 /*  3130 */   138,  139,  140,  141,  142,  143,  144,  145,  146,  158,
 /*  3140 */   158,  115,  158,   83,   84,   85,  120,   87,  158,   89,
 /*  3150 */   158,  158,  126,  158,  128,  129,  130,  131,  132,  133,
 /*  3160 */   134,  135,  136,  137,  138,  139,  140,  141,  142,  143,
 /*  3170 */   144,  145,  158,  158,  158,  115,  158,  158,  158,  158,
 /*  3180 */   120,  158,  158,  158,  158,  158,  126,  158,  128,  129,
 /*  3190 */   130,  131,  132,  133,  134,  135,  136,  137,  138,  139,
 /*  3200 */   140,  141,  142,  143,  144,  145,   83,   84,   85,  158,
 /*  3210 */    87,  158,   89,  158,  158,  158,  158,  158,  158,  158,
 /*  3220 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  3230 */   158,  158,  158,  158,  158,  158,  158,  158,  115,  158,
 /*  3240 */    83,   84,   85,  120,   87,  158,   89,  158,  158,  126,
 /*  3250 */   158,  128,  129,  130,  131,  132,  133,  134,  135,  136,
 /*  3260 */   137,  138,  139,  140,  141,  142,  143,  144,  145,  158,
 /*  3270 */   158,  158,  115,  158,   83,   84,   85,  120,   87,  158,
 /*  3280 */    89,  158,  158,  126,  158,  128,  129,  130,  131,  132,
 /*  3290 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*  3300 */   143,  144,  145,  158,  158,  158,  115,  158,  158,  158,
 /*  3310 */   158,  120,  158,  158,  158,  158,  158,  126,  158,  128,
 /*  3320 */   129,  130,  131,  132,  133,  134,  135,  136,  137,  138,
 /*  3330 */   139,  140,  141,  142,  143,  144,  145,   83,   84,   85,
 /*  3340 */   158,   87,  158,   89,  158,  158,  158,  158,  158,  158,
 /*  3350 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  3360 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  115,
 /*  3370 */   158,   83,   84,   85,  120,   87,  158,   89,  158,  158,
 /*  3380 */   126,  158,  128,  129,  130,  131,  132,  133,  134,  135,
 /*  3390 */   136,  137,  138,  139,  140,  141,  142,  143,  144,  145,
 /*  3400 */   158,  158,  158,  115,  158,   83,   84,   85,  120,   87,
 /*  3410 */   158,   89,  158,  158,  126,  158,  128,  129,  130,  131,
 /*  3420 */   132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
 /*  3430 */   142,  143,  144,  145,  158,  158,  158,  115,  158,  158,
 /*  3440 */   158,  158,  120,  158,  158,  158,  158,  158,  126,  158,
 /*  3450 */   128,  129,  130,  131,  132,  133,  134,  135,  136,  137,
 /*  3460 */   138,  139,  140,  141,  142,  143,  144,  145,   83,   84,
 /*  3470 */    85,  158,   87,  158,   89,  158,  158,  158,  158,  158,
 /*  3480 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  3490 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  3500 */   115,  158,   83,   84,   85,  120,   87,  158,   89,  158,
 /*  3510 */   158,  126,  158,  128,  129,  130,  131,  132,  133,  134,
 /*  3520 */   135,  136,  137,  138,  139,  140,  141,  142,  143,  144,
 /*  3530 */   145,  158,  158,  158,  115,  158,   83,   84,   85,  120,
 /*  3540 */    87,  158,   89,  158,  158,  126,  158,  128,  129,  130,
 /*  3550 */   131,  132,  133,  134,  135,  136,  137,  138,  139,  140,
 /*  3560 */   141,  142,  143,  144,  145,  158,  158,  158,  115,  158,
 /*  3570 */   158,  158,  158,  120,  158,  158,  158,  158,  158,  126,
 /*  3580 */   158,  128,  129,  130,  131,  132,  133,  134,  135,  136,
 /*  3590 */   137,  138,  139,  140,  141,  142,  143,  144,  145,   83,
 /*  3600 */    84,   85,  158,   87,  158,   89,  158,  158,  158,  158,
 /*  3610 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  3620 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  3630 */   158,  115,  158,   83,   84,   85,  120,   87,  158,   89,
 /*  3640 */   158,  158,  126,  158,  128,  129,  130,  131,  132,  133,
 /*  3650 */   134,  135,  136,  137,  138,  139,  140,  141,  142,  143,
 /*  3660 */   144,  145,  158,  158,  158,  115,  158,   83,   84,   85,
 /*  3670 */   120,   87,  158,   89,  158,  158,  126,  158,  128,  129,
 /*  3680 */   130,  131,  132,  133,  134,  135,  136,  137,  138,  139,
 /*  3690 */   140,  141,  142,  143,  144,  145,  158,  158,  158,  115,
 /*  3700 */   158,  158,  158,  158,  120,  158,  158,  158,  158,  158,
 /*  3710 */   126,  158,  128,  129,  130,  131,  132,  133,  134,  135,
 /*  3720 */   136,  137,  138,  139,  140,  141,  142,  143,  144,  145,
 /*  3730 */    83,   84,   85,  158,   87,  158,   89,  158,  158,  158,
 /*  3740 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  3750 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  3760 */   158,  158,  115,  158,   83,   84,   85,  120,   87,  158,
 /*  3770 */    89,  158,  158,  126,  158,  128,  129,  130,  131,  132,
 /*  3780 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*  3790 */   143,  144,  145,  158,  158,  158,  115,  158,   83,   84,
 /*  3800 */    85,  120,   87,  158,   89,  158,  158,  126,  158,  128,
 /*  3810 */   129,  130,  131,  132,  133,  134,  135,  136,  137,  138,
 /*  3820 */   139,  140,  141,  142,  143,  144,  145,  158,  158,  158,
 /*  3830 */   115,  158,  158,  158,  158,  120,  158,  158,  158,  158,
 /*  3840 */   158,  126,  158,  128,  129,  130,  131,  132,  133,  134,
 /*  3850 */   135,  136,  137,  138,  139,  140,  141,  142,  143,  144,
 /*  3860 */   145,   83,   84,   85,  158,   87,  158,   89,  158,  158,
 /*  3870 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  3880 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  3890 */   158,  158,  158,  115,  158,   83,   84,   85,  120,   87,
 /*  3900 */   158,   89,  158,  158,  126,  158,  128,  129,  130,  131,
 /*  3910 */   132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
 /*  3920 */   142,  143,  144,  145,  158,  158,  158,  115,  158,   83,
 /*  3930 */    84,   85,  120,   87,  158,   89,  158,  158,  126,  158,
 /*  3940 */   128,  129,  130,  131,  132,  133,  134,  135,  136,  137,
 /*  3950 */   138,  139,  140,  141,  142,  143,  144,  145,  158,  158,
 /*  3960 */   158,  115,  158,  158,  158,  158,  120,  158,  158,  158,
 /*  3970 */   158,  158,  126,  158,  128,  129,  130,  131,  132,  133,
 /*  3980 */   134,  135,  136,  137,  138,  139,  140,  141,  142,  143,
 /*  3990 */   144,  145,   83,   84,   85,  158,   87,  158,   89,  158,
 /*  4000 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  4010 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  4020 */   158,  158,  158,  158,  115,  158,   83,   84,   85,  120,
 /*  4030 */    87,  158,   89,  158,  158,  126,  158,  128,  129,  130,
 /*  4040 */   131,  132,  133,  134,  135,  136,  137,  138,  139,  140,
 /*  4050 */   141,  142,  143,  144,  145,  158,  158,  158,  115,  158,
 /*  4060 */    83,   84,   85,  120,   87,  158,   89,  158,  158,  126,
 /*  4070 */   158,  128,  129,  130,  131,  132,  133,  134,  135,  136,
 /*  4080 */   137,  138,  139,  140,  141,  142,  143,  144,  145,  158,
 /*  4090 */   158,  158,  115,  158,  158,  158,  158,  120,  158,  158,
 /*  4100 */   158,  158,  158,  126,  158,  128,  129,  130,  131,  132,
 /*  4110 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*  4120 */   143,  144,  145,   83,   84,   85,  158,   87,  158,   89,
 /*  4130 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  4140 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  4150 */   158,  158,  158,  158,  158,  115,  158,   83,   84,   85,
 /*  4160 */   120,   87,  158,   89,  158,  158,  126,  158,  128,  129,
 /*  4170 */   130,  131,  132,  133,  134,  135,  136,  137,  138,  139,
 /*  4180 */   140,  141,  142,  143,  144,  145,  158,  158,  158,  115,
 /*  4190 */   158,   83,   84,   85,  120,   87,  158,   89,  158,  158,
 /*  4200 */   126,  158,  128,  129,  130,  131,  132,  133,  134,  135,
 /*  4210 */   136,  137,  138,  139,  140,  141,  142,  143,  144,  145,
 /*  4220 */   158,  158,  158,  115,  158,  158,  158,  158,  120,  158,
 /*  4230 */   158,  158,  158,  158,  126,  158,  128,  129,  130,  131,
 /*  4240 */   132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
 /*  4250 */   142,  143,  144,  145,   83,   84,   85,  158,   87,  158,
 /*  4260 */    89,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  4270 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  4280 */   158,  158,  158,  158,  158,  158,  115,  158,   83,   84,
 /*  4290 */    85,  120,   87,  158,   89,  158,  158,  126,  158,  128,
 /*  4300 */   129,  130,  131,  132,  133,  134,  135,  136,  137,  138,
 /*  4310 */   139,  140,  141,  142,  143,  144,  145,  158,  158,  158,
 /*  4320 */   115,  158,   83,   84,   85,  120,   87,  158,   89,  158,
 /*  4330 */   158,  126,  158,  128,  129,  130,  131,  132,  133,  134,
 /*  4340 */   135,  136,  137,  138,  139,  140,  141,  142,  143,  144,
 /*  4350 */   145,  158,  158,  158,  115,  158,  158,  158,  158,  120,
 /*  4360 */   158,  158,  158,  158,  158,  126,  158,  128,  129,  130,
 /*  4370 */   131,  132,  133,  134,  135,  136,  137,  138,  139,  140,
 /*  4380 */   141,  142,  143,  144,  145,    6,    7,    8,    9,   10,
 /*  4390 */   158,   12,   13,   83,   84,   85,  158,   18,  158,   20,
 /*  4400 */    21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
 /*  4410 */    31,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  4420 */   158,  158,  158,  158,  158,  115,  158,  158,  158,  158,
 /*  4430 */   120,  158,  158,  158,   55,   56,  126,  158,  158,  129,
 /*  4440 */   130,    6,    7,    8,    9,  158,  158,   12,   13,  158,
 /*  4450 */    15,  158,  158,   18,  158,   20,   21,   22,   23,   24,
 /*  4460 */    25,   26,   27,   28,   29,   30,   31,  158,  158,  158,
 /*  4470 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  4480 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  4490 */    55,   56,   83,   84,   85,  158,  158,    6,    7,    8,
 /*  4500 */     9,  158,  158,   12,   13,   14,  158,  158,  158,   18,
 /*  4510 */   158,   20,   21,   22,   23,   24,   25,   26,   27,   28,
 /*  4520 */    29,   30,   31,  158,  115,  158,  158,  158,  158,  120,
 /*  4530 */   158,  158,  158,  158,  158,  126,  158,  158,  129,  130,
 /*  4540 */   158,  158,  158,  158,  158,  158,   55,   56,   83,   84,
 /*  4550 */    85,  158,  158,    6,    7,    8,    9,  158,  158,   12,
 /*  4560 */    13,   14,  158,  158,  158,   18,  158,   20,   21,   22,
 /*  4570 */    23,   24,   25,   26,   27,   28,   29,   30,   31,  158,
 /*  4580 */   115,  158,  158,  158,  158,  120,  158,  158,  158,  158,
 /*  4590 */   158,  126,  158,  158,  129,  130,  158,  158,  158,  158,
 /*  4600 */   158,  158,   55,   56,  158,  158,  158,  158,  158,    6,
 /*  4610 */     7,    8,    9,   10,  158,   12,   13,  158,  158,  158,
 /*  4620 */   158,   18,  158,   20,   21,   22,   23,   24,   25,   26,
 /*  4630 */    27,   28,   29,   30,   31,  158,  158,  158,  158,  158,
 /*  4640 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  4650 */   158,  158,  158,  158,  158,  158,  158,  158,   55,   56,
 /*  4660 */   158,  158,  158,  158,  158,    6,    7,    8,    9,  158,
 /*  4670 */   158,   12,   13,  158,  158,  158,  158,   18,   19,   20,
 /*  4680 */    21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
 /*  4690 */    31,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  4700 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  4710 */   158,  158,  158,  158,   55,   56,  158,  158,  158,  158,
 /*  4720 */   158,    6,    7,    8,    9,  158,  158,   12,   13,  158,
 /*  4730 */    15,  158,  158,   18,  158,   20,   21,   22,   23,   24,
 /*  4740 */    25,   26,   27,   28,   29,   30,   31,  158,  158,  158,
 /*  4750 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  4760 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  4770 */    55,   56,  158,  158,  158,  158,  158,    6,    7,    8,
 /*  4780 */     9,  158,  158,   12,   13,  158,  158,  158,  158,   18,
 /*  4790 */   158,   20,   21,   22,   23,   24,   25,   26,   27,   28,
 /*  4800 */    29,   30,   31,  158,  158,  158,  158,  158,  158,  158,
 /*  4810 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  4820 */   158,  158,  158,  158,  158,  158,   55,   56,  158,  158,
 /*  4830 */   158,  158,  158,    6,    7,    8,    9,  158,  158,   12,
 /*  4840 */    13,  158,  158,  158,  158,   18,   19,   20,   21,   22,
 /*  4850 */    23,   24,   25,   26,   27,   28,   29,   30,   31,  158,
 /*  4860 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  4870 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  4880 */   158,  158,   55,  158,  158,  158,  158,  158,  158,    6,
 /*  4890 */     7,    8,    9,  158,  158,   12,   13,  158,  158,  158,
 /*  4900 */   158,   18,   19,   20,   21,   22,   23,   24,   25,   26,
 /*  4910 */    27,   28,   29,   30,   31,  158,  158,   83,   84,   85,
 /*  4920 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  4930 */   158,  158,  158,  158,  158,  158,  158,  158,   55,  158,
 /*  4940 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  115,
 /*  4950 */   158,  158,  158,  158,  120,  158,  158,  158,  158,  158,
 /*  4960 */   126,  158,  158,  129,  130,  131,  132,  133,  134,  135,
 /*  4970 */   136,  137,  138,  139,  140,  141,  142,  143,    6,    7,
 /*  4980 */     8,    9,  158,   11,   12,   13,  158,  158,  158,  158,
 /*  4990 */    18,  158,   20,   21,   22,   23,   24,   25,   26,   27,
 /*  5000 */    28,   29,   30,   31,  158,  158,  158,  158,  158,  158,
 /*  5010 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  5020 */   158,  158,  158,  158,  158,  158,  158,   55,  158,  158,
 /*  5030 */   158,  158,  158,  158,    6,    7,    8,    9,  158,  158,
 /*  5040 */    12,   13,  158,   15,  158,  158,   18,  158,   20,   21,
 /*  5050 */    22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
 /*  5060 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  5070 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  5080 */   158,  158,  158,   55,  158,  158,  158,  158,  158,  158,
 /*  5090 */     6,    7,    8,    9,  158,  158,   12,   13,  158,  158,
 /*  5100 */   158,  158,   18,   19,   20,   21,   22,   23,   24,   25,
 /*  5110 */    26,   27,   28,   29,   30,   31,  158,  158,  158,  158,
 /*  5120 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  5130 */   158,  158,  158,  158,  158,  158,  158,  158,  158,   55,
 /*  5140 */   158,  158,  158,  158,  158,  158,    6,    7,    8,    9,
 /*  5150 */   158,  158,   12,   13,  158,  158,  158,  158,   18,   19,
 /*  5160 */    20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
 /*  5170 */    30,   31,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  5180 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  5190 */   158,  158,  158,  158,  158,   55,  158,  158,  158,  158,
 /*  5200 */   158,  158,    6,    7,    8,    9,  158,  158,   12,   13,
 /*  5210 */   158,  158,  158,  158,   18,   19,   20,   21,   22,   23,
 /*  5220 */    24,   25,   26,   27,   28,   29,   30,   31,  158,  158,
 /*  5230 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  5240 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  5250 */   158,   55,  158,  158,  158,  158,  158,  158,    6,    7,
 /*  5260 */     8,    9,  158,  158,   12,   13,  158,  158,  158,  158,
 /*  5270 */    18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
 /*  5280 */    28,   29,   30,   31,  158,  158,  158,  158,  158,  158,
 /*  5290 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  5300 */   158,  158,  158,  158,  158,  158,  158,   55,  158,  158,
 /*  5310 */   158,  158,  158,  158,    6,    7,    8,    9,  158,  158,
 /*  5320 */    12,   13,  158,  158,  158,  158,   18,   19,   20,   21,
 /*  5330 */    22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
 /*  5340 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  5350 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  5360 */   158,  158,  158,   55,  158,  158,  158,  158,  158,  158,
 /*  5370 */     6,    7,    8,    9,  158,  158,   12,   13,  158,  158,
 /*  5380 */   158,  158,   18,  158,   20,   21,   22,   23,   24,   25,
 /*  5390 */    26,   27,   28,   29,   30,   31,  158,  158,   83,   84,
 /*  5400 */    85,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  5410 */   158,  158,  158,  158,  158,  158,  158,  158,  158,   55,
 /*  5420 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  5430 */   115,  158,  158,  158,  158,  120,  158,  158,  158,  158,
 /*  5440 */   158,  126,  158,  158,  129,  130,  131,  132,  133,  134,
 /*  5450 */   135,  136,  137,  138,  139,  140,  141,  142,  158,  158,
 /*  5460 */    83,   84,   85,  158,  158,  158,  158,  158,  158,  158,
 /*  5470 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  5480 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  5490 */   158,  158,  115,  158,  158,  158,  158,  120,  158,  158,
 /*  5500 */   158,  158,  158,  126,  158,  158,  129,  130,  131,  132,
 /*  5510 */   133,  134,  135,  136,  137,  138,  139,  140,  141,   83,
 /*  5520 */    84,   85,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  5530 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  5540 */   158,  158,  158,  158,  158,   83,   84,   85,  158,  158,
 /*  5550 */   158,  115,  158,  158,  158,  158,  120,  158,  158,  158,
 /*  5560 */   158,  158,  126,  158,  158,  129,  130,  131,  132,  133,
 /*  5570 */   134,  135,  136,  137,  138,  139,  140,  115,  158,  158,
 /*  5580 */   158,  158,  120,  158,  158,  158,  158,  158,  126,  158,
 /*  5590 */   158,  129,  130,  131,  132,  133,  134,  135,  136,  137,
 /*  5600 */   138,  139,   83,   84,   85,  158,  158,  158,  158,  158,
 /*  5610 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  5620 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  5630 */   158,  158,  158,  158,  115,  158,  158,  158,  158,  120,
 /*  5640 */   158,  158,  158,  158,  158,  126,  158,  158,  129,  130,
 /*  5650 */   131,  132,  133,  134,  135,  136,  137,  138,
};
#define YY_SHIFT_USE_DFLT (-25)
#define YY_SHIFT_MAX 278
static const short yy_shift_ofst[] = {
 /*     0 */   -25, 1185,  948, 1027, 1264, 1346, 1106, 1425, 1504, 1504,
 /*    10 */  1425, 1425, 1425, 1504, 1504, 1504, 1504, 1504, 1425, 4715,
 /*    20 */  4435, 4435, 4435, 4435, 4771, 4771, 4771, 4771, 4771, 4771,
 /*    30 */  4659, 4379, 4603, 4547, 4491, 4771, 4771, 4771, 4771, 4972,
 /*    40 */  4771, 4771, 4771, 5364, 5196, 5140, 4883, 5308, 5028, 4827,
 /*    50 */  5084, 5252, 5364, 5364, 5364, 5364, 5364, 5364, 5364, 5364,
 /*    60 */  5364, 5364, 5364, 5364, 5364, 5364, 5364, 5364, 5364, 5364,
 /*    70 */  5364, 5364, 5364, 5364, 5364, 5364, 5364, 5364, 5364, 5364,
 /*    80 */  1633, 1633, 1633, 1633, 1633, 1633, 1633, 1633, 1633, 1633,
 /*    90 */  1633, 1633, 1633, 1633, 1633, 1633, 1633, 1633, 1633, 1633,
 /*   100 */  1633, 1633, 1633,   70,  103, 1053, 1053,  372,  372,  372,
 /*   110 */    26,   82,   93,  515,  515,  515, 2892, 1662,  928,  963,
 /*   120 */   963,   97,  243,  167,   27,  319,  313,  246,  175,  532,
 /*   130 */   392,  386,  459,  389,  392,  462,  465,  509,  535,  386,
 /*   140 */   515,  515,  513,  533,  515,  513,  -25,  -25,  -25,  -25,
 /*   150 */   -25,  -25,  -25,  -24,  290,  144,  -24,  -24,  -23,  -23,
 /*   160 */   216,  172,  133,  239,   58,  279,   20,  223,  214,  204,
 /*   170 */   242,  234,  287,  315,  320,  250,  284,  425,  334,  204,
 /*   180 */   362,  204,  358,  360,  204,  435,  415,  397,  391,  344,
 /*   190 */   324,  271,  249,  244,  176,  158,  154,   72,  124,   61,
 /*   200 */    53,   33,  677,   31,   64,   75,  127,  135,  141,  173,
 /*   210 */   195,  226,  322,  341,  354,  390,  350,  409,  385,  433,
 /*   220 */   437,  440,  446,  466,  422,  469,  487,  496,  512,  452,
 /*   230 */   510,  472,  536,  540,  511,  541,  516,  549,  530,  577,
 /*   240 */   472,  552,  576,  516,  555,  530,  552,  555,  593,  598,
 /*   250 */   600,  559,  511,  607,  564,  603,  567,  605,  615,  611,
 /*   260 */   622,  645,  643,  652,  653,  648,  649,  650,  651,  659,
 /*   270 */   666,  656,  434,   -8,  675,  670,  657,  654,  622,
};
#define YY_REDUCE_USE_DFLT (-100)
#define YY_REDUCE_MAX 152
static const short yy_reduce_ofst[] = {
 /*     0 */   101,  -83,  -83,  -83,  -83,  -83,  -83,  501,  282,  720,
 /*    10 */   136,  428,  574,  647,  209,   63,  793,  355,  -10, 1481,
 /*    20 */  1560, 1690, 1625, 1820, 1755, 1885, 2080, 2145, 2015, 1950,
 /*    30 */  2405, 2535, 2665, 2275, 2470, 2600, 2210, 2340, 2730, 2795,
 /*    40 */  2859, 2893, 2927, 2992, 3191, 3550, 3060, 3157, 3254, 3322,
 /*    50 */  3385, 3288, 3191, 3123, 3026, 4239, 4205, 4171, 4108, 3977,
 /*    60 */  3909, 4040, 3385, 3943, 3288, 4074, 3846, 3812, 3778, 3715,
 /*    70 */  3681, 3647, 3584, 3322, 3550, 3516, 3157, 3419, 3060, 3453,
 /*    80 */  4834, 5315, 5377, 5436, 5462, 5519, 1356, 1663, 1728, 1858,
 /*    90 */  1793, 1923, 1988, 2118, 2313, 2508, 2573, 2378, 2183, 2638,
 /*   100 */  2443, 2248, 2053, 1432, 1432, 2768, 4409, 4465, 4310, 2703,
 /*   110 */    -3,    2,  -99,   65,   68,  100,  554,  562,  554,  534,
 /*   120 */   534,  503,  503,  495,  502,  503,  502,  478,  495,  495,
 /*   130 */   495,  482,  475,  479,  481,  479,  478,  473,  475,  473,
 /*   140 */   489,  484,  436,  439,  432,  398,  393,  365,  339,  357,
 /*   150 */   338,  337,  330,
};
static const YYACTIONTYPE yy_default[] = {
 /*     0 */   676,  739,  739,  739,  739,  739,  739,  739,  739,  739,
 /*    10 */   739,  739,  739,  739,  739,  739,  739,  739,  739,  721,
 /*    20 */   739,  739,  739,  739,  723,  723,  739,  739,  739,  739,
 /*    30 */   739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
 /*    40 */   660,  739,  739,  739,  739,  739,  739,  739,  739,  739,
 /*    50 */   739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
 /*    60 */   665,  739,  739,  739,  739,  739,  739,  739,  739,  739,
 /*    70 */   739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
 /*    80 */   739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
 /*    90 */   739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
 /*   100 */   739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
 /*   110 */   726,  739,  739,  739,  739,  739,  638,  669,  638,  601,
 /*   120 */   602,  545,  545,  544,  549,  545,  549,  547,  739,  544,
 /*   130 */   544,  739,  550,  548,  739,  548,  547,  546,  550,  546,
 /*   140 */   739,  739,  739,  739,  739,  739,  676,  676,  676,  493,
 /*   150 */   676,  676,  493,  575,  739,  739,  574,  576,  581,  582,
 /*   160 */   501,  607,  739,  739,  739,  739,  739,  739,  509,  577,
 /*   170 */   739,  551,  739,  739,  739,  739,  739,  739,  562,  578,
 /*   180 */   739,  579,  739,  508,  580,  739,  739,  739,  739,  739,
 /*   190 */   739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
 /*   200 */   739,  739,  739,  739,  739,  739,  664,  739,  739,  739,
 /*   210 */   739,  739,  739,  739,  739,  739,  739,  739,  552,  739,
 /*   220 */   739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
 /*   230 */   739,  606,  739,  739,  583,  739,  585,  739,  604,  739,
 /*   240 */   605,  587,  638,  586,  589,  603,  588,  590,  739,  739,
 /*   250 */   739,  739,  584,  739,  739,  739,  551,  739,  739,  659,
 /*   260 */   738,  739,  657,  739,  502,  739,  739,  739,  739,  739,
 /*   270 */   739,  739,  739,  739,  739,  739,  739,  739,  739,  514,
 /*   280 */   485,  486,  487,  513,  516,  518,  519,  520,  515,  523,
 /*   290 */   529,  525,  532,  526,  535,  527,  538,  528,  541,  542,
 /*   300 */   553,  554,  555,  556,  557,  558,  559,  560,  561,  563,
 /*   310 */   564,  565,  566,  567,  568,  569,  570,  571,  572,  573,
 /*   320 */   591,  592,  593,  594,  595,  596,  597,  598,  599,  600,
 /*   330 */   608,  531,  491,  492,  490,  494,  495,  496,  497,  498,
 /*   340 */   499,  500,  505,  504,  503,  628,  625,  506,  534,  537,
 /*   350 */   613,  614,  615,  617,  616,  618,  619,  620,  621,  662,
 /*   360 */   663,  634,  540,  635,  629,  626,  543,  636,  612,  624,
 /*   370 */   666,  642,  643,  644,  645,  646,  647,  648,  649,  650,
 /*   380 */   651,  652,  653,  654,  667,  670,  622,  623,  639,  637,
 /*   390 */   640,  641,  672,  668,  671,  677,  678,  679,  680,  681,
 /*   400 */   682,  683,  684,  685,  689,  673,  510,  511,  674,  512,
 /*   410 */   675,  690,  691,  688,  692,  686,  687,  694,  695,  696,
 /*   420 */   697,  698,  699,  700,  701,  702,  703,  704,  705,  706,
 /*   430 */   707,  708,  709,  710,  711,  712,  713,  714,  715,  716,
 /*   440 */   718,  717,  719,  720,  724,  722,  725,  727,  728,  729,
 /*   450 */   730,  732,  733,  734,  736,  735,  737,  731,  693,  633,
 /*   460 */   627,  507,  611,  631,  609,  610,  655,  656,  661,  658,
 /*   470 */   539,  552,  536,  533,  530,  551,  521,  522,  524,  517,
 /*   480 */   632,  630,  488,  489,
};
#define YY_SZ_ACTTAB (int)(sizeof(yy_action)/sizeof(yy_action[0]))

/* The next table maps tokens into fallback tokens.  If a construct
** like the following:
** 
**      %fallback ID X Y Z.
**
** appears in the grammar, then ID becomes a fallback token for X, Y,
** and Z.  Whenever one of the tokens X, Y, or Z is input to the parser
** but it does not parse, the type of the token is changed to ID and
** the parse is retried before an error is thrown.
*/
#ifdef YYFALLBACK
static const YYCODETYPE yyFallback[] = {
};
#endif /* YYFALLBACK */

/* The following structure represents a single element of the
** parser's stack.  Information stored includes:
**
**   +  The state number for the parser at this level of the stack.
**
**   +  The value of the token stored at this level of the stack.
**      (In other words, the "major" token.)
**
**   +  The semantic value stored at this level of the stack.  This is
**      the information used by the action routines in the grammar.
**      It is sometimes called the "minor" token.
*/
struct yyStackEntry {
  YYACTIONTYPE stateno;  /* The state-number */
  YYCODETYPE major;      /* The major token value.  This is the code
                         ** number for the token at this stack level */
  YYMINORTYPE minor;     /* The user-supplied minor token value.  This
                         ** is the value of the token  */
};
typedef struct yyStackEntry yyStackEntry;

/* The state of the parser is completely contained in an instance of
** the following structure */
struct yyParser {
  int yyidx;                    /* Index of top element in stack */
#ifdef YYTRACKMAXSTACKDEPTH
  int yyidxMax;                 /* Maximum value of yyidx */
#endif
  int yyerrcnt;                 /* Shifts left before out of the error */
  XecParseARG_SDECL                /* A place to hold %extra_argument */
#if YYSTACKDEPTH<=0
  int yystksz;                  /* Current side of the stack */
  yyStackEntry *yystack;        /* The parser's stack */
#else
  yyStackEntry yystack[YYSTACKDEPTH];  /* The parser's stack */
#endif
};
typedef struct yyParser yyParser;

#ifndef NDEBUG
#include <stdio.h>
static FILE *yyTraceFILE = 0;
static char *yyTracePrompt = 0;
#endif /* NDEBUG */

#ifndef NDEBUG
/* 
** Turn parser tracing on by giving a stream to which to write the trace
** and a prompt to preface each trace message.  Tracing is turned off
** by making either argument NULL 
**
** Inputs:
** <ul>
** <li> A FILE* to which trace output should be written.
**      If NULL, then tracing is turned off.
** <li> A prefix string written at the beginning of every
**      line of trace output.  If NULL, then tracing is
**      turned off.
** </ul>
**
** Outputs:
** None.
*/
void XecParseTrace(FILE *TraceFILE, char *zTracePrompt){
  yyTraceFILE = TraceFILE;
  yyTracePrompt = zTracePrompt;
  if( yyTraceFILE==0 ) yyTracePrompt = 0;
  else if( yyTracePrompt==0 ) yyTraceFILE = 0;
}
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing shifts, the names of all terminals and nonterminals
** are required.  The following table supplies these names */
static const char *const yyTokenName[] = { 
  "$",             "IF",            "ELSE",          "TRY",         
  "CATCH",         "FINALLY",       "YIELD",         "LPN",         
  "IDENTIFIER",    "PERIOD",        "RPN",           "RBR",         
  "LBR",           "COLON",         "SEMICOLON",     "VAR",         
  "ASSIGN",        "COMMA",         "LSQ",           "RSQ",         
  "NEW",           "NULL",          "TRUE",          "FALSE",       
  "NUMBER",        "STRING",        "INCREMENT",     "DECREMENT",   
  "PLUS",          "MINUS",         "XMARK",         "TILDE",       
  "ASTERISK",      "SOLIDUS",       "PERCENT",       "LSHIFT",      
  "LRSHIFT",       "ARSHIFT",       "AMPERSAND",     "CARET",       
  "VBAR",          "CONCATENATE",   "EQUAL",         "NOTEQUAL",    
  "LESS",          "GREATER",       "LESSEQUAL",     "GREATEREQUAL",
  "IN",            "NOTIN",         "IS",            "NOTIS",       
  "LOGICAND",      "LOGICXOR",      "LOGICOR",       "QMARK",       
  "ELLIPSIS",      "MULASSIGN",     "DIVASSIGN",     "MODASSIGN",   
  "INTDIVASSIGN",  "ADDASSIGN",     "SUBASSIGN",     "LSHIFTASSIGN",
  "LRSHIFTASSIGN",  "ARSHIFTASSIGN",  "BITANDASSIGN",  "BITXORASSIGN",
  "BITORASSIGN",   "WHILE",         "DELETE",        "CASE",        
  "DEFAULT",       "CONTINUE",      "BREAK",         "RETURN",      
  "THROW",         "SWITCH",        "DO",            "FOR",         
  "EACHKEY",       "USING",         "error",         "proto",       
  "expr_call",     "expr_yield",    "object_lbr",    "newobj_lbr",  
  "func_lbr",      "newfunc_lbr",   "varname",       "varname_list",
  "compare_op",    "assign_op",     "value_lbody",   "value_list",  
  "keyval_lbody",  "keyval_list",   "stmt_lbr",      "stmt_lbr_ru", 
  "stmt_if",       "stmt_switch",   "stmt_while",    "stmt_do",     
  "scope_for",     "stmt_foreach",  "stmt_for",      "stmt_using",  
  "try_block",     "try_catch",     "scope_catch",   "stmt_catch",  
  "token_yield",   "script",        "stmt_list",     "name",        
  "expr_paren",    "expr_list",     "decl_object",   "object_decls",
  "expr_simple",   "object_decl",   "decl_func",     "decl_proto",  
  "decl_var",      "decl_noinit",   "expr_index",    "expr_assign", 
  "expr_value",    "expr_new",      "expr_postfix",  "expr_literal",
  "expr_suffix",   "expr_unary",    "expr_mul",      "expr_add",    
  "expr_shift",    "expr_bitand",   "expr_bitxor",   "expr_bitor",  
  "expr_concat",   "expr_compare",  "expr_and",      "expr_xor",    
  "expr_or",       "expr_nolbr",    "expr_lbody",    "expr_final",  
  "sexpr_lbody",   "sexpr_list",    "sexpr_assign",  "condition",   
  "stmt",          "stmt_common",   "stmt_reuse",    "stmt_try",    
  "for_cond",      "for_expr",    
};
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing reduce actions, the names of all rules are required.
*/
static const char *const yyRuleName[] = {
 /*   0 */ "script ::= stmt_list",
 /*   1 */ "name ::= IDENTIFIER",
 /*   2 */ "name ::= name PERIOD IDENTIFIER",
 /*   3 */ "proto ::= name expr_paren",
 /*   4 */ "expr_paren ::= LPN RPN",
 /*   5 */ "expr_paren ::= LPN expr_list RPN",
 /*   6 */ "decl_object ::= object_lbr object_decls RBR",
 /*   7 */ "object_lbr ::= name LBR",
 /*   8 */ "object_lbr ::= name COLON expr_simple LBR",
 /*   9 */ "object_decls ::=",
 /*  10 */ "object_decls ::= object_decls object_decl",
 /*  11 */ "object_decl ::= SEMICOLON",
 /*  12 */ "object_decl ::= decl_object",
 /*  13 */ "object_decl ::= decl_func",
 /*  14 */ "object_decl ::= decl_proto SEMICOLON",
 /*  15 */ "object_decl ::= decl_var SEMICOLON",
 /*  16 */ "object_decl ::= decl_noinit SEMICOLON",
 /*  17 */ "decl_proto ::= proto",
 /*  18 */ "decl_proto ::= proto YIELD",
 /*  19 */ "decl_func ::= func_lbr stmt_list RBR",
 /*  20 */ "func_lbr ::= proto LBR",
 /*  21 */ "func_lbr ::= proto YIELD LBR",
 /*  22 */ "decl_var ::= VAR varname ASSIGN expr_list",
 /*  23 */ "decl_var ::= VAR varname_list ASSIGN expr_list",
 /*  24 */ "decl_noinit ::= VAR varname",
 /*  25 */ "decl_noinit ::= VAR varname_list",
 /*  26 */ "varname ::= IDENTIFIER",
 /*  27 */ "varname_list ::= varname COMMA varname",
 /*  28 */ "varname_list ::= varname_list COMMA varname",
 /*  29 */ "expr_index ::= LPN expr_assign RPN",
 /*  30 */ "expr_index ::= name PERIOD LSQ expr_value RSQ",
 /*  31 */ "expr_index ::= name LSQ expr_value RSQ",
 /*  32 */ "expr_index ::= expr_index PERIOD IDENTIFIER",
 /*  33 */ "expr_index ::= expr_index PERIOD LSQ expr_value RSQ",
 /*  34 */ "expr_index ::= expr_index LSQ expr_value RSQ",
 /*  35 */ "expr_yield ::= YIELD LPN RPN",
 /*  36 */ "expr_yield ::= YIELD LPN expr_list RPN",
 /*  37 */ "expr_new ::= NEW name expr_paren",
 /*  38 */ "expr_new ::= NEW expr_index expr_paren",
 /*  39 */ "expr_call ::= proto expr_paren",
 /*  40 */ "expr_call ::= expr_index expr_paren",
 /*  41 */ "expr_call ::= expr_yield expr_paren",
 /*  42 */ "expr_call ::= expr_new expr_paren",
 /*  43 */ "expr_call ::= expr_call expr_paren",
 /*  44 */ "expr_call ::= expr_postfix expr_paren",
 /*  45 */ "expr_postfix ::= proto PERIOD IDENTIFIER",
 /*  46 */ "expr_postfix ::= proto PERIOD LSQ expr_value RSQ",
 /*  47 */ "expr_postfix ::= proto LSQ expr_value RSQ",
 /*  48 */ "expr_postfix ::= expr_yield PERIOD IDENTIFIER",
 /*  49 */ "expr_postfix ::= expr_yield PERIOD LSQ expr_value RSQ",
 /*  50 */ "expr_postfix ::= expr_yield LSQ expr_value RSQ",
 /*  51 */ "expr_postfix ::= expr_new PERIOD IDENTIFIER",
 /*  52 */ "expr_postfix ::= expr_new PERIOD LSQ expr_value RSQ",
 /*  53 */ "expr_postfix ::= expr_new LSQ expr_value RSQ",
 /*  54 */ "expr_postfix ::= expr_call PERIOD IDENTIFIER",
 /*  55 */ "expr_postfix ::= expr_call PERIOD LSQ expr_value RSQ",
 /*  56 */ "expr_postfix ::= expr_call LSQ expr_value RSQ",
 /*  57 */ "expr_postfix ::= expr_postfix PERIOD IDENTIFIER",
 /*  58 */ "expr_postfix ::= expr_postfix PERIOD LSQ expr_value RSQ",
 /*  59 */ "expr_postfix ::= expr_postfix LSQ expr_value RSQ",
 /*  60 */ "expr_simple ::= name",
 /*  61 */ "expr_simple ::= proto",
 /*  62 */ "expr_simple ::= expr_index",
 /*  63 */ "expr_simple ::= expr_yield",
 /*  64 */ "expr_simple ::= expr_new",
 /*  65 */ "expr_simple ::= expr_call",
 /*  66 */ "expr_simple ::= expr_postfix",
 /*  67 */ "expr_simple ::= proto YIELD",
 /*  68 */ "expr_simple ::= expr_call YIELD",
 /*  69 */ "expr_literal ::= expr_simple",
 /*  70 */ "expr_literal ::= NULL",
 /*  71 */ "expr_literal ::= TRUE",
 /*  72 */ "expr_literal ::= FALSE",
 /*  73 */ "expr_literal ::= NUMBER",
 /*  74 */ "expr_literal ::= STRING",
 /*  75 */ "expr_suffix ::= expr_literal",
 /*  76 */ "expr_suffix ::= expr_suffix INCREMENT",
 /*  77 */ "expr_suffix ::= expr_suffix DECREMENT",
 /*  78 */ "expr_unary ::= expr_suffix",
 /*  79 */ "expr_unary ::= PLUS expr_unary",
 /*  80 */ "expr_unary ::= MINUS expr_unary",
 /*  81 */ "expr_unary ::= XMARK expr_unary",
 /*  82 */ "expr_unary ::= TILDE expr_unary",
 /*  83 */ "expr_unary ::= INCREMENT expr_unary",
 /*  84 */ "expr_unary ::= DECREMENT expr_unary",
 /*  85 */ "expr_mul ::= expr_unary",
 /*  86 */ "expr_mul ::= expr_mul ASTERISK expr_unary",
 /*  87 */ "expr_mul ::= expr_mul SOLIDUS expr_unary",
 /*  88 */ "expr_mul ::= expr_mul PERCENT expr_unary",
 /*  89 */ "expr_mul ::= expr_mul TILDE expr_unary",
 /*  90 */ "expr_add ::= expr_mul",
 /*  91 */ "expr_add ::= expr_add PLUS expr_mul",
 /*  92 */ "expr_add ::= expr_add MINUS expr_mul",
 /*  93 */ "expr_shift ::= expr_add",
 /*  94 */ "expr_shift ::= expr_shift LSHIFT expr_add",
 /*  95 */ "expr_shift ::= expr_shift LRSHIFT expr_add",
 /*  96 */ "expr_shift ::= expr_shift ARSHIFT expr_add",
 /*  97 */ "expr_bitand ::= expr_shift",
 /*  98 */ "expr_bitand ::= expr_bitand AMPERSAND expr_shift",
 /*  99 */ "expr_bitxor ::= expr_bitand",
 /* 100 */ "expr_bitxor ::= expr_bitxor CARET expr_bitand",
 /* 101 */ "expr_bitor ::= expr_bitxor",
 /* 102 */ "expr_bitor ::= expr_bitor VBAR expr_bitxor",
 /* 103 */ "expr_concat ::= expr_bitor",
 /* 104 */ "expr_concat ::= expr_concat CONCATENATE expr_bitor",
 /* 105 */ "expr_compare ::= expr_concat",
 /* 106 */ "expr_compare ::= expr_compare compare_op expr_concat",
 /* 107 */ "compare_op ::= EQUAL",
 /* 108 */ "compare_op ::= NOTEQUAL",
 /* 109 */ "compare_op ::= LESS",
 /* 110 */ "compare_op ::= GREATER",
 /* 111 */ "compare_op ::= LESSEQUAL",
 /* 112 */ "compare_op ::= GREATEREQUAL",
 /* 113 */ "compare_op ::= IN",
 /* 114 */ "compare_op ::= NOTIN",
 /* 115 */ "compare_op ::= IS",
 /* 116 */ "compare_op ::= NOTIS",
 /* 117 */ "expr_and ::= expr_compare",
 /* 118 */ "expr_and ::= expr_and LOGICAND expr_compare",
 /* 119 */ "expr_xor ::= expr_and",
 /* 120 */ "expr_xor ::= expr_xor LOGICXOR expr_and",
 /* 121 */ "expr_or ::= expr_xor",
 /* 122 */ "expr_or ::= expr_or LOGICOR expr_xor",
 /* 123 */ "expr_nolbr ::= expr_or",
 /* 124 */ "expr_nolbr ::= expr_or QMARK expr_value COLON expr_value",
 /* 125 */ "expr_nolbr ::= LSQ RSQ",
 /* 126 */ "expr_nolbr ::= LSQ value_list RSQ",
 /* 127 */ "expr_nolbr ::= newobj_lbr object_decls RBR",
 /* 128 */ "expr_nolbr ::= newfunc_lbr stmt_list RBR",
 /* 129 */ "newobj_lbr ::= COLON LBR",
 /* 130 */ "newobj_lbr ::= COLON expr_simple LBR",
 /* 131 */ "newfunc_lbr ::= QMARK expr_paren LBR",
 /* 132 */ "newfunc_lbr ::= PERIOD QMARK expr_paren LBR",
 /* 133 */ "newfunc_lbr ::= QMARK expr_paren YIELD LBR",
 /* 134 */ "newfunc_lbr ::= PERIOD QMARK expr_paren YIELD LBR",
 /* 135 */ "expr_value ::= expr_nolbr",
 /* 136 */ "expr_value ::= LBR RBR",
 /* 137 */ "expr_value ::= LBR keyval_list RBR",
 /* 138 */ "expr_lbody ::= expr_value",
 /* 139 */ "expr_lbody ::= expr_lbody COMMA expr_value",
 /* 140 */ "expr_final ::= ELLIPSIS",
 /* 141 */ "expr_final ::= proto ELLIPSIS",
 /* 142 */ "expr_final ::= expr_call ELLIPSIS",
 /* 143 */ "expr_final ::= expr_yield ELLIPSIS",
 /* 144 */ "expr_final ::= proto YIELD ELLIPSIS",
 /* 145 */ "expr_final ::= expr_call YIELD ELLIPSIS",
 /* 146 */ "expr_final ::= name LSQ RSQ ELLIPSIS",
 /* 147 */ "expr_final ::= proto LSQ RSQ ELLIPSIS",
 /* 148 */ "expr_final ::= expr_index LSQ RSQ ELLIPSIS",
 /* 149 */ "expr_final ::= expr_yield LSQ RSQ ELLIPSIS",
 /* 150 */ "expr_final ::= expr_new LSQ RSQ ELLIPSIS",
 /* 151 */ "expr_final ::= expr_call LSQ RSQ ELLIPSIS",
 /* 152 */ "expr_final ::= expr_postfix LSQ RSQ ELLIPSIS",
 /* 153 */ "expr_list ::= expr_final",
 /* 154 */ "expr_list ::= expr_lbody",
 /* 155 */ "expr_list ::= expr_lbody COMMA expr_final",
 /* 156 */ "expr_assign ::= expr_list",
 /* 157 */ "expr_assign ::= expr_lbody assign_op expr_assign",
 /* 158 */ "assign_op ::= ASSIGN",
 /* 159 */ "assign_op ::= MULASSIGN",
 /* 160 */ "assign_op ::= DIVASSIGN",
 /* 161 */ "assign_op ::= MODASSIGN",
 /* 162 */ "assign_op ::= INTDIVASSIGN",
 /* 163 */ "assign_op ::= ADDASSIGN",
 /* 164 */ "assign_op ::= SUBASSIGN",
 /* 165 */ "assign_op ::= LSHIFTASSIGN",
 /* 166 */ "assign_op ::= LRSHIFTASSIGN",
 /* 167 */ "assign_op ::= ARSHIFTASSIGN",
 /* 168 */ "assign_op ::= BITANDASSIGN",
 /* 169 */ "assign_op ::= BITXORASSIGN",
 /* 170 */ "assign_op ::= BITORASSIGN",
 /* 171 */ "value_lbody ::= expr_value",
 /* 172 */ "value_lbody ::= value_lbody COMMA expr_value",
 /* 173 */ "value_list ::= expr_final",
 /* 174 */ "value_list ::= expr_final COMMA",
 /* 175 */ "value_list ::= value_lbody",
 /* 176 */ "value_list ::= value_lbody COMMA",
 /* 177 */ "value_list ::= value_lbody COMMA expr_final",
 /* 178 */ "keyval_lbody ::= expr_value COLON expr_value",
 /* 179 */ "keyval_lbody ::= keyval_lbody COMMA expr_value COLON expr_value",
 /* 180 */ "keyval_list ::= keyval_lbody",
 /* 181 */ "keyval_list ::= keyval_lbody COMMA",
 /* 182 */ "sexpr_lbody ::= expr_nolbr",
 /* 183 */ "sexpr_lbody ::= sexpr_lbody COMMA expr_value",
 /* 184 */ "sexpr_list ::= expr_final",
 /* 185 */ "sexpr_list ::= sexpr_lbody",
 /* 186 */ "sexpr_list ::= sexpr_lbody COMMA expr_final",
 /* 187 */ "sexpr_assign ::= sexpr_list",
 /* 188 */ "sexpr_assign ::= sexpr_lbody assign_op expr_assign",
 /* 189 */ "condition ::= expr_assign",
 /* 190 */ "condition ::= VAR varname ASSIGN expr_list",
 /* 191 */ "condition ::= VAR varname_list ASSIGN expr_list",
 /* 192 */ "stmt_list ::=",
 /* 193 */ "stmt_list ::= stmt_list SEMICOLON",
 /* 194 */ "stmt_list ::= stmt_list stmt",
 /* 195 */ "stmt_list ::= stmt_list decl_object",
 /* 196 */ "stmt_list ::= stmt_list decl_func",
 /* 197 */ "stmt_list ::= stmt_list decl_var SEMICOLON",
 /* 198 */ "stmt_list ::= stmt_list decl_noinit SEMICOLON",
 /* 199 */ "stmt ::= stmt_lbr stmt_list RBR",
 /* 200 */ "stmt ::= stmt_common",
 /* 201 */ "stmt_lbr ::= LBR",
 /* 202 */ "stmt_reuse ::= stmt_lbr_ru stmt_list RBR",
 /* 203 */ "stmt_reuse ::= stmt_common",
 /* 204 */ "stmt_lbr_ru ::= LBR",
 /* 205 */ "stmt_common ::= sexpr_assign SEMICOLON",
 /* 206 */ "stmt_common ::= stmt_if LPN condition RPN stmt",
 /* 207 */ "stmt_common ::= stmt_if LPN condition RPN stmt ELSE stmt",
 /* 208 */ "stmt_common ::= stmt_switch LPN condition RPN stmt_lbr_ru stmt_list RPN",
 /* 209 */ "stmt_common ::= stmt_while LPN condition RPN stmt_reuse",
 /* 210 */ "stmt_common ::= stmt_do stmt_reuse WHILE LPN expr_assign RPN SEMICOLON",
 /* 211 */ "stmt_common ::= stmt_foreach stmt_reuse",
 /* 212 */ "stmt_common ::= stmt_for stmt_reuse",
 /* 213 */ "stmt_common ::= stmt_using LPN condition RPN stmt_reuse",
 /* 214 */ "stmt_common ::= stmt_try",
 /* 215 */ "stmt_common ::= DELETE expr_lbody SEMICOLON",
 /* 216 */ "stmt_common ::= CASE expr_value COLON",
 /* 217 */ "stmt_common ::= DEFAULT COLON",
 /* 218 */ "stmt_common ::= CONTINUE SEMICOLON",
 /* 219 */ "stmt_common ::= BREAK SEMICOLON",
 /* 220 */ "stmt_common ::= RETURN SEMICOLON",
 /* 221 */ "stmt_common ::= RETURN expr_list SEMICOLON",
 /* 222 */ "stmt_common ::= token_yield SEMICOLON",
 /* 223 */ "stmt_common ::= token_yield expr_list SEMICOLON",
 /* 224 */ "stmt_common ::= THROW expr_value SEMICOLON",
 /* 225 */ "stmt_if ::= IF",
 /* 226 */ "stmt_switch ::= SWITCH",
 /* 227 */ "stmt_while ::= WHILE",
 /* 228 */ "stmt_do ::= DO",
 /* 229 */ "scope_for ::= FOR",
 /* 230 */ "stmt_foreach ::= scope_for LPN expr_lbody COLON expr_value RPN",
 /* 231 */ "stmt_foreach ::= scope_for LPN expr_lbody EACHKEY expr_value RPN",
 /* 232 */ "stmt_foreach ::= scope_for LPN VAR varname COLON expr_value RPN",
 /* 233 */ "stmt_foreach ::= scope_for LPN VAR varname_list COLON expr_value RPN",
 /* 234 */ "stmt_foreach ::= scope_for LPN VAR varname EACHKEY expr_value RPN",
 /* 235 */ "stmt_foreach ::= scope_for LPN VAR varname_list EACHKEY expr_value RPN",
 /* 236 */ "stmt_for ::= scope_for LPN for_cond SEMICOLON for_expr SEMICOLON for_expr RPN",
 /* 237 */ "for_cond ::=",
 /* 238 */ "for_cond ::= condition",
 /* 239 */ "for_expr ::=",
 /* 240 */ "for_expr ::= expr_assign",
 /* 241 */ "stmt_using ::= USING",
 /* 242 */ "stmt_try ::= try_catch",
 /* 243 */ "stmt_try ::= try_catch FINALLY stmt",
 /* 244 */ "stmt_try ::= try_block FINALLY stmt",
 /* 245 */ "try_block ::= TRY stmt",
 /* 246 */ "try_catch ::= try_block stmt_catch stmt_reuse",
 /* 247 */ "try_catch ::= try_catch stmt_catch stmt_reuse",
 /* 248 */ "scope_catch ::= CATCH",
 /* 249 */ "stmt_catch ::= scope_catch LPN COLON expr_simple RPN",
 /* 250 */ "stmt_catch ::= scope_catch LPN expr_value COLON expr_simple RPN",
 /* 251 */ "stmt_catch ::= scope_catch LPN VAR varname COLON expr_simple RPN",
 /* 252 */ "stmt_catch ::= scope_catch LPN expr_value RPN",
 /* 253 */ "stmt_catch ::= scope_catch LPN VAR varname RPN",
 /* 254 */ "token_yield ::= YIELD",
};
#endif /* NDEBUG */


#if YYSTACKDEPTH<=0
/*
** Try to increase the size of the parser stack.
*/
static void yyGrowStack(yyParser *p){
  int newSize;
  yyStackEntry *pNew;

  newSize = p->yystksz*2 + 100;
  pNew = realloc(p->yystack, newSize*sizeof(pNew[0]));
  if( pNew ){
    p->yystack = pNew;
    p->yystksz = newSize;
#ifndef NDEBUG
    if( yyTraceFILE ){
      fprintf(yyTraceFILE,"%sStack grows to %d entries!\n",
              yyTracePrompt, p->yystksz);
    }
#endif
  }
}
#endif

/* 
** This function allocates a new parser.
** The only argument is a pointer to a function which works like
** malloc.
**
** Inputs:
** A pointer to the function used to allocate memory.
**
** Outputs:
** A pointer to a parser.  This pointer is used in subsequent calls
** to XecParse and XecParseFree.
*/
void *XecParseAlloc(void *(*mallocProc)(size_t)){
  yyParser *pParser;
  pParser = (yyParser*)(*mallocProc)( (size_t)sizeof(yyParser) );
  if( pParser ){
    pParser->yyidx = -1;
#ifdef YYTRACKMAXSTACKDEPTH
    pParser->yyidxMax = 0;
#endif
#if YYSTACKDEPTH<=0
    pParser->yystack = NULL;
    pParser->yystksz = 0;
    yyGrowStack(pParser);
#endif
  }
  return pParser;
}

/* The following function deletes the value associated with a
** symbol.  The symbol can be either a terminal or nonterminal.
** "yymajor" is the symbol code, and "yypminor" is a pointer to
** the value.
*/
static void yy_destructor(
  yyParser *yypParser,    /* The parser */
  YYCODETYPE yymajor,     /* Type code for object to destroy */
  YYMINORTYPE *yypminor   /* The object to be destroyed */
){
  XecParseARG_FETCH;
  switch( yymajor ){
    /* Here is inserted the actions which take place when a
    ** terminal or non-terminal is destroyed.  This can happen
    ** when the symbol is popped from the stack during a
    ** reduce or during error processing or when a parser is 
    ** being destroyed before it is finished parsing.
    **
    ** Note: during a reduce, the only symbols destroyed are those
    ** which appear on the RHS of the rule, but which are not used
    ** inside the C code.
    */
      /* TERMINAL Destructor */
    case 1: /* IF */
    case 2: /* ELSE */
    case 3: /* TRY */
    case 4: /* CATCH */
    case 5: /* FINALLY */
    case 6: /* YIELD */
    case 7: /* LPN */
    case 8: /* IDENTIFIER */
    case 9: /* PERIOD */
    case 10: /* RPN */
    case 11: /* RBR */
    case 12: /* LBR */
    case 13: /* COLON */
    case 14: /* SEMICOLON */
    case 15: /* VAR */
    case 16: /* ASSIGN */
    case 17: /* COMMA */
    case 18: /* LSQ */
    case 19: /* RSQ */
    case 20: /* NEW */
    case 21: /* NULL */
    case 22: /* TRUE */
    case 23: /* FALSE */
    case 24: /* NUMBER */
    case 25: /* STRING */
    case 26: /* INCREMENT */
    case 27: /* DECREMENT */
    case 28: /* PLUS */
    case 29: /* MINUS */
    case 30: /* XMARK */
    case 31: /* TILDE */
    case 32: /* ASTERISK */
    case 33: /* SOLIDUS */
    case 34: /* PERCENT */
    case 35: /* LSHIFT */
    case 36: /* LRSHIFT */
    case 37: /* ARSHIFT */
    case 38: /* AMPERSAND */
    case 39: /* CARET */
    case 40: /* VBAR */
    case 41: /* CONCATENATE */
    case 42: /* EQUAL */
    case 43: /* NOTEQUAL */
    case 44: /* LESS */
    case 45: /* GREATER */
    case 46: /* LESSEQUAL */
    case 47: /* GREATEREQUAL */
    case 48: /* IN */
    case 49: /* NOTIN */
    case 50: /* IS */
    case 51: /* NOTIS */
    case 52: /* LOGICAND */
    case 53: /* LOGICXOR */
    case 54: /* LOGICOR */
    case 55: /* QMARK */
    case 56: /* ELLIPSIS */
    case 57: /* MULASSIGN */
    case 58: /* DIVASSIGN */
    case 59: /* MODASSIGN */
    case 60: /* INTDIVASSIGN */
    case 61: /* ADDASSIGN */
    case 62: /* SUBASSIGN */
    case 63: /* LSHIFTASSIGN */
    case 64: /* LRSHIFTASSIGN */
    case 65: /* ARSHIFTASSIGN */
    case 66: /* BITANDASSIGN */
    case 67: /* BITXORASSIGN */
    case 68: /* BITORASSIGN */
    case 69: /* WHILE */
    case 70: /* DELETE */
    case 71: /* CASE */
    case 72: /* DEFAULT */
    case 73: /* CONTINUE */
    case 74: /* BREAK */
    case 75: /* RETURN */
    case 76: /* THROW */
    case 77: /* SWITCH */
    case 78: /* DO */
    case 79: /* FOR */
    case 80: /* EACHKEY */
    case 81: /* USING */
{
#line 108 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"

    p->destroy( (yypminor->yy0) );

#line 2000 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
}
      break;
      /* Default NON-TERMINAL Destructor */
    case 82: /* error */
    case 83: /* proto */
    case 84: /* expr_call */
    case 85: /* expr_yield */
    case 86: /* object_lbr */
    case 87: /* newobj_lbr */
    case 88: /* func_lbr */
    case 89: /* newfunc_lbr */
    case 90: /* varname */
    case 91: /* varname_list */
    case 92: /* compare_op */
    case 93: /* assign_op */
    case 94: /* value_lbody */
    case 95: /* value_list */
    case 96: /* keyval_lbody */
    case 97: /* keyval_list */
    case 98: /* stmt_lbr */
    case 99: /* stmt_lbr_ru */
    case 100: /* stmt_if */
    case 101: /* stmt_switch */
    case 102: /* stmt_while */
    case 103: /* stmt_do */
    case 104: /* scope_for */
    case 105: /* stmt_foreach */
    case 106: /* stmt_for */
    case 107: /* stmt_using */
    case 108: /* try_block */
    case 109: /* try_catch */
    case 110: /* scope_catch */
    case 111: /* stmt_catch */
    case 112: /* token_yield */
    case 113: /* script */
    case 114: /* stmt_list */
    case 115: /* name */
    case 116: /* expr_paren */
    case 117: /* expr_list */
    case 118: /* decl_object */
    case 119: /* object_decls */
    case 120: /* expr_simple */
    case 121: /* object_decl */
    case 122: /* decl_func */
    case 123: /* decl_proto */
    case 124: /* decl_var */
    case 125: /* decl_noinit */
    case 126: /* expr_index */
    case 127: /* expr_assign */
    case 128: /* expr_value */
    case 129: /* expr_new */
    case 130: /* expr_postfix */
    case 131: /* expr_literal */
    case 132: /* expr_suffix */
    case 133: /* expr_unary */
    case 134: /* expr_mul */
    case 135: /* expr_add */
    case 136: /* expr_shift */
    case 137: /* expr_bitand */
    case 138: /* expr_bitxor */
    case 139: /* expr_bitor */
    case 140: /* expr_concat */
    case 141: /* expr_compare */
    case 142: /* expr_and */
    case 143: /* expr_xor */
    case 144: /* expr_or */
    case 145: /* expr_nolbr */
    case 146: /* expr_lbody */
    case 147: /* expr_final */
    case 148: /* sexpr_lbody */
    case 149: /* sexpr_list */
    case 150: /* sexpr_assign */
    case 151: /* condition */
    case 152: /* stmt */
    case 153: /* stmt_common */
    case 154: /* stmt_reuse */
    case 155: /* stmt_try */
    case 156: /* for_cond */
    case 157: /* for_expr */
{
#line 104 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"


#line 2084 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
}
      break;
    default:  break;   /* If no destructor action specified: do nothing */
  }
}

/*
** Pop the parser's stack once.
**
** If there is a destructor routine associated with the token which
** is popped from the stack, then call it.
**
** Return the major token number for the symbol popped.
*/
static int yy_pop_parser_stack(yyParser *pParser){
  YYCODETYPE yymajor;
  yyStackEntry *yytos = &pParser->yystack[pParser->yyidx];

  if( pParser->yyidx<0 ) return 0;
#ifndef NDEBUG
  if( yyTraceFILE && pParser->yyidx>=0 ){
    fprintf(yyTraceFILE,"%sPopping %s\n",
      yyTracePrompt,
      yyTokenName[yytos->major]);
  }
#endif
  yymajor = yytos->major;
  yy_destructor(pParser, yymajor, &yytos->minor);
  pParser->yyidx--;
  return yymajor;
}

/* 
** Deallocate and destroy a parser.  Destructors are all called for
** all stack elements before shutting the parser down.
**
** Inputs:
** <ul>
** <li>  A pointer to the parser.  This should be a pointer
**       obtained from XecParseAlloc.
** <li>  A pointer to a function used to reclaim memory obtained
**       from malloc.
** </ul>
*/
void XecParseFree(
  void *p,                    /* The parser to be deleted */
  void (*freeProc)(void*)     /* Function used to reclaim memory */
){
  yyParser *pParser = (yyParser*)p;
  if( pParser==0 ) return;
  while( pParser->yyidx>=0 ) yy_pop_parser_stack(pParser);
#if YYSTACKDEPTH<=0
  free(pParser->yystack);
#endif
  (*freeProc)((void*)pParser);
}

/*
** Return the peak depth of the stack for a parser.
*/
#ifdef YYTRACKMAXSTACKDEPTH
int XecParseStackPeak(void *p){
  yyParser *pParser = (yyParser*)p;
  return pParser->yyidxMax;
}
#endif

/*
** Find the appropriate action for a parser given the terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
static int yy_find_shift_action(
  yyParser *pParser,        /* The parser */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
  int stateno = pParser->yystack[pParser->yyidx].stateno;
 
  if( stateno>YY_SHIFT_MAX || (i = yy_shift_ofst[stateno])==YY_SHIFT_USE_DFLT ){
    return yy_default[stateno];
  }
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
  if( i<0 || i>=YY_SZ_ACTTAB || yy_lookahead[i]!=iLookAhead ){
    if( iLookAhead>0 ){
#ifdef YYFALLBACK
      YYCODETYPE iFallback;            /* Fallback token */
      if( iLookAhead<sizeof(yyFallback)/sizeof(yyFallback[0])
             && (iFallback = yyFallback[iLookAhead])!=0 ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE, "%sFALLBACK %s => %s\n",
             yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[iFallback]);
        }
#endif
        return yy_find_shift_action(pParser, iFallback);
      }
#endif
#ifdef YYWILDCARD
      {
        int j = i - iLookAhead + YYWILDCARD;
        if( j>=0 && j<YY_SZ_ACTTAB && yy_lookahead[j]==YYWILDCARD ){
#ifndef NDEBUG
          if( yyTraceFILE ){
            fprintf(yyTraceFILE, "%sWILDCARD %s => %s\n",
               yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[YYWILDCARD]);
          }
#endif /* NDEBUG */
          return yy_action[j];
        }
      }
#endif /* YYWILDCARD */
    }
    return yy_default[stateno];
  }else{
    return yy_action[i];
  }
}

/*
** Find the appropriate action for a parser given the non-terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
static int yy_find_reduce_action(
  int stateno,              /* Current state number */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
#ifdef YYERRORSYMBOL
  if( stateno>YY_REDUCE_MAX ){
    return yy_default[stateno];
  }
#else
  assert( stateno<=YY_REDUCE_MAX );
#endif
  i = yy_reduce_ofst[stateno];
  assert( i!=YY_REDUCE_USE_DFLT );
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
#ifdef YYERRORSYMBOL
  if( i<0 || i>=YY_SZ_ACTTAB || yy_lookahead[i]!=iLookAhead ){
    return yy_default[stateno];
  }
#else
  assert( i>=0 && i<YY_SZ_ACTTAB );
  assert( yy_lookahead[i]==iLookAhead );
#endif
  return yy_action[i];
}

/*
** The following routine is called if the stack overflows.
*/
static void yyStackOverflow(yyParser *yypParser, YYMINORTYPE *yypMinor){
   XecParseARG_FETCH;
   yypParser->yyidx--;
#ifndef NDEBUG
   if( yyTraceFILE ){
     fprintf(yyTraceFILE,"%sStack Overflow!\n",yyTracePrompt);
   }
#endif
   while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
   /* Here code is inserted which will execute if the parser
   ** stack every overflows */
   XecParseARG_STORE; /* Suppress warning about unused %extra_argument var */
}

/*
** Perform a shift action.
*/
static void yy_shift(
  yyParser *yypParser,          /* The parser to be shifted */
  int yyNewState,               /* The new state to shift in */
  int yyMajor,                  /* The major token to shift in */
  YYMINORTYPE *yypMinor         /* Pointer to the minor token to shift in */
){
  yyStackEntry *yytos;
  yypParser->yyidx++;
#ifdef YYTRACKMAXSTACKDEPTH
  if( yypParser->yyidx>yypParser->yyidxMax ){
    yypParser->yyidxMax = yypParser->yyidx;
  }
#endif
#if YYSTACKDEPTH>0 
  if( yypParser->yyidx>=YYSTACKDEPTH ){
    yyStackOverflow(yypParser, yypMinor);
    return;
  }
#else
  if( yypParser->yyidx>=yypParser->yystksz ){
    yyGrowStack(yypParser);
    if( yypParser->yyidx>=yypParser->yystksz ){
      yyStackOverflow(yypParser, yypMinor);
      return;
    }
  }
#endif
  yytos = &yypParser->yystack[yypParser->yyidx];
  yytos->stateno = (YYACTIONTYPE)yyNewState;
  yytos->major = (YYCODETYPE)yyMajor;
  yytos->minor = *yypMinor;
#ifndef NDEBUG
  if( yyTraceFILE && yypParser->yyidx>0 ){
    int i;
    fprintf(yyTraceFILE,"%sShift %d\n",yyTracePrompt,yyNewState);
    fprintf(yyTraceFILE,"%sStack:",yyTracePrompt);
    for(i=1; i<=yypParser->yyidx; i++)
      fprintf(yyTraceFILE," %s",yyTokenName[yypParser->yystack[i].major]);
    fprintf(yyTraceFILE,"\n");
  }
#endif
}

/* The following table contains information about every rule that
** is used during the reduce.
*/
static const struct {
  YYCODETYPE lhs;         /* Symbol on the left-hand side of the rule */
  unsigned char nrhs;     /* Number of right-hand side symbols in the rule */
} yyRuleInfo[] = {
  { 113, 1 },
  { 115, 1 },
  { 115, 3 },
  { 83, 2 },
  { 116, 2 },
  { 116, 3 },
  { 118, 3 },
  { 86, 2 },
  { 86, 4 },
  { 119, 0 },
  { 119, 2 },
  { 121, 1 },
  { 121, 1 },
  { 121, 1 },
  { 121, 2 },
  { 121, 2 },
  { 121, 2 },
  { 123, 1 },
  { 123, 2 },
  { 122, 3 },
  { 88, 2 },
  { 88, 3 },
  { 124, 4 },
  { 124, 4 },
  { 125, 2 },
  { 125, 2 },
  { 90, 1 },
  { 91, 3 },
  { 91, 3 },
  { 126, 3 },
  { 126, 5 },
  { 126, 4 },
  { 126, 3 },
  { 126, 5 },
  { 126, 4 },
  { 85, 3 },
  { 85, 4 },
  { 129, 3 },
  { 129, 3 },
  { 84, 2 },
  { 84, 2 },
  { 84, 2 },
  { 84, 2 },
  { 84, 2 },
  { 84, 2 },
  { 130, 3 },
  { 130, 5 },
  { 130, 4 },
  { 130, 3 },
  { 130, 5 },
  { 130, 4 },
  { 130, 3 },
  { 130, 5 },
  { 130, 4 },
  { 130, 3 },
  { 130, 5 },
  { 130, 4 },
  { 130, 3 },
  { 130, 5 },
  { 130, 4 },
  { 120, 1 },
  { 120, 1 },
  { 120, 1 },
  { 120, 1 },
  { 120, 1 },
  { 120, 1 },
  { 120, 1 },
  { 120, 2 },
  { 120, 2 },
  { 131, 1 },
  { 131, 1 },
  { 131, 1 },
  { 131, 1 },
  { 131, 1 },
  { 131, 1 },
  { 132, 1 },
  { 132, 2 },
  { 132, 2 },
  { 133, 1 },
  { 133, 2 },
  { 133, 2 },
  { 133, 2 },
  { 133, 2 },
  { 133, 2 },
  { 133, 2 },
  { 134, 1 },
  { 134, 3 },
  { 134, 3 },
  { 134, 3 },
  { 134, 3 },
  { 135, 1 },
  { 135, 3 },
  { 135, 3 },
  { 136, 1 },
  { 136, 3 },
  { 136, 3 },
  { 136, 3 },
  { 137, 1 },
  { 137, 3 },
  { 138, 1 },
  { 138, 3 },
  { 139, 1 },
  { 139, 3 },
  { 140, 1 },
  { 140, 3 },
  { 141, 1 },
  { 141, 3 },
  { 92, 1 },
  { 92, 1 },
  { 92, 1 },
  { 92, 1 },
  { 92, 1 },
  { 92, 1 },
  { 92, 1 },
  { 92, 1 },
  { 92, 1 },
  { 92, 1 },
  { 142, 1 },
  { 142, 3 },
  { 143, 1 },
  { 143, 3 },
  { 144, 1 },
  { 144, 3 },
  { 145, 1 },
  { 145, 5 },
  { 145, 2 },
  { 145, 3 },
  { 145, 3 },
  { 145, 3 },
  { 87, 2 },
  { 87, 3 },
  { 89, 3 },
  { 89, 4 },
  { 89, 4 },
  { 89, 5 },
  { 128, 1 },
  { 128, 2 },
  { 128, 3 },
  { 146, 1 },
  { 146, 3 },
  { 147, 1 },
  { 147, 2 },
  { 147, 2 },
  { 147, 2 },
  { 147, 3 },
  { 147, 3 },
  { 147, 4 },
  { 147, 4 },
  { 147, 4 },
  { 147, 4 },
  { 147, 4 },
  { 147, 4 },
  { 147, 4 },
  { 117, 1 },
  { 117, 1 },
  { 117, 3 },
  { 127, 1 },
  { 127, 3 },
  { 93, 1 },
  { 93, 1 },
  { 93, 1 },
  { 93, 1 },
  { 93, 1 },
  { 93, 1 },
  { 93, 1 },
  { 93, 1 },
  { 93, 1 },
  { 93, 1 },
  { 93, 1 },
  { 93, 1 },
  { 93, 1 },
  { 94, 1 },
  { 94, 3 },
  { 95, 1 },
  { 95, 2 },
  { 95, 1 },
  { 95, 2 },
  { 95, 3 },
  { 96, 3 },
  { 96, 5 },
  { 97, 1 },
  { 97, 2 },
  { 148, 1 },
  { 148, 3 },
  { 149, 1 },
  { 149, 1 },
  { 149, 3 },
  { 150, 1 },
  { 150, 3 },
  { 151, 1 },
  { 151, 4 },
  { 151, 4 },
  { 114, 0 },
  { 114, 2 },
  { 114, 2 },
  { 114, 2 },
  { 114, 2 },
  { 114, 3 },
  { 114, 3 },
  { 152, 3 },
  { 152, 1 },
  { 98, 1 },
  { 154, 3 },
  { 154, 1 },
  { 99, 1 },
  { 153, 2 },
  { 153, 5 },
  { 153, 7 },
  { 153, 7 },
  { 153, 5 },
  { 153, 7 },
  { 153, 2 },
  { 153, 2 },
  { 153, 5 },
  { 153, 1 },
  { 153, 3 },
  { 153, 3 },
  { 153, 2 },
  { 153, 2 },
  { 153, 2 },
  { 153, 2 },
  { 153, 3 },
  { 153, 2 },
  { 153, 3 },
  { 153, 3 },
  { 100, 1 },
  { 101, 1 },
  { 102, 1 },
  { 103, 1 },
  { 104, 1 },
  { 105, 6 },
  { 105, 6 },
  { 105, 7 },
  { 105, 7 },
  { 105, 7 },
  { 105, 7 },
  { 106, 8 },
  { 156, 0 },
  { 156, 1 },
  { 157, 0 },
  { 157, 1 },
  { 107, 1 },
  { 155, 1 },
  { 155, 3 },
  { 155, 3 },
  { 108, 2 },
  { 109, 3 },
  { 109, 3 },
  { 110, 1 },
  { 111, 5 },
  { 111, 6 },
  { 111, 7 },
  { 111, 4 },
  { 111, 5 },
  { 112, 1 },
};

static void yy_accept(yyParser*);  /* Forward Declaration */

/*
** Perform a reduce action and the shift that must immediately
** follow the reduce.
*/
static void yy_reduce(
  yyParser *yypParser,         /* The parser */
  int yyruleno                 /* Number of the rule by which to reduce */
){
  int yygoto;                     /* The next state */
  int yyact;                      /* The next action */
  YYMINORTYPE yygotominor;        /* The LHS of the rule reduced */
  yyStackEntry *yymsp;            /* The top of the parser's stack */
  int yysize;                     /* Amount to pop the stack */
  XecParseARG_FETCH;
  yymsp = &yypParser->yystack[yypParser->yyidx];
#ifndef NDEBUG
  if( yyTraceFILE && yyruleno>=0 
        && yyruleno<(int)(sizeof(yyRuleName)/sizeof(yyRuleName[0])) ){
    fprintf(yyTraceFILE, "%sReduce [%s].\n", yyTracePrompt,
      yyRuleName[yyruleno]);
  }
#endif /* NDEBUG */

  /* Silence complaints from purify about yygotominor being uninitialized
  ** in some cases when it is copied into the stack after the following
  ** switch.  yygotominor is uninitialized when a rule reduces that does
  ** not set the value of its left-hand side nonterminal.  Leaving the
  ** value of the nonterminal uninitialized is utterly harmless as long
  ** as the value is never used.  So really the only thing this code
  ** accomplishes is to quieten purify.  
  **
  ** 2007-01-16:  The wireshark project (www.wireshark.org) reports that
  ** without this code, their parser segfaults.  I'm not sure what there
  ** parser is doing to make this happen.  This is the second bug report
  ** from wireshark this week.  Clearly they are stressing Lemon in ways
  ** that it has not been previously stressed...  (SQLite ticket #2172)
  */
  /*memset(&yygotominor, 0, sizeof(yygotominor));*/
  yygotominor = yyzerominor;


  switch( yyruleno ){
  /* Beginning here are the reduction cases.  A typical example
  ** follows:
  **   case 0:
  **  #line <lineno> <grammarfile>
  **     { ... }           // User supplied code
  **  #line <lineno> <thisfile>
  **     break;
  */
      case 0: /* script ::= stmt_list */
#line 141 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,114,&yymsp[0].minor);
}
#line 2627 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 1: /* name ::= IDENTIFIER */
#line 153 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_unqual_name >(
                                    yymsp[0].minor.yy0->sloc, yymsp[0].minor.yy0->text );
                }
#line 2635 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 2: /* name ::= name PERIOD IDENTIFIER */
#line 158 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_unqual_qual >(
                                    yymsp[0].minor.yy0->sloc, yymsp[-2].minor.yy259, yymsp[0].minor.yy0->text );
                  yy_destructor(yypParser,9,&yymsp[-1].minor);
}
#line 2644 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 3: /* proto ::= name expr_paren */
#line 164 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy219 = p->alloc< xec_unqual_proto >(
                                    yymsp[-1].minor.yy259->sloc, yymsp[-1].minor.yy259, p->list( yymsp[0].minor.yy259 ) );
                }
#line 2652 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 4: /* expr_paren ::= LPN RPN */
#line 170 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = nullptr;
                  yy_destructor(yypParser,7,&yymsp[-1].minor);
  yy_destructor(yypParser,10,&yymsp[0].minor);
}
#line 2661 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 5: /* expr_paren ::= LPN expr_list RPN */
#line 174 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = yymsp[-1].minor.yy259;
                  yy_destructor(yypParser,7,&yymsp[-2].minor);
  yy_destructor(yypParser,10,&yymsp[0].minor);
}
#line 2670 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 6: /* decl_object ::= object_lbr object_decls RBR */
#line 188 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    p->close_scope( yymsp[-2].minor.yy182->scope );
                  yy_destructor(yypParser,119,&yymsp[-1].minor);
  yy_destructor(yypParser,11,&yymsp[0].minor);
}
#line 2679 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 7: /* object_lbr ::= name LBR */
#line 193 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy182 = p->object( yymsp[-1].minor.yy259->sloc, yymsp[-1].minor.yy259, nullptr );
                  yy_destructor(yypParser,12,&yymsp[0].minor);
}
#line 2687 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 8: /* object_lbr ::= name COLON expr_simple LBR */
#line 197 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy259 = p->resolve( yymsp[-1].minor.yy259 );
                    yygotominor.yy182 = p->object( yymsp[-3].minor.yy259->sloc, yymsp[-3].minor.yy259, yymsp[-1].minor.yy259 );
                  yy_destructor(yypParser,13,&yymsp[-2].minor);
  yy_destructor(yypParser,12,&yymsp[0].minor);
}
#line 2697 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 9: /* object_decls ::= */
      case 192: /* stmt_list ::= */ yytestcase(yyruleno==192);
#line 203 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                }
#line 2704 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 10: /* object_decls ::= object_decls object_decl */
#line 206 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,119,&yymsp[-1].minor);
  yy_destructor(yypParser,121,&yymsp[0].minor);
}
#line 2712 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 11: /* object_decl ::= SEMICOLON */
#line 210 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,14,&yymsp[0].minor);
}
#line 2719 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 12: /* object_decl ::= decl_object */
#line 213 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,118,&yymsp[0].minor);
}
#line 2726 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 13: /* object_decl ::= decl_func */
#line 216 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,122,&yymsp[0].minor);
}
#line 2733 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 14: /* object_decl ::= decl_proto SEMICOLON */
#line 219 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,123,&yymsp[-1].minor);
  yy_destructor(yypParser,14,&yymsp[0].minor);
}
#line 2741 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 15: /* object_decl ::= decl_var SEMICOLON */
#line 222 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,124,&yymsp[-1].minor);
  yy_destructor(yypParser,14,&yymsp[0].minor);
}
#line 2749 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 16: /* object_decl ::= decl_noinit SEMICOLON */
#line 225 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,125,&yymsp[-1].minor);
  yy_destructor(yypParser,14,&yymsp[0].minor);
}
#line 2757 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 17: /* decl_proto ::= proto */
#line 232 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    p->prototype( yymsp[0].minor.yy219->sloc, yymsp[0].minor.yy219 );
                }
#line 2764 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 18: /* decl_proto ::= proto YIELD */
#line 236 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy219->coroutine = true;
                    p->prototype( yymsp[-1].minor.yy219->sloc, yymsp[-1].minor.yy219 );
                  yy_destructor(yypParser,6,&yymsp[0].minor);
}
#line 2773 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 19: /* decl_func ::= func_lbr stmt_list RBR */
#line 244 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    p->close_scope( yymsp[-2].minor.yy45->scope );
                  yy_destructor(yypParser,114,&yymsp[-1].minor);
  yy_destructor(yypParser,11,&yymsp[0].minor);
}
#line 2782 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 20: /* func_lbr ::= proto LBR */
#line 249 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy45 = p->function( yymsp[-1].minor.yy219->sloc, yymsp[-1].minor.yy219->name,
                                    yymsp[-1].minor.yy219->params, yymsp[-1].minor.yy219->coroutine, false );
                  yy_destructor(yypParser,12,&yymsp[0].minor);
}
#line 2791 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 21: /* func_lbr ::= proto YIELD LBR */
#line 254 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-2].minor.yy219->coroutine = true;
                    yygotominor.yy45 = p->function( yymsp[-2].minor.yy219->sloc, yymsp[-2].minor.yy219->name,
                                    yymsp[-2].minor.yy219->params, yymsp[-2].minor.yy219->coroutine, false );
                  yy_destructor(yypParser,6,&yymsp[-1].minor);
  yy_destructor(yypParser,12,&yymsp[0].minor);
}
#line 2802 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 22: /* decl_var ::= VAR varname ASSIGN expr_list */
#line 263 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    p->var( yymsp[-3].minor.yy0->sloc, yymsp[-2].minor.yy240, p->resolve( yymsp[0].minor.yy259 ) );
                    p->destroy( yymsp[-3].minor.yy0 );
                  yy_destructor(yypParser,16,&yymsp[-1].minor);
}
#line 2811 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 23: /* decl_var ::= VAR varname_list ASSIGN expr_list */
#line 268 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    p->var_list( yymsp[-3].minor.yy0->sloc, yymsp[-2].minor.yy283, p->resolve( yymsp[0].minor.yy259 ) );
                    p->destroy( yymsp[-3].minor.yy0 );
                  yy_destructor(yypParser,16,&yymsp[-1].minor);
}
#line 2820 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 24: /* decl_noinit ::= VAR varname */
#line 274 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    p->var( yymsp[-1].minor.yy0->sloc, yymsp[0].minor.yy240, nullptr );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 2828 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 25: /* decl_noinit ::= VAR varname_list */
#line 279 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    p->var_list( yymsp[-1].minor.yy0->sloc, yymsp[0].minor.yy283, nullptr );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 2836 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 26: /* varname ::= IDENTIFIER */
#line 287 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy240 = p->alloc< xec_unqual_name >( yymsp[0].minor.yy0->sloc, yymsp[0].minor.yy0->text );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 2844 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 27: /* varname_list ::= varname COMMA varname */
#line 293 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy283 = p->alloc< xec_unqual_list >( yymsp[-2].minor.yy240->sloc );
                    yygotominor.yy283->names.push_back( yymsp[-2].minor.yy240 );
                    yygotominor.yy283->names.push_back( yymsp[0].minor.yy240 );
                  yy_destructor(yypParser,17,&yymsp[-1].minor);
}
#line 2854 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 28: /* varname_list ::= varname_list COMMA varname */
#line 299 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy283 = yymsp[-2].minor.yy283;
                    yygotominor.yy283->names.push_back( yymsp[0].minor.yy240 );
                  yy_destructor(yypParser,17,&yymsp[-1].minor);
}
#line 2863 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 29: /* expr_index ::= LPN expr_assign RPN */
#line 315 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy259 = p->resolve( yymsp[-1].minor.yy259 );
                    switch ( yymsp[-1].minor.yy259->kind )
                    {
                    case XEC_EXPR_KEY:
                    case XEC_EXPR_INKEY:
                    case XEC_EXPR_CALL:
                    case XEC_EXPR_YIELD:
                    case XEC_EXPR_VARARG:
                    case XEC_EXPR_UNPACK:
                    case XEC_EXPR_LIST:
                    case XEC_EXPR_ASSIGN_LIST:
                        yygotominor.yy259 = p->alloc< xec_expr_mono >( yymsp[-1].minor.yy259->sloc, yymsp[-1].minor.yy259 );
                        break;
                        
                    default:
                        yygotominor.yy259 = yymsp[-1].minor.yy259;
                        break;
                    }
                  yy_destructor(yypParser,7,&yymsp[-2].minor);
  yy_destructor(yypParser,10,&yymsp[0].minor);
}
#line 2889 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 30: /* expr_index ::= name PERIOD LSQ expr_value RSQ */
      case 33: /* expr_index ::= expr_index PERIOD LSQ expr_value RSQ */ yytestcase(yyruleno==33);
#line 336 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-4].minor.yy259  = p->resolve( yymsp[-4].minor.yy259 );
                    yymsp[-1].minor.yy259   = p->resolve( yymsp[-1].minor.yy259 );
                    yygotominor.yy259 = p->alloc< xec_expr_inkey >( yymsp[-4].minor.yy259->sloc, yymsp[-4].minor.yy259, yymsp[-1].minor.yy259 );
                  yy_destructor(yypParser,9,&yymsp[-3].minor);
  yy_destructor(yypParser,18,&yymsp[-2].minor);
  yy_destructor(yypParser,19,&yymsp[0].minor);
}
#line 2902 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 31: /* expr_index ::= name LSQ expr_value RSQ */
      case 34: /* expr_index ::= expr_index LSQ expr_value RSQ */ yytestcase(yyruleno==34);
#line 342 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-3].minor.yy259  = p->resolve( yymsp[-3].minor.yy259 );
                    yymsp[-1].minor.yy259 = p->resolve( yymsp[-1].minor.yy259 );
                    yygotominor.yy259 = p->alloc< xec_expr_index >( yymsp[-3].minor.yy259->sloc, yymsp[-3].minor.yy259, yymsp[-1].minor.yy259 );
                  yy_destructor(yypParser,18,&yymsp[-2].minor);
  yy_destructor(yypParser,19,&yymsp[0].minor);
}
#line 2914 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 32: /* expr_index ::= expr_index PERIOD IDENTIFIER */
#line 348 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-2].minor.yy259  = p->resolve( yymsp[-2].minor.yy259 );
                    yygotominor.yy259 = p->alloc< xec_expr_key >( yymsp[-2].minor.yy259->sloc, yymsp[-2].minor.yy259, yymsp[0].minor.yy0->text );
                    p->destroy( yymsp[0].minor.yy0 );
                  yy_destructor(yypParser,9,&yymsp[-1].minor);
}
#line 2924 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 35: /* expr_yield ::= YIELD LPN RPN */
#line 369 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy55 = p->alloc< xec_expr_yield >( yymsp[-2].minor.yy0->sloc, nullptr );
                    p->destroy( yymsp[-2].minor.yy0 );
                  yy_destructor(yypParser,7,&yymsp[-1].minor);
  yy_destructor(yypParser,10,&yymsp[0].minor);
}
#line 2934 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 36: /* expr_yield ::= YIELD LPN expr_list RPN */
#line 375 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy55 = p->alloc< xec_expr_yield >(
                            yymsp[-3].minor.yy0->sloc, p->list( p->resolve( yymsp[-1].minor.yy259 ) ) );
                    p->destroy( yymsp[-3].minor.yy0 );
                  yy_destructor(yypParser,7,&yymsp[-2].minor);
  yy_destructor(yypParser,10,&yymsp[0].minor);
}
#line 2945 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 37: /* expr_new ::= NEW name expr_paren */
#line 383 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy259 = p->resolve( yymsp[-1].minor.yy259 );
                    yygotominor.yy259 = p->alloc< xec_new_new >(
                            yymsp[-2].minor.yy0->sloc, yymsp[-1].minor.yy259, p->list( p->resolve( yymsp[0].minor.yy259 ) ) );
                    p->destroy( yymsp[-2].minor.yy0 );
                }
#line 2955 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 38: /* expr_new ::= NEW expr_index expr_paren */
#line 390 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_new_new >(
                            yymsp[-2].minor.yy0->sloc, yymsp[-1].minor.yy259, p->list( p->resolve( yymsp[0].minor.yy259 ) ) );
                    p->destroy( yymsp[-2].minor.yy0 );
                }
#line 2964 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 39: /* expr_call ::= proto expr_paren */
#line 398 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    xec_expr_call* call = p->resolve_proto( yymsp[-1].minor.yy219 );
                    yygotominor.yy52 = p->alloc< xec_expr_call >(
                            call->sloc, call, p->list( p->resolve( yymsp[0].minor.yy259 ) ) );
                }
#line 2973 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 40: /* expr_call ::= expr_index expr_paren */
      case 42: /* expr_call ::= expr_new expr_paren */ yytestcase(yyruleno==42);
      case 44: /* expr_call ::= expr_postfix expr_paren */ yytestcase(yyruleno==44);
#line 404 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy52 = p->alloc< xec_expr_call >(
                            yymsp[-1].minor.yy259->sloc, yymsp[-1].minor.yy259, p->list( p->resolve( yymsp[0].minor.yy259 ) ) );
                }
#line 2983 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 41: /* expr_call ::= expr_yield expr_paren */
#line 409 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy52 = p->alloc< xec_expr_call >(
                            yymsp[-1].minor.yy55->sloc, yymsp[-1].minor.yy55, p->list( p->resolve( yymsp[0].minor.yy259 ) ) );
                }
#line 2991 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 43: /* expr_call ::= expr_call expr_paren */
#line 419 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy52 = p->alloc< xec_expr_call >(
                            yymsp[-1].minor.yy52->sloc, yymsp[-1].minor.yy52, p->list( p->resolve( yymsp[0].minor.yy259 ) ) );
                }
#line 2999 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 45: /* expr_postfix ::= proto PERIOD IDENTIFIER */
#line 431 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    xec_expr_call* call = p->resolve_proto( yymsp[-2].minor.yy219 );
                    yygotominor.yy259 = p->alloc< xec_expr_key >(
                             call->sloc, call, yymsp[0].minor.yy0->text );
                    p->destroy( yymsp[0].minor.yy0 );
                  yy_destructor(yypParser,9,&yymsp[-1].minor);
}
#line 3010 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 46: /* expr_postfix ::= proto PERIOD LSQ expr_value RSQ */
#line 438 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    xec_expr_call* call = p->resolve_proto( yymsp[-4].minor.yy219 );
                    yymsp[-1].minor.yy259 = p->resolve( yymsp[-1].minor.yy259 );
                    yygotominor.yy259 = p->alloc< xec_expr_inkey >(
                             call->sloc, call, yymsp[-1].minor.yy259 );
                  yy_destructor(yypParser,9,&yymsp[-3].minor);
  yy_destructor(yypParser,18,&yymsp[-2].minor);
  yy_destructor(yypParser,19,&yymsp[0].minor);
}
#line 3023 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 47: /* expr_postfix ::= proto LSQ expr_value RSQ */
#line 445 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    xec_expr_call* call = p->resolve_proto( yymsp[-3].minor.yy219 );
                    yymsp[-1].minor.yy259 = p->resolve( yymsp[-1].minor.yy259 );
                    yygotominor.yy259 = p->alloc< xec_expr_index >(
                             call->sloc, call, yymsp[-1].minor.yy259 );
                  yy_destructor(yypParser,18,&yymsp[-2].minor);
  yy_destructor(yypParser,19,&yymsp[0].minor);
}
#line 3035 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 48: /* expr_postfix ::= expr_yield PERIOD IDENTIFIER */
#line 452 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_expr_key >(
                             yymsp[-2].minor.yy55->sloc, yymsp[-2].minor.yy55, yymsp[0].minor.yy0->text );
                    p->destroy( yymsp[0].minor.yy0 );
                  yy_destructor(yypParser,9,&yymsp[-1].minor);
}
#line 3045 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 49: /* expr_postfix ::= expr_yield PERIOD LSQ expr_value RSQ */
#line 458 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy259 = p->resolve( yymsp[-1].minor.yy259 );
                    yygotominor.yy259 = p->alloc< xec_expr_inkey >(
                             yymsp[-4].minor.yy55->sloc, yymsp[-4].minor.yy55, yymsp[-1].minor.yy259 );
                  yy_destructor(yypParser,9,&yymsp[-3].minor);
  yy_destructor(yypParser,18,&yymsp[-2].minor);
  yy_destructor(yypParser,19,&yymsp[0].minor);
}
#line 3057 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 50: /* expr_postfix ::= expr_yield LSQ expr_value RSQ */
#line 464 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy259 = p->resolve( yymsp[-1].minor.yy259 );
                    yygotominor.yy259 = p->alloc< xec_expr_index >(
                             yymsp[-3].minor.yy55->sloc, yymsp[-3].minor.yy55, yymsp[-1].minor.yy259 );
                  yy_destructor(yypParser,18,&yymsp[-2].minor);
  yy_destructor(yypParser,19,&yymsp[0].minor);
}
#line 3068 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 51: /* expr_postfix ::= expr_new PERIOD IDENTIFIER */
      case 57: /* expr_postfix ::= expr_postfix PERIOD IDENTIFIER */ yytestcase(yyruleno==57);
#line 470 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_expr_key >(
                             yymsp[-2].minor.yy259->sloc, yymsp[-2].minor.yy259, yymsp[0].minor.yy0->text );
                    p->destroy( yymsp[0].minor.yy0 );
                  yy_destructor(yypParser,9,&yymsp[-1].minor);
}
#line 3079 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 52: /* expr_postfix ::= expr_new PERIOD LSQ expr_value RSQ */
      case 58: /* expr_postfix ::= expr_postfix PERIOD LSQ expr_value RSQ */ yytestcase(yyruleno==58);
#line 476 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy259 = p->resolve( yymsp[-1].minor.yy259 );
                    yygotominor.yy259 = p->alloc< xec_expr_inkey >(
                             yymsp[-4].minor.yy259->sloc, yymsp[-4].minor.yy259, yymsp[-1].minor.yy259 );
                  yy_destructor(yypParser,9,&yymsp[-3].minor);
  yy_destructor(yypParser,18,&yymsp[-2].minor);
  yy_destructor(yypParser,19,&yymsp[0].minor);
}
#line 3092 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 53: /* expr_postfix ::= expr_new LSQ expr_value RSQ */
      case 59: /* expr_postfix ::= expr_postfix LSQ expr_value RSQ */ yytestcase(yyruleno==59);
#line 482 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy259 = p->resolve( yymsp[-1].minor.yy259 );
                    yygotominor.yy259 = p->alloc< xec_expr_index >(
                             yymsp[-3].minor.yy259->sloc, yymsp[-3].minor.yy259, yymsp[-1].minor.yy259 );
                  yy_destructor(yypParser,18,&yymsp[-2].minor);
  yy_destructor(yypParser,19,&yymsp[0].minor);
}
#line 3104 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 54: /* expr_postfix ::= expr_call PERIOD IDENTIFIER */
#line 488 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_expr_key >(
                             yymsp[-2].minor.yy52->sloc, yymsp[-2].minor.yy52, yymsp[0].minor.yy0->text );
                    p->destroy( yymsp[0].minor.yy0 );
                  yy_destructor(yypParser,9,&yymsp[-1].minor);
}
#line 3114 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 55: /* expr_postfix ::= expr_call PERIOD LSQ expr_value RSQ */
#line 494 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy259 = p->resolve( yymsp[-1].minor.yy259 );
                    yygotominor.yy259 = p->alloc< xec_expr_inkey >(
                             yymsp[-4].minor.yy52->sloc, yymsp[-4].minor.yy52, yymsp[-1].minor.yy259 );
                  yy_destructor(yypParser,9,&yymsp[-3].minor);
  yy_destructor(yypParser,18,&yymsp[-2].minor);
  yy_destructor(yypParser,19,&yymsp[0].minor);
}
#line 3126 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 56: /* expr_postfix ::= expr_call LSQ expr_value RSQ */
#line 500 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy259 = p->resolve( yymsp[-1].minor.yy259 );
                    yygotominor.yy259 = p->alloc< xec_expr_index >(
                             yymsp[-3].minor.yy52->sloc, yymsp[-3].minor.yy52, yymsp[-1].minor.yy259 );
                  yy_destructor(yypParser,18,&yymsp[-2].minor);
  yy_destructor(yypParser,19,&yymsp[0].minor);
}
#line 3137 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 60: /* expr_simple ::= name */
#line 530 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    // Don't resolve the name here, as it may be a parameter
                    // declaration for a prototype or function.
                    yygotominor.yy259 = yymsp[0].minor.yy259;
                }
#line 3146 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 61: /* expr_simple ::= proto */
#line 536 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->resolve_proto( yymsp[0].minor.yy219 );
                }
#line 3153 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 62: /* expr_simple ::= expr_index */
      case 64: /* expr_simple ::= expr_new */ yytestcase(yyruleno==64);
      case 66: /* expr_simple ::= expr_postfix */ yytestcase(yyruleno==66);
      case 69: /* expr_literal ::= expr_simple */ yytestcase(yyruleno==69);
      case 75: /* expr_suffix ::= expr_literal */ yytestcase(yyruleno==75);
      case 78: /* expr_unary ::= expr_suffix */ yytestcase(yyruleno==78);
      case 85: /* expr_mul ::= expr_unary */ yytestcase(yyruleno==85);
      case 90: /* expr_add ::= expr_mul */ yytestcase(yyruleno==90);
      case 93: /* expr_shift ::= expr_add */ yytestcase(yyruleno==93);
      case 97: /* expr_bitand ::= expr_shift */ yytestcase(yyruleno==97);
      case 99: /* expr_bitxor ::= expr_bitand */ yytestcase(yyruleno==99);
      case 101: /* expr_bitor ::= expr_bitxor */ yytestcase(yyruleno==101);
      case 103: /* expr_concat ::= expr_bitor */ yytestcase(yyruleno==103);
      case 105: /* expr_compare ::= expr_concat */ yytestcase(yyruleno==105);
      case 117: /* expr_and ::= expr_compare */ yytestcase(yyruleno==117);
      case 119: /* expr_xor ::= expr_and */ yytestcase(yyruleno==119);
      case 121: /* expr_or ::= expr_xor */ yytestcase(yyruleno==121);
      case 123: /* expr_nolbr ::= expr_or */ yytestcase(yyruleno==123);
      case 135: /* expr_value ::= expr_nolbr */ yytestcase(yyruleno==135);
      case 138: /* expr_lbody ::= expr_value */ yytestcase(yyruleno==138);
      case 153: /* expr_list ::= expr_final */ yytestcase(yyruleno==153);
      case 154: /* expr_list ::= expr_lbody */ yytestcase(yyruleno==154);
      case 184: /* sexpr_list ::= expr_final */ yytestcase(yyruleno==184);
      case 185: /* sexpr_list ::= sexpr_lbody */ yytestcase(yyruleno==185);
      case 187: /* sexpr_assign ::= sexpr_list */ yytestcase(yyruleno==187);
      case 189: /* condition ::= expr_assign */ yytestcase(yyruleno==189);
      case 200: /* stmt ::= stmt_common */ yytestcase(yyruleno==200);
      case 203: /* stmt_reuse ::= stmt_common */ yytestcase(yyruleno==203);
      case 214: /* stmt_common ::= stmt_try */ yytestcase(yyruleno==214);
      case 238: /* for_cond ::= condition */ yytestcase(yyruleno==238);
      case 240: /* for_expr ::= expr_assign */ yytestcase(yyruleno==240);
#line 540 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = yymsp[0].minor.yy259;
                }
#line 3190 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 63: /* expr_simple ::= expr_yield */
#line 544 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = yymsp[0].minor.yy55;
                }
#line 3197 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 65: /* expr_simple ::= expr_call */
#line 552 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = yymsp[0].minor.yy52;
                }
#line 3204 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 67: /* expr_simple ::= proto YIELD */
#line 560 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    xec_expr_call* call = p->resolve_proto( yymsp[-1].minor.yy219 );
                    call->yieldcall = true;
                    yygotominor.yy259 = call;
                  yy_destructor(yypParser,6,&yymsp[0].minor);
}
#line 3214 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 68: /* expr_simple ::= expr_call YIELD */
#line 566 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy52->yieldcall = true;
                    yygotominor.yy259 = yymsp[-1].minor.yy52;
                  yy_destructor(yypParser,6,&yymsp[0].minor);
}
#line 3223 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 70: /* expr_literal ::= NULL */
#line 576 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_expr_null >( yymsp[0].minor.yy0->sloc );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3231 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 71: /* expr_literal ::= TRUE */
#line 581 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_expr_bool >( yymsp[0].minor.yy0->sloc, true );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3239 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 72: /* expr_literal ::= FALSE */
#line 586 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_expr_bool >( yymsp[0].minor.yy0->sloc, false );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3247 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 73: /* expr_literal ::= NUMBER */
#line 591 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    double number = p->parse_number( yymsp[0].minor.yy0 );
                    yygotominor.yy259 = p->alloc< xec_expr_number >( yymsp[0].minor.yy0->sloc, number );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3256 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 74: /* expr_literal ::= STRING */
#line 597 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_expr_string >(
                            yymsp[0].minor.yy0->sloc, yymsp[0].minor.yy0->text, yymsp[0].minor.yy0->size );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3265 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 76: /* expr_suffix ::= expr_suffix INCREMENT */
      case 77: /* expr_suffix ::= expr_suffix DECREMENT */ yytestcase(yyruleno==77);
#line 608 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy259 = p->resolve( yymsp[-1].minor.yy259 );
                    yymsp[-1].minor.yy259 = p->lvalue( yymsp[-1].minor.yy259 );
                    yygotominor.yy259 = p->alloc< xec_expr_postop >(
                             yymsp[-1].minor.yy259->sloc, yymsp[0].minor.yy0->kind, yymsp[-1].minor.yy259 );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3277 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 79: /* expr_unary ::= PLUS expr_unary */
      case 80: /* expr_unary ::= MINUS expr_unary */ yytestcase(yyruleno==80);
      case 81: /* expr_unary ::= XMARK expr_unary */ yytestcase(yyruleno==81);
      case 82: /* expr_unary ::= TILDE expr_unary */ yytestcase(yyruleno==82);
#line 629 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[0].minor.yy259 = p->resolve( yymsp[0].minor.yy259 );
                    yygotominor.yy259 = p->alloc< xec_expr_unary >(
                             yymsp[-1].minor.yy0->sloc, yymsp[-1].minor.yy0->kind, yymsp[0].minor.yy259 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 3290 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 83: /* expr_unary ::= INCREMENT expr_unary */
      case 84: /* expr_unary ::= DECREMENT expr_unary */ yytestcase(yyruleno==84);
#line 657 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[0].minor.yy259 = p->resolve( yymsp[0].minor.yy259 );
                    yymsp[0].minor.yy259 = p->lvalue( yymsp[0].minor.yy259 );
                    yygotominor.yy259 = p->alloc< xec_expr_preop >(
                             yymsp[-1].minor.yy0->sloc, yymsp[-1].minor.yy0->kind, yymsp[0].minor.yy259 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 3302 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 86: /* expr_mul ::= expr_mul ASTERISK expr_unary */
      case 87: /* expr_mul ::= expr_mul SOLIDUS expr_unary */ yytestcase(yyruleno==87);
      case 88: /* expr_mul ::= expr_mul PERCENT expr_unary */ yytestcase(yyruleno==88);
      case 89: /* expr_mul ::= expr_mul TILDE expr_unary */ yytestcase(yyruleno==89);
      case 91: /* expr_add ::= expr_add PLUS expr_mul */ yytestcase(yyruleno==91);
      case 92: /* expr_add ::= expr_add MINUS expr_mul */ yytestcase(yyruleno==92);
      case 94: /* expr_shift ::= expr_shift LSHIFT expr_add */ yytestcase(yyruleno==94);
      case 95: /* expr_shift ::= expr_shift LRSHIFT expr_add */ yytestcase(yyruleno==95);
      case 96: /* expr_shift ::= expr_shift ARSHIFT expr_add */ yytestcase(yyruleno==96);
      case 98: /* expr_bitand ::= expr_bitand AMPERSAND expr_shift */ yytestcase(yyruleno==98);
      case 100: /* expr_bitxor ::= expr_bitxor CARET expr_bitand */ yytestcase(yyruleno==100);
      case 102: /* expr_bitor ::= expr_bitor VBAR expr_bitxor */ yytestcase(yyruleno==102);
      case 104: /* expr_concat ::= expr_concat CONCATENATE expr_bitor */ yytestcase(yyruleno==104);
#line 678 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-2].minor.yy259 = p->resolve( yymsp[-2].minor.yy259 );
                    yymsp[0].minor.yy259 = p->resolve( yymsp[0].minor.yy259 );
                    yygotominor.yy259 = p->alloc< xec_expr_binary >(
                                    yymsp[-2].minor.yy259->sloc, yymsp[-1].minor.yy0->kind, yymsp[-2].minor.yy259, yymsp[0].minor.yy259 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 3325 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 106: /* expr_compare ::= expr_compare compare_op expr_concat */
#line 817 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-2].minor.yy259 = p->resolve( yymsp[-2].minor.yy259 );
                    yymsp[0].minor.yy259 = p->resolve( yymsp[0].minor.yy259 );
                    yygotominor.yy259 = p->compare( yymsp[-1].minor.yy19, yymsp[-2].minor.yy259, yymsp[0].minor.yy259 );
                    p->destroy( yymsp[-1].minor.yy19 );
                }
#line 3335 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 107: /* compare_op ::= EQUAL */
      case 108: /* compare_op ::= NOTEQUAL */ yytestcase(yyruleno==108);
      case 109: /* compare_op ::= LESS */ yytestcase(yyruleno==109);
      case 110: /* compare_op ::= GREATER */ yytestcase(yyruleno==110);
      case 111: /* compare_op ::= LESSEQUAL */ yytestcase(yyruleno==111);
      case 112: /* compare_op ::= GREATEREQUAL */ yytestcase(yyruleno==112);
      case 113: /* compare_op ::= IN */ yytestcase(yyruleno==113);
      case 114: /* compare_op ::= NOTIN */ yytestcase(yyruleno==114);
      case 115: /* compare_op ::= IS */ yytestcase(yyruleno==115);
      case 116: /* compare_op ::= NOTIS */ yytestcase(yyruleno==116);
      case 158: /* assign_op ::= ASSIGN */ yytestcase(yyruleno==158);
      case 159: /* assign_op ::= MULASSIGN */ yytestcase(yyruleno==159);
      case 160: /* assign_op ::= DIVASSIGN */ yytestcase(yyruleno==160);
      case 161: /* assign_op ::= MODASSIGN */ yytestcase(yyruleno==161);
      case 162: /* assign_op ::= INTDIVASSIGN */ yytestcase(yyruleno==162);
      case 163: /* assign_op ::= ADDASSIGN */ yytestcase(yyruleno==163);
      case 164: /* assign_op ::= SUBASSIGN */ yytestcase(yyruleno==164);
      case 165: /* assign_op ::= LSHIFTASSIGN */ yytestcase(yyruleno==165);
      case 166: /* assign_op ::= LRSHIFTASSIGN */ yytestcase(yyruleno==166);
      case 167: /* assign_op ::= ARSHIFTASSIGN */ yytestcase(yyruleno==167);
      case 168: /* assign_op ::= BITANDASSIGN */ yytestcase(yyruleno==168);
      case 169: /* assign_op ::= BITXORASSIGN */ yytestcase(yyruleno==169);
      case 170: /* assign_op ::= BITORASSIGN */ yytestcase(yyruleno==170);
      case 254: /* token_yield ::= YIELD */ yytestcase(yyruleno==254);
#line 825 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy19 = yymsp[0].minor.yy0;
                }
#line 3365 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 118: /* expr_and ::= expr_and LOGICAND expr_compare */
      case 120: /* expr_xor ::= expr_xor LOGICXOR expr_and */ yytestcase(yyruleno==120);
      case 122: /* expr_or ::= expr_or LOGICOR expr_xor */ yytestcase(yyruleno==122);
#line 871 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-2].minor.yy259 = p->resolve( yymsp[-2].minor.yy259 );
                    yymsp[0].minor.yy259 = p->resolve( yymsp[0].minor.yy259 );
                    yygotominor.yy259 = p->alloc< xec_expr_logical >(
                                    yymsp[-2].minor.yy259->sloc, yymsp[-1].minor.yy0->kind, yymsp[-2].minor.yy259, yymsp[0].minor.yy259 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 3378 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 124: /* expr_nolbr ::= expr_or QMARK expr_value COLON expr_value */
#line 912 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-4].minor.yy259 = p->resolve( yymsp[-4].minor.yy259 );
                    yymsp[-2].minor.yy259    = p->resolve( yymsp[-2].minor.yy259 );
                    yymsp[0].minor.yy259   = p->resolve( yymsp[0].minor.yy259 );
                    yygotominor.yy259 = p->alloc< xec_expr_qmark >(
                            yymsp[-4].minor.yy259->sloc, yymsp[-4].minor.yy259, yymsp[-2].minor.yy259, yymsp[0].minor.yy259 );
                  yy_destructor(yypParser,55,&yymsp[-3].minor);
  yy_destructor(yypParser,13,&yymsp[-1].minor);
}
#line 3391 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 125: /* expr_nolbr ::= LSQ RSQ */
#line 920 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_new_list >( yymsp[-1].minor.yy0->sloc );
                    p->destroy( yymsp[-1].minor.yy0 );
                  yy_destructor(yypParser,19,&yymsp[0].minor);
}
#line 3400 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 126: /* expr_nolbr ::= LSQ value_list RSQ */
#line 925 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = yymsp[-1].minor.yy87;
                    yygotominor.yy259->sloc = yymsp[-2].minor.yy0->sloc;
                    p->destroy( yymsp[-2].minor.yy0 );
                  yy_destructor(yypParser,19,&yymsp[0].minor);
}
#line 3410 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 127: /* expr_nolbr ::= newobj_lbr object_decls RBR */
#line 931 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = yymsp[-2].minor.yy182;
                    p->close_scope( yymsp[-2].minor.yy182->scope );
                  yy_destructor(yypParser,119,&yymsp[-1].minor);
  yy_destructor(yypParser,11,&yymsp[0].minor);
}
#line 3420 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 128: /* expr_nolbr ::= newfunc_lbr stmt_list RBR */
#line 936 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = yymsp[-2].minor.yy45;
                    p->close_scope( yymsp[-2].minor.yy45->scope );
                  yy_destructor(yypParser,114,&yymsp[-1].minor);
  yy_destructor(yypParser,11,&yymsp[0].minor);
}
#line 3430 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 129: /* newobj_lbr ::= COLON LBR */
#line 942 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy182 = p->object( yymsp[-1].minor.yy0->sloc, nullptr, nullptr );
                    p->destroy( yymsp[-1].minor.yy0 );
                  yy_destructor(yypParser,12,&yymsp[0].minor);
}
#line 3439 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 130: /* newobj_lbr ::= COLON expr_simple LBR */
#line 947 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy259 = p->resolve( yymsp[-1].minor.yy259 );
                    yygotominor.yy182 = p->object( yymsp[-2].minor.yy0->sloc, nullptr, yymsp[-1].minor.yy259 );
                    p->destroy( yymsp[-2].minor.yy0 );
                  yy_destructor(yypParser,12,&yymsp[0].minor);
}
#line 3449 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 131: /* newfunc_lbr ::= QMARK expr_paren LBR */
#line 954 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy45 = p->function( yymsp[-2].minor.yy0->sloc,
                                    nullptr, yymsp[-1].minor.yy259, false, false );
                    p->destroy( yymsp[-2].minor.yy0 );
                  yy_destructor(yypParser,12,&yymsp[0].minor);
}
#line 3459 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 132: /* newfunc_lbr ::= PERIOD QMARK expr_paren LBR */
#line 960 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy45 = p->function( yymsp[-3].minor.yy0->sloc,
                                    nullptr, yymsp[-1].minor.yy259, false, true );
                    p->destroy( yymsp[-3].minor.yy0 );
                  yy_destructor(yypParser,55,&yymsp[-2].minor);
  yy_destructor(yypParser,12,&yymsp[0].minor);
}
#line 3470 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 133: /* newfunc_lbr ::= QMARK expr_paren YIELD LBR */
#line 966 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy45 = p->function( yymsp[-3].minor.yy0->sloc,
                                    nullptr, yymsp[-2].minor.yy259, true, false );
                    p->destroy( yymsp[-3].minor.yy0 );
                  yy_destructor(yypParser,6,&yymsp[-1].minor);
  yy_destructor(yypParser,12,&yymsp[0].minor);
}
#line 3481 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 134: /* newfunc_lbr ::= PERIOD QMARK expr_paren YIELD LBR */
#line 972 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy45 = p->function( yymsp[-4].minor.yy0->sloc,
                                    nullptr, yymsp[-2].minor.yy259, true, true );
                    p->destroy( yymsp[-4].minor.yy0 );
                  yy_destructor(yypParser,55,&yymsp[-3].minor);
  yy_destructor(yypParser,6,&yymsp[-1].minor);
  yy_destructor(yypParser,12,&yymsp[0].minor);
}
#line 3493 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 136: /* expr_value ::= LBR RBR */
#line 985 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_new_table >( yymsp[-1].minor.yy0->sloc );
                    p->destroy( yymsp[-1].minor.yy0 );
                  yy_destructor(yypParser,11,&yymsp[0].minor);
}
#line 3502 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 137: /* expr_value ::= LBR keyval_list RBR */
#line 990 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = yymsp[-1].minor.yy191;
                    yygotominor.yy259->sloc = yymsp[-2].minor.yy0->sloc;
                    p->destroy( yymsp[-2].minor.yy0 );
                  yy_destructor(yypParser,11,&yymsp[0].minor);
}
#line 3512 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 139: /* expr_lbody ::= expr_lbody COMMA expr_value */
#line 1001 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    // Do not resolve.
                    yygotominor.yy259 = p->append( yymsp[-2].minor.yy259, yymsp[0].minor.yy259 );
                  yy_destructor(yypParser,17,&yymsp[-1].minor);
}
#line 3521 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 140: /* expr_final ::= ELLIPSIS */
#line 1008 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_expr_vararg >( yymsp[0].minor.yy0->sloc );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3529 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 141: /* expr_final ::= proto ELLIPSIS */
#line 1013 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    xec_expr_call* call = p->resolve_proto( yymsp[-1].minor.yy219 );
                    call->unpack = true;
                    yygotominor.yy259 = call;
                  yy_destructor(yypParser,56,&yymsp[0].minor);
}
#line 3539 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 142: /* expr_final ::= expr_call ELLIPSIS */
#line 1019 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy52->unpack = true;
                    yygotominor.yy259 = yymsp[-1].minor.yy52;
                  yy_destructor(yypParser,56,&yymsp[0].minor);
}
#line 3548 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 143: /* expr_final ::= expr_yield ELLIPSIS */
#line 1024 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy55->unpack = true;
                    yygotominor.yy259 = yymsp[-1].minor.yy55;
                  yy_destructor(yypParser,56,&yymsp[0].minor);
}
#line 3557 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 144: /* expr_final ::= proto YIELD ELLIPSIS */
#line 1029 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    xec_expr_call* call = p->resolve_proto( yymsp[-2].minor.yy219 );
                    call->yieldcall = true;
                    call->unpack = true;
                    yygotominor.yy259 = call;
                  yy_destructor(yypParser,6,&yymsp[-1].minor);
  yy_destructor(yypParser,56,&yymsp[0].minor);
}
#line 3569 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 145: /* expr_final ::= expr_call YIELD ELLIPSIS */
#line 1036 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-2].minor.yy52->yieldcall = true;
                    yymsp[-2].minor.yy52->unpack = true;
                    yygotominor.yy259 = yymsp[-2].minor.yy52;
                  yy_destructor(yypParser,6,&yymsp[-1].minor);
  yy_destructor(yypParser,56,&yymsp[0].minor);
}
#line 3580 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 146: /* expr_final ::= name LSQ RSQ ELLIPSIS */
#line 1042 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-3].minor.yy259 = p->resolve( yymsp[-3].minor.yy259 );
                    yygotominor.yy259 = p->alloc< xec_expr_unpack >( yymsp[-3].minor.yy259->sloc, yymsp[-3].minor.yy259 );
                  yy_destructor(yypParser,18,&yymsp[-2].minor);
  yy_destructor(yypParser,19,&yymsp[-1].minor);
  yy_destructor(yypParser,56,&yymsp[0].minor);
}
#line 3591 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 147: /* expr_final ::= proto LSQ RSQ ELLIPSIS */
#line 1047 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    xec_expr_call* call = p->resolve_proto( yymsp[-3].minor.yy219 );
                    yygotominor.yy259 = p->alloc< xec_expr_unpack >( call->sloc, call );
                  yy_destructor(yypParser,18,&yymsp[-2].minor);
  yy_destructor(yypParser,19,&yymsp[-1].minor);
  yy_destructor(yypParser,56,&yymsp[0].minor);
}
#line 3602 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 148: /* expr_final ::= expr_index LSQ RSQ ELLIPSIS */
      case 150: /* expr_final ::= expr_new LSQ RSQ ELLIPSIS */ yytestcase(yyruleno==150);
      case 152: /* expr_final ::= expr_postfix LSQ RSQ ELLIPSIS */ yytestcase(yyruleno==152);
#line 1052 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_expr_unpack >( yymsp[-3].minor.yy259->sloc, yymsp[-3].minor.yy259 );
                  yy_destructor(yypParser,18,&yymsp[-2].minor);
  yy_destructor(yypParser,19,&yymsp[-1].minor);
  yy_destructor(yypParser,56,&yymsp[0].minor);
}
#line 3614 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 149: /* expr_final ::= expr_yield LSQ RSQ ELLIPSIS */
#line 1056 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_expr_unpack >( yymsp[-3].minor.yy55->sloc, yymsp[-3].minor.yy55 );
                  yy_destructor(yypParser,18,&yymsp[-2].minor);
  yy_destructor(yypParser,19,&yymsp[-1].minor);
  yy_destructor(yypParser,56,&yymsp[0].minor);
}
#line 3624 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 151: /* expr_final ::= expr_call LSQ RSQ ELLIPSIS */
#line 1064 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_expr_unpack >( yymsp[-3].minor.yy52->sloc, yymsp[-3].minor.yy52 );
                  yy_destructor(yypParser,18,&yymsp[-2].minor);
  yy_destructor(yypParser,19,&yymsp[-1].minor);
  yy_destructor(yypParser,56,&yymsp[0].minor);
}
#line 3634 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 155: /* expr_list ::= expr_lbody COMMA expr_final */
      case 186: /* sexpr_list ::= sexpr_lbody COMMA expr_final */ yytestcase(yyruleno==186);
#line 1081 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->final( yymsp[-2].minor.yy259, yymsp[0].minor.yy259 );
                  yy_destructor(yypParser,17,&yymsp[-1].minor);
}
#line 3643 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 156: /* expr_assign ::= expr_list */
      case 182: /* sexpr_lbody ::= expr_nolbr */ yytestcase(yyruleno==182);
#line 1086 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[0].minor.yy259 = p->resolve( yymsp[0].minor.yy259 );
                    yygotominor.yy259 = yymsp[0].minor.yy259;
                }
#line 3652 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 157: /* expr_assign ::= expr_lbody assign_op expr_assign */
#line 1091 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-2].minor.yy259 = p->resolve( yymsp[-2].minor.yy259 );
                    yymsp[0].minor.yy259 = p->resolve( yymsp[0].minor.yy259 );
                    yygotominor.yy259 = p->assign( yymsp[-1].minor.yy19, yymsp[-2].minor.yy259, yymsp[0].minor.yy259 );
                    p->destroy( yymsp[-1].minor.yy19 );
                }
#line 3662 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 171: /* value_lbody ::= expr_value */
#line 1154 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[0].minor.yy259 = p->resolve( yymsp[0].minor.yy259 );
                    yygotominor.yy87 = p->alloc< xec_new_list >( -1 );
                    yygotominor.yy87->values.push_back( yymsp[0].minor.yy259 );
                }
#line 3671 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 172: /* value_lbody ::= value_lbody COMMA expr_value */
#line 1160 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[0].minor.yy259 = p->resolve( yymsp[0].minor.yy259 );
                    yygotominor.yy87 = yymsp[-2].minor.yy87;
                    yygotominor.yy87->values.push_back( yymsp[0].minor.yy259 );
                  yy_destructor(yypParser,17,&yymsp[-1].minor);
}
#line 3681 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 173: /* value_list ::= expr_final */
#line 1167 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy87 = p->alloc< xec_new_list >( -1 );
                    yygotominor.yy87->unpack = yymsp[0].minor.yy259;
                }
#line 3689 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 174: /* value_list ::= expr_final COMMA */
#line 1172 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy87 = p->alloc< xec_new_list >( -1 );
                    yygotominor.yy87->unpack = yymsp[-1].minor.yy259;
                  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 3698 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 175: /* value_list ::= value_lbody */
#line 1177 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy87 = yymsp[0].minor.yy87;
                }
#line 3705 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 176: /* value_list ::= value_lbody COMMA */
#line 1181 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy87 = yymsp[-1].minor.yy87;
                  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 3713 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 177: /* value_list ::= value_lbody COMMA expr_final */
#line 1185 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy87 = yymsp[-2].minor.yy87;
                    yygotominor.yy87->unpack = yymsp[0].minor.yy259;
                  yy_destructor(yypParser,17,&yymsp[-1].minor);
}
#line 3722 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 178: /* keyval_lbody ::= expr_value COLON expr_value */
#line 1192 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-2].minor.yy259   = p->resolve( yymsp[-2].minor.yy259 );
                    yymsp[0].minor.yy259 = p->resolve( yymsp[0].minor.yy259 );
                    yygotominor.yy191 = new xec_new_table( -1 );
                    yygotominor.yy191->elements.emplace_back( yymsp[-2].minor.yy259, yymsp[0].minor.yy259 );
                  yy_destructor(yypParser,13,&yymsp[-1].minor);
}
#line 3733 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 179: /* keyval_lbody ::= keyval_lbody COMMA expr_value COLON expr_value */
#line 1200 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-2].minor.yy259   = p->resolve( yymsp[-2].minor.yy259 );
                    yymsp[0].minor.yy259 = p->resolve( yymsp[0].minor.yy259 );
                    yygotominor.yy191 = yymsp[-4].minor.yy191;
                    yygotominor.yy191->elements.emplace_back( yymsp[-2].minor.yy259, yymsp[0].minor.yy259 );
                  yy_destructor(yypParser,17,&yymsp[-3].minor);
  yy_destructor(yypParser,13,&yymsp[-1].minor);
}
#line 3745 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 180: /* keyval_list ::= keyval_lbody */
#line 1208 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy191 = yymsp[0].minor.yy191;
                }
#line 3752 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 181: /* keyval_list ::= keyval_lbody COMMA */
#line 1212 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy191 = yymsp[-1].minor.yy191;
                  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 3760 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 183: /* sexpr_lbody ::= sexpr_lbody COMMA expr_value */
#line 1229 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[0].minor.yy259 = p->resolve( yymsp[0].minor.yy259 );
                    yygotominor.yy259 = p->append( yymsp[-2].minor.yy259, yymsp[0].minor.yy259 );
                  yy_destructor(yypParser,17,&yymsp[-1].minor);
}
#line 3769 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 188: /* sexpr_assign ::= sexpr_lbody assign_op expr_assign */
#line 1252 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[0].minor.yy259 = p->resolve( yymsp[0].minor.yy259 );
                    yygotominor.yy259 = p->assign( yymsp[-1].minor.yy19, yymsp[-2].minor.yy259, yymsp[0].minor.yy259 );
                    p->destroy( yymsp[-1].minor.yy19 );
                }
#line 3778 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 190: /* condition ::= VAR varname ASSIGN expr_list */
#line 1273 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[0].minor.yy259 = p->resolve( yymsp[0].minor.yy259 );
                    xec_expr_assign* assign = p->alloc< xec_expr_assign >(
                                    yymsp[-3].minor.yy0->sloc, XEC_KEYWORD_VAR );
                    assign->lvalue = p->declare_local( yymsp[-2].minor.yy240 );
                    assign->rvalue = yymsp[0].minor.yy259;
                    yygotominor.yy259 = assign;
                    p->destroy( yymsp[-3].minor.yy0 );
                  yy_destructor(yypParser,16,&yymsp[-1].minor);
}
#line 3792 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 191: /* condition ::= VAR varname_list ASSIGN expr_list */
#line 1283 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[0].minor.yy259 = p->resolve( yymsp[0].minor.yy259 );
                    xec_expr_assign_list* assign =
                            p->alloc< xec_expr_assign_list >(
                                    yymsp[-3].minor.yy0->sloc, XEC_KEYWORD_VAR );
                    p->declare_local_list( yymsp[-2].minor.yy283, &assign->lvalues );
                    assign->rvalues = yymsp[0].minor.yy259;
                    yygotominor.yy259 = assign;
                    p->destroy( yymsp[-3].minor.yy0 );
                  yy_destructor(yypParser,16,&yymsp[-1].minor);
}
#line 3807 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 193: /* stmt_list ::= stmt_list SEMICOLON */
#line 1302 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,114,&yymsp[-1].minor);
  yy_destructor(yypParser,14,&yymsp[0].minor);
}
#line 3815 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 194: /* stmt_list ::= stmt_list stmt */
#line 1305 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    p->statement( yymsp[0].minor.yy259 );
                  yy_destructor(yypParser,114,&yymsp[-1].minor);
}
#line 3823 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 195: /* stmt_list ::= stmt_list decl_object */
#line 1309 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,114,&yymsp[-1].minor);
  yy_destructor(yypParser,118,&yymsp[0].minor);
}
#line 3831 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 196: /* stmt_list ::= stmt_list decl_func */
#line 1312 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,114,&yymsp[-1].minor);
  yy_destructor(yypParser,122,&yymsp[0].minor);
}
#line 3839 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 197: /* stmt_list ::= stmt_list decl_var SEMICOLON */
#line 1315 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,114,&yymsp[-2].minor);
  yy_destructor(yypParser,124,&yymsp[-1].minor);
  yy_destructor(yypParser,14,&yymsp[0].minor);
}
#line 3848 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 198: /* stmt_list ::= stmt_list decl_noinit SEMICOLON */
#line 1318 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,114,&yymsp[-2].minor);
  yy_destructor(yypParser,125,&yymsp[-1].minor);
  yy_destructor(yypParser,14,&yymsp[0].minor);
}
#line 3857 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 199: /* stmt ::= stmt_lbr stmt_list RBR */
#line 1324 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = yymsp[-2].minor.yy268;
                    p->close_scope( yymsp[-2].minor.yy268->scope );
                  yy_destructor(yypParser,114,&yymsp[-1].minor);
  yy_destructor(yypParser,11,&yymsp[0].minor);
}
#line 3867 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 201: /* stmt_lbr ::= LBR */
#line 1334 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy268 = p->alloc< xec_stmt_block >( yymsp[0].minor.yy0->sloc );
                    yygotominor.yy268->scope = p->block_scope( yygotominor.yy268 );
                    yygotominor.yy268->scope->block = yygotominor.yy268;
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3877 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 202: /* stmt_reuse ::= stmt_lbr_ru stmt_list RBR */
#line 1344 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = yymsp[-2].minor.yy268;
                  yy_destructor(yypParser,114,&yymsp[-1].minor);
  yy_destructor(yypParser,11,&yymsp[0].minor);
}
#line 3886 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 204: /* stmt_lbr_ru ::= LBR */
#line 1353 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy268 = p->alloc< xec_stmt_block >( yymsp[0].minor.yy0->sloc );
                    p->get_scope()->block = yygotominor.yy268;
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3895 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 205: /* stmt_common ::= sexpr_assign SEMICOLON */
#line 1363 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = yymsp[-1].minor.yy259;
                  yy_destructor(yypParser,14,&yymsp[0].minor);
}
#line 3903 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 206: /* stmt_common ::= stmt_if LPN condition RPN stmt */
#line 1367 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-4].minor.yy188->condition = yymsp[-2].minor.yy259;
                    yymsp[-4].minor.yy188->iftrue    = yymsp[0].minor.yy259;
                    p->close_scope( yymsp[-4].minor.yy188->scope );
                    yygotominor.yy259 = yymsp[-4].minor.yy188;
                  yy_destructor(yypParser,7,&yymsp[-3].minor);
  yy_destructor(yypParser,10,&yymsp[-1].minor);
}
#line 3915 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 207: /* stmt_common ::= stmt_if LPN condition RPN stmt ELSE stmt */
#line 1375 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-6].minor.yy188->condition = yymsp[-4].minor.yy259;
                    yymsp[-6].minor.yy188->iftrue    = yymsp[-2].minor.yy259;
                    yymsp[-6].minor.yy188->iffalse   = yymsp[0].minor.yy259;
                    p->close_scope( yymsp[-6].minor.yy188->scope );
                    yygotominor.yy259 = yymsp[-6].minor.yy188;
                  yy_destructor(yypParser,7,&yymsp[-5].minor);
  yy_destructor(yypParser,10,&yymsp[-3].minor);
  yy_destructor(yypParser,2,&yymsp[-1].minor);
}
#line 3929 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 208: /* stmt_common ::= stmt_switch LPN condition RPN stmt_lbr_ru stmt_list RPN */
#line 1384 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-6].minor.yy267->value     = yymsp[-4].minor.yy259;
                    yymsp[-6].minor.yy267->body      = yymsp[-2].minor.yy268;
                    p->close_scope( yymsp[-6].minor.yy267->scope );
                    yygotominor.yy259 = yymsp[-6].minor.yy267;
                  yy_destructor(yypParser,7,&yymsp[-5].minor);
  yy_destructor(yypParser,10,&yymsp[-3].minor);
  yy_destructor(yypParser,114,&yymsp[-1].minor);
  yy_destructor(yypParser,10,&yymsp[0].minor);
}
#line 3943 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 209: /* stmt_common ::= stmt_while LPN condition RPN stmt_reuse */
#line 1392 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-4].minor.yy278->condition = yymsp[-2].minor.yy259;
                    yymsp[-4].minor.yy278->body      = yymsp[0].minor.yy259;
                    p->close_scope( yymsp[-4].minor.yy278->scope );
                    yygotominor.yy259 = yymsp[-4].minor.yy278;
                  yy_destructor(yypParser,7,&yymsp[-3].minor);
  yy_destructor(yypParser,10,&yymsp[-1].minor);
}
#line 3955 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 210: /* stmt_common ::= stmt_do stmt_reuse WHILE LPN expr_assign RPN SEMICOLON */
#line 1400 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-6].minor.yy208->body      = yymsp[-5].minor.yy259;
                    yymsp[-6].minor.yy208->condition = yymsp[-2].minor.yy259;
                    p->close_scope( yymsp[-6].minor.yy208->scope );
                    yygotominor.yy259 = yymsp[-6].minor.yy208;
                  yy_destructor(yypParser,69,&yymsp[-4].minor);
  yy_destructor(yypParser,7,&yymsp[-3].minor);
  yy_destructor(yypParser,10,&yymsp[-1].minor);
  yy_destructor(yypParser,14,&yymsp[0].minor);
}
#line 3969 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 211: /* stmt_common ::= stmt_foreach stmt_reuse */
#line 1407 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy237->body      = yymsp[0].minor.yy259;
                    p->close_scope( yymsp[-1].minor.yy237->scope );
                    yygotominor.yy259 = yymsp[-1].minor.yy237;
                }
#line 3978 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 212: /* stmt_common ::= stmt_for stmt_reuse */
#line 1413 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy16->body      = yymsp[0].minor.yy259;
                    p->close_scope( yymsp[-1].minor.yy16->scope );
                    yygotominor.yy259 = yymsp[-1].minor.yy16;
                }
#line 3987 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 213: /* stmt_common ::= stmt_using LPN condition RPN stmt_reuse */
#line 1420 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-4].minor.yy227->uvalue    = yymsp[-2].minor.yy259;
                    yymsp[-4].minor.yy227->body      = yymsp[0].minor.yy259;
                    p->close_scope( yymsp[-4].minor.yy227->scope );
                    yygotominor.yy259 = yymsp[-4].minor.yy227;
                  yy_destructor(yypParser,7,&yymsp[-3].minor);
  yy_destructor(yypParser,10,&yymsp[-1].minor);
}
#line 3999 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 215: /* stmt_common ::= DELETE expr_lbody SEMICOLON */
#line 1431 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    xec_stmt_delete* s;
                    yygotominor.yy259 = s = p->alloc< xec_stmt_delete >( yymsp[-2].minor.yy0->sloc );
                    p->delval_list( yymsp[-1].minor.yy259, &s->delvals );
                    p->destroy( yymsp[-2].minor.yy0 );
                  yy_destructor(yypParser,14,&yymsp[0].minor);
}
#line 4010 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 216: /* stmt_common ::= CASE expr_value COLON */
#line 1438 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy259 = p->resolve( yymsp[-1].minor.yy259 );
                    yygotominor.yy259 = p->alloc< xec_stmt_case >( yymsp[-2].minor.yy0->sloc, yymsp[-1].minor.yy259 );
                    p->destroy( yymsp[-2].minor.yy0 );
                  yy_destructor(yypParser,13,&yymsp[0].minor);
}
#line 4020 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 217: /* stmt_common ::= DEFAULT COLON */
#line 1444 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_stmt_case >( yymsp[-1].minor.yy0->sloc, nullptr );
                    p->destroy( yymsp[-1].minor.yy0 );
                  yy_destructor(yypParser,13,&yymsp[0].minor);
}
#line 4029 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 218: /* stmt_common ::= CONTINUE SEMICOLON */
#line 1449 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    xec_ast_node* target = p->continue_target( yymsp[-1].minor.yy0->sloc );
                    yygotominor.yy259 = p->alloc< xec_stmt_continue >( yymsp[-1].minor.yy0->sloc, target );
                    p->destroy( yymsp[-1].minor.yy0 );
                  yy_destructor(yypParser,14,&yymsp[0].minor);
}
#line 4039 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 219: /* stmt_common ::= BREAK SEMICOLON */
#line 1455 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    xec_ast_node* target = p->break_target( yymsp[-1].minor.yy0->sloc );
                    yygotominor.yy259 = p->alloc< xec_stmt_break >( yymsp[-1].minor.yy0->sloc, target );
                    p->destroy( yymsp[-1].minor.yy0 );
                  yy_destructor(yypParser,14,&yymsp[0].minor);
}
#line 4049 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 220: /* stmt_common ::= RETURN SEMICOLON */
#line 1461 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_stmt_return >( yymsp[-1].minor.yy0->sloc, nullptr );
                    p->destroy( yymsp[-1].minor.yy0 );
                  yy_destructor(yypParser,14,&yymsp[0].minor);
}
#line 4058 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 221: /* stmt_common ::= RETURN expr_list SEMICOLON */
#line 1466 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy259 = p->resolve( yymsp[-1].minor.yy259 );
                    yygotominor.yy259 = p->alloc< xec_stmt_return >( yymsp[-2].minor.yy0->sloc, yymsp[-1].minor.yy259 );
                    p->destroy( yymsp[-2].minor.yy0 );
                  yy_destructor(yypParser,14,&yymsp[0].minor);
}
#line 4068 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 222: /* stmt_common ::= token_yield SEMICOLON */
#line 1472 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_expr_yield >( yymsp[-1].minor.yy19->sloc, nullptr );
                    p->destroy( yymsp[-1].minor.yy19 );
                  yy_destructor(yypParser,14,&yymsp[0].minor);
}
#line 4077 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 223: /* stmt_common ::= token_yield expr_list SEMICOLON */
#line 1477 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy259 = p->resolve( yymsp[-1].minor.yy259 );
                    yygotominor.yy259 = p->alloc< xec_expr_yield >( yymsp[-2].minor.yy19->sloc, yymsp[-1].minor.yy259 );
                    p->destroy( yymsp[-2].minor.yy19 );
                  yy_destructor(yypParser,14,&yymsp[0].minor);
}
#line 4087 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 224: /* stmt_common ::= THROW expr_value SEMICOLON */
#line 1483 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy259 = p->resolve( yymsp[-1].minor.yy259 );
                    yygotominor.yy259 = p->alloc< xec_stmt_throw >( yymsp[-2].minor.yy0->sloc, yymsp[-1].minor.yy259 );
                    p->destroy( yymsp[-2].minor.yy0 );
                  yy_destructor(yypParser,14,&yymsp[0].minor);
}
#line 4097 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 225: /* stmt_if ::= IF */
#line 1493 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy188 = p->alloc< xec_stmt_if >( yymsp[0].minor.yy0->sloc );
                    yygotominor.yy188->scope = p->block_scope( yygotominor.yy188 );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 4106 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 226: /* stmt_switch ::= SWITCH */
#line 1500 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy267 = p->alloc< xec_stmt_switch >( yymsp[0].minor.yy0->sloc );
                    yygotominor.yy267->scope = p->block_scope( yygotominor.yy267 );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 4115 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 227: /* stmt_while ::= WHILE */
#line 1507 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy278 = p->alloc< xec_stmt_while >( yymsp[0].minor.yy0->sloc );
                    yygotominor.yy278->scope = p->block_scope( yygotominor.yy278 );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 4124 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 228: /* stmt_do ::= DO */
#line 1514 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy208 = p->alloc< xec_stmt_do >( yymsp[0].minor.yy0->sloc );
                    yygotominor.yy208->scope = p->block_scope( yygotominor.yy208 );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 4133 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 229: /* scope_for ::= FOR */
#line 1521 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    // open scope before we know the kind of statement.
                    yygotominor.yy218 = make_token_scope( yymsp[0].minor.yy0, p->block_scope( nullptr ) );
                }
#line 4141 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 230: /* stmt_foreach ::= scope_for LPN expr_lbody COLON expr_value RPN */
#line 1528 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy259 = p->resolve( yymsp[-1].minor.yy259 );
                    yygotominor.yy237 = p->alloc< xec_stmt_foreach >( yymsp[-5].minor.yy218.token->sloc );
                    yymsp[-5].minor.yy218.scope->node = yygotominor.yy237;
                    yygotominor.yy237->scope    = yymsp[-5].minor.yy218.scope;
                    p->lvalue_list( yymsp[-3].minor.yy259, &yygotominor.yy237->lvalues );
                    yygotominor.yy237->list     = yymsp[-1].minor.yy259;
                    p->destroy( yymsp[-5].minor.yy218.token );
                  yy_destructor(yypParser,7,&yymsp[-4].minor);
  yy_destructor(yypParser,13,&yymsp[-2].minor);
  yy_destructor(yypParser,10,&yymsp[0].minor);
}
#line 4157 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 231: /* stmt_foreach ::= scope_for LPN expr_lbody EACHKEY expr_value RPN */
#line 1539 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy259 = p->resolve( yymsp[-1].minor.yy259 );
                    yygotominor.yy237 = p->alloc< xec_stmt_foreach >( yymsp[-5].minor.yy218.token->sloc );
                    yymsp[-5].minor.yy218.scope->node = yygotominor.yy237;
                    yygotominor.yy237->scope    = yymsp[-5].minor.yy218.scope;
                    p->lvalue_list( yymsp[-3].minor.yy259, &yygotominor.yy237->lvalues );
                    yygotominor.yy237->list     = yymsp[-1].minor.yy259;
                    yygotominor.yy237->eachkey  = true;
                    p->destroy( yymsp[-5].minor.yy218.token );
                  yy_destructor(yypParser,7,&yymsp[-4].minor);
  yy_destructor(yypParser,80,&yymsp[-2].minor);
  yy_destructor(yypParser,10,&yymsp[0].minor);
}
#line 4174 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 232: /* stmt_foreach ::= scope_for LPN VAR varname COLON expr_value RPN */
#line 1551 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy259 = p->resolve( yymsp[-1].minor.yy259 );
                    yygotominor.yy237 = p->alloc< xec_stmt_foreach >( yymsp[-6].minor.yy218.token->sloc );
                    yymsp[-6].minor.yy218.scope->node = yygotominor.yy237;
                    yygotominor.yy237->scope    = yymsp[-6].minor.yy218.scope;
                    yygotominor.yy237->lvalues.push_back( p->declare_local( yymsp[-3].minor.yy240 ) );
                    yygotominor.yy237->list     = yymsp[-1].minor.yy259;
                    yygotominor.yy237->declare  = true;
                    p->destroy( yymsp[-6].minor.yy218.token );
                  yy_destructor(yypParser,7,&yymsp[-5].minor);
  yy_destructor(yypParser,15,&yymsp[-4].minor);
  yy_destructor(yypParser,13,&yymsp[-2].minor);
  yy_destructor(yypParser,10,&yymsp[0].minor);
}
#line 4192 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 233: /* stmt_foreach ::= scope_for LPN VAR varname_list COLON expr_value RPN */
#line 1563 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy259 = p->resolve( yymsp[-1].minor.yy259 );
                    yygotominor.yy237 = p->alloc< xec_stmt_foreach >( yymsp[-6].minor.yy218.token->sloc );
                    yymsp[-6].minor.yy218.scope->node = yygotominor.yy237;
                    yygotominor.yy237->scope    = yymsp[-6].minor.yy218.scope;
                    p->declare_local_list( yymsp[-3].minor.yy283, &yygotominor.yy237->lvalues );
                    yygotominor.yy237->list     = yymsp[-1].minor.yy259;
                    yygotominor.yy237->declare  = true;
                    p->destroy( yymsp[-6].minor.yy218.token );
                  yy_destructor(yypParser,7,&yymsp[-5].minor);
  yy_destructor(yypParser,15,&yymsp[-4].minor);
  yy_destructor(yypParser,13,&yymsp[-2].minor);
  yy_destructor(yypParser,10,&yymsp[0].minor);
}
#line 4210 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 234: /* stmt_foreach ::= scope_for LPN VAR varname EACHKEY expr_value RPN */
#line 1575 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy259 = p->resolve( yymsp[-1].minor.yy259 );
                    yygotominor.yy237 = p->alloc< xec_stmt_foreach >( yymsp[-6].minor.yy218.token->sloc );
                    yymsp[-6].minor.yy218.scope->node = yygotominor.yy237;
                    yygotominor.yy237->scope    = yymsp[-6].minor.yy218.scope;
                    yygotominor.yy237->lvalues.push_back( p->declare_local( yymsp[-3].minor.yy240 ) );
                    yygotominor.yy237->list     = yymsp[-1].minor.yy259;
                    yygotominor.yy237->eachkey  = true;
                    yygotominor.yy237->declare  = true;
                    p->destroy( yymsp[-6].minor.yy218.token );
                  yy_destructor(yypParser,7,&yymsp[-5].minor);
  yy_destructor(yypParser,15,&yymsp[-4].minor);
  yy_destructor(yypParser,80,&yymsp[-2].minor);
  yy_destructor(yypParser,10,&yymsp[0].minor);
}
#line 4229 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 235: /* stmt_foreach ::= scope_for LPN VAR varname_list EACHKEY expr_value RPN */
#line 1588 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy259 = p->resolve( yymsp[-1].minor.yy259 );
                    yygotominor.yy237 = p->alloc< xec_stmt_foreach >( yymsp[-6].minor.yy218.token->sloc );
                    yymsp[-6].minor.yy218.scope->node = yygotominor.yy237;
                    yygotominor.yy237->scope    = yymsp[-6].minor.yy218.scope;
                    p->declare_local_list( yymsp[-3].minor.yy283, &yygotominor.yy237->lvalues );
                    yygotominor.yy237->list     = yymsp[-1].minor.yy259;
                    yygotominor.yy237->eachkey  = true;
                    yygotominor.yy237->declare  = true;
                    p->destroy( yymsp[-6].minor.yy218.token );
                  yy_destructor(yypParser,7,&yymsp[-5].minor);
  yy_destructor(yypParser,15,&yymsp[-4].minor);
  yy_destructor(yypParser,80,&yymsp[-2].minor);
  yy_destructor(yypParser,10,&yymsp[0].minor);
}
#line 4248 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 236: /* stmt_for ::= scope_for LPN for_cond SEMICOLON for_expr SEMICOLON for_expr RPN */
#line 1604 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy16 = p->alloc< xec_stmt_for >( yymsp[-7].minor.yy218.token->sloc );
                    yymsp[-7].minor.yy218.scope->node = yygotominor.yy16;
                    yygotominor.yy16->scope        = yymsp[-7].minor.yy218.scope;
                    yygotominor.yy16->init         = yymsp[-5].minor.yy259;
                    yygotominor.yy16->condition    = yymsp[-3].minor.yy259;
                    yygotominor.yy16->update       = yymsp[-1].minor.yy259;
                    p->destroy( yymsp[-7].minor.yy218.token );
                  yy_destructor(yypParser,7,&yymsp[-6].minor);
  yy_destructor(yypParser,14,&yymsp[-4].minor);
  yy_destructor(yypParser,14,&yymsp[-2].minor);
  yy_destructor(yypParser,10,&yymsp[0].minor);
}
#line 4265 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 237: /* for_cond ::= */
      case 239: /* for_expr ::= */ yytestcase(yyruleno==239);
#line 1615 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = nullptr;
                }
#line 4273 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 241: /* stmt_using ::= USING */
#line 1633 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy227 = p->alloc< xec_stmt_using >( yymsp[0].minor.yy0->sloc );
                    yygotominor.yy227->scope = p->block_scope( yygotominor.yy227 );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 4282 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 242: /* stmt_try ::= try_catch */
#line 1643 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = yymsp[0].minor.yy224;
                }
#line 4289 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 243: /* stmt_try ::= try_catch FINALLY stmt */
      case 244: /* stmt_try ::= try_block FINALLY stmt */ yytestcase(yyruleno==244);
#line 1647 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-2].minor.yy224->fstmt = yymsp[0].minor.yy259;
                    yygotominor.yy259 = yymsp[-2].minor.yy224;
                  yy_destructor(yypParser,5,&yymsp[-1].minor);
}
#line 4299 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 245: /* try_block ::= TRY stmt */
#line 1658 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy224 = p->alloc< xec_stmt_try >( yymsp[-1].minor.yy0->sloc, yymsp[0].minor.yy259 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 4307 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 246: /* try_catch ::= try_block stmt_catch stmt_reuse */
      case 247: /* try_catch ::= try_catch stmt_catch stmt_reuse */ yytestcase(yyruleno==247);
#line 1664 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy256->body = yymsp[0].minor.yy259;
                    p->close_scope( yymsp[-1].minor.yy256->scope );
                    yymsp[-2].minor.yy224->clist.push_back( yymsp[-1].minor.yy256 );
                    yygotominor.yy224 = yymsp[-2].minor.yy224;
                }
#line 4318 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 248: /* scope_catch ::= CATCH */
#line 1679 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    // open scope here ready for declarations.
                    yygotominor.yy218 = make_token_scope( yymsp[0].minor.yy0, p->block_scope( nullptr ) );
                }
#line 4326 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 249: /* stmt_catch ::= scope_catch LPN COLON expr_simple RPN */
#line 1685 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy259 = p->resolve( yymsp[-1].minor.yy259 );
                    yygotominor.yy256 = p->alloc< xec_stmt_catch >( yymsp[-4].minor.yy218.token->sloc );
                    yymsp[-4].minor.yy218.scope->node = yygotominor.yy256;
                    yygotominor.yy256->proto    = yymsp[-1].minor.yy259;
                    p->destroy( yymsp[-4].minor.yy218.token );
                  yy_destructor(yypParser,7,&yymsp[-3].minor);
  yy_destructor(yypParser,13,&yymsp[-2].minor);
  yy_destructor(yypParser,10,&yymsp[0].minor);
}
#line 4340 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 250: /* stmt_catch ::= scope_catch LPN expr_value COLON expr_simple RPN */
#line 1694 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-3].minor.yy259 = p->resolve( yymsp[-3].minor.yy259 );
                    yymsp[-1].minor.yy259 = p->resolve( yymsp[-1].minor.yy259 );
                    yygotominor.yy256 = p->alloc< xec_stmt_catch >( yymsp[-5].minor.yy218.token->sloc );
                    yymsp[-5].minor.yy218.scope->node = yygotominor.yy256;
                    yygotominor.yy256->lvalue   = p->lvalue( yymsp[-3].minor.yy259 );
                    yygotominor.yy256->proto    = yymsp[-1].minor.yy259;
                    p->destroy( yymsp[-5].minor.yy218.token );
                  yy_destructor(yypParser,7,&yymsp[-4].minor);
  yy_destructor(yypParser,13,&yymsp[-2].minor);
  yy_destructor(yypParser,10,&yymsp[0].minor);
}
#line 4356 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 251: /* stmt_catch ::= scope_catch LPN VAR varname COLON expr_simple RPN */
#line 1705 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy259 = p->resolve( yymsp[-1].minor.yy259 );
                    yygotominor.yy256 = p->alloc< xec_stmt_catch >( yymsp[-6].minor.yy218.token->sloc );
                    yymsp[-6].minor.yy218.scope->node = yygotominor.yy256;
                    yygotominor.yy256->lvalue   = p->declare_local( yymsp[-3].minor.yy240 );
                    yygotominor.yy256->proto    = yymsp[-1].minor.yy259;
                    yygotominor.yy256->declare  = true;
                    p->destroy( yymsp[-6].minor.yy218.token );
                  yy_destructor(yypParser,7,&yymsp[-5].minor);
  yy_destructor(yypParser,15,&yymsp[-4].minor);
  yy_destructor(yypParser,13,&yymsp[-2].minor);
  yy_destructor(yypParser,10,&yymsp[0].minor);
}
#line 4373 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 252: /* stmt_catch ::= scope_catch LPN expr_value RPN */
#line 1715 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy259 = p->resolve( yymsp[-1].minor.yy259 );
                    yygotominor.yy256 = p->alloc< xec_stmt_catch >( yymsp[-3].minor.yy218.token->sloc );
                    yymsp[-3].minor.yy218.scope->node = yygotominor.yy256;
                    yygotominor.yy256->lvalue   = p->lvalue( yymsp[-1].minor.yy259 );
                    yygotominor.yy256->proto    = nullptr;
                    p->destroy( yymsp[-3].minor.yy218.token );
                  yy_destructor(yypParser,7,&yymsp[-2].minor);
  yy_destructor(yypParser,10,&yymsp[0].minor);
}
#line 4387 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 253: /* stmt_catch ::= scope_catch LPN VAR varname RPN */
#line 1724 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy256 = p->alloc< xec_stmt_catch >( yymsp[-4].minor.yy218.token->sloc );
                    yymsp[-4].minor.yy218.scope->node = yygotominor.yy256;
                    yygotominor.yy256->lvalue   = p->declare_local( yymsp[-1].minor.yy240 );
                    yygotominor.yy256->proto    = nullptr;
                    yygotominor.yy256->declare  = true;
                    p->destroy( yymsp[-4].minor.yy218.token );
                  yy_destructor(yypParser,7,&yymsp[-3].minor);
  yy_destructor(yypParser,15,&yymsp[-2].minor);
  yy_destructor(yypParser,10,&yymsp[0].minor);
}
#line 4402 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      default:
        break;
  };
  yygoto = yyRuleInfo[yyruleno].lhs;
  yysize = yyRuleInfo[yyruleno].nrhs;
  yypParser->yyidx -= yysize;
  yyact = yy_find_reduce_action(yymsp[-yysize].stateno,(YYCODETYPE)yygoto);
  if( yyact < YYNSTATE ){
#ifdef NDEBUG
    /* If we are not debugging and the reduce action popped at least
    ** one element off the stack, then we can push the new element back
    ** onto the stack here, and skip the stack overflow test in yy_shift().
    ** That gives a significant speed improvement. */
    if( yysize ){
      yypParser->yyidx++;
      yymsp -= yysize-1;
      yymsp->stateno = (YYACTIONTYPE)yyact;
      yymsp->major = (YYCODETYPE)yygoto;
      yymsp->minor = yygotominor;
    }else
#endif
    {
      yy_shift(yypParser,yyact,yygoto,&yygotominor);
    }
  }else{
    assert( yyact == YYNSTATE + YYNRULE + 1 );
    yy_accept(yypParser);
  }
}

/*
** The following code executes when the parse fails
*/
#ifndef YYNOERRORRECOVERY
static void yy_parse_failed(
  yyParser *yypParser           /* The parser */
){
  XecParseARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sFail!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser fails */
  XecParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}
#endif /* YYNOERRORRECOVERY */

/*
** The following code executes when a syntax error first occurs.
*/
static void yy_syntax_error(
  yyParser *yypParser,           /* The parser */
  int yymajor,                   /* The major type of the error token */
  YYMINORTYPE yyminor            /* The minor type of the error token */
){
  XecParseARG_FETCH;
#define TOKEN (yyminor.yy0)
#line 1755 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"

    p->get_script()->diagnostic( TOKEN->sloc,
            "unexpected %s", TOKEN->get_spelling().c_str() );
#line 4468 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
  XecParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/*
** The following is executed when the parser accepts
*/
static void yy_accept(
  yyParser *yypParser           /* The parser */
){
  XecParseARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sAccept!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser accepts */
  XecParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/* The main parser program.
** The first argument is a pointer to a structure obtained from
** "XecParseAlloc" which describes the current state of the parser.
** The second argument is the major token number.  The third is
** the minor token.  The fourth optional argument is whatever the
** user wants (and specified in the grammar) and is available for
** use by the action routines.
**
** Inputs:
** <ul>
** <li> A pointer to the parser (an opaque structure.)
** <li> The major token number.
** <li> The minor token number.
** <li> An option argument of a grammar-specified type.
** </ul>
**
** Outputs:
** None.
*/
void XecParse(
  void *yyp,                   /* The parser */
  int yymajor,                 /* The major token code number */
  XecParseTOKENTYPE yyminor       /* The value for the token */
  XecParseARG_PDECL               /* Optional %extra_argument parameter */
){
  YYMINORTYPE yyminorunion;
  int yyact;            /* The parser action. */
  int yyendofinput;     /* True if we are at the end of input */
#ifdef YYERRORSYMBOL
  int yyerrorhit = 0;   /* True if yymajor has invoked an error */
#endif
  yyParser *yypParser;  /* The parser */

  /* (re)initialize the parser, if necessary */
  yypParser = (yyParser*)yyp;
  if( yypParser->yyidx<0 ){
#if YYSTACKDEPTH<=0
    if( yypParser->yystksz <=0 ){
      /*memset(&yyminorunion, 0, sizeof(yyminorunion));*/
      yyminorunion = yyzerominor;
      yyStackOverflow(yypParser, &yyminorunion);
      return;
    }
#endif
    yypParser->yyidx = 0;
    yypParser->yyerrcnt = -1;
    yypParser->yystack[0].stateno = 0;
    yypParser->yystack[0].major = 0;
  }
  yyminorunion.yy0 = yyminor;
  yyendofinput = (yymajor==0);
  XecParseARG_STORE;

#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sInput %s\n",yyTracePrompt,yyTokenName[yymajor]);
  }
#endif

  do{
    yyact = yy_find_shift_action(yypParser,(YYCODETYPE)yymajor);
    if( yyact<YYNSTATE ){
      assert( !yyendofinput );  /* Impossible to shift the $ token */
      yy_shift(yypParser,yyact,yymajor,&yyminorunion);
      yypParser->yyerrcnt--;
      yymajor = YYNOCODE;
    }else if( yyact < YYNSTATE + YYNRULE ){
      yy_reduce(yypParser,yyact-YYNSTATE);
    }else{
      assert( yyact == YY_ERROR_ACTION );
#ifdef YYERRORSYMBOL
      int yymx;
#endif
#ifndef NDEBUG
      if( yyTraceFILE ){
        fprintf(yyTraceFILE,"%sSyntax Error!\n",yyTracePrompt);
      }
#endif
#ifdef YYERRORSYMBOL
      /* A syntax error has occurred.
      ** The response to an error depends upon whether or not the
      ** grammar defines an error token "ERROR".  
      **
      ** This is what we do if the grammar does define ERROR:
      **
      **  * Call the %syntax_error function.
      **
      **  * Begin popping the stack until we enter a state where
      **    it is legal to shift the error symbol, then shift
      **    the error symbol.
      **
      **  * Set the error count to three.
      **
      **  * Begin accepting and shifting new tokens.  No new error
      **    processing will occur until three tokens have been
      **    shifted successfully.
      **
      */
      if( yypParser->yyerrcnt<0 ){
        yy_syntax_error(yypParser,yymajor,yyminorunion);
      }
      yymx = yypParser->yystack[yypParser->yyidx].major;
      if( yymx==YYERRORSYMBOL || yyerrorhit ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE,"%sDiscard input token %s\n",
             yyTracePrompt,yyTokenName[yymajor]);
        }
#endif
        yy_destructor(yypParser, (YYCODETYPE)yymajor,&yyminorunion);
        yymajor = YYNOCODE;
      }else{
         while(
          yypParser->yyidx >= 0 &&
          yymx != YYERRORSYMBOL &&
          (yyact = yy_find_reduce_action(
                        yypParser->yystack[yypParser->yyidx].stateno,
                        YYERRORSYMBOL)) >= YYNSTATE
        ){
          yy_pop_parser_stack(yypParser);
        }
        if( yypParser->yyidx < 0 || yymajor==0 ){
          yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
          yy_parse_failed(yypParser);
          yymajor = YYNOCODE;
        }else if( yymx!=YYERRORSYMBOL ){
          YYMINORTYPE u2;
          u2.YYERRSYMDT = 0;
          yy_shift(yypParser,yyact,YYERRORSYMBOL,&u2);
        }
      }
      yypParser->yyerrcnt = 3;
      yyerrorhit = 1;
#elif defined(YYNOERRORRECOVERY)
      /* If the YYNOERRORRECOVERY macro is defined, then do not attempt to
      ** do any kind of error recovery.  Instead, simply invoke the syntax
      ** error routine and continue going as if nothing had happened.
      **
      ** Applications can set this macro (for example inside %include) if
      ** they intend to abandon the parse upon the first syntax error seen.
      */
      yy_syntax_error(yypParser,yymajor,yyminorunion);
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      yymajor = YYNOCODE;
      
#else  /* YYERRORSYMBOL is not defined */
      /* This is what we do if the grammar does not define ERROR:
      **
      **  * Report an error message, and throw away the input token.
      **
      **  * If the input token is $, then fail the parse.
      **
      ** As before, subsequent error messages are suppressed until
      ** three input tokens have been successfully shifted.
      */
      if( yypParser->yyerrcnt<=0 ){
        yy_syntax_error(yypParser,yymajor,yyminorunion);
      }
      yypParser->yyerrcnt = 3;
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      if( yyendofinput ){
        yy_parse_failed(yypParser);
      }
      yymajor = YYNOCODE;
#endif
    }
  }while( yymajor!=YYNOCODE && yypParser->yyidx>=0 );
  return;
}
