/* Driver template for the LEMON parser generator.
** The author disclaims copyright to this source code.
*/
/* First off, code is included that follows the "include" declaration
** in the input grammar file. */
#include <stdio.h>
#line 19 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"


#include <assert.h>
#include "xec_parser.h"
#include "xec_token.h"
#include "xec_ast.h"


struct xec_token_scope
{
    xec_token*      token;
    xec_ast_scope*  scope;
};


inline xec_token_scope make_token_scope(
                xec_token* token, xec_ast_scope* scope )
{
    xec_token_scope result;
    result.token = token;
    result.scope = scope;
    return result;
}


#line 77 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"



void xec_parser::destroy( xec_token* token )
{
    token->~xec_token();
    recycle_tokens.push_back( token );
}


#line 45 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
/* Next is all token values, in a form suitable for use by makeheaders.
** This section will be null unless lemon is run with the -m switch.
*/
/* 
** These constants (all generated automatically by the parser generator)
** specify the various kinds of tokens (terminals) that the parser
** understands. 
**
** Each symbol here is a terminal symbol in the grammar.
*/
/* Make sure the INTERFACE macro is defined.
*/
#ifndef INTERFACE
# define INTERFACE 1
#endif
/* The next thing included is series of defines which control
** various aspects of the generated parser.
**    YYCODETYPE         is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 terminals
**                       and nonterminals.  "int" is used otherwise.
**    YYNOCODE           is a number of type YYCODETYPE which corresponds
**                       to no legal terminal or nonterminal number.  This
**                       number is used to fill in empty slots of the hash 
**                       table.
**    YYFALLBACK         If defined, this indicates that one or more tokens
**                       have fall-back values which should be used if the
**                       original value of the token will not parse.
**    YYACTIONTYPE       is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 rules and
**                       states combined.  "int" is used otherwise.
**    XecParseTOKENTYPE     is the data type used for minor tokens given 
**                       directly to the parser from the tokenizer.
**    YYMINORTYPE        is the data type used for all minor tokens.
**                       This is typically a union of many types, one of
**                       which is XecParseTOKENTYPE.  The entry in the union
**                       for base tokens is called "yy0".
**    YYSTACKDEPTH       is the maximum depth of the parser's stack.  If
**                       zero the stack is dynamically sized using realloc()
**    XecParseARG_SDECL     A static variable declaration for the %extra_argument
**    XecParseARG_PDECL     A parameter declaration for the %extra_argument
**    XecParseARG_STORE     Code to store %extra_argument into yypParser
**    XecParseARG_FETCH     Code to extract %extra_argument from yypParser
**    YYNSTATE           the combined number of states.
**    YYNRULE            the number of rules in the grammar
**    YYERRORSYMBOL      is the code number of the error symbol.  If not
**                       defined, then do no error processing.
*/
#define YYCODETYPE unsigned char
#define YYNOCODE 157
#define YYACTIONTYPE unsigned short int
#define XecParseTOKENTYPE  xec_token* 
typedef union {
  int yyinit;
  XecParseTOKENTYPE yy0;
  xec_stmt_while* yy6;
  xec_stmt_block* yy36;
  xec_stmt_do* yy56;
  xec_stmt_for* yy57;
  xec_token* yy91;
  xec_new_list* yy92;
  xec_stmt_using_scope* yy104;
  xec_stmt_catch* yy184;
  xec_ast_node* yy191;
  xec_stmt_switch* yy199;
  xec_stmt_if* yy208;
  xec_stmt_foreach* yy213;
  xec_token_scope yy218;
  xec_stmt_try* yy236;
  xec_new_table* yy287;
} YYMINORTYPE;
#ifndef YYSTACKDEPTH
#define YYSTACKDEPTH 100
#endif
#define XecParseARG_SDECL  xec_parser* p ;
#define XecParseARG_PDECL , xec_parser* p 
#define XecParseARG_FETCH  xec_parser* p  = yypParser->p 
#define XecParseARG_STORE yypParser->p  = p 
#define YYNSTATE 497
#define YYNRULE 244
#define YY_NO_ACTION      (YYNSTATE+YYNRULE+2)
#define YY_ACCEPT_ACTION  (YYNSTATE+YYNRULE+1)
#define YY_ERROR_ACTION   (YYNSTATE+YYNRULE)

/* The yyzerominor constant is used to initialize instances of
** YYMINORTYPE objects to zero. */
static const YYMINORTYPE yyzerominor = { 0 };

/* Define the yytestcase() macro to be a no-op if is not already defined
** otherwise.
**
** Applications can choose to define yytestcase() in the %include section
** to a macro that can assist in verifying code coverage.  For production
** code the yytestcase() macro should be turned off.  But it is useful
** for testing.
*/
#ifndef yytestcase
# define yytestcase(X)
#endif


/* Next are the tables used to determine what action to take based on the
** current state and lookahead token.  These tables are used to implement
** functions that take a state number and lookahead value and return an
** action integer.  
**
** Suppose the action integer is N.  Then the action is determined as
** follows
**
**   0 <= N < YYNSTATE                  Shift N.  That is, push the lookahead
**                                      token onto the stack and goto state N.
**
**   YYNSTATE <= N < YYNSTATE+YYNRULE   Reduce by rule N-YYNSTATE.
**
**   N == YYNSTATE+YYNRULE              A syntax error has occurred.
**
**   N == YYNSTATE+YYNRULE+1            The parser accepts its input.
**
**   N == YYNSTATE+YYNRULE+2            No such action.  Denotes unused
**                                      slots in the yy_action[] table.
**
** The action table is constructed as a single large table named yy_action[].
** Given state S and lookahead X, the action is computed as
**
**      yy_action[ yy_shift_ofst[S] + X ]
**
** If the index value yy_shift_ofst[S]+X is out of range or if the value
** yy_lookahead[yy_shift_ofst[S]+X] is not equal to X or if yy_shift_ofst[S]
** is equal to YY_SHIFT_USE_DFLT, it means that the action is not in the table
** and that yy_default[S] should be used instead.  
**
** The formula above is for computing the action when the lookahead is
** a terminal symbol.  If the lookahead is a non-terminal (as occurs after
** a reduce action) then the yy_reduce_ofst[] array is used in place of
** the yy_shift_ofst[] array and YY_REDUCE_USE_DFLT is used in place of
** YY_SHIFT_USE_DFLT.
**
** The following are the tables generated in this section:
**
**  yy_action[]        A single table containing all actions.
**  yy_lookahead[]     A table containing the lookahead for each entry in
**                     yy_action.  Used to detect hash collisions.
**  yy_shift_ofst[]    For each state, the offset into yy_action for
**                     shifting terminals.
**  yy_reduce_ofst[]   For each state, the offset into yy_action for
**                     shifting non-terminals after a reduce.
**  yy_default[]       Default action for each state.
*/
static const YYACTIONTYPE yy_action[] = {
 /*     0 */   139,  383,  245,  247,  249,   12,  265,   14,   13,   24,
 /*    10 */   127,  128,  102,  461,   33,   25,  360,  339,  150,  147,
 /*    20 */   134,  459,  142,   36,  427,  175,  460,   71,  243,  244,
 /*    30 */   144,   10,  167,  312,   55,  155,  163,  149,  166,  400,
 /*    40 */   191,  384,  154,  172,  169,  199,  200,  202,  204,  145,
 /*    50 */   215,  216,  177,  444,  141,  140,  103,  448,  132,  449,
 /*    60 */   242,  392,  274,  391,  454,  101,  329,  138,  245,  247,
 /*    70 */   249,   12,  265,   14,   13,   24,  127,  128,  104,   84,
 /*    80 */    33,   25,   38,  240,  150,  147,  234,  459,  142,   48,
 /*    90 */   427,  174,  460,  492,  243,  244,  144,  480,  167,  421,
 /*   100 */    73,  155,  163,  149,  166,  400,  191,  384,  154,  172,
 /*   110 */   169,  199,  200,  202,  204,  145,  215,  216,  177,  444,
 /*   120 */   141,  140,   45,  448,  132,  449,  242,  105,  106,  107,
 /*   130 */   310,  408,  329,  139,  359,  245,  247,  249,   12,  265,
 /*   140 */    14,   13,   24,  127,  128,  482,   82,   33,   25,  411,
 /*   150 */     9,  150,  147,  230,  459,  142,   39,  427,  184,  460,
 /*   160 */   495,  243,  244,  144,  313,  167,   90,   64,  155,  163,
 /*   170 */   149,  166,  400,  191,  384,  154,  172,  169,  199,  200,
 /*   180 */   202,  204,  145,  215,  216,  177,  444,  141,  140,   89,
 /*   190 */   448,  132,  449,  242,   30,  461,  450,  454,    3,  329,
 /*   200 */   138,  245,  247,  249,   12,  265,   14,   13,   24,  127,
 /*   210 */   128,    5,  461,   33,   25,  419,  171,  150,  147,  134,
 /*   220 */   459,  142,   36,  427,  175,  460,   81,  243,  244,  144,
 /*   230 */   164,  167,  120,   80,  155,  163,  149,  166,  400,  191,
 /*   240 */   384,  154,  172,  169,  199,  200,  202,  204,  145,  215,
 /*   250 */   216,  177,  444,  141,  140,  363,  448,  132,  449,  242,
 /*   260 */   121,  411,    8,  310,  319,  329,  138,  245,  247,  249,
 /*   270 */    12,  265,   14,   13,   24,  127,  128,  742,    4,   33,
 /*   280 */    25,  412,  274,  150,  147,  330,  459,  142,   47,  427,
 /*   290 */   190,  460,  324,  243,  244,  144,  380,  167,    6,   77,
 /*   300 */   155,  163,  149,  166,  400,  191,  384,  154,  172,  169,
 /*   310 */   199,  200,  202,  204,  145,  215,  216,  177,  444,  141,
 /*   320 */   140,  361,  448,  132,  449,  242,    1,  109,  108,  310,
 /*   330 */   317,  329,  138,  245,  247,  249,   12,  265,   14,   13,
 /*   340 */    24,  127,  128,   88,   79,   33,   25,  334,  490,  150,
 /*   350 */   147,    2,  459,  142,   44,  427,  190,  460,   72,  243,
 /*   360 */   244,  144,  332,  167,  157,   77,  155,  163,  149,  166,
 /*   370 */   400,  191,  384,  154,  172,  169,  199,  200,  202,  204,
 /*   380 */   145,  215,  216,  177,  444,  141,  140,  331,  448,  132,
 /*   390 */   449,  242,   38,  240,  452,  310,  323,  329,  138,  245,
 /*   400 */   247,  249,   12,  265,   14,   13,   24,  127,  128,  397,
 /*   410 */   396,   33,   25,  320,  380,  150,  147,  312,  459,  142,
 /*   420 */    39,  427,  184,  460,   83,  243,  244,  144,   41,  167,
 /*   430 */   183,   61,  155,  163,  149,  166,  400,  191,  384,  154,
 /*   440 */   172,  169,  199,  200,  202,  204,  145,  215,  216,  177,
 /*   450 */   444,  141,  140,  143,  448,  132,  449,  242,  180,  484,
 /*   460 */   185,  310,  403,  329,  139,  493,  245,  247,  249,   12,
 /*   470 */   265,   14,   13,   24,  127,  128,   37,  333,   33,   25,
 /*   480 */    87,  378,  150,  147,  232,  459,  142,   42,  427,  179,
 /*   490 */   460,   65,  243,  244,  144,  279,  167,  176,   85,  155,
 /*   500 */   163,  149,  166,  400,  191,  384,  154,  172,  169,  199,
 /*   510 */   200,  202,  204,  145,  215,  216,  177,  444,  141,  140,
 /*   520 */   461,  448,  132,  449,  242,  491,   31,  477,  454,  485,
 /*   530 */   329,  138,  245,  247,  249,   12,  265,   14,   13,   24,
 /*   540 */   127,  128,   29,   66,   33,   25,   67,  352,  150,  147,
 /*   550 */   321,  459,  142,   46,  427,  175,  460,   69,  243,  244,
 /*   560 */   144,   68,  167,  399,   80,  155,  163,  149,  166,  400,
 /*   570 */   191,  384,  154,  172,  169,  199,  200,  202,  204,  145,
 /*   580 */   215,  216,  177,  444,  141,  140,   50,  448,  132,  449,
 /*   590 */   242,  414,  466,  367,  310,  413,  329,  139,  425,  245,
 /*   600 */   247,  249,   12,  265,   14,   13,   24,  127,  128,  458,
 /*   610 */   404,   33,   25,  462,  393,  150,  147,  374,  459,  142,
 /*   620 */    44,  427,  190,  460,   63,  243,  244,  144,  464,  167,
 /*   630 */   335,   59,  155,  163,  149,  166,  400,  191,  384,  154,
 /*   640 */   172,  169,  199,  200,  202,  204,  145,  215,  216,  177,
 /*   650 */   444,  141,  140,   20,  448,  132,  449,  242,  465,   15,
 /*   660 */   479,  454,  139,  329,  245,  247,  249,   12,  265,   14,
 /*   670 */    13,   24,  127,  128,  428,   22,   33,   25,  406,  345,
 /*   680 */   150,  147,  416,  459,  142,   48,  427,  174,  460,   76,
 /*   690 */   243,  244,  144,  135,  167,   21,   60,  155,  163,  149,
 /*   700 */   166,  400,  191,  384,  154,  172,  169,  199,  200,  202,
 /*   710 */   204,  145,  215,  216,  177,  444,  141,  140,  401,  448,
 /*   720 */   132,  449,  242,   19,  382,  386,  454,  139,  329,  245,
 /*   730 */   247,  249,   12,  265,   14,   13,   24,  127,  128,  252,
 /*   740 */   376,   33,   25,   27,  254,  150,  147,  371,  459,  142,
 /*   750 */   364,  427,  315,  460,  349,  243,  244,  144,   17,  167,
 /*   760 */   337,  326,  155,  163,  149,  166,  400,  191,  384,  154,
 /*   770 */   172,  169,  199,  200,  202,  204,  145,  215,  216,  177,
 /*   780 */   444,  141,  140,  325,  448,  132,  449,  242,  328,  314,
 /*   790 */   389,  454,  336,  329,  138,  245,  247,  249,   12,  265,
 /*   800 */    14,   13,   24,  127,  128,  311,  338,   33,   25,  488,
 /*   810 */   340,  150,  147,  475,  459,  142,  342,  427,  463,  460,
 /*   820 */   346,  243,  244,  144,  457,  167,  350,  426,  155,  163,
 /*   830 */   149,  166,  400,  191,  384,  154,  172,  169,  199,  200,
 /*   840 */   202,  204,  145,  215,  216,  177,  444,  141,  140,  353,
 /*   850 */   448,  132,  449,  242,   51,   23,  417,  310,  398,  329,
 /*   860 */   138,  245,  247,  249,   12,  265,   14,   13,   24,  127,
 /*   870 */   128,  415,  365,   33,   25,  368,  221,  150,  147,  372,
 /*   880 */   459,  142,   18,  427,  375,  460,  124,  243,  244,  144,
 /*   890 */    28,  167,   16,   32,  155,  163,  149,  166,  400,  191,
 /*   900 */   384,  154,  172,  169,  199,  200,  202,  204,  145,  215,
 /*   910 */   216,  177,  444,  141,  140,  125,  448,  132,  449,  242,
 /*   920 */   381,   52,  743,  310,  251,  329,  354,  743,   11,  743,
 /*   930 */   743,  241,  273,   30,  461,  231,  743,  453,  455,  123,
 /*   940 */   456,  134,  743,  743,   34,  743,  129,  422,  409,  407,
 /*   950 */   405,  402,  113,  111,  117,  115,  119,  114,  743,  162,
 /*   960 */   158,  112,  118,  116,  110,  227,  162,  158,  743,   36,
 /*   970 */   743,  221,  427,  160,  362,  126,  170,  165,  156,  159,
 /*   980 */   160,  228,  472,  170,  165,  156,  159,  400,  191,  384,
 /*   990 */   154,  172,  169,  199,  203,  356,   54,   86,  259,  260,
 /*  1000 */   261,   35,   62,  355,  357,  358,  497,  354,  195,   11,
 /*  1010 */    30,  461,  241,  273,   30,  461,  231,  743,  743,  455,
 /*  1020 */   123,  456,  134,  129,  743,   34,  743,  129,  422,  409,
 /*  1030 */   407,  405,  402,  113,  111,  117,  115,  119,  114,  743,
 /*  1040 */   162,  158,  743,  743,  743,  743,  222,  162,  158,  743,
 /*  1050 */   743,  743,  743,  427,  160,  743,  743,  170,  165,  156,
 /*  1060 */   159,  160,  228,  472,  170,  165,  156,  159,  400,  191,
 /*  1070 */   384,  154,  172,  169,  201,  743,  356,   54,   86,  259,
 /*  1080 */   260,  261,   35,   62,  355,  357,  358,  354,  743,   11,
 /*  1090 */   743,  743,  241,  273,   30,  461,  231,  743,  322,  455,
 /*  1100 */   123,  456,  134,  743,  743,   34,  743,  129,  422,  409,
 /*  1110 */   407,  405,  402,  113,  111,  117,  115,  119,  114,  743,
 /*  1120 */   162,  158,  743,  743,  743,  743,  276,  162,  158,  743,
 /*  1130 */   743,  743,  743,  427,  160,  743,  743,  170,  165,  156,
 /*  1140 */   159,  160,  228,  472,  170,  165,  156,  159,  400,  191,
 /*  1150 */   384,  154,  172,  168,  743,  743,  356,   54,   86,  259,
 /*  1160 */   260,  261,   35,   62,  355,  357,  358,  354,  743,   11,
 /*  1170 */   743,  743,  241,  273,   30,  461,  231,  743,  451,  455,
 /*  1180 */   123,  456,  134,  743,  743,   34,  743,  129,  422,  409,
 /*  1190 */   407,  405,  402,  113,  111,  117,  115,  119,  114,  743,
 /*  1200 */   162,  158,  743,  743,  743,  743,  278,  162,  158,  743,
 /*  1210 */   743,  743,  743,  427,  160,  743,  743,  170,  165,  156,
 /*  1220 */   159,  160,  228,  472,  170,  165,  156,  159,  400,  191,
 /*  1230 */   384,  154,  182,  743,  743,  743,  356,   54,   86,  259,
 /*  1240 */   260,  261,   35,   62,  355,  357,  358,  354,  743,   11,
 /*  1250 */   743,  743,  241,  273,   30,  461,  231,  743,  494,  455,
 /*  1260 */   123,  456,  134,  743,  743,   34,  743,  129,  422,  409,
 /*  1270 */   407,  405,  402,  113,  111,  117,  115,  119,  114,  743,
 /*  1280 */   162,  158,  743,  743,  743,  743,  189,  162,  158,  743,
 /*  1290 */   743,  743,  743,  427,  160,  743,  743,  170,  165,  156,
 /*  1300 */   159,  160,  228,  472,  170,  165,  156,  159,  400,  191,
 /*  1310 */   384,  154,  181,  743,  743,  743,  356,   54,   86,  259,
 /*  1320 */   260,  261,   35,   62,  355,  357,  358,  354,  743,   11,
 /*  1330 */   743,  743,  241,  273,   30,  461,  231,  487,  743,  455,
 /*  1340 */   123,  456,  134,  743,  743,   34,  743,  129,  422,  409,
 /*  1350 */   407,  405,  402,  113,  111,  117,  115,  119,  114,  281,
 /*  1360 */   743,   40,  195,  186,   30,  461,  324,  162,  158,  316,
 /*  1370 */   743,  743,   58,  427,  743,  743,  743,  129,  743,  743,
 /*  1380 */   743,  160,  228,  472,  170,  165,  156,  159,  400,  191,
 /*  1390 */   384,  154,  178,  743,  743,  743,  356,   54,   86,  259,
 /*  1400 */   260,  261,   35,   62,  355,  357,  358,  354,  743,   11,
 /*  1410 */   418,  743,  241,  273,   30,  461,  231,  743,  743,  484,
 /*  1420 */   123,  456,  134,  743,  743,   34,  743,  129,  422,  409,
 /*  1430 */   407,  405,  402,  113,  111,  117,  115,  119,  114,  290,
 /*  1440 */    36,   43,  175,  173,  743,  362,  126,  162,  158,  743,
 /*  1450 */   743,   55,   56,  427,  743,  743,  743,  743,  743,  743,
 /*  1460 */   743,  160,  228,  472,  170,  165,  156,  159,  400,  191,
 /*  1470 */   384,  153,  743,  743,  743,  743,  356,   54,   86,  259,
 /*  1480 */   260,  261,   35,   62,  355,  357,  358,  354,  743,   11,
 /*  1490 */   327,  743,  241,  273,   30,  461,  231,  743,  743,  455,
 /*  1500 */   123,  456,  134,  743,  743,   34,  743,  129,  422,  409,
 /*  1510 */   407,  405,  402,  113,  111,  117,  115,  119,  114,  743,
 /*  1520 */   743,  281,  743,   40,   42,  186,  179,  162,  158,  743,
 /*  1530 */   743,  743,  743,  427,   58,   57,  743,  743,  743,  743,
 /*  1540 */   743,  160,  228,  472,  170,  165,  156,  159,  400,  191,
 /*  1550 */   384,  152,  743,  743,  743,  743,  356,   54,   86,  259,
 /*  1560 */   260,  261,   35,   62,  355,  357,  358,  743,  743,  161,
 /*  1570 */   148,  445,  418,  410,  743,  427,  743,  743,  743,  470,
 /*  1580 */   743,  743,  743,  167,  469,  478,  155,  163,  149,  166,
 /*  1590 */   400,  191,  384,  154,  172,  169,  199,  200,  202,  204,
 /*  1600 */   145,  215,  216,  177,  489,  141,  140,  130,  467,  161,
 /*  1610 */   148,  445,  471,  270,  743,  427,  743,  743,  743,  470,
 /*  1620 */   743,  743,  743,  167,  469,  478,  155,  163,  149,  166,
 /*  1630 */   400,  191,  384,  154,  172,  169,  199,  200,  202,  204,
 /*  1640 */   145,  215,  216,  177,  489,  141,  140,  131,  467,  161,
 /*  1650 */   148,  445,  471,  248,  743,  427,  743,  743,  743,  470,
 /*  1660 */   743,  743,  743,  167,  469,  478,  155,  163,  149,  166,
 /*  1670 */   400,  191,  384,  154,  172,  169,  199,  200,  202,  204,
 /*  1680 */   145,  215,  216,  177,  489,  141,  140,  131,  467,  743,
 /*  1690 */   743,  743,  471,  250,  161,  148,  445,  743,  743,  743,
 /*  1700 */   427,  743,  743,  743,  470,  743,  743,  743,  167,  469,
 /*  1710 */   478,  155,  163,  149,  166,  400,  191,  384,  154,  172,
 /*  1720 */   169,  199,  200,  202,  204,  145,  215,  216,  177,  489,
 /*  1730 */   141,  140,  131,  467,  161,  148,  445,  471,  246,  743,
 /*  1740 */   427,  743,  743,  743,  470,  743,  743,  743,  167,  469,
 /*  1750 */   478,  155,  163,  149,  166,  400,  191,  384,  154,  172,
 /*  1760 */   169,  199,  200,  202,  204,  145,  215,  216,  177,  489,
 /*  1770 */   141,  140,  131,  467,  161,  148,  445,  255,  743,  743,
 /*  1780 */   427,  743,  743,  743,  474,  743,  743,  743,  167,  473,
 /*  1790 */   478,  155,  163,  149,  166,  400,  191,  384,  154,  172,
 /*  1800 */   169,  199,  200,  202,  204,  145,  215,  216,  177,  489,
 /*  1810 */   141,  140,  131,  467,  743,  161,  148,  445,  743,  743,
 /*  1820 */   743,  427,  743,  743,  743,  257,  743,  743,  743,  167,
 /*  1830 */   256,  478,  155,  163,  149,  166,  400,  191,  384,  154,
 /*  1840 */   172,  169,  199,  200,  202,  204,  145,  215,  216,  177,
 /*  1850 */   489,  141,  140,  131,  467,  161,  148,  445,  743,  743,
 /*  1860 */   743,  427,  743,  743,  743,  743,  743,  743,  743,  167,
 /*  1870 */   272,  478,  155,  163,  149,  166,  400,  191,  384,  154,
 /*  1880 */   172,  169,  199,  200,  202,  204,  145,  215,  216,  177,
 /*  1890 */   489,  141,  140,  131,  467,  161,  148,  445,  743,  743,
 /*  1900 */   743,  427,  743,  743,  743,  743,  743,  743,  743,  167,
 /*  1910 */   253,  478,  155,  163,  149,  166,  400,  191,  384,  154,
 /*  1920 */   172,  169,  199,  200,  202,  204,  145,  215,  216,  177,
 /*  1930 */   489,  141,  140,  131,  467,  743,  161,  148,  445,  743,
 /*  1940 */   743,  743,  427,  743,  743,  743,  743,  743,  743,  743,
 /*  1950 */   167,  193,  478,  155,  163,  149,  166,  400,  191,  384,
 /*  1960 */   154,  172,  169,  199,  200,  202,  204,  145,  215,  216,
 /*  1970 */   177,  489,  141,  140,  131,  467,  161,  148,  445,  743,
 /*  1980 */   743,  743,  427,  743,  743,  743,  743,  743,  743,  743,
 /*  1990 */   167,  446,  478,  155,  163,  149,  166,  400,  191,  384,
 /*  2000 */   154,  172,  169,  199,  200,  202,  204,  145,  215,  216,
 /*  2010 */   177,  489,  141,  140,  131,  467,  161,  148,  445,  743,
 /*  2020 */   743,  743,  427,  743,  743,  743,  743,  743,  743,  743,
 /*  2030 */   167,  447,  478,  155,  163,  149,  166,  400,  191,  384,
 /*  2040 */   154,  172,  169,  199,  200,  202,  204,  145,  215,  216,
 /*  2050 */   177,  489,  141,  140,  131,  467,  743,  161,  148,  445,
 /*  2060 */   743,  743,  743,  427,  743,  743,  743,  743,  743,  743,
 /*  2070 */   743,  167,  271,  478,  155,  163,  149,  166,  400,  191,
 /*  2080 */   384,  154,  172,  169,  199,  200,  202,  204,  145,  215,
 /*  2090 */   216,  177,  489,  141,  140,  131,  467,  161,  148,  302,
 /*  2100 */   743,   75,  743,  427,  443,   50,  743,  743,  743,  743,
 /*  2110 */   743,  167,  743,  478,  155,  163,  149,  166,  400,  191,
 /*  2120 */   384,  154,  172,  169,  199,  200,  202,  204,  145,  215,
 /*  2130 */   216,  177,  489,  141,  140,  239,  467,  282,  220,  743,
 /*  2140 */   743,  743,  743,  743,  743,  442,  439,  429,  430,  431,
 /*  2150 */   432,  433,  434,  435,  436,  437,  438,  743,  743,  161,
 /*  2160 */   148,  743,  743,  743,  743,  427,  743,  743,   74,  743,
 /*  2170 */   743,  743,  743,  167,  743,  420,  155,  163,  149,  166,
 /*  2180 */   400,  191,  384,  154,  172,  169,  199,  200,  202,  204,
 /*  2190 */   145,  215,  216,  177,  489,  141,  140,  743,  283,  161,
 /*  2200 */   148,  291,  743,  743,  743,  427,  743,  743,  743,  743,
 /*  2210 */   743,  743,  743,  167,  743,  478,  155,  163,  149,  166,
 /*  2220 */   400,  191,  384,  154,  172,  169,  199,  200,  202,  204,
 /*  2230 */   145,  215,  216,  177,  489,  141,  140,  239,  467,  161,
 /*  2240 */   148,  233,  743,  743,  743,  427,  743,  743,  743,  743,
 /*  2250 */   743,  743,  743,  167,  743,  478,  155,  163,  149,  166,
 /*  2260 */   400,  191,  384,  154,  172,  169,  199,  200,  202,  204,
 /*  2270 */   145,  215,  216,  177,  489,  141,  140,  239,  467,  743,
 /*  2280 */   161,  148,  286,  743,  743,  743,  427,  743,  743,  743,
 /*  2290 */   743,  743,  743,  743,  167,  743,  478,  155,  163,  149,
 /*  2300 */   166,  400,  191,  384,  154,  172,  169,  199,  200,  202,
 /*  2310 */   204,  145,  215,  216,  177,  489,  141,  140,  239,  467,
 /*  2320 */   161,  148,  299,  743,  743,  743,  427,  743,  743,  743,
 /*  2330 */   743,  743,  743,  743,  167,  743,  478,  155,  163,  149,
 /*  2340 */   166,  400,  191,  384,  154,  172,  169,  199,  200,  202,
 /*  2350 */   204,  145,  215,  216,  177,  489,  141,  140,  239,  467,
 /*  2360 */   161,  148,  303,  743,  743,  743,  427,  743,  743,  743,
 /*  2370 */   743,  743,  743,  743,  167,  743,  478,  155,  163,  149,
 /*  2380 */   166,  400,  191,  384,  154,  172,  169,  199,  200,  202,
 /*  2390 */   204,  145,  215,  216,  177,  489,  141,  140,  239,  467,
 /*  2400 */   743,  161,  148,  229,  743,  743,  743,  427,  743,  743,
 /*  2410 */   743,  743,  743,  743,  743,  167,  743,  478,  155,  163,
 /*  2420 */   149,  166,  400,  191,  384,  154,  172,  169,  199,  200,
 /*  2430 */   202,  204,  145,  215,  216,  177,  489,  141,  140,  239,
 /*  2440 */   467,  161,  148,  318,  743,  743,  743,  427,  743,  743,
 /*  2450 */   743,  743,  743,  743,  743,  167,  743,  478,  155,  163,
 /*  2460 */   149,  166,  400,  191,  384,  154,  172,  169,  199,  200,
 /*  2470 */   202,  204,  145,  215,  216,  177,  489,  141,  140,  239,
 /*  2480 */   467,  161,  148,  308,  743,  743,  743,  427,  743,  743,
 /*  2490 */   743,  743,  743,  743,  743,  167,  743,  478,  155,  163,
 /*  2500 */   149,  166,  400,  191,  384,  154,  172,  169,  199,  200,
 /*  2510 */   202,  204,  145,  215,  216,  177,  489,  141,  140,  239,
 /*  2520 */   467,  743,  161,  148,  196,  743,  743,  743,  427,  743,
 /*  2530 */   743,  743,  743,  743,  743,  743,  167,  743,  478,  155,
 /*  2540 */   163,  149,  166,  400,  191,  384,  154,  172,  169,  199,
 /*  2550 */   200,  202,  204,  145,  215,  216,  177,  489,  141,  140,
 /*  2560 */   239,  467,  161,  148,  304,  743,  743,  743,  427,  743,
 /*  2570 */   743,  743,  743,  743,  743,  743,  167,  743,  478,  155,
 /*  2580 */   163,  149,  166,  400,  191,  384,  154,  172,  169,  199,
 /*  2590 */   200,  202,  204,  145,  215,  216,  177,  489,  141,  140,
 /*  2600 */   239,  467,  161,  148,  295,  743,  743,  743,  427,  743,
 /*  2610 */   743,  743,  743,  743,  743,  743,  167,  743,  478,  155,
 /*  2620 */   163,  149,  166,  400,  191,  384,  154,  172,  169,  199,
 /*  2630 */   200,  202,  204,  145,  215,  216,  177,  489,  141,  140,
 /*  2640 */   239,  467,  743,  161,  148,  263,  743,  743,  743,  427,
 /*  2650 */   743,  743,  743,  743,  743,  743,  743,  167,  743,  478,
 /*  2660 */   155,  163,  149,  166,  400,  191,  384,  154,  172,  169,
 /*  2670 */   199,  200,  202,  204,  145,  215,  216,  177,  489,  141,
 /*  2680 */   140,  239,  467,  161,  148,  301,  743,  743,  743,  427,
 /*  2690 */   743,  743,  743,  743,  743,  743,  743,  167,  743,  478,
 /*  2700 */   155,  163,  149,  166,  400,  191,  384,  154,  172,  169,
 /*  2710 */   199,  200,  202,  204,  145,  215,  216,  177,  489,  141,
 /*  2720 */   140,  239,  467,  161,  148,  262,  443,   50,  743,  427,
 /*  2730 */   743,  743,  743,  743,  743,  743,  743,  167,  743,  478,
 /*  2740 */   155,  163,  149,  166,  400,  191,  384,  154,  172,  169,
 /*  2750 */   199,  200,  202,  204,  145,  215,  216,  177,  489,  141,
 /*  2760 */   140,  239,  467,  237,  235,  743,  743,  442,  439,  429,
 /*  2770 */   430,  431,  432,  433,  434,  435,  436,  437,  438,  743,
 /*  2780 */   743,  743,  743,  162,  158,  743,  743,  743,  743,  427,
 /*  2790 */   743,  743,  743,  743,  743,  743,  743,  160,  743,  236,
 /*  2800 */   170,  165,  156,  159,  400,  191,  384,  154,  172,  169,
 /*  2810 */   199,  200,  202,  204,  145,  215,  216,  177,  489,  141,
 /*  2820 */   140,  161,  148,  743,  743,  743,  743,  427,  743,  743,
 /*  2830 */   743,  743,  743,  743,  743,  167,  743,  423,  155,  163,
 /*  2840 */   149,  166,  400,  191,  384,  154,  172,  169,  199,  200,
 /*  2850 */   202,  204,  145,  215,  216,  177,  489,  141,  140,  743,
 /*  2860 */   424,  162,  158,  743,  743,  743,  743,  427,  743,  743,
 /*  2870 */   743,  743,  743,  743,  743,  160,  743,  275,  170,  165,
 /*  2880 */   156,  159,  400,  191,  384,  154,  172,  169,  199,  200,
 /*  2890 */   202,  204,  145,  215,  216,  177,  489,  141,  140,  743,
 /*  2900 */   496,  341,   40,   43,  186,  173,  161,  148,  743,  743,
 /*  2910 */   277,  743,  427,   78,   70,  743,  743,  743,  743,  743,
 /*  2920 */   167,  743,  476,  155,  163,  149,  166,  400,  191,  384,
 /*  2930 */   154,  172,  169,  199,  200,  202,  204,  145,  215,  216,
 /*  2940 */   177,  489,  141,  140,  743,  468,  161,  148,  743,  743,
 /*  2950 */   743,  743,  427,  743,  743,  743,  743,  743,  743,  743,
 /*  2960 */   167,  743,  440,  155,  163,  149,  166,  400,  191,  384,
 /*  2970 */   154,  172,  169,  199,  200,  202,  204,  145,  215,  216,
 /*  2980 */   177,  489,  141,  140,  743,  441,  162,  158,  743,  743,
 /*  2990 */   743,  743,  427,  743,  743,  743,  743,  743,  743,  743,
 /*  3000 */   160,  743,  478,  170,  165,  156,  159,  400,  191,  384,
 /*  3010 */   154,  172,  169,  199,  200,  202,  204,  145,  215,  216,
 /*  3020 */   177,  489,  141,  140,  187,  743,  743,  162,  158,  743,
 /*  3030 */   743,  743,  743,  427,  743,  743,  743,  743,  743,  743,
 /*  3040 */   743,  160,  743,  269,  170,  165,  156,  159,  400,  191,
 /*  3050 */   384,  154,  172,  169,  199,  200,  202,  204,  145,  215,
 /*  3060 */   216,  177,  489,  141,  140,  743,  743,  162,  158,  743,
 /*  3070 */   743,  743,  743,  427,  743,  743,  743,  743,  743,  743,
 /*  3080 */   743,  160,  743,  284,  170,  165,  156,  159,  400,  191,
 /*  3090 */   384,  154,  172,  169,  199,  200,  202,  204,  145,  215,
 /*  3100 */   216,  177,  489,  141,  140,  743,  743,  162,  158,  743,
 /*  3110 */   743,  743,  743,  427,  743,  743,  743,  743,  743,  743,
 /*  3120 */   743,  160,  743,  268,  170,  165,  156,  159,  400,  191,
 /*  3130 */   384,  154,  172,  169,  199,  200,  202,  204,  145,  215,
 /*  3140 */   216,  177,  489,  141,  140,  743,  743,  743,  162,  158,
 /*  3150 */   743,  743,  743,  743,  427,  743,  743,  743,  743,  743,
 /*  3160 */   743,  743,  160,  743,  194,  170,  165,  156,  159,  400,
 /*  3170 */   191,  384,  154,  172,  169,  199,  200,  202,  204,  145,
 /*  3180 */   215,  216,  177,  489,  141,  140,  743,  743,  162,  158,
 /*  3190 */   743,  743,  743,  743,  427,  743,  743,  743,  743,  743,
 /*  3200 */   743,  743,  160,  743,  305,  170,  165,  156,  159,  400,
 /*  3210 */   191,  384,  154,  172,  169,  199,  200,  202,  204,  145,
 /*  3220 */   215,  216,  177,  489,  141,  140,  743,  743,  162,  158,
 /*  3230 */   743,  743,  743,  743,  427,  743,  743,  743,  743,  743,
 /*  3240 */   743,  743,  160,  743,  226,  170,  165,  156,  159,  400,
 /*  3250 */   191,  384,  154,  172,  169,  199,  200,  202,  204,  145,
 /*  3260 */   215,  216,  177,  489,  141,  140,  743,  743,  743,  162,
 /*  3270 */   158,  743,  743,  743,  743,  427,  743,  743,  743,  743,
 /*  3280 */   743,  743,  743,  160,  743,  297,  170,  165,  156,  159,
 /*  3290 */   400,  191,  384,  154,  172,  169,  199,  200,  202,  204,
 /*  3300 */   145,  215,  216,  177,  489,  141,  140,  743,  743,  162,
 /*  3310 */   158,  743,  743,  743,  743,  427,  743,  743,  743,  743,
 /*  3320 */   743,  743,  743,  160,  743,  288,  170,  165,  156,  159,
 /*  3330 */   400,  191,  384,  154,  172,  169,  199,  200,  202,  204,
 /*  3340 */   145,  215,  216,  177,  489,  141,  140,  743,  743,  162,
 /*  3350 */   158,  743,  743,  743,  743,  427,  743,  743,  743,  743,
 /*  3360 */   743,  743,  743,  160,  743,  219,  170,  165,  156,  159,
 /*  3370 */   400,  191,  384,  154,  172,  169,  199,  200,  202,  204,
 /*  3380 */   145,  215,  216,  177,  489,  141,  140,  743,  743,  743,
 /*  3390 */   162,  158,  743,  743,  743,  743,  427,  743,  743,  743,
 /*  3400 */   743,  743,  743,  743,  160,  743,  197,  170,  165,  156,
 /*  3410 */   159,  400,  191,  384,  154,  172,  169,  199,  200,  202,
 /*  3420 */   204,  145,  215,  216,  177,  489,  141,  140,  743,  743,
 /*  3430 */   162,  158,  743,  743,  743,  743,  427,  743,  743,  743,
 /*  3440 */   743,  743,  743,  743,  160,  743,  369,  170,  165,  156,
 /*  3450 */   159,  400,  191,  384,  154,  172,  169,  199,  200,  202,
 /*  3460 */   204,  145,  215,  216,  177,  489,  141,  140,  743,  743,
 /*  3470 */   162,  158,  743,  743,  743,  743,  427,  743,  743,  743,
 /*  3480 */   743,  743,  743,  743,  160,  743,  267,  170,  165,  156,
 /*  3490 */   159,  400,  191,  384,  154,  172,  169,  199,  200,  202,
 /*  3500 */   204,  145,  215,  216,  177,  489,  141,  140,  743,  743,
 /*  3510 */   743,  162,  158,  743,  743,  743,  743,  427,  743,  743,
 /*  3520 */   743,  743,  743,  743,  743,  160,  743,  309,  170,  165,
 /*  3530 */   156,  159,  400,  191,  384,  154,  172,  169,  199,  200,
 /*  3540 */   202,  204,  145,  215,  216,  177,  489,  141,  140,  743,
 /*  3550 */   743,  162,  158,  743,  743,  743,  743,  427,  743,  743,
 /*  3560 */   743,  743,  743,  743,  743,  160,  743,  266,  170,  165,
 /*  3570 */   156,  159,  400,  191,  384,  154,  172,  169,  199,  200,
 /*  3580 */   202,  204,  145,  215,  216,  177,  489,  141,  140,  743,
 /*  3590 */   743,  162,  158,  743,  743,  743,  743,  427,  743,  743,
 /*  3600 */   743,  743,  743,  743,  743,  160,  743,  258,  170,  165,
 /*  3610 */   156,  159,  400,  191,  384,  154,  172,  169,  199,  200,
 /*  3620 */   202,  204,  145,  215,  216,  177,  489,  141,  140,  743,
 /*  3630 */   743,  743,  162,  158,  743,  743,  743,  743,  427,  743,
 /*  3640 */   743,  743,  743,  743,  743,  743,  160,  743,  476,  170,
 /*  3650 */   165,  156,  159,  400,  191,  384,  154,  172,  169,  199,
 /*  3660 */   200,  202,  204,  145,  215,  216,  177,  489,  141,  140,
 /*  3670 */   743,  743,  162,  158,  743,  743,  743,  743,  427,  743,
 /*  3680 */   743,  743,  743,  743,  743,  743,  160,  743,  238,  170,
 /*  3690 */   165,  156,  159,  400,  191,  384,  154,  172,  169,  199,
 /*  3700 */   200,  202,  204,  145,  215,  216,  177,  489,  141,  140,
 /*  3710 */   743,  743,  162,  158,  743,  743,  743,  743,  427,  743,
 /*  3720 */   743,  743,  743,  743,  743,  743,  160,  743,  481,  170,
 /*  3730 */   165,  156,  159,  400,  191,  384,  154,  172,  169,  199,
 /*  3740 */   200,  202,  204,  145,  215,  216,  177,  489,  141,  140,
 /*  3750 */   743,  743,  743,  162,  158,  743,  743,  743,  743,  427,
 /*  3760 */   743,  743,  743,  743,  743,  743,  743,  160,  743,  483,
 /*  3770 */   170,  165,  156,  159,  400,  191,  384,  154,  172,  169,
 /*  3780 */   199,  200,  202,  204,  145,  215,  216,  177,  489,  141,
 /*  3790 */   140,  743,  743,  162,  158,  743,  743,  743,  743,  427,
 /*  3800 */   743,  743,  743,  743,  743,  743,  743,  160,  743,  292,
 /*  3810 */   170,  165,  156,  159,  400,  191,  384,  154,  172,  169,
 /*  3820 */   199,  200,  202,  204,  145,  215,  216,  177,  489,  141,
 /*  3830 */   140,  743,  743,  162,  158,  743,  743,  743,  743,  427,
 /*  3840 */   743,  743,  743,  743,  743,  743,  743,  160,  743,  296,
 /*  3850 */   170,  165,  156,  159,  400,  191,  384,  154,  172,  169,
 /*  3860 */   199,  200,  202,  204,  145,  215,  216,  177,  489,  141,
 /*  3870 */   140,  743,  743,  743,  162,  158,  743,  743,  743,  743,
 /*  3880 */   427,  743,  743,  743,  743,  743,  743,  743,  160,  743,
 /*  3890 */   293,  170,  165,  156,  159,  400,  191,  384,  154,  172,
 /*  3900 */   169,  199,  200,  202,  204,  145,  215,  216,  177,  489,
 /*  3910 */   141,  140,  743,  743,  162,  158,  743,  743,  743,  743,
 /*  3920 */   427,  743,  743,  743,  743,  743,  743,  743,  160,  743,
 /*  3930 */   287,  170,  165,  156,  159,  400,  191,  384,  154,  172,
 /*  3940 */   169,  199,  200,  202,  204,  145,  215,  216,  177,  489,
 /*  3950 */   141,  140,  743,  743,  162,  158,  743,  743,  743,  743,
 /*  3960 */   427,  743,  743,  743,  743,  743,  743,  743,  160,  743,
 /*  3970 */   300,  170,  165,  156,  159,  400,  191,  384,  154,  172,
 /*  3980 */   169,  199,  200,  202,  204,  145,  215,  216,  177,  489,
 /*  3990 */   141,  140,  743,  743,  743,  162,  158,  743,  743,  743,
 /*  4000 */   743,  427,  743,  743,  743,  743,  743,  743,  743,  160,
 /*  4010 */   743,  198,  170,  165,  156,  159,  400,  191,  384,  154,
 /*  4020 */   172,  169,  199,  200,  202,  204,  145,  215,  216,  177,
 /*  4030 */   489,  141,  140,  743,  743,  162,  158,  743,  743,  743,
 /*  4040 */   743,  427,  743,  743,  743,  743,  743,  743,  743,  160,
 /*  4050 */   743,  264,  170,  165,  156,  159,  400,  191,  384,  154,
 /*  4060 */   172,  169,  199,  200,  202,  204,  145,  215,  216,  177,
 /*  4070 */   489,  141,  140,  195,   26,   30,  461,  231,  743,  743,
 /*  4080 */    49,  123,  743,  136,  743,  743,   34,  743,  129,  422,
 /*  4090 */   409,  407,  405,  402,  113,  111,  117,  115,  119,  114,
 /*  4100 */    99,   91,  100,   98,   97,   96,   95,   94,   93,   92,
 /*  4110 */   743,  743,  743,  743,  743,  743,  443,   53,  743,  743,
 /*  4120 */   743,  743,  743,  228,  472,  743,  743,  743,  743,  743,
 /*  4130 */   195,   26,   30,  461,  231,  743,  743,   49,  123,  743,
 /*  4140 */   137,  743,  743,   34,  743,  129,  422,  409,  407,  405,
 /*  4150 */   402,  113,  111,  117,  115,  119,  114,  442,  439,  429,
 /*  4160 */   430,  431,  432,  433,  434,  435,  436,  437,  438,  743,
 /*  4170 */   743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
 /*  4180 */   228,  472,  743,  743,  743,  743,  743,  195,  743,   30,
 /*  4190 */   461,  231,  743,  743,   49,  123,  344,  743,  743,  743,
 /*  4200 */    34,  743,  129,  422,  409,  407,  405,  402,  113,  111,
 /*  4210 */   117,  115,  119,  114,  151,  188,  743,  347,  142,  743,
 /*  4220 */   743,  351,  343,  223,  224,  225,  144,  743,  743,  743,
 /*  4230 */   743,  743,  743,  743,  743,  743,  743,  228,  472,  743,
 /*  4240 */   743,  743,  743,  743,  195,  743,   30,  461,  231,  743,
 /*  4250 */   743,   49,  123,  348,  743,  743,  743,   34,  743,  129,
 /*  4260 */   422,  409,  407,  405,  402,  113,  111,  117,  115,  119,
 /*  4270 */   114,  743,  743,  743,  743,  743,  743,  743,  743,  743,
 /*  4280 */   743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
 /*  4290 */   743,  743,  743,  743,  228,  472,  743,  743,  743,  743,
 /*  4300 */   743,  195,  743,   30,  461,  231,  743,  743,   49,  123,
 /*  4310 */   743,  136,  743,  743,   34,  743,  129,  422,  409,  407,
 /*  4320 */   405,  402,  113,  111,  117,  115,  119,  114,  743,  743,
 /*  4330 */   743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
 /*  4340 */   743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
 /*  4350 */   743,  228,  472,  743,  743,  743,  743,  743,  195,  743,
 /*  4360 */    30,  461,  231,  743,  743,   49,  123,  743,  743,  743,
 /*  4370 */   743,   34,  366,  129,  422,  409,  407,  405,  402,  113,
 /*  4380 */   111,  117,  115,  119,  114,  743,  743,  743,  743,  743,
 /*  4390 */   743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
 /*  4400 */   743,  743,  743,  743,  743,  743,  743,  743,  228,  472,
 /*  4410 */   743,  743,  743,  743,  743,  195,  743,   30,  461,  231,
 /*  4420 */   743,  743,   49,  123,  743,  743,  743,  743,   34,  306,
 /*  4430 */   129,  422,  409,  407,  405,  402,  113,  111,  117,  115,
 /*  4440 */   119,  114,  743,  743,  743,  743,  743,  743,  743,  743,
 /*  4450 */   743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
 /*  4460 */   743,  743,  743,  743,  743,  228,  743,  743,  743,  743,
 /*  4470 */   743,  743,  195,  743,   30,  461,  231,  743,  743,   49,
 /*  4480 */   123,  743,  743,  743,  743,   34,  294,  129,  422,  409,
 /*  4490 */   407,  405,  402,  113,  111,  117,  115,  119,  114,  743,
 /*  4500 */   743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
 /*  4510 */   743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
 /*  4520 */   743,  743,  228,  743,  743,  743,  743,  743,  743,  195,
 /*  4530 */   743,   30,  461,  231,  743,  743,   49,  123,  743,  743,
 /*  4540 */   743,  743,   34,  285,  129,  422,  409,  407,  405,  402,
 /*  4550 */   113,  111,  117,  115,  119,  114,  743,  743,  743,  743,
 /*  4560 */   743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
 /*  4570 */   743,  743,  743,  743,  743,  743,  743,  743,  743,  228,
 /*  4580 */   743,  743,  743,  743,  743,  743,  195,  743,   30,  461,
 /*  4590 */   231,  743,  743,   49,  123,  743,  743,  743,  743,   34,
 /*  4600 */   743,  129,  422,  409,  407,  405,  402,  113,  111,  117,
 /*  4610 */   115,  119,  114,  743,  743,  743,  743,  743,  743,  743,
 /*  4620 */   743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
 /*  4630 */   743,  743,  743,  743,  743,  743,  228,  472,  743,  743,
 /*  4640 */   743,  743,  743,  195,  743,   30,  461,  231,  743,  743,
 /*  4650 */    49,  123,  743,  743,  743,  743,   34,  280,  129,  422,
 /*  4660 */   409,  407,  405,  402,  113,  111,  117,  115,  119,  114,
 /*  4670 */   743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
 /*  4680 */   743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
 /*  4690 */   743,  743,  743,  228,  743,  743,  743,  743,  743,  743,
 /*  4700 */   195,  743,   30,  461,  231,  743,  743,   49,  122,  743,
 /*  4710 */   133,  743,  743,   34,  743,  129,  422,  409,  407,  405,
 /*  4720 */   402,  113,  111,  117,  115,  119,  114,  743,  743,  743,
 /*  4730 */   743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
 /*  4740 */   743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
 /*  4750 */   228,  743,  743,  743,  743,  743,  743,  195,  743,   30,
 /*  4760 */   461,  231,  743,  743,   49,  123,  743,  743,  743,  743,
 /*  4770 */    34,  298,  129,  422,  409,  407,  405,  402,  113,  111,
 /*  4780 */   117,  115,  119,  114,  743,  743,  743,  743,  743,  743,
 /*  4790 */   743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
 /*  4800 */   743,  743,  743,  743,  743,  743,  743,  228,  743,  743,
 /*  4810 */   743,  743,  743,  743,  195,  743,   30,  461,  231,  743,
 /*  4820 */   743,   49,  123,  743,  743,  743,  743,   34,  289,  129,
 /*  4830 */   422,  409,  407,  405,  402,  113,  111,  117,  115,  119,
 /*  4840 */   114,  743,  743,  743,  743,  743,  743,  743,  743,  743,
 /*  4850 */   743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
 /*  4860 */   743,  743,  743,  743,  228,  743,  743,  743,  743,  743,
 /*  4870 */   743,  195,  743,   30,  461,  231,  743,  743,   49,  123,
 /*  4880 */   743,  743,  743,  743,   34,  307,  129,  422,  409,  407,
 /*  4890 */   405,  402,  113,  111,  117,  115,  119,  114,  743,  743,
 /*  4900 */   743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
 /*  4910 */   743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
 /*  4920 */   743,  228,  743,  743,  743,  743,  743,  743,  195,  743,
 /*  4930 */    30,  461,  231,  743,  486,   49,  123,  743,  743,  743,
 /*  4940 */   743,   34,  743,  129,  422,  409,  407,  405,  402,  113,
 /*  4950 */   111,  117,  115,  119,  114,  743,  743,  743,  743,  743,
 /*  4960 */   743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
 /*  4970 */   743,  743,  743,  743,  743,  743,  743,  743,  228,  743,
 /*  4980 */   162,  158,  743,  743,  743,  743,  427,  743,  743,  743,
 /*  4990 */   743,  743,  743,  743,  160,  743,  743,  170,  165,  156,
 /*  5000 */   159,  400,  191,  384,  154,  172,  169,  199,  200,  202,
 /*  5010 */   204,  145,  215,  218,  195,  743,   30,  461,  231,  743,
 /*  5020 */   743,   49,  123,  743,  743,  743,  743,   34,  743,  129,
 /*  5030 */   422,  409,  407,  405,  402,  113,  111,  117,  115,  119,
 /*  5040 */   114,  743,  743,  743,  743,  743,  743,  743,  162,  158,
 /*  5050 */   743,  743,  743,  743,  427,  743,  743,  743,  743,  743,
 /*  5060 */   743,  743,  160,  743,  228,  170,  165,  156,  159,  400,
 /*  5070 */   191,  384,  154,  172,  169,  199,  200,  202,  204,  145,
 /*  5080 */   217,  743,  743,  743,  743,  162,  158,  743,  743,  743,
 /*  5090 */   743,  427,  743,  743,  743,  743,  743,  743,  743,  160,
 /*  5100 */   743,  743,  170,  165,  156,  159,  400,  191,  384,  154,
 /*  5110 */   172,  169,  199,  200,  202,  204,  146,  162,  158,  743,
 /*  5120 */   743,  743,  743,  427,  743,  743,  743,  743,  743,  743,
 /*  5130 */   743,  160,  743,  743,  170,  165,  156,  159,  400,  191,
 /*  5140 */   384,  154,  172,  169,  199,  200,  202,  211,  743,  743,
 /*  5150 */   743,  743,  743,  743,  743,  162,  158,  743,  743,  743,
 /*  5160 */   743,  427,  743,  743,  743,  743,  743,  743,  743,  160,
 /*  5170 */   743,  743,  170,  165,  156,  159,  400,  191,  384,  154,
 /*  5180 */   172,  169,  199,  200,  202,  192,  162,  158,  743,  743,
 /*  5190 */   743,  743,  427,  743,  743,  743,  743,  743,  743,  743,
 /*  5200 */   160,  743,  743,  170,  165,  156,  159,  400,  191,  384,
 /*  5210 */   154,  172,  169,  199,  200,  202,  208,  162,  158,  743,
 /*  5220 */   743,  743,  743,  427,  743,  743,  743,  743,  743,  743,
 /*  5230 */   743,  160,  743,  743,  170,  165,  156,  159,  400,  191,
 /*  5240 */   384,  154,  172,  169,  199,  200,  202,  210,  162,  158,
 /*  5250 */   743,  743,  743,  743,  427,  743,  743,  743,  743,  743,
 /*  5260 */   743,  743,  160,  743,  743,  170,  165,  156,  159,  400,
 /*  5270 */   191,  384,  154,  172,  169,  199,  200,  202,  212,  162,
 /*  5280 */   158,  743,  743,  743,  743,  427,  743,  743,  743,  743,
 /*  5290 */   743,  743,  743,  160,  743,  743,  170,  165,  156,  159,
 /*  5300 */   400,  191,  384,  154,  172,  169,  199,  200,  202,  209,
 /*  5310 */   162,  158,  743,  743,  743,  743,  427,  743,  743,  743,
 /*  5320 */   743,  743,  743,  743,  160,  743,  743,  170,  165,  156,
 /*  5330 */   159,  400,  191,  384,  154,  172,  169,  199,  200,  202,
 /*  5340 */   207,  162,  158,  743,  743,  743,  743,  427,  743,  743,
 /*  5350 */   743,  743,  743,  743,  743,  160,  743,  743,  170,  165,
 /*  5360 */   156,  159,  400,  191,  384,  154,  172,  169,  199,  200,
 /*  5370 */   202,  206,  162,  158,  743,  743,  743,  743,  427,  743,
 /*  5380 */   743,  743,  743,  743,  743,  743,  160,  743,  743,  170,
 /*  5390 */   165,  156,  159,  400,  191,  384,  154,  172,  169,  199,
 /*  5400 */   200,  202,  214,  162,  158,  743,  743,  743,  743,  427,
 /*  5410 */   743,  743,  743,  743,  743,  743,  743,  160,  743,  743,
 /*  5420 */   170,  165,  156,  159,  400,  191,  384,  154,  172,  169,
 /*  5430 */   199,  200,  202,  213,  162,  158,  743,  743,  743,  743,
 /*  5440 */   427,  743,  743,  743,  743,  743,  743,  743,  160,  743,
 /*  5450 */   743,  170,  165,  156,  159,  400,  191,  384,  154,  172,
 /*  5460 */   169,  199,  200,  205,  195,  743,   30,  461,  743,  743,
 /*  5470 */   743,  743,  743,  743,  743,  743,  743,  743,  743,  129,
 /*  5480 */   422,  409,  407,  405,  402,  113,  111,  117,  115,  119,
 /*  5490 */   114,  743,  743,  162,  158,  743,  743,  743,  743,  427,
 /*  5500 */   743,  743,  743,  162,  158,  743,  743,  160,  743,  427,
 /*  5510 */   170,  165,  156,  159,  400,  191,  388,  160,  743,  743,
 /*  5520 */   170,  165,  156,  159,  400,  191,  377,  162,  158,  743,
 /*  5530 */   743,  743,  743,  427,  743,  743,  743,  162,  158,  743,
 /*  5540 */   743,  160,  743,  427,  170,  165,  156,  159,  400,  191,
 /*  5550 */   395,  160,  743,  743,  170,  165,  156,  159,  400,  191,
 /*  5560 */   379,  162,  158,  743,  743,  743,  743,  427,  743,  743,
 /*  5570 */   743,  162,  158,  743,  743,  160,  743,  427,  170,  165,
 /*  5580 */   156,  159,  400,  191,  390,  160,  743,  743,  170,  165,
 /*  5590 */   156,  159,  400,  191,  394,  162,  158,  743,  743,  743,
 /*  5600 */   743,  427,  743,  743,  743,  743,  743,  743,  743,  160,
 /*  5610 */   743,  743,  170,  165,  156,  159,  400,  191,  373,  162,
 /*  5620 */   158,  743,  743,  743,  743,  427,  743,  743,  743,  162,
 /*  5630 */   158,  743,  743,  160,  743,  427,  170,  165,  156,  159,
 /*  5640 */   400,  191,  385,  160,  743,  743,  170,  165,  156,  159,
 /*  5650 */   400,  191,  370,  162,  158,  743,  743,  743,  743,  427,
 /*  5660 */   743,  743,  743,  743,  743,  743,  743,  160,  743,  743,
 /*  5670 */   170,  165,  156,  159,  400,  191,  387,
};
static const YYCODETYPE yy_lookahead[] = {
 /*     0 */    88,    8,   90,   91,   92,   93,   94,   95,   96,   97,
 /*    10 */    98,   99,   41,    9,  102,  103,   12,    9,  106,  107,
 /*    20 */    16,  109,  110,    8,  112,   10,  114,   19,  116,  117,
 /*    30 */   118,   11,  120,   13,   19,  123,  124,  125,  126,  127,
 /*    40 */   128,  129,  130,  131,  132,  133,  134,  135,  136,  137,
 /*    50 */   138,  139,  140,  141,  142,  143,   40,  145,  146,  147,
 /*    60 */   148,  100,  101,  151,  152,   42,  154,   89,   90,   91,
 /*    70 */    92,   93,   94,   95,   96,   97,   98,   99,   39,   14,
 /*    80 */   102,  103,   17,   18,  106,  107,    6,  109,  110,    8,
 /*    90 */   112,   10,  114,   13,  116,  117,  118,   20,  120,   20,
 /*   100 */    19,  123,  124,  125,  126,  127,  128,  129,  130,  131,
 /*   110 */   132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
 /*   120 */   142,  143,    8,  145,  146,  147,  148,   36,   37,   38,
 /*   130 */   152,  153,  154,   88,   11,   90,   91,   92,   93,   94,
 /*   140 */    95,   96,   97,   98,   99,   11,   81,  102,  103,    4,
 /*   150 */     5,  106,  107,    6,  109,  110,    8,  112,   10,  114,
 /*   160 */    13,  116,  117,  118,   20,  120,   53,   19,  123,  124,
 /*   170 */   125,  126,  127,  128,  129,  130,  131,  132,  133,  134,
 /*   180 */   135,  136,  137,  138,  139,  140,  141,  142,  143,   54,
 /*   190 */   145,  146,  147,  148,    8,    9,  151,  152,  105,  154,
 /*   200 */    89,   90,   91,   92,   93,   94,   95,   96,   97,   98,
 /*   210 */    99,  105,    9,  102,  103,   12,  106,  106,  107,   16,
 /*   220 */   109,  110,    8,  112,   10,  114,   14,  116,  117,  118,
 /*   230 */   120,  120,  111,   19,  123,  124,  125,  126,  127,  128,
 /*   240 */   129,  130,  131,  132,  133,  134,  135,  136,  137,  138,
 /*   250 */   139,  140,  141,  142,  143,   20,  145,  146,  147,  148,
 /*   260 */   111,    4,    5,  152,  153,  154,   89,   90,   91,   92,
 /*   270 */    93,   94,   95,   96,   97,   98,   99,  104,  105,  102,
 /*   280 */   103,  100,  101,  106,  107,    6,  109,  110,    8,  112,
 /*   290 */    10,  114,   13,  116,  117,  118,    9,  120,  105,   19,
 /*   300 */   123,  124,  125,  126,  127,  128,  129,  130,  131,  132,
 /*   310 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*   320 */   143,   13,  145,  146,  147,  148,  105,   29,   30,  152,
 /*   330 */   153,  154,   89,   90,   91,   92,   93,   94,   95,   96,
 /*   340 */    97,   98,   99,   55,   56,  102,  103,   15,    9,  106,
 /*   350 */   107,  105,  109,  110,    8,  112,   10,  114,   19,  116,
 /*   360 */   117,  118,   15,  120,  119,   19,  123,  124,  125,  126,
 /*   370 */   127,  128,  129,  130,  131,  132,  133,  134,  135,  136,
 /*   380 */   137,  138,  139,  140,  141,  142,  143,   15,  145,  146,
 /*   390 */   147,  148,   17,   18,    9,  152,  153,  154,   89,   90,
 /*   400 */    91,   92,   93,   94,   95,   96,   97,   98,   99,   27,
 /*   410 */    28,  102,  103,   20,    9,  106,  107,   13,  109,  110,
 /*   420 */     8,  112,   10,  114,   19,  116,  117,  118,    8,  120,
 /*   430 */   119,   19,  123,  124,  125,  126,  127,  128,  129,  130,
 /*   440 */   131,  132,  133,  134,  135,  136,  137,  138,  139,  140,
 /*   450 */   141,  142,  143,   89,  145,  146,  147,  148,   11,   13,
 /*   460 */   119,  152,  153,  154,   88,   13,   90,   91,   92,   93,
 /*   470 */    94,   95,   96,   97,   98,   99,    8,   15,  102,  103,
 /*   480 */    18,    9,  106,  107,   56,  109,  110,    8,  112,   10,
 /*   490 */   114,   19,  116,  117,  118,  106,  120,   11,   19,  123,
 /*   500 */   124,  125,  126,  127,  128,  129,  130,  131,  132,  133,
 /*   510 */   134,  135,  136,  137,  138,  139,  140,  141,  142,  143,
 /*   520 */     9,  145,  146,  147,  148,   13,   83,  151,  152,   12,
 /*   530 */   154,   89,   90,   91,   92,   93,   94,   95,   96,   97,
 /*   540 */    98,   99,   83,   14,  102,  103,   18,    9,  106,  107,
 /*   550 */    20,  109,  110,    8,  112,   10,  114,   19,  116,  117,
 /*   560 */   118,   14,  120,   11,   19,  123,  124,  125,  126,  127,
 /*   570 */   128,  129,  130,  131,  132,  133,  134,  135,  136,  137,
 /*   580 */   138,  139,  140,  141,  142,  143,   18,  145,  146,  147,
 /*   590 */   148,   57,    9,   57,  152,  153,  154,   88,   20,   90,
 /*   600 */    91,   92,   93,   94,   95,   96,   97,   98,   99,   15,
 /*   610 */    11,  102,  103,   15,    9,  106,  107,   11,  109,  110,
 /*   620 */     8,  112,   10,  114,   19,  116,  117,  118,   15,  120,
 /*   630 */    11,   19,  123,  124,  125,  126,  127,  128,  129,  130,
 /*   640 */   131,  132,  133,  134,  135,  136,  137,  138,  139,  140,
 /*   650 */   141,  142,  143,    8,  145,  146,  147,  148,   11,   11,
 /*   660 */   151,  152,   88,  154,   90,   91,   92,   93,   94,   95,
 /*   670 */    96,   97,   98,   99,   20,    8,  102,  103,   57,    9,
 /*   680 */   106,  107,   11,  109,  110,    8,  112,   10,  114,   19,
 /*   690 */   116,  117,  118,   11,  120,    8,   19,  123,  124,  125,
 /*   700 */   126,  127,  128,  129,  130,  131,  132,  133,  134,  135,
 /*   710 */   136,  137,  138,  139,  140,  141,  142,  143,   20,  145,
 /*   720 */   146,  147,  148,   11,   20,  151,  152,   88,  154,   90,
 /*   730 */    91,   92,   93,   94,   95,   96,   97,   98,   99,   70,
 /*   740 */    11,  102,  103,    8,   11,  106,  107,   57,  109,  110,
 /*   750 */    20,  112,   15,  114,   20,  116,  117,  118,   11,  120,
 /*   760 */    11,   15,  123,  124,  125,  126,  127,  128,  129,  130,
 /*   770 */   131,  132,  133,  134,  135,  136,  137,  138,  139,  140,
 /*   780 */   141,  142,  143,   57,  145,  146,  147,  148,   15,   57,
 /*   790 */   151,  152,   14,  154,   89,   90,   91,   92,   93,   94,
 /*   800 */    95,   96,   97,   98,   99,   20,   14,  102,  103,   20,
 /*   810 */    15,  106,  107,   11,  109,  110,   15,  112,   57,  114,
 /*   820 */    15,  116,  117,  118,   20,  120,   15,   18,  123,  124,
 /*   830 */   125,  126,  127,  128,  129,  130,  131,  132,  133,  134,
 /*   840 */   135,  136,  137,  138,  139,  140,  141,  142,  143,   15,
 /*   850 */   145,  146,  147,  148,   18,    8,   57,  152,  153,  154,
 /*   860 */    89,   90,   91,   92,   93,   94,   95,   96,   97,   98,
 /*   870 */    99,   57,   11,  102,  103,   11,   10,  106,  107,   11,
 /*   880 */   109,  110,   11,  112,   11,  114,   14,  116,  117,  118,
 /*   890 */    15,  120,   11,   15,  123,  124,  125,  126,  127,  128,
 /*   900 */   129,  130,  131,  132,  133,  134,  135,  136,  137,  138,
 /*   910 */   139,  140,  141,  142,  143,   14,  145,  146,  147,  148,
 /*   920 */    11,    8,  156,  152,  153,  154,    1,  156,    3,  156,
 /*   930 */   156,    6,    7,    8,    9,   10,  156,   12,   13,   14,
 /*   940 */    15,   16,  156,  156,   19,  156,   21,   22,   23,   24,
 /*   950 */    25,   26,   27,   28,   29,   30,   31,   32,  156,  106,
 /*   960 */   107,   32,   33,   34,   35,  112,  106,  107,  156,    8,
 /*   970 */   156,   10,  112,  120,   13,   14,  123,  124,  125,  126,
 /*   980 */   120,   56,   57,  123,  124,  125,  126,  127,  128,  129,
 /*   990 */   130,  131,  132,  133,  134,   70,   71,   72,   73,   74,
 /*  1000 */    75,   76,   77,   78,   79,   80,    0,    1,    6,    3,
 /*  1010 */     8,    9,    6,    7,    8,    9,   10,  156,  156,   13,
 /*  1020 */    14,   15,   16,   21,  156,   19,  156,   21,   22,   23,
 /*  1030 */    24,   25,   26,   27,   28,   29,   30,   31,   32,  156,
 /*  1040 */   106,  107,  156,  156,  156,  156,  112,  106,  107,  156,
 /*  1050 */   156,  156,  156,  112,  120,  156,  156,  123,  124,  125,
 /*  1060 */   126,  120,   56,   57,  123,  124,  125,  126,  127,  128,
 /*  1070 */   129,  130,  131,  132,  133,  156,   70,   71,   72,   73,
 /*  1080 */    74,   75,   76,   77,   78,   79,   80,    1,  156,    3,
 /*  1090 */   156,  156,    6,    7,    8,    9,   10,  156,   12,   13,
 /*  1100 */    14,   15,   16,  156,  156,   19,  156,   21,   22,   23,
 /*  1110 */    24,   25,   26,   27,   28,   29,   30,   31,   32,  156,
 /*  1120 */   106,  107,  156,  156,  156,  156,  112,  106,  107,  156,
 /*  1130 */   156,  156,  156,  112,  120,  156,  156,  123,  124,  125,
 /*  1140 */   126,  120,   56,   57,  123,  124,  125,  126,  127,  128,
 /*  1150 */   129,  130,  131,  132,  156,  156,   70,   71,   72,   73,
 /*  1160 */    74,   75,   76,   77,   78,   79,   80,    1,  156,    3,
 /*  1170 */   156,  156,    6,    7,    8,    9,   10,  156,   12,   13,
 /*  1180 */    14,   15,   16,  156,  156,   19,  156,   21,   22,   23,
 /*  1190 */    24,   25,   26,   27,   28,   29,   30,   31,   32,  156,
 /*  1200 */   106,  107,  156,  156,  156,  156,  112,  106,  107,  156,
 /*  1210 */   156,  156,  156,  112,  120,  156,  156,  123,  124,  125,
 /*  1220 */   126,  120,   56,   57,  123,  124,  125,  126,  127,  128,
 /*  1230 */   129,  130,  131,  156,  156,  156,   70,   71,   72,   73,
 /*  1240 */    74,   75,   76,   77,   78,   79,   80,    1,  156,    3,
 /*  1250 */   156,  156,    6,    7,    8,    9,   10,  156,   12,   13,
 /*  1260 */    14,   15,   16,  156,  156,   19,  156,   21,   22,   23,
 /*  1270 */    24,   25,   26,   27,   28,   29,   30,   31,   32,  156,
 /*  1280 */   106,  107,  156,  156,  156,  156,  112,  106,  107,  156,
 /*  1290 */   156,  156,  156,  112,  120,  156,  156,  123,  124,  125,
 /*  1300 */   126,  120,   56,   57,  123,  124,  125,  126,  127,  128,
 /*  1310 */   129,  130,  131,  156,  156,  156,   70,   71,   72,   73,
 /*  1320 */    74,   75,   76,   77,   78,   79,   80,    1,  156,    3,
 /*  1330 */   156,  156,    6,    7,    8,    9,   10,   11,  156,   13,
 /*  1340 */    14,   15,   16,  156,  156,   19,  156,   21,   22,   23,
 /*  1350 */    24,   25,   26,   27,   28,   29,   30,   31,   32,    6,
 /*  1360 */   156,    8,    6,   10,    8,    9,   13,  106,  107,   13,
 /*  1370 */   156,  156,   19,  112,  156,  156,  156,   21,  156,  156,
 /*  1380 */   156,  120,   56,   57,  123,  124,  125,  126,  127,  128,
 /*  1390 */   129,  130,  131,  156,  156,  156,   70,   71,   72,   73,
 /*  1400 */    74,   75,   76,   77,   78,   79,   80,    1,  156,    3,
 /*  1410 */    57,  156,    6,    7,    8,    9,   10,  156,  156,   13,
 /*  1420 */    14,   15,   16,  156,  156,   19,  156,   21,   22,   23,
 /*  1430 */    24,   25,   26,   27,   28,   29,   30,   31,   32,    6,
 /*  1440 */     8,    8,   10,   10,  156,   13,   14,  106,  107,  156,
 /*  1450 */   156,   19,   19,  112,  156,  156,  156,  156,  156,  156,
 /*  1460 */   156,  120,   56,   57,  123,  124,  125,  126,  127,  128,
 /*  1470 */   129,  130,  156,  156,  156,  156,   70,   71,   72,   73,
 /*  1480 */    74,   75,   76,   77,   78,   79,   80,    1,  156,    3,
 /*  1490 */    57,  156,    6,    7,    8,    9,   10,  156,  156,   13,
 /*  1500 */    14,   15,   16,  156,  156,   19,  156,   21,   22,   23,
 /*  1510 */    24,   25,   26,   27,   28,   29,   30,   31,   32,  156,
 /*  1520 */   156,    6,  156,    8,    8,   10,   10,  106,  107,  156,
 /*  1530 */   156,  156,  156,  112,   19,   19,  156,  156,  156,  156,
 /*  1540 */   156,  120,   56,   57,  123,  124,  125,  126,  127,  128,
 /*  1550 */   129,  130,  156,  156,  156,  156,   70,   71,   72,   73,
 /*  1560 */    74,   75,   76,   77,   78,   79,   80,  156,  156,  106,
 /*  1570 */   107,  108,   57,   57,  156,  112,  156,  156,  156,  116,
 /*  1580 */   156,  156,  156,  120,  121,  122,  123,  124,  125,  126,
 /*  1590 */   127,  128,  129,  130,  131,  132,  133,  134,  135,  136,
 /*  1600 */   137,  138,  139,  140,  141,  142,  143,  144,  145,  106,
 /*  1610 */   107,  108,  149,  150,  156,  112,  156,  156,  156,  116,
 /*  1620 */   156,  156,  156,  120,  121,  122,  123,  124,  125,  126,
 /*  1630 */   127,  128,  129,  130,  131,  132,  133,  134,  135,  136,
 /*  1640 */   137,  138,  139,  140,  141,  142,  143,  144,  145,  106,
 /*  1650 */   107,  108,  149,  150,  156,  112,  156,  156,  156,  116,
 /*  1660 */   156,  156,  156,  120,  121,  122,  123,  124,  125,  126,
 /*  1670 */   127,  128,  129,  130,  131,  132,  133,  134,  135,  136,
 /*  1680 */   137,  138,  139,  140,  141,  142,  143,  144,  145,  156,
 /*  1690 */   156,  156,  149,  150,  106,  107,  108,  156,  156,  156,
 /*  1700 */   112,  156,  156,  156,  116,  156,  156,  156,  120,  121,
 /*  1710 */   122,  123,  124,  125,  126,  127,  128,  129,  130,  131,
 /*  1720 */   132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
 /*  1730 */   142,  143,  144,  145,  106,  107,  108,  149,  150,  156,
 /*  1740 */   112,  156,  156,  156,  116,  156,  156,  156,  120,  121,
 /*  1750 */   122,  123,  124,  125,  126,  127,  128,  129,  130,  131,
 /*  1760 */   132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
 /*  1770 */   142,  143,  144,  145,  106,  107,  108,  149,  156,  156,
 /*  1780 */   112,  156,  156,  156,  116,  156,  156,  156,  120,  121,
 /*  1790 */   122,  123,  124,  125,  126,  127,  128,  129,  130,  131,
 /*  1800 */   132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
 /*  1810 */   142,  143,  144,  145,  156,  106,  107,  108,  156,  156,
 /*  1820 */   156,  112,  156,  156,  156,  116,  156,  156,  156,  120,
 /*  1830 */   121,  122,  123,  124,  125,  126,  127,  128,  129,  130,
 /*  1840 */   131,  132,  133,  134,  135,  136,  137,  138,  139,  140,
 /*  1850 */   141,  142,  143,  144,  145,  106,  107,  108,  156,  156,
 /*  1860 */   156,  112,  156,  156,  156,  156,  156,  156,  156,  120,
 /*  1870 */   121,  122,  123,  124,  125,  126,  127,  128,  129,  130,
 /*  1880 */   131,  132,  133,  134,  135,  136,  137,  138,  139,  140,
 /*  1890 */   141,  142,  143,  144,  145,  106,  107,  108,  156,  156,
 /*  1900 */   156,  112,  156,  156,  156,  156,  156,  156,  156,  120,
 /*  1910 */   121,  122,  123,  124,  125,  126,  127,  128,  129,  130,
 /*  1920 */   131,  132,  133,  134,  135,  136,  137,  138,  139,  140,
 /*  1930 */   141,  142,  143,  144,  145,  156,  106,  107,  108,  156,
 /*  1940 */   156,  156,  112,  156,  156,  156,  156,  156,  156,  156,
 /*  1950 */   120,  121,  122,  123,  124,  125,  126,  127,  128,  129,
 /*  1960 */   130,  131,  132,  133,  134,  135,  136,  137,  138,  139,
 /*  1970 */   140,  141,  142,  143,  144,  145,  106,  107,  108,  156,
 /*  1980 */   156,  156,  112,  156,  156,  156,  156,  156,  156,  156,
 /*  1990 */   120,  121,  122,  123,  124,  125,  126,  127,  128,  129,
 /*  2000 */   130,  131,  132,  133,  134,  135,  136,  137,  138,  139,
 /*  2010 */   140,  141,  142,  143,  144,  145,  106,  107,  108,  156,
 /*  2020 */   156,  156,  112,  156,  156,  156,  156,  156,  156,  156,
 /*  2030 */   120,  121,  122,  123,  124,  125,  126,  127,  128,  129,
 /*  2040 */   130,  131,  132,  133,  134,  135,  136,  137,  138,  139,
 /*  2050 */   140,  141,  142,  143,  144,  145,  156,  106,  107,  108,
 /*  2060 */   156,  156,  156,  112,  156,  156,  156,  156,  156,  156,
 /*  2070 */   156,  120,  121,  122,  123,  124,  125,  126,  127,  128,
 /*  2080 */   129,  130,  131,  132,  133,  134,  135,  136,  137,  138,
 /*  2090 */   139,  140,  141,  142,  143,  144,  145,  106,  107,  108,
 /*  2100 */   156,   14,  156,  112,   17,   18,  156,  156,  156,  156,
 /*  2110 */   156,  120,  156,  122,  123,  124,  125,  126,  127,  128,
 /*  2120 */   129,  130,  131,  132,  133,  134,  135,  136,  137,  138,
 /*  2130 */   139,  140,  141,  142,  143,  144,  145,   84,   85,  156,
 /*  2140 */   156,  156,  156,  156,  156,   58,   59,   60,   61,   62,
 /*  2150 */    63,   64,   65,   66,   67,   68,   69,  156,  156,  106,
 /*  2160 */   107,  156,  156,  156,  156,  112,  156,  156,   81,  156,
 /*  2170 */   156,  156,  156,  120,  156,  122,  123,  124,  125,  126,
 /*  2180 */   127,  128,  129,  130,  131,  132,  133,  134,  135,  136,
 /*  2190 */   137,  138,  139,  140,  141,  142,  143,  156,  145,  106,
 /*  2200 */   107,  108,  156,  156,  156,  112,  156,  156,  156,  156,
 /*  2210 */   156,  156,  156,  120,  156,  122,  123,  124,  125,  126,
 /*  2220 */   127,  128,  129,  130,  131,  132,  133,  134,  135,  136,
 /*  2230 */   137,  138,  139,  140,  141,  142,  143,  144,  145,  106,
 /*  2240 */   107,  108,  156,  156,  156,  112,  156,  156,  156,  156,
 /*  2250 */   156,  156,  156,  120,  156,  122,  123,  124,  125,  126,
 /*  2260 */   127,  128,  129,  130,  131,  132,  133,  134,  135,  136,
 /*  2270 */   137,  138,  139,  140,  141,  142,  143,  144,  145,  156,
 /*  2280 */   106,  107,  108,  156,  156,  156,  112,  156,  156,  156,
 /*  2290 */   156,  156,  156,  156,  120,  156,  122,  123,  124,  125,
 /*  2300 */   126,  127,  128,  129,  130,  131,  132,  133,  134,  135,
 /*  2310 */   136,  137,  138,  139,  140,  141,  142,  143,  144,  145,
 /*  2320 */   106,  107,  108,  156,  156,  156,  112,  156,  156,  156,
 /*  2330 */   156,  156,  156,  156,  120,  156,  122,  123,  124,  125,
 /*  2340 */   126,  127,  128,  129,  130,  131,  132,  133,  134,  135,
 /*  2350 */   136,  137,  138,  139,  140,  141,  142,  143,  144,  145,
 /*  2360 */   106,  107,  108,  156,  156,  156,  112,  156,  156,  156,
 /*  2370 */   156,  156,  156,  156,  120,  156,  122,  123,  124,  125,
 /*  2380 */   126,  127,  128,  129,  130,  131,  132,  133,  134,  135,
 /*  2390 */   136,  137,  138,  139,  140,  141,  142,  143,  144,  145,
 /*  2400 */   156,  106,  107,  108,  156,  156,  156,  112,  156,  156,
 /*  2410 */   156,  156,  156,  156,  156,  120,  156,  122,  123,  124,
 /*  2420 */   125,  126,  127,  128,  129,  130,  131,  132,  133,  134,
 /*  2430 */   135,  136,  137,  138,  139,  140,  141,  142,  143,  144,
 /*  2440 */   145,  106,  107,  108,  156,  156,  156,  112,  156,  156,
 /*  2450 */   156,  156,  156,  156,  156,  120,  156,  122,  123,  124,
 /*  2460 */   125,  126,  127,  128,  129,  130,  131,  132,  133,  134,
 /*  2470 */   135,  136,  137,  138,  139,  140,  141,  142,  143,  144,
 /*  2480 */   145,  106,  107,  108,  156,  156,  156,  112,  156,  156,
 /*  2490 */   156,  156,  156,  156,  156,  120,  156,  122,  123,  124,
 /*  2500 */   125,  126,  127,  128,  129,  130,  131,  132,  133,  134,
 /*  2510 */   135,  136,  137,  138,  139,  140,  141,  142,  143,  144,
 /*  2520 */   145,  156,  106,  107,  108,  156,  156,  156,  112,  156,
 /*  2530 */   156,  156,  156,  156,  156,  156,  120,  156,  122,  123,
 /*  2540 */   124,  125,  126,  127,  128,  129,  130,  131,  132,  133,
 /*  2550 */   134,  135,  136,  137,  138,  139,  140,  141,  142,  143,
 /*  2560 */   144,  145,  106,  107,  108,  156,  156,  156,  112,  156,
 /*  2570 */   156,  156,  156,  156,  156,  156,  120,  156,  122,  123,
 /*  2580 */   124,  125,  126,  127,  128,  129,  130,  131,  132,  133,
 /*  2590 */   134,  135,  136,  137,  138,  139,  140,  141,  142,  143,
 /*  2600 */   144,  145,  106,  107,  108,  156,  156,  156,  112,  156,
 /*  2610 */   156,  156,  156,  156,  156,  156,  120,  156,  122,  123,
 /*  2620 */   124,  125,  126,  127,  128,  129,  130,  131,  132,  133,
 /*  2630 */   134,  135,  136,  137,  138,  139,  140,  141,  142,  143,
 /*  2640 */   144,  145,  156,  106,  107,  108,  156,  156,  156,  112,
 /*  2650 */   156,  156,  156,  156,  156,  156,  156,  120,  156,  122,
 /*  2660 */   123,  124,  125,  126,  127,  128,  129,  130,  131,  132,
 /*  2670 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*  2680 */   143,  144,  145,  106,  107,  108,  156,  156,  156,  112,
 /*  2690 */   156,  156,  156,  156,  156,  156,  156,  120,  156,  122,
 /*  2700 */   123,  124,  125,  126,  127,  128,  129,  130,  131,  132,
 /*  2710 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*  2720 */   143,  144,  145,  106,  107,  108,   17,   18,  156,  112,
 /*  2730 */   156,  156,  156,  156,  156,  156,  156,  120,  156,  122,
 /*  2740 */   123,  124,  125,  126,  127,  128,  129,  130,  131,  132,
 /*  2750 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*  2760 */   143,  144,  145,   86,   87,  156,  156,   58,   59,   60,
 /*  2770 */    61,   62,   63,   64,   65,   66,   67,   68,   69,  156,
 /*  2780 */   156,  156,  156,  106,  107,  156,  156,  156,  156,  112,
 /*  2790 */   156,  156,  156,  156,  156,  156,  156,  120,  156,  122,
 /*  2800 */   123,  124,  125,  126,  127,  128,  129,  130,  131,  132,
 /*  2810 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*  2820 */   143,  106,  107,  156,  156,  156,  156,  112,  156,  156,
 /*  2830 */   156,  156,  156,  156,  156,  120,  156,  122,  123,  124,
 /*  2840 */   125,  126,  127,  128,  129,  130,  131,  132,  133,  134,
 /*  2850 */   135,  136,  137,  138,  139,  140,  141,  142,  143,  156,
 /*  2860 */   145,  106,  107,  156,  156,  156,  156,  112,  156,  156,
 /*  2870 */   156,  156,  156,  156,  156,  120,  156,  122,  123,  124,
 /*  2880 */   125,  126,  127,  128,  129,  130,  131,  132,  133,  134,
 /*  2890 */   135,  136,  137,  138,  139,  140,  141,  142,  143,  156,
 /*  2900 */     6,    6,    8,    8,   10,   10,  106,  107,  156,  156,
 /*  2910 */   155,  156,  112,   19,   19,  156,  156,  156,  156,  156,
 /*  2920 */   120,  156,  122,  123,  124,  125,  126,  127,  128,  129,
 /*  2930 */   130,  131,  132,  133,  134,  135,  136,  137,  138,  139,
 /*  2940 */   140,  141,  142,  143,  156,  145,  106,  107,  156,  156,
 /*  2950 */   156,  156,  112,  156,  156,  156,  156,  156,  156,  156,
 /*  2960 */   120,  156,  122,  123,  124,  125,  126,  127,  128,  129,
 /*  2970 */   130,  131,  132,  133,  134,  135,  136,  137,  138,  139,
 /*  2980 */   140,  141,  142,  143,  156,  145,  106,  107,  156,  156,
 /*  2990 */   156,  156,  112,  156,  156,  156,  156,  156,  156,  156,
 /*  3000 */   120,  156,  122,  123,  124,  125,  126,  127,  128,  129,
 /*  3010 */   130,  131,  132,  133,  134,  135,  136,  137,  138,  139,
 /*  3020 */   140,  141,  142,  143,  144,  156,  156,  106,  107,  156,
 /*  3030 */   156,  156,  156,  112,  156,  156,  156,  156,  156,  156,
 /*  3040 */   156,  120,  156,  122,  123,  124,  125,  126,  127,  128,
 /*  3050 */   129,  130,  131,  132,  133,  134,  135,  136,  137,  138,
 /*  3060 */   139,  140,  141,  142,  143,  156,  156,  106,  107,  156,
 /*  3070 */   156,  156,  156,  112,  156,  156,  156,  156,  156,  156,
 /*  3080 */   156,  120,  156,  122,  123,  124,  125,  126,  127,  128,
 /*  3090 */   129,  130,  131,  132,  133,  134,  135,  136,  137,  138,
 /*  3100 */   139,  140,  141,  142,  143,  156,  156,  106,  107,  156,
 /*  3110 */   156,  156,  156,  112,  156,  156,  156,  156,  156,  156,
 /*  3120 */   156,  120,  156,  122,  123,  124,  125,  126,  127,  128,
 /*  3130 */   129,  130,  131,  132,  133,  134,  135,  136,  137,  138,
 /*  3140 */   139,  140,  141,  142,  143,  156,  156,  156,  106,  107,
 /*  3150 */   156,  156,  156,  156,  112,  156,  156,  156,  156,  156,
 /*  3160 */   156,  156,  120,  156,  122,  123,  124,  125,  126,  127,
 /*  3170 */   128,  129,  130,  131,  132,  133,  134,  135,  136,  137,
 /*  3180 */   138,  139,  140,  141,  142,  143,  156,  156,  106,  107,
 /*  3190 */   156,  156,  156,  156,  112,  156,  156,  156,  156,  156,
 /*  3200 */   156,  156,  120,  156,  122,  123,  124,  125,  126,  127,
 /*  3210 */   128,  129,  130,  131,  132,  133,  134,  135,  136,  137,
 /*  3220 */   138,  139,  140,  141,  142,  143,  156,  156,  106,  107,
 /*  3230 */   156,  156,  156,  156,  112,  156,  156,  156,  156,  156,
 /*  3240 */   156,  156,  120,  156,  122,  123,  124,  125,  126,  127,
 /*  3250 */   128,  129,  130,  131,  132,  133,  134,  135,  136,  137,
 /*  3260 */   138,  139,  140,  141,  142,  143,  156,  156,  156,  106,
 /*  3270 */   107,  156,  156,  156,  156,  112,  156,  156,  156,  156,
 /*  3280 */   156,  156,  156,  120,  156,  122,  123,  124,  125,  126,
 /*  3290 */   127,  128,  129,  130,  131,  132,  133,  134,  135,  136,
 /*  3300 */   137,  138,  139,  140,  141,  142,  143,  156,  156,  106,
 /*  3310 */   107,  156,  156,  156,  156,  112,  156,  156,  156,  156,
 /*  3320 */   156,  156,  156,  120,  156,  122,  123,  124,  125,  126,
 /*  3330 */   127,  128,  129,  130,  131,  132,  133,  134,  135,  136,
 /*  3340 */   137,  138,  139,  140,  141,  142,  143,  156,  156,  106,
 /*  3350 */   107,  156,  156,  156,  156,  112,  156,  156,  156,  156,
 /*  3360 */   156,  156,  156,  120,  156,  122,  123,  124,  125,  126,
 /*  3370 */   127,  128,  129,  130,  131,  132,  133,  134,  135,  136,
 /*  3380 */   137,  138,  139,  140,  141,  142,  143,  156,  156,  156,
 /*  3390 */   106,  107,  156,  156,  156,  156,  112,  156,  156,  156,
 /*  3400 */   156,  156,  156,  156,  120,  156,  122,  123,  124,  125,
 /*  3410 */   126,  127,  128,  129,  130,  131,  132,  133,  134,  135,
 /*  3420 */   136,  137,  138,  139,  140,  141,  142,  143,  156,  156,
 /*  3430 */   106,  107,  156,  156,  156,  156,  112,  156,  156,  156,
 /*  3440 */   156,  156,  156,  156,  120,  156,  122,  123,  124,  125,
 /*  3450 */   126,  127,  128,  129,  130,  131,  132,  133,  134,  135,
 /*  3460 */   136,  137,  138,  139,  140,  141,  142,  143,  156,  156,
 /*  3470 */   106,  107,  156,  156,  156,  156,  112,  156,  156,  156,
 /*  3480 */   156,  156,  156,  156,  120,  156,  122,  123,  124,  125,
 /*  3490 */   126,  127,  128,  129,  130,  131,  132,  133,  134,  135,
 /*  3500 */   136,  137,  138,  139,  140,  141,  142,  143,  156,  156,
 /*  3510 */   156,  106,  107,  156,  156,  156,  156,  112,  156,  156,
 /*  3520 */   156,  156,  156,  156,  156,  120,  156,  122,  123,  124,
 /*  3530 */   125,  126,  127,  128,  129,  130,  131,  132,  133,  134,
 /*  3540 */   135,  136,  137,  138,  139,  140,  141,  142,  143,  156,
 /*  3550 */   156,  106,  107,  156,  156,  156,  156,  112,  156,  156,
 /*  3560 */   156,  156,  156,  156,  156,  120,  156,  122,  123,  124,
 /*  3570 */   125,  126,  127,  128,  129,  130,  131,  132,  133,  134,
 /*  3580 */   135,  136,  137,  138,  139,  140,  141,  142,  143,  156,
 /*  3590 */   156,  106,  107,  156,  156,  156,  156,  112,  156,  156,
 /*  3600 */   156,  156,  156,  156,  156,  120,  156,  122,  123,  124,
 /*  3610 */   125,  126,  127,  128,  129,  130,  131,  132,  133,  134,
 /*  3620 */   135,  136,  137,  138,  139,  140,  141,  142,  143,  156,
 /*  3630 */   156,  156,  106,  107,  156,  156,  156,  156,  112,  156,
 /*  3640 */   156,  156,  156,  156,  156,  156,  120,  156,  122,  123,
 /*  3650 */   124,  125,  126,  127,  128,  129,  130,  131,  132,  133,
 /*  3660 */   134,  135,  136,  137,  138,  139,  140,  141,  142,  143,
 /*  3670 */   156,  156,  106,  107,  156,  156,  156,  156,  112,  156,
 /*  3680 */   156,  156,  156,  156,  156,  156,  120,  156,  122,  123,
 /*  3690 */   124,  125,  126,  127,  128,  129,  130,  131,  132,  133,
 /*  3700 */   134,  135,  136,  137,  138,  139,  140,  141,  142,  143,
 /*  3710 */   156,  156,  106,  107,  156,  156,  156,  156,  112,  156,
 /*  3720 */   156,  156,  156,  156,  156,  156,  120,  156,  122,  123,
 /*  3730 */   124,  125,  126,  127,  128,  129,  130,  131,  132,  133,
 /*  3740 */   134,  135,  136,  137,  138,  139,  140,  141,  142,  143,
 /*  3750 */   156,  156,  156,  106,  107,  156,  156,  156,  156,  112,
 /*  3760 */   156,  156,  156,  156,  156,  156,  156,  120,  156,  122,
 /*  3770 */   123,  124,  125,  126,  127,  128,  129,  130,  131,  132,
 /*  3780 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*  3790 */   143,  156,  156,  106,  107,  156,  156,  156,  156,  112,
 /*  3800 */   156,  156,  156,  156,  156,  156,  156,  120,  156,  122,
 /*  3810 */   123,  124,  125,  126,  127,  128,  129,  130,  131,  132,
 /*  3820 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*  3830 */   143,  156,  156,  106,  107,  156,  156,  156,  156,  112,
 /*  3840 */   156,  156,  156,  156,  156,  156,  156,  120,  156,  122,
 /*  3850 */   123,  124,  125,  126,  127,  128,  129,  130,  131,  132,
 /*  3860 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*  3870 */   143,  156,  156,  156,  106,  107,  156,  156,  156,  156,
 /*  3880 */   112,  156,  156,  156,  156,  156,  156,  156,  120,  156,
 /*  3890 */   122,  123,  124,  125,  126,  127,  128,  129,  130,  131,
 /*  3900 */   132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
 /*  3910 */   142,  143,  156,  156,  106,  107,  156,  156,  156,  156,
 /*  3920 */   112,  156,  156,  156,  156,  156,  156,  156,  120,  156,
 /*  3930 */   122,  123,  124,  125,  126,  127,  128,  129,  130,  131,
 /*  3940 */   132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
 /*  3950 */   142,  143,  156,  156,  106,  107,  156,  156,  156,  156,
 /*  3960 */   112,  156,  156,  156,  156,  156,  156,  156,  120,  156,
 /*  3970 */   122,  123,  124,  125,  126,  127,  128,  129,  130,  131,
 /*  3980 */   132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
 /*  3990 */   142,  143,  156,  156,  156,  106,  107,  156,  156,  156,
 /*  4000 */   156,  112,  156,  156,  156,  156,  156,  156,  156,  120,
 /*  4010 */   156,  122,  123,  124,  125,  126,  127,  128,  129,  130,
 /*  4020 */   131,  132,  133,  134,  135,  136,  137,  138,  139,  140,
 /*  4030 */   141,  142,  143,  156,  156,  106,  107,  156,  156,  156,
 /*  4040 */   156,  112,  156,  156,  156,  156,  156,  156,  156,  120,
 /*  4050 */   156,  122,  123,  124,  125,  126,  127,  128,  129,  130,
 /*  4060 */   131,  132,  133,  134,  135,  136,  137,  138,  139,  140,
 /*  4070 */   141,  142,  143,    6,    7,    8,    9,   10,  156,  156,
 /*  4080 */    13,   14,  156,   16,  156,  156,   19,  156,   21,   22,
 /*  4090 */    23,   24,   25,   26,   27,   28,   29,   30,   31,   32,
 /*  4100 */    43,   44,   45,   46,   47,   48,   49,   50,   51,   52,
 /*  4110 */   156,  156,  156,  156,  156,  156,   17,   18,  156,  156,
 /*  4120 */   156,  156,  156,   56,   57,  156,  156,  156,  156,  156,
 /*  4130 */     6,    7,    8,    9,   10,  156,  156,   13,   14,  156,
 /*  4140 */    16,  156,  156,   19,  156,   21,   22,   23,   24,   25,
 /*  4150 */    26,   27,   28,   29,   30,   31,   32,   58,   59,   60,
 /*  4160 */    61,   62,   63,   64,   65,   66,   67,   68,   69,  156,
 /*  4170 */   156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  4180 */    56,   57,  156,  156,  156,  156,  156,    6,  156,    8,
 /*  4190 */     9,   10,  156,  156,   13,   14,   15,  156,  156,  156,
 /*  4200 */    19,  156,   21,   22,   23,   24,   25,   26,   27,   28,
 /*  4210 */    29,   30,   31,   32,  106,  107,  156,  109,  110,  156,
 /*  4220 */   156,  113,  114,  115,  116,  117,  118,  156,  156,  156,
 /*  4230 */   156,  156,  156,  156,  156,  156,  156,   56,   57,  156,
 /*  4240 */   156,  156,  156,  156,    6,  156,    8,    9,   10,  156,
 /*  4250 */   156,   13,   14,   15,  156,  156,  156,   19,  156,   21,
 /*  4260 */    22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
 /*  4270 */    32,  156,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  4280 */   156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  4290 */   156,  156,  156,  156,   56,   57,  156,  156,  156,  156,
 /*  4300 */   156,    6,  156,    8,    9,   10,  156,  156,   13,   14,
 /*  4310 */   156,   16,  156,  156,   19,  156,   21,   22,   23,   24,
 /*  4320 */    25,   26,   27,   28,   29,   30,   31,   32,  156,  156,
 /*  4330 */   156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  4340 */   156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  4350 */   156,   56,   57,  156,  156,  156,  156,  156,    6,  156,
 /*  4360 */     8,    9,   10,  156,  156,   13,   14,  156,  156,  156,
 /*  4370 */   156,   19,   20,   21,   22,   23,   24,   25,   26,   27,
 /*  4380 */    28,   29,   30,   31,   32,  156,  156,  156,  156,  156,
 /*  4390 */   156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  4400 */   156,  156,  156,  156,  156,  156,  156,  156,   56,   57,
 /*  4410 */   156,  156,  156,  156,  156,    6,  156,    8,    9,   10,
 /*  4420 */   156,  156,   13,   14,  156,  156,  156,  156,   19,   20,
 /*  4430 */    21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
 /*  4440 */    31,   32,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  4450 */   156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  4460 */   156,  156,  156,  156,  156,   56,  156,  156,  156,  156,
 /*  4470 */   156,  156,    6,  156,    8,    9,   10,  156,  156,   13,
 /*  4480 */    14,  156,  156,  156,  156,   19,   20,   21,   22,   23,
 /*  4490 */    24,   25,   26,   27,   28,   29,   30,   31,   32,  156,
 /*  4500 */   156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  4510 */   156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  4520 */   156,  156,   56,  156,  156,  156,  156,  156,  156,    6,
 /*  4530 */   156,    8,    9,   10,  156,  156,   13,   14,  156,  156,
 /*  4540 */   156,  156,   19,   20,   21,   22,   23,   24,   25,   26,
 /*  4550 */    27,   28,   29,   30,   31,   32,  156,  156,  156,  156,
 /*  4560 */   156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  4570 */   156,  156,  156,  156,  156,  156,  156,  156,  156,   56,
 /*  4580 */   156,  156,  156,  156,  156,  156,    6,  156,    8,    9,
 /*  4590 */    10,  156,  156,   13,   14,  156,  156,  156,  156,   19,
 /*  4600 */   156,   21,   22,   23,   24,   25,   26,   27,   28,   29,
 /*  4610 */    30,   31,   32,  156,  156,  156,  156,  156,  156,  156,
 /*  4620 */   156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  4630 */   156,  156,  156,  156,  156,  156,   56,   57,  156,  156,
 /*  4640 */   156,  156,  156,    6,  156,    8,    9,   10,  156,  156,
 /*  4650 */    13,   14,  156,  156,  156,  156,   19,   20,   21,   22,
 /*  4660 */    23,   24,   25,   26,   27,   28,   29,   30,   31,   32,
 /*  4670 */   156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  4680 */   156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  4690 */   156,  156,  156,   56,  156,  156,  156,  156,  156,  156,
 /*  4700 */     6,  156,    8,    9,   10,  156,  156,   13,   14,  156,
 /*  4710 */    16,  156,  156,   19,  156,   21,   22,   23,   24,   25,
 /*  4720 */    26,   27,   28,   29,   30,   31,   32,  156,  156,  156,
 /*  4730 */   156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  4740 */   156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  4750 */    56,  156,  156,  156,  156,  156,  156,    6,  156,    8,
 /*  4760 */     9,   10,  156,  156,   13,   14,  156,  156,  156,  156,
 /*  4770 */    19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
 /*  4780 */    29,   30,   31,   32,  156,  156,  156,  156,  156,  156,
 /*  4790 */   156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  4800 */   156,  156,  156,  156,  156,  156,  156,   56,  156,  156,
 /*  4810 */   156,  156,  156,  156,    6,  156,    8,    9,   10,  156,
 /*  4820 */   156,   13,   14,  156,  156,  156,  156,   19,   20,   21,
 /*  4830 */    22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
 /*  4840 */    32,  156,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  4850 */   156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  4860 */   156,  156,  156,  156,   56,  156,  156,  156,  156,  156,
 /*  4870 */   156,    6,  156,    8,    9,   10,  156,  156,   13,   14,
 /*  4880 */   156,  156,  156,  156,   19,   20,   21,   22,   23,   24,
 /*  4890 */    25,   26,   27,   28,   29,   30,   31,   32,  156,  156,
 /*  4900 */   156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  4910 */   156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  4920 */   156,   56,  156,  156,  156,  156,  156,  156,    6,  156,
 /*  4930 */     8,    9,   10,  156,   12,   13,   14,  156,  156,  156,
 /*  4940 */   156,   19,  156,   21,   22,   23,   24,   25,   26,   27,
 /*  4950 */    28,   29,   30,   31,   32,  156,  156,  156,  156,  156,
 /*  4960 */   156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
 /*  4970 */   156,  156,  156,  156,  156,  156,  156,  156,   56,  156,
 /*  4980 */   106,  107,  156,  156,  156,  156,  112,  156,  156,  156,
 /*  4990 */   156,  156,  156,  156,  120,  156,  156,  123,  124,  125,
 /*  5000 */   126,  127,  128,  129,  130,  131,  132,  133,  134,  135,
 /*  5010 */   136,  137,  138,  139,    6,  156,    8,    9,   10,  156,
 /*  5020 */   156,   13,   14,  156,  156,  156,  156,   19,  156,   21,
 /*  5030 */    22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
 /*  5040 */    32,  156,  156,  156,  156,  156,  156,  156,  106,  107,
 /*  5050 */   156,  156,  156,  156,  112,  156,  156,  156,  156,  156,
 /*  5060 */   156,  156,  120,  156,   56,  123,  124,  125,  126,  127,
 /*  5070 */   128,  129,  130,  131,  132,  133,  134,  135,  136,  137,
 /*  5080 */   138,  156,  156,  156,  156,  106,  107,  156,  156,  156,
 /*  5090 */   156,  112,  156,  156,  156,  156,  156,  156,  156,  120,
 /*  5100 */   156,  156,  123,  124,  125,  126,  127,  128,  129,  130,
 /*  5110 */   131,  132,  133,  134,  135,  136,  137,  106,  107,  156,
 /*  5120 */   156,  156,  156,  112,  156,  156,  156,  156,  156,  156,
 /*  5130 */   156,  120,  156,  156,  123,  124,  125,  126,  127,  128,
 /*  5140 */   129,  130,  131,  132,  133,  134,  135,  136,  156,  156,
 /*  5150 */   156,  156,  156,  156,  156,  106,  107,  156,  156,  156,
 /*  5160 */   156,  112,  156,  156,  156,  156,  156,  156,  156,  120,
 /*  5170 */   156,  156,  123,  124,  125,  126,  127,  128,  129,  130,
 /*  5180 */   131,  132,  133,  134,  135,  136,  106,  107,  156,  156,
 /*  5190 */   156,  156,  112,  156,  156,  156,  156,  156,  156,  156,
 /*  5200 */   120,  156,  156,  123,  124,  125,  126,  127,  128,  129,
 /*  5210 */   130,  131,  132,  133,  134,  135,  136,  106,  107,  156,
 /*  5220 */   156,  156,  156,  112,  156,  156,  156,  156,  156,  156,
 /*  5230 */   156,  120,  156,  156,  123,  124,  125,  126,  127,  128,
 /*  5240 */   129,  130,  131,  132,  133,  134,  135,  136,  106,  107,
 /*  5250 */   156,  156,  156,  156,  112,  156,  156,  156,  156,  156,
 /*  5260 */   156,  156,  120,  156,  156,  123,  124,  125,  126,  127,
 /*  5270 */   128,  129,  130,  131,  132,  133,  134,  135,  136,  106,
 /*  5280 */   107,  156,  156,  156,  156,  112,  156,  156,  156,  156,
 /*  5290 */   156,  156,  156,  120,  156,  156,  123,  124,  125,  126,
 /*  5300 */   127,  128,  129,  130,  131,  132,  133,  134,  135,  136,
 /*  5310 */   106,  107,  156,  156,  156,  156,  112,  156,  156,  156,
 /*  5320 */   156,  156,  156,  156,  120,  156,  156,  123,  124,  125,
 /*  5330 */   126,  127,  128,  129,  130,  131,  132,  133,  134,  135,
 /*  5340 */   136,  106,  107,  156,  156,  156,  156,  112,  156,  156,
 /*  5350 */   156,  156,  156,  156,  156,  120,  156,  156,  123,  124,
 /*  5360 */   125,  126,  127,  128,  129,  130,  131,  132,  133,  134,
 /*  5370 */   135,  136,  106,  107,  156,  156,  156,  156,  112,  156,
 /*  5380 */   156,  156,  156,  156,  156,  156,  120,  156,  156,  123,
 /*  5390 */   124,  125,  126,  127,  128,  129,  130,  131,  132,  133,
 /*  5400 */   134,  135,  136,  106,  107,  156,  156,  156,  156,  112,
 /*  5410 */   156,  156,  156,  156,  156,  156,  156,  120,  156,  156,
 /*  5420 */   123,  124,  125,  126,  127,  128,  129,  130,  131,  132,
 /*  5430 */   133,  134,  135,  136,  106,  107,  156,  156,  156,  156,
 /*  5440 */   112,  156,  156,  156,  156,  156,  156,  156,  120,  156,
 /*  5450 */   156,  123,  124,  125,  126,  127,  128,  129,  130,  131,
 /*  5460 */   132,  133,  134,  135,    6,  156,    8,    9,  156,  156,
 /*  5470 */   156,  156,  156,  156,  156,  156,  156,  156,  156,   21,
 /*  5480 */    22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
 /*  5490 */    32,  156,  156,  106,  107,  156,  156,  156,  156,  112,
 /*  5500 */   156,  156,  156,  106,  107,  156,  156,  120,  156,  112,
 /*  5510 */   123,  124,  125,  126,  127,  128,  129,  120,  156,  156,
 /*  5520 */   123,  124,  125,  126,  127,  128,  129,  106,  107,  156,
 /*  5530 */   156,  156,  156,  112,  156,  156,  156,  106,  107,  156,
 /*  5540 */   156,  120,  156,  112,  123,  124,  125,  126,  127,  128,
 /*  5550 */   129,  120,  156,  156,  123,  124,  125,  126,  127,  128,
 /*  5560 */   129,  106,  107,  156,  156,  156,  156,  112,  156,  156,
 /*  5570 */   156,  106,  107,  156,  156,  120,  156,  112,  123,  124,
 /*  5580 */   125,  126,  127,  128,  129,  120,  156,  156,  123,  124,
 /*  5590 */   125,  126,  127,  128,  129,  106,  107,  156,  156,  156,
 /*  5600 */   156,  112,  156,  156,  156,  156,  156,  156,  156,  120,
 /*  5610 */   156,  156,  123,  124,  125,  126,  127,  128,  129,  106,
 /*  5620 */   107,  156,  156,  156,  156,  112,  156,  156,  156,  106,
 /*  5630 */   107,  156,  156,  120,  156,  112,  123,  124,  125,  126,
 /*  5640 */   127,  128,  129,  120,  156,  156,  123,  124,  125,  126,
 /*  5650 */   127,  128,  129,  106,  107,  156,  156,  156,  156,  112,
 /*  5660 */   156,  156,  156,  156,  156,  156,  156,  120,  156,  156,
 /*  5670 */   123,  124,  125,  126,  127,  128,  129,
};
#define YY_SHIFT_USE_DFLT (-30)
#define YY_SHIFT_MAX 309
static const short yy_shift_ofst[] = {
 /*     0 */   -30,  925, 1246, 1086, 1006, 1326, 1166, 1486, 1486, 1486,
 /*    10 */  1406, 1486, 1406, 1406, 1406, 1486, 1406, 1406, 1406, 1406,
 /*    20 */  4067, 4067, 4067, 4124, 4295, 4295, 4295, 4580, 4580, 4580,
 /*    30 */  4580, 4580, 4580, 4238, 4352, 4181, 4580, 4580, 4580, 4580,
 /*    40 */  4580, 4580, 4580, 4580, 4580, 4580, 4580, 4580, 4580, 4922,
 /*    50 */  4580, 4580, 4694, 4580, 5008, 4865, 4808, 4751, 4637, 4409,
 /*    60 */  4523, 4466, 5008, 5008, 5008, 5008, 5008, 5008, 5008, 5008,
 /*    70 */  5008, 5008, 5008, 5008, 5008, 5008, 5008, 5008, 5008, 5008,
 /*    80 */  5008, 5008, 5008, 5008, 5008, 5008, 5008, 5008, 5458, 5458,
 /*    90 */  5458, 5458, 5458, 5458, 5458, 5458, 5458, 5458, 5458, 5458,
 /*   100 */  5458, 5458, 5458, 5458, 5458, 5458, 5458, 5458, 5458, 5458,
 /*   110 */  5458, 5458, 5458, 5458, 5458, 5458, 5458, 5458, 5458, 5458,
 /*   120 */     4,  203, 1356, 1356, 1002, 1002, 1002,  145,  257,  186,
 /*   130 */  2087, 2709, 4099,  511,  385,  446,  385,  385,  -30,  -30,
 /*   140 */   -30,  -30,  -30,  -30,  -30, 4057, 4057, 1353, 1515, 1433,
 /*   150 */  1432,  961,  929,  929,  929, 1516, 2895,   65, 2894,   81,
 /*   160 */   346,   15,  214,  412,  280,  148,  677,  612,   91,   91,
 /*   170 */   479,  545,  298,    8,  339,  405,   80,  288,  298,  472,
 /*   180 */   147,  298,  298,  375,  538,  375,  605,  462,  279,   20,
 /*   190 */   670,  382,   23,  123,  144,  114,  134,   79,   77,   39,
 /*   200 */    16,   39,  -29,   16,   23,  -29,   23,   23,   23,   23,
 /*   210 */    23,   23,   23,   23,   23,  113,  135,  113,  135,  212,
 /*   220 */   235,  287,  308,  332,  347,  372,  393,  404,  420,  447,
 /*   230 */   452,  428,  468,  486,  512,  517,  529,  528,  547,  568,
 /*   240 */   583,  114,  594,  598,  613,  645,  648,  667,  682,  687,
 /*   250 */   712,  669,  735,  733,  737,  747,  746,  773,  778,  792,
 /*   260 */   795,  801,  805,  811,  834,  847,  861,  864,  868,  873,
 /*   270 */   875,  878,  909,   -7,  913,  901,  881,  872,  871,  866,
 /*   280 */   814,  799,  836,  809,  804,  761,  802,  789,  785,  732,
 /*   290 */   726,  749,  734,  730,  690,  729,  704,  698,  621,  671,
 /*   300 */   654,  647,  619,  606,  599,  578,  536,  534,  552,  530,
};
#define YY_REDUCE_USE_DFLT (-89)
#define YY_REDUCE_MAX 144
static const short yy_reduce_ofst[] = {
 /*     0 */   173,   45,   45,   45,   45,   45,   45,  509,  574,  639,
 /*    10 */   705,  -88,  771,  111,  177,  376,  309,  243,  -22,  442,
 /*    20 */  1588, 1543, 1503, 1463, 1628, 1709, 1668, 1789, 1951, 1870,
 /*    30 */  1830, 1910, 1749, 2537, 2053, 2617, 2375, 2133, 2335, 2496,
 /*    40 */  2577, 2295, 2214, 2093, 2456, 2416, 1991, 2254, 2174, 2677,
 /*    50 */  2800, 2715, 2755, 2840, 2880, 3284, 3203, 3163, 3122, 3042,
 /*    60 */  2961, 3768, 3929, 3848, 3768, 3727, 3647, 3566, 3606, 3687,
 /*    70 */  3203, 3808, 3889, 2961, 2921, 3001, 3082, 3042, 3122, 3243,
 /*    80 */  3284, 3324, 3364, 3405, 3445, 3163, 3485, 3526, 4874, 4942,
 /*    90 */  4979, 5204, 5266, 5297, 5142, 5011, 5111, 5173, 5080, 5235,
 /*   100 */  5049, 5328,  860,  941, 1021, 1101, 1181, 1261, 1421, 1341,
 /*   110 */  5489, 5513, 5523, 5547, 5387, 5465, 5397, 5421, 5431, 5455,
 /*   120 */  4108, 4108, 1174,  853, 1094, 1014,  934,  -39,  181,  110,
 /*   130 */   459,  459,  443,  389,  341,  364,  311,  245,  246,  221,
 /*   140 */   193,  149,  121,  106,   93,
};
static const YYACTIONTYPE yy_default[] = {
 /*     0 */   682,  741,  741,  741,  741,  741,  741,  741,  741,  741,
 /*    10 */   741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
 /*    20 */   741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
 /*    30 */   741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
 /*    40 */   741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
 /*    50 */   741,  664,  741,  741,  741,  741,  741,  741,  741,  741,
 /*    60 */   741,  741,  741,  741,  741,  741,  741,  669,  741,  741,
 /*    70 */   741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
 /*    80 */   741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
 /*    90 */   741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
 /*   100 */   741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
 /*   110 */   741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
 /*   120 */   741,  741,  741,  741,  741,  741,  741,  741,  728,  741,
 /*   130 */   642,  642,  673,  741,  741,  741,  741,  741,  682,  682,
 /*   140 */   682,  504,  504,  682,  682,  605,  606,  550,  550,  554,
 /*   150 */   549,  741,  581,  580,  579,  552,  554,  741,  550,  555,
 /*   160 */   551,  549,  549,  553,  741,  553,  555,  551,  587,  586,
 /*   170 */   552,  741,  582,  741,  741,  741,  741,  611,  585,  741,
 /*   180 */   741,  584,  583,  741,  741,  516,  741,  741,  511,  741,
 /*   190 */   741,  567,  597,  741,  741,  741,  741,  741,  741,  588,
 /*   200 */   590,  589,  592,  591,  594,  593,  595,  596,  598,  599,
 /*   210 */   600,  601,  602,  603,  604,  607,  609,  608,  610,  741,
 /*   220 */   741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
 /*   230 */   741,  741,  741,  741,  741,  741,  741,  668,  741,  642,
 /*   240 */   741,  739,  741,  741,  741,  741,  741,  741,  741,  741,
 /*   250 */   741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
 /*   260 */   741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
 /*   270 */   741,  741,  741,  740,  741,  741,  741,  741,  741,  738,
 /*   280 */   741,  556,  663,  661,  741,  741,  741,  741,  741,  741,
 /*   290 */   557,  741,  741,  741,  741,  741,  741,  741,  741,  741,
 /*   300 */   741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
 /*   310 */   688,  545,  618,  524,  639,  700,  617,  701,  515,  702,
 /*   320 */   536,  520,  513,  703,  514,  633,  704,  630,  705,  706,
 /*   330 */   512,  510,  509,  707,  508,  526,  708,  532,  709,  543,
 /*   340 */   710,  557,  711,  507,  712,  522,  713,  506,  714,  541,
 /*   350 */   715,  505,  540,  716,  717,  718,  719,  720,  721,  519,
 /*   360 */   501,  503,  502,  614,  542,  724,  613,  636,  725,  612,
 /*   370 */   578,  638,  722,  577,  527,  723,  531,  576,  537,  575,
 /*   380 */   499,  726,  538,  727,  574,  573,  729,  572,  571,  730,
 /*   390 */   570,  731,  732,  534,  569,  568,  566,  565,  734,  500,
 /*   400 */   564,  539,  563,  735,  529,  562,  637,  561,  736,  560,
 /*   410 */   631,  737,  733,  699,  634,  635,  530,  632,  629,  615,
 /*   420 */   659,  521,  559,  660,  665,  523,  662,  558,  535,  649,
 /*   430 */   650,  651,  652,  653,  654,  655,  656,  657,  658,  648,
 /*   440 */   671,  674,  647,  646,  670,  644,  645,  676,  672,  675,
 /*   450 */   683,  616,  517,  684,  685,  686,  690,  548,  691,  692,
 /*   460 */   693,  498,  694,  640,  695,  528,  518,  641,  643,  677,
 /*   470 */   678,  679,  628,  680,  681,  533,  627,  696,  626,  697,
 /*   480 */   547,  667,  525,  666,  689,  625,  624,  698,  544,  623,
 /*   490 */   546,  622,  620,  621,  687,  619,  556,
};
#define YY_SZ_ACTTAB (int)(sizeof(yy_action)/sizeof(yy_action[0]))

/* The next table maps tokens into fallback tokens.  If a construct
** like the following:
** 
**      %fallback ID X Y Z.
**
** appears in the grammar, then ID becomes a fallback token for X, Y,
** and Z.  Whenever one of the tokens X, Y, or Z is input to the parser
** but it does not parse, the type of the token is changed to ID and
** the parse is retried before an error is thrown.
*/
#ifdef YYFALLBACK
static const YYCODETYPE yyFallback[] = {
};
#endif /* YYFALLBACK */

/* The following structure represents a single element of the
** parser's stack.  Information stored includes:
**
**   +  The state number for the parser at this level of the stack.
**
**   +  The value of the token stored at this level of the stack.
**      (In other words, the "major" token.)
**
**   +  The semantic value stored at this level of the stack.  This is
**      the information used by the action routines in the grammar.
**      It is sometimes called the "minor" token.
*/
struct yyStackEntry {
  YYACTIONTYPE stateno;  /* The state-number */
  YYCODETYPE major;      /* The major token value.  This is the code
                         ** number for the token at this stack level */
  YYMINORTYPE minor;     /* The user-supplied minor token value.  This
                         ** is the value of the token  */
};
typedef struct yyStackEntry yyStackEntry;

/* The state of the parser is completely contained in an instance of
** the following structure */
struct yyParser {
  int yyidx;                    /* Index of top element in stack */
#ifdef YYTRACKMAXSTACKDEPTH
  int yyidxMax;                 /* Maximum value of yyidx */
#endif
  int yyerrcnt;                 /* Shifts left before out of the error */
  XecParseARG_SDECL                /* A place to hold %extra_argument */
#if YYSTACKDEPTH<=0
  int yystksz;                  /* Current side of the stack */
  yyStackEntry *yystack;        /* The parser's stack */
#else
  yyStackEntry yystack[YYSTACKDEPTH];  /* The parser's stack */
#endif
};
typedef struct yyParser yyParser;

#ifndef NDEBUG
#include <stdio.h>
static FILE *yyTraceFILE = 0;
static char *yyTracePrompt = 0;
#endif /* NDEBUG */

#ifndef NDEBUG
/* 
** Turn parser tracing on by giving a stream to which to write the trace
** and a prompt to preface each trace message.  Tracing is turned off
** by making either argument NULL 
**
** Inputs:
** <ul>
** <li> A FILE* to which trace output should be written.
**      If NULL, then tracing is turned off.
** <li> A prefix string written at the beginning of every
**      line of trace output.  If NULL, then tracing is
**      turned off.
** </ul>
**
** Outputs:
** None.
*/
void XecParseTrace(FILE *TraceFILE, char *zTracePrompt){
  yyTraceFILE = TraceFILE;
  yyTracePrompt = zTracePrompt;
  if( yyTraceFILE==0 ) yyTracePrompt = 0;
  else if( yyTracePrompt==0 ) yyTraceFILE = 0;
}
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing shifts, the names of all terminals and nonterminals
** are required.  The following table supplies these names */
static const char *const yyTokenName[] = { 
  "$",             "IF",            "ELSE",          "TRY",         
  "CATCH",         "FINALLY",       "YIELD",         "USING",       
  "LPN",           "IDENTIFIER",    "PERIOD",        "RPN",         
  "RBR",           "LBR",           "COLON",         "SEMICOLON",   
  "VAR",           "ASSIGN",        "COMMA",         "LSQ",         
  "RSQ",           "NEW",           "NULL",          "TRUE",        
  "FALSE",         "NUMBER",        "STRING",        "INCREMENT",   
  "DECREMENT",     "PLUS",          "MINUS",         "XMARK",       
  "TILDE",         "ASTERISK",      "SOLIDUS",       "PERCENT",     
  "LSHIFT",        "RSHIFT",        "URSHIFT",       "AMPERSAND",   
  "CARET",         "VBAR",          "CONCATENATE",   "EQUAL",       
  "NOTEQUAL",      "LESS",          "GREATER",       "LESSEQUAL",   
  "GREATEREQUAL",  "IN",            "NOTIN",         "IS",          
  "NOTIS",         "LOGICAND",      "LOGICXOR",      "LOGICOR",     
  "QMARK",         "ELLIPSIS",      "MULASSIGN",     "DIVASSIGN",   
  "MODASSIGN",     "INTDIVASSIGN",  "ADDASSIGN",     "SUBASSIGN",   
  "LSHIFTASSIGN",  "RSHIFTASSIGN",  "URSHIFTASSIGN",  "BITANDASSIGN",
  "BITXORASSIGN",  "BITORASSIGN",   "WHILE",         "DELETE",      
  "CASE",          "DEFAULT",       "CONTINUE",      "BREAK",       
  "RETURN",        "THROW",         "SWITCH",        "DO",          
  "FOR",           "EACHKEY",       "error",         "assign_op",   
  "value_lbody",   "value_list",    "keyval_lbody",  "keyval_list", 
  "stmt_lbr",      "stmt_lbr_ru",   "stmt_if",       "stmt_switch", 
  "stmt_while",    "stmt_do",       "scope_for",     "stmt_foreach",
  "stmt_for",      "stmt_uscope",   "try_block",     "try_catch",   
  "catch",         "stmt_catch",    "token_yield",   "token_using", 
  "script",        "stmt_list",     "name",          "proto",       
  "expr_list",     "decl_object",   "object_lbr",    "object_decls",
  "expr_simple",   "object_decl",   "decl_func",     "decl_proto",  
  "decl_var",      "decl_noinit",   "func_lbr",      "varname_list",
  "expr_index",    "expr_assign",   "expr_value",    "expr_yield",  
  "expr_new",      "expr_call",     "expr_postfix",  "expr_literal",
  "expr_suffix",   "expr_unary",    "expr_mul",      "expr_add",    
  "expr_shift",    "expr_bitand",   "expr_bitxor",   "expr_bitor",  
  "expr_concat",   "expr_compare",  "expr_and",      "expr_xor",    
  "expr_or",       "expr_nolbr",    "newobj_lbr",    "newfunc_lbr", 
  "expr_lbody",    "expr_final",    "sexpr_lbody",   "sexpr_list",  
  "sexpr_assign",  "cond_using",    "condition",     "stmt",        
  "stmt_common",   "stmt_reuse",    "stmt_try",      "decl_catch",  
};
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing reduce actions, the names of all rules are required.
*/
static const char *const yyRuleName[] = {
 /*   0 */ "script ::= stmt_list",
 /*   1 */ "name ::= IDENTIFIER",
 /*   2 */ "name ::= name PERIOD IDENTIFIER",
 /*   3 */ "proto ::= name LPN expr_list RPN",
 /*   4 */ "decl_object ::= object_lbr object_decls RBR",
 /*   5 */ "object_lbr ::= name LBR",
 /*   6 */ "object_lbr ::= name COLON expr_simple LBR",
 /*   7 */ "object_decls ::=",
 /*   8 */ "object_decls ::= object_decls object_decl",
 /*   9 */ "object_decl ::= decl_object",
 /*  10 */ "object_decl ::= decl_func",
 /*  11 */ "object_decl ::= decl_proto SEMICOLON",
 /*  12 */ "object_decl ::= decl_var SEMICOLON",
 /*  13 */ "object_decl ::= decl_noinit SEMICOLON",
 /*  14 */ "decl_proto ::= proto",
 /*  15 */ "decl_proto ::= proto YIELD",
 /*  16 */ "decl_func ::= func_lbr stmt_list RBR",
 /*  17 */ "func_lbr ::= proto LBR",
 /*  18 */ "decl_var ::= VAR varname_list ASSIGN expr_list",
 /*  19 */ "decl_noinit ::= VAR varname_list",
 /*  20 */ "varname_list ::= IDENTIFIER",
 /*  21 */ "varname_list ::= varname_list COMMA IDENTIFIER",
 /*  22 */ "expr_index ::= LPN expr_assign RPN",
 /*  23 */ "expr_index ::= name PERIOD LSQ expr_value RSQ",
 /*  24 */ "expr_index ::= name LSQ expr_value RSQ",
 /*  25 */ "expr_index ::= expr_index PERIOD IDENTIFIER",
 /*  26 */ "expr_index ::= expr_index PERIOD LSQ expr_value RSQ",
 /*  27 */ "expr_index ::= expr_index LSQ expr_value RSQ",
 /*  28 */ "expr_yield ::= YIELD LPN expr_list RPN",
 /*  29 */ "expr_new ::= NEW name LPN expr_list RPN",
 /*  30 */ "expr_new ::= NEW expr_index LPN expr_list RPN",
 /*  31 */ "expr_call ::= proto LPN expr_list RPN",
 /*  32 */ "expr_call ::= expr_index LPN expr_list RPN",
 /*  33 */ "expr_call ::= expr_yield LPN expr_list RPN",
 /*  34 */ "expr_call ::= expr_new LPN expr_list RPN",
 /*  35 */ "expr_call ::= expr_call LPN expr_list RPN",
 /*  36 */ "expr_call ::= expr_postfix LPN expr_list RPN",
 /*  37 */ "expr_postfix ::= proto PERIOD IDENTIFIER",
 /*  38 */ "expr_postfix ::= proto PERIOD LSQ expr_value RSQ",
 /*  39 */ "expr_postfix ::= proto LSQ expr_value RSQ",
 /*  40 */ "expr_postfix ::= expr_yield PERIOD IDENTIFIER",
 /*  41 */ "expr_postfix ::= expr_yield PERIOD LSQ expr_value RSQ",
 /*  42 */ "expr_postfix ::= expr_yield LSQ expr_value RSQ",
 /*  43 */ "expr_postfix ::= expr_new PERIOD IDENTIFIER",
 /*  44 */ "expr_postfix ::= expr_new PERIOD LSQ expr_value RSQ",
 /*  45 */ "expr_postfix ::= expr_new LSQ expr_value RSQ",
 /*  46 */ "expr_postfix ::= expr_call PERIOD IDENTIFIER",
 /*  47 */ "expr_postfix ::= expr_call PERIOD LSQ expr_value RSQ",
 /*  48 */ "expr_postfix ::= expr_call LSQ expr_value RSQ",
 /*  49 */ "expr_postfix ::= expr_postfix PERIOD IDENTIFIER",
 /*  50 */ "expr_postfix ::= expr_postfix PERIOD LSQ expr_value RSQ",
 /*  51 */ "expr_postfix ::= expr_postfix LSQ expr_value RSQ",
 /*  52 */ "expr_simple ::= name",
 /*  53 */ "expr_simple ::= proto",
 /*  54 */ "expr_simple ::= expr_index",
 /*  55 */ "expr_simple ::= expr_yield",
 /*  56 */ "expr_simple ::= expr_new",
 /*  57 */ "expr_simple ::= expr_call",
 /*  58 */ "expr_simple ::= expr_postfix",
 /*  59 */ "expr_simple ::= proto YIELD",
 /*  60 */ "expr_simple ::= expr_call YIELD",
 /*  61 */ "expr_literal ::= expr_simple",
 /*  62 */ "expr_literal ::= NULL",
 /*  63 */ "expr_literal ::= TRUE",
 /*  64 */ "expr_literal ::= FALSE",
 /*  65 */ "expr_literal ::= NUMBER",
 /*  66 */ "expr_literal ::= STRING",
 /*  67 */ "expr_suffix ::= expr_literal",
 /*  68 */ "expr_suffix ::= expr_suffix INCREMENT",
 /*  69 */ "expr_suffix ::= expr_suffix DECREMENT",
 /*  70 */ "expr_unary ::= expr_suffix",
 /*  71 */ "expr_unary ::= PLUS expr_unary",
 /*  72 */ "expr_unary ::= MINUS expr_unary",
 /*  73 */ "expr_unary ::= XMARK expr_unary",
 /*  74 */ "expr_unary ::= TILDE expr_unary",
 /*  75 */ "expr_unary ::= INCREMENT expr_unary",
 /*  76 */ "expr_unary ::= DECREMENT expr_unary",
 /*  77 */ "expr_mul ::= expr_unary",
 /*  78 */ "expr_mul ::= expr_mul ASTERISK expr_unary",
 /*  79 */ "expr_mul ::= expr_mul SOLIDUS expr_unary",
 /*  80 */ "expr_mul ::= expr_mul PERCENT expr_unary",
 /*  81 */ "expr_mul ::= expr_mul TILDE expr_unary",
 /*  82 */ "expr_add ::= expr_mul",
 /*  83 */ "expr_add ::= expr_add PLUS expr_mul",
 /*  84 */ "expr_add ::= expr_add MINUS expr_mul",
 /*  85 */ "expr_shift ::= expr_add",
 /*  86 */ "expr_shift ::= expr_shift LSHIFT expr_add",
 /*  87 */ "expr_shift ::= expr_shift RSHIFT expr_add",
 /*  88 */ "expr_shift ::= expr_shift URSHIFT expr_add",
 /*  89 */ "expr_bitand ::= expr_shift",
 /*  90 */ "expr_bitand ::= expr_bitand AMPERSAND expr_shift",
 /*  91 */ "expr_bitxor ::= expr_bitand",
 /*  92 */ "expr_bitxor ::= expr_bitxor CARET expr_bitand",
 /*  93 */ "expr_bitor ::= expr_bitxor",
 /*  94 */ "expr_bitor ::= expr_bitor VBAR expr_bitxor",
 /*  95 */ "expr_concat ::= expr_bitor",
 /*  96 */ "expr_concat ::= expr_concat CONCATENATE expr_bitor",
 /*  97 */ "expr_compare ::= expr_concat",
 /*  98 */ "expr_compare ::= expr_compare EQUAL expr_concat",
 /*  99 */ "expr_compare ::= expr_compare NOTEQUAL expr_concat",
 /* 100 */ "expr_compare ::= expr_compare LESS expr_concat",
 /* 101 */ "expr_compare ::= expr_compare GREATER expr_concat",
 /* 102 */ "expr_compare ::= expr_compare LESSEQUAL expr_concat",
 /* 103 */ "expr_compare ::= expr_compare GREATEREQUAL expr_concat",
 /* 104 */ "expr_compare ::= expr_compare IN expr_concat",
 /* 105 */ "expr_compare ::= expr_compare NOTIN expr_concat",
 /* 106 */ "expr_compare ::= expr_compare IS expr_concat",
 /* 107 */ "expr_compare ::= expr_compare NOTIS expr_concat",
 /* 108 */ "expr_and ::= expr_compare",
 /* 109 */ "expr_and ::= expr_and LOGICAND expr_compare",
 /* 110 */ "expr_xor ::= expr_and",
 /* 111 */ "expr_xor ::= expr_xor LOGICXOR expr_and",
 /* 112 */ "expr_or ::= expr_xor",
 /* 113 */ "expr_or ::= expr_or LOGICOR expr_xor",
 /* 114 */ "expr_nolbr ::= expr_or",
 /* 115 */ "expr_nolbr ::= expr_or QMARK expr_value COLON expr_value",
 /* 116 */ "expr_nolbr ::= LSQ RSQ",
 /* 117 */ "expr_nolbr ::= LSQ value_list RSQ",
 /* 118 */ "expr_nolbr ::= newobj_lbr object_decls RBR",
 /* 119 */ "expr_nolbr ::= newfunc_lbr stmt_list RBR",
 /* 120 */ "newobj_lbr ::= COLON LBR",
 /* 121 */ "newobj_lbr ::= COLON expr_simple LBR",
 /* 122 */ "newfunc_lbr ::= QMARK LPN expr_list RPN LBR",
 /* 123 */ "newfunc_lbr ::= PERIOD QMARK LPN expr_list RPN LBR",
 /* 124 */ "newfunc_lbr ::= QMARK LPN expr_list RPN YIELD LBR",
 /* 125 */ "newfunc_lbr ::= PERIOD QMARK LPN expr_list RPN YIELD LBR",
 /* 126 */ "expr_value ::= expr_nolbr",
 /* 127 */ "expr_value ::= LBR RBR",
 /* 128 */ "expr_value ::= LBR keyval_list RBR",
 /* 129 */ "expr_lbody ::= expr_value",
 /* 130 */ "expr_lbody ::= expr_lbody COMMA expr_value",
 /* 131 */ "expr_final ::= ELLIPSIS",
 /* 132 */ "expr_final ::= proto ELLIPSIS",
 /* 133 */ "expr_final ::= expr_call ELLIPSIS",
 /* 134 */ "expr_final ::= expr_yield ELLIPSIS",
 /* 135 */ "expr_final ::= proto YIELD ELLIPSIS",
 /* 136 */ "expr_final ::= expr_call YIELD ELLIPSIS",
 /* 137 */ "expr_final ::= name LSQ RSQ ELLIPSIS",
 /* 138 */ "expr_final ::= proto LSQ RSQ ELLIPSIS",
 /* 139 */ "expr_final ::= expr_index LSQ RSQ ELLIPSIS",
 /* 140 */ "expr_final ::= expr_yield LSQ RSQ ELLIPSIS",
 /* 141 */ "expr_final ::= expr_new LSQ RSQ ELLIPSIS",
 /* 142 */ "expr_final ::= expr_call LSQ RSQ ELLIPSIS",
 /* 143 */ "expr_final ::= expr_postfix LSQ RSQ ELLIPSIS",
 /* 144 */ "expr_list ::= expr_final",
 /* 145 */ "expr_list ::= expr_lbody",
 /* 146 */ "expr_list ::= expr_lbody COMMA expr_final",
 /* 147 */ "expr_assign ::= expr_list",
 /* 148 */ "expr_assign ::= expr_lbody assign_op expr_assign",
 /* 149 */ "assign_op ::= ASSIGN",
 /* 150 */ "assign_op ::= MULASSIGN",
 /* 151 */ "assign_op ::= DIVASSIGN",
 /* 152 */ "assign_op ::= MODASSIGN",
 /* 153 */ "assign_op ::= INTDIVASSIGN",
 /* 154 */ "assign_op ::= ADDASSIGN",
 /* 155 */ "assign_op ::= SUBASSIGN",
 /* 156 */ "assign_op ::= LSHIFTASSIGN",
 /* 157 */ "assign_op ::= RSHIFTASSIGN",
 /* 158 */ "assign_op ::= URSHIFTASSIGN",
 /* 159 */ "assign_op ::= BITANDASSIGN",
 /* 160 */ "assign_op ::= BITXORASSIGN",
 /* 161 */ "assign_op ::= BITORASSIGN",
 /* 162 */ "value_lbody ::= expr_value",
 /* 163 */ "value_lbody ::= value_lbody COMMA expr_value",
 /* 164 */ "value_list ::= expr_final",
 /* 165 */ "value_list ::= expr_final COMMA",
 /* 166 */ "value_list ::= value_lbody",
 /* 167 */ "value_list ::= value_lbody COMMA",
 /* 168 */ "value_list ::= value_lbody COMMA expr_final",
 /* 169 */ "keyval_lbody ::= expr_value COLON expr_value",
 /* 170 */ "keyval_lbody ::= keyval_lbody COMMA expr_value COLON expr_value",
 /* 171 */ "keyval_list ::= keyval_lbody",
 /* 172 */ "keyval_list ::= keyval_lbody COMMA",
 /* 173 */ "sexpr_lbody ::= expr_nolbr",
 /* 174 */ "sexpr_lbody ::= sexpr_lbody COMMA expr_value",
 /* 175 */ "sexpr_list ::= expr_final",
 /* 176 */ "sexpr_list ::= sexpr_lbody",
 /* 177 */ "sexpr_list ::= sexpr_lbody COMMA expr_final",
 /* 178 */ "sexpr_assign ::= sexpr_list",
 /* 179 */ "sexpr_assign ::= sexpr_lbody assign_op expr_assign",
 /* 180 */ "cond_using ::= expr_assign",
 /* 181 */ "cond_using ::= decl_var",
 /* 182 */ "condition ::= cond_using",
 /* 183 */ "condition ::= USING expr_assign",
 /* 184 */ "condition ::= USING decl_var",
 /* 185 */ "stmt_list ::=",
 /* 186 */ "stmt_list ::= stmt_list stmt",
 /* 187 */ "stmt ::= stmt_lbr stmt_list RBR",
 /* 188 */ "stmt ::= stmt_common",
 /* 189 */ "stmt_lbr ::= LBR",
 /* 190 */ "stmt_reuse ::= stmt_lbr_ru stmt_list RBR",
 /* 191 */ "stmt_reuse ::= stmt_common",
 /* 192 */ "stmt_lbr_ru ::= LBR",
 /* 193 */ "stmt_common ::= SEMICOLON",
 /* 194 */ "stmt_common ::= sexpr_assign SEMICOLON",
 /* 195 */ "stmt_common ::= decl_object",
 /* 196 */ "stmt_common ::= decl_func",
 /* 197 */ "stmt_common ::= decl_var SEMICOLON",
 /* 198 */ "stmt_common ::= decl_noinit SEMICOLON",
 /* 199 */ "stmt_common ::= stmt_if LPN condition RPN stmt",
 /* 200 */ "stmt_common ::= stmt_if LPN condition RPN stmt ELSE stmt",
 /* 201 */ "stmt_common ::= stmt_switch LPN condition RPN stmt_lbr_ru stmt_list RPN",
 /* 202 */ "stmt_common ::= stmt_while LPN condition RPN stmt_reuse",
 /* 203 */ "stmt_common ::= stmt_do stmt_reuse WHILE LPN expr_assign RPN SEMICOLON",
 /* 204 */ "stmt_common ::= stmt_foreach stmt_reuse",
 /* 205 */ "stmt_common ::= stmt_for stmt_reuse",
 /* 206 */ "stmt_common ::= stmt_uscope cond_using RPN stmt_reuse",
 /* 207 */ "stmt_common ::= token_using expr_assign SEMICOLON",
 /* 208 */ "stmt_common ::= token_using decl_var SEMICOLON",
 /* 209 */ "stmt_common ::= stmt_try",
 /* 210 */ "stmt_common ::= DELETE expr_lbody SEMICOLON",
 /* 211 */ "stmt_common ::= CASE expr_value COLON",
 /* 212 */ "stmt_common ::= DEFAULT COLON",
 /* 213 */ "stmt_common ::= CONTINUE SEMICOLON",
 /* 214 */ "stmt_common ::= BREAK SEMICOLON",
 /* 215 */ "stmt_common ::= RETURN SEMICOLON",
 /* 216 */ "stmt_common ::= RETURN expr_list SEMICOLON",
 /* 217 */ "stmt_common ::= token_yield SEMICOLON",
 /* 218 */ "stmt_common ::= token_yield expr_list SEMICOLON",
 /* 219 */ "stmt_common ::= THROW expr_value SEMICOLON",
 /* 220 */ "stmt_if ::= IF",
 /* 221 */ "stmt_switch ::= SWITCH",
 /* 222 */ "stmt_while ::= WHILE",
 /* 223 */ "stmt_do ::= DO",
 /* 224 */ "scope_for ::= FOR",
 /* 225 */ "stmt_foreach ::= scope_for LPN expr_lbody COLON expr_value RPN",
 /* 226 */ "stmt_foreach ::= scope_for LPN expr_lbody EACHKEY expr_value RPN",
 /* 227 */ "stmt_foreach ::= scope_for LPN VAR varname_list COLON expr_value RPN",
 /* 228 */ "stmt_foreach ::= scope_for LPN VAR varname_list EACHKEY expr_value RPN",
 /* 229 */ "stmt_for ::= scope_for LPN condition SEMICOLON expr_assign SEMICOLON expr_assign RPN",
 /* 230 */ "stmt_uscope ::= USING LPN",
 /* 231 */ "stmt_try ::= try_catch",
 /* 232 */ "stmt_try ::= try_catch FINALLY stmt",
 /* 233 */ "stmt_try ::= try_block FINALLY stmt",
 /* 234 */ "try_block ::= TRY stmt",
 /* 235 */ "try_catch ::= try_block catch",
 /* 236 */ "try_catch ::= try_catch catch",
 /* 237 */ "catch ::= stmt_catch LPN COLON expr_simple RPN stmt_reuse",
 /* 238 */ "catch ::= stmt_catch LPN expr_value COLON expr_simple RPN stmt_reuse",
 /* 239 */ "catch ::= stmt_catch LPN decl_catch COLON expr_simple RPN stmt_reuse",
 /* 240 */ "stmt_catch ::= CATCH",
 /* 241 */ "decl_catch ::= VAR name",
 /* 242 */ "token_yield ::= YIELD",
 /* 243 */ "token_using ::= USING",
};
#endif /* NDEBUG */


#if YYSTACKDEPTH<=0
/*
** Try to increase the size of the parser stack.
*/
static void yyGrowStack(yyParser *p){
  int newSize;
  yyStackEntry *pNew;

  newSize = p->yystksz*2 + 100;
  pNew = realloc(p->yystack, newSize*sizeof(pNew[0]));
  if( pNew ){
    p->yystack = pNew;
    p->yystksz = newSize;
#ifndef NDEBUG
    if( yyTraceFILE ){
      fprintf(yyTraceFILE,"%sStack grows to %d entries!\n",
              yyTracePrompt, p->yystksz);
    }
#endif
  }
}
#endif

/* 
** This function allocates a new parser.
** The only argument is a pointer to a function which works like
** malloc.
**
** Inputs:
** A pointer to the function used to allocate memory.
**
** Outputs:
** A pointer to a parser.  This pointer is used in subsequent calls
** to XecParse and XecParseFree.
*/
void *XecParseAlloc(void *(*mallocProc)(size_t)){
  yyParser *pParser;
  pParser = (yyParser*)(*mallocProc)( (size_t)sizeof(yyParser) );
  if( pParser ){
    pParser->yyidx = -1;
#ifdef YYTRACKMAXSTACKDEPTH
    pParser->yyidxMax = 0;
#endif
#if YYSTACKDEPTH<=0
    pParser->yystack = NULL;
    pParser->yystksz = 0;
    yyGrowStack(pParser);
#endif
  }
  return pParser;
}

/* The following function deletes the value associated with a
** symbol.  The symbol can be either a terminal or nonterminal.
** "yymajor" is the symbol code, and "yypminor" is a pointer to
** the value.
*/
static void yy_destructor(
  yyParser *yypParser,    /* The parser */
  YYCODETYPE yymajor,     /* Type code for object to destroy */
  YYMINORTYPE *yypminor   /* The object to be destroyed */
){
  XecParseARG_FETCH;
  switch( yymajor ){
    /* Here is inserted the actions which take place when a
    ** terminal or non-terminal is destroyed.  This can happen
    ** when the symbol is popped from the stack during a
    ** reduce or during error processing or when a parser is 
    ** being destroyed before it is finished parsing.
    **
    ** Note: during a reduce, the only symbols destroyed are those
    ** which appear on the RHS of the rule, but which are not used
    ** inside the C code.
    */
      /* TERMINAL Destructor */
    case 1: /* IF */
    case 2: /* ELSE */
    case 3: /* TRY */
    case 4: /* CATCH */
    case 5: /* FINALLY */
    case 6: /* YIELD */
    case 7: /* USING */
    case 8: /* LPN */
    case 9: /* IDENTIFIER */
    case 10: /* PERIOD */
    case 11: /* RPN */
    case 12: /* RBR */
    case 13: /* LBR */
    case 14: /* COLON */
    case 15: /* SEMICOLON */
    case 16: /* VAR */
    case 17: /* ASSIGN */
    case 18: /* COMMA */
    case 19: /* LSQ */
    case 20: /* RSQ */
    case 21: /* NEW */
    case 22: /* NULL */
    case 23: /* TRUE */
    case 24: /* FALSE */
    case 25: /* NUMBER */
    case 26: /* STRING */
    case 27: /* INCREMENT */
    case 28: /* DECREMENT */
    case 29: /* PLUS */
    case 30: /* MINUS */
    case 31: /* XMARK */
    case 32: /* TILDE */
    case 33: /* ASTERISK */
    case 34: /* SOLIDUS */
    case 35: /* PERCENT */
    case 36: /* LSHIFT */
    case 37: /* RSHIFT */
    case 38: /* URSHIFT */
    case 39: /* AMPERSAND */
    case 40: /* CARET */
    case 41: /* VBAR */
    case 42: /* CONCATENATE */
    case 43: /* EQUAL */
    case 44: /* NOTEQUAL */
    case 45: /* LESS */
    case 46: /* GREATER */
    case 47: /* LESSEQUAL */
    case 48: /* GREATEREQUAL */
    case 49: /* IN */
    case 50: /* NOTIN */
    case 51: /* IS */
    case 52: /* NOTIS */
    case 53: /* LOGICAND */
    case 54: /* LOGICXOR */
    case 55: /* LOGICOR */
    case 56: /* QMARK */
    case 57: /* ELLIPSIS */
    case 58: /* MULASSIGN */
    case 59: /* DIVASSIGN */
    case 60: /* MODASSIGN */
    case 61: /* INTDIVASSIGN */
    case 62: /* ADDASSIGN */
    case 63: /* SUBASSIGN */
    case 64: /* LSHIFTASSIGN */
    case 65: /* RSHIFTASSIGN */
    case 66: /* URSHIFTASSIGN */
    case 67: /* BITANDASSIGN */
    case 68: /* BITXORASSIGN */
    case 69: /* BITORASSIGN */
    case 70: /* WHILE */
    case 71: /* DELETE */
    case 72: /* CASE */
    case 73: /* DEFAULT */
    case 74: /* CONTINUE */
    case 75: /* BREAK */
    case 76: /* RETURN */
    case 77: /* THROW */
    case 78: /* SWITCH */
    case 79: /* DO */
    case 80: /* FOR */
    case 81: /* EACHKEY */
{
#line 96 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"

    p->destroy( (yypminor->yy0) );

#line 1988 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
}
      break;
      /* Default NON-TERMINAL Destructor */
    case 82: /* error */
    case 83: /* assign_op */
    case 84: /* value_lbody */
    case 85: /* value_list */
    case 86: /* keyval_lbody */
    case 87: /* keyval_list */
    case 88: /* stmt_lbr */
    case 89: /* stmt_lbr_ru */
    case 90: /* stmt_if */
    case 91: /* stmt_switch */
    case 92: /* stmt_while */
    case 93: /* stmt_do */
    case 94: /* scope_for */
    case 95: /* stmt_foreach */
    case 96: /* stmt_for */
    case 97: /* stmt_uscope */
    case 98: /* try_block */
    case 99: /* try_catch */
    case 100: /* catch */
    case 101: /* stmt_catch */
    case 102: /* token_yield */
    case 103: /* token_using */
    case 104: /* script */
    case 105: /* stmt_list */
    case 106: /* name */
    case 107: /* proto */
    case 108: /* expr_list */
    case 109: /* decl_object */
    case 110: /* object_lbr */
    case 111: /* object_decls */
    case 112: /* expr_simple */
    case 113: /* object_decl */
    case 114: /* decl_func */
    case 115: /* decl_proto */
    case 116: /* decl_var */
    case 117: /* decl_noinit */
    case 118: /* func_lbr */
    case 119: /* varname_list */
    case 120: /* expr_index */
    case 121: /* expr_assign */
    case 122: /* expr_value */
    case 123: /* expr_yield */
    case 124: /* expr_new */
    case 125: /* expr_call */
    case 126: /* expr_postfix */
    case 127: /* expr_literal */
    case 128: /* expr_suffix */
    case 129: /* expr_unary */
    case 130: /* expr_mul */
    case 131: /* expr_add */
    case 132: /* expr_shift */
    case 133: /* expr_bitand */
    case 134: /* expr_bitxor */
    case 135: /* expr_bitor */
    case 136: /* expr_concat */
    case 137: /* expr_compare */
    case 138: /* expr_and */
    case 139: /* expr_xor */
    case 140: /* expr_or */
    case 141: /* expr_nolbr */
    case 142: /* newobj_lbr */
    case 143: /* newfunc_lbr */
    case 144: /* expr_lbody */
    case 145: /* expr_final */
    case 146: /* sexpr_lbody */
    case 147: /* sexpr_list */
    case 148: /* sexpr_assign */
    case 149: /* cond_using */
    case 150: /* condition */
    case 151: /* stmt */
    case 152: /* stmt_common */
    case 153: /* stmt_reuse */
    case 154: /* stmt_try */
    case 155: /* decl_catch */
{
#line 91 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"

    delete (yypminor->yy191);

#line 2071 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
}
      break;
    default:  break;   /* If no destructor action specified: do nothing */
  }
}

/*
** Pop the parser's stack once.
**
** If there is a destructor routine associated with the token which
** is popped from the stack, then call it.
**
** Return the major token number for the symbol popped.
*/
static int yy_pop_parser_stack(yyParser *pParser){
  YYCODETYPE yymajor;
  yyStackEntry *yytos = &pParser->yystack[pParser->yyidx];

  if( pParser->yyidx<0 ) return 0;
#ifndef NDEBUG
  if( yyTraceFILE && pParser->yyidx>=0 ){
    fprintf(yyTraceFILE,"%sPopping %s\n",
      yyTracePrompt,
      yyTokenName[yytos->major]);
  }
#endif
  yymajor = yytos->major;
  yy_destructor(pParser, yymajor, &yytos->minor);
  pParser->yyidx--;
  return yymajor;
}

/* 
** Deallocate and destroy a parser.  Destructors are all called for
** all stack elements before shutting the parser down.
**
** Inputs:
** <ul>
** <li>  A pointer to the parser.  This should be a pointer
**       obtained from XecParseAlloc.
** <li>  A pointer to a function used to reclaim memory obtained
**       from malloc.
** </ul>
*/
void XecParseFree(
  void *p,                    /* The parser to be deleted */
  void (*freeProc)(void*)     /* Function used to reclaim memory */
){
  yyParser *pParser = (yyParser*)p;
  if( pParser==0 ) return;
  while( pParser->yyidx>=0 ) yy_pop_parser_stack(pParser);
#if YYSTACKDEPTH<=0
  free(pParser->yystack);
#endif
  (*freeProc)((void*)pParser);
}

/*
** Return the peak depth of the stack for a parser.
*/
#ifdef YYTRACKMAXSTACKDEPTH
int XecParseStackPeak(void *p){
  yyParser *pParser = (yyParser*)p;
  return pParser->yyidxMax;
}
#endif

/*
** Find the appropriate action for a parser given the terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
static int yy_find_shift_action(
  yyParser *pParser,        /* The parser */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
  int stateno = pParser->yystack[pParser->yyidx].stateno;
 
  if( stateno>YY_SHIFT_MAX || (i = yy_shift_ofst[stateno])==YY_SHIFT_USE_DFLT ){
    return yy_default[stateno];
  }
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
  if( i<0 || i>=YY_SZ_ACTTAB || yy_lookahead[i]!=iLookAhead ){
    if( iLookAhead>0 ){
#ifdef YYFALLBACK
      YYCODETYPE iFallback;            /* Fallback token */
      if( iLookAhead<sizeof(yyFallback)/sizeof(yyFallback[0])
             && (iFallback = yyFallback[iLookAhead])!=0 ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE, "%sFALLBACK %s => %s\n",
             yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[iFallback]);
        }
#endif
        return yy_find_shift_action(pParser, iFallback);
      }
#endif
#ifdef YYWILDCARD
      {
        int j = i - iLookAhead + YYWILDCARD;
        if( j>=0 && j<YY_SZ_ACTTAB && yy_lookahead[j]==YYWILDCARD ){
#ifndef NDEBUG
          if( yyTraceFILE ){
            fprintf(yyTraceFILE, "%sWILDCARD %s => %s\n",
               yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[YYWILDCARD]);
          }
#endif /* NDEBUG */
          return yy_action[j];
        }
      }
#endif /* YYWILDCARD */
    }
    return yy_default[stateno];
  }else{
    return yy_action[i];
  }
}

/*
** Find the appropriate action for a parser given the non-terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
static int yy_find_reduce_action(
  int stateno,              /* Current state number */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
#ifdef YYERRORSYMBOL
  if( stateno>YY_REDUCE_MAX ){
    return yy_default[stateno];
  }
#else
  assert( stateno<=YY_REDUCE_MAX );
#endif
  i = yy_reduce_ofst[stateno];
  assert( i!=YY_REDUCE_USE_DFLT );
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
#ifdef YYERRORSYMBOL
  if( i<0 || i>=YY_SZ_ACTTAB || yy_lookahead[i]!=iLookAhead ){
    return yy_default[stateno];
  }
#else
  assert( i>=0 && i<YY_SZ_ACTTAB );
  assert( yy_lookahead[i]==iLookAhead );
#endif
  return yy_action[i];
}

/*
** The following routine is called if the stack overflows.
*/
static void yyStackOverflow(yyParser *yypParser, YYMINORTYPE *yypMinor){
   XecParseARG_FETCH;
   yypParser->yyidx--;
#ifndef NDEBUG
   if( yyTraceFILE ){
     fprintf(yyTraceFILE,"%sStack Overflow!\n",yyTracePrompt);
   }
#endif
   while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
   /* Here code is inserted which will execute if the parser
   ** stack every overflows */
   XecParseARG_STORE; /* Suppress warning about unused %extra_argument var */
}

/*
** Perform a shift action.
*/
static void yy_shift(
  yyParser *yypParser,          /* The parser to be shifted */
  int yyNewState,               /* The new state to shift in */
  int yyMajor,                  /* The major token to shift in */
  YYMINORTYPE *yypMinor         /* Pointer to the minor token to shift in */
){
  yyStackEntry *yytos;
  yypParser->yyidx++;
#ifdef YYTRACKMAXSTACKDEPTH
  if( yypParser->yyidx>yypParser->yyidxMax ){
    yypParser->yyidxMax = yypParser->yyidx;
  }
#endif
#if YYSTACKDEPTH>0 
  if( yypParser->yyidx>=YYSTACKDEPTH ){
    yyStackOverflow(yypParser, yypMinor);
    return;
  }
#else
  if( yypParser->yyidx>=yypParser->yystksz ){
    yyGrowStack(yypParser);
    if( yypParser->yyidx>=yypParser->yystksz ){
      yyStackOverflow(yypParser, yypMinor);
      return;
    }
  }
#endif
  yytos = &yypParser->yystack[yypParser->yyidx];
  yytos->stateno = (YYACTIONTYPE)yyNewState;
  yytos->major = (YYCODETYPE)yyMajor;
  yytos->minor = *yypMinor;
#ifndef NDEBUG
  if( yyTraceFILE && yypParser->yyidx>0 ){
    int i;
    fprintf(yyTraceFILE,"%sShift %d\n",yyTracePrompt,yyNewState);
    fprintf(yyTraceFILE,"%sStack:",yyTracePrompt);
    for(i=1; i<=yypParser->yyidx; i++)
      fprintf(yyTraceFILE," %s",yyTokenName[yypParser->yystack[i].major]);
    fprintf(yyTraceFILE,"\n");
  }
#endif
}

/* The following table contains information about every rule that
** is used during the reduce.
*/
static const struct {
  YYCODETYPE lhs;         /* Symbol on the left-hand side of the rule */
  unsigned char nrhs;     /* Number of right-hand side symbols in the rule */
} yyRuleInfo[] = {
  { 104, 1 },
  { 106, 1 },
  { 106, 3 },
  { 107, 4 },
  { 109, 3 },
  { 110, 2 },
  { 110, 4 },
  { 111, 0 },
  { 111, 2 },
  { 113, 1 },
  { 113, 1 },
  { 113, 2 },
  { 113, 2 },
  { 113, 2 },
  { 115, 1 },
  { 115, 2 },
  { 114, 3 },
  { 118, 2 },
  { 116, 4 },
  { 117, 2 },
  { 119, 1 },
  { 119, 3 },
  { 120, 3 },
  { 120, 5 },
  { 120, 4 },
  { 120, 3 },
  { 120, 5 },
  { 120, 4 },
  { 123, 4 },
  { 124, 5 },
  { 124, 5 },
  { 125, 4 },
  { 125, 4 },
  { 125, 4 },
  { 125, 4 },
  { 125, 4 },
  { 125, 4 },
  { 126, 3 },
  { 126, 5 },
  { 126, 4 },
  { 126, 3 },
  { 126, 5 },
  { 126, 4 },
  { 126, 3 },
  { 126, 5 },
  { 126, 4 },
  { 126, 3 },
  { 126, 5 },
  { 126, 4 },
  { 126, 3 },
  { 126, 5 },
  { 126, 4 },
  { 112, 1 },
  { 112, 1 },
  { 112, 1 },
  { 112, 1 },
  { 112, 1 },
  { 112, 1 },
  { 112, 1 },
  { 112, 2 },
  { 112, 2 },
  { 127, 1 },
  { 127, 1 },
  { 127, 1 },
  { 127, 1 },
  { 127, 1 },
  { 127, 1 },
  { 128, 1 },
  { 128, 2 },
  { 128, 2 },
  { 129, 1 },
  { 129, 2 },
  { 129, 2 },
  { 129, 2 },
  { 129, 2 },
  { 129, 2 },
  { 129, 2 },
  { 130, 1 },
  { 130, 3 },
  { 130, 3 },
  { 130, 3 },
  { 130, 3 },
  { 131, 1 },
  { 131, 3 },
  { 131, 3 },
  { 132, 1 },
  { 132, 3 },
  { 132, 3 },
  { 132, 3 },
  { 133, 1 },
  { 133, 3 },
  { 134, 1 },
  { 134, 3 },
  { 135, 1 },
  { 135, 3 },
  { 136, 1 },
  { 136, 3 },
  { 137, 1 },
  { 137, 3 },
  { 137, 3 },
  { 137, 3 },
  { 137, 3 },
  { 137, 3 },
  { 137, 3 },
  { 137, 3 },
  { 137, 3 },
  { 137, 3 },
  { 137, 3 },
  { 138, 1 },
  { 138, 3 },
  { 139, 1 },
  { 139, 3 },
  { 140, 1 },
  { 140, 3 },
  { 141, 1 },
  { 141, 5 },
  { 141, 2 },
  { 141, 3 },
  { 141, 3 },
  { 141, 3 },
  { 142, 2 },
  { 142, 3 },
  { 143, 5 },
  { 143, 6 },
  { 143, 6 },
  { 143, 7 },
  { 122, 1 },
  { 122, 2 },
  { 122, 3 },
  { 144, 1 },
  { 144, 3 },
  { 145, 1 },
  { 145, 2 },
  { 145, 2 },
  { 145, 2 },
  { 145, 3 },
  { 145, 3 },
  { 145, 4 },
  { 145, 4 },
  { 145, 4 },
  { 145, 4 },
  { 145, 4 },
  { 145, 4 },
  { 145, 4 },
  { 108, 1 },
  { 108, 1 },
  { 108, 3 },
  { 121, 1 },
  { 121, 3 },
  { 83, 1 },
  { 83, 1 },
  { 83, 1 },
  { 83, 1 },
  { 83, 1 },
  { 83, 1 },
  { 83, 1 },
  { 83, 1 },
  { 83, 1 },
  { 83, 1 },
  { 83, 1 },
  { 83, 1 },
  { 83, 1 },
  { 84, 1 },
  { 84, 3 },
  { 85, 1 },
  { 85, 2 },
  { 85, 1 },
  { 85, 2 },
  { 85, 3 },
  { 86, 3 },
  { 86, 5 },
  { 87, 1 },
  { 87, 2 },
  { 146, 1 },
  { 146, 3 },
  { 147, 1 },
  { 147, 1 },
  { 147, 3 },
  { 148, 1 },
  { 148, 3 },
  { 149, 1 },
  { 149, 1 },
  { 150, 1 },
  { 150, 2 },
  { 150, 2 },
  { 105, 0 },
  { 105, 2 },
  { 151, 3 },
  { 151, 1 },
  { 88, 1 },
  { 153, 3 },
  { 153, 1 },
  { 89, 1 },
  { 152, 1 },
  { 152, 2 },
  { 152, 1 },
  { 152, 1 },
  { 152, 2 },
  { 152, 2 },
  { 152, 5 },
  { 152, 7 },
  { 152, 7 },
  { 152, 5 },
  { 152, 7 },
  { 152, 2 },
  { 152, 2 },
  { 152, 4 },
  { 152, 3 },
  { 152, 3 },
  { 152, 1 },
  { 152, 3 },
  { 152, 3 },
  { 152, 2 },
  { 152, 2 },
  { 152, 2 },
  { 152, 2 },
  { 152, 3 },
  { 152, 2 },
  { 152, 3 },
  { 152, 3 },
  { 90, 1 },
  { 91, 1 },
  { 92, 1 },
  { 93, 1 },
  { 94, 1 },
  { 95, 6 },
  { 95, 6 },
  { 95, 7 },
  { 95, 7 },
  { 96, 8 },
  { 97, 2 },
  { 154, 1 },
  { 154, 3 },
  { 154, 3 },
  { 98, 2 },
  { 99, 2 },
  { 99, 2 },
  { 100, 6 },
  { 100, 7 },
  { 100, 7 },
  { 101, 1 },
  { 155, 2 },
  { 102, 1 },
  { 103, 1 },
};

static void yy_accept(yyParser*);  /* Forward Declaration */

/*
** Perform a reduce action and the shift that must immediately
** follow the reduce.
*/
static void yy_reduce(
  yyParser *yypParser,         /* The parser */
  int yyruleno                 /* Number of the rule by which to reduce */
){
  int yygoto;                     /* The next state */
  int yyact;                      /* The next action */
  YYMINORTYPE yygotominor;        /* The LHS of the rule reduced */
  yyStackEntry *yymsp;            /* The top of the parser's stack */
  int yysize;                     /* Amount to pop the stack */
  XecParseARG_FETCH;
  yymsp = &yypParser->yystack[yypParser->yyidx];
#ifndef NDEBUG
  if( yyTraceFILE && yyruleno>=0 
        && yyruleno<(int)(sizeof(yyRuleName)/sizeof(yyRuleName[0])) ){
    fprintf(yyTraceFILE, "%sReduce [%s].\n", yyTracePrompt,
      yyRuleName[yyruleno]);
  }
#endif /* NDEBUG */

  /* Silence complaints from purify about yygotominor being uninitialized
  ** in some cases when it is copied into the stack after the following
  ** switch.  yygotominor is uninitialized when a rule reduces that does
  ** not set the value of its left-hand side nonterminal.  Leaving the
  ** value of the nonterminal uninitialized is utterly harmless as long
  ** as the value is never used.  So really the only thing this code
  ** accomplishes is to quieten purify.  
  **
  ** 2007-01-16:  The wireshark project (www.wireshark.org) reports that
  ** without this code, their parser segfaults.  I'm not sure what there
  ** parser is doing to make this happen.  This is the second bug report
  ** from wireshark this week.  Clearly they are stressing Lemon in ways
  ** that it has not been previously stressed...  (SQLite ticket #2172)
  */
  /*memset(&yygotominor, 0, sizeof(yygotominor));*/
  yygotominor = yyzerominor;


  switch( yyruleno ){
  /* Beginning here are the reduction cases.  A typical example
  ** follows:
  **   case 0:
  **  #line <lineno> <grammarfile>
  **     { ... }           // User supplied code
  **  #line <lineno> <thisfile>
  **     break;
  */
      case 0: /* script ::= stmt_list */
#line 133 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
  yy_destructor(yypParser,105,&yymsp[0].minor);
}
#line 2603 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 1: /* name ::= IDENTIFIER */
#line 144 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy191 = p->alloc< xec_unqual_name >(
                                    yymsp[0].minor.yy0->sloc, yymsp[0].minor.yy0->text );
                }
#line 2611 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 2: /* name ::= name PERIOD IDENTIFIER */
#line 149 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy191 = p->alloc< xec_expr_key >(
                                    yymsp[0].minor.yy0->sloc, yymsp[-2].minor.yy191, yymsp[0].minor.yy0->text );
                  yy_destructor(yypParser,10,&yymsp[-1].minor);
}
#line 2620 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 3: /* proto ::= name LPN expr_list RPN */
#line 155 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy191 = p->alloc< xec_unqual_proto >(
                                    yymsp[-3].minor.yy191->sloc, yymsp[-3].minor.yy191, p->expr_list( yymsp[-1].minor.yy191 ) );
                  yy_destructor(yypParser,8,&yymsp[-2].minor);
  yy_destructor(yypParser,11,&yymsp[0].minor);
}
#line 2630 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 4: /* decl_object ::= object_lbr object_decls RBR */
      case 118: /* expr_nolbr ::= newobj_lbr object_decls RBR */ yytestcase(yyruleno==118);
#line 170 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,111,&yymsp[-1].minor);
  yy_destructor(yypParser,12,&yymsp[0].minor);
}
#line 2639 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 5: /* object_lbr ::= name LBR */
      case 17: /* func_lbr ::= proto LBR */ yytestcase(yyruleno==17);
      case 120: /* newobj_lbr ::= COLON LBR */ yytestcase(yyruleno==120);
      case 121: /* newobj_lbr ::= COLON expr_simple LBR */ yytestcase(yyruleno==121);
#line 174 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,13,&yymsp[0].minor);
}
#line 2649 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 6: /* object_lbr ::= name COLON expr_simple LBR */
#line 177 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,14,&yymsp[-2].minor);
  yy_destructor(yypParser,13,&yymsp[0].minor);
}
#line 2657 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 8: /* object_decls ::= object_decls object_decl */
#line 182 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,111,&yymsp[-1].minor);
}
#line 2664 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 9: /* object_decl ::= decl_object */
      case 10: /* object_decl ::= decl_func */ yytestcase(yyruleno==10);
      case 14: /* decl_proto ::= proto */ yytestcase(yyruleno==14);
      case 20: /* varname_list ::= IDENTIFIER */ yytestcase(yyruleno==20);
      case 185: /* stmt_list ::= */ yytestcase(yyruleno==185);
#line 186 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                }
#line 2674 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 11: /* object_decl ::= decl_proto SEMICOLON */
      case 12: /* object_decl ::= decl_var SEMICOLON */ yytestcase(yyruleno==12);
      case 13: /* object_decl ::= decl_noinit SEMICOLON */ yytestcase(yyruleno==13);
#line 192 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,15,&yymsp[0].minor);
}
#line 2683 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 15: /* decl_proto ::= proto YIELD */
#line 208 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,6,&yymsp[0].minor);
}
#line 2690 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 16: /* decl_func ::= func_lbr stmt_list RBR */
      case 119: /* expr_nolbr ::= newfunc_lbr stmt_list RBR */ yytestcase(yyruleno==119);
#line 214 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,105,&yymsp[-1].minor);
  yy_destructor(yypParser,12,&yymsp[0].minor);
}
#line 2699 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 18: /* decl_var ::= VAR varname_list ASSIGN expr_list */
#line 224 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,16,&yymsp[-3].minor);
  yy_destructor(yypParser,17,&yymsp[-1].minor);
}
#line 2707 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 19: /* decl_noinit ::= VAR varname_list */
      case 241: /* decl_catch ::= VAR name */ yytestcase(yyruleno==241);
#line 228 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,16,&yymsp[-1].minor);
}
#line 2715 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 21: /* varname_list ::= varname_list COMMA IDENTIFIER */
#line 235 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,18,&yymsp[-1].minor);
}
#line 2722 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 22: /* expr_index ::= LPN expr_assign RPN */
#line 249 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    switch ( yymsp[-1].minor.yy191->kind )
                    {
                    case XEC_EXPR_KEY:
                    case XEC_EXPR_INKEY:
                    case XEC_EXPR_CALL:
                    case XEC_EXPR_CALLKEY:
                    case XEC_EXPR_CALLINKEY:
                    case XEC_EXPR_YIELD:
                    case XEC_EXPR_VARARG:
                    case XEC_EXPR_UNPACK:
                    case XEC_EXPR_LIST:
                    case XEC_AST_ASSIGN_LIST:
                        yygotominor.yy191 = p->alloc< xec_expr_mono >( yymsp[-1].minor.yy191->sloc, yymsp[-1].minor.yy191 );
                        break;
                        
                    default:
                        yygotominor.yy191 = yymsp[-1].minor.yy191;
                        break;
                    }
                  yy_destructor(yypParser,8,&yymsp[-2].minor);
  yy_destructor(yypParser,11,&yymsp[0].minor);
}
#line 2749 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 23: /* expr_index ::= name PERIOD LSQ expr_value RSQ */
#line 271 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-4].minor.yy191 = p->expr_name( yymsp[-4].minor.yy191 );
                    yygotominor.yy191 = p->alloc< xec_expr_inkey >( yymsp[-4].minor.yy191->sloc, yymsp[-4].minor.yy191, yymsp[-1].minor.yy191 );
                  yy_destructor(yypParser,10,&yymsp[-3].minor);
  yy_destructor(yypParser,19,&yymsp[-2].minor);
  yy_destructor(yypParser,20,&yymsp[0].minor);
}
#line 2760 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 24: /* expr_index ::= name LSQ expr_value RSQ */
#line 276 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-3].minor.yy191 = p->expr_name( yymsp[-3].minor.yy191 );
                    yygotominor.yy191 = p->alloc< xec_expr_index >( yymsp[-3].minor.yy191->sloc, yymsp[-3].minor.yy191, yymsp[-1].minor.yy191 );
                  yy_destructor(yypParser,19,&yymsp[-2].minor);
  yy_destructor(yypParser,20,&yymsp[0].minor);
}
#line 2770 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 25: /* expr_index ::= expr_index PERIOD IDENTIFIER */
#line 281 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy191 = p->alloc< xec_expr_key >( yymsp[-2].minor.yy191->sloc, yymsp[-2].minor.yy191, yymsp[0].minor.yy0->text );
                    p->destroy( yymsp[0].minor.yy0 );
                  yy_destructor(yypParser,10,&yymsp[-1].minor);
}
#line 2779 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 26: /* expr_index ::= expr_index PERIOD LSQ expr_value RSQ */
#line 286 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy191 = p->alloc< xec_expr_inkey >( yymsp[-4].minor.yy191->sloc, yymsp[-4].minor.yy191, yymsp[-1].minor.yy191 );
                  yy_destructor(yypParser,10,&yymsp[-3].minor);
  yy_destructor(yypParser,19,&yymsp[-2].minor);
  yy_destructor(yypParser,20,&yymsp[0].minor);
}
#line 2789 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 27: /* expr_index ::= expr_index LSQ expr_value RSQ */
#line 290 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy191 = p->alloc< xec_expr_index >( yymsp[-3].minor.yy191->sloc, yymsp[-3].minor.yy191, yymsp[-1].minor.yy191 );
                  yy_destructor(yypParser,19,&yymsp[-2].minor);
  yy_destructor(yypParser,20,&yymsp[0].minor);
}
#line 2798 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 28: /* expr_yield ::= YIELD LPN expr_list RPN */
#line 297 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy191 = p->alloc< xec_expr_yield >(
                                    yymsp[-3].minor.yy0->sloc, p->expr_list( yymsp[-1].minor.yy191 ) );
                    p->destroy( yymsp[-3].minor.yy0 );
                  yy_destructor(yypParser,8,&yymsp[-2].minor);
  yy_destructor(yypParser,11,&yymsp[0].minor);
}
#line 2809 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 29: /* expr_new ::= NEW name LPN expr_list RPN */
#line 305 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-3].minor.yy191 = p->expr_name( yymsp[-3].minor.yy191 );
                    yygotominor.yy191 = p->alloc< xec_new_new >(
                                    yymsp[-4].minor.yy0->sloc, yymsp[-3].minor.yy191, p->expr_list( yymsp[-1].minor.yy191 ) );
                    p->destroy( yymsp[-4].minor.yy0 );
                  yy_destructor(yypParser,8,&yymsp[-2].minor);
  yy_destructor(yypParser,11,&yymsp[0].minor);
}
#line 2821 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 30: /* expr_new ::= NEW expr_index LPN expr_list RPN */
#line 312 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy191 = p->alloc< xec_new_new >(
                                    yymsp[-4].minor.yy0->sloc, yymsp[-3].minor.yy191, p->expr_list( yymsp[-1].minor.yy191 ) );
                    p->destroy( yymsp[-4].minor.yy0 );
                  yy_destructor(yypParser,8,&yymsp[-2].minor);
  yy_destructor(yypParser,11,&yymsp[0].minor);
}
#line 2832 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 31: /* expr_call ::= proto LPN expr_list RPN */
#line 320 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-3].minor.yy191 = p->expr_proto( yymsp[-3].minor.yy191 );
                    yygotominor.yy191 = p->alloc< xec_expr_call >(
                                yymsp[-3].minor.yy191->sloc, yymsp[-3].minor.yy191, p->expr_list( yymsp[-1].minor.yy191 ) );
                  yy_destructor(yypParser,8,&yymsp[-2].minor);
  yy_destructor(yypParser,11,&yymsp[0].minor);
}
#line 2843 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 32: /* expr_call ::= expr_index LPN expr_list RPN */
      case 33: /* expr_call ::= expr_yield LPN expr_list RPN */ yytestcase(yyruleno==33);
      case 34: /* expr_call ::= expr_new LPN expr_list RPN */ yytestcase(yyruleno==34);
      case 35: /* expr_call ::= expr_call LPN expr_list RPN */ yytestcase(yyruleno==35);
      case 36: /* expr_call ::= expr_postfix LPN expr_list RPN */ yytestcase(yyruleno==36);
#line 326 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy191 = p->alloc< xec_expr_call >(
                                yymsp[-3].minor.yy191->sloc, yymsp[-3].minor.yy191, p->expr_list( yymsp[-1].minor.yy191 ) );
                  yy_destructor(yypParser,8,&yymsp[-2].minor);
  yy_destructor(yypParser,11,&yymsp[0].minor);
}
#line 2857 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 37: /* expr_postfix ::= proto PERIOD IDENTIFIER */
#line 353 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-2].minor.yy191 = p->expr_proto( yymsp[-2].minor.yy191 );
                    yygotominor.yy191 = p->alloc< xec_expr_key >(
                             yymsp[-2].minor.yy191->sloc, yymsp[-2].minor.yy191, yymsp[0].minor.yy0->text );
                    p->destroy( yymsp[0].minor.yy0 );
                  yy_destructor(yypParser,10,&yymsp[-1].minor);
}
#line 2868 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 38: /* expr_postfix ::= proto PERIOD LSQ expr_value RSQ */
#line 360 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-4].minor.yy191 = p->expr_proto( yymsp[-4].minor.yy191 );
                    yygotominor.yy191 = p->alloc< xec_expr_inkey >(
                             yymsp[-4].minor.yy191->sloc, yymsp[-4].minor.yy191, yymsp[-1].minor.yy191 );
                  yy_destructor(yypParser,10,&yymsp[-3].minor);
  yy_destructor(yypParser,19,&yymsp[-2].minor);
  yy_destructor(yypParser,20,&yymsp[0].minor);
}
#line 2880 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 39: /* expr_postfix ::= proto LSQ expr_value RSQ */
#line 366 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-3].minor.yy191 = p->expr_proto( yymsp[-3].minor.yy191 );
                    yygotominor.yy191 = p->alloc< xec_expr_index >(
                             yymsp[-3].minor.yy191->sloc, yymsp[-3].minor.yy191, yymsp[-1].minor.yy191 );
                  yy_destructor(yypParser,19,&yymsp[-2].minor);
  yy_destructor(yypParser,20,&yymsp[0].minor);
}
#line 2891 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 40: /* expr_postfix ::= expr_yield PERIOD IDENTIFIER */
      case 43: /* expr_postfix ::= expr_new PERIOD IDENTIFIER */ yytestcase(yyruleno==43);
      case 46: /* expr_postfix ::= expr_call PERIOD IDENTIFIER */ yytestcase(yyruleno==46);
      case 49: /* expr_postfix ::= expr_postfix PERIOD IDENTIFIER */ yytestcase(yyruleno==49);
#line 372 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy191 = p->alloc< xec_expr_key >(
                             yymsp[-2].minor.yy191->sloc, yymsp[-2].minor.yy191, yymsp[0].minor.yy0->text );
                    p->destroy( yymsp[0].minor.yy0 );
                  yy_destructor(yypParser,10,&yymsp[-1].minor);
}
#line 2904 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 41: /* expr_postfix ::= expr_yield PERIOD LSQ expr_value RSQ */
      case 44: /* expr_postfix ::= expr_new PERIOD LSQ expr_value RSQ */ yytestcase(yyruleno==44);
      case 47: /* expr_postfix ::= expr_call PERIOD LSQ expr_value RSQ */ yytestcase(yyruleno==47);
      case 50: /* expr_postfix ::= expr_postfix PERIOD LSQ expr_value RSQ */ yytestcase(yyruleno==50);
#line 378 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy191 = p->alloc< xec_expr_inkey >(
                             yymsp[-4].minor.yy191->sloc, yymsp[-4].minor.yy191, yymsp[-1].minor.yy191 );
                  yy_destructor(yypParser,10,&yymsp[-3].minor);
  yy_destructor(yypParser,19,&yymsp[-2].minor);
  yy_destructor(yypParser,20,&yymsp[0].minor);
}
#line 2918 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 42: /* expr_postfix ::= expr_yield LSQ expr_value RSQ */
      case 45: /* expr_postfix ::= expr_new LSQ expr_value RSQ */ yytestcase(yyruleno==45);
      case 48: /* expr_postfix ::= expr_call LSQ expr_value RSQ */ yytestcase(yyruleno==48);
      case 51: /* expr_postfix ::= expr_postfix LSQ expr_value RSQ */ yytestcase(yyruleno==51);
#line 383 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy191 = p->alloc< xec_expr_index >(
                             yymsp[-3].minor.yy191->sloc, yymsp[-3].minor.yy191, yymsp[-1].minor.yy191 );
                  yy_destructor(yypParser,19,&yymsp[-2].minor);
  yy_destructor(yypParser,20,&yymsp[0].minor);
}
#line 2931 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 52: /* expr_simple ::= name */
#line 442 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy191 = p->expr_name( yymsp[0].minor.yy191 );
                }
#line 2938 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 53: /* expr_simple ::= proto */
#line 446 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy191 = p->expr_proto( yymsp[0].minor.yy191 );
                }
#line 2945 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 54: /* expr_simple ::= expr_index */
      case 55: /* expr_simple ::= expr_yield */ yytestcase(yyruleno==55);
      case 56: /* expr_simple ::= expr_new */ yytestcase(yyruleno==56);
      case 57: /* expr_simple ::= expr_call */ yytestcase(yyruleno==57);
      case 58: /* expr_simple ::= expr_postfix */ yytestcase(yyruleno==58);
      case 61: /* expr_literal ::= expr_simple */ yytestcase(yyruleno==61);
      case 67: /* expr_suffix ::= expr_literal */ yytestcase(yyruleno==67);
      case 70: /* expr_unary ::= expr_suffix */ yytestcase(yyruleno==70);
      case 77: /* expr_mul ::= expr_unary */ yytestcase(yyruleno==77);
      case 82: /* expr_add ::= expr_mul */ yytestcase(yyruleno==82);
      case 85: /* expr_shift ::= expr_add */ yytestcase(yyruleno==85);
      case 89: /* expr_bitand ::= expr_shift */ yytestcase(yyruleno==89);
      case 91: /* expr_bitxor ::= expr_bitand */ yytestcase(yyruleno==91);
      case 93: /* expr_bitor ::= expr_bitxor */ yytestcase(yyruleno==93);
      case 95: /* expr_concat ::= expr_bitor */ yytestcase(yyruleno==95);
      case 97: /* expr_compare ::= expr_concat */ yytestcase(yyruleno==97);
      case 108: /* expr_and ::= expr_compare */ yytestcase(yyruleno==108);
      case 110: /* expr_xor ::= expr_and */ yytestcase(yyruleno==110);
      case 112: /* expr_or ::= expr_xor */ yytestcase(yyruleno==112);
      case 114: /* expr_nolbr ::= expr_or */ yytestcase(yyruleno==114);
      case 126: /* expr_value ::= expr_nolbr */ yytestcase(yyruleno==126);
      case 129: /* expr_lbody ::= expr_value */ yytestcase(yyruleno==129);
      case 144: /* expr_list ::= expr_final */ yytestcase(yyruleno==144);
      case 145: /* expr_list ::= expr_lbody */ yytestcase(yyruleno==145);
      case 147: /* expr_assign ::= expr_list */ yytestcase(yyruleno==147);
      case 173: /* sexpr_lbody ::= expr_nolbr */ yytestcase(yyruleno==173);
      case 175: /* sexpr_list ::= expr_final */ yytestcase(yyruleno==175);
      case 176: /* sexpr_list ::= sexpr_lbody */ yytestcase(yyruleno==176);
      case 178: /* sexpr_assign ::= sexpr_list */ yytestcase(yyruleno==178);
      case 180: /* cond_using ::= expr_assign */ yytestcase(yyruleno==180);
      case 181: /* cond_using ::= decl_var */ yytestcase(yyruleno==181);
      case 182: /* condition ::= cond_using */ yytestcase(yyruleno==182);
      case 188: /* stmt ::= stmt_common */ yytestcase(yyruleno==188);
      case 191: /* stmt_reuse ::= stmt_common */ yytestcase(yyruleno==191);
      case 195: /* stmt_common ::= decl_object */ yytestcase(yyruleno==195);
      case 196: /* stmt_common ::= decl_func */ yytestcase(yyruleno==196);
      case 209: /* stmt_common ::= stmt_try */ yytestcase(yyruleno==209);
#line 450 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy191 = yymsp[0].minor.yy191;
                }
#line 2988 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 59: /* expr_simple ::= proto YIELD */
#line 470 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy191 = p->expr_proto( yymsp[-1].minor.yy191 );
                    assert( yymsp[-1].minor.yy191->kind == XEC_EXPR_CALL );
                    ( (xec_expr_call*)yymsp[-1].minor.yy191 )->yieldcall = true;
                    yygotominor.yy191 = yymsp[-1].minor.yy191;
                  yy_destructor(yypParser,6,&yymsp[0].minor);
}
#line 2999 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 60: /* expr_simple ::= expr_call YIELD */
#line 477 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    assert( yymsp[-1].minor.yy191->kind == XEC_EXPR_CALL );
                    ( (xec_expr_call*)yymsp[-1].minor.yy191 )->yieldcall = true;
                    yygotominor.yy191 = yymsp[-1].minor.yy191;
                  yy_destructor(yypParser,6,&yymsp[0].minor);
}
#line 3009 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 62: /* expr_literal ::= NULL */
#line 488 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy191 = p->alloc< xec_expr_null >( yymsp[0].minor.yy0->sloc );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3017 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 63: /* expr_literal ::= TRUE */
#line 493 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy191 = p->alloc< xec_expr_bool >( yymsp[0].minor.yy0->sloc, true );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3025 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 64: /* expr_literal ::= FALSE */
#line 498 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy191 = p->alloc< xec_expr_bool >( yymsp[0].minor.yy0->sloc, false );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3033 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 65: /* expr_literal ::= NUMBER */
#line 503 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    double number = p->parse_number( yymsp[0].minor.yy0 );
                    yygotominor.yy191 = p->alloc< xec_expr_number >( yymsp[0].minor.yy0->sloc, number );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3042 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 66: /* expr_literal ::= STRING */
#line 509 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy191 = p->alloc< xec_expr_string >(
                            yymsp[0].minor.yy0->sloc, yymsp[0].minor.yy0->text, yymsp[0].minor.yy0->size );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3051 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 68: /* expr_suffix ::= expr_suffix INCREMENT */
      case 69: /* expr_suffix ::= expr_suffix DECREMENT */ yytestcase(yyruleno==69);
#line 520 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy191 = p->expr_lvalue( yymsp[-1].minor.yy191 );
                    yygotominor.yy191 = p->alloc< xec_expr_postop >(
                             yymsp[-1].minor.yy191->sloc, yymsp[0].minor.yy0->kind, yymsp[-1].minor.yy191 );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3062 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 71: /* expr_unary ::= PLUS expr_unary */
      case 72: /* expr_unary ::= MINUS expr_unary */ yytestcase(yyruleno==72);
      case 73: /* expr_unary ::= XMARK expr_unary */ yytestcase(yyruleno==73);
      case 74: /* expr_unary ::= TILDE expr_unary */ yytestcase(yyruleno==74);
#line 539 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy191 = p->alloc< xec_expr_unary >(
                             yymsp[-1].minor.yy0->sloc, yymsp[-1].minor.yy0->kind, yymsp[0].minor.yy191 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 3074 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 75: /* expr_unary ::= INCREMENT expr_unary */
      case 76: /* expr_unary ::= DECREMENT expr_unary */ yytestcase(yyruleno==76);
#line 563 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[0].minor.yy191 = p->expr_lvalue( yymsp[0].minor.yy191 );
                    yygotominor.yy191 = p->alloc< xec_expr_preop >(
                             yymsp[-1].minor.yy0->sloc, yymsp[-1].minor.yy0->kind, yymsp[0].minor.yy191 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 3085 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 78: /* expr_mul ::= expr_mul ASTERISK expr_unary */
      case 79: /* expr_mul ::= expr_mul SOLIDUS expr_unary */ yytestcase(yyruleno==79);
      case 80: /* expr_mul ::= expr_mul PERCENT expr_unary */ yytestcase(yyruleno==80);
      case 81: /* expr_mul ::= expr_mul TILDE expr_unary */ yytestcase(yyruleno==81);
      case 83: /* expr_add ::= expr_add PLUS expr_mul */ yytestcase(yyruleno==83);
      case 84: /* expr_add ::= expr_add MINUS expr_mul */ yytestcase(yyruleno==84);
      case 86: /* expr_shift ::= expr_shift LSHIFT expr_add */ yytestcase(yyruleno==86);
      case 87: /* expr_shift ::= expr_shift RSHIFT expr_add */ yytestcase(yyruleno==87);
      case 88: /* expr_shift ::= expr_shift URSHIFT expr_add */ yytestcase(yyruleno==88);
      case 90: /* expr_bitand ::= expr_bitand AMPERSAND expr_shift */ yytestcase(yyruleno==90);
      case 92: /* expr_bitxor ::= expr_bitxor CARET expr_bitand */ yytestcase(yyruleno==92);
      case 94: /* expr_bitor ::= expr_bitor VBAR expr_bitxor */ yytestcase(yyruleno==94);
      case 96: /* expr_concat ::= expr_concat CONCATENATE expr_bitor */ yytestcase(yyruleno==96);
#line 582 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy191 = p->alloc< xec_expr_binary >(
                                    yymsp[-2].minor.yy191->sloc, yymsp[-1].minor.yy0->kind, yymsp[-2].minor.yy191, yymsp[0].minor.yy191 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 3106 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 98: /* expr_compare ::= expr_compare EQUAL expr_concat */
      case 99: /* expr_compare ::= expr_compare NOTEQUAL expr_concat */ yytestcase(yyruleno==99);
      case 100: /* expr_compare ::= expr_compare LESS expr_concat */ yytestcase(yyruleno==100);
      case 101: /* expr_compare ::= expr_compare GREATER expr_concat */ yytestcase(yyruleno==101);
      case 102: /* expr_compare ::= expr_compare LESSEQUAL expr_concat */ yytestcase(yyruleno==102);
      case 103: /* expr_compare ::= expr_compare GREATEREQUAL expr_concat */ yytestcase(yyruleno==103);
      case 104: /* expr_compare ::= expr_compare IN expr_concat */ yytestcase(yyruleno==104);
      case 105: /* expr_compare ::= expr_compare NOTIN expr_concat */ yytestcase(yyruleno==105);
      case 106: /* expr_compare ::= expr_compare IS expr_concat */ yytestcase(yyruleno==106);
      case 107: /* expr_compare ::= expr_compare NOTIS expr_concat */ yytestcase(yyruleno==107);
#line 695 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy191 = p->expr_compare( yymsp[-1].minor.yy0, yymsp[-2].minor.yy191, yymsp[0].minor.yy191 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 3123 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 109: /* expr_and ::= expr_and LOGICAND expr_compare */
      case 111: /* expr_xor ::= expr_xor LOGICXOR expr_and */ yytestcase(yyruleno==111);
      case 113: /* expr_or ::= expr_or LOGICOR expr_xor */ yytestcase(yyruleno==113);
#line 751 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy191 = p->alloc< xec_expr_logical >(
                                    yymsp[-2].minor.yy191->sloc, yymsp[-1].minor.yy0->kind, yymsp[-2].minor.yy191, yymsp[0].minor.yy191 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 3134 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 115: /* expr_nolbr ::= expr_or QMARK expr_value COLON expr_value */
#line 786 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy191 = p->alloc< xec_expr_qmark >(
                            yymsp[-4].minor.yy191->sloc, yymsp[-4].minor.yy191, yymsp[-2].minor.yy191, yymsp[0].minor.yy191 );
                  yy_destructor(yypParser,56,&yymsp[-3].minor);
  yy_destructor(yypParser,14,&yymsp[-1].minor);
}
#line 3144 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 116: /* expr_nolbr ::= LSQ RSQ */
#line 791 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy191 = p->alloc< xec_new_list >( yymsp[-1].minor.yy0->sloc );
                    p->destroy( yymsp[-1].minor.yy0 );
                  yy_destructor(yypParser,20,&yymsp[0].minor);
}
#line 3153 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 117: /* expr_nolbr ::= LSQ value_list RSQ */
#line 796 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy191 = yymsp[-1].minor.yy92;
                    yygotominor.yy191->sloc = yymsp[-2].minor.yy0->sloc;
                    p->destroy( yymsp[-2].minor.yy0 );
                  yy_destructor(yypParser,20,&yymsp[0].minor);
}
#line 3163 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 122: /* newfunc_lbr ::= QMARK LPN expr_list RPN LBR */
#line 816 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,8,&yymsp[-3].minor);
  yy_destructor(yypParser,11,&yymsp[-1].minor);
  yy_destructor(yypParser,13,&yymsp[0].minor);
}
#line 3172 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 123: /* newfunc_lbr ::= PERIOD QMARK LPN expr_list RPN LBR */
#line 819 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,56,&yymsp[-4].minor);
  yy_destructor(yypParser,8,&yymsp[-3].minor);
  yy_destructor(yypParser,11,&yymsp[-1].minor);
  yy_destructor(yypParser,13,&yymsp[0].minor);
}
#line 3182 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 124: /* newfunc_lbr ::= QMARK LPN expr_list RPN YIELD LBR */
#line 822 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,8,&yymsp[-4].minor);
  yy_destructor(yypParser,11,&yymsp[-2].minor);
  yy_destructor(yypParser,6,&yymsp[-1].minor);
  yy_destructor(yypParser,13,&yymsp[0].minor);
}
#line 3192 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 125: /* newfunc_lbr ::= PERIOD QMARK LPN expr_list RPN YIELD LBR */
#line 825 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,56,&yymsp[-5].minor);
  yy_destructor(yypParser,8,&yymsp[-4].minor);
  yy_destructor(yypParser,11,&yymsp[-2].minor);
  yy_destructor(yypParser,6,&yymsp[-1].minor);
  yy_destructor(yypParser,13,&yymsp[0].minor);
}
#line 3203 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 127: /* expr_value ::= LBR RBR */
#line 835 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy191 = p->alloc< xec_new_table >( yymsp[-1].minor.yy0->sloc );
                    p->destroy( yymsp[-1].minor.yy0 );
                  yy_destructor(yypParser,12,&yymsp[0].minor);
}
#line 3212 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 128: /* expr_value ::= LBR keyval_list RBR */
#line 840 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy191 = yymsp[-1].minor.yy287;
                    yygotominor.yy191->sloc = yymsp[-2].minor.yy0->sloc;
                    p->destroy( yymsp[-2].minor.yy0 );
                  yy_destructor(yypParser,12,&yymsp[0].minor);
}
#line 3222 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 130: /* expr_lbody ::= expr_lbody COMMA expr_value */
      case 174: /* sexpr_lbody ::= sexpr_lbody COMMA expr_value */ yytestcase(yyruleno==174);
#line 851 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy191 = p->expr_append( yymsp[-2].minor.yy191, yymsp[0].minor.yy191 );
                  yy_destructor(yypParser,18,&yymsp[-1].minor);
}
#line 3231 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 131: /* expr_final ::= ELLIPSIS */
#line 857 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy191 = p->alloc< xec_expr_vararg >( yymsp[0].minor.yy0->sloc );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3239 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 132: /* expr_final ::= proto ELLIPSIS */
#line 862 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy191 = p->expr_proto( yymsp[-1].minor.yy191 );
                    assert( yymsp[-1].minor.yy191->kind == XEC_EXPR_CALL );
                    ( (xec_expr_call*)yymsp[-1].minor.yy191 )->unpack = true;
                    yygotominor.yy191 = yymsp[-1].minor.yy191;
                  yy_destructor(yypParser,57,&yymsp[0].minor);
}
#line 3250 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 133: /* expr_final ::= expr_call ELLIPSIS */
#line 869 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    assert( yymsp[-1].minor.yy191->kind == XEC_EXPR_CALL );
                    ( (xec_expr_call*)yymsp[-1].minor.yy191 )->unpack = true;
                    yygotominor.yy191 = yymsp[-1].minor.yy191;
                  yy_destructor(yypParser,57,&yymsp[0].minor);
}
#line 3260 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 134: /* expr_final ::= expr_yield ELLIPSIS */
#line 875 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    assert( yymsp[-1].minor.yy191->kind == XEC_EXPR_YIELD );
                    ( (xec_expr_yield*)yymsp[-1].minor.yy191 )->unpack = true;
                    yygotominor.yy191 = yymsp[-1].minor.yy191;
                  yy_destructor(yypParser,57,&yymsp[0].minor);
}
#line 3270 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 135: /* expr_final ::= proto YIELD ELLIPSIS */
#line 881 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-2].minor.yy191 = p->expr_proto( yymsp[-2].minor.yy191 );
                    assert( yymsp[-2].minor.yy191->kind == XEC_EXPR_CALL );
                    ( (xec_expr_call*)yymsp[-2].minor.yy191 )->yieldcall = true;
                    ( (xec_expr_call*)yymsp[-2].minor.yy191 )->unpack = true;
                    yygotominor.yy191 = yymsp[-2].minor.yy191;
                  yy_destructor(yypParser,6,&yymsp[-1].minor);
  yy_destructor(yypParser,57,&yymsp[0].minor);
}
#line 3283 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 136: /* expr_final ::= expr_call YIELD ELLIPSIS */
#line 889 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    assert( yymsp[-2].minor.yy191->kind == XEC_EXPR_CALL );
                    ( (xec_expr_call*)yymsp[-2].minor.yy191 )->yieldcall = true;
                    ( (xec_expr_call*)yymsp[-2].minor.yy191 )->unpack = true;
                    yygotominor.yy191 = yymsp[-2].minor.yy191;
                  yy_destructor(yypParser,6,&yymsp[-1].minor);
  yy_destructor(yypParser,57,&yymsp[0].minor);
}
#line 3295 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 137: /* expr_final ::= name LSQ RSQ ELLIPSIS */
#line 896 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-3].minor.yy191 = p->expr_name( yymsp[-3].minor.yy191 );
                    yygotominor.yy191 = p->alloc< xec_expr_unpack >( yymsp[-3].minor.yy191->sloc, yymsp[-3].minor.yy191 );
                  yy_destructor(yypParser,19,&yymsp[-2].minor);
  yy_destructor(yypParser,20,&yymsp[-1].minor);
  yy_destructor(yypParser,57,&yymsp[0].minor);
}
#line 3306 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 138: /* expr_final ::= proto LSQ RSQ ELLIPSIS */
#line 901 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-3].minor.yy191 = p->expr_proto( yymsp[-3].minor.yy191 );
                    yygotominor.yy191 = p->alloc< xec_expr_unpack >( yymsp[-3].minor.yy191->sloc, yymsp[-3].minor.yy191 );
                  yy_destructor(yypParser,19,&yymsp[-2].minor);
  yy_destructor(yypParser,20,&yymsp[-1].minor);
  yy_destructor(yypParser,57,&yymsp[0].minor);
}
#line 3317 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 139: /* expr_final ::= expr_index LSQ RSQ ELLIPSIS */
      case 140: /* expr_final ::= expr_yield LSQ RSQ ELLIPSIS */ yytestcase(yyruleno==140);
      case 141: /* expr_final ::= expr_new LSQ RSQ ELLIPSIS */ yytestcase(yyruleno==141);
      case 142: /* expr_final ::= expr_call LSQ RSQ ELLIPSIS */ yytestcase(yyruleno==142);
      case 143: /* expr_final ::= expr_postfix LSQ RSQ ELLIPSIS */ yytestcase(yyruleno==143);
#line 906 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy191 = p->alloc< xec_expr_unpack >( yymsp[-3].minor.yy191->sloc, yymsp[-3].minor.yy191 );
                  yy_destructor(yypParser,19,&yymsp[-2].minor);
  yy_destructor(yypParser,20,&yymsp[-1].minor);
  yy_destructor(yypParser,57,&yymsp[0].minor);
}
#line 3331 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 146: /* expr_list ::= expr_lbody COMMA expr_final */
      case 177: /* sexpr_list ::= sexpr_lbody COMMA expr_final */ yytestcase(yyruleno==177);
#line 935 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy191 = p->expr_final( yymsp[-2].minor.yy191, yymsp[0].minor.yy191 );
                  yy_destructor(yypParser,18,&yymsp[-1].minor);
}
#line 3340 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 148: /* expr_assign ::= expr_lbody assign_op expr_assign */
      case 179: /* sexpr_assign ::= sexpr_lbody assign_op expr_assign */ yytestcase(yyruleno==179);
#line 944 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy191 = p->expr_assign( yymsp[-1].minor.yy91, yymsp[-2].minor.yy191, yymsp[0].minor.yy191 );
                    p->destroy( yymsp[-1].minor.yy91 );
                }
#line 3349 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 149: /* assign_op ::= ASSIGN */
      case 150: /* assign_op ::= MULASSIGN */ yytestcase(yyruleno==150);
      case 151: /* assign_op ::= DIVASSIGN */ yytestcase(yyruleno==151);
      case 152: /* assign_op ::= MODASSIGN */ yytestcase(yyruleno==152);
      case 153: /* assign_op ::= INTDIVASSIGN */ yytestcase(yyruleno==153);
      case 154: /* assign_op ::= ADDASSIGN */ yytestcase(yyruleno==154);
      case 155: /* assign_op ::= SUBASSIGN */ yytestcase(yyruleno==155);
      case 156: /* assign_op ::= LSHIFTASSIGN */ yytestcase(yyruleno==156);
      case 157: /* assign_op ::= RSHIFTASSIGN */ yytestcase(yyruleno==157);
      case 158: /* assign_op ::= URSHIFTASSIGN */ yytestcase(yyruleno==158);
      case 159: /* assign_op ::= BITANDASSIGN */ yytestcase(yyruleno==159);
      case 160: /* assign_op ::= BITXORASSIGN */ yytestcase(yyruleno==160);
      case 161: /* assign_op ::= BITORASSIGN */ yytestcase(yyruleno==161);
      case 242: /* token_yield ::= YIELD */ yytestcase(yyruleno==242);
      case 243: /* token_using ::= USING */ yytestcase(yyruleno==243);
#line 951 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy91 = yymsp[0].minor.yy0;
                }
#line 3370 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 162: /* value_lbody ::= expr_value */
#line 1005 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy92 = p->alloc< xec_new_list >( -1 );
                    yygotominor.yy92->values.push_back( yymsp[0].minor.yy191 );
                }
#line 3378 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 163: /* value_lbody ::= value_lbody COMMA expr_value */
#line 1010 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy92 = yymsp[-2].minor.yy92;
                    yygotominor.yy92->values.push_back( yymsp[0].minor.yy191 );
                  yy_destructor(yypParser,18,&yymsp[-1].minor);
}
#line 3387 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 164: /* value_list ::= expr_final */
#line 1016 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy92 = p->alloc< xec_new_list >( -1 );
                    yygotominor.yy92->unpack = yymsp[0].minor.yy191;
                }
#line 3395 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 165: /* value_list ::= expr_final COMMA */
#line 1021 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy92 = p->alloc< xec_new_list >( -1 );
                    yygotominor.yy92->unpack = yymsp[-1].minor.yy191;
                  yy_destructor(yypParser,18,&yymsp[0].minor);
}
#line 3404 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 166: /* value_list ::= value_lbody */
#line 1026 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy92 = yymsp[0].minor.yy92;
                }
#line 3411 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 167: /* value_list ::= value_lbody COMMA */
#line 1030 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy92 = yymsp[-1].minor.yy92;
                  yy_destructor(yypParser,18,&yymsp[0].minor);
}
#line 3419 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 168: /* value_list ::= value_lbody COMMA expr_final */
#line 1034 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy92 = yymsp[-2].minor.yy92;
                    yygotominor.yy92->unpack = yymsp[0].minor.yy191;
                  yy_destructor(yypParser,18,&yymsp[-1].minor);
}
#line 3428 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 169: /* keyval_lbody ::= expr_value COLON expr_value */
#line 1041 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy287 = new xec_new_table( -1 );
                    yygotominor.yy287->elements.emplace_back( yymsp[-2].minor.yy191, yymsp[0].minor.yy191 );
                  yy_destructor(yypParser,14,&yymsp[-1].minor);
}
#line 3437 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 170: /* keyval_lbody ::= keyval_lbody COMMA expr_value COLON expr_value */
#line 1047 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy287 = yymsp[-4].minor.yy287;
                    yygotominor.yy287->elements.emplace_back( yymsp[-2].minor.yy191, yymsp[0].minor.yy191 );
                  yy_destructor(yypParser,18,&yymsp[-3].minor);
  yy_destructor(yypParser,14,&yymsp[-1].minor);
}
#line 3447 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 171: /* keyval_list ::= keyval_lbody */
#line 1053 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy287 = yymsp[0].minor.yy287;
                }
#line 3454 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 172: /* keyval_list ::= keyval_lbody COMMA */
#line 1057 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy287 = yymsp[-1].minor.yy287;
                  yy_destructor(yypParser,18,&yymsp[0].minor);
}
#line 3462 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 183: /* condition ::= USING expr_assign */
      case 184: /* condition ::= USING decl_var */ yytestcase(yyruleno==184);
#line 1123 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,7,&yymsp[-1].minor);
}
#line 3470 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 186: /* stmt_list ::= stmt_list stmt */
#line 1136 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    p->statement( yymsp[0].minor.yy191 );
                  yy_destructor(yypParser,105,&yymsp[-1].minor);
}
#line 3478 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 187: /* stmt ::= stmt_lbr stmt_list RBR */
#line 1143 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy191 = yymsp[-2].minor.yy36;
                    p->close_scope( yymsp[-2].minor.yy36->scope );
                  yy_destructor(yypParser,105,&yymsp[-1].minor);
  yy_destructor(yypParser,12,&yymsp[0].minor);
}
#line 3488 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 189: /* stmt_lbr ::= LBR */
#line 1153 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy36 = p->alloc< xec_stmt_block >( yymsp[0].minor.yy0->sloc );
                    yygotominor.yy36->scope = p->block_scope( yygotominor.yy36 );
                    yygotominor.yy36->scope->block = yygotominor.yy36;
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3498 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 190: /* stmt_reuse ::= stmt_lbr_ru stmt_list RBR */
#line 1163 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy191 = yymsp[-2].minor.yy36;
                  yy_destructor(yypParser,105,&yymsp[-1].minor);
  yy_destructor(yypParser,12,&yymsp[0].minor);
}
#line 3507 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 192: /* stmt_lbr_ru ::= LBR */
#line 1172 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy36 = p->alloc< xec_stmt_block >( yymsp[0].minor.yy0->sloc );
                    yygotominor.yy36->scope = p->get_scope();
                    yygotominor.yy36->scope->block = yygotominor.yy36;
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3517 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 193: /* stmt_common ::= SEMICOLON */
#line 1183 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy191 = nullptr;
                  yy_destructor(yypParser,15,&yymsp[0].minor);
}
#line 3525 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 194: /* stmt_common ::= sexpr_assign SEMICOLON */
      case 197: /* stmt_common ::= decl_var SEMICOLON */ yytestcase(yyruleno==197);
      case 198: /* stmt_common ::= decl_noinit SEMICOLON */ yytestcase(yyruleno==198);
#line 1187 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy191 = yymsp[-1].minor.yy191;
                  yy_destructor(yypParser,15,&yymsp[0].minor);
}
#line 3535 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 199: /* stmt_common ::= stmt_if LPN condition RPN stmt */
#line 1207 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-4].minor.yy208->condition = yymsp[-2].minor.yy191;
                    yymsp[-4].minor.yy208->iftrue    = p->stmt_nodecl( yymsp[0].minor.yy191 );
                    p->close_scope( yymsp[-4].minor.yy208->scope );
                    yygotominor.yy191 = yymsp[-4].minor.yy208;
                  yy_destructor(yypParser,8,&yymsp[-3].minor);
  yy_destructor(yypParser,11,&yymsp[-1].minor);
}
#line 3547 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 200: /* stmt_common ::= stmt_if LPN condition RPN stmt ELSE stmt */
#line 1215 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-6].minor.yy208->condition = yymsp[-4].minor.yy191;
                    yymsp[-6].minor.yy208->iftrue    = p->stmt_nodecl( yymsp[-2].minor.yy191 );
                    yymsp[-6].minor.yy208->iffalse   = p->stmt_nodecl( yymsp[0].minor.yy191 );
                    p->close_scope( yymsp[-6].minor.yy208->scope );
                    yygotominor.yy191 = yymsp[-6].minor.yy208;
                  yy_destructor(yypParser,8,&yymsp[-5].minor);
  yy_destructor(yypParser,11,&yymsp[-3].minor);
  yy_destructor(yypParser,2,&yymsp[-1].minor);
}
#line 3561 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 201: /* stmt_common ::= stmt_switch LPN condition RPN stmt_lbr_ru stmt_list RPN */
#line 1224 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-6].minor.yy199->value     = yymsp[-4].minor.yy191;
                    yymsp[-6].minor.yy199->body      = yymsp[-2].minor.yy36;
                    p->close_scope( yymsp[-6].minor.yy199->scope );
                    yygotominor.yy191 = yymsp[-6].minor.yy199;
                  yy_destructor(yypParser,8,&yymsp[-5].minor);
  yy_destructor(yypParser,11,&yymsp[-3].minor);
  yy_destructor(yypParser,105,&yymsp[-1].minor);
  yy_destructor(yypParser,11,&yymsp[0].minor);
}
#line 3575 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 202: /* stmt_common ::= stmt_while LPN condition RPN stmt_reuse */
#line 1232 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-4].minor.yy6->condition = yymsp[-2].minor.yy191;
                    yymsp[-4].minor.yy6->body      = p->stmt_nodecl( yymsp[0].minor.yy191 );
                    p->close_scope( yymsp[-4].minor.yy6->scope );
                    yygotominor.yy191 = yymsp[-4].minor.yy6;
                  yy_destructor(yypParser,8,&yymsp[-3].minor);
  yy_destructor(yypParser,11,&yymsp[-1].minor);
}
#line 3587 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 203: /* stmt_common ::= stmt_do stmt_reuse WHILE LPN expr_assign RPN SEMICOLON */
#line 1240 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-6].minor.yy56->body      = p->stmt_nodecl( yymsp[-5].minor.yy191 );
                    yymsp[-6].minor.yy56->condition = yymsp[-2].minor.yy191;
                    p->close_scope( yymsp[-6].minor.yy56->scope );
                    yygotominor.yy191 = yymsp[-6].minor.yy56;
                  yy_destructor(yypParser,70,&yymsp[-4].minor);
  yy_destructor(yypParser,8,&yymsp[-3].minor);
  yy_destructor(yypParser,11,&yymsp[-1].minor);
  yy_destructor(yypParser,15,&yymsp[0].minor);
}
#line 3601 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 204: /* stmt_common ::= stmt_foreach stmt_reuse */
#line 1247 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy213->body      = yymsp[0].minor.yy191;
                    p->close_scope( yymsp[-1].minor.yy213->scope );
                    yygotominor.yy191 = yymsp[-1].minor.yy213;
                }
#line 3610 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 205: /* stmt_common ::= stmt_for stmt_reuse */
#line 1253 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy57->body      = yymsp[0].minor.yy191;
                    p->close_scope( yymsp[-1].minor.yy57->scope );
                    yygotominor.yy191 = yymsp[-1].minor.yy57;
                }
#line 3619 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 206: /* stmt_common ::= stmt_uscope cond_using RPN stmt_reuse */
#line 1259 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-3].minor.yy104->uvalue    = yymsp[-2].minor.yy191;
                    yymsp[-3].minor.yy104->body      = p->stmt_nodecl( yymsp[0].minor.yy191 );
                    p->close_scope( yymsp[-3].minor.yy104->scope );
                    yygotominor.yy191 = yymsp[-3].minor.yy104;
                  yy_destructor(yypParser,11,&yymsp[-1].minor);
}
#line 3630 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 207: /* stmt_common ::= token_using expr_assign SEMICOLON */
      case 208: /* stmt_common ::= token_using decl_var SEMICOLON */ yytestcase(yyruleno==208);
#line 1266 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy191 = p->alloc< xec_stmt_using >( yymsp[-2].minor.yy91->sloc, yymsp[-1].minor.yy191 );
                    p->destroy( yymsp[-2].minor.yy91 );
                  yy_destructor(yypParser,15,&yymsp[0].minor);
}
#line 3640 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 210: /* stmt_common ::= DELETE expr_lbody SEMICOLON */
#line 1280 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    xec_stmt_delete* s;
                    yygotominor.yy191 = s = p->alloc< xec_stmt_delete >( yymsp[-2].minor.yy0->sloc );
                    p->expr_delete_list( yymsp[-1].minor.yy191, &s->lvalues );
                    p->destroy( yymsp[-2].minor.yy0 );
                  yy_destructor(yypParser,15,&yymsp[0].minor);
}
#line 3651 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 211: /* stmt_common ::= CASE expr_value COLON */
#line 1287 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy191 = p->alloc< xec_stmt_case >( yymsp[-2].minor.yy0->sloc, yymsp[-1].minor.yy191 );
                    p->destroy( yymsp[-2].minor.yy0 );
                  yy_destructor(yypParser,14,&yymsp[0].minor);
}
#line 3660 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 212: /* stmt_common ::= DEFAULT COLON */
#line 1292 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy191 = p->alloc< xec_stmt_case >( yymsp[-1].minor.yy0->sloc, nullptr );
                    p->destroy( yymsp[-1].minor.yy0 );
                  yy_destructor(yypParser,14,&yymsp[0].minor);
}
#line 3669 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 213: /* stmt_common ::= CONTINUE SEMICOLON */
#line 1297 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    xec_ast_node* target = p->get_continue_target();
                    yygotominor.yy191 = p->alloc< xec_stmt_continue >( yymsp[-1].minor.yy0->sloc, target );
                    p->destroy( yymsp[-1].minor.yy0 );
                  yy_destructor(yypParser,15,&yymsp[0].minor);
}
#line 3679 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 214: /* stmt_common ::= BREAK SEMICOLON */
#line 1303 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    xec_ast_node* target = p->get_break_target();
                    yygotominor.yy191 = p->alloc< xec_stmt_break >( yymsp[-1].minor.yy0->sloc, target );
                    p->destroy( yymsp[-1].minor.yy0 );
                  yy_destructor(yypParser,15,&yymsp[0].minor);
}
#line 3689 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 215: /* stmt_common ::= RETURN SEMICOLON */
#line 1309 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    xec_expr_list* vals =
                                p->alloc< xec_expr_list >( yymsp[-1].minor.yy0->sloc );
                    yygotominor.yy191 = p->alloc< xec_stmt_return >( yymsp[-1].minor.yy0->sloc, vals );
                    p->destroy( yymsp[-1].minor.yy0 );
                  yy_destructor(yypParser,15,&yymsp[0].minor);
}
#line 3700 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 216: /* stmt_common ::= RETURN expr_list SEMICOLON */
#line 1316 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy191 = p->alloc< xec_stmt_return >(
                                    yymsp[-2].minor.yy0->sloc, p->expr_list( yymsp[-1].minor.yy191 ) );
                    p->destroy( yymsp[-2].minor.yy0 );
                  yy_destructor(yypParser,15,&yymsp[0].minor);
}
#line 3710 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 217: /* stmt_common ::= token_yield SEMICOLON */
#line 1322 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    xec_expr_list* args =
                                p->alloc< xec_expr_list >( yymsp[-1].minor.yy91->sloc );
                    yygotominor.yy191 = p->alloc< xec_expr_yield >( yymsp[-1].minor.yy91->sloc, args );
                    p->destroy( yymsp[-1].minor.yy91 );
                  yy_destructor(yypParser,15,&yymsp[0].minor);
}
#line 3721 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 218: /* stmt_common ::= token_yield expr_list SEMICOLON */
#line 1329 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy191 = p->alloc< xec_expr_yield >(
                                    yymsp[-2].minor.yy91->sloc, p->expr_list( yymsp[-1].minor.yy191 ) );
                    p->destroy( yymsp[-2].minor.yy91 );
                  yy_destructor(yypParser,15,&yymsp[0].minor);
}
#line 3731 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 219: /* stmt_common ::= THROW expr_value SEMICOLON */
#line 1335 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy191 = p->alloc< xec_stmt_throw >( yymsp[-2].minor.yy0->sloc, yymsp[-1].minor.yy191 );
                    p->destroy( yymsp[-2].minor.yy0 );
                  yy_destructor(yypParser,15,&yymsp[0].minor);
}
#line 3740 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 220: /* stmt_if ::= IF */
#line 1344 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy208 = p->alloc< xec_stmt_if >( yymsp[0].minor.yy0->sloc );
                    yygotominor.yy208->scope = p->block_scope( yygotominor.yy208 );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3749 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 221: /* stmt_switch ::= SWITCH */
#line 1351 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy199 = p->alloc< xec_stmt_switch >( yymsp[0].minor.yy0->sloc );
                    yygotominor.yy199->scope = p->block_scope( yygotominor.yy199 );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3758 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 222: /* stmt_while ::= WHILE */
#line 1358 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy6 = p->alloc< xec_stmt_while >( yymsp[0].minor.yy0->sloc );
                    yygotominor.yy6->scope = p->block_scope( yygotominor.yy6 );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3767 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 223: /* stmt_do ::= DO */
#line 1365 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy56 = p->alloc< xec_stmt_do >( yymsp[0].minor.yy0->sloc );
                    yygotominor.yy56->scope = p->block_scope( yygotominor.yy56 );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3776 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 224: /* scope_for ::= FOR */
#line 1372 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    // open scope before we know the kind of statement.
                    yygotominor.yy218 = make_token_scope( yymsp[0].minor.yy0, p->block_scope( nullptr ) );
                }
#line 3784 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 225: /* stmt_foreach ::= scope_for LPN expr_lbody COLON expr_value RPN */
#line 1379 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy213 = p->alloc< xec_stmt_foreach >( yymsp[-5].minor.yy218.token->sloc );
                    yymsp[-5].minor.yy218.scope->node = yygotominor.yy213;
                    yygotominor.yy213->scope    = yymsp[-5].minor.yy218.scope;
                    p->expr_lvalue_list( yymsp[-3].minor.yy191, &yygotominor.yy213->lvalues );
                    yygotominor.yy213->list     = yymsp[-1].minor.yy191;
                    p->destroy( yymsp[-5].minor.yy218.token );
                  yy_destructor(yypParser,8,&yymsp[-4].minor);
  yy_destructor(yypParser,14,&yymsp[-2].minor);
  yy_destructor(yypParser,11,&yymsp[0].minor);
}
#line 3799 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 226: /* stmt_foreach ::= scope_for LPN expr_lbody EACHKEY expr_value RPN */
#line 1389 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy213 = p->alloc< xec_stmt_foreach >( yymsp[-5].minor.yy218.token->sloc );
                    yymsp[-5].minor.yy218.scope->node = yygotominor.yy213;
                    yygotominor.yy213->scope    = yymsp[-5].minor.yy218.scope;
                    p->expr_lvalue_list( yymsp[-3].minor.yy191, &yygotominor.yy213->lvalues );
                    yygotominor.yy213->list     = yymsp[-1].minor.yy191;
                    yygotominor.yy213->eachkey  = true;
                    p->destroy( yymsp[-5].minor.yy218.token );
                  yy_destructor(yypParser,8,&yymsp[-4].minor);
  yy_destructor(yypParser,81,&yymsp[-2].minor);
  yy_destructor(yypParser,11,&yymsp[0].minor);
}
#line 3815 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 227: /* stmt_foreach ::= scope_for LPN VAR varname_list COLON expr_value RPN */
#line 1400 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,8,&yymsp[-5].minor);
  yy_destructor(yypParser,16,&yymsp[-4].minor);
  yy_destructor(yypParser,14,&yymsp[-2].minor);
  yy_destructor(yypParser,11,&yymsp[0].minor);
}
#line 3825 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 228: /* stmt_foreach ::= scope_for LPN VAR varname_list EACHKEY expr_value RPN */
#line 1404 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,8,&yymsp[-5].minor);
  yy_destructor(yypParser,16,&yymsp[-4].minor);
  yy_destructor(yypParser,81,&yymsp[-2].minor);
  yy_destructor(yypParser,11,&yymsp[0].minor);
}
#line 3835 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 229: /* stmt_for ::= scope_for LPN condition SEMICOLON expr_assign SEMICOLON expr_assign RPN */
#line 1411 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy57 = p->alloc< xec_stmt_for >( yymsp[-7].minor.yy218.token->sloc );
                    yymsp[-7].minor.yy218.scope->node = yygotominor.yy57;
                    yygotominor.yy57->scope        = yymsp[-7].minor.yy218.scope;
                    yygotominor.yy57->init         = yymsp[-5].minor.yy191;
                    yygotominor.yy57->condition    = yymsp[-3].minor.yy191;
                    yygotominor.yy57->update       = yymsp[-1].minor.yy191;
                    p->destroy( yymsp[-7].minor.yy218.token );
                  yy_destructor(yypParser,8,&yymsp[-6].minor);
  yy_destructor(yypParser,15,&yymsp[-4].minor);
  yy_destructor(yypParser,15,&yymsp[-2].minor);
  yy_destructor(yypParser,11,&yymsp[0].minor);
}
#line 3852 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 230: /* stmt_uscope ::= USING LPN */
#line 1422 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy104 = p->alloc< xec_stmt_using_scope >( yymsp[-1].minor.yy0->sloc );
                    yygotominor.yy104->scope = p->block_scope( yygotominor.yy104 );
                    p->destroy( yymsp[-1].minor.yy0 );
                  yy_destructor(yypParser,8,&yymsp[0].minor);
}
#line 3862 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 231: /* stmt_try ::= try_catch */
#line 1432 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy191 = yymsp[0].minor.yy236;
                }
#line 3869 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 232: /* stmt_try ::= try_catch FINALLY stmt */
      case 233: /* stmt_try ::= try_block FINALLY stmt */ yytestcase(yyruleno==233);
#line 1436 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-2].minor.yy236->fstmt = p->stmt_nodecl( yymsp[0].minor.yy191 );
                    yygotominor.yy191 = yymsp[-2].minor.yy236;
                  yy_destructor(yypParser,5,&yymsp[-1].minor);
}
#line 3879 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 234: /* try_block ::= TRY stmt */
#line 1447 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy236 = p->alloc< xec_stmt_try >( yymsp[-1].minor.yy0->sloc, yymsp[0].minor.yy191 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 3887 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 235: /* try_catch ::= try_block catch */
      case 236: /* try_catch ::= try_catch catch */ yytestcase(yyruleno==236);
#line 1453 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy236->clist.push_back( yymsp[0].minor.yy184 );
                    yygotominor.yy236 = yymsp[-1].minor.yy236;
                }
#line 3896 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 237: /* catch ::= stmt_catch LPN COLON expr_simple RPN stmt_reuse */
#line 1465 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-5].minor.yy184->proto     = yymsp[-2].minor.yy191;
                    yymsp[-5].minor.yy184->body      = p->stmt_nodecl( yymsp[0].minor.yy191 );
                    p->close_scope( yymsp[-5].minor.yy184->scope );
                  yy_destructor(yypParser,8,&yymsp[-4].minor);
  yy_destructor(yypParser,14,&yymsp[-3].minor);
  yy_destructor(yypParser,11,&yymsp[-1].minor);
}
#line 3908 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 238: /* catch ::= stmt_catch LPN expr_value COLON expr_simple RPN stmt_reuse */
      case 239: /* catch ::= stmt_catch LPN decl_catch COLON expr_simple RPN stmt_reuse */ yytestcase(yyruleno==239);
#line 1472 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-6].minor.yy184->lvalue    = yymsp[-4].minor.yy191;
                    yymsp[-6].minor.yy184->proto     = yymsp[-2].minor.yy191;
                    yymsp[-6].minor.yy184->body      = p->stmt_nodecl( yymsp[0].minor.yy191 );
                    p->close_scope( yymsp[-6].minor.yy184->scope );
                  yy_destructor(yypParser,8,&yymsp[-5].minor);
  yy_destructor(yypParser,14,&yymsp[-3].minor);
  yy_destructor(yypParser,11,&yymsp[-1].minor);
}
#line 3922 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 240: /* stmt_catch ::= CATCH */
#line 1488 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy184 = p->alloc< xec_stmt_catch >( yymsp[0].minor.yy0->sloc );
                    yygotominor.yy184->scope = p->block_scope( yygotominor.yy184 );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3931 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      default:
      /* (7) object_decls ::= */ yytestcase(yyruleno==7);
        break;
  };
  yygoto = yyRuleInfo[yyruleno].lhs;
  yysize = yyRuleInfo[yyruleno].nrhs;
  yypParser->yyidx -= yysize;
  yyact = yy_find_reduce_action(yymsp[-yysize].stateno,(YYCODETYPE)yygoto);
  if( yyact < YYNSTATE ){
#ifdef NDEBUG
    /* If we are not debugging and the reduce action popped at least
    ** one element off the stack, then we can push the new element back
    ** onto the stack here, and skip the stack overflow test in yy_shift().
    ** That gives a significant speed improvement. */
    if( yysize ){
      yypParser->yyidx++;
      yymsp -= yysize-1;
      yymsp->stateno = (YYACTIONTYPE)yyact;
      yymsp->major = (YYCODETYPE)yygoto;
      yymsp->minor = yygotominor;
    }else
#endif
    {
      yy_shift(yypParser,yyact,yygoto,&yygotominor);
    }
  }else{
    assert( yyact == YYNSTATE + YYNRULE + 1 );
    yy_accept(yypParser);
  }
}

/*
** The following code executes when the parse fails
*/
#ifndef YYNOERRORRECOVERY
static void yy_parse_failed(
  yyParser *yypParser           /* The parser */
){
  XecParseARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sFail!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser fails */
  XecParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}
#endif /* YYNOERRORRECOVERY */

/*
** The following code executes when a syntax error first occurs.
*/
static void yy_syntax_error(
  yyParser *yypParser,           /* The parser */
  int yymajor,                   /* The major type of the error token */
  YYMINORTYPE yyminor            /* The minor type of the error token */
){
  XecParseARG_FETCH;
#define TOKEN (yyminor.yy0)
#line 1522 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"

    p->get_script()->diagnostic( TOKEN->sloc,
            "unexpected %s", TOKEN->get_spelling().c_str() );
#line 3998 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
  XecParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/*
** The following is executed when the parser accepts
*/
static void yy_accept(
  yyParser *yypParser           /* The parser */
){
  XecParseARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sAccept!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser accepts */
  XecParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/* The main parser program.
** The first argument is a pointer to a structure obtained from
** "XecParseAlloc" which describes the current state of the parser.
** The second argument is the major token number.  The third is
** the minor token.  The fourth optional argument is whatever the
** user wants (and specified in the grammar) and is available for
** use by the action routines.
**
** Inputs:
** <ul>
** <li> A pointer to the parser (an opaque structure.)
** <li> The major token number.
** <li> The minor token number.
** <li> An option argument of a grammar-specified type.
** </ul>
**
** Outputs:
** None.
*/
void XecParse(
  void *yyp,                   /* The parser */
  int yymajor,                 /* The major token code number */
  XecParseTOKENTYPE yyminor       /* The value for the token */
  XecParseARG_PDECL               /* Optional %extra_argument parameter */
){
  YYMINORTYPE yyminorunion;
  int yyact;            /* The parser action. */
  int yyendofinput;     /* True if we are at the end of input */
#ifdef YYERRORSYMBOL
  int yyerrorhit = 0;   /* True if yymajor has invoked an error */
#endif
  yyParser *yypParser;  /* The parser */

  /* (re)initialize the parser, if necessary */
  yypParser = (yyParser*)yyp;
  if( yypParser->yyidx<0 ){
#if YYSTACKDEPTH<=0
    if( yypParser->yystksz <=0 ){
      /*memset(&yyminorunion, 0, sizeof(yyminorunion));*/
      yyminorunion = yyzerominor;
      yyStackOverflow(yypParser, &yyminorunion);
      return;
    }
#endif
    yypParser->yyidx = 0;
    yypParser->yyerrcnt = -1;
    yypParser->yystack[0].stateno = 0;
    yypParser->yystack[0].major = 0;
  }
  yyminorunion.yy0 = yyminor;
  yyendofinput = (yymajor==0);
  XecParseARG_STORE;

#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sInput %s\n",yyTracePrompt,yyTokenName[yymajor]);
  }
#endif

  do{
    yyact = yy_find_shift_action(yypParser,(YYCODETYPE)yymajor);
    if( yyact<YYNSTATE ){
      assert( !yyendofinput );  /* Impossible to shift the $ token */
      yy_shift(yypParser,yyact,yymajor,&yyminorunion);
      yypParser->yyerrcnt--;
      yymajor = YYNOCODE;
    }else if( yyact < YYNSTATE + YYNRULE ){
      yy_reduce(yypParser,yyact-YYNSTATE);
    }else{
      assert( yyact == YY_ERROR_ACTION );
#ifdef YYERRORSYMBOL
      int yymx;
#endif
#ifndef NDEBUG
      if( yyTraceFILE ){
        fprintf(yyTraceFILE,"%sSyntax Error!\n",yyTracePrompt);
      }
#endif
#ifdef YYERRORSYMBOL
      /* A syntax error has occurred.
      ** The response to an error depends upon whether or not the
      ** grammar defines an error token "ERROR".  
      **
      ** This is what we do if the grammar does define ERROR:
      **
      **  * Call the %syntax_error function.
      **
      **  * Begin popping the stack until we enter a state where
      **    it is legal to shift the error symbol, then shift
      **    the error symbol.
      **
      **  * Set the error count to three.
      **
      **  * Begin accepting and shifting new tokens.  No new error
      **    processing will occur until three tokens have been
      **    shifted successfully.
      **
      */
      if( yypParser->yyerrcnt<0 ){
        yy_syntax_error(yypParser,yymajor,yyminorunion);
      }
      yymx = yypParser->yystack[yypParser->yyidx].major;
      if( yymx==YYERRORSYMBOL || yyerrorhit ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE,"%sDiscard input token %s\n",
             yyTracePrompt,yyTokenName[yymajor]);
        }
#endif
        yy_destructor(yypParser, (YYCODETYPE)yymajor,&yyminorunion);
        yymajor = YYNOCODE;
      }else{
         while(
          yypParser->yyidx >= 0 &&
          yymx != YYERRORSYMBOL &&
          (yyact = yy_find_reduce_action(
                        yypParser->yystack[yypParser->yyidx].stateno,
                        YYERRORSYMBOL)) >= YYNSTATE
        ){
          yy_pop_parser_stack(yypParser);
        }
        if( yypParser->yyidx < 0 || yymajor==0 ){
          yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
          yy_parse_failed(yypParser);
          yymajor = YYNOCODE;
        }else if( yymx!=YYERRORSYMBOL ){
          YYMINORTYPE u2;
          u2.YYERRSYMDT = 0;
          yy_shift(yypParser,yyact,YYERRORSYMBOL,&u2);
        }
      }
      yypParser->yyerrcnt = 3;
      yyerrorhit = 1;
#elif defined(YYNOERRORRECOVERY)
      /* If the YYNOERRORRECOVERY macro is defined, then do not attempt to
      ** do any kind of error recovery.  Instead, simply invoke the syntax
      ** error routine and continue going as if nothing had happened.
      **
      ** Applications can set this macro (for example inside %include) if
      ** they intend to abandon the parse upon the first syntax error seen.
      */
      yy_syntax_error(yypParser,yymajor,yyminorunion);
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      yymajor = YYNOCODE;
      
#else  /* YYERRORSYMBOL is not defined */
      /* This is what we do if the grammar does not define ERROR:
      **
      **  * Report an error message, and throw away the input token.
      **
      **  * If the input token is $, then fail the parse.
      **
      ** As before, subsequent error messages are suppressed until
      ** three input tokens have been successfully shifted.
      */
      if( yypParser->yyerrcnt<=0 ){
        yy_syntax_error(yypParser,yymajor,yyminorunion);
      }
      yypParser->yyerrcnt = 3;
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      if( yyendofinput ){
        yy_parse_failed(yypParser);
      }
      yymajor = YYNOCODE;
#endif
    }
  }while( yymajor!=YYNOCODE && yypParser->yyidx>=0 );
  return;
}
