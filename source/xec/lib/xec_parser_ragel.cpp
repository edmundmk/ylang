
#line 1 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
//
//  ../../toolbox/source/xec/lib/xec_parser_ragel.rl
//
//  Created by Edmund Kapusniak on 14/03/2014.
//  Copyright (c) 2014 Edmund Kapusniak. All rights reserved.
//


/*
    ragel ../../toolbox/source/xec/lib/xec_parser_ragel.rl -o xec_parser_ragel.cpp -G2
*/


#include "xec_parser.h"
#include <stdint.h>
#include <intformat.h>
#include "xec_token.h"




#line 252 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"




#line 30 "xec_parser_ragel.cpp"
static const char _lexer_actions[] = {
	0, 1, 0, 1, 1, 1, 2, 1, 
	5, 1, 6, 1, 7, 1, 8, 1, 
	9, 1, 10, 1, 11, 1, 12, 1, 
	13, 1, 14, 1, 15, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 1, 24, 1, 
	25, 1, 26, 1, 27, 1, 28, 1, 
	29, 1, 30, 1, 31, 1, 32, 1, 
	33, 1, 34, 1, 39, 1, 40, 1, 
	41, 1, 42, 1, 43, 1, 44, 1, 
	45, 1, 46, 1, 47, 1, 48, 1, 
	49, 1, 50, 1, 51, 1, 52, 1, 
	53, 1, 54, 1, 55, 1, 56, 1, 
	57, 1, 58, 1, 59, 1, 60, 1, 
	61, 1, 62, 1, 63, 1, 64, 1, 
	65, 1, 66, 1, 67, 1, 68, 1, 
	69, 1, 70, 1, 71, 1, 72, 1, 
	73, 1, 74, 1, 75, 1, 76, 1, 
	77, 1, 78, 1, 79, 1, 80, 1, 
	81, 1, 82, 1, 83, 1, 84, 1, 
	85, 1, 86, 1, 87, 1, 88, 1, 
	89, 1, 90, 1, 91, 1, 92, 1, 
	93, 1, 94, 2, 0, 1, 2, 0, 
	42, 2, 1, 2, 2, 4, 95, 2, 
	35, 38, 2, 36, 38, 2, 37, 38, 
	2, 39, 1, 2, 40, 1, 2, 41, 
	1, 2, 42, 1, 2, 43, 1, 2, 
	44, 1, 2, 45, 1, 2, 46, 1, 
	2, 47, 1, 2, 48, 1, 2, 49, 
	1, 2, 50, 1, 2, 51, 1, 2, 
	52, 1, 2, 53, 1, 2, 54, 1, 
	2, 55, 1, 2, 56, 1, 2, 57, 
	1, 2, 58, 1, 2, 59, 1, 2, 
	60, 1, 2, 61, 1, 2, 62, 1, 
	2, 63, 1, 2, 64, 1, 2, 65, 
	1, 2, 66, 1, 2, 67, 1, 2, 
	68, 1, 2, 69, 1, 2, 70, 1, 
	2, 71, 1, 2, 72, 1, 2, 73, 
	1, 2, 74, 1, 2, 75, 1, 2, 
	76, 1, 2, 77, 1, 2, 78, 1, 
	2, 79, 1, 2, 80, 1, 2, 81, 
	1, 2, 82, 1, 2, 83, 1, 2, 
	84, 1, 2, 85, 1, 2, 86, 1, 
	2, 87, 1, 2, 88, 1, 2, 89, 
	1, 2, 90, 1, 2, 91, 1, 2, 
	92, 1, 2, 93, 1, 2, 94, 1, 
	3, 0, 1, 2, 3, 0, 4, 95, 
	3, 0, 42, 1, 3, 3, 4, 95, 
	3, 40, 1, 2, 3, 41, 1, 2, 
	3, 42, 1, 2, 3, 43, 1, 2, 
	3, 44, 1, 2, 3, 45, 1, 2, 
	3, 46, 1, 2, 3, 47, 1, 2, 
	3, 48, 1, 2, 3, 49, 1, 2, 
	3, 50, 1, 2, 3, 51, 1, 2, 
	3, 52, 1, 2, 3, 53, 1, 2, 
	3, 54, 1, 2, 3, 55, 1, 2, 
	3, 56, 1, 2, 3, 57, 1, 2, 
	3, 58, 1, 2, 3, 59, 1, 2, 
	3, 60, 1, 2, 3, 61, 1, 2, 
	3, 62, 1, 2, 3, 63, 1, 2, 
	3, 64, 1, 2, 3, 65, 1, 2, 
	3, 66, 1, 2, 3, 67, 1, 2, 
	3, 68, 1, 2, 3, 69, 1, 2, 
	3, 70, 1, 2, 3, 71, 1, 2, 
	3, 72, 1, 2, 3, 73, 1, 2, 
	3, 74, 1, 2, 3, 75, 1, 2, 
	3, 76, 1, 2, 3, 77, 1, 2, 
	3, 78, 1, 2, 3, 79, 1, 2, 
	3, 80, 1, 2, 3, 81, 1, 2, 
	3, 82, 1, 2, 3, 83, 1, 2, 
	3, 84, 1, 2, 3, 85, 1, 2, 
	3, 86, 1, 2, 3, 87, 1, 2, 
	3, 88, 1, 2, 3, 89, 1, 2, 
	3, 90, 1, 2, 3, 91, 1, 2, 
	3, 92, 1, 2, 3, 93, 1, 2, 
	3, 94, 1, 2, 4, 0, 3, 4, 
	95, 4, 0, 42, 1, 2
};

static const short _lexer_key_offsets[] = {
	0, 0, 4, 5, 8, 11, 14, 18, 
	20, 22, 23, 24, 25, 29, 31, 37, 
	43, 45, 48, 51, 54, 58, 60, 70, 
	76, 82, 88, 94, 100, 106, 112, 118, 
	120, 122, 159, 196, 233, 270, 308, 345, 
	382, 419, 456, 493, 530, 567, 604, 641, 
	678, 715, 752, 789, 826, 863, 900, 937, 
	977, 1015, 1052, 1090, 1127, 1164, 1201, 1238, 
	1275, 1312, 1349, 1386, 1423, 1459, 1496, 1533, 
	1570, 1607, 1644, 1681, 1718, 1755, 1793, 1830, 
	1867, 1904, 1941, 1978, 2015, 2052, 2089, 2126, 
	2162, 2199, 2241, 2283, 2320, 2357, 2394, 2431, 
	2468, 2505, 2542, 2579
};

static const unsigned char _lexer_trans_keys[] = {
	10u, 13u, 34u, 92u, 46u, 10u, 13u, 42u, 
	10u, 13u, 42u, 10u, 13u, 42u, 10u, 13u, 
	42u, 47u, 10u, 13u, 48u, 57u, 104u, 105u, 
	115u, 43u, 45u, 48u, 57u, 48u, 57u, 48u, 
	57u, 65u, 70u, 97u, 102u, 48u, 57u, 65u, 
	70u, 97u, 102u, 42u, 47u, 10u, 13u, 42u, 
	10u, 13u, 42u, 10u, 13u, 42u, 10u, 13u, 
	42u, 47u, 10u, 13u, 34u, 47u, 92u, 98u, 
	102u, 110u, 114u, 116u, 117u, 120u, 48u, 57u, 
	65u, 70u, 97u, 102u, 48u, 57u, 65u, 70u, 
	97u, 102u, 48u, 57u, 65u, 70u, 97u, 102u, 
	48u, 57u, 65u, 70u, 97u, 102u, 48u, 57u, 
	65u, 70u, 97u, 102u, 48u, 57u, 65u, 70u, 
	97u, 102u, 48u, 57u, 65u, 70u, 97u, 102u, 
	48u, 57u, 65u, 70u, 97u, 102u, 110u, 115u, 
	42u, 47u, 9u, 10u, 13u, 32u, 33u, 34u, 
	37u, 38u, 40u, 41u, 42u, 43u, 44u, 45u, 
	46u, 47u, 48u, 58u, 59u, 60u, 61u, 62u, 
	63u, 91u, 93u, 94u, 95u, 123u, 124u, 125u, 
	126u, 49u, 57u, 65u, 90u, 97u, 122u, 9u, 
	10u, 13u, 32u, 33u, 34u, 37u, 38u, 40u, 
	41u, 42u, 43u, 44u, 45u, 46u, 47u, 48u, 
	58u, 59u, 60u, 61u, 62u, 63u, 91u, 93u, 
	94u, 95u, 123u, 124u, 125u, 126u, 49u, 57u, 
	65u, 90u, 97u, 122u, 9u, 10u, 13u, 32u, 
	33u, 34u, 37u, 38u, 40u, 41u, 42u, 43u, 
	44u, 45u, 46u, 47u, 48u, 58u, 59u, 60u, 
	61u, 62u, 63u, 91u, 93u, 94u, 95u, 123u, 
	124u, 125u, 126u, 49u, 57u, 65u, 90u, 97u, 
	122u, 9u, 10u, 13u, 32u, 33u, 34u, 37u, 
	38u, 40u, 41u, 42u, 43u, 44u, 45u, 46u, 
	47u, 48u, 58u, 59u, 60u, 61u, 62u, 63u, 
	91u, 93u, 94u, 95u, 123u, 124u, 125u, 126u, 
	49u, 57u, 65u, 90u, 97u, 122u, 9u, 10u, 
	13u, 32u, 33u, 34u, 37u, 38u, 40u, 41u, 
	42u, 43u, 44u, 45u, 46u, 47u, 48u, 58u, 
	59u, 60u, 61u, 62u, 63u, 91u, 93u, 94u, 
	95u, 105u, 123u, 124u, 125u, 126u, 49u, 57u, 
	65u, 90u, 97u, 122u, 9u, 10u, 13u, 32u, 
	33u, 34u, 37u, 38u, 40u, 41u, 42u, 43u, 
	44u, 45u, 46u, 47u, 48u, 58u, 59u, 60u, 
	61u, 62u, 63u, 91u, 93u, 94u, 95u, 123u, 
	124u, 125u, 126u, 49u, 57u, 65u, 90u, 97u, 
	122u, 9u, 10u, 13u, 32u, 33u, 34u, 37u, 
	38u, 40u, 41u, 42u, 43u, 44u, 45u, 46u, 
	47u, 48u, 58u, 59u, 60u, 61u, 62u, 63u, 
	91u, 93u, 94u, 95u, 123u, 124u, 125u, 126u, 
	49u, 57u, 65u, 90u, 97u, 122u, 9u, 10u, 
	13u, 32u, 33u, 34u, 37u, 38u, 40u, 41u, 
	42u, 43u, 44u, 45u, 46u, 47u, 48u, 58u, 
	59u, 60u, 61u, 62u, 63u, 91u, 93u, 94u, 
	95u, 123u, 124u, 125u, 126u, 49u, 57u, 65u, 
	90u, 97u, 122u, 9u, 10u, 13u, 32u, 33u, 
	34u, 37u, 38u, 40u, 41u, 42u, 43u, 44u, 
	45u, 46u, 47u, 48u, 58u, 59u, 60u, 61u, 
	62u, 63u, 91u, 93u, 94u, 95u, 123u, 124u, 
	125u, 126u, 49u, 57u, 65u, 90u, 97u, 122u, 
	9u, 10u, 13u, 32u, 33u, 34u, 37u, 38u, 
	40u, 41u, 42u, 43u, 44u, 45u, 46u, 47u, 
	48u, 58u, 59u, 60u, 61u, 62u, 63u, 91u, 
	93u, 94u, 95u, 123u, 124u, 125u, 126u, 49u, 
	57u, 65u, 90u, 97u, 122u, 9u, 10u, 13u, 
	32u, 33u, 34u, 37u, 38u, 40u, 41u, 42u, 
	43u, 44u, 45u, 46u, 47u, 48u, 58u, 59u, 
	60u, 61u, 62u, 63u, 91u, 93u, 94u, 95u, 
	123u, 124u, 125u, 126u, 49u, 57u, 65u, 90u, 
	97u, 122u, 9u, 10u, 13u, 32u, 33u, 34u, 
	37u, 38u, 40u, 41u, 42u, 43u, 44u, 45u, 
	46u, 47u, 48u, 58u, 59u, 60u, 61u, 62u, 
	63u, 91u, 93u, 94u, 95u, 123u, 124u, 125u, 
	126u, 49u, 57u, 65u, 90u, 97u, 122u, 9u, 
	10u, 13u, 32u, 33u, 34u, 37u, 38u, 40u, 
	41u, 42u, 43u, 44u, 45u, 46u, 47u, 48u, 
	58u, 59u, 60u, 61u, 62u, 63u, 91u, 93u, 
	94u, 95u, 123u, 124u, 125u, 126u, 49u, 57u, 
	65u, 90u, 97u, 122u, 9u, 10u, 13u, 32u, 
	33u, 34u, 37u, 38u, 40u, 41u, 42u, 43u, 
	44u, 45u, 46u, 47u, 48u, 58u, 59u, 60u, 
	61u, 62u, 63u, 91u, 93u, 94u, 95u, 123u, 
	124u, 125u, 126u, 49u, 57u, 65u, 90u, 97u, 
	122u, 9u, 10u, 13u, 32u, 33u, 34u, 37u, 
	38u, 40u, 41u, 42u, 43u, 44u, 45u, 46u, 
	47u, 48u, 58u, 59u, 60u, 61u, 62u, 63u, 
	91u, 93u, 94u, 95u, 123u, 124u, 125u, 126u, 
	49u, 57u, 65u, 90u, 97u, 122u, 9u, 10u, 
	13u, 32u, 33u, 34u, 37u, 38u, 40u, 41u, 
	42u, 43u, 44u, 45u, 46u, 47u, 48u, 58u, 
	59u, 60u, 61u, 62u, 63u, 91u, 93u, 94u, 
	95u, 123u, 124u, 125u, 126u, 49u, 57u, 65u, 
	90u, 97u, 122u, 9u, 10u, 13u, 32u, 33u, 
	34u, 37u, 38u, 40u, 41u, 42u, 43u, 44u, 
	45u, 46u, 47u, 48u, 58u, 59u, 60u, 61u, 
	62u, 63u, 91u, 93u, 94u, 95u, 123u, 124u, 
	125u, 126u, 49u, 57u, 65u, 90u, 97u, 122u, 
	9u, 10u, 13u, 32u, 33u, 34u, 37u, 38u, 
	40u, 41u, 42u, 43u, 44u, 45u, 46u, 47u, 
	48u, 58u, 59u, 60u, 61u, 62u, 63u, 91u, 
	93u, 94u, 95u, 123u, 124u, 125u, 126u, 49u, 
	57u, 65u, 90u, 97u, 122u, 9u, 10u, 13u, 
	32u, 33u, 34u, 37u, 38u, 40u, 41u, 42u, 
	43u, 44u, 45u, 46u, 47u, 48u, 58u, 59u, 
	60u, 61u, 62u, 63u, 91u, 93u, 94u, 95u, 
	123u, 124u, 125u, 126u, 49u, 57u, 65u, 90u, 
	97u, 122u, 9u, 10u, 13u, 32u, 33u, 34u, 
	37u, 38u, 40u, 41u, 42u, 43u, 44u, 45u, 
	46u, 47u, 48u, 58u, 59u, 60u, 61u, 62u, 
	63u, 91u, 93u, 94u, 95u, 123u, 124u, 125u, 
	126u, 49u, 57u, 65u, 90u, 97u, 122u, 9u, 
	10u, 13u, 32u, 33u, 34u, 37u, 38u, 40u, 
	41u, 42u, 43u, 44u, 45u, 46u, 47u, 48u, 
	58u, 59u, 60u, 61u, 62u, 63u, 91u, 93u, 
	94u, 95u, 123u, 124u, 125u, 126u, 49u, 57u, 
	65u, 90u, 97u, 122u, 9u, 10u, 13u, 32u, 
	33u, 34u, 37u, 38u, 40u, 41u, 42u, 43u, 
	44u, 45u, 46u, 47u, 48u, 58u, 59u, 60u, 
	61u, 62u, 63u, 91u, 93u, 94u, 95u, 123u, 
	124u, 125u, 126u, 49u, 57u, 65u, 90u, 97u, 
	122u, 9u, 10u, 13u, 32u, 33u, 34u, 37u, 
	38u, 40u, 41u, 42u, 43u, 44u, 45u, 46u, 
	47u, 48u, 58u, 59u, 60u, 61u, 62u, 63u, 
	69u, 91u, 93u, 94u, 95u, 101u, 120u, 123u, 
	124u, 125u, 126u, 49u, 57u, 65u, 90u, 97u, 
	122u, 9u, 10u, 13u, 32u, 33u, 34u, 37u, 
	38u, 40u, 41u, 42u, 43u, 44u, 45u, 46u, 
	47u, 58u, 59u, 60u, 61u, 62u, 63u, 69u, 
	91u, 93u, 94u, 95u, 101u, 123u, 124u, 125u, 
	126u, 48u, 57u, 65u, 90u, 97u, 122u, 9u, 
	10u, 13u, 32u, 33u, 34u, 37u, 38u, 40u, 
	41u, 42u, 43u, 44u, 45u, 46u, 47u, 48u, 
	58u, 59u, 60u, 61u, 62u, 63u, 91u, 93u, 
	94u, 95u, 123u, 124u, 125u, 126u, 49u, 57u, 
	65u, 90u, 97u, 122u, 9u, 10u, 13u, 32u, 
	33u, 34u, 37u, 38u, 40u, 41u, 42u, 43u, 
	44u, 45u, 46u, 47u, 58u, 59u, 60u, 61u, 
	62u, 63u, 69u, 91u, 93u, 94u, 95u, 101u, 
	123u, 124u, 125u, 126u, 48u, 57u, 65u, 90u, 
	97u, 122u, 9u, 10u, 13u, 32u, 33u, 34u, 
	37u, 38u, 40u, 41u, 42u, 43u, 44u, 45u, 
	46u, 47u, 48u, 58u, 59u, 60u, 61u, 62u, 
	63u, 91u, 93u, 94u, 95u, 123u, 124u, 125u, 
	126u, 49u, 57u, 65u, 90u, 97u, 122u, 9u, 
	10u, 13u, 32u, 33u, 34u, 37u, 38u, 40u, 
	41u, 42u, 43u, 44u, 45u, 46u, 47u, 48u, 
	58u, 59u, 60u, 61u, 62u, 63u, 91u, 93u, 
	94u, 95u, 123u, 124u, 125u, 126u, 49u, 57u, 
	65u, 90u, 97u, 122u, 9u, 10u, 13u, 32u, 
	33u, 34u, 37u, 38u, 40u, 41u, 42u, 43u, 
	44u, 45u, 46u, 47u, 48u, 58u, 59u, 60u, 
	61u, 62u, 63u, 91u, 93u, 94u, 95u, 123u, 
	124u, 125u, 126u, 49u, 57u, 65u, 90u, 97u, 
	122u, 9u, 10u, 13u, 32u, 33u, 34u, 37u, 
	38u, 40u, 41u, 42u, 43u, 44u, 45u, 46u, 
	47u, 48u, 58u, 59u, 60u, 61u, 62u, 63u, 
	91u, 93u, 94u, 95u, 123u, 124u, 125u, 126u, 
	49u, 57u, 65u, 90u, 97u, 122u, 9u, 10u, 
	13u, 32u, 33u, 34u, 37u, 38u, 40u, 41u, 
	42u, 43u, 44u, 45u, 46u, 47u, 48u, 58u, 
	59u, 60u, 61u, 62u, 63u, 91u, 93u, 94u, 
	95u, 123u, 124u, 125u, 126u, 49u, 57u, 65u, 
	90u, 97u, 122u, 9u, 10u, 13u, 32u, 33u, 
	34u, 37u, 38u, 40u, 41u, 42u, 43u, 44u, 
	45u, 46u, 47u, 48u, 58u, 59u, 60u, 61u, 
	62u, 63u, 91u, 93u, 94u, 95u, 123u, 124u, 
	125u, 126u, 49u, 57u, 65u, 90u, 97u, 122u, 
	9u, 10u, 13u, 32u, 33u, 34u, 37u, 38u, 
	40u, 41u, 42u, 43u, 44u, 45u, 46u, 47u, 
	48u, 58u, 59u, 60u, 61u, 62u, 63u, 91u, 
	93u, 94u, 95u, 123u, 124u, 125u, 126u, 49u, 
	57u, 65u, 90u, 97u, 122u, 9u, 10u, 13u, 
	32u, 33u, 34u, 37u, 38u, 40u, 41u, 42u, 
	43u, 44u, 45u, 46u, 47u, 48u, 58u, 59u, 
	60u, 61u, 62u, 63u, 91u, 93u, 94u, 95u, 
	123u, 124u, 125u, 126u, 49u, 57u, 65u, 90u, 
	97u, 122u, 9u, 10u, 13u, 32u, 33u, 34u, 
	37u, 38u, 40u, 41u, 42u, 43u, 44u, 45u, 
	46u, 47u, 48u, 58u, 59u, 60u, 61u, 62u, 
	63u, 91u, 93u, 94u, 95u, 123u, 124u, 125u, 
	126u, 49u, 57u, 65u, 90u, 97u, 122u, 9u, 
	10u, 13u, 32u, 33u, 34u, 37u, 38u, 40u, 
	41u, 42u, 43u, 44u, 45u, 46u, 47u, 58u, 
	59u, 60u, 61u, 62u, 63u, 91u, 93u, 94u, 
	95u, 123u, 124u, 125u, 126u, 48u, 57u, 65u, 
	90u, 97u, 122u, 9u, 10u, 13u, 32u, 33u, 
	34u, 37u, 38u, 40u, 41u, 42u, 43u, 44u, 
	45u, 46u, 47u, 48u, 58u, 59u, 60u, 61u, 
	62u, 63u, 91u, 93u, 94u, 95u, 123u, 124u, 
	125u, 126u, 49u, 57u, 65u, 90u, 97u, 122u, 
	9u, 10u, 13u, 32u, 33u, 34u, 37u, 38u, 
	40u, 41u, 42u, 43u, 44u, 45u, 46u, 47u, 
	48u, 58u, 59u, 60u, 61u, 62u, 63u, 91u, 
	93u, 94u, 95u, 123u, 124u, 125u, 126u, 49u, 
	57u, 65u, 90u, 97u, 122u, 9u, 10u, 13u, 
	32u, 33u, 34u, 37u, 38u, 40u, 41u, 42u, 
	43u, 44u, 45u, 46u, 47u, 48u, 58u, 59u, 
	60u, 61u, 62u, 63u, 91u, 93u, 94u, 95u, 
	123u, 124u, 125u, 126u, 49u, 57u, 65u, 90u, 
	97u, 122u, 9u, 10u, 13u, 32u, 33u, 34u, 
	37u, 38u, 40u, 41u, 42u, 43u, 44u, 45u, 
	46u, 47u, 48u, 58u, 59u, 60u, 61u, 62u, 
	63u, 91u, 93u, 94u, 95u, 123u, 124u, 125u, 
	126u, 49u, 57u, 65u, 90u, 97u, 122u, 9u, 
	10u, 13u, 32u, 33u, 34u, 37u, 38u, 40u, 
	41u, 42u, 43u, 44u, 45u, 46u, 47u, 48u, 
	58u, 59u, 60u, 61u, 62u, 63u, 91u, 93u, 
	94u, 95u, 123u, 124u, 125u, 126u, 49u, 57u, 
	65u, 90u, 97u, 122u, 9u, 10u, 13u, 32u, 
	33u, 34u, 37u, 38u, 40u, 41u, 42u, 43u, 
	44u, 45u, 46u, 47u, 48u, 58u, 59u, 60u, 
	61u, 62u, 63u, 91u, 93u, 94u, 95u, 123u, 
	124u, 125u, 126u, 49u, 57u, 65u, 90u, 97u, 
	122u, 9u, 10u, 13u, 32u, 33u, 34u, 37u, 
	38u, 40u, 41u, 42u, 43u, 44u, 45u, 46u, 
	47u, 48u, 58u, 59u, 60u, 61u, 62u, 63u, 
	91u, 93u, 94u, 95u, 123u, 124u, 125u, 126u, 
	49u, 57u, 65u, 90u, 97u, 122u, 9u, 10u, 
	13u, 32u, 33u, 34u, 37u, 38u, 40u, 41u, 
	42u, 43u, 44u, 45u, 46u, 47u, 48u, 58u, 
	59u, 60u, 61u, 62u, 63u, 91u, 93u, 94u, 
	95u, 123u, 124u, 125u, 126u, 49u, 57u, 65u, 
	90u, 97u, 122u, 9u, 10u, 13u, 32u, 33u, 
	34u, 37u, 38u, 40u, 41u, 42u, 43u, 44u, 
	45u, 46u, 47u, 48u, 58u, 59u, 60u, 61u, 
	62u, 63u, 91u, 93u, 94u, 95u, 116u, 123u, 
	124u, 125u, 126u, 49u, 57u, 65u, 90u, 97u, 
	122u, 9u, 10u, 13u, 32u, 33u, 34u, 37u, 
	38u, 40u, 41u, 42u, 43u, 44u, 45u, 46u, 
	47u, 48u, 58u, 59u, 60u, 61u, 62u, 63u, 
	91u, 93u, 94u, 95u, 123u, 124u, 125u, 126u, 
	49u, 57u, 65u, 90u, 97u, 122u, 9u, 10u, 
	13u, 32u, 33u, 34u, 37u, 38u, 40u, 41u, 
	42u, 43u, 44u, 45u, 46u, 47u, 48u, 58u, 
	59u, 60u, 61u, 62u, 63u, 91u, 93u, 94u, 
	95u, 123u, 124u, 125u, 126u, 49u, 57u, 65u, 
	90u, 97u, 122u, 9u, 10u, 13u, 32u, 33u, 
	34u, 37u, 38u, 40u, 41u, 42u, 43u, 44u, 
	45u, 46u, 47u, 48u, 58u, 59u, 60u, 61u, 
	62u, 63u, 91u, 93u, 94u, 95u, 123u, 124u, 
	125u, 126u, 49u, 57u, 65u, 90u, 97u, 122u, 
	9u, 10u, 13u, 32u, 33u, 34u, 37u, 38u, 
	40u, 41u, 42u, 43u, 44u, 45u, 46u, 47u, 
	48u, 58u, 59u, 60u, 61u, 62u, 63u, 91u, 
	93u, 94u, 95u, 123u, 124u, 125u, 126u, 49u, 
	57u, 65u, 90u, 97u, 122u, 9u, 10u, 13u, 
	32u, 33u, 34u, 37u, 38u, 40u, 41u, 42u, 
	43u, 44u, 45u, 46u, 47u, 48u, 58u, 59u, 
	60u, 61u, 62u, 63u, 91u, 93u, 94u, 95u, 
	123u, 124u, 125u, 126u, 49u, 57u, 65u, 90u, 
	97u, 122u, 9u, 10u, 13u, 32u, 33u, 34u, 
	37u, 38u, 40u, 41u, 42u, 43u, 44u, 45u, 
	46u, 47u, 48u, 58u, 59u, 60u, 61u, 62u, 
	63u, 91u, 93u, 94u, 95u, 123u, 124u, 125u, 
	126u, 49u, 57u, 65u, 90u, 97u, 122u, 9u, 
	10u, 13u, 32u, 33u, 34u, 37u, 38u, 40u, 
	41u, 42u, 43u, 44u, 45u, 46u, 47u, 48u, 
	58u, 59u, 60u, 61u, 62u, 63u, 91u, 93u, 
	94u, 95u, 123u, 124u, 125u, 126u, 49u, 57u, 
	65u, 90u, 97u, 122u, 9u, 10u, 13u, 32u, 
	33u, 34u, 37u, 38u, 40u, 41u, 42u, 43u, 
	44u, 45u, 46u, 47u, 48u, 58u, 59u, 60u, 
	61u, 62u, 63u, 91u, 93u, 94u, 95u, 123u, 
	124u, 125u, 126u, 49u, 57u, 65u, 90u, 97u, 
	122u, 9u, 10u, 13u, 32u, 33u, 34u, 37u, 
	38u, 40u, 41u, 42u, 43u, 44u, 45u, 46u, 
	47u, 48u, 58u, 59u, 60u, 61u, 62u, 63u, 
	91u, 93u, 94u, 95u, 123u, 124u, 125u, 126u, 
	49u, 57u, 65u, 90u, 97u, 122u, 9u, 10u, 
	13u, 32u, 33u, 34u, 37u, 38u, 40u, 41u, 
	42u, 43u, 44u, 45u, 46u, 47u, 58u, 59u, 
	60u, 61u, 62u, 63u, 91u, 93u, 94u, 95u, 
	123u, 124u, 125u, 126u, 48u, 57u, 65u, 90u, 
	97u, 122u, 9u, 10u, 13u, 32u, 33u, 34u, 
	37u, 38u, 40u, 41u, 42u, 43u, 44u, 45u, 
	46u, 47u, 48u, 58u, 59u, 60u, 61u, 62u, 
	63u, 91u, 93u, 94u, 95u, 123u, 124u, 125u, 
	126u, 49u, 57u, 65u, 90u, 97u, 122u, 9u, 
	10u, 13u, 32u, 33u, 34u, 37u, 38u, 40u, 
	41u, 42u, 43u, 44u, 45u, 46u, 47u, 58u, 
	59u, 60u, 61u, 62u, 63u, 80u, 91u, 93u, 
	94u, 95u, 112u, 123u, 124u, 125u, 126u, 48u, 
	57u, 65u, 70u, 71u, 90u, 97u, 102u, 103u, 
	122u, 9u, 10u, 13u, 32u, 33u, 34u, 37u, 
	38u, 40u, 41u, 42u, 43u, 44u, 45u, 46u, 
	47u, 58u, 59u, 60u, 61u, 62u, 63u, 80u, 
	91u, 93u, 94u, 95u, 112u, 123u, 124u, 125u, 
	126u, 48u, 57u, 65u, 70u, 71u, 90u, 97u, 
	102u, 103u, 122u, 9u, 10u, 13u, 32u, 33u, 
	34u, 37u, 38u, 40u, 41u, 42u, 43u, 44u, 
	45u, 46u, 47u, 48u, 58u, 59u, 60u, 61u, 
	62u, 63u, 91u, 93u, 94u, 95u, 123u, 124u, 
	125u, 126u, 49u, 57u, 65u, 90u, 97u, 122u, 
	9u, 10u, 13u, 32u, 33u, 34u, 37u, 38u, 
	40u, 41u, 42u, 43u, 44u, 45u, 46u, 47u, 
	48u, 58u, 59u, 60u, 61u, 62u, 63u, 91u, 
	93u, 94u, 95u, 123u, 124u, 125u, 126u, 49u, 
	57u, 65u, 90u, 97u, 122u, 9u, 10u, 13u, 
	32u, 33u, 34u, 37u, 38u, 40u, 41u, 42u, 
	43u, 44u, 45u, 46u, 47u, 48u, 58u, 59u, 
	60u, 61u, 62u, 63u, 91u, 93u, 94u, 95u, 
	123u, 124u, 125u, 126u, 49u, 57u, 65u, 90u, 
	97u, 122u, 9u, 10u, 13u, 32u, 33u, 34u, 
	37u, 38u, 40u, 41u, 42u, 43u, 44u, 45u, 
	46u, 47u, 48u, 58u, 59u, 60u, 61u, 62u, 
	63u, 91u, 93u, 94u, 95u, 123u, 124u, 125u, 
	126u, 49u, 57u, 65u, 90u, 97u, 122u, 9u, 
	10u, 13u, 32u, 33u, 34u, 37u, 38u, 40u, 
	41u, 42u, 43u, 44u, 45u, 46u, 47u, 48u, 
	58u, 59u, 60u, 61u, 62u, 63u, 91u, 93u, 
	94u, 95u, 123u, 124u, 125u, 126u, 49u, 57u, 
	65u, 90u, 97u, 122u, 9u, 10u, 13u, 32u, 
	33u, 34u, 37u, 38u, 40u, 41u, 42u, 43u, 
	44u, 45u, 46u, 47u, 48u, 58u, 59u, 60u, 
	61u, 62u, 63u, 91u, 93u, 94u, 95u, 123u, 
	124u, 125u, 126u, 49u, 57u, 65u, 90u, 97u, 
	122u, 9u, 10u, 13u, 32u, 33u, 34u, 37u, 
	38u, 40u, 41u, 42u, 43u, 44u, 45u, 46u, 
	47u, 48u, 58u, 59u, 60u, 61u, 62u, 63u, 
	91u, 93u, 94u, 95u, 123u, 124u, 125u, 126u, 
	49u, 57u, 65u, 90u, 97u, 122u, 9u, 10u, 
	13u, 32u, 33u, 34u, 37u, 38u, 40u, 41u, 
	42u, 43u, 44u, 45u, 46u, 47u, 48u, 58u, 
	59u, 60u, 61u, 62u, 63u, 91u, 93u, 94u, 
	95u, 123u, 124u, 125u, 126u, 49u, 57u, 65u, 
	90u, 97u, 122u, 9u, 10u, 13u, 32u, 33u, 
	34u, 37u, 38u, 40u, 41u, 42u, 43u, 44u, 
	45u, 46u, 47u, 48u, 58u, 59u, 60u, 61u, 
	62u, 63u, 91u, 93u, 94u, 95u, 123u, 124u, 
	125u, 126u, 49u, 57u, 65u, 90u, 97u, 122u, 
	0
};

static const char _lexer_single_lengths[] = {
	0, 4, 1, 3, 3, 3, 4, 2, 
	0, 1, 1, 1, 2, 0, 0, 0, 
	2, 3, 3, 3, 4, 2, 10, 0, 
	0, 0, 0, 0, 0, 0, 0, 2, 
	2, 31, 31, 31, 31, 32, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 34, 
	32, 31, 32, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 30, 31, 31, 31, 
	31, 31, 31, 31, 31, 32, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 30, 
	31, 32, 32, 31, 31, 31, 31, 31, 
	31, 31, 31, 31
};

static const char _lexer_range_lengths[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 1, 1, 3, 3, 
	0, 0, 0, 0, 0, 0, 0, 3, 
	3, 3, 3, 3, 3, 3, 3, 0, 
	0, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 5, 5, 3, 3, 3, 3, 3, 
	3, 3, 3, 3
};

static const short _lexer_index_offsets[] = {
	0, 0, 5, 7, 11, 15, 19, 24, 
	27, 29, 31, 33, 35, 39, 41, 45, 
	49, 52, 56, 60, 64, 69, 72, 83, 
	87, 91, 95, 99, 103, 107, 111, 115, 
	118, 121, 156, 191, 226, 261, 297, 332, 
	367, 402, 437, 472, 507, 542, 577, 612, 
	647, 682, 717, 752, 787, 822, 857, 892, 
	930, 966, 1001, 1037, 1072, 1107, 1142, 1177, 
	1212, 1247, 1282, 1317, 1352, 1386, 1421, 1456, 
	1491, 1526, 1561, 1596, 1631, 1666, 1702, 1737, 
	1772, 1807, 1842, 1877, 1912, 1947, 1982, 2017, 
	2051, 2086, 2124, 2162, 2197, 2232, 2267, 2302, 
	2337, 2372, 2407, 2442
};

static const char _lexer_trans_targs[] = {
	0, 0, 38, 22, 1, 53, 0, 4, 
	5, 6, 3, 4, 5, 6, 3, 4, 
	5, 6, 3, 4, 5, 6, 34, 3, 
	35, 36, 7, 56, 0, 10, 0, 11, 
	0, 79, 0, 13, 13, 87, 0, 87, 
	0, 89, 89, 89, 0, 90, 90, 90, 
	0, 17, 21, 0, 18, 19, 20, 17, 
	18, 19, 20, 17, 18, 19, 20, 17, 
	18, 19, 20, 38, 17, 39, 40, 21, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	23, 29, 0, 24, 24, 24, 0, 25, 
	25, 25, 0, 26, 26, 26, 0, 27, 
	27, 27, 0, 28, 28, 28, 0, 1, 
	1, 1, 0, 30, 30, 30, 0, 1, 
	1, 1, 0, 98, 99, 0, 3, 7, 
	0, 34, 35, 36, 34, 37, 1, 41, 
	42, 44, 45, 46, 47, 49, 50, 52, 
	54, 55, 57, 59, 60, 63, 65, 67, 
	69, 70, 71, 68, 73, 74, 76, 77, 
	58, 68, 68, 0, 34, 35, 36, 34, 
	37, 1, 41, 42, 44, 45, 46, 47, 
	49, 50, 52, 32, 55, 57, 59, 60, 
	63, 65, 67, 69, 70, 71, 68, 73, 
	74, 76, 77, 58, 68, 68, 0, 34, 
	35, 36, 34, 37, 1, 41, 42, 44, 
	45, 46, 47, 49, 50, 52, 32, 55, 
	57, 59, 60, 63, 65, 67, 69, 70, 
	71, 68, 73, 74, 76, 77, 58, 68, 
	68, 0, 34, 35, 36, 34, 37, 1, 
	41, 42, 44, 45, 46, 47, 49, 50, 
	52, 32, 55, 57, 59, 60, 63, 65, 
	67, 69, 70, 71, 68, 73, 74, 76, 
	77, 58, 68, 68, 0, 34, 35, 36, 
	34, 37, 1, 41, 42, 44, 45, 46, 
	47, 49, 50, 52, 54, 55, 57, 59, 
	60, 97, 65, 67, 69, 70, 71, 68, 
	31, 73, 74, 76, 77, 58, 68, 68, 
	0, 38, 39, 40, 38, 37, 1, 41, 
	42, 44, 45, 46, 47, 49, 50, 52, 
	16, 55, 57, 59, 60, 63, 65, 67, 
	69, 70, 71, 68, 73, 74, 76, 77, 
	58, 68, 68, 0, 38, 39, 40, 38, 
	37, 1, 41, 42, 44, 45, 46, 47, 
	49, 50, 52, 16, 55, 57, 59, 60, 
	63, 65, 67, 69, 70, 71, 68, 73, 
	74, 76, 77, 58, 68, 68, 0, 38, 
	39, 40, 38, 37, 1, 41, 42, 44, 
	45, 46, 47, 49, 50, 52, 16, 55, 
	57, 59, 60, 63, 65, 67, 69, 70, 
	71, 68, 73, 74, 76, 77, 58, 68, 
	68, 0, 34, 35, 36, 34, 37, 1, 
	41, 42, 44, 45, 46, 47, 49, 50, 
	52, 54, 55, 57, 59, 60, 96, 65, 
	67, 69, 70, 71, 68, 73, 74, 76, 
	77, 58, 68, 68, 0, 34, 35, 36, 
	34, 37, 1, 41, 43, 44, 45, 46, 
	47, 49, 50, 52, 54, 55, 57, 59, 
	60, 95, 65, 67, 69, 70, 71, 68, 
	73, 74, 76, 77, 58, 68, 68, 0, 
	34, 35, 36, 34, 37, 1, 41, 42, 
	44, 45, 46, 47, 49, 50, 52, 54, 
	55, 57, 59, 60, 63, 65, 67, 69, 
	70, 71, 68, 73, 74, 76, 77, 58, 
	68, 68, 0, 34, 35, 36, 34, 37, 
	1, 41, 42, 44, 45, 46, 47, 49, 
	50, 52, 54, 55, 57, 59, 60, 63, 
	65, 67, 69, 70, 71, 68, 73, 74, 
	76, 77, 58, 68, 68, 0, 34, 35, 
	36, 34, 37, 1, 41, 42, 44, 45, 
	46, 47, 49, 50, 52, 54, 55, 57, 
	59, 60, 63, 65, 67, 69, 70, 71, 
	68, 73, 74, 76, 77, 58, 68, 68, 
	0, 34, 35, 36, 34, 37, 1, 41, 
	42, 44, 45, 46, 47, 49, 50, 52, 
	54, 55, 57, 59, 60, 94, 65, 67, 
	69, 70, 71, 68, 73, 74, 76, 77, 
	58, 68, 68, 0, 34, 35, 36, 34, 
	37, 1, 41, 42, 44, 45, 46, 48, 
	49, 50, 52, 54, 55, 57, 59, 60, 
	93, 65, 67, 69, 70, 71, 68, 73, 
	74, 76, 77, 58, 68, 68, 0, 34, 
	35, 36, 34, 37, 1, 41, 42, 44, 
	45, 46, 47, 49, 50, 52, 54, 55, 
	57, 59, 60, 63, 65, 67, 69, 70, 
	71, 68, 73, 74, 76, 77, 58, 68, 
	68, 0, 34, 35, 36, 34, 37, 1, 
	41, 42, 44, 45, 46, 47, 49, 50, 
	52, 54, 55, 57, 59, 60, 63, 65, 
	67, 69, 70, 71, 68, 73, 74, 76, 
	77, 58, 68, 68, 0, 34, 35, 36, 
	34, 37, 1, 41, 42, 44, 45, 46, 
	47, 49, 51, 52, 54, 55, 57, 59, 
	60, 92, 65, 67, 69, 70, 71, 68, 
	73, 74, 76, 77, 58, 68, 68, 0, 
	34, 35, 36, 34, 37, 1, 41, 42, 
	44, 45, 46, 47, 49, 50, 52, 54, 
	55, 57, 59, 60, 63, 65, 67, 69, 
	70, 71, 68, 73, 74, 76, 77, 58, 
	68, 68, 0, 34, 35, 36, 34, 37, 
	1, 41, 42, 44, 45, 46, 47, 49, 
	50, 2, 54, 55, 57, 59, 60, 63, 
	65, 67, 69, 70, 71, 68, 73, 74, 
	76, 77, 58, 68, 68, 0, 34, 35, 
	36, 34, 37, 1, 41, 42, 44, 45, 
	46, 47, 49, 50, 52, 54, 55, 57, 
	59, 60, 63, 65, 67, 69, 70, 71, 
	68, 73, 74, 76, 77, 58, 68, 68, 
	0, 34, 35, 36, 34, 37, 1, 41, 
	42, 44, 45, 3, 47, 49, 50, 52, 
	7, 55, 57, 59, 60, 91, 65, 67, 
	69, 70, 71, 68, 73, 74, 76, 77, 
	58, 68, 68, 0, 34, 35, 36, 34, 
	37, 1, 41, 42, 44, 45, 46, 47, 
	49, 50, 8, 54, 55, 57, 59, 60, 
	63, 65, 67, 12, 69, 70, 71, 68, 
	12, 14, 73, 74, 76, 77, 58, 68, 
	68, 0, 34, 35, 36, 34, 37, 1, 
	41, 42, 44, 45, 46, 47, 49, 50, 
	52, 54, 57, 59, 60, 63, 65, 67, 
	12, 69, 70, 71, 68, 12, 73, 74, 
	76, 77, 56, 68, 68, 0, 34, 35, 
	36, 34, 37, 1, 41, 42, 44, 45, 
	46, 47, 49, 50, 52, 54, 55, 88, 
	59, 60, 63, 65, 67, 69, 70, 71, 
	68, 73, 74, 76, 77, 58, 68, 68, 
	0, 34, 35, 36, 34, 37, 1, 41, 
	42, 44, 45, 46, 47, 49, 50, 8, 
	54, 57, 59, 60, 63, 65, 67, 12, 
	69, 70, 71, 68, 12, 73, 74, 76, 
	77, 58, 68, 68, 0, 34, 35, 36, 
	34, 37, 1, 41, 42, 44, 45, 46, 
	47, 49, 50, 52, 54, 55, 57, 59, 
	60, 63, 65, 67, 69, 70, 71, 68, 
	73, 74, 76, 77, 58, 68, 68, 0, 
	34, 35, 36, 34, 37, 1, 41, 42, 
	44, 45, 46, 47, 49, 50, 52, 54, 
	55, 57, 59, 61, 86, 65, 67, 69, 
	70, 71, 68, 73, 74, 76, 77, 58, 
	68, 68, 0, 34, 35, 36, 34, 37, 
	1, 41, 42, 44, 45, 46, 47, 49, 
	50, 52, 54, 55, 57, 59, 60, 62, 
	65, 67, 69, 70, 71, 68, 73, 74, 
	76, 77, 58, 68, 68, 0, 34, 35, 
	36, 34, 37, 1, 41, 42, 44, 45, 
	46, 47, 49, 50, 52, 54, 55, 57, 
	59, 60, 63, 65, 67, 69, 70, 71, 
	68, 73, 74, 76, 77, 58, 68, 68, 
	0, 34, 35, 36, 34, 37, 1, 41, 
	42, 44, 45, 46, 47, 49, 50, 52, 
	54, 55, 57, 59, 60, 64, 65, 67, 
	69, 70, 71, 68, 73, 74, 76, 77, 
	58, 68, 68, 0, 34, 35, 36, 34, 
	37, 1, 41, 42, 44, 45, 46, 47, 
	49, 50, 52, 54, 55, 57, 59, 60, 
	63, 65, 67, 69, 70, 71, 68, 73, 
	74, 76, 77, 58, 68, 68, 0, 34, 
	35, 36, 34, 37, 1, 41, 42, 44, 
	45, 46, 47, 49, 50, 52, 54, 55, 
	57, 59, 60, 66, 82, 67, 69, 70, 
	71, 68, 73, 74, 76, 77, 58, 68, 
	68, 0, 34, 35, 36, 34, 37, 1, 
	41, 42, 44, 45, 46, 47, 49, 50, 
	52, 54, 55, 57, 59, 60, 63, 65, 
	67, 69, 70, 71, 68, 73, 74, 76, 
	77, 58, 68, 68, 0, 34, 35, 36, 
	34, 37, 1, 41, 42, 44, 45, 46, 
	47, 49, 50, 52, 54, 55, 57, 59, 
	60, 63, 65, 67, 69, 70, 71, 68, 
	73, 74, 76, 77, 58, 68, 68, 0, 
	34, 35, 36, 34, 37, 1, 41, 42, 
	44, 45, 46, 47, 49, 50, 52, 54, 
	57, 59, 60, 63, 65, 67, 69, 70, 
	71, 68, 73, 74, 76, 77, 68, 68, 
	68, 0, 34, 35, 36, 34, 37, 1, 
	41, 42, 44, 45, 46, 47, 49, 50, 
	52, 54, 55, 57, 59, 60, 63, 65, 
	67, 69, 70, 71, 68, 73, 74, 76, 
	77, 58, 68, 68, 0, 34, 35, 36, 
	34, 37, 1, 41, 42, 44, 45, 46, 
	47, 49, 50, 52, 54, 55, 57, 59, 
	60, 63, 65, 67, 69, 70, 71, 68, 
	73, 74, 76, 77, 58, 68, 68, 0, 
	34, 35, 36, 34, 37, 1, 41, 42, 
	44, 45, 46, 47, 49, 50, 52, 54, 
	55, 57, 59, 60, 72, 65, 67, 69, 
	70, 81, 68, 73, 74, 76, 77, 58, 
	68, 68, 0, 34, 35, 36, 34, 37, 
	1, 41, 42, 44, 45, 46, 47, 49, 
	50, 52, 54, 55, 57, 59, 60, 63, 
	65, 67, 69, 70, 71, 68, 73, 74, 
	76, 77, 58, 68, 68, 0, 34, 35, 
	36, 34, 37, 1, 41, 42, 44, 45, 
	46, 47, 49, 50, 52, 54, 55, 57, 
	59, 60, 63, 65, 67, 69, 70, 71, 
	68, 73, 74, 76, 77, 58, 68, 68, 
	0, 34, 35, 36, 34, 37, 1, 41, 
	42, 44, 45, 46, 47, 49, 50, 52, 
	54, 55, 57, 59, 60, 75, 65, 67, 
	69, 70, 71, 68, 73, 80, 76, 77, 
	58, 68, 68, 0, 34, 35, 36, 34, 
	37, 1, 41, 42, 44, 45, 46, 47, 
	49, 50, 52, 54, 55, 57, 59, 60, 
	63, 65, 67, 69, 70, 71, 68, 73, 
	74, 76, 77, 58, 68, 68, 0, 34, 
	35, 36, 34, 37, 1, 41, 42, 44, 
	45, 46, 47, 49, 50, 52, 54, 55, 
	57, 59, 60, 63, 65, 67, 69, 70, 
	71, 68, 73, 74, 76, 77, 58, 68, 
	68, 0, 34, 35, 36, 34, 37, 1, 
	41, 42, 44, 45, 46, 47, 49, 50, 
	52, 54, 55, 57, 59, 60, 78, 65, 
	67, 69, 70, 71, 68, 9, 73, 74, 
	76, 77, 58, 68, 68, 0, 34, 35, 
	36, 34, 37, 1, 41, 42, 44, 45, 
	46, 47, 49, 50, 52, 54, 55, 57, 
	59, 60, 63, 65, 67, 69, 70, 71, 
	68, 73, 74, 76, 77, 58, 68, 68, 
	0, 34, 35, 36, 34, 37, 1, 41, 
	42, 44, 45, 46, 47, 49, 50, 52, 
	54, 55, 57, 59, 60, 63, 65, 67, 
	69, 70, 71, 68, 73, 74, 76, 77, 
	58, 68, 68, 0, 34, 35, 36, 34, 
	37, 1, 41, 42, 44, 45, 46, 47, 
	49, 50, 52, 54, 55, 57, 59, 60, 
	63, 65, 67, 69, 70, 71, 68, 73, 
	74, 76, 77, 58, 68, 68, 0, 34, 
	35, 36, 34, 37, 1, 41, 42, 44, 
	45, 46, 47, 49, 50, 52, 54, 55, 
	57, 59, 60, 63, 65, 67, 69, 70, 
	71, 68, 73, 74, 76, 77, 58, 68, 
	68, 0, 34, 35, 36, 34, 37, 1, 
	41, 42, 44, 45, 46, 47, 49, 50, 
	52, 54, 55, 57, 59, 60, 83, 84, 
	67, 69, 70, 71, 68, 73, 74, 76, 
	77, 58, 68, 68, 0, 34, 35, 36, 
	34, 37, 1, 41, 42, 44, 45, 46, 
	47, 49, 50, 52, 54, 55, 57, 59, 
	60, 63, 65, 67, 69, 70, 71, 68, 
	73, 74, 76, 77, 58, 68, 68, 0, 
	34, 35, 36, 34, 37, 1, 41, 42, 
	44, 45, 46, 47, 49, 50, 52, 54, 
	55, 57, 59, 60, 85, 65, 67, 69, 
	70, 71, 68, 73, 74, 76, 77, 58, 
	68, 68, 0, 34, 35, 36, 34, 37, 
	1, 41, 42, 44, 45, 46, 47, 49, 
	50, 52, 54, 55, 57, 59, 60, 63, 
	65, 67, 69, 70, 71, 68, 73, 74, 
	76, 77, 58, 68, 68, 0, 34, 35, 
	36, 34, 37, 1, 41, 42, 44, 45, 
	46, 47, 49, 50, 52, 54, 55, 57, 
	59, 60, 63, 65, 67, 69, 70, 71, 
	68, 73, 74, 76, 77, 58, 68, 68, 
	0, 34, 35, 36, 34, 37, 1, 41, 
	42, 44, 45, 46, 47, 49, 50, 52, 
	54, 57, 59, 60, 63, 65, 67, 69, 
	70, 71, 68, 73, 74, 76, 77, 87, 
	68, 68, 0, 34, 35, 36, 34, 37, 
	1, 41, 42, 44, 45, 46, 47, 49, 
	50, 52, 54, 55, 57, 59, 60, 63, 
	65, 67, 69, 70, 71, 68, 73, 74, 
	76, 77, 58, 68, 68, 0, 34, 35, 
	36, 34, 37, 1, 41, 42, 44, 45, 
	46, 47, 49, 50, 15, 54, 57, 59, 
	60, 63, 65, 67, 12, 69, 70, 71, 
	68, 12, 73, 74, 76, 77, 89, 89, 
	68, 89, 68, 0, 34, 35, 36, 34, 
	37, 1, 41, 42, 44, 45, 46, 47, 
	49, 50, 52, 54, 57, 59, 60, 63, 
	65, 67, 12, 69, 70, 71, 68, 12, 
	73, 74, 76, 77, 90, 90, 68, 90, 
	68, 0, 34, 35, 36, 34, 37, 1, 
	41, 42, 44, 45, 46, 47, 49, 50, 
	52, 54, 55, 57, 59, 60, 63, 65, 
	67, 69, 70, 71, 68, 73, 74, 76, 
	77, 58, 68, 68, 0, 34, 35, 36, 
	34, 37, 1, 41, 42, 44, 45, 46, 
	47, 49, 50, 52, 54, 55, 57, 59, 
	60, 63, 65, 67, 69, 70, 71, 68, 
	73, 74, 76, 77, 58, 68, 68, 0, 
	34, 35, 36, 34, 37, 1, 41, 42, 
	44, 45, 46, 47, 49, 50, 52, 54, 
	55, 57, 59, 60, 63, 65, 67, 69, 
	70, 71, 68, 73, 74, 76, 77, 58, 
	68, 68, 0, 34, 35, 36, 34, 37, 
	1, 41, 42, 44, 45, 46, 47, 49, 
	50, 52, 54, 55, 57, 59, 60, 63, 
	65, 67, 69, 70, 71, 68, 73, 74, 
	76, 77, 58, 68, 68, 0, 34, 35, 
	36, 34, 37, 1, 41, 42, 44, 45, 
	46, 47, 49, 50, 52, 54, 55, 57, 
	59, 60, 63, 65, 67, 69, 70, 71, 
	68, 73, 74, 76, 77, 58, 68, 68, 
	0, 34, 35, 36, 34, 37, 1, 41, 
	42, 44, 45, 46, 47, 49, 50, 52, 
	54, 55, 57, 59, 60, 63, 65, 67, 
	69, 70, 71, 68, 73, 74, 76, 77, 
	58, 68, 68, 0, 34, 35, 36, 34, 
	37, 1, 41, 42, 44, 45, 46, 47, 
	49, 50, 52, 54, 55, 57, 59, 60, 
	63, 65, 67, 69, 70, 71, 68, 73, 
	74, 76, 77, 58, 68, 68, 0, 34, 
	35, 36, 34, 37, 1, 41, 42, 44, 
	45, 46, 47, 49, 50, 52, 54, 55, 
	57, 59, 60, 63, 65, 67, 69, 70, 
	71, 68, 73, 74, 76, 77, 58, 68, 
	68, 0, 34, 35, 36, 34, 37, 1, 
	41, 42, 44, 45, 46, 47, 49, 50, 
	52, 54, 55, 57, 59, 60, 63, 65, 
	67, 69, 70, 71, 68, 73, 74, 76, 
	77, 58, 68, 68, 0, 0
};

static const short _lexer_trans_actions[] = {
	188, 188, 0, 35, 5, 0, 188, 0, 
	0, 0, 0, 1, 1, 1, 1, 0, 
	1, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 5, 188, 0, 188, 0, 
	188, 0, 188, 5, 5, 5, 188, 5, 
	188, 5, 5, 5, 188, 5, 5, 5, 
	188, 0, 0, 188, 0, 0, 0, 0, 
	1, 1, 1, 1, 0, 1, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	7, 11, 9, 13, 15, 17, 19, 21, 
	0, 0, 188, 37, 41, 39, 188, 43, 
	47, 45, 188, 49, 53, 51, 188, 55, 
	59, 57, 188, 61, 65, 63, 188, 191, 
	197, 194, 188, 23, 27, 25, 188, 29, 
	33, 31, 188, 0, 0, 188, 0, 0, 
	188, 0, 0, 0, 0, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 185, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 185, 3, 3, 3, 3, 
	185, 185, 185, 188, 0, 0, 0, 0, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 0, 185, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 185, 3, 
	3, 3, 3, 185, 185, 185, 188, 1, 
	1, 1, 1, 179, 179, 179, 179, 179, 
	179, 179, 179, 179, 179, 179, 1, 368, 
	179, 179, 179, 179, 179, 179, 179, 179, 
	179, 368, 179, 179, 179, 179, 368, 368, 
	368, 372, 1, 0, 1, 1, 179, 179, 
	179, 179, 179, 179, 179, 179, 179, 179, 
	179, 1, 368, 179, 179, 179, 179, 179, 
	179, 179, 179, 179, 368, 179, 179, 179, 
	179, 368, 368, 368, 372, 75, 75, 75, 
	75, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 396, 212, 212, 
	212, 0, 212, 212, 212, 212, 212, 396, 
	0, 212, 212, 212, 212, 396, 396, 396, 
	188, 0, 0, 0, 0, 209, 0, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	0, 392, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 392, 209, 209, 209, 209, 
	392, 392, 392, 188, 1, 1, 1, 1, 
	376, 1, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 1, 609, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 609, 376, 
	376, 376, 376, 609, 609, 609, 372, 1, 
	0, 1, 1, 376, 1, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 1, 609, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 609, 376, 376, 376, 376, 609, 609, 
	609, 372, 77, 77, 77, 77, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 400, 215, 215, 215, 0, 215, 
	215, 215, 215, 215, 400, 215, 215, 215, 
	215, 400, 400, 400, 188, 79, 79, 79, 
	79, 218, 218, 218, 0, 218, 218, 218, 
	218, 218, 218, 218, 218, 404, 218, 218, 
	218, 0, 218, 218, 218, 218, 218, 404, 
	218, 218, 218, 218, 404, 404, 404, 188, 
	169, 169, 169, 169, 353, 353, 353, 353, 
	353, 353, 353, 353, 353, 353, 353, 353, 
	584, 353, 353, 353, 353, 353, 353, 353, 
	353, 353, 584, 353, 353, 353, 353, 584, 
	584, 584, 188, 81, 81, 81, 81, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 408, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 408, 221, 221, 
	221, 221, 408, 408, 408, 188, 83, 83, 
	83, 83, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 224, 224, 412, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	412, 224, 224, 224, 224, 412, 412, 412, 
	188, 85, 85, 85, 85, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 416, 227, 227, 227, 0, 227, 227, 
	227, 227, 227, 416, 227, 227, 227, 227, 
	416, 416, 416, 188, 87, 87, 87, 87, 
	230, 230, 230, 230, 230, 230, 230, 0, 
	230, 230, 230, 230, 420, 230, 230, 230, 
	0, 230, 230, 230, 230, 230, 420, 230, 
	230, 230, 230, 420, 420, 420, 188, 123, 
	123, 123, 123, 284, 284, 284, 284, 284, 
	284, 284, 284, 284, 284, 284, 284, 492, 
	284, 284, 284, 284, 284, 284, 284, 284, 
	284, 492, 284, 284, 284, 284, 492, 492, 
	492, 188, 89, 89, 89, 89, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 424, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 424, 233, 233, 233, 
	233, 424, 424, 424, 188, 91, 91, 91, 
	91, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 0, 236, 236, 428, 236, 236, 
	236, 0, 236, 236, 236, 236, 236, 428, 
	236, 236, 236, 236, 428, 428, 428, 188, 
	125, 125, 125, 125, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	496, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 496, 287, 287, 287, 287, 496, 
	496, 496, 188, 93, 93, 93, 93, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 0, 239, 432, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 432, 239, 239, 
	239, 239, 432, 432, 432, 188, 177, 177, 
	177, 177, 365, 365, 365, 365, 365, 365, 
	365, 365, 365, 365, 365, 365, 600, 365, 
	365, 365, 365, 365, 365, 365, 365, 365, 
	600, 365, 365, 365, 365, 600, 600, 600, 
	188, 95, 95, 95, 95, 242, 242, 242, 
	242, 242, 242, 0, 242, 242, 242, 242, 
	0, 436, 242, 242, 242, 0, 242, 242, 
	242, 242, 242, 436, 242, 242, 242, 242, 
	436, 436, 436, 188, 71, 71, 71, 71, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 5, 206, 388, 206, 206, 206, 
	206, 206, 206, 5, 206, 206, 206, 388, 
	5, 5, 206, 206, 206, 206, 388, 388, 
	388, 188, 71, 71, 71, 71, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	5, 206, 206, 206, 388, 5, 206, 206, 
	206, 206, 5, 388, 388, 188, 97, 97, 
	97, 97, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 440, 0, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	440, 245, 245, 245, 245, 440, 440, 440, 
	188, 71, 71, 71, 71, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 5, 
	206, 206, 206, 206, 206, 206, 206, 5, 
	206, 206, 206, 388, 5, 206, 206, 206, 
	206, 5, 388, 388, 188, 99, 99, 99, 
	99, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 444, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 444, 
	248, 248, 248, 248, 444, 444, 444, 188, 
	101, 101, 101, 101, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	448, 251, 251, 0, 0, 251, 251, 251, 
	251, 251, 448, 251, 251, 251, 251, 448, 
	448, 448, 188, 127, 127, 127, 127, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 500, 290, 290, 290, 0, 
	290, 290, 290, 290, 290, 500, 290, 290, 
	290, 290, 500, 500, 500, 188, 163, 163, 
	163, 163, 344, 344, 344, 344, 344, 344, 
	344, 344, 344, 344, 344, 344, 572, 344, 
	344, 344, 344, 344, 344, 344, 344, 344, 
	572, 344, 344, 344, 344, 572, 572, 572, 
	188, 103, 103, 103, 103, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 452, 254, 254, 254, 0, 254, 254, 
	254, 254, 254, 452, 254, 254, 254, 254, 
	452, 452, 452, 188, 137, 137, 137, 137, 
	305, 305, 305, 305, 305, 305, 305, 305, 
	305, 305, 305, 305, 520, 305, 305, 305, 
	305, 305, 305, 305, 305, 305, 520, 305, 
	305, 305, 305, 520, 520, 520, 188, 105, 
	105, 105, 105, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 456, 
	257, 257, 257, 0, 0, 257, 257, 257, 
	257, 456, 257, 257, 257, 257, 456, 456, 
	456, 188, 139, 139, 139, 139, 308, 308, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	308, 308, 524, 308, 308, 308, 308, 308, 
	308, 308, 308, 308, 524, 308, 308, 308, 
	308, 524, 524, 524, 188, 107, 107, 107, 
	107, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 460, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 460, 
	260, 260, 260, 260, 460, 460, 460, 188, 
	67, 67, 67, 67, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 5, 200, 200, 200, 200, 5, 5, 
	5, 188, 109, 109, 109, 109, 263, 263, 
	263, 263, 263, 263, 263, 263, 263, 263, 
	263, 263, 464, 263, 263, 263, 263, 263, 
	263, 263, 263, 263, 464, 263, 263, 263, 
	263, 464, 464, 464, 188, 111, 111, 111, 
	111, 266, 266, 266, 266, 266, 266, 266, 
	266, 266, 266, 266, 266, 468, 266, 266, 
	266, 266, 266, 266, 266, 266, 266, 468, 
	266, 266, 266, 266, 468, 468, 468, 188, 
	113, 113, 113, 113, 269, 269, 269, 269, 
	269, 269, 269, 269, 269, 269, 269, 269, 
	472, 269, 269, 269, 0, 269, 269, 269, 
	269, 0, 472, 269, 269, 269, 269, 472, 
	472, 472, 188, 157, 157, 157, 157, 335, 
	335, 335, 335, 335, 335, 335, 335, 335, 
	335, 335, 335, 560, 335, 335, 335, 335, 
	335, 335, 335, 335, 335, 560, 335, 335, 
	335, 335, 560, 560, 560, 188, 115, 115, 
	115, 115, 272, 272, 272, 272, 272, 272, 
	272, 272, 272, 272, 272, 272, 476, 272, 
	272, 272, 272, 272, 272, 272, 272, 272, 
	476, 272, 272, 272, 272, 476, 476, 476, 
	188, 117, 117, 117, 117, 275, 275, 275, 
	275, 275, 275, 275, 275, 275, 275, 275, 
	275, 480, 275, 275, 275, 0, 275, 275, 
	275, 275, 275, 480, 275, 0, 275, 275, 
	480, 480, 480, 188, 159, 159, 159, 159, 
	338, 338, 338, 338, 338, 338, 338, 338, 
	338, 338, 338, 338, 564, 338, 338, 338, 
	338, 338, 338, 338, 338, 338, 564, 338, 
	338, 338, 338, 564, 564, 564, 188, 119, 
	119, 119, 119, 278, 278, 278, 278, 278, 
	278, 278, 278, 278, 278, 278, 278, 484, 
	278, 278, 278, 278, 278, 278, 278, 278, 
	278, 484, 278, 278, 278, 278, 484, 484, 
	484, 188, 121, 121, 121, 121, 281, 281, 
	281, 281, 281, 281, 281, 281, 281, 281, 
	281, 281, 488, 281, 281, 281, 0, 281, 
	281, 281, 281, 281, 488, 0, 281, 281, 
	281, 281, 488, 488, 488, 188, 161, 161, 
	161, 161, 341, 341, 341, 341, 341, 341, 
	341, 341, 341, 341, 341, 341, 568, 341, 
	341, 341, 341, 341, 341, 341, 341, 341, 
	568, 341, 341, 341, 341, 568, 568, 568, 
	188, 69, 69, 69, 69, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 384, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 384, 203, 203, 203, 203, 
	384, 384, 384, 188, 173, 173, 173, 173, 
	359, 359, 359, 359, 359, 359, 359, 359, 
	359, 359, 359, 359, 592, 359, 359, 359, 
	359, 359, 359, 359, 359, 359, 592, 359, 
	359, 359, 359, 592, 592, 592, 188, 171, 
	171, 171, 171, 356, 356, 356, 356, 356, 
	356, 356, 356, 356, 356, 356, 356, 588, 
	356, 356, 356, 356, 356, 356, 356, 356, 
	356, 588, 356, 356, 356, 356, 588, 588, 
	588, 188, 129, 129, 129, 129, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 293, 504, 293, 293, 293, 0, 0, 
	293, 293, 293, 293, 504, 293, 293, 293, 
	293, 504, 504, 504, 188, 165, 165, 165, 
	165, 347, 347, 347, 347, 347, 347, 347, 
	347, 347, 347, 347, 347, 576, 347, 347, 
	347, 347, 347, 347, 347, 347, 347, 576, 
	347, 347, 347, 347, 576, 576, 576, 188, 
	131, 131, 131, 131, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	508, 296, 296, 296, 0, 296, 296, 296, 
	296, 296, 508, 296, 296, 296, 296, 508, 
	508, 508, 188, 167, 167, 167, 167, 350, 
	350, 350, 350, 350, 350, 350, 350, 350, 
	350, 350, 350, 580, 350, 350, 350, 350, 
	350, 350, 350, 350, 350, 580, 350, 350, 
	350, 350, 580, 580, 580, 188, 135, 135, 
	135, 135, 302, 302, 302, 302, 302, 302, 
	302, 302, 302, 302, 302, 302, 516, 302, 
	302, 302, 302, 302, 302, 302, 302, 302, 
	516, 302, 302, 302, 302, 516, 516, 516, 
	188, 71, 71, 71, 71, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 388, 206, 206, 206, 206, 5, 
	388, 388, 188, 175, 175, 175, 175, 362, 
	362, 362, 362, 362, 362, 362, 362, 362, 
	362, 362, 362, 596, 362, 362, 362, 362, 
	362, 362, 362, 362, 362, 596, 362, 362, 
	362, 362, 596, 596, 596, 188, 71, 71, 
	71, 71, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 5, 206, 206, 206, 
	206, 206, 206, 206, 5, 206, 206, 206, 
	388, 5, 206, 206, 206, 206, 5, 5, 
	388, 5, 388, 188, 71, 71, 71, 71, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 5, 206, 206, 206, 388, 5, 
	206, 206, 206, 206, 5, 5, 388, 5, 
	388, 188, 155, 155, 155, 155, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 556, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 556, 332, 332, 332, 
	332, 556, 556, 556, 188, 153, 153, 153, 
	153, 329, 329, 329, 329, 329, 329, 329, 
	329, 329, 329, 329, 329, 552, 329, 329, 
	329, 329, 329, 329, 329, 329, 329, 552, 
	329, 329, 329, 329, 552, 552, 552, 188, 
	151, 151, 151, 151, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	548, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 548, 326, 326, 326, 326, 548, 
	548, 548, 188, 149, 149, 149, 149, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 544, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 544, 323, 323, 
	323, 323, 544, 544, 544, 188, 147, 147, 
	147, 147, 320, 320, 320, 320, 320, 320, 
	320, 320, 320, 320, 320, 320, 540, 320, 
	320, 320, 320, 320, 320, 320, 320, 320, 
	540, 320, 320, 320, 320, 540, 540, 540, 
	188, 145, 145, 145, 145, 317, 317, 317, 
	317, 317, 317, 317, 317, 317, 317, 317, 
	317, 536, 317, 317, 317, 317, 317, 317, 
	317, 317, 317, 536, 317, 317, 317, 317, 
	536, 536, 536, 188, 133, 133, 133, 133, 
	299, 299, 299, 299, 299, 299, 299, 299, 
	299, 299, 299, 299, 512, 299, 299, 299, 
	299, 299, 299, 299, 299, 299, 512, 299, 
	299, 299, 299, 512, 512, 512, 188, 141, 
	141, 141, 141, 311, 311, 311, 311, 311, 
	311, 311, 311, 311, 311, 311, 311, 528, 
	311, 311, 311, 311, 311, 311, 311, 311, 
	311, 528, 311, 311, 311, 311, 528, 528, 
	528, 188, 143, 143, 143, 143, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 532, 314, 314, 314, 314, 314, 
	314, 314, 314, 314, 532, 314, 314, 314, 
	314, 532, 532, 532, 188, 0
};

static const short _lexer_eof_actions[] = {
	0, 380, 380, 380, 604, 604, 380, 380, 
	380, 380, 380, 380, 380, 380, 380, 380, 
	380, 380, 604, 604, 380, 380, 380, 380, 
	380, 380, 380, 380, 380, 380, 380, 380, 
	380, 0, 0, 1, 1, 75, 73, 182, 
	182, 77, 79, 169, 81, 83, 85, 87, 
	123, 89, 91, 125, 93, 177, 95, 71, 
	71, 97, 71, 99, 101, 127, 163, 103, 
	137, 105, 139, 107, 67, 109, 111, 113, 
	157, 115, 117, 159, 119, 121, 161, 69, 
	173, 171, 129, 165, 131, 167, 135, 71, 
	175, 71, 71, 155, 153, 151, 149, 147, 
	145, 133, 141, 143
};

static const int lexer_start = 33;
static const int lexer_first_final = 33;
static const int lexer_error = 0;

static const int lexer_en_main = 33;


#line 256 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"





template < typename ... arguments_t >
xec_token* xec_parser::make_token( arguments_t ... arguments )
{
    if ( recycle_tokens.size() )
    {
        void* p = recycle_tokens.back();
        recycle_tokens.pop_back();
        return new ( p ) xec_token( arguments ... );
    }
    else
    {
        return new ( alloc ) xec_token( arguments ... );
    }
}



struct xec_keywords
    :   public std::unordered_map< symkey, xec_token_kind >
{
    
    xec_keywords()
    {
        emplace( symkey( "break" ),    XEC_KEYWORD_BREAK );
        emplace( symkey( "case" ),     XEC_KEYWORD_CASE );
        emplace( symkey( "catch" ),    XEC_KEYWORD_CATCH );
        emplace( symkey( "continue" ), XEC_KEYWORD_CONTINUE );
        emplace( symkey( "default" ),  XEC_KEYWORD_DEFAULT );
        emplace( symkey( "delete" ),   XEC_KEYWORD_DELETE );
        emplace( symkey( "do" ),       XEC_KEYWORD_DO );
        emplace( symkey( "else" ),     XEC_KEYWORD_ELSE );
        emplace( symkey( "false" ),    XEC_KEYWORD_FALSE );
        emplace( symkey( "finally" ),  XEC_KEYWORD_FINALLY );
        emplace( symkey( "for" ),      XEC_KEYWORD_FOR );
        emplace( symkey( "if" ),       XEC_KEYWORD_IF );
        emplace( symkey( "new" ),      XEC_KEYWORD_NEW );
        emplace( symkey( "null" ),     XEC_KEYWORD_NULL );
        emplace( symkey( "return" ),   XEC_KEYWORD_RETURN );
        emplace( symkey( "switch" ),   XEC_KEYWORD_SWITCH );
        emplace( symkey( "throw" ),    XEC_KEYWORD_THROW );
        emplace( symkey( "true" ),     XEC_KEYWORD_TRUE );
        emplace( symkey( "try" ),      XEC_KEYWORD_TRY );
        emplace( symkey( "using" ),    XEC_KEYWORD_USING );
        emplace( symkey( "var" ),      XEC_KEYWORD_VAR );
        emplace( symkey( "while" ),    XEC_KEYWORD_WHILE );
        emplace( symkey( "yield" ),    XEC_KEYWORD_YIELD );
        emplace( symkey( "in" ),       XEC_TOKEN_IN );
        emplace( symkey( "is" ),       XEC_TOKEN_IS );
    }
    
};



xec_token* xec_parser::make_identifier( int sloc, region_buffer* data )
{
    static xec_keywords keywords;

    size_t length = data->size();
    const char* identifier = (const char*)data->get();
    symkey key( identifier, length );
    
    // Check for keyword.
    auto i = keywords.find( key );
    if ( i != keywords.end() )
    {
        return make_token( i->second, sloc, i->first.c_str(), i->first.size() );
    }
    
    // Check for existing identifier.
    auto j = identifiers.find( key );
    if ( j != identifiers.end() )
    {
        return make_token( XEC_TOKEN_IDENTIFIER, sloc, j->c_str(), j->size() );
    }

    // New identifier.
    data->append( '\0' );
    identifier = (const char*)data->tearoff();
    identifiers.emplace( key.hash(), identifier, length );
    return make_token( XEC_TOKEN_IDENTIFIER, sloc, identifier, length );

}



static bool encode_utf8( region_buffer* data, uint32_t cp )
{
    if ( cp <= 0x7F )
    {
        data->append( (uint8_t)cp );
        return true;
    }
    else if ( cp <= 0x7FF )
    {
        data->append( (uint8_t)( 0xC0 | ( cp >> 6 & 0x1F ) ) );
        data->append( (uint8_t)( 0x80 | ( cp & 0x3F ) ) );
        return true;
    }
    else if ( cp <= 0xFFFF )
    {
        data->append( (uint8_t)( 0xE0 | ( cp >> 12 & 0x0F ) ) );
        data->append( (uint8_t)( 0x80 | ( cp >> 6 & 0x3F ) ) );
        data->append( (uint8_t)( 0x80 | ( cp & 0x3F ) ) );
        return true;
    }
    else if ( cp <= 0x10FFFF )
    {
        data->append( (uint8_t)( 0xF0 | ( cp >> 18 & 0x07 ) ) );
        data->append( (uint8_t)( 0x80 | ( cp >> 12 & 0x3F ) ) );
        data->append( (uint8_t)( 0x80 | ( cp >> 6 & 0x3F ) ) );
        data->append( (uint8_t)( 0x80 | ( cp & 0x3F ) ) );
        return true;
    }
    else
    {
        return false;
    }
}



bool xec_parser::parse( const char* path )
{
    region_scope rscope( alloc );
    
    
    // Open file.
    this->filename = path;
    FILE* file = fopen( path, "r" );
    if ( ! file )
    {
        diagnostic( 0, "unable to open file" );
        return false;
    }
    
    
    // File state.
    int offset = 0;
    unsigned char* buffer = (unsigned char*)malloc( BUFFER_SIZE );
    
    
    // Token state.
    int sloc = -1;
    int uloc = -1;
    region_buffer data;
    uint32_t temp;


    // Initialize state machine.
    int cs;
    
    
#line 1314 "xec_parser_ragel.cpp"
	{
	cs = lexer_start;
	}

#line 414 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
    
    
    // Perform lexing.
#define TOKEN( token ) \
    token->debug_print();
#define MTOKEN( ... ) \
    TOKEN( make_token( __VA_ARGS__ ) );

    bool iseof = false;
    while ( ! iseof )
    {
        size_t read = fread( buffer, 1, BUFFER_SIZE, file );
        iseof = read < BUFFER_SIZE;
        
        if ( iseof && ferror( file ) )
        {
            data.shrink();
            diagnostic( offset, "error reading file" );
            goto error;
        }

        const unsigned char* p      = buffer;
        const unsigned char* pe     = buffer + read;
        const unsigned char* eof    = iseof ? pe : NULL;

        
#line 1346 "xec_parser_ragel.cpp"
	{
	int _klen;
	unsigned int _trans;
	const char *_acts;
	unsigned int _nacts;
	const unsigned char *_keys;

	if ( p == pe )
		goto _test_eof;
	if ( cs == 0 )
		goto _out;
_resume:
	_keys = _lexer_trans_keys + _lexer_key_offsets[cs];
	_trans = _lexer_index_offsets[cs];

	_klen = _lexer_single_lengths[cs];
	if ( _klen > 0 ) {
		const unsigned char *_lower = _keys;
		const unsigned char *_mid;
		const unsigned char *_upper = _keys + _klen - 1;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( (*p) < *_mid )
				_upper = _mid - 1;
			else if ( (*p) > *_mid )
				_lower = _mid + 1;
			else {
				_trans += (unsigned int)(_mid - _keys);
				goto _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _lexer_range_lengths[cs];
	if ( _klen > 0 ) {
		const unsigned char *_lower = _keys;
		const unsigned char *_mid;
		const unsigned char *_upper = _keys + (_klen<<1) - 2;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( (*p) < _mid[0] )
				_upper = _mid - 2;
			else if ( (*p) > _mid[1] )
				_lower = _mid + 2;
			else {
				_trans += (unsigned int)((_mid - _keys)>>1);
				goto _match;
			}
		}
		_trans += _klen;
	}

_match:
	cs = _lexer_trans_targs[_trans];

	if ( _lexer_trans_actions[_trans] == 0 )
		goto _again;

	_acts = _lexer_actions + _lexer_trans_actions[_trans];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 )
	{
		switch ( *_acts++ )
		{
	case 0:
#line 28 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ newlines.push_back( (int)( offset + ( p - buffer ) - 1 ) ); }
	break;
	case 1:
#line 29 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ sloc = (int)( offset + ( p - buffer ) ); data.clear(); }
	break;
	case 2:
#line 30 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ data.append( (char)(*p) ); }
	break;
	case 4:
#line 41 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{
        data.shrink();
        int sloc = (int)( offset + ( p - buffer ) );
        if ( (*p) >= 0x20 && (*p) <= 0x7E )
            diagnostic( sloc, "unexpected character '%c'", (*p) );
        else
            diagnostic( sloc, "unexpected character '\\x%02X'", (*p) );
        if ( diagnostics.size() >= ERROR_LIMIT )
            goto error;
    }
	break;
	case 5:
#line 77 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ data.append( '\"' ); }
	break;
	case 6:
#line 78 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ data.append( '\\' ); }
	break;
	case 7:
#line 79 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ data.append( '/' ); }
	break;
	case 8:
#line 80 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ data.append( '\b' ); }
	break;
	case 9:
#line 81 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ data.append( '\f' ); }
	break;
	case 10:
#line 82 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ data.append( '\n' ); }
	break;
	case 11:
#line 83 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ data.append( '\r' ); }
	break;
	case 12:
#line 84 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ data.append( '\t' ); }
	break;
	case 13:
#line 86 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ temp = ( (*p) - '0' ) << 4; }
	break;
	case 14:
#line 87 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ temp = ( (*p) - 'a' + 0x0A ) << 4; }
	break;
	case 15:
#line 88 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ temp = ( (*p) - 'A' + 0x0A ) << 4; }
	break;
	case 16:
#line 90 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ data.append( (char)( temp | (*p) - '0' ) ); }
	break;
	case 17:
#line 91 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ data.append( (char)( temp | (*p) - 'a' + 0x0A ) ); }
	break;
	case 18:
#line 92 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ data.append( (char)( temp | (*p) - 'A' + 0x0A ) ); }
	break;
	case 19:
#line 96 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{
                    uloc = (int)( offset + ( p - buffer ) );
                }
	break;
	case 20:
#line 99 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ temp = ( (*p) - '0' ) << 20; }
	break;
	case 21:
#line 100 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ temp = ( (*p) - 'a' + 0x0A ) << 20; }
	break;
	case 22:
#line 101 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ temp = ( (*p) - 'A' + 0x0A ) << 20; }
	break;
	case 23:
#line 103 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ temp |= ( (*p) - '0' ) << 16; }
	break;
	case 24:
#line 104 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ temp |= ( (*p) - 'a' + 0x0A ) << 16; }
	break;
	case 25:
#line 105 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ temp |= ( (*p) - 'A' + 0x0A ) << 16; }
	break;
	case 26:
#line 107 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ temp |= ( (*p) - '0' ) << 12; }
	break;
	case 27:
#line 108 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ temp |= ( (*p) - 'a' + 0x0A ) << 12; }
	break;
	case 28:
#line 109 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ temp |= ( (*p) - 'A' + 0x0A ) << 12; }
	break;
	case 29:
#line 111 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ temp |= ( (*p) - '0' ) << 8; }
	break;
	case 30:
#line 112 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ temp |= ( (*p) - 'a' + 0x0A ) << 8; }
	break;
	case 31:
#line 113 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ temp |= ( (*p) - 'A' + 0x0A ) << 8; }
	break;
	case 32:
#line 115 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ temp |= ( (*p) - '0' ) << 4; }
	break;
	case 33:
#line 116 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ temp |= ( (*p) - 'a' + 0x0A ) << 4; }
	break;
	case 34:
#line 117 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ temp |= ( (*p) - 'A' + 0x0A ) << 4; }
	break;
	case 35:
#line 119 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ temp |= (*p) - '0'; }
	break;
	case 36:
#line 120 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ temp |= (*p) - 'a' + 0x0A; }
	break;
	case 37:
#line 121 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ temp |= (*p) - 'A' + 0x0A; }
	break;
	case 38:
#line 124 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{
                    if ( ! encode_utf8( &data, temp ) )
                    {
                        diagnostic(
                                sloc, "invalid codepoint U+%04" PRIX32, temp );
                        if ( diagnostics.size() >= ERROR_LIMIT )
                            goto error;
                    }
                }
	break;
	case 39:
#line 157 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{
                    xec_token* token = make_identifier( sloc, &data );
                    TOKEN( token );
                }
	break;
	case 40:
#line 164 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{
                    MTOKEN( XEC_TOKEN_IDENTIFIER, sloc, "~this", 5 );
                }
	break;
	case 41:
#line 171 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{
                    size_t length = data.size();
                    data.append( '\0' );
                    const char* number = (const char*)data.tearoff();
                    MTOKEN( XEC_TOKEN_NUMBER, sloc, number, length );
                }
	break;
	case 42:
#line 180 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{
                    size_t length = data.size();
                    data.append( '\0' );
                    const char* string = (const char*)data.tearoff();
                    MTOKEN( XEC_TOKEN_STRING, sloc, string, length );
                }
	break;
	case 43:
#line 187 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_XMARK, sloc, "!", 1 ); }
	break;
	case 44:
#line 188 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_PERCENT, sloc, "%", 1 ); }
	break;
	case 45:
#line 189 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_AMPERSAND, sloc, "&", 1 ); }
	break;
	case 46:
#line 190 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_LPN, sloc, "(", 1 ); }
	break;
	case 47:
#line 191 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_RPN, sloc, ")", 1 ); }
	break;
	case 48:
#line 192 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_ASTERISK, sloc, "*", 1 ); }
	break;
	case 49:
#line 193 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_PLUS, sloc, "+", 1 ); }
	break;
	case 50:
#line 194 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_COMMA, sloc, ",", 1 ); }
	break;
	case 51:
#line 195 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_MINUS, sloc, "-", 1 ); }
	break;
	case 52:
#line 196 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_PERIOD, sloc, ".", 1 ); }
	break;
	case 53:
#line 197 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_SOLIDUS, sloc, "/", 1 ); }
	break;
	case 54:
#line 198 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_COLON, sloc, ":", 1 ); }
	break;
	case 55:
#line 199 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_SEMICOLON, sloc, ";", 1 ); }
	break;
	case 56:
#line 200 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_LESS, sloc, "<", 1 ); }
	break;
	case 57:
#line 201 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_ASSIGN, sloc, "=", 1 ); }
	break;
	case 58:
#line 202 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_GREATER, sloc, ">", 1 ); }
	break;
	case 59:
#line 203 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_QMARK, sloc, "?", 1 ); }
	break;
	case 60:
#line 204 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_LSQ, sloc, "[", 1 ); }
	break;
	case 61:
#line 205 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_RSQ, sloc, "]", 1 ); }
	break;
	case 62:
#line 206 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_CARET, sloc, "^", 1 ); }
	break;
	case 63:
#line 207 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_LBR, sloc, "{", 1 ); }
	break;
	case 64:
#line 208 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_VBAR, sloc, "|", 1 ); }
	break;
	case 65:
#line 209 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_RBR, sloc, "}", 1 ); }
	break;
	case 66:
#line 210 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_TILDE, sloc, "~", 1 ); }
	break;
	case 67:
#line 212 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_INCREMENT, sloc, "++", 2 ); }
	break;
	case 68:
#line 213 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_DECREMENT, sloc, "--", 2 ); }
	break;
	case 69:
#line 215 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_LSHIFT, sloc, "<<", 2 ); }
	break;
	case 70:
#line 216 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_RSHIFT, sloc, ">>", 2 ); }
	break;
	case 71:
#line 217 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_URSHIFT, sloc, ">>>", 3 ); }
	break;
	case 72:
#line 219 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_NOTEQUAL, sloc, "!=", 2 ); }
	break;
	case 73:
#line 220 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_LESSEQUAL, sloc, "<=", 2 ); }
	break;
	case 74:
#line 221 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_EQUAL, sloc, "==", 2 ); }
	break;
	case 75:
#line 222 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_GREATEREQUAL, sloc, ">=", 2 ); }
	break;
	case 76:
#line 223 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_NOTIN, sloc, "!in", 3 ); }
	break;
	case 77:
#line 224 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_NOTIS, sloc, "!is", 3 ); }
	break;
	case 78:
#line 226 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_MODASSIGN, sloc, "%=", 2 ); }
	break;
	case 79:
#line 227 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_BITANDASSIGN, sloc, "&=", 2 ); }
	break;
	case 80:
#line 228 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_MULASSIGN, sloc, "*=", 2 ); }
	break;
	case 81:
#line 229 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_ADDASSIGN, sloc, "+=", 2 ); }
	break;
	case 82:
#line 230 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_SUBASSIGN, sloc, "-=", 2 ); }
	break;
	case 83:
#line 231 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_DIVASSIGN, sloc, "/=", 2 ); }
	break;
	case 84:
#line 232 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_BITXORASSIGN, sloc, "^=", 2 ); }
	break;
	case 85:
#line 233 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_BITORASSIGN, sloc, "|=", 2 ); }
	break;
	case 86:
#line 234 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_INTDIVASSIGN, sloc, "~=", 2 ); }
	break;
	case 87:
#line 235 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_LSHIFTASSIGN, sloc, "<<=", 3 ); }
	break;
	case 88:
#line 236 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_RSHIFTASSIGN, sloc, ">>=", 3 ); }
	break;
	case 89:
#line 237 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_URSHIFTASSIGN, sloc, ">>>=", 4 ); }
	break;
	case 90:
#line 239 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_LOGICAND, sloc, "&&", 2 ); }
	break;
	case 91:
#line 240 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_LOGICXOR, sloc, "^^", 2 ); }
	break;
	case 92:
#line 241 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_LOGICOR, sloc, "||", 2 ); }
	break;
	case 93:
#line 243 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_EACHKEY, sloc, "::", 2 ); }
	break;
	case 94:
#line 244 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_ELLIPSIS, sloc, "...", 3 ); }
	break;
	case 95:
#line 250 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ {cs = 33; goto _again;} }
	break;
#line 1833 "xec_parser_ragel.cpp"
		}
	}

_again:
	if ( cs == 0 )
		goto _out;
	if ( ++p != pe )
		goto _resume;
	_test_eof: {}
	if ( p == eof )
	{
	const char *__acts = _lexer_actions + _lexer_eof_actions[cs];
	unsigned int __nacts = (unsigned int) *__acts++;
	while ( __nacts-- > 0 ) {
		switch ( *__acts++ ) {
	case 0:
#line 28 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ newlines.push_back( (int)( offset + ( p - buffer ) - 1 ) ); }
	break;
	case 3:
#line 33 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{
        data.shrink();
        int sloc = (int)( offset + ( p - buffer ) );
        diagnostic( sloc, "unexpected end of file" );
        {p++; goto _out; }
    }
	break;
	case 4:
#line 41 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{
        data.shrink();
        int sloc = (int)( offset + ( p - buffer ) );
        if ( (*p) >= 0x20 && (*p) <= 0x7E )
            diagnostic( sloc, "unexpected character '%c'", (*p) );
        else
            diagnostic( sloc, "unexpected character '\\x%02X'", (*p) );
        if ( diagnostics.size() >= ERROR_LIMIT )
            goto error;
    }
	break;
	case 39:
#line 157 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{
                    xec_token* token = make_identifier( sloc, &data );
                    TOKEN( token );
                }
	break;
	case 40:
#line 164 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{
                    MTOKEN( XEC_TOKEN_IDENTIFIER, sloc, "~this", 5 );
                }
	break;
	case 41:
#line 171 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{
                    size_t length = data.size();
                    data.append( '\0' );
                    const char* number = (const char*)data.tearoff();
                    MTOKEN( XEC_TOKEN_NUMBER, sloc, number, length );
                }
	break;
	case 42:
#line 180 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{
                    size_t length = data.size();
                    data.append( '\0' );
                    const char* string = (const char*)data.tearoff();
                    MTOKEN( XEC_TOKEN_STRING, sloc, string, length );
                }
	break;
	case 43:
#line 187 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_XMARK, sloc, "!", 1 ); }
	break;
	case 44:
#line 188 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_PERCENT, sloc, "%", 1 ); }
	break;
	case 45:
#line 189 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_AMPERSAND, sloc, "&", 1 ); }
	break;
	case 46:
#line 190 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_LPN, sloc, "(", 1 ); }
	break;
	case 47:
#line 191 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_RPN, sloc, ")", 1 ); }
	break;
	case 48:
#line 192 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_ASTERISK, sloc, "*", 1 ); }
	break;
	case 49:
#line 193 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_PLUS, sloc, "+", 1 ); }
	break;
	case 50:
#line 194 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_COMMA, sloc, ",", 1 ); }
	break;
	case 51:
#line 195 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_MINUS, sloc, "-", 1 ); }
	break;
	case 52:
#line 196 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_PERIOD, sloc, ".", 1 ); }
	break;
	case 53:
#line 197 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_SOLIDUS, sloc, "/", 1 ); }
	break;
	case 54:
#line 198 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_COLON, sloc, ":", 1 ); }
	break;
	case 55:
#line 199 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_SEMICOLON, sloc, ";", 1 ); }
	break;
	case 56:
#line 200 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_LESS, sloc, "<", 1 ); }
	break;
	case 57:
#line 201 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_ASSIGN, sloc, "=", 1 ); }
	break;
	case 58:
#line 202 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_GREATER, sloc, ">", 1 ); }
	break;
	case 59:
#line 203 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_QMARK, sloc, "?", 1 ); }
	break;
	case 60:
#line 204 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_LSQ, sloc, "[", 1 ); }
	break;
	case 61:
#line 205 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_RSQ, sloc, "]", 1 ); }
	break;
	case 62:
#line 206 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_CARET, sloc, "^", 1 ); }
	break;
	case 63:
#line 207 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_LBR, sloc, "{", 1 ); }
	break;
	case 64:
#line 208 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_VBAR, sloc, "|", 1 ); }
	break;
	case 65:
#line 209 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_RBR, sloc, "}", 1 ); }
	break;
	case 66:
#line 210 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_TILDE, sloc, "~", 1 ); }
	break;
	case 67:
#line 212 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_INCREMENT, sloc, "++", 2 ); }
	break;
	case 68:
#line 213 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_DECREMENT, sloc, "--", 2 ); }
	break;
	case 69:
#line 215 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_LSHIFT, sloc, "<<", 2 ); }
	break;
	case 70:
#line 216 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_RSHIFT, sloc, ">>", 2 ); }
	break;
	case 71:
#line 217 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_URSHIFT, sloc, ">>>", 3 ); }
	break;
	case 72:
#line 219 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_NOTEQUAL, sloc, "!=", 2 ); }
	break;
	case 73:
#line 220 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_LESSEQUAL, sloc, "<=", 2 ); }
	break;
	case 74:
#line 221 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_EQUAL, sloc, "==", 2 ); }
	break;
	case 75:
#line 222 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_GREATEREQUAL, sloc, ">=", 2 ); }
	break;
	case 76:
#line 223 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_NOTIN, sloc, "!in", 3 ); }
	break;
	case 77:
#line 224 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_NOTIS, sloc, "!is", 3 ); }
	break;
	case 78:
#line 226 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_MODASSIGN, sloc, "%=", 2 ); }
	break;
	case 79:
#line 227 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_BITANDASSIGN, sloc, "&=", 2 ); }
	break;
	case 80:
#line 228 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_MULASSIGN, sloc, "*=", 2 ); }
	break;
	case 81:
#line 229 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_ADDASSIGN, sloc, "+=", 2 ); }
	break;
	case 82:
#line 230 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_SUBASSIGN, sloc, "-=", 2 ); }
	break;
	case 83:
#line 231 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_DIVASSIGN, sloc, "/=", 2 ); }
	break;
	case 84:
#line 232 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_BITXORASSIGN, sloc, "^=", 2 ); }
	break;
	case 85:
#line 233 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_BITORASSIGN, sloc, "|=", 2 ); }
	break;
	case 86:
#line 234 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_INTDIVASSIGN, sloc, "~=", 2 ); }
	break;
	case 87:
#line 235 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_LSHIFTASSIGN, sloc, "<<=", 3 ); }
	break;
	case 88:
#line 236 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_RSHIFTASSIGN, sloc, ">>=", 3 ); }
	break;
	case 89:
#line 237 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_URSHIFTASSIGN, sloc, ">>>=", 4 ); }
	break;
	case 90:
#line 239 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_LOGICAND, sloc, "&&", 2 ); }
	break;
	case 91:
#line 240 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_LOGICXOR, sloc, "^^", 2 ); }
	break;
	case 92:
#line 241 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_LOGICOR, sloc, "||", 2 ); }
	break;
	case 93:
#line 243 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_EACHKEY, sloc, "::", 2 ); }
	break;
	case 94:
#line 244 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_ELLIPSIS, sloc, "...", 3 ); }
	break;
	case 95:
#line 250 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ {cs = 33; goto _again;} }
	break;
#line 2118 "xec_parser_ragel.cpp"
		}
	}
	}

	_out: {}
	}

#line 440 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
        
        offset += read;
    }

    if ( ! ferror( file ) )
    {
        MTOKEN( XEC_TOKEN_EOF, offset, "", 0 );
    }

#undef MTOKEN
#undef TOKEN

error:

    // Close file.
    free( buffer );
    fclose( file );


    return diagnostics.size() == 0;
}



#pragma unused( lexer_first_final )
#pragma unused( lexer_error )
#pragma unused( lexer_en_main )






