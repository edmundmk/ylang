
#line 1 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
//
//  ../../toolbox/source/xec/lib/xec_parser_ragel.rl
//
//  Created by Edmund Kapusniak on 14/03/2014.
//  Copyright (c) 2014 Edmund Kapusniak. All rights reserved.
//


/*
    ragel ../../toolbox/source/xec/lib/xec_parser_ragel.rl -o xec_parser_ragel.cpp -G2
*/


#include "xec_parser.h"
#include <stdint.h>
#include <intformat.h>
#include "xec_token.h"


void* XecParseAlloc( void* (*malloc)( size_t ) );
void  XecParse( void* yyp, int yymajor, xec_token* yyminor, xec_parser* p );
void  XecParseFree( void* p, void (*free)( void* ) );




#line 259 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"




#line 35 "xec_parser_ragel.cpp"
static const char _lexer_actions[] = {
	0, 1, 0, 1, 1, 1, 2, 1, 
	5, 1, 6, 1, 7, 1, 8, 1, 
	9, 1, 10, 1, 11, 1, 12, 1, 
	13, 1, 14, 1, 15, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 1, 24, 1, 
	25, 1, 26, 1, 27, 1, 28, 1, 
	29, 1, 30, 1, 31, 1, 32, 1, 
	33, 1, 34, 1, 39, 1, 40, 1, 
	41, 1, 42, 1, 43, 1, 44, 1, 
	45, 1, 46, 1, 47, 1, 48, 1, 
	49, 1, 50, 1, 51, 1, 52, 1, 
	53, 1, 54, 1, 55, 1, 56, 1, 
	57, 1, 58, 1, 59, 1, 60, 1, 
	61, 1, 62, 1, 63, 1, 64, 1, 
	65, 1, 66, 1, 67, 1, 68, 1, 
	69, 1, 70, 1, 71, 1, 72, 1, 
	73, 1, 74, 1, 75, 1, 76, 1, 
	77, 1, 78, 1, 79, 1, 80, 1, 
	81, 1, 82, 1, 83, 1, 84, 1, 
	85, 1, 86, 1, 87, 1, 88, 1, 
	89, 1, 90, 1, 91, 1, 92, 1, 
	93, 1, 94, 1, 95, 2, 0, 1, 
	2, 0, 42, 2, 1, 2, 2, 4, 
	96, 2, 35, 38, 2, 36, 38, 2, 
	37, 38, 2, 39, 1, 2, 40, 1, 
	2, 41, 1, 2, 42, 1, 2, 43, 
	1, 2, 44, 1, 2, 45, 1, 2, 
	46, 1, 2, 47, 1, 2, 48, 1, 
	2, 49, 1, 2, 50, 1, 2, 51, 
	1, 2, 52, 1, 2, 53, 1, 2, 
	54, 1, 2, 55, 1, 2, 56, 1, 
	2, 57, 1, 2, 58, 1, 2, 59, 
	1, 2, 60, 1, 2, 61, 1, 2, 
	62, 1, 2, 63, 1, 2, 64, 1, 
	2, 65, 1, 2, 66, 1, 2, 67, 
	1, 2, 68, 1, 2, 69, 1, 2, 
	70, 1, 2, 71, 1, 2, 72, 1, 
	2, 73, 1, 2, 74, 1, 2, 75, 
	1, 2, 76, 1, 2, 77, 1, 2, 
	78, 1, 2, 79, 1, 2, 80, 1, 
	2, 81, 1, 2, 82, 1, 2, 83, 
	1, 2, 84, 1, 2, 85, 1, 2, 
	86, 1, 2, 87, 1, 2, 88, 1, 
	2, 89, 1, 2, 90, 1, 2, 91, 
	1, 2, 92, 1, 2, 93, 1, 2, 
	94, 1, 2, 95, 1, 3, 0, 1, 
	2, 3, 0, 4, 96, 3, 0, 42, 
	1, 3, 3, 4, 96, 3, 40, 1, 
	2, 3, 41, 1, 2, 3, 42, 1, 
	2, 3, 43, 1, 2, 3, 44, 1, 
	2, 3, 45, 1, 2, 3, 46, 1, 
	2, 3, 47, 1, 2, 3, 48, 1, 
	2, 3, 49, 1, 2, 3, 50, 1, 
	2, 3, 51, 1, 2, 3, 52, 1, 
	2, 3, 53, 1, 2, 3, 54, 1, 
	2, 3, 55, 1, 2, 3, 56, 1, 
	2, 3, 57, 1, 2, 3, 58, 1, 
	2, 3, 59, 1, 2, 3, 60, 1, 
	2, 3, 61, 1, 2, 3, 62, 1, 
	2, 3, 63, 1, 2, 3, 64, 1, 
	2, 3, 65, 1, 2, 3, 66, 1, 
	2, 3, 67, 1, 2, 3, 68, 1, 
	2, 3, 69, 1, 2, 3, 70, 1, 
	2, 3, 71, 1, 2, 3, 72, 1, 
	2, 3, 73, 1, 2, 3, 74, 1, 
	2, 3, 75, 1, 2, 3, 76, 1, 
	2, 3, 77, 1, 2, 3, 78, 1, 
	2, 3, 79, 1, 2, 3, 80, 1, 
	2, 3, 81, 1, 2, 3, 82, 1, 
	2, 3, 83, 1, 2, 3, 84, 1, 
	2, 3, 85, 1, 2, 3, 86, 1, 
	2, 3, 87, 1, 2, 3, 88, 1, 
	2, 3, 89, 1, 2, 3, 90, 1, 
	2, 3, 91, 1, 2, 3, 92, 1, 
	2, 3, 93, 1, 2, 3, 94, 1, 
	2, 3, 95, 1, 2, 4, 0, 3, 
	4, 96, 4, 0, 42, 1, 2
};

static const short _lexer_key_offsets[] = {
	0, 0, 4, 7, 10, 13, 17, 19, 
	21, 22, 23, 24, 28, 30, 36, 42, 
	44, 47, 50, 53, 57, 59, 69, 75, 
	81, 87, 93, 99, 105, 111, 117, 119, 
	156, 193, 230, 268, 305, 342, 379, 416, 
	453, 490, 527, 564, 601, 638, 675, 712, 
	749, 786, 823, 860, 897, 934, 974, 1012, 
	1049, 1087, 1124, 1161, 1198, 1235, 1272, 1309, 
	1346, 1383, 1420, 1456, 1493, 1530, 1567, 1604, 
	1641, 1678, 1715, 1752, 1790, 1827, 1864, 1901, 
	1938, 1975, 2012, 2049, 2086, 2123, 2159, 2196, 
	2238, 2280, 2317, 2354, 2391, 2428, 2465, 2502, 
	2539, 2576
};

static const unsigned char _lexer_trans_keys[] = {
	10u, 13u, 34u, 92u, 10u, 13u, 42u, 10u, 
	13u, 42u, 10u, 13u, 42u, 10u, 13u, 42u, 
	47u, 10u, 13u, 48u, 57u, 104u, 105u, 115u, 
	43u, 45u, 48u, 57u, 48u, 57u, 48u, 57u, 
	65u, 70u, 97u, 102u, 48u, 57u, 65u, 70u, 
	97u, 102u, 42u, 47u, 10u, 13u, 42u, 10u, 
	13u, 42u, 10u, 13u, 42u, 10u, 13u, 42u, 
	47u, 10u, 13u, 34u, 47u, 92u, 98u, 102u, 
	110u, 114u, 116u, 117u, 120u, 48u, 57u, 65u, 
	70u, 97u, 102u, 48u, 57u, 65u, 70u, 97u, 
	102u, 48u, 57u, 65u, 70u, 97u, 102u, 48u, 
	57u, 65u, 70u, 97u, 102u, 48u, 57u, 65u, 
	70u, 97u, 102u, 48u, 57u, 65u, 70u, 97u, 
	102u, 48u, 57u, 65u, 70u, 97u, 102u, 48u, 
	57u, 65u, 70u, 97u, 102u, 110u, 115u, 9u, 
	10u, 13u, 32u, 33u, 34u, 37u, 38u, 40u, 
	41u, 42u, 43u, 44u, 45u, 46u, 47u, 48u, 
	58u, 59u, 60u, 61u, 62u, 63u, 91u, 93u, 
	94u, 95u, 123u, 124u, 125u, 126u, 49u, 57u, 
	65u, 90u, 97u, 122u, 9u, 10u, 13u, 32u, 
	33u, 34u, 37u, 38u, 40u, 41u, 42u, 43u, 
	44u, 45u, 46u, 47u, 48u, 58u, 59u, 60u, 
	61u, 62u, 63u, 91u, 93u, 94u, 95u, 123u, 
	124u, 125u, 126u, 49u, 57u, 65u, 90u, 97u, 
	122u, 9u, 10u, 13u, 32u, 33u, 34u, 37u, 
	38u, 40u, 41u, 42u, 43u, 44u, 45u, 46u, 
	47u, 48u, 58u, 59u, 60u, 61u, 62u, 63u, 
	91u, 93u, 94u, 95u, 123u, 124u, 125u, 126u, 
	49u, 57u, 65u, 90u, 97u, 122u, 9u, 10u, 
	13u, 32u, 33u, 34u, 37u, 38u, 40u, 41u, 
	42u, 43u, 44u, 45u, 46u, 47u, 48u, 58u, 
	59u, 60u, 61u, 62u, 63u, 91u, 93u, 94u, 
	95u, 105u, 123u, 124u, 125u, 126u, 49u, 57u, 
	65u, 90u, 97u, 122u, 9u, 10u, 13u, 32u, 
	33u, 34u, 37u, 38u, 40u, 41u, 42u, 43u, 
	44u, 45u, 46u, 47u, 48u, 58u, 59u, 60u, 
	61u, 62u, 63u, 91u, 93u, 94u, 95u, 123u, 
	124u, 125u, 126u, 49u, 57u, 65u, 90u, 97u, 
	122u, 9u, 10u, 13u, 32u, 33u, 34u, 37u, 
	38u, 40u, 41u, 42u, 43u, 44u, 45u, 46u, 
	47u, 48u, 58u, 59u, 60u, 61u, 62u, 63u, 
	91u, 93u, 94u, 95u, 123u, 124u, 125u, 126u, 
	49u, 57u, 65u, 90u, 97u, 122u, 9u, 10u, 
	13u, 32u, 33u, 34u, 37u, 38u, 40u, 41u, 
	42u, 43u, 44u, 45u, 46u, 47u, 48u, 58u, 
	59u, 60u, 61u, 62u, 63u, 91u, 93u, 94u, 
	95u, 123u, 124u, 125u, 126u, 49u, 57u, 65u, 
	90u, 97u, 122u, 9u, 10u, 13u, 32u, 33u, 
	34u, 37u, 38u, 40u, 41u, 42u, 43u, 44u, 
	45u, 46u, 47u, 48u, 58u, 59u, 60u, 61u, 
	62u, 63u, 91u, 93u, 94u, 95u, 123u, 124u, 
	125u, 126u, 49u, 57u, 65u, 90u, 97u, 122u, 
	9u, 10u, 13u, 32u, 33u, 34u, 37u, 38u, 
	40u, 41u, 42u, 43u, 44u, 45u, 46u, 47u, 
	48u, 58u, 59u, 60u, 61u, 62u, 63u, 91u, 
	93u, 94u, 95u, 123u, 124u, 125u, 126u, 49u, 
	57u, 65u, 90u, 97u, 122u, 9u, 10u, 13u, 
	32u, 33u, 34u, 37u, 38u, 40u, 41u, 42u, 
	43u, 44u, 45u, 46u, 47u, 48u, 58u, 59u, 
	60u, 61u, 62u, 63u, 91u, 93u, 94u, 95u, 
	123u, 124u, 125u, 126u, 49u, 57u, 65u, 90u, 
	97u, 122u, 9u, 10u, 13u, 32u, 33u, 34u, 
	37u, 38u, 40u, 41u, 42u, 43u, 44u, 45u, 
	46u, 47u, 48u, 58u, 59u, 60u, 61u, 62u, 
	63u, 91u, 93u, 94u, 95u, 123u, 124u, 125u, 
	126u, 49u, 57u, 65u, 90u, 97u, 122u, 9u, 
	10u, 13u, 32u, 33u, 34u, 37u, 38u, 40u, 
	41u, 42u, 43u, 44u, 45u, 46u, 47u, 48u, 
	58u, 59u, 60u, 61u, 62u, 63u, 91u, 93u, 
	94u, 95u, 123u, 124u, 125u, 126u, 49u, 57u, 
	65u, 90u, 97u, 122u, 9u, 10u, 13u, 32u, 
	33u, 34u, 37u, 38u, 40u, 41u, 42u, 43u, 
	44u, 45u, 46u, 47u, 48u, 58u, 59u, 60u, 
	61u, 62u, 63u, 91u, 93u, 94u, 95u, 123u, 
	124u, 125u, 126u, 49u, 57u, 65u, 90u, 97u, 
	122u, 9u, 10u, 13u, 32u, 33u, 34u, 37u, 
	38u, 40u, 41u, 42u, 43u, 44u, 45u, 46u, 
	47u, 48u, 58u, 59u, 60u, 61u, 62u, 63u, 
	91u, 93u, 94u, 95u, 123u, 124u, 125u, 126u, 
	49u, 57u, 65u, 90u, 97u, 122u, 9u, 10u, 
	13u, 32u, 33u, 34u, 37u, 38u, 40u, 41u, 
	42u, 43u, 44u, 45u, 46u, 47u, 48u, 58u, 
	59u, 60u, 61u, 62u, 63u, 91u, 93u, 94u, 
	95u, 123u, 124u, 125u, 126u, 49u, 57u, 65u, 
	90u, 97u, 122u, 9u, 10u, 13u, 32u, 33u, 
	34u, 37u, 38u, 40u, 41u, 42u, 43u, 44u, 
	45u, 46u, 47u, 48u, 58u, 59u, 60u, 61u, 
	62u, 63u, 91u, 93u, 94u, 95u, 123u, 124u, 
	125u, 126u, 49u, 57u, 65u, 90u, 97u, 122u, 
	9u, 10u, 13u, 32u, 33u, 34u, 37u, 38u, 
	40u, 41u, 42u, 43u, 44u, 45u, 46u, 47u, 
	48u, 58u, 59u, 60u, 61u, 62u, 63u, 91u, 
	93u, 94u, 95u, 123u, 124u, 125u, 126u, 49u, 
	57u, 65u, 90u, 97u, 122u, 9u, 10u, 13u, 
	32u, 33u, 34u, 37u, 38u, 40u, 41u, 42u, 
	43u, 44u, 45u, 46u, 47u, 48u, 58u, 59u, 
	60u, 61u, 62u, 63u, 91u, 93u, 94u, 95u, 
	123u, 124u, 125u, 126u, 49u, 57u, 65u, 90u, 
	97u, 122u, 9u, 10u, 13u, 32u, 33u, 34u, 
	37u, 38u, 40u, 41u, 42u, 43u, 44u, 45u, 
	46u, 47u, 48u, 58u, 59u, 60u, 61u, 62u, 
	63u, 91u, 93u, 94u, 95u, 123u, 124u, 125u, 
	126u, 49u, 57u, 65u, 90u, 97u, 122u, 9u, 
	10u, 13u, 32u, 33u, 34u, 37u, 38u, 40u, 
	41u, 42u, 43u, 44u, 45u, 46u, 47u, 48u, 
	58u, 59u, 60u, 61u, 62u, 63u, 91u, 93u, 
	94u, 95u, 123u, 124u, 125u, 126u, 49u, 57u, 
	65u, 90u, 97u, 122u, 9u, 10u, 13u, 32u, 
	33u, 34u, 37u, 38u, 40u, 41u, 42u, 43u, 
	44u, 45u, 46u, 47u, 48u, 58u, 59u, 60u, 
	61u, 62u, 63u, 91u, 93u, 94u, 95u, 123u, 
	124u, 125u, 126u, 49u, 57u, 65u, 90u, 97u, 
	122u, 9u, 10u, 13u, 32u, 33u, 34u, 37u, 
	38u, 40u, 41u, 42u, 43u, 44u, 45u, 46u, 
	47u, 48u, 58u, 59u, 60u, 61u, 62u, 63u, 
	91u, 93u, 94u, 95u, 123u, 124u, 125u, 126u, 
	49u, 57u, 65u, 90u, 97u, 122u, 9u, 10u, 
	13u, 32u, 33u, 34u, 37u, 38u, 40u, 41u, 
	42u, 43u, 44u, 45u, 46u, 47u, 48u, 58u, 
	59u, 60u, 61u, 62u, 63u, 69u, 91u, 93u, 
	94u, 95u, 101u, 120u, 123u, 124u, 125u, 126u, 
	49u, 57u, 65u, 90u, 97u, 122u, 9u, 10u, 
	13u, 32u, 33u, 34u, 37u, 38u, 40u, 41u, 
	42u, 43u, 44u, 45u, 46u, 47u, 58u, 59u, 
	60u, 61u, 62u, 63u, 69u, 91u, 93u, 94u, 
	95u, 101u, 123u, 124u, 125u, 126u, 48u, 57u, 
	65u, 90u, 97u, 122u, 9u, 10u, 13u, 32u, 
	33u, 34u, 37u, 38u, 40u, 41u, 42u, 43u, 
	44u, 45u, 46u, 47u, 48u, 58u, 59u, 60u, 
	61u, 62u, 63u, 91u, 93u, 94u, 95u, 123u, 
	124u, 125u, 126u, 49u, 57u, 65u, 90u, 97u, 
	122u, 9u, 10u, 13u, 32u, 33u, 34u, 37u, 
	38u, 40u, 41u, 42u, 43u, 44u, 45u, 46u, 
	47u, 58u, 59u, 60u, 61u, 62u, 63u, 69u, 
	91u, 93u, 94u, 95u, 101u, 123u, 124u, 125u, 
	126u, 48u, 57u, 65u, 90u, 97u, 122u, 9u, 
	10u, 13u, 32u, 33u, 34u, 37u, 38u, 40u, 
	41u, 42u, 43u, 44u, 45u, 46u, 47u, 48u, 
	58u, 59u, 60u, 61u, 62u, 63u, 91u, 93u, 
	94u, 95u, 123u, 124u, 125u, 126u, 49u, 57u, 
	65u, 90u, 97u, 122u, 9u, 10u, 13u, 32u, 
	33u, 34u, 37u, 38u, 40u, 41u, 42u, 43u, 
	44u, 45u, 46u, 47u, 48u, 58u, 59u, 60u, 
	61u, 62u, 63u, 91u, 93u, 94u, 95u, 123u, 
	124u, 125u, 126u, 49u, 57u, 65u, 90u, 97u, 
	122u, 9u, 10u, 13u, 32u, 33u, 34u, 37u, 
	38u, 40u, 41u, 42u, 43u, 44u, 45u, 46u, 
	47u, 48u, 58u, 59u, 60u, 61u, 62u, 63u, 
	91u, 93u, 94u, 95u, 123u, 124u, 125u, 126u, 
	49u, 57u, 65u, 90u, 97u, 122u, 9u, 10u, 
	13u, 32u, 33u, 34u, 37u, 38u, 40u, 41u, 
	42u, 43u, 44u, 45u, 46u, 47u, 48u, 58u, 
	59u, 60u, 61u, 62u, 63u, 91u, 93u, 94u, 
	95u, 123u, 124u, 125u, 126u, 49u, 57u, 65u, 
	90u, 97u, 122u, 9u, 10u, 13u, 32u, 33u, 
	34u, 37u, 38u, 40u, 41u, 42u, 43u, 44u, 
	45u, 46u, 47u, 48u, 58u, 59u, 60u, 61u, 
	62u, 63u, 91u, 93u, 94u, 95u, 123u, 124u, 
	125u, 126u, 49u, 57u, 65u, 90u, 97u, 122u, 
	9u, 10u, 13u, 32u, 33u, 34u, 37u, 38u, 
	40u, 41u, 42u, 43u, 44u, 45u, 46u, 47u, 
	48u, 58u, 59u, 60u, 61u, 62u, 63u, 91u, 
	93u, 94u, 95u, 123u, 124u, 125u, 126u, 49u, 
	57u, 65u, 90u, 97u, 122u, 9u, 10u, 13u, 
	32u, 33u, 34u, 37u, 38u, 40u, 41u, 42u, 
	43u, 44u, 45u, 46u, 47u, 48u, 58u, 59u, 
	60u, 61u, 62u, 63u, 91u, 93u, 94u, 95u, 
	123u, 124u, 125u, 126u, 49u, 57u, 65u, 90u, 
	97u, 122u, 9u, 10u, 13u, 32u, 33u, 34u, 
	37u, 38u, 40u, 41u, 42u, 43u, 44u, 45u, 
	46u, 47u, 48u, 58u, 59u, 60u, 61u, 62u, 
	63u, 91u, 93u, 94u, 95u, 123u, 124u, 125u, 
	126u, 49u, 57u, 65u, 90u, 97u, 122u, 9u, 
	10u, 13u, 32u, 33u, 34u, 37u, 38u, 40u, 
	41u, 42u, 43u, 44u, 45u, 46u, 47u, 48u, 
	58u, 59u, 60u, 61u, 62u, 63u, 91u, 93u, 
	94u, 95u, 123u, 124u, 125u, 126u, 49u, 57u, 
	65u, 90u, 97u, 122u, 9u, 10u, 13u, 32u, 
	33u, 34u, 37u, 38u, 40u, 41u, 42u, 43u, 
	44u, 45u, 46u, 47u, 58u, 59u, 60u, 61u, 
	62u, 63u, 91u, 93u, 94u, 95u, 123u, 124u, 
	125u, 126u, 48u, 57u, 65u, 90u, 97u, 122u, 
	9u, 10u, 13u, 32u, 33u, 34u, 37u, 38u, 
	40u, 41u, 42u, 43u, 44u, 45u, 46u, 47u, 
	48u, 58u, 59u, 60u, 61u, 62u, 63u, 91u, 
	93u, 94u, 95u, 123u, 124u, 125u, 126u, 49u, 
	57u, 65u, 90u, 97u, 122u, 9u, 10u, 13u, 
	32u, 33u, 34u, 37u, 38u, 40u, 41u, 42u, 
	43u, 44u, 45u, 46u, 47u, 48u, 58u, 59u, 
	60u, 61u, 62u, 63u, 91u, 93u, 94u, 95u, 
	123u, 124u, 125u, 126u, 49u, 57u, 65u, 90u, 
	97u, 122u, 9u, 10u, 13u, 32u, 33u, 34u, 
	37u, 38u, 40u, 41u, 42u, 43u, 44u, 45u, 
	46u, 47u, 48u, 58u, 59u, 60u, 61u, 62u, 
	63u, 91u, 93u, 94u, 95u, 123u, 124u, 125u, 
	126u, 49u, 57u, 65u, 90u, 97u, 122u, 9u, 
	10u, 13u, 32u, 33u, 34u, 37u, 38u, 40u, 
	41u, 42u, 43u, 44u, 45u, 46u, 47u, 48u, 
	58u, 59u, 60u, 61u, 62u, 63u, 91u, 93u, 
	94u, 95u, 123u, 124u, 125u, 126u, 49u, 57u, 
	65u, 90u, 97u, 122u, 9u, 10u, 13u, 32u, 
	33u, 34u, 37u, 38u, 40u, 41u, 42u, 43u, 
	44u, 45u, 46u, 47u, 48u, 58u, 59u, 60u, 
	61u, 62u, 63u, 91u, 93u, 94u, 95u, 123u, 
	124u, 125u, 126u, 49u, 57u, 65u, 90u, 97u, 
	122u, 9u, 10u, 13u, 32u, 33u, 34u, 37u, 
	38u, 40u, 41u, 42u, 43u, 44u, 45u, 46u, 
	47u, 48u, 58u, 59u, 60u, 61u, 62u, 63u, 
	91u, 93u, 94u, 95u, 123u, 124u, 125u, 126u, 
	49u, 57u, 65u, 90u, 97u, 122u, 9u, 10u, 
	13u, 32u, 33u, 34u, 37u, 38u, 40u, 41u, 
	42u, 43u, 44u, 45u, 46u, 47u, 48u, 58u, 
	59u, 60u, 61u, 62u, 63u, 91u, 93u, 94u, 
	95u, 123u, 124u, 125u, 126u, 49u, 57u, 65u, 
	90u, 97u, 122u, 9u, 10u, 13u, 32u, 33u, 
	34u, 37u, 38u, 40u, 41u, 42u, 43u, 44u, 
	45u, 46u, 47u, 48u, 58u, 59u, 60u, 61u, 
	62u, 63u, 91u, 93u, 94u, 95u, 123u, 124u, 
	125u, 126u, 49u, 57u, 65u, 90u, 97u, 122u, 
	9u, 10u, 13u, 32u, 33u, 34u, 37u, 38u, 
	40u, 41u, 42u, 43u, 44u, 45u, 46u, 47u, 
	48u, 58u, 59u, 60u, 61u, 62u, 63u, 91u, 
	93u, 94u, 95u, 116u, 123u, 124u, 125u, 126u, 
	49u, 57u, 65u, 90u, 97u, 122u, 9u, 10u, 
	13u, 32u, 33u, 34u, 37u, 38u, 40u, 41u, 
	42u, 43u, 44u, 45u, 46u, 47u, 48u, 58u, 
	59u, 60u, 61u, 62u, 63u, 91u, 93u, 94u, 
	95u, 123u, 124u, 125u, 126u, 49u, 57u, 65u, 
	90u, 97u, 122u, 9u, 10u, 13u, 32u, 33u, 
	34u, 37u, 38u, 40u, 41u, 42u, 43u, 44u, 
	45u, 46u, 47u, 48u, 58u, 59u, 60u, 61u, 
	62u, 63u, 91u, 93u, 94u, 95u, 123u, 124u, 
	125u, 126u, 49u, 57u, 65u, 90u, 97u, 122u, 
	9u, 10u, 13u, 32u, 33u, 34u, 37u, 38u, 
	40u, 41u, 42u, 43u, 44u, 45u, 46u, 47u, 
	48u, 58u, 59u, 60u, 61u, 62u, 63u, 91u, 
	93u, 94u, 95u, 123u, 124u, 125u, 126u, 49u, 
	57u, 65u, 90u, 97u, 122u, 9u, 10u, 13u, 
	32u, 33u, 34u, 37u, 38u, 40u, 41u, 42u, 
	43u, 44u, 45u, 46u, 47u, 48u, 58u, 59u, 
	60u, 61u, 62u, 63u, 91u, 93u, 94u, 95u, 
	123u, 124u, 125u, 126u, 49u, 57u, 65u, 90u, 
	97u, 122u, 9u, 10u, 13u, 32u, 33u, 34u, 
	37u, 38u, 40u, 41u, 42u, 43u, 44u, 45u, 
	46u, 47u, 48u, 58u, 59u, 60u, 61u, 62u, 
	63u, 91u, 93u, 94u, 95u, 123u, 124u, 125u, 
	126u, 49u, 57u, 65u, 90u, 97u, 122u, 9u, 
	10u, 13u, 32u, 33u, 34u, 37u, 38u, 40u, 
	41u, 42u, 43u, 44u, 45u, 46u, 47u, 48u, 
	58u, 59u, 60u, 61u, 62u, 63u, 91u, 93u, 
	94u, 95u, 123u, 124u, 125u, 126u, 49u, 57u, 
	65u, 90u, 97u, 122u, 9u, 10u, 13u, 32u, 
	33u, 34u, 37u, 38u, 40u, 41u, 42u, 43u, 
	44u, 45u, 46u, 47u, 48u, 58u, 59u, 60u, 
	61u, 62u, 63u, 91u, 93u, 94u, 95u, 123u, 
	124u, 125u, 126u, 49u, 57u, 65u, 90u, 97u, 
	122u, 9u, 10u, 13u, 32u, 33u, 34u, 37u, 
	38u, 40u, 41u, 42u, 43u, 44u, 45u, 46u, 
	47u, 48u, 58u, 59u, 60u, 61u, 62u, 63u, 
	91u, 93u, 94u, 95u, 123u, 124u, 125u, 126u, 
	49u, 57u, 65u, 90u, 97u, 122u, 9u, 10u, 
	13u, 32u, 33u, 34u, 37u, 38u, 40u, 41u, 
	42u, 43u, 44u, 45u, 46u, 47u, 48u, 58u, 
	59u, 60u, 61u, 62u, 63u, 91u, 93u, 94u, 
	95u, 123u, 124u, 125u, 126u, 49u, 57u, 65u, 
	90u, 97u, 122u, 9u, 10u, 13u, 32u, 33u, 
	34u, 37u, 38u, 40u, 41u, 42u, 43u, 44u, 
	45u, 46u, 47u, 58u, 59u, 60u, 61u, 62u, 
	63u, 91u, 93u, 94u, 95u, 123u, 124u, 125u, 
	126u, 48u, 57u, 65u, 90u, 97u, 122u, 9u, 
	10u, 13u, 32u, 33u, 34u, 37u, 38u, 40u, 
	41u, 42u, 43u, 44u, 45u, 46u, 47u, 48u, 
	58u, 59u, 60u, 61u, 62u, 63u, 91u, 93u, 
	94u, 95u, 123u, 124u, 125u, 126u, 49u, 57u, 
	65u, 90u, 97u, 122u, 9u, 10u, 13u, 32u, 
	33u, 34u, 37u, 38u, 40u, 41u, 42u, 43u, 
	44u, 45u, 46u, 47u, 58u, 59u, 60u, 61u, 
	62u, 63u, 80u, 91u, 93u, 94u, 95u, 112u, 
	123u, 124u, 125u, 126u, 48u, 57u, 65u, 70u, 
	71u, 90u, 97u, 102u, 103u, 122u, 9u, 10u, 
	13u, 32u, 33u, 34u, 37u, 38u, 40u, 41u, 
	42u, 43u, 44u, 45u, 46u, 47u, 58u, 59u, 
	60u, 61u, 62u, 63u, 80u, 91u, 93u, 94u, 
	95u, 112u, 123u, 124u, 125u, 126u, 48u, 57u, 
	65u, 70u, 71u, 90u, 97u, 102u, 103u, 122u, 
	9u, 10u, 13u, 32u, 33u, 34u, 37u, 38u, 
	40u, 41u, 42u, 43u, 44u, 45u, 46u, 47u, 
	48u, 58u, 59u, 60u, 61u, 62u, 63u, 91u, 
	93u, 94u, 95u, 123u, 124u, 125u, 126u, 49u, 
	57u, 65u, 90u, 97u, 122u, 9u, 10u, 13u, 
	32u, 33u, 34u, 37u, 38u, 40u, 41u, 42u, 
	43u, 44u, 45u, 46u, 47u, 48u, 58u, 59u, 
	60u, 61u, 62u, 63u, 91u, 93u, 94u, 95u, 
	123u, 124u, 125u, 126u, 49u, 57u, 65u, 90u, 
	97u, 122u, 9u, 10u, 13u, 32u, 33u, 34u, 
	37u, 38u, 40u, 41u, 42u, 43u, 44u, 45u, 
	46u, 47u, 48u, 58u, 59u, 60u, 61u, 62u, 
	63u, 91u, 93u, 94u, 95u, 123u, 124u, 125u, 
	126u, 49u, 57u, 65u, 90u, 97u, 122u, 9u, 
	10u, 13u, 32u, 33u, 34u, 37u, 38u, 40u, 
	41u, 42u, 43u, 44u, 45u, 46u, 47u, 48u, 
	58u, 59u, 60u, 61u, 62u, 63u, 91u, 93u, 
	94u, 95u, 123u, 124u, 125u, 126u, 49u, 57u, 
	65u, 90u, 97u, 122u, 9u, 10u, 13u, 32u, 
	33u, 34u, 37u, 38u, 40u, 41u, 42u, 43u, 
	44u, 45u, 46u, 47u, 48u, 58u, 59u, 60u, 
	61u, 62u, 63u, 91u, 93u, 94u, 95u, 123u, 
	124u, 125u, 126u, 49u, 57u, 65u, 90u, 97u, 
	122u, 9u, 10u, 13u, 32u, 33u, 34u, 37u, 
	38u, 40u, 41u, 42u, 43u, 44u, 45u, 46u, 
	47u, 48u, 58u, 59u, 60u, 61u, 62u, 63u, 
	91u, 93u, 94u, 95u, 123u, 124u, 125u, 126u, 
	49u, 57u, 65u, 90u, 97u, 122u, 9u, 10u, 
	13u, 32u, 33u, 34u, 37u, 38u, 40u, 41u, 
	42u, 43u, 44u, 45u, 46u, 47u, 48u, 58u, 
	59u, 60u, 61u, 62u, 63u, 91u, 93u, 94u, 
	95u, 123u, 124u, 125u, 126u, 49u, 57u, 65u, 
	90u, 97u, 122u, 9u, 10u, 13u, 32u, 33u, 
	34u, 37u, 38u, 40u, 41u, 42u, 43u, 44u, 
	45u, 46u, 47u, 48u, 58u, 59u, 60u, 61u, 
	62u, 63u, 91u, 93u, 94u, 95u, 123u, 124u, 
	125u, 126u, 49u, 57u, 65u, 90u, 97u, 122u, 
	9u, 10u, 13u, 32u, 33u, 34u, 37u, 38u, 
	40u, 41u, 42u, 43u, 44u, 45u, 46u, 47u, 
	48u, 58u, 59u, 60u, 61u, 62u, 63u, 91u, 
	93u, 94u, 95u, 123u, 124u, 125u, 126u, 49u, 
	57u, 65u, 90u, 97u, 122u, 0
};

static const char _lexer_single_lengths[] = {
	0, 4, 3, 3, 3, 4, 2, 0, 
	1, 1, 1, 2, 0, 0, 0, 2, 
	3, 3, 3, 4, 2, 10, 0, 0, 
	0, 0, 0, 0, 0, 0, 2, 31, 
	31, 31, 32, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 34, 32, 31, 
	32, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 30, 31, 31, 31, 31, 31, 
	31, 31, 31, 32, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 30, 31, 32, 
	32, 31, 31, 31, 31, 31, 31, 31, 
	31, 31
};

static const char _lexer_range_lengths[] = {
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 1, 1, 3, 3, 0, 
	0, 0, 0, 0, 0, 0, 3, 3, 
	3, 3, 3, 3, 3, 3, 0, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 5, 
	5, 3, 3, 3, 3, 3, 3, 3, 
	3, 3
};

static const short _lexer_index_offsets[] = {
	0, 0, 5, 9, 13, 17, 22, 25, 
	27, 29, 31, 33, 37, 39, 43, 47, 
	50, 54, 58, 62, 67, 70, 81, 85, 
	89, 93, 97, 101, 105, 109, 113, 116, 
	151, 186, 221, 257, 292, 327, 362, 397, 
	432, 467, 502, 537, 572, 607, 642, 677, 
	712, 747, 782, 817, 852, 887, 925, 961, 
	996, 1032, 1067, 1102, 1137, 1172, 1207, 1242, 
	1277, 1312, 1347, 1381, 1416, 1451, 1486, 1521, 
	1556, 1591, 1626, 1661, 1697, 1732, 1767, 1802, 
	1837, 1872, 1907, 1942, 1977, 2012, 2046, 2081, 
	2119, 2157, 2192, 2227, 2262, 2297, 2332, 2367, 
	2402, 2437
};

static const char _lexer_trans_targs[] = {
	0, 0, 35, 21, 1, 3, 4, 5, 
	2, 3, 4, 5, 2, 3, 4, 5, 
	2, 3, 4, 5, 31, 2, 32, 33, 
	6, 54, 0, 9, 0, 10, 0, 77, 
	0, 12, 12, 85, 0, 85, 0, 87, 
	87, 87, 0, 88, 88, 88, 0, 16, 
	20, 0, 17, 18, 19, 16, 17, 18, 
	19, 16, 17, 18, 19, 16, 17, 18, 
	19, 35, 16, 36, 37, 20, 1, 1, 
	1, 1, 1, 1, 1, 1, 22, 28, 
	0, 23, 23, 23, 0, 24, 24, 24, 
	0, 25, 25, 25, 0, 26, 26, 26, 
	0, 27, 27, 27, 0, 1, 1, 1, 
	0, 29, 29, 29, 0, 1, 1, 1, 
	0, 96, 97, 0, 31, 32, 33, 31, 
	34, 1, 38, 39, 41, 42, 43, 44, 
	46, 47, 49, 52, 53, 55, 57, 58, 
	61, 63, 65, 67, 68, 69, 66, 71, 
	72, 74, 75, 56, 66, 66, 0, 31, 
	32, 33, 31, 34, 1, 38, 39, 41, 
	42, 43, 44, 46, 47, 49, 52, 53, 
	55, 57, 58, 61, 63, 65, 67, 68, 
	69, 66, 71, 72, 74, 75, 56, 66, 
	66, 0, 31, 32, 33, 31, 34, 1, 
	38, 39, 41, 42, 43, 44, 46, 47, 
	49, 52, 53, 55, 57, 58, 61, 63, 
	65, 67, 68, 69, 66, 71, 72, 74, 
	75, 56, 66, 66, 0, 31, 32, 33, 
	31, 34, 1, 38, 39, 41, 42, 43, 
	44, 46, 47, 49, 52, 53, 55, 57, 
	58, 95, 63, 65, 67, 68, 69, 66, 
	30, 71, 72, 74, 75, 56, 66, 66, 
	0, 35, 36, 37, 35, 34, 1, 38, 
	39, 41, 42, 43, 44, 46, 47, 49, 
	15, 53, 55, 57, 58, 61, 63, 65, 
	67, 68, 69, 66, 71, 72, 74, 75, 
	56, 66, 66, 0, 35, 36, 37, 35, 
	34, 1, 38, 39, 41, 42, 43, 44, 
	46, 47, 49, 15, 53, 55, 57, 58, 
	61, 63, 65, 67, 68, 69, 66, 71, 
	72, 74, 75, 56, 66, 66, 0, 35, 
	36, 37, 35, 34, 1, 38, 39, 41, 
	42, 43, 44, 46, 47, 49, 15, 53, 
	55, 57, 58, 61, 63, 65, 67, 68, 
	69, 66, 71, 72, 74, 75, 56, 66, 
	66, 0, 31, 32, 33, 31, 34, 1, 
	38, 39, 41, 42, 43, 44, 46, 47, 
	49, 52, 53, 55, 57, 58, 94, 63, 
	65, 67, 68, 69, 66, 71, 72, 74, 
	75, 56, 66, 66, 0, 31, 32, 33, 
	31, 34, 1, 38, 40, 41, 42, 43, 
	44, 46, 47, 49, 52, 53, 55, 57, 
	58, 93, 63, 65, 67, 68, 69, 66, 
	71, 72, 74, 75, 56, 66, 66, 0, 
	31, 32, 33, 31, 34, 1, 38, 39, 
	41, 42, 43, 44, 46, 47, 49, 52, 
	53, 55, 57, 58, 61, 63, 65, 67, 
	68, 69, 66, 71, 72, 74, 75, 56, 
	66, 66, 0, 31, 32, 33, 31, 34, 
	1, 38, 39, 41, 42, 43, 44, 46, 
	47, 49, 52, 53, 55, 57, 58, 61, 
	63, 65, 67, 68, 69, 66, 71, 72, 
	74, 75, 56, 66, 66, 0, 31, 32, 
	33, 31, 34, 1, 38, 39, 41, 42, 
	43, 44, 46, 47, 49, 52, 53, 55, 
	57, 58, 61, 63, 65, 67, 68, 69, 
	66, 71, 72, 74, 75, 56, 66, 66, 
	0, 31, 32, 33, 31, 34, 1, 38, 
	39, 41, 42, 43, 44, 46, 47, 49, 
	52, 53, 55, 57, 58, 92, 63, 65, 
	67, 68, 69, 66, 71, 72, 74, 75, 
	56, 66, 66, 0, 31, 32, 33, 31, 
	34, 1, 38, 39, 41, 42, 43, 45, 
	46, 47, 49, 52, 53, 55, 57, 58, 
	91, 63, 65, 67, 68, 69, 66, 71, 
	72, 74, 75, 56, 66, 66, 0, 31, 
	32, 33, 31, 34, 1, 38, 39, 41, 
	42, 43, 44, 46, 47, 49, 52, 53, 
	55, 57, 58, 61, 63, 65, 67, 68, 
	69, 66, 71, 72, 74, 75, 56, 66, 
	66, 0, 31, 32, 33, 31, 34, 1, 
	38, 39, 41, 42, 43, 44, 46, 47, 
	49, 52, 53, 55, 57, 58, 61, 63, 
	65, 67, 68, 69, 66, 71, 72, 74, 
	75, 56, 66, 66, 0, 31, 32, 33, 
	31, 34, 1, 38, 39, 41, 42, 43, 
	44, 46, 48, 49, 52, 53, 55, 57, 
	58, 90, 63, 65, 67, 68, 69, 66, 
	71, 72, 74, 75, 56, 66, 66, 0, 
	31, 32, 33, 31, 34, 1, 38, 39, 
	41, 42, 43, 44, 46, 47, 49, 52, 
	53, 55, 57, 58, 61, 63, 65, 67, 
	68, 69, 66, 71, 72, 74, 75, 56, 
	66, 66, 0, 31, 32, 33, 31, 34, 
	1, 38, 39, 41, 42, 43, 44, 46, 
	47, 50, 52, 53, 55, 57, 58, 61, 
	63, 65, 67, 68, 69, 66, 71, 72, 
	74, 75, 56, 66, 66, 0, 31, 32, 
	33, 31, 34, 1, 38, 39, 41, 42, 
	43, 44, 46, 47, 51, 52, 53, 55, 
	57, 58, 61, 63, 65, 67, 68, 69, 
	66, 71, 72, 74, 75, 56, 66, 66, 
	0, 31, 32, 33, 31, 34, 1, 38, 
	39, 41, 42, 43, 44, 46, 47, 49, 
	52, 53, 55, 57, 58, 61, 63, 65, 
	67, 68, 69, 66, 71, 72, 74, 75, 
	56, 66, 66, 0, 31, 32, 33, 31, 
	34, 1, 38, 39, 41, 42, 2, 44, 
	46, 47, 49, 6, 53, 55, 57, 58, 
	89, 63, 65, 67, 68, 69, 66, 71, 
	72, 74, 75, 56, 66, 66, 0, 31, 
	32, 33, 31, 34, 1, 38, 39, 41, 
	42, 43, 44, 46, 47, 7, 52, 53, 
	55, 57, 58, 61, 63, 65, 11, 67, 
	68, 69, 66, 11, 13, 71, 72, 74, 
	75, 56, 66, 66, 0, 31, 32, 33, 
	31, 34, 1, 38, 39, 41, 42, 43, 
	44, 46, 47, 49, 52, 55, 57, 58, 
	61, 63, 65, 11, 67, 68, 69, 66, 
	11, 71, 72, 74, 75, 54, 66, 66, 
	0, 31, 32, 33, 31, 34, 1, 38, 
	39, 41, 42, 43, 44, 46, 47, 49, 
	52, 53, 86, 57, 58, 61, 63, 65, 
	67, 68, 69, 66, 71, 72, 74, 75, 
	56, 66, 66, 0, 31, 32, 33, 31, 
	34, 1, 38, 39, 41, 42, 43, 44, 
	46, 47, 7, 52, 55, 57, 58, 61, 
	63, 65, 11, 67, 68, 69, 66, 11, 
	71, 72, 74, 75, 56, 66, 66, 0, 
	31, 32, 33, 31, 34, 1, 38, 39, 
	41, 42, 43, 44, 46, 47, 49, 52, 
	53, 55, 57, 58, 61, 63, 65, 67, 
	68, 69, 66, 71, 72, 74, 75, 56, 
	66, 66, 0, 31, 32, 33, 31, 34, 
	1, 38, 39, 41, 42, 43, 44, 46, 
	47, 49, 52, 53, 55, 57, 59, 84, 
	63, 65, 67, 68, 69, 66, 71, 72, 
	74, 75, 56, 66, 66, 0, 31, 32, 
	33, 31, 34, 1, 38, 39, 41, 42, 
	43, 44, 46, 47, 49, 52, 53, 55, 
	57, 58, 60, 63, 65, 67, 68, 69, 
	66, 71, 72, 74, 75, 56, 66, 66, 
	0, 31, 32, 33, 31, 34, 1, 38, 
	39, 41, 42, 43, 44, 46, 47, 49, 
	52, 53, 55, 57, 58, 61, 63, 65, 
	67, 68, 69, 66, 71, 72, 74, 75, 
	56, 66, 66, 0, 31, 32, 33, 31, 
	34, 1, 38, 39, 41, 42, 43, 44, 
	46, 47, 49, 52, 53, 55, 57, 58, 
	62, 63, 65, 67, 68, 69, 66, 71, 
	72, 74, 75, 56, 66, 66, 0, 31, 
	32, 33, 31, 34, 1, 38, 39, 41, 
	42, 43, 44, 46, 47, 49, 52, 53, 
	55, 57, 58, 61, 63, 65, 67, 68, 
	69, 66, 71, 72, 74, 75, 56, 66, 
	66, 0, 31, 32, 33, 31, 34, 1, 
	38, 39, 41, 42, 43, 44, 46, 47, 
	49, 52, 53, 55, 57, 58, 64, 80, 
	65, 67, 68, 69, 66, 71, 72, 74, 
	75, 56, 66, 66, 0, 31, 32, 33, 
	31, 34, 1, 38, 39, 41, 42, 43, 
	44, 46, 47, 49, 52, 53, 55, 57, 
	58, 61, 63, 65, 67, 68, 69, 66, 
	71, 72, 74, 75, 56, 66, 66, 0, 
	31, 32, 33, 31, 34, 1, 38, 39, 
	41, 42, 43, 44, 46, 47, 49, 52, 
	53, 55, 57, 58, 61, 63, 65, 67, 
	68, 69, 66, 71, 72, 74, 75, 56, 
	66, 66, 0, 31, 32, 33, 31, 34, 
	1, 38, 39, 41, 42, 43, 44, 46, 
	47, 49, 52, 55, 57, 58, 61, 63, 
	65, 67, 68, 69, 66, 71, 72, 74, 
	75, 66, 66, 66, 0, 31, 32, 33, 
	31, 34, 1, 38, 39, 41, 42, 43, 
	44, 46, 47, 49, 52, 53, 55, 57, 
	58, 61, 63, 65, 67, 68, 69, 66, 
	71, 72, 74, 75, 56, 66, 66, 0, 
	31, 32, 33, 31, 34, 1, 38, 39, 
	41, 42, 43, 44, 46, 47, 49, 52, 
	53, 55, 57, 58, 61, 63, 65, 67, 
	68, 69, 66, 71, 72, 74, 75, 56, 
	66, 66, 0, 31, 32, 33, 31, 34, 
	1, 38, 39, 41, 42, 43, 44, 46, 
	47, 49, 52, 53, 55, 57, 58, 70, 
	63, 65, 67, 68, 79, 66, 71, 72, 
	74, 75, 56, 66, 66, 0, 31, 32, 
	33, 31, 34, 1, 38, 39, 41, 42, 
	43, 44, 46, 47, 49, 52, 53, 55, 
	57, 58, 61, 63, 65, 67, 68, 69, 
	66, 71, 72, 74, 75, 56, 66, 66, 
	0, 31, 32, 33, 31, 34, 1, 38, 
	39, 41, 42, 43, 44, 46, 47, 49, 
	52, 53, 55, 57, 58, 61, 63, 65, 
	67, 68, 69, 66, 71, 72, 74, 75, 
	56, 66, 66, 0, 31, 32, 33, 31, 
	34, 1, 38, 39, 41, 42, 43, 44, 
	46, 47, 49, 52, 53, 55, 57, 58, 
	73, 63, 65, 67, 68, 69, 66, 71, 
	78, 74, 75, 56, 66, 66, 0, 31, 
	32, 33, 31, 34, 1, 38, 39, 41, 
	42, 43, 44, 46, 47, 49, 52, 53, 
	55, 57, 58, 61, 63, 65, 67, 68, 
	69, 66, 71, 72, 74, 75, 56, 66, 
	66, 0, 31, 32, 33, 31, 34, 1, 
	38, 39, 41, 42, 43, 44, 46, 47, 
	49, 52, 53, 55, 57, 58, 61, 63, 
	65, 67, 68, 69, 66, 71, 72, 74, 
	75, 56, 66, 66, 0, 31, 32, 33, 
	31, 34, 1, 38, 39, 41, 42, 43, 
	44, 46, 47, 49, 52, 53, 55, 57, 
	58, 76, 63, 65, 67, 68, 69, 66, 
	8, 71, 72, 74, 75, 56, 66, 66, 
	0, 31, 32, 33, 31, 34, 1, 38, 
	39, 41, 42, 43, 44, 46, 47, 49, 
	52, 53, 55, 57, 58, 61, 63, 65, 
	67, 68, 69, 66, 71, 72, 74, 75, 
	56, 66, 66, 0, 31, 32, 33, 31, 
	34, 1, 38, 39, 41, 42, 43, 44, 
	46, 47, 49, 52, 53, 55, 57, 58, 
	61, 63, 65, 67, 68, 69, 66, 71, 
	72, 74, 75, 56, 66, 66, 0, 31, 
	32, 33, 31, 34, 1, 38, 39, 41, 
	42, 43, 44, 46, 47, 49, 52, 53, 
	55, 57, 58, 61, 63, 65, 67, 68, 
	69, 66, 71, 72, 74, 75, 56, 66, 
	66, 0, 31, 32, 33, 31, 34, 1, 
	38, 39, 41, 42, 43, 44, 46, 47, 
	49, 52, 53, 55, 57, 58, 61, 63, 
	65, 67, 68, 69, 66, 71, 72, 74, 
	75, 56, 66, 66, 0, 31, 32, 33, 
	31, 34, 1, 38, 39, 41, 42, 43, 
	44, 46, 47, 49, 52, 53, 55, 57, 
	58, 81, 82, 65, 67, 68, 69, 66, 
	71, 72, 74, 75, 56, 66, 66, 0, 
	31, 32, 33, 31, 34, 1, 38, 39, 
	41, 42, 43, 44, 46, 47, 49, 52, 
	53, 55, 57, 58, 61, 63, 65, 67, 
	68, 69, 66, 71, 72, 74, 75, 56, 
	66, 66, 0, 31, 32, 33, 31, 34, 
	1, 38, 39, 41, 42, 43, 44, 46, 
	47, 49, 52, 53, 55, 57, 58, 83, 
	63, 65, 67, 68, 69, 66, 71, 72, 
	74, 75, 56, 66, 66, 0, 31, 32, 
	33, 31, 34, 1, 38, 39, 41, 42, 
	43, 44, 46, 47, 49, 52, 53, 55, 
	57, 58, 61, 63, 65, 67, 68, 69, 
	66, 71, 72, 74, 75, 56, 66, 66, 
	0, 31, 32, 33, 31, 34, 1, 38, 
	39, 41, 42, 43, 44, 46, 47, 49, 
	52, 53, 55, 57, 58, 61, 63, 65, 
	67, 68, 69, 66, 71, 72, 74, 75, 
	56, 66, 66, 0, 31, 32, 33, 31, 
	34, 1, 38, 39, 41, 42, 43, 44, 
	46, 47, 49, 52, 55, 57, 58, 61, 
	63, 65, 67, 68, 69, 66, 71, 72, 
	74, 75, 85, 66, 66, 0, 31, 32, 
	33, 31, 34, 1, 38, 39, 41, 42, 
	43, 44, 46, 47, 49, 52, 53, 55, 
	57, 58, 61, 63, 65, 67, 68, 69, 
	66, 71, 72, 74, 75, 56, 66, 66, 
	0, 31, 32, 33, 31, 34, 1, 38, 
	39, 41, 42, 43, 44, 46, 47, 14, 
	52, 55, 57, 58, 61, 63, 65, 11, 
	67, 68, 69, 66, 11, 71, 72, 74, 
	75, 87, 87, 66, 87, 66, 0, 31, 
	32, 33, 31, 34, 1, 38, 39, 41, 
	42, 43, 44, 46, 47, 49, 52, 55, 
	57, 58, 61, 63, 65, 11, 67, 68, 
	69, 66, 11, 71, 72, 74, 75, 88, 
	88, 66, 88, 66, 0, 31, 32, 33, 
	31, 34, 1, 38, 39, 41, 42, 43, 
	44, 46, 47, 49, 52, 53, 55, 57, 
	58, 61, 63, 65, 67, 68, 69, 66, 
	71, 72, 74, 75, 56, 66, 66, 0, 
	31, 32, 33, 31, 34, 1, 38, 39, 
	41, 42, 43, 44, 46, 47, 49, 52, 
	53, 55, 57, 58, 61, 63, 65, 67, 
	68, 69, 66, 71, 72, 74, 75, 56, 
	66, 66, 0, 31, 32, 33, 31, 34, 
	1, 38, 39, 41, 42, 43, 44, 46, 
	47, 49, 52, 53, 55, 57, 58, 61, 
	63, 65, 67, 68, 69, 66, 71, 72, 
	74, 75, 56, 66, 66, 0, 31, 32, 
	33, 31, 34, 1, 38, 39, 41, 42, 
	43, 44, 46, 47, 49, 52, 53, 55, 
	57, 58, 61, 63, 65, 67, 68, 69, 
	66, 71, 72, 74, 75, 56, 66, 66, 
	0, 31, 32, 33, 31, 34, 1, 38, 
	39, 41, 42, 43, 44, 46, 47, 49, 
	52, 53, 55, 57, 58, 61, 63, 65, 
	67, 68, 69, 66, 71, 72, 74, 75, 
	56, 66, 66, 0, 31, 32, 33, 31, 
	34, 1, 38, 39, 41, 42, 43, 44, 
	46, 47, 49, 52, 53, 55, 57, 58, 
	61, 63, 65, 67, 68, 69, 66, 71, 
	72, 74, 75, 56, 66, 66, 0, 31, 
	32, 33, 31, 34, 1, 38, 39, 41, 
	42, 43, 44, 46, 47, 49, 52, 53, 
	55, 57, 58, 61, 63, 65, 67, 68, 
	69, 66, 71, 72, 74, 75, 56, 66, 
	66, 0, 31, 32, 33, 31, 34, 1, 
	38, 39, 41, 42, 43, 44, 46, 47, 
	49, 52, 53, 55, 57, 58, 61, 63, 
	65, 67, 68, 69, 66, 71, 72, 74, 
	75, 56, 66, 66, 0, 31, 32, 33, 
	31, 34, 1, 38, 39, 41, 42, 43, 
	44, 46, 47, 49, 52, 53, 55, 57, 
	58, 61, 63, 65, 67, 68, 69, 66, 
	71, 72, 74, 75, 56, 66, 66, 0, 
	0
};

static const short _lexer_trans_actions[] = {
	190, 190, 0, 35, 5, 0, 0, 0, 
	0, 1, 1, 1, 1, 0, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 5, 190, 0, 190, 0, 190, 0, 
	190, 5, 5, 5, 190, 5, 190, 5, 
	5, 5, 190, 5, 5, 5, 190, 0, 
	0, 190, 0, 0, 0, 0, 1, 1, 
	1, 1, 0, 1, 1, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 7, 11, 
	9, 13, 15, 17, 19, 21, 0, 0, 
	190, 37, 41, 39, 190, 43, 47, 45, 
	190, 49, 53, 51, 190, 55, 59, 57, 
	190, 61, 65, 63, 190, 193, 199, 196, 
	190, 23, 27, 25, 190, 29, 33, 31, 
	190, 0, 0, 190, 0, 0, 0, 0, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 187, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 187, 3, 
	3, 3, 3, 187, 187, 187, 190, 1, 
	1, 1, 1, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 373, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 373, 181, 181, 181, 181, 373, 373, 
	373, 377, 1, 0, 1, 1, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 373, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 373, 181, 181, 181, 
	181, 373, 373, 373, 377, 75, 75, 75, 
	75, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 401, 214, 214, 
	214, 0, 214, 214, 214, 214, 214, 401, 
	0, 214, 214, 214, 214, 401, 401, 401, 
	190, 0, 0, 0, 0, 211, 0, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	0, 397, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 397, 211, 211, 211, 211, 
	397, 397, 397, 190, 1, 1, 1, 1, 
	381, 1, 381, 381, 381, 381, 381, 381, 
	381, 381, 381, 1, 618, 381, 381, 381, 
	381, 381, 381, 381, 381, 381, 618, 381, 
	381, 381, 381, 618, 618, 618, 377, 1, 
	0, 1, 1, 381, 1, 381, 381, 381, 
	381, 381, 381, 381, 381, 381, 1, 618, 
	381, 381, 381, 381, 381, 381, 381, 381, 
	381, 618, 381, 381, 381, 381, 618, 618, 
	618, 377, 77, 77, 77, 77, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 405, 217, 217, 217, 0, 217, 
	217, 217, 217, 217, 405, 217, 217, 217, 
	217, 405, 405, 405, 190, 79, 79, 79, 
	79, 220, 220, 220, 0, 220, 220, 220, 
	220, 220, 220, 220, 220, 409, 220, 220, 
	220, 0, 220, 220, 220, 220, 220, 409, 
	220, 220, 220, 220, 409, 409, 409, 190, 
	171, 171, 171, 171, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	593, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 593, 358, 358, 358, 358, 593, 
	593, 593, 190, 81, 81, 81, 81, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 413, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 413, 223, 223, 
	223, 223, 413, 413, 413, 190, 83, 83, 
	83, 83, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 417, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	417, 226, 226, 226, 226, 417, 417, 417, 
	190, 85, 85, 85, 85, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 421, 229, 229, 229, 0, 229, 229, 
	229, 229, 229, 421, 229, 229, 229, 229, 
	421, 421, 421, 190, 87, 87, 87, 87, 
	232, 232, 232, 232, 232, 232, 232, 0, 
	232, 232, 232, 232, 425, 232, 232, 232, 
	0, 232, 232, 232, 232, 232, 425, 232, 
	232, 232, 232, 425, 425, 425, 190, 123, 
	123, 123, 123, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 497, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 497, 286, 286, 286, 286, 497, 497, 
	497, 190, 89, 89, 89, 89, 235, 235, 
	235, 235, 235, 235, 235, 235, 235, 235, 
	235, 235, 429, 235, 235, 235, 235, 235, 
	235, 235, 235, 235, 429, 235, 235, 235, 
	235, 429, 429, 429, 190, 91, 91, 91, 
	91, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 0, 238, 238, 433, 238, 238, 
	238, 0, 238, 238, 238, 238, 238, 433, 
	238, 238, 238, 238, 433, 433, 433, 190, 
	125, 125, 125, 125, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	501, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 501, 289, 289, 289, 289, 501, 
	501, 501, 190, 93, 93, 93, 93, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 0, 241, 437, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 437, 241, 241, 
	241, 241, 437, 437, 437, 190, 127, 127, 
	127, 127, 292, 292, 292, 292, 292, 292, 
	292, 292, 292, 292, 0, 292, 505, 292, 
	292, 292, 292, 292, 292, 292, 292, 292, 
	505, 292, 292, 292, 292, 505, 505, 505, 
	190, 179, 179, 179, 179, 370, 370, 370, 
	370, 370, 370, 370, 370, 370, 370, 370, 
	370, 609, 370, 370, 370, 370, 370, 370, 
	370, 370, 370, 609, 370, 370, 370, 370, 
	609, 609, 609, 190, 95, 95, 95, 95, 
	244, 244, 244, 244, 244, 244, 0, 244, 
	244, 244, 244, 0, 441, 244, 244, 244, 
	0, 244, 244, 244, 244, 244, 441, 244, 
	244, 244, 244, 441, 441, 441, 190, 71, 
	71, 71, 71, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 5, 208, 393, 
	208, 208, 208, 208, 208, 208, 5, 208, 
	208, 208, 393, 5, 5, 208, 208, 208, 
	208, 393, 393, 393, 190, 71, 71, 71, 
	71, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 5, 208, 208, 208, 393, 
	5, 208, 208, 208, 208, 5, 393, 393, 
	190, 97, 97, 97, 97, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 445, 0, 247, 247, 247, 247, 247, 
	247, 247, 247, 445, 247, 247, 247, 247, 
	445, 445, 445, 190, 71, 71, 71, 71, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 5, 208, 208, 208, 208, 208, 
	208, 208, 5, 208, 208, 208, 393, 5, 
	208, 208, 208, 208, 5, 393, 393, 190, 
	99, 99, 99, 99, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	449, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 449, 250, 250, 250, 250, 449, 
	449, 449, 190, 101, 101, 101, 101, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 453, 253, 253, 0, 0, 
	253, 253, 253, 253, 253, 453, 253, 253, 
	253, 253, 453, 453, 453, 190, 129, 129, 
	129, 129, 295, 295, 295, 295, 295, 295, 
	295, 295, 295, 295, 295, 295, 509, 295, 
	295, 295, 0, 295, 295, 295, 295, 295, 
	509, 295, 295, 295, 295, 509, 509, 509, 
	190, 165, 165, 165, 165, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 581, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 581, 349, 349, 349, 349, 
	581, 581, 581, 190, 103, 103, 103, 103, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 457, 256, 256, 256, 
	0, 256, 256, 256, 256, 256, 457, 256, 
	256, 256, 256, 457, 457, 457, 190, 139, 
	139, 139, 139, 310, 310, 310, 310, 310, 
	310, 310, 310, 310, 310, 310, 310, 529, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	310, 529, 310, 310, 310, 310, 529, 529, 
	529, 190, 105, 105, 105, 105, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 461, 259, 259, 259, 0, 0, 
	259, 259, 259, 259, 461, 259, 259, 259, 
	259, 461, 461, 461, 190, 141, 141, 141, 
	141, 313, 313, 313, 313, 313, 313, 313, 
	313, 313, 313, 313, 313, 533, 313, 313, 
	313, 313, 313, 313, 313, 313, 313, 533, 
	313, 313, 313, 313, 533, 533, 533, 190, 
	107, 107, 107, 107, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	465, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 465, 262, 262, 262, 262, 465, 
	465, 465, 190, 67, 67, 67, 67, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 5, 202, 202, 202, 
	202, 5, 5, 5, 190, 109, 109, 109, 
	109, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 469, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 469, 
	265, 265, 265, 265, 469, 469, 469, 190, 
	111, 111, 111, 111, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	473, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 473, 268, 268, 268, 268, 473, 
	473, 473, 190, 113, 113, 113, 113, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 477, 271, 271, 271, 0, 
	271, 271, 271, 271, 0, 477, 271, 271, 
	271, 271, 477, 477, 477, 190, 159, 159, 
	159, 159, 340, 340, 340, 340, 340, 340, 
	340, 340, 340, 340, 340, 340, 569, 340, 
	340, 340, 340, 340, 340, 340, 340, 340, 
	569, 340, 340, 340, 340, 569, 569, 569, 
	190, 115, 115, 115, 115, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	274, 481, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 481, 274, 274, 274, 274, 
	481, 481, 481, 190, 117, 117, 117, 117, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 485, 277, 277, 277, 
	0, 277, 277, 277, 277, 277, 485, 277, 
	0, 277, 277, 485, 485, 485, 190, 161, 
	161, 161, 161, 343, 343, 343, 343, 343, 
	343, 343, 343, 343, 343, 343, 343, 573, 
	343, 343, 343, 343, 343, 343, 343, 343, 
	343, 573, 343, 343, 343, 343, 573, 573, 
	573, 190, 119, 119, 119, 119, 280, 280, 
	280, 280, 280, 280, 280, 280, 280, 280, 
	280, 280, 489, 280, 280, 280, 280, 280, 
	280, 280, 280, 280, 489, 280, 280, 280, 
	280, 489, 489, 489, 190, 121, 121, 121, 
	121, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 493, 283, 283, 
	283, 0, 283, 283, 283, 283, 283, 493, 
	0, 283, 283, 283, 283, 493, 493, 493, 
	190, 163, 163, 163, 163, 346, 346, 346, 
	346, 346, 346, 346, 346, 346, 346, 346, 
	346, 577, 346, 346, 346, 346, 346, 346, 
	346, 346, 346, 577, 346, 346, 346, 346, 
	577, 577, 577, 190, 69, 69, 69, 69, 
	205, 205, 205, 205, 205, 205, 205, 205, 
	205, 205, 205, 205, 389, 205, 205, 205, 
	205, 205, 205, 205, 205, 205, 389, 205, 
	205, 205, 205, 389, 389, 389, 190, 175, 
	175, 175, 175, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 364, 364, 601, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 601, 364, 364, 364, 364, 601, 601, 
	601, 190, 173, 173, 173, 173, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 597, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 597, 361, 361, 361, 
	361, 597, 597, 597, 190, 131, 131, 131, 
	131, 298, 298, 298, 298, 298, 298, 298, 
	298, 298, 298, 298, 298, 513, 298, 298, 
	298, 0, 0, 298, 298, 298, 298, 513, 
	298, 298, 298, 298, 513, 513, 513, 190, 
	167, 167, 167, 167, 352, 352, 352, 352, 
	352, 352, 352, 352, 352, 352, 352, 352, 
	585, 352, 352, 352, 352, 352, 352, 352, 
	352, 352, 585, 352, 352, 352, 352, 585, 
	585, 585, 190, 133, 133, 133, 133, 301, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 517, 301, 301, 301, 0, 
	301, 301, 301, 301, 301, 517, 301, 301, 
	301, 301, 517, 517, 517, 190, 169, 169, 
	169, 169, 355, 355, 355, 355, 355, 355, 
	355, 355, 355, 355, 355, 355, 589, 355, 
	355, 355, 355, 355, 355, 355, 355, 355, 
	589, 355, 355, 355, 355, 589, 589, 589, 
	190, 137, 137, 137, 137, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 525, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 525, 307, 307, 307, 307, 
	525, 525, 525, 190, 71, 71, 71, 71, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 393, 208, 208, 
	208, 208, 5, 393, 393, 190, 177, 177, 
	177, 177, 367, 367, 367, 367, 367, 367, 
	367, 367, 367, 367, 367, 367, 605, 367, 
	367, 367, 367, 367, 367, 367, 367, 367, 
	605, 367, 367, 367, 367, 605, 605, 605, 
	190, 71, 71, 71, 71, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 5, 
	208, 208, 208, 208, 208, 208, 208, 5, 
	208, 208, 208, 393, 5, 208, 208, 208, 
	208, 5, 5, 393, 5, 393, 190, 71, 
	71, 71, 71, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 5, 208, 208, 
	208, 393, 5, 208, 208, 208, 208, 5, 
	5, 393, 5, 393, 190, 157, 157, 157, 
	157, 337, 337, 337, 337, 337, 337, 337, 
	337, 337, 337, 337, 337, 565, 337, 337, 
	337, 337, 337, 337, 337, 337, 337, 565, 
	337, 337, 337, 337, 565, 565, 565, 190, 
	155, 155, 155, 155, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	561, 334, 334, 334, 334, 334, 334, 334, 
	334, 334, 561, 334, 334, 334, 334, 561, 
	561, 561, 190, 153, 153, 153, 153, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 557, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 557, 331, 331, 
	331, 331, 557, 557, 557, 190, 151, 151, 
	151, 151, 328, 328, 328, 328, 328, 328, 
	328, 328, 328, 328, 328, 328, 553, 328, 
	328, 328, 328, 328, 328, 328, 328, 328, 
	553, 328, 328, 328, 328, 553, 553, 553, 
	190, 149, 149, 149, 149, 325, 325, 325, 
	325, 325, 325, 325, 325, 325, 325, 325, 
	325, 549, 325, 325, 325, 325, 325, 325, 
	325, 325, 325, 549, 325, 325, 325, 325, 
	549, 549, 549, 190, 147, 147, 147, 147, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 322, 322, 545, 322, 322, 322, 
	322, 322, 322, 322, 322, 322, 545, 322, 
	322, 322, 322, 545, 545, 545, 190, 135, 
	135, 135, 135, 304, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 521, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 521, 304, 304, 304, 304, 521, 521, 
	521, 190, 143, 143, 143, 143, 316, 316, 
	316, 316, 316, 316, 316, 316, 316, 316, 
	316, 316, 537, 316, 316, 316, 316, 316, 
	316, 316, 316, 316, 537, 316, 316, 316, 
	316, 537, 537, 537, 190, 145, 145, 145, 
	145, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 541, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 541, 
	319, 319, 319, 319, 541, 541, 541, 190, 
	0
};

static const short _lexer_eof_actions[] = {
	0, 385, 385, 613, 613, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 613, 613, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 0, 
	1, 1, 75, 73, 184, 184, 77, 79, 
	171, 81, 83, 85, 87, 123, 89, 91, 
	125, 93, 127, 179, 95, 71, 71, 97, 
	71, 99, 101, 129, 165, 103, 139, 105, 
	141, 107, 67, 109, 111, 113, 159, 115, 
	117, 161, 119, 121, 163, 69, 175, 173, 
	131, 167, 133, 169, 137, 71, 177, 71, 
	71, 157, 155, 153, 151, 149, 147, 135, 
	143, 145
};

static const int lexer_start = 31;
static const int lexer_first_final = 31;
static const int lexer_error = 0;

static const int lexer_en_main = 31;


#line 263 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"





template < typename ... arguments_t >
xec_token* xec_parser::make_token( arguments_t ... arguments )
{
    if ( recycle_tokens.size() )
    {
        void* p = recycle_tokens.back();
        recycle_tokens.pop_back();
        return new ( p ) xec_token( arguments ... );
    }
    else
    {
        return new ( alloc ) xec_token( arguments ... );
    }
}



struct xec_keywords
    :   public std::unordered_map< symkey, xec_token_kind >
{
    
    xec_keywords()
    {
        emplace( symkey( "break" ),    XEC_KEYWORD_BREAK );
        emplace( symkey( "case" ),     XEC_KEYWORD_CASE );
        emplace( symkey( "catch" ),    XEC_KEYWORD_CATCH );
        emplace( symkey( "continue" ), XEC_KEYWORD_CONTINUE );
        emplace( symkey( "default" ),  XEC_KEYWORD_DEFAULT );
        emplace( symkey( "delete" ),   XEC_KEYWORD_DELETE );
        emplace( symkey( "do" ),       XEC_KEYWORD_DO );
        emplace( symkey( "else" ),     XEC_KEYWORD_ELSE );
        emplace( symkey( "false" ),    XEC_KEYWORD_FALSE );
        emplace( symkey( "finally" ),  XEC_KEYWORD_FINALLY );
        emplace( symkey( "for" ),      XEC_KEYWORD_FOR );
        emplace( symkey( "if" ),       XEC_KEYWORD_IF );
        emplace( symkey( "new" ),      XEC_KEYWORD_NEW );
        emplace( symkey( "null" ),     XEC_KEYWORD_NULL );
        emplace( symkey( "return" ),   XEC_KEYWORD_RETURN );
        emplace( symkey( "switch" ),   XEC_KEYWORD_SWITCH );
        emplace( symkey( "throw" ),    XEC_KEYWORD_THROW );
        emplace( symkey( "true" ),     XEC_KEYWORD_TRUE );
        emplace( symkey( "try" ),      XEC_KEYWORD_TRY );
        emplace( symkey( "using" ),    XEC_KEYWORD_USING );
        emplace( symkey( "var" ),      XEC_KEYWORD_VAR );
        emplace( symkey( "while" ),    XEC_KEYWORD_WHILE );
        emplace( symkey( "yield" ),    XEC_KEYWORD_YIELD );
        emplace( symkey( "in" ),       XEC_TOKEN_IN );
        emplace( symkey( "is" ),       XEC_TOKEN_IS );
    }
    
};



xec_token* xec_parser::make_identifier( int sloc, region_buffer* data )
{
    static xec_keywords keywords;

    size_t length = data->size();
    const char* identifier = (const char*)data->get();
    symkey key( identifier, length );
    
    // Check for keyword.
    auto i = keywords.find( key );
    if ( i != keywords.end() )
    {
        return make_token( i->second, sloc, i->first.c_str(), i->first.size() );
    }
    
    // Check for existing identifier.
    auto j = identifiers.find( key );
    if ( j != identifiers.end() )
    {
        return make_token( XEC_TOKEN_IDENTIFIER, sloc, j->c_str(), j->size() );
    }

    // New identifier.
    data->append( '\0' );
    identifier = (const char*)data->tearoff();
    identifiers.emplace( key.hash(), identifier, length );
    return make_token( XEC_TOKEN_IDENTIFIER, sloc, identifier, length );

}



static bool encode_utf8( region_buffer* data, uint32_t cp )
{
    if ( cp <= 0x7F )
    {
        data->append( (uint8_t)cp );
        return true;
    }
    else if ( cp <= 0x7FF )
    {
        data->append( (uint8_t)( 0xC0 | ( cp >> 6 & 0x1F ) ) );
        data->append( (uint8_t)( 0x80 | ( cp & 0x3F ) ) );
        return true;
    }
    else if ( cp <= 0xFFFF )
    {
        data->append( (uint8_t)( 0xE0 | ( cp >> 12 & 0x0F ) ) );
        data->append( (uint8_t)( 0x80 | ( cp >> 6 & 0x3F ) ) );
        data->append( (uint8_t)( 0x80 | ( cp & 0x3F ) ) );
        return true;
    }
    else if ( cp <= 0x10FFFF )
    {
        data->append( (uint8_t)( 0xF0 | ( cp >> 18 & 0x07 ) ) );
        data->append( (uint8_t)( 0x80 | ( cp >> 12 & 0x3F ) ) );
        data->append( (uint8_t)( 0x80 | ( cp >> 6 & 0x3F ) ) );
        data->append( (uint8_t)( 0x80 | ( cp & 0x3F ) ) );
        return true;
    }
    else
    {
        return false;
    }
}



bool xec_parser::parse( const char* path )
{
    region_scope rscope( alloc );


    // Default arguments.
    if ( ! script )
    {
        const char* argv[] = { "..." };
        set_arguments( 1, argv );
    }

    
    // Open file.
    this->filename = path;
    FILE* file = fopen( path, "r" );
    if ( ! file )
    {
        diagnostic( 0, "unable to open file" );
        return false;
    }
    
    
    // File state.
    int offset = 0;
    unsigned char* buffer = (unsigned char*)malloc( BUFFER_SIZE );
    
    
    // Token state.
    int sloc = -1;
    int uloc = -1;
    region_buffer data;
    uint32_t temp;


    // Parser state.
    void* parser = XecParseAlloc( malloc );


    // Initialize state machine.
    int cs;
    
    
#line 1331 "xec_parser_ragel.cpp"
	{
	cs = lexer_start;
	}

#line 433 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
    
    
    // Perform lexing.
#define TOKEN( token ) \
    { \
        XecParse( parser, token->kind, token, this ); \
        if ( diagnostics.size() >= ERROR_LIMIT ) \
            goto error; \
    }
#define MTOKEN( ... ) \
    { \
        xec_token* token = make_token( __VA_ARGS__ ); \
        XecParse( parser, token->kind, token, this ); \
        if ( diagnostics.size() >= ERROR_LIMIT ) \
            goto error; \
    }

    bool iseof = false;
    while ( ! iseof )
    {
        size_t read = fread( buffer, 1, BUFFER_SIZE, file );
        iseof = read < BUFFER_SIZE;
        
        if ( iseof && ferror( file ) )
        {
            data.shrink();
            diagnostic( offset, "error reading file" );
            goto error;
        }

        const unsigned char* p      = buffer;
        const unsigned char* pe     = buffer + read;
        const unsigned char* eof    = iseof ? pe : NULL;

        
#line 1372 "xec_parser_ragel.cpp"
	{
	int _klen;
	unsigned int _trans;
	const char *_acts;
	unsigned int _nacts;
	const unsigned char *_keys;

	if ( p == pe )
		goto _test_eof;
	if ( cs == 0 )
		goto _out;
_resume:
	_keys = _lexer_trans_keys + _lexer_key_offsets[cs];
	_trans = _lexer_index_offsets[cs];

	_klen = _lexer_single_lengths[cs];
	if ( _klen > 0 ) {
		const unsigned char *_lower = _keys;
		const unsigned char *_mid;
		const unsigned char *_upper = _keys + _klen - 1;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( (*p) < *_mid )
				_upper = _mid - 1;
			else if ( (*p) > *_mid )
				_lower = _mid + 1;
			else {
				_trans += (unsigned int)(_mid - _keys);
				goto _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _lexer_range_lengths[cs];
	if ( _klen > 0 ) {
		const unsigned char *_lower = _keys;
		const unsigned char *_mid;
		const unsigned char *_upper = _keys + (_klen<<1) - 2;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( (*p) < _mid[0] )
				_upper = _mid - 2;
			else if ( (*p) > _mid[1] )
				_lower = _mid + 2;
			else {
				_trans += (unsigned int)((_mid - _keys)>>1);
				goto _match;
			}
		}
		_trans += _klen;
	}

_match:
	cs = _lexer_trans_targs[_trans];

	if ( _lexer_trans_actions[_trans] == 0 )
		goto _again;

	_acts = _lexer_actions + _lexer_trans_actions[_trans];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 )
	{
		switch ( *_acts++ )
		{
	case 0:
#line 33 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ newlines.push_back( (int)( offset + ( p - buffer ) - 1 ) ); }
	break;
	case 1:
#line 34 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ sloc = (int)( offset + ( p - buffer ) ); data.clear(); }
	break;
	case 2:
#line 35 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ data.append( (char)(*p) ); }
	break;
	case 4:
#line 46 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{
        data.shrink();
        int sloc = (int)( offset + ( p - buffer ) );
        if ( (*p) >= 0x20 && (*p) <= 0x7E )
            diagnostic( sloc, "unexpected character '%c'", (*p) );
        else
            diagnostic( sloc, "unexpected character '\\x%02X'", (*p) );
        if ( diagnostics.size() >= ERROR_LIMIT )
            goto error;
    }
	break;
	case 5:
#line 82 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ data.append( '\"' ); }
	break;
	case 6:
#line 83 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ data.append( '\\' ); }
	break;
	case 7:
#line 84 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ data.append( '/' ); }
	break;
	case 8:
#line 85 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ data.append( '\b' ); }
	break;
	case 9:
#line 86 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ data.append( '\f' ); }
	break;
	case 10:
#line 87 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ data.append( '\n' ); }
	break;
	case 11:
#line 88 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ data.append( '\r' ); }
	break;
	case 12:
#line 89 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ data.append( '\t' ); }
	break;
	case 13:
#line 91 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ temp = ( (*p) - '0' ) << 4; }
	break;
	case 14:
#line 92 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ temp = ( (*p) - 'a' + 0x0A ) << 4; }
	break;
	case 15:
#line 93 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ temp = ( (*p) - 'A' + 0x0A ) << 4; }
	break;
	case 16:
#line 95 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ data.append( (char)( temp | (*p) - '0' ) ); }
	break;
	case 17:
#line 96 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ data.append( (char)( temp | (*p) - 'a' + 0x0A ) ); }
	break;
	case 18:
#line 97 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ data.append( (char)( temp | (*p) - 'A' + 0x0A ) ); }
	break;
	case 19:
#line 101 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{
                    uloc = (int)( offset + ( p - buffer ) );
                }
	break;
	case 20:
#line 104 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ temp = ( (*p) - '0' ) << 20; }
	break;
	case 21:
#line 105 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ temp = ( (*p) - 'a' + 0x0A ) << 20; }
	break;
	case 22:
#line 106 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ temp = ( (*p) - 'A' + 0x0A ) << 20; }
	break;
	case 23:
#line 108 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ temp |= ( (*p) - '0' ) << 16; }
	break;
	case 24:
#line 109 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ temp |= ( (*p) - 'a' + 0x0A ) << 16; }
	break;
	case 25:
#line 110 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ temp |= ( (*p) - 'A' + 0x0A ) << 16; }
	break;
	case 26:
#line 112 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ temp |= ( (*p) - '0' ) << 12; }
	break;
	case 27:
#line 113 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ temp |= ( (*p) - 'a' + 0x0A ) << 12; }
	break;
	case 28:
#line 114 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ temp |= ( (*p) - 'A' + 0x0A ) << 12; }
	break;
	case 29:
#line 116 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ temp |= ( (*p) - '0' ) << 8; }
	break;
	case 30:
#line 117 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ temp |= ( (*p) - 'a' + 0x0A ) << 8; }
	break;
	case 31:
#line 118 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ temp |= ( (*p) - 'A' + 0x0A ) << 8; }
	break;
	case 32:
#line 120 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ temp |= ( (*p) - '0' ) << 4; }
	break;
	case 33:
#line 121 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ temp |= ( (*p) - 'a' + 0x0A ) << 4; }
	break;
	case 34:
#line 122 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ temp |= ( (*p) - 'A' + 0x0A ) << 4; }
	break;
	case 35:
#line 124 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ temp |= (*p) - '0'; }
	break;
	case 36:
#line 125 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ temp |= (*p) - 'a' + 0x0A; }
	break;
	case 37:
#line 126 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ temp |= (*p) - 'A' + 0x0A; }
	break;
	case 38:
#line 129 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{
                    if ( ! encode_utf8( &data, temp ) )
                    {
                        diagnostic(
                                sloc, "invalid codepoint U+%04" PRIX32, temp );
                        if ( diagnostics.size() >= ERROR_LIMIT )
                            goto error;
                    }
                }
	break;
	case 39:
#line 162 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{
                    xec_token* token = make_identifier( sloc, &data );
                    TOKEN( token );
                }
	break;
	case 40:
#line 169 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{
                    MTOKEN( XEC_TOKEN_IDENTIFIER, sloc, "~this", 5 );
                }
	break;
	case 41:
#line 176 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{
                    size_t length = data.size();
                    data.append( '\0' );
                    const char* number = (const char*)data.tearoff();
                    MTOKEN( XEC_TOKEN_NUMBER, sloc, number, length );
                }
	break;
	case 42:
#line 185 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{
                    size_t length = data.size();
                    data.append( '\0' );
                    const char* string = (const char*)data.tearoff();
                    MTOKEN( XEC_TOKEN_STRING, sloc, string, length );
                }
	break;
	case 43:
#line 192 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_XMARK, sloc, "!", 1 ); }
	break;
	case 44:
#line 193 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_PERCENT, sloc, "%", 1 ); }
	break;
	case 45:
#line 194 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_AMPERSAND, sloc, "&", 1 ); }
	break;
	case 46:
#line 195 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_LPN, sloc, "(", 1 ); }
	break;
	case 47:
#line 196 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_RPN, sloc, ")", 1 ); }
	break;
	case 48:
#line 197 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_ASTERISK, sloc, "*", 1 ); }
	break;
	case 49:
#line 198 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_PLUS, sloc, "+", 1 ); }
	break;
	case 50:
#line 199 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_COMMA, sloc, ",", 1 ); }
	break;
	case 51:
#line 200 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_MINUS, sloc, "-", 1 ); }
	break;
	case 52:
#line 201 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_PERIOD, sloc, ".", 1 ); }
	break;
	case 53:
#line 202 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_SOLIDUS, sloc, "/", 1 ); }
	break;
	case 54:
#line 203 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_COLON, sloc, ":", 1 ); }
	break;
	case 55:
#line 204 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_SEMICOLON, sloc, ";", 1 ); }
	break;
	case 56:
#line 205 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_LESS, sloc, "<", 1 ); }
	break;
	case 57:
#line 206 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_ASSIGN, sloc, "=", 1 ); }
	break;
	case 58:
#line 207 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_GREATER, sloc, ">", 1 ); }
	break;
	case 59:
#line 208 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_QMARK, sloc, "?", 1 ); }
	break;
	case 60:
#line 209 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_LSQ, sloc, "[", 1 ); }
	break;
	case 61:
#line 210 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_RSQ, sloc, "]", 1 ); }
	break;
	case 62:
#line 211 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_CARET, sloc, "^", 1 ); }
	break;
	case 63:
#line 212 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_LBR, sloc, "{", 1 ); }
	break;
	case 64:
#line 213 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_VBAR, sloc, "|", 1 ); }
	break;
	case 65:
#line 214 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_RBR, sloc, "}", 1 ); }
	break;
	case 66:
#line 215 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_TILDE, sloc, "~", 1 ); }
	break;
	case 67:
#line 217 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_INCREMENT, sloc, "++", 2 ); }
	break;
	case 68:
#line 218 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_DECREMENT, sloc, "--", 2 ); }
	break;
	case 69:
#line 220 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_CONCATENATE, sloc, "..", 2 ); }
	break;
	case 70:
#line 222 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_LSHIFT, sloc, "<<", 2 ); }
	break;
	case 71:
#line 223 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_RSHIFT, sloc, ">>", 2 ); }
	break;
	case 72:
#line 224 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_URSHIFT, sloc, ">>>", 3 ); }
	break;
	case 73:
#line 226 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_NOTEQUAL, sloc, "!=", 2 ); }
	break;
	case 74:
#line 227 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_LESSEQUAL, sloc, "<=", 2 ); }
	break;
	case 75:
#line 228 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_EQUAL, sloc, "==", 2 ); }
	break;
	case 76:
#line 229 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_GREATEREQUAL, sloc, ">=", 2 ); }
	break;
	case 77:
#line 230 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_NOTIN, sloc, "!in", 3 ); }
	break;
	case 78:
#line 231 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_NOTIS, sloc, "!is", 3 ); }
	break;
	case 79:
#line 233 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_MODASSIGN, sloc, "%=", 2 ); }
	break;
	case 80:
#line 234 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_BITANDASSIGN, sloc, "&=", 2 ); }
	break;
	case 81:
#line 235 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_MULASSIGN, sloc, "*=", 2 ); }
	break;
	case 82:
#line 236 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_ADDASSIGN, sloc, "+=", 2 ); }
	break;
	case 83:
#line 237 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_SUBASSIGN, sloc, "-=", 2 ); }
	break;
	case 84:
#line 238 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_DIVASSIGN, sloc, "/=", 2 ); }
	break;
	case 85:
#line 239 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_BITXORASSIGN, sloc, "^=", 2 ); }
	break;
	case 86:
#line 240 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_BITORASSIGN, sloc, "|=", 2 ); }
	break;
	case 87:
#line 241 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_INTDIVASSIGN, sloc, "~=", 2 ); }
	break;
	case 88:
#line 242 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_LSHIFTASSIGN, sloc, "<<=", 3 ); }
	break;
	case 89:
#line 243 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_RSHIFTASSIGN, sloc, ">>=", 3 ); }
	break;
	case 90:
#line 244 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_URSHIFTASSIGN, sloc, ">>>=", 4 ); }
	break;
	case 91:
#line 246 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_LOGICAND, sloc, "&&", 2 ); }
	break;
	case 92:
#line 247 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_LOGICXOR, sloc, "^^", 2 ); }
	break;
	case 93:
#line 248 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_LOGICOR, sloc, "||", 2 ); }
	break;
	case 94:
#line 250 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_EACHKEY, sloc, "::", 2 ); }
	break;
	case 95:
#line 251 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_ELLIPSIS, sloc, "...", 3 ); }
	break;
	case 96:
#line 257 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ {cs = 31; goto _again;} }
	break;
#line 1863 "xec_parser_ragel.cpp"
		}
	}

_again:
	if ( cs == 0 )
		goto _out;
	if ( ++p != pe )
		goto _resume;
	_test_eof: {}
	if ( p == eof )
	{
	const char *__acts = _lexer_actions + _lexer_eof_actions[cs];
	unsigned int __nacts = (unsigned int) *__acts++;
	while ( __nacts-- > 0 ) {
		switch ( *__acts++ ) {
	case 0:
#line 33 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ newlines.push_back( (int)( offset + ( p - buffer ) - 1 ) ); }
	break;
	case 3:
#line 38 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{
        data.shrink();
        int sloc = (int)( offset + ( p - buffer ) );
        diagnostic( sloc, "unexpected end of file" );
        {p++; goto _out; }
    }
	break;
	case 4:
#line 46 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{
        data.shrink();
        int sloc = (int)( offset + ( p - buffer ) );
        if ( (*p) >= 0x20 && (*p) <= 0x7E )
            diagnostic( sloc, "unexpected character '%c'", (*p) );
        else
            diagnostic( sloc, "unexpected character '\\x%02X'", (*p) );
        if ( diagnostics.size() >= ERROR_LIMIT )
            goto error;
    }
	break;
	case 39:
#line 162 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{
                    xec_token* token = make_identifier( sloc, &data );
                    TOKEN( token );
                }
	break;
	case 40:
#line 169 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{
                    MTOKEN( XEC_TOKEN_IDENTIFIER, sloc, "~this", 5 );
                }
	break;
	case 41:
#line 176 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{
                    size_t length = data.size();
                    data.append( '\0' );
                    const char* number = (const char*)data.tearoff();
                    MTOKEN( XEC_TOKEN_NUMBER, sloc, number, length );
                }
	break;
	case 42:
#line 185 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{
                    size_t length = data.size();
                    data.append( '\0' );
                    const char* string = (const char*)data.tearoff();
                    MTOKEN( XEC_TOKEN_STRING, sloc, string, length );
                }
	break;
	case 43:
#line 192 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_XMARK, sloc, "!", 1 ); }
	break;
	case 44:
#line 193 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_PERCENT, sloc, "%", 1 ); }
	break;
	case 45:
#line 194 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_AMPERSAND, sloc, "&", 1 ); }
	break;
	case 46:
#line 195 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_LPN, sloc, "(", 1 ); }
	break;
	case 47:
#line 196 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_RPN, sloc, ")", 1 ); }
	break;
	case 48:
#line 197 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_ASTERISK, sloc, "*", 1 ); }
	break;
	case 49:
#line 198 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_PLUS, sloc, "+", 1 ); }
	break;
	case 50:
#line 199 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_COMMA, sloc, ",", 1 ); }
	break;
	case 51:
#line 200 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_MINUS, sloc, "-", 1 ); }
	break;
	case 52:
#line 201 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_PERIOD, sloc, ".", 1 ); }
	break;
	case 53:
#line 202 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_SOLIDUS, sloc, "/", 1 ); }
	break;
	case 54:
#line 203 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_COLON, sloc, ":", 1 ); }
	break;
	case 55:
#line 204 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_SEMICOLON, sloc, ";", 1 ); }
	break;
	case 56:
#line 205 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_LESS, sloc, "<", 1 ); }
	break;
	case 57:
#line 206 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_ASSIGN, sloc, "=", 1 ); }
	break;
	case 58:
#line 207 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_GREATER, sloc, ">", 1 ); }
	break;
	case 59:
#line 208 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_QMARK, sloc, "?", 1 ); }
	break;
	case 60:
#line 209 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_LSQ, sloc, "[", 1 ); }
	break;
	case 61:
#line 210 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_RSQ, sloc, "]", 1 ); }
	break;
	case 62:
#line 211 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_CARET, sloc, "^", 1 ); }
	break;
	case 63:
#line 212 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_LBR, sloc, "{", 1 ); }
	break;
	case 64:
#line 213 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_VBAR, sloc, "|", 1 ); }
	break;
	case 65:
#line 214 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_RBR, sloc, "}", 1 ); }
	break;
	case 66:
#line 215 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_TILDE, sloc, "~", 1 ); }
	break;
	case 67:
#line 217 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_INCREMENT, sloc, "++", 2 ); }
	break;
	case 68:
#line 218 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_DECREMENT, sloc, "--", 2 ); }
	break;
	case 69:
#line 220 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_CONCATENATE, sloc, "..", 2 ); }
	break;
	case 70:
#line 222 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_LSHIFT, sloc, "<<", 2 ); }
	break;
	case 71:
#line 223 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_RSHIFT, sloc, ">>", 2 ); }
	break;
	case 72:
#line 224 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_URSHIFT, sloc, ">>>", 3 ); }
	break;
	case 73:
#line 226 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_NOTEQUAL, sloc, "!=", 2 ); }
	break;
	case 74:
#line 227 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_LESSEQUAL, sloc, "<=", 2 ); }
	break;
	case 75:
#line 228 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_EQUAL, sloc, "==", 2 ); }
	break;
	case 76:
#line 229 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_GREATEREQUAL, sloc, ">=", 2 ); }
	break;
	case 77:
#line 230 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_NOTIN, sloc, "!in", 3 ); }
	break;
	case 78:
#line 231 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_NOTIS, sloc, "!is", 3 ); }
	break;
	case 79:
#line 233 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_MODASSIGN, sloc, "%=", 2 ); }
	break;
	case 80:
#line 234 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_BITANDASSIGN, sloc, "&=", 2 ); }
	break;
	case 81:
#line 235 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_MULASSIGN, sloc, "*=", 2 ); }
	break;
	case 82:
#line 236 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_ADDASSIGN, sloc, "+=", 2 ); }
	break;
	case 83:
#line 237 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_SUBASSIGN, sloc, "-=", 2 ); }
	break;
	case 84:
#line 238 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_DIVASSIGN, sloc, "/=", 2 ); }
	break;
	case 85:
#line 239 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_BITXORASSIGN, sloc, "^=", 2 ); }
	break;
	case 86:
#line 240 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_BITORASSIGN, sloc, "|=", 2 ); }
	break;
	case 87:
#line 241 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_INTDIVASSIGN, sloc, "~=", 2 ); }
	break;
	case 88:
#line 242 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_LSHIFTASSIGN, sloc, "<<=", 3 ); }
	break;
	case 89:
#line 243 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_RSHIFTASSIGN, sloc, ">>=", 3 ); }
	break;
	case 90:
#line 244 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_URSHIFTASSIGN, sloc, ">>>=", 4 ); }
	break;
	case 91:
#line 246 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_LOGICAND, sloc, "&&", 2 ); }
	break;
	case 92:
#line 247 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_LOGICXOR, sloc, "^^", 2 ); }
	break;
	case 93:
#line 248 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_LOGICOR, sloc, "||", 2 ); }
	break;
	case 94:
#line 250 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_EACHKEY, sloc, "::", 2 ); }
	break;
	case 95:
#line 251 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_ELLIPSIS, sloc, "...", 3 ); }
	break;
	case 96:
#line 257 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ {cs = 31; goto _again;} }
	break;
#line 2152 "xec_parser_ragel.cpp"
		}
	}
	}

	_out: {}
	}

#line 468 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
        
        offset += read;
    }

    if ( ! ferror( file ) )
    {
        MTOKEN( XEC_TOKEN_EOF, offset, "", 0 );
    }

#undef MTOKEN
#undef TOKEN

error:

    // Free parser.
    XecParseFree( parser, free );

        
    // Close file.
    free( buffer );
    fclose( file );


    return diagnostics.size() == 0;
}



#pragma unused( lexer_first_final )
#pragma unused( lexer_error )
#pragma unused( lexer_en_main )






