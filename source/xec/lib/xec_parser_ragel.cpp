
#line 1 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
//
//  ../../toolbox/source/xec/lib/xec_parser_ragel.rl
//
//  Created by Edmund Kapusniak on 14/03/2014.
//  Copyright (c) 2014 Edmund Kapusniak. All rights reserved.
//


/*
    ragel ../../toolbox/source/xec/lib/xec_parser_ragel.rl -o xec_parser_ragel.cpp -G2
*/


#include "xec_parser.h"
#include <stdint.h>
#include <intformat.h>
#include "xec_token.h"




#line 245 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"




#line 30 "xec_parser_ragel.cpp"
static const char _lexer_actions[] = {
	0, 1, 0, 1, 1, 1, 2, 1, 
	5, 1, 6, 1, 7, 1, 8, 1, 
	9, 1, 10, 1, 11, 1, 12, 1, 
	13, 1, 14, 1, 15, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 1, 24, 1, 
	25, 1, 26, 1, 27, 1, 28, 1, 
	29, 1, 30, 1, 31, 1, 32, 1, 
	33, 1, 34, 1, 39, 1, 40, 1, 
	41, 1, 42, 1, 43, 1, 44, 1, 
	45, 1, 46, 1, 47, 1, 48, 1, 
	49, 1, 50, 1, 51, 1, 52, 1, 
	53, 1, 54, 1, 55, 1, 56, 1, 
	57, 1, 58, 1, 59, 1, 60, 1, 
	61, 1, 62, 1, 63, 1, 64, 1, 
	65, 1, 66, 1, 67, 1, 68, 1, 
	69, 1, 70, 1, 71, 1, 72, 1, 
	73, 1, 74, 1, 75, 1, 76, 1, 
	77, 1, 78, 1, 79, 1, 80, 1, 
	81, 1, 82, 1, 83, 1, 84, 1, 
	85, 1, 86, 1, 87, 1, 88, 1, 
	89, 1, 90, 1, 91, 1, 92, 1, 
	93, 2, 0, 1, 2, 0, 41, 2, 
	1, 2, 2, 4, 94, 2, 35, 38, 
	2, 36, 38, 2, 37, 38, 2, 39, 
	1, 2, 40, 1, 2, 41, 1, 2, 
	42, 1, 2, 43, 1, 2, 44, 1, 
	2, 45, 1, 2, 46, 1, 2, 47, 
	1, 2, 48, 1, 2, 49, 1, 2, 
	50, 1, 2, 51, 1, 2, 52, 1, 
	2, 53, 1, 2, 54, 1, 2, 55, 
	1, 2, 56, 1, 2, 57, 1, 2, 
	58, 1, 2, 59, 1, 2, 60, 1, 
	2, 61, 1, 2, 62, 1, 2, 63, 
	1, 2, 64, 1, 2, 65, 1, 2, 
	66, 1, 2, 67, 1, 2, 68, 1, 
	2, 69, 1, 2, 70, 1, 2, 71, 
	1, 2, 72, 1, 2, 73, 1, 2, 
	74, 1, 2, 75, 1, 2, 76, 1, 
	2, 77, 1, 2, 78, 1, 2, 79, 
	1, 2, 80, 1, 2, 81, 1, 2, 
	82, 1, 2, 83, 1, 2, 84, 1, 
	2, 85, 1, 2, 86, 1, 2, 87, 
	1, 2, 88, 1, 2, 89, 1, 2, 
	90, 1, 2, 91, 1, 2, 92, 1, 
	2, 93, 1, 3, 0, 1, 2, 3, 
	0, 4, 94, 3, 0, 41, 1, 3, 
	3, 4, 94, 3, 40, 1, 2, 3, 
	41, 1, 2, 3, 42, 1, 2, 3, 
	43, 1, 2, 3, 44, 1, 2, 3, 
	45, 1, 2, 3, 46, 1, 2, 3, 
	47, 1, 2, 3, 48, 1, 2, 3, 
	49, 1, 2, 3, 50, 1, 2, 3, 
	51, 1, 2, 3, 52, 1, 2, 3, 
	53, 1, 2, 3, 54, 1, 2, 3, 
	55, 1, 2, 3, 56, 1, 2, 3, 
	57, 1, 2, 3, 58, 1, 2, 3, 
	59, 1, 2, 3, 60, 1, 2, 3, 
	61, 1, 2, 3, 62, 1, 2, 3, 
	63, 1, 2, 3, 64, 1, 2, 3, 
	65, 1, 2, 3, 66, 1, 2, 3, 
	67, 1, 2, 3, 68, 1, 2, 3, 
	69, 1, 2, 3, 70, 1, 2, 3, 
	71, 1, 2, 3, 72, 1, 2, 3, 
	73, 1, 2, 3, 74, 1, 2, 3, 
	75, 1, 2, 3, 76, 1, 2, 3, 
	77, 1, 2, 3, 78, 1, 2, 3, 
	79, 1, 2, 3, 80, 1, 2, 3, 
	81, 1, 2, 3, 82, 1, 2, 3, 
	83, 1, 2, 3, 84, 1, 2, 3, 
	85, 1, 2, 3, 86, 1, 2, 3, 
	87, 1, 2, 3, 88, 1, 2, 3, 
	89, 1, 2, 3, 90, 1, 2, 3, 
	91, 1, 2, 3, 92, 1, 2, 3, 
	93, 1, 2, 4, 0, 3, 4, 94, 
	4, 0, 41, 1, 2
};

static const short _lexer_key_offsets[] = {
	0, 0, 4, 5, 8, 11, 14, 18, 
	20, 22, 26, 28, 34, 40, 42, 45, 
	48, 51, 55, 57, 67, 73, 79, 85, 
	91, 97, 103, 109, 115, 117, 119, 156, 
	193, 230, 267, 305, 342, 379, 416, 453, 
	490, 527, 564, 601, 638, 675, 712, 749, 
	786, 823, 860, 897, 934, 974, 1012, 1049, 
	1087, 1124, 1161, 1198, 1235, 1272, 1309, 1346, 
	1383, 1420, 1456, 1493, 1530, 1567, 1604, 1641, 
	1678, 1715, 1752, 1789, 1826, 1863, 1900, 1937, 
	1974, 2011, 2048, 2085, 2121, 2158, 2200, 2242, 
	2279, 2316, 2353, 2390, 2427, 2464, 2501, 2538
};

static const unsigned char _lexer_trans_keys[] = {
	10u, 13u, 34u, 92u, 46u, 10u, 13u, 42u, 
	10u, 13u, 42u, 10u, 13u, 42u, 10u, 13u, 
	42u, 47u, 10u, 13u, 48u, 57u, 43u, 45u, 
	48u, 57u, 48u, 57u, 48u, 57u, 65u, 70u, 
	97u, 102u, 48u, 57u, 65u, 70u, 97u, 102u, 
	42u, 47u, 10u, 13u, 42u, 10u, 13u, 42u, 
	10u, 13u, 42u, 10u, 13u, 42u, 47u, 10u, 
	13u, 34u, 47u, 92u, 98u, 102u, 110u, 114u, 
	116u, 117u, 120u, 48u, 57u, 65u, 70u, 97u, 
	102u, 48u, 57u, 65u, 70u, 97u, 102u, 48u, 
	57u, 65u, 70u, 97u, 102u, 48u, 57u, 65u, 
	70u, 97u, 102u, 48u, 57u, 65u, 70u, 97u, 
	102u, 48u, 57u, 65u, 70u, 97u, 102u, 48u, 
	57u, 65u, 70u, 97u, 102u, 48u, 57u, 65u, 
	70u, 97u, 102u, 110u, 115u, 42u, 47u, 9u, 
	10u, 13u, 32u, 33u, 34u, 37u, 38u, 40u, 
	41u, 42u, 43u, 44u, 45u, 46u, 47u, 48u, 
	58u, 59u, 60u, 61u, 62u, 63u, 91u, 93u, 
	94u, 95u, 123u, 124u, 125u, 126u, 49u, 57u, 
	65u, 90u, 97u, 122u, 9u, 10u, 13u, 32u, 
	33u, 34u, 37u, 38u, 40u, 41u, 42u, 43u, 
	44u, 45u, 46u, 47u, 48u, 58u, 59u, 60u, 
	61u, 62u, 63u, 91u, 93u, 94u, 95u, 123u, 
	124u, 125u, 126u, 49u, 57u, 65u, 90u, 97u, 
	122u, 9u, 10u, 13u, 32u, 33u, 34u, 37u, 
	38u, 40u, 41u, 42u, 43u, 44u, 45u, 46u, 
	47u, 48u, 58u, 59u, 60u, 61u, 62u, 63u, 
	91u, 93u, 94u, 95u, 123u, 124u, 125u, 126u, 
	49u, 57u, 65u, 90u, 97u, 122u, 9u, 10u, 
	13u, 32u, 33u, 34u, 37u, 38u, 40u, 41u, 
	42u, 43u, 44u, 45u, 46u, 47u, 48u, 58u, 
	59u, 60u, 61u, 62u, 63u, 91u, 93u, 94u, 
	95u, 123u, 124u, 125u, 126u, 49u, 57u, 65u, 
	90u, 97u, 122u, 9u, 10u, 13u, 32u, 33u, 
	34u, 37u, 38u, 40u, 41u, 42u, 43u, 44u, 
	45u, 46u, 47u, 48u, 58u, 59u, 60u, 61u, 
	62u, 63u, 91u, 93u, 94u, 95u, 105u, 123u, 
	124u, 125u, 126u, 49u, 57u, 65u, 90u, 97u, 
	122u, 9u, 10u, 13u, 32u, 33u, 34u, 37u, 
	38u, 40u, 41u, 42u, 43u, 44u, 45u, 46u, 
	47u, 48u, 58u, 59u, 60u, 61u, 62u, 63u, 
	91u, 93u, 94u, 95u, 123u, 124u, 125u, 126u, 
	49u, 57u, 65u, 90u, 97u, 122u, 9u, 10u, 
	13u, 32u, 33u, 34u, 37u, 38u, 40u, 41u, 
	42u, 43u, 44u, 45u, 46u, 47u, 48u, 58u, 
	59u, 60u, 61u, 62u, 63u, 91u, 93u, 94u, 
	95u, 123u, 124u, 125u, 126u, 49u, 57u, 65u, 
	90u, 97u, 122u, 9u, 10u, 13u, 32u, 33u, 
	34u, 37u, 38u, 40u, 41u, 42u, 43u, 44u, 
	45u, 46u, 47u, 48u, 58u, 59u, 60u, 61u, 
	62u, 63u, 91u, 93u, 94u, 95u, 123u, 124u, 
	125u, 126u, 49u, 57u, 65u, 90u, 97u, 122u, 
	9u, 10u, 13u, 32u, 33u, 34u, 37u, 38u, 
	40u, 41u, 42u, 43u, 44u, 45u, 46u, 47u, 
	48u, 58u, 59u, 60u, 61u, 62u, 63u, 91u, 
	93u, 94u, 95u, 123u, 124u, 125u, 126u, 49u, 
	57u, 65u, 90u, 97u, 122u, 9u, 10u, 13u, 
	32u, 33u, 34u, 37u, 38u, 40u, 41u, 42u, 
	43u, 44u, 45u, 46u, 47u, 48u, 58u, 59u, 
	60u, 61u, 62u, 63u, 91u, 93u, 94u, 95u, 
	123u, 124u, 125u, 126u, 49u, 57u, 65u, 90u, 
	97u, 122u, 9u, 10u, 13u, 32u, 33u, 34u, 
	37u, 38u, 40u, 41u, 42u, 43u, 44u, 45u, 
	46u, 47u, 48u, 58u, 59u, 60u, 61u, 62u, 
	63u, 91u, 93u, 94u, 95u, 123u, 124u, 125u, 
	126u, 49u, 57u, 65u, 90u, 97u, 122u, 9u, 
	10u, 13u, 32u, 33u, 34u, 37u, 38u, 40u, 
	41u, 42u, 43u, 44u, 45u, 46u, 47u, 48u, 
	58u, 59u, 60u, 61u, 62u, 63u, 91u, 93u, 
	94u, 95u, 123u, 124u, 125u, 126u, 49u, 57u, 
	65u, 90u, 97u, 122u, 9u, 10u, 13u, 32u, 
	33u, 34u, 37u, 38u, 40u, 41u, 42u, 43u, 
	44u, 45u, 46u, 47u, 48u, 58u, 59u, 60u, 
	61u, 62u, 63u, 91u, 93u, 94u, 95u, 123u, 
	124u, 125u, 126u, 49u, 57u, 65u, 90u, 97u, 
	122u, 9u, 10u, 13u, 32u, 33u, 34u, 37u, 
	38u, 40u, 41u, 42u, 43u, 44u, 45u, 46u, 
	47u, 48u, 58u, 59u, 60u, 61u, 62u, 63u, 
	91u, 93u, 94u, 95u, 123u, 124u, 125u, 126u, 
	49u, 57u, 65u, 90u, 97u, 122u, 9u, 10u, 
	13u, 32u, 33u, 34u, 37u, 38u, 40u, 41u, 
	42u, 43u, 44u, 45u, 46u, 47u, 48u, 58u, 
	59u, 60u, 61u, 62u, 63u, 91u, 93u, 94u, 
	95u, 123u, 124u, 125u, 126u, 49u, 57u, 65u, 
	90u, 97u, 122u, 9u, 10u, 13u, 32u, 33u, 
	34u, 37u, 38u, 40u, 41u, 42u, 43u, 44u, 
	45u, 46u, 47u, 48u, 58u, 59u, 60u, 61u, 
	62u, 63u, 91u, 93u, 94u, 95u, 123u, 124u, 
	125u, 126u, 49u, 57u, 65u, 90u, 97u, 122u, 
	9u, 10u, 13u, 32u, 33u, 34u, 37u, 38u, 
	40u, 41u, 42u, 43u, 44u, 45u, 46u, 47u, 
	48u, 58u, 59u, 60u, 61u, 62u, 63u, 91u, 
	93u, 94u, 95u, 123u, 124u, 125u, 126u, 49u, 
	57u, 65u, 90u, 97u, 122u, 9u, 10u, 13u, 
	32u, 33u, 34u, 37u, 38u, 40u, 41u, 42u, 
	43u, 44u, 45u, 46u, 47u, 48u, 58u, 59u, 
	60u, 61u, 62u, 63u, 91u, 93u, 94u, 95u, 
	123u, 124u, 125u, 126u, 49u, 57u, 65u, 90u, 
	97u, 122u, 9u, 10u, 13u, 32u, 33u, 34u, 
	37u, 38u, 40u, 41u, 42u, 43u, 44u, 45u, 
	46u, 47u, 48u, 58u, 59u, 60u, 61u, 62u, 
	63u, 91u, 93u, 94u, 95u, 123u, 124u, 125u, 
	126u, 49u, 57u, 65u, 90u, 97u, 122u, 9u, 
	10u, 13u, 32u, 33u, 34u, 37u, 38u, 40u, 
	41u, 42u, 43u, 44u, 45u, 46u, 47u, 48u, 
	58u, 59u, 60u, 61u, 62u, 63u, 91u, 93u, 
	94u, 95u, 123u, 124u, 125u, 126u, 49u, 57u, 
	65u, 90u, 97u, 122u, 9u, 10u, 13u, 32u, 
	33u, 34u, 37u, 38u, 40u, 41u, 42u, 43u, 
	44u, 45u, 46u, 47u, 48u, 58u, 59u, 60u, 
	61u, 62u, 63u, 91u, 93u, 94u, 95u, 123u, 
	124u, 125u, 126u, 49u, 57u, 65u, 90u, 97u, 
	122u, 9u, 10u, 13u, 32u, 33u, 34u, 37u, 
	38u, 40u, 41u, 42u, 43u, 44u, 45u, 46u, 
	47u, 48u, 58u, 59u, 60u, 61u, 62u, 63u, 
	91u, 93u, 94u, 95u, 123u, 124u, 125u, 126u, 
	49u, 57u, 65u, 90u, 97u, 122u, 9u, 10u, 
	13u, 32u, 33u, 34u, 37u, 38u, 40u, 41u, 
	42u, 43u, 44u, 45u, 46u, 47u, 48u, 58u, 
	59u, 60u, 61u, 62u, 63u, 69u, 91u, 93u, 
	94u, 95u, 101u, 120u, 123u, 124u, 125u, 126u, 
	49u, 57u, 65u, 90u, 97u, 122u, 9u, 10u, 
	13u, 32u, 33u, 34u, 37u, 38u, 40u, 41u, 
	42u, 43u, 44u, 45u, 46u, 47u, 58u, 59u, 
	60u, 61u, 62u, 63u, 69u, 91u, 93u, 94u, 
	95u, 101u, 123u, 124u, 125u, 126u, 48u, 57u, 
	65u, 90u, 97u, 122u, 9u, 10u, 13u, 32u, 
	33u, 34u, 37u, 38u, 40u, 41u, 42u, 43u, 
	44u, 45u, 46u, 47u, 48u, 58u, 59u, 60u, 
	61u, 62u, 63u, 91u, 93u, 94u, 95u, 123u, 
	124u, 125u, 126u, 49u, 57u, 65u, 90u, 97u, 
	122u, 9u, 10u, 13u, 32u, 33u, 34u, 37u, 
	38u, 40u, 41u, 42u, 43u, 44u, 45u, 46u, 
	47u, 58u, 59u, 60u, 61u, 62u, 63u, 69u, 
	91u, 93u, 94u, 95u, 101u, 123u, 124u, 125u, 
	126u, 48u, 57u, 65u, 90u, 97u, 122u, 9u, 
	10u, 13u, 32u, 33u, 34u, 37u, 38u, 40u, 
	41u, 42u, 43u, 44u, 45u, 46u, 47u, 48u, 
	58u, 59u, 60u, 61u, 62u, 63u, 91u, 93u, 
	94u, 95u, 123u, 124u, 125u, 126u, 49u, 57u, 
	65u, 90u, 97u, 122u, 9u, 10u, 13u, 32u, 
	33u, 34u, 37u, 38u, 40u, 41u, 42u, 43u, 
	44u, 45u, 46u, 47u, 48u, 58u, 59u, 60u, 
	61u, 62u, 63u, 91u, 93u, 94u, 95u, 123u, 
	124u, 125u, 126u, 49u, 57u, 65u, 90u, 97u, 
	122u, 9u, 10u, 13u, 32u, 33u, 34u, 37u, 
	38u, 40u, 41u, 42u, 43u, 44u, 45u, 46u, 
	47u, 48u, 58u, 59u, 60u, 61u, 62u, 63u, 
	91u, 93u, 94u, 95u, 123u, 124u, 125u, 126u, 
	49u, 57u, 65u, 90u, 97u, 122u, 9u, 10u, 
	13u, 32u, 33u, 34u, 37u, 38u, 40u, 41u, 
	42u, 43u, 44u, 45u, 46u, 47u, 48u, 58u, 
	59u, 60u, 61u, 62u, 63u, 91u, 93u, 94u, 
	95u, 123u, 124u, 125u, 126u, 49u, 57u, 65u, 
	90u, 97u, 122u, 9u, 10u, 13u, 32u, 33u, 
	34u, 37u, 38u, 40u, 41u, 42u, 43u, 44u, 
	45u, 46u, 47u, 48u, 58u, 59u, 60u, 61u, 
	62u, 63u, 91u, 93u, 94u, 95u, 123u, 124u, 
	125u, 126u, 49u, 57u, 65u, 90u, 97u, 122u, 
	9u, 10u, 13u, 32u, 33u, 34u, 37u, 38u, 
	40u, 41u, 42u, 43u, 44u, 45u, 46u, 47u, 
	48u, 58u, 59u, 60u, 61u, 62u, 63u, 91u, 
	93u, 94u, 95u, 123u, 124u, 125u, 126u, 49u, 
	57u, 65u, 90u, 97u, 122u, 9u, 10u, 13u, 
	32u, 33u, 34u, 37u, 38u, 40u, 41u, 42u, 
	43u, 44u, 45u, 46u, 47u, 48u, 58u, 59u, 
	60u, 61u, 62u, 63u, 91u, 93u, 94u, 95u, 
	123u, 124u, 125u, 126u, 49u, 57u, 65u, 90u, 
	97u, 122u, 9u, 10u, 13u, 32u, 33u, 34u, 
	37u, 38u, 40u, 41u, 42u, 43u, 44u, 45u, 
	46u, 47u, 48u, 58u, 59u, 60u, 61u, 62u, 
	63u, 91u, 93u, 94u, 95u, 123u, 124u, 125u, 
	126u, 49u, 57u, 65u, 90u, 97u, 122u, 9u, 
	10u, 13u, 32u, 33u, 34u, 37u, 38u, 40u, 
	41u, 42u, 43u, 44u, 45u, 46u, 47u, 48u, 
	58u, 59u, 60u, 61u, 62u, 63u, 91u, 93u, 
	94u, 95u, 123u, 124u, 125u, 126u, 49u, 57u, 
	65u, 90u, 97u, 122u, 9u, 10u, 13u, 32u, 
	33u, 34u, 37u, 38u, 40u, 41u, 42u, 43u, 
	44u, 45u, 46u, 47u, 58u, 59u, 60u, 61u, 
	62u, 63u, 91u, 93u, 94u, 95u, 123u, 124u, 
	125u, 126u, 48u, 57u, 65u, 90u, 97u, 122u, 
	9u, 10u, 13u, 32u, 33u, 34u, 37u, 38u, 
	40u, 41u, 42u, 43u, 44u, 45u, 46u, 47u, 
	48u, 58u, 59u, 60u, 61u, 62u, 63u, 91u, 
	93u, 94u, 95u, 123u, 124u, 125u, 126u, 49u, 
	57u, 65u, 90u, 97u, 122u, 9u, 10u, 13u, 
	32u, 33u, 34u, 37u, 38u, 40u, 41u, 42u, 
	43u, 44u, 45u, 46u, 47u, 48u, 58u, 59u, 
	60u, 61u, 62u, 63u, 91u, 93u, 94u, 95u, 
	123u, 124u, 125u, 126u, 49u, 57u, 65u, 90u, 
	97u, 122u, 9u, 10u, 13u, 32u, 33u, 34u, 
	37u, 38u, 40u, 41u, 42u, 43u, 44u, 45u, 
	46u, 47u, 48u, 58u, 59u, 60u, 61u, 62u, 
	63u, 91u, 93u, 94u, 95u, 123u, 124u, 125u, 
	126u, 49u, 57u, 65u, 90u, 97u, 122u, 9u, 
	10u, 13u, 32u, 33u, 34u, 37u, 38u, 40u, 
	41u, 42u, 43u, 44u, 45u, 46u, 47u, 48u, 
	58u, 59u, 60u, 61u, 62u, 63u, 91u, 93u, 
	94u, 95u, 123u, 124u, 125u, 126u, 49u, 57u, 
	65u, 90u, 97u, 122u, 9u, 10u, 13u, 32u, 
	33u, 34u, 37u, 38u, 40u, 41u, 42u, 43u, 
	44u, 45u, 46u, 47u, 48u, 58u, 59u, 60u, 
	61u, 62u, 63u, 91u, 93u, 94u, 95u, 123u, 
	124u, 125u, 126u, 49u, 57u, 65u, 90u, 97u, 
	122u, 9u, 10u, 13u, 32u, 33u, 34u, 37u, 
	38u, 40u, 41u, 42u, 43u, 44u, 45u, 46u, 
	47u, 48u, 58u, 59u, 60u, 61u, 62u, 63u, 
	91u, 93u, 94u, 95u, 123u, 124u, 125u, 126u, 
	49u, 57u, 65u, 90u, 97u, 122u, 9u, 10u, 
	13u, 32u, 33u, 34u, 37u, 38u, 40u, 41u, 
	42u, 43u, 44u, 45u, 46u, 47u, 48u, 58u, 
	59u, 60u, 61u, 62u, 63u, 91u, 93u, 94u, 
	95u, 123u, 124u, 125u, 126u, 49u, 57u, 65u, 
	90u, 97u, 122u, 9u, 10u, 13u, 32u, 33u, 
	34u, 37u, 38u, 40u, 41u, 42u, 43u, 44u, 
	45u, 46u, 47u, 48u, 58u, 59u, 60u, 61u, 
	62u, 63u, 91u, 93u, 94u, 95u, 123u, 124u, 
	125u, 126u, 49u, 57u, 65u, 90u, 97u, 122u, 
	9u, 10u, 13u, 32u, 33u, 34u, 37u, 38u, 
	40u, 41u, 42u, 43u, 44u, 45u, 46u, 47u, 
	48u, 58u, 59u, 60u, 61u, 62u, 63u, 91u, 
	93u, 94u, 95u, 123u, 124u, 125u, 126u, 49u, 
	57u, 65u, 90u, 97u, 122u, 9u, 10u, 13u, 
	32u, 33u, 34u, 37u, 38u, 40u, 41u, 42u, 
	43u, 44u, 45u, 46u, 47u, 48u, 58u, 59u, 
	60u, 61u, 62u, 63u, 91u, 93u, 94u, 95u, 
	123u, 124u, 125u, 126u, 49u, 57u, 65u, 90u, 
	97u, 122u, 9u, 10u, 13u, 32u, 33u, 34u, 
	37u, 38u, 40u, 41u, 42u, 43u, 44u, 45u, 
	46u, 47u, 48u, 58u, 59u, 60u, 61u, 62u, 
	63u, 91u, 93u, 94u, 95u, 123u, 124u, 125u, 
	126u, 49u, 57u, 65u, 90u, 97u, 122u, 9u, 
	10u, 13u, 32u, 33u, 34u, 37u, 38u, 40u, 
	41u, 42u, 43u, 44u, 45u, 46u, 47u, 48u, 
	58u, 59u, 60u, 61u, 62u, 63u, 91u, 93u, 
	94u, 95u, 123u, 124u, 125u, 126u, 49u, 57u, 
	65u, 90u, 97u, 122u, 9u, 10u, 13u, 32u, 
	33u, 34u, 37u, 38u, 40u, 41u, 42u, 43u, 
	44u, 45u, 46u, 47u, 48u, 58u, 59u, 60u, 
	61u, 62u, 63u, 91u, 93u, 94u, 95u, 123u, 
	124u, 125u, 126u, 49u, 57u, 65u, 90u, 97u, 
	122u, 9u, 10u, 13u, 32u, 33u, 34u, 37u, 
	38u, 40u, 41u, 42u, 43u, 44u, 45u, 46u, 
	47u, 48u, 58u, 59u, 60u, 61u, 62u, 63u, 
	91u, 93u, 94u, 95u, 123u, 124u, 125u, 126u, 
	49u, 57u, 65u, 90u, 97u, 122u, 9u, 10u, 
	13u, 32u, 33u, 34u, 37u, 38u, 40u, 41u, 
	42u, 43u, 44u, 45u, 46u, 47u, 48u, 58u, 
	59u, 60u, 61u, 62u, 63u, 91u, 93u, 94u, 
	95u, 123u, 124u, 125u, 126u, 49u, 57u, 65u, 
	90u, 97u, 122u, 9u, 10u, 13u, 32u, 33u, 
	34u, 37u, 38u, 40u, 41u, 42u, 43u, 44u, 
	45u, 46u, 47u, 48u, 58u, 59u, 60u, 61u, 
	62u, 63u, 91u, 93u, 94u, 95u, 123u, 124u, 
	125u, 126u, 49u, 57u, 65u, 90u, 97u, 122u, 
	9u, 10u, 13u, 32u, 33u, 34u, 37u, 38u, 
	40u, 41u, 42u, 43u, 44u, 45u, 46u, 47u, 
	48u, 58u, 59u, 60u, 61u, 62u, 63u, 91u, 
	93u, 94u, 95u, 123u, 124u, 125u, 126u, 49u, 
	57u, 65u, 90u, 97u, 122u, 9u, 10u, 13u, 
	32u, 33u, 34u, 37u, 38u, 40u, 41u, 42u, 
	43u, 44u, 45u, 46u, 47u, 58u, 59u, 60u, 
	61u, 62u, 63u, 91u, 93u, 94u, 95u, 123u, 
	124u, 125u, 126u, 48u, 57u, 65u, 90u, 97u, 
	122u, 9u, 10u, 13u, 32u, 33u, 34u, 37u, 
	38u, 40u, 41u, 42u, 43u, 44u, 45u, 46u, 
	47u, 48u, 58u, 59u, 60u, 61u, 62u, 63u, 
	91u, 93u, 94u, 95u, 123u, 124u, 125u, 126u, 
	49u, 57u, 65u, 90u, 97u, 122u, 9u, 10u, 
	13u, 32u, 33u, 34u, 37u, 38u, 40u, 41u, 
	42u, 43u, 44u, 45u, 46u, 47u, 58u, 59u, 
	60u, 61u, 62u, 63u, 80u, 91u, 93u, 94u, 
	95u, 112u, 123u, 124u, 125u, 126u, 48u, 57u, 
	65u, 70u, 71u, 90u, 97u, 102u, 103u, 122u, 
	9u, 10u, 13u, 32u, 33u, 34u, 37u, 38u, 
	40u, 41u, 42u, 43u, 44u, 45u, 46u, 47u, 
	58u, 59u, 60u, 61u, 62u, 63u, 80u, 91u, 
	93u, 94u, 95u, 112u, 123u, 124u, 125u, 126u, 
	48u, 57u, 65u, 70u, 71u, 90u, 97u, 102u, 
	103u, 122u, 9u, 10u, 13u, 32u, 33u, 34u, 
	37u, 38u, 40u, 41u, 42u, 43u, 44u, 45u, 
	46u, 47u, 48u, 58u, 59u, 60u, 61u, 62u, 
	63u, 91u, 93u, 94u, 95u, 123u, 124u, 125u, 
	126u, 49u, 57u, 65u, 90u, 97u, 122u, 9u, 
	10u, 13u, 32u, 33u, 34u, 37u, 38u, 40u, 
	41u, 42u, 43u, 44u, 45u, 46u, 47u, 48u, 
	58u, 59u, 60u, 61u, 62u, 63u, 91u, 93u, 
	94u, 95u, 123u, 124u, 125u, 126u, 49u, 57u, 
	65u, 90u, 97u, 122u, 9u, 10u, 13u, 32u, 
	33u, 34u, 37u, 38u, 40u, 41u, 42u, 43u, 
	44u, 45u, 46u, 47u, 48u, 58u, 59u, 60u, 
	61u, 62u, 63u, 91u, 93u, 94u, 95u, 123u, 
	124u, 125u, 126u, 49u, 57u, 65u, 90u, 97u, 
	122u, 9u, 10u, 13u, 32u, 33u, 34u, 37u, 
	38u, 40u, 41u, 42u, 43u, 44u, 45u, 46u, 
	47u, 48u, 58u, 59u, 60u, 61u, 62u, 63u, 
	91u, 93u, 94u, 95u, 123u, 124u, 125u, 126u, 
	49u, 57u, 65u, 90u, 97u, 122u, 9u, 10u, 
	13u, 32u, 33u, 34u, 37u, 38u, 40u, 41u, 
	42u, 43u, 44u, 45u, 46u, 47u, 48u, 58u, 
	59u, 60u, 61u, 62u, 63u, 91u, 93u, 94u, 
	95u, 123u, 124u, 125u, 126u, 49u, 57u, 65u, 
	90u, 97u, 122u, 9u, 10u, 13u, 32u, 33u, 
	34u, 37u, 38u, 40u, 41u, 42u, 43u, 44u, 
	45u, 46u, 47u, 48u, 58u, 59u, 60u, 61u, 
	62u, 63u, 91u, 93u, 94u, 95u, 123u, 124u, 
	125u, 126u, 49u, 57u, 65u, 90u, 97u, 122u, 
	9u, 10u, 13u, 32u, 33u, 34u, 37u, 38u, 
	40u, 41u, 42u, 43u, 44u, 45u, 46u, 47u, 
	48u, 58u, 59u, 60u, 61u, 62u, 63u, 91u, 
	93u, 94u, 95u, 123u, 124u, 125u, 126u, 49u, 
	57u, 65u, 90u, 97u, 122u, 9u, 10u, 13u, 
	32u, 33u, 34u, 37u, 38u, 40u, 41u, 42u, 
	43u, 44u, 45u, 46u, 47u, 48u, 58u, 59u, 
	60u, 61u, 62u, 63u, 91u, 93u, 94u, 95u, 
	123u, 124u, 125u, 126u, 49u, 57u, 65u, 90u, 
	97u, 122u, 9u, 10u, 13u, 32u, 33u, 34u, 
	37u, 38u, 40u, 41u, 42u, 43u, 44u, 45u, 
	46u, 47u, 48u, 58u, 59u, 60u, 61u, 62u, 
	63u, 91u, 93u, 94u, 95u, 123u, 124u, 125u, 
	126u, 49u, 57u, 65u, 90u, 97u, 122u, 0
};

static const char _lexer_single_lengths[] = {
	0, 4, 1, 3, 3, 3, 4, 2, 
	0, 2, 0, 0, 0, 2, 3, 3, 
	3, 4, 2, 10, 0, 0, 0, 0, 
	0, 0, 0, 0, 2, 2, 31, 31, 
	31, 31, 32, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 34, 32, 31, 32, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 30, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 30, 31, 32, 32, 31, 
	31, 31, 31, 31, 31, 31, 31, 31
};

static const char _lexer_range_lengths[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 3, 3, 0, 0, 0, 
	0, 0, 0, 0, 3, 3, 3, 3, 
	3, 3, 3, 3, 0, 0, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 5, 5, 3, 
	3, 3, 3, 3, 3, 3, 3, 3
};

static const short _lexer_index_offsets[] = {
	0, 0, 5, 7, 11, 15, 19, 24, 
	27, 29, 33, 35, 39, 43, 46, 50, 
	54, 58, 63, 66, 77, 81, 85, 89, 
	93, 97, 101, 105, 109, 112, 115, 150, 
	185, 220, 255, 291, 326, 361, 396, 431, 
	466, 501, 536, 571, 606, 641, 676, 711, 
	746, 781, 816, 851, 886, 924, 960, 995, 
	1031, 1066, 1101, 1136, 1171, 1206, 1241, 1276, 
	1311, 1346, 1380, 1415, 1450, 1485, 1520, 1555, 
	1590, 1625, 1660, 1695, 1730, 1765, 1800, 1835, 
	1870, 1905, 1940, 1975, 2009, 2044, 2082, 2120, 
	2155, 2190, 2225, 2260, 2295, 2330, 2365, 2400
};

static const char _lexer_trans_targs[] = {
	0, 0, 35, 19, 1, 50, 0, 4, 
	5, 6, 3, 4, 5, 6, 3, 4, 
	5, 6, 3, 4, 5, 6, 31, 3, 
	32, 33, 7, 53, 0, 10, 10, 83, 
	0, 83, 0, 85, 85, 85, 0, 86, 
	86, 86, 0, 14, 18, 0, 15, 16, 
	17, 14, 15, 16, 17, 14, 15, 16, 
	17, 14, 15, 16, 17, 35, 14, 36, 
	37, 18, 1, 1, 1, 1, 1, 1, 
	1, 1, 20, 26, 0, 21, 21, 21, 
	0, 22, 22, 22, 0, 23, 23, 23, 
	0, 24, 24, 24, 0, 25, 25, 25, 
	0, 1, 1, 1, 0, 27, 27, 27, 
	0, 1, 1, 1, 0, 94, 95, 0, 
	3, 7, 0, 31, 32, 33, 31, 34, 
	1, 38, 39, 41, 42, 43, 44, 46, 
	47, 49, 51, 52, 54, 56, 57, 60, 
	62, 64, 66, 67, 68, 65, 70, 71, 
	73, 74, 55, 65, 65, 0, 31, 32, 
	33, 31, 34, 1, 38, 39, 41, 42, 
	43, 44, 46, 47, 49, 29, 52, 54, 
	56, 57, 60, 62, 64, 66, 67, 68, 
	65, 70, 71, 73, 74, 55, 65, 65, 
	0, 31, 32, 33, 31, 34, 1, 38, 
	39, 41, 42, 43, 44, 46, 47, 49, 
	29, 52, 54, 56, 57, 60, 62, 64, 
	66, 67, 68, 65, 70, 71, 73, 74, 
	55, 65, 65, 0, 31, 32, 33, 31, 
	34, 1, 38, 39, 41, 42, 43, 44, 
	46, 47, 49, 29, 52, 54, 56, 57, 
	60, 62, 64, 66, 67, 68, 65, 70, 
	71, 73, 74, 55, 65, 65, 0, 31, 
	32, 33, 31, 34, 1, 38, 39, 41, 
	42, 43, 44, 46, 47, 49, 51, 52, 
	54, 56, 57, 93, 62, 64, 66, 67, 
	68, 65, 28, 70, 71, 73, 74, 55, 
	65, 65, 0, 35, 36, 37, 35, 34, 
	1, 38, 39, 41, 42, 43, 44, 46, 
	47, 49, 13, 52, 54, 56, 57, 60, 
	62, 64, 66, 67, 68, 65, 70, 71, 
	73, 74, 55, 65, 65, 0, 35, 36, 
	37, 35, 34, 1, 38, 39, 41, 42, 
	43, 44, 46, 47, 49, 13, 52, 54, 
	56, 57, 60, 62, 64, 66, 67, 68, 
	65, 70, 71, 73, 74, 55, 65, 65, 
	0, 35, 36, 37, 35, 34, 1, 38, 
	39, 41, 42, 43, 44, 46, 47, 49, 
	13, 52, 54, 56, 57, 60, 62, 64, 
	66, 67, 68, 65, 70, 71, 73, 74, 
	55, 65, 65, 0, 31, 32, 33, 31, 
	34, 1, 38, 39, 41, 42, 43, 44, 
	46, 47, 49, 51, 52, 54, 56, 57, 
	92, 62, 64, 66, 67, 68, 65, 70, 
	71, 73, 74, 55, 65, 65, 0, 31, 
	32, 33, 31, 34, 1, 38, 40, 41, 
	42, 43, 44, 46, 47, 49, 51, 52, 
	54, 56, 57, 91, 62, 64, 66, 67, 
	68, 65, 70, 71, 73, 74, 55, 65, 
	65, 0, 31, 32, 33, 31, 34, 1, 
	38, 39, 41, 42, 43, 44, 46, 47, 
	49, 51, 52, 54, 56, 57, 60, 62, 
	64, 66, 67, 68, 65, 70, 71, 73, 
	74, 55, 65, 65, 0, 31, 32, 33, 
	31, 34, 1, 38, 39, 41, 42, 43, 
	44, 46, 47, 49, 51, 52, 54, 56, 
	57, 60, 62, 64, 66, 67, 68, 65, 
	70, 71, 73, 74, 55, 65, 65, 0, 
	31, 32, 33, 31, 34, 1, 38, 39, 
	41, 42, 43, 44, 46, 47, 49, 51, 
	52, 54, 56, 57, 60, 62, 64, 66, 
	67, 68, 65, 70, 71, 73, 74, 55, 
	65, 65, 0, 31, 32, 33, 31, 34, 
	1, 38, 39, 41, 42, 43, 44, 46, 
	47, 49, 51, 52, 54, 56, 57, 90, 
	62, 64, 66, 67, 68, 65, 70, 71, 
	73, 74, 55, 65, 65, 0, 31, 32, 
	33, 31, 34, 1, 38, 39, 41, 42, 
	43, 45, 46, 47, 49, 51, 52, 54, 
	56, 57, 89, 62, 64, 66, 67, 68, 
	65, 70, 71, 73, 74, 55, 65, 65, 
	0, 31, 32, 33, 31, 34, 1, 38, 
	39, 41, 42, 43, 44, 46, 47, 49, 
	51, 52, 54, 56, 57, 60, 62, 64, 
	66, 67, 68, 65, 70, 71, 73, 74, 
	55, 65, 65, 0, 31, 32, 33, 31, 
	34, 1, 38, 39, 41, 42, 43, 44, 
	46, 47, 49, 51, 52, 54, 56, 57, 
	60, 62, 64, 66, 67, 68, 65, 70, 
	71, 73, 74, 55, 65, 65, 0, 31, 
	32, 33, 31, 34, 1, 38, 39, 41, 
	42, 43, 44, 46, 48, 49, 51, 52, 
	54, 56, 57, 88, 62, 64, 66, 67, 
	68, 65, 70, 71, 73, 74, 55, 65, 
	65, 0, 31, 32, 33, 31, 34, 1, 
	38, 39, 41, 42, 43, 44, 46, 47, 
	49, 51, 52, 54, 56, 57, 60, 62, 
	64, 66, 67, 68, 65, 70, 71, 73, 
	74, 55, 65, 65, 0, 31, 32, 33, 
	31, 34, 1, 38, 39, 41, 42, 43, 
	44, 46, 47, 2, 51, 52, 54, 56, 
	57, 60, 62, 64, 66, 67, 68, 65, 
	70, 71, 73, 74, 55, 65, 65, 0, 
	31, 32, 33, 31, 34, 1, 38, 39, 
	41, 42, 43, 44, 46, 47, 49, 51, 
	52, 54, 56, 57, 60, 62, 64, 66, 
	67, 68, 65, 70, 71, 73, 74, 55, 
	65, 65, 0, 31, 32, 33, 31, 34, 
	1, 38, 39, 41, 42, 3, 44, 46, 
	47, 49, 7, 52, 54, 56, 57, 87, 
	62, 64, 66, 67, 68, 65, 70, 71, 
	73, 74, 55, 65, 65, 0, 31, 32, 
	33, 31, 34, 1, 38, 39, 41, 42, 
	43, 44, 46, 47, 8, 51, 52, 54, 
	56, 57, 60, 62, 64, 9, 66, 67, 
	68, 65, 9, 11, 70, 71, 73, 74, 
	55, 65, 65, 0, 31, 32, 33, 31, 
	34, 1, 38, 39, 41, 42, 43, 44, 
	46, 47, 49, 51, 54, 56, 57, 60, 
	62, 64, 9, 66, 67, 68, 65, 9, 
	70, 71, 73, 74, 53, 65, 65, 0, 
	31, 32, 33, 31, 34, 1, 38, 39, 
	41, 42, 43, 44, 46, 47, 49, 51, 
	52, 84, 56, 57, 60, 62, 64, 66, 
	67, 68, 65, 70, 71, 73, 74, 55, 
	65, 65, 0, 31, 32, 33, 31, 34, 
	1, 38, 39, 41, 42, 43, 44, 46, 
	47, 8, 51, 54, 56, 57, 60, 62, 
	64, 9, 66, 67, 68, 65, 9, 70, 
	71, 73, 74, 55, 65, 65, 0, 31, 
	32, 33, 31, 34, 1, 38, 39, 41, 
	42, 43, 44, 46, 47, 49, 51, 52, 
	54, 56, 57, 60, 62, 64, 66, 67, 
	68, 65, 70, 71, 73, 74, 55, 65, 
	65, 0, 31, 32, 33, 31, 34, 1, 
	38, 39, 41, 42, 43, 44, 46, 47, 
	49, 51, 52, 54, 56, 58, 82, 62, 
	64, 66, 67, 68, 65, 70, 71, 73, 
	74, 55, 65, 65, 0, 31, 32, 33, 
	31, 34, 1, 38, 39, 41, 42, 43, 
	44, 46, 47, 49, 51, 52, 54, 56, 
	57, 59, 62, 64, 66, 67, 68, 65, 
	70, 71, 73, 74, 55, 65, 65, 0, 
	31, 32, 33, 31, 34, 1, 38, 39, 
	41, 42, 43, 44, 46, 47, 49, 51, 
	52, 54, 56, 57, 60, 62, 64, 66, 
	67, 68, 65, 70, 71, 73, 74, 55, 
	65, 65, 0, 31, 32, 33, 31, 34, 
	1, 38, 39, 41, 42, 43, 44, 46, 
	47, 49, 51, 52, 54, 56, 57, 61, 
	62, 64, 66, 67, 68, 65, 70, 71, 
	73, 74, 55, 65, 65, 0, 31, 32, 
	33, 31, 34, 1, 38, 39, 41, 42, 
	43, 44, 46, 47, 49, 51, 52, 54, 
	56, 57, 60, 62, 64, 66, 67, 68, 
	65, 70, 71, 73, 74, 55, 65, 65, 
	0, 31, 32, 33, 31, 34, 1, 38, 
	39, 41, 42, 43, 44, 46, 47, 49, 
	51, 52, 54, 56, 57, 63, 78, 64, 
	66, 67, 68, 65, 70, 71, 73, 74, 
	55, 65, 65, 0, 31, 32, 33, 31, 
	34, 1, 38, 39, 41, 42, 43, 44, 
	46, 47, 49, 51, 52, 54, 56, 57, 
	60, 62, 64, 66, 67, 68, 65, 70, 
	71, 73, 74, 55, 65, 65, 0, 31, 
	32, 33, 31, 34, 1, 38, 39, 41, 
	42, 43, 44, 46, 47, 49, 51, 52, 
	54, 56, 57, 60, 62, 64, 66, 67, 
	68, 65, 70, 71, 73, 74, 55, 65, 
	65, 0, 31, 32, 33, 31, 34, 1, 
	38, 39, 41, 42, 43, 44, 46, 47, 
	49, 51, 54, 56, 57, 60, 62, 64, 
	66, 67, 68, 65, 70, 71, 73, 74, 
	65, 65, 65, 0, 31, 32, 33, 31, 
	34, 1, 38, 39, 41, 42, 43, 44, 
	46, 47, 49, 51, 52, 54, 56, 57, 
	60, 62, 64, 66, 67, 68, 65, 70, 
	71, 73, 74, 55, 65, 65, 0, 31, 
	32, 33, 31, 34, 1, 38, 39, 41, 
	42, 43, 44, 46, 47, 49, 51, 52, 
	54, 56, 57, 60, 62, 64, 66, 67, 
	68, 65, 70, 71, 73, 74, 55, 65, 
	65, 0, 31, 32, 33, 31, 34, 1, 
	38, 39, 41, 42, 43, 44, 46, 47, 
	49, 51, 52, 54, 56, 57, 69, 62, 
	64, 66, 67, 77, 65, 70, 71, 73, 
	74, 55, 65, 65, 0, 31, 32, 33, 
	31, 34, 1, 38, 39, 41, 42, 43, 
	44, 46, 47, 49, 51, 52, 54, 56, 
	57, 60, 62, 64, 66, 67, 68, 65, 
	70, 71, 73, 74, 55, 65, 65, 0, 
	31, 32, 33, 31, 34, 1, 38, 39, 
	41, 42, 43, 44, 46, 47, 49, 51, 
	52, 54, 56, 57, 60, 62, 64, 66, 
	67, 68, 65, 70, 71, 73, 74, 55, 
	65, 65, 0, 31, 32, 33, 31, 34, 
	1, 38, 39, 41, 42, 43, 44, 46, 
	47, 49, 51, 52, 54, 56, 57, 72, 
	62, 64, 66, 67, 68, 65, 70, 76, 
	73, 74, 55, 65, 65, 0, 31, 32, 
	33, 31, 34, 1, 38, 39, 41, 42, 
	43, 44, 46, 47, 49, 51, 52, 54, 
	56, 57, 60, 62, 64, 66, 67, 68, 
	65, 70, 71, 73, 74, 55, 65, 65, 
	0, 31, 32, 33, 31, 34, 1, 38, 
	39, 41, 42, 43, 44, 46, 47, 49, 
	51, 52, 54, 56, 57, 60, 62, 64, 
	66, 67, 68, 65, 70, 71, 73, 74, 
	55, 65, 65, 0, 31, 32, 33, 31, 
	34, 1, 38, 39, 41, 42, 43, 44, 
	46, 47, 49, 51, 52, 54, 56, 57, 
	75, 62, 64, 66, 67, 68, 65, 70, 
	71, 73, 74, 55, 65, 65, 0, 31, 
	32, 33, 31, 34, 1, 38, 39, 41, 
	42, 43, 44, 46, 47, 49, 51, 52, 
	54, 56, 57, 60, 62, 64, 66, 67, 
	68, 65, 70, 71, 73, 74, 55, 65, 
	65, 0, 31, 32, 33, 31, 34, 1, 
	38, 39, 41, 42, 43, 44, 46, 47, 
	49, 51, 52, 54, 56, 57, 60, 62, 
	64, 66, 67, 68, 65, 70, 71, 73, 
	74, 55, 65, 65, 0, 31, 32, 33, 
	31, 34, 1, 38, 39, 41, 42, 43, 
	44, 46, 47, 49, 51, 52, 54, 56, 
	57, 60, 62, 64, 66, 67, 68, 65, 
	70, 71, 73, 74, 55, 65, 65, 0, 
	31, 32, 33, 31, 34, 1, 38, 39, 
	41, 42, 43, 44, 46, 47, 49, 51, 
	52, 54, 56, 57, 79, 80, 64, 66, 
	67, 68, 65, 70, 71, 73, 74, 55, 
	65, 65, 0, 31, 32, 33, 31, 34, 
	1, 38, 39, 41, 42, 43, 44, 46, 
	47, 49, 51, 52, 54, 56, 57, 60, 
	62, 64, 66, 67, 68, 65, 70, 71, 
	73, 74, 55, 65, 65, 0, 31, 32, 
	33, 31, 34, 1, 38, 39, 41, 42, 
	43, 44, 46, 47, 49, 51, 52, 54, 
	56, 57, 81, 62, 64, 66, 67, 68, 
	65, 70, 71, 73, 74, 55, 65, 65, 
	0, 31, 32, 33, 31, 34, 1, 38, 
	39, 41, 42, 43, 44, 46, 47, 49, 
	51, 52, 54, 56, 57, 60, 62, 64, 
	66, 67, 68, 65, 70, 71, 73, 74, 
	55, 65, 65, 0, 31, 32, 33, 31, 
	34, 1, 38, 39, 41, 42, 43, 44, 
	46, 47, 49, 51, 52, 54, 56, 57, 
	60, 62, 64, 66, 67, 68, 65, 70, 
	71, 73, 74, 55, 65, 65, 0, 31, 
	32, 33, 31, 34, 1, 38, 39, 41, 
	42, 43, 44, 46, 47, 49, 51, 54, 
	56, 57, 60, 62, 64, 66, 67, 68, 
	65, 70, 71, 73, 74, 83, 65, 65, 
	0, 31, 32, 33, 31, 34, 1, 38, 
	39, 41, 42, 43, 44, 46, 47, 49, 
	51, 52, 54, 56, 57, 60, 62, 64, 
	66, 67, 68, 65, 70, 71, 73, 74, 
	55, 65, 65, 0, 31, 32, 33, 31, 
	34, 1, 38, 39, 41, 42, 43, 44, 
	46, 47, 12, 51, 54, 56, 57, 60, 
	62, 64, 9, 66, 67, 68, 65, 9, 
	70, 71, 73, 74, 85, 85, 65, 85, 
	65, 0, 31, 32, 33, 31, 34, 1, 
	38, 39, 41, 42, 43, 44, 46, 47, 
	49, 51, 54, 56, 57, 60, 62, 64, 
	9, 66, 67, 68, 65, 9, 70, 71, 
	73, 74, 86, 86, 65, 86, 65, 0, 
	31, 32, 33, 31, 34, 1, 38, 39, 
	41, 42, 43, 44, 46, 47, 49, 51, 
	52, 54, 56, 57, 60, 62, 64, 66, 
	67, 68, 65, 70, 71, 73, 74, 55, 
	65, 65, 0, 31, 32, 33, 31, 34, 
	1, 38, 39, 41, 42, 43, 44, 46, 
	47, 49, 51, 52, 54, 56, 57, 60, 
	62, 64, 66, 67, 68, 65, 70, 71, 
	73, 74, 55, 65, 65, 0, 31, 32, 
	33, 31, 34, 1, 38, 39, 41, 42, 
	43, 44, 46, 47, 49, 51, 52, 54, 
	56, 57, 60, 62, 64, 66, 67, 68, 
	65, 70, 71, 73, 74, 55, 65, 65, 
	0, 31, 32, 33, 31, 34, 1, 38, 
	39, 41, 42, 43, 44, 46, 47, 49, 
	51, 52, 54, 56, 57, 60, 62, 64, 
	66, 67, 68, 65, 70, 71, 73, 74, 
	55, 65, 65, 0, 31, 32, 33, 31, 
	34, 1, 38, 39, 41, 42, 43, 44, 
	46, 47, 49, 51, 52, 54, 56, 57, 
	60, 62, 64, 66, 67, 68, 65, 70, 
	71, 73, 74, 55, 65, 65, 0, 31, 
	32, 33, 31, 34, 1, 38, 39, 41, 
	42, 43, 44, 46, 47, 49, 51, 52, 
	54, 56, 57, 60, 62, 64, 66, 67, 
	68, 65, 70, 71, 73, 74, 55, 65, 
	65, 0, 31, 32, 33, 31, 34, 1, 
	38, 39, 41, 42, 43, 44, 46, 47, 
	49, 51, 52, 54, 56, 57, 60, 62, 
	64, 66, 67, 68, 65, 70, 71, 73, 
	74, 55, 65, 65, 0, 31, 32, 33, 
	31, 34, 1, 38, 39, 41, 42, 43, 
	44, 46, 47, 49, 51, 52, 54, 56, 
	57, 60, 62, 64, 66, 67, 68, 65, 
	70, 71, 73, 74, 55, 65, 65, 0, 
	31, 32, 33, 31, 34, 1, 38, 39, 
	41, 42, 43, 44, 46, 47, 49, 51, 
	52, 54, 56, 57, 60, 62, 64, 66, 
	67, 68, 65, 70, 71, 73, 74, 55, 
	65, 65, 0, 0
};

static const short _lexer_trans_actions[] = {
	186, 186, 0, 35, 5, 0, 186, 0, 
	0, 0, 0, 1, 1, 1, 1, 0, 
	1, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 5, 186, 5, 5, 5, 
	186, 5, 186, 5, 5, 5, 186, 5, 
	5, 5, 186, 0, 0, 186, 0, 0, 
	0, 0, 1, 1, 1, 1, 0, 1, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 7, 11, 9, 13, 15, 17, 
	19, 21, 0, 0, 186, 37, 41, 39, 
	186, 43, 47, 45, 186, 49, 53, 51, 
	186, 55, 59, 57, 186, 61, 65, 63, 
	186, 189, 195, 192, 186, 23, 27, 25, 
	186, 29, 33, 31, 186, 0, 0, 186, 
	0, 0, 186, 0, 0, 0, 0, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 183, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 183, 3, 3, 
	3, 3, 183, 183, 183, 186, 0, 0, 
	0, 0, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 0, 183, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	183, 3, 3, 3, 3, 183, 183, 183, 
	186, 1, 1, 1, 1, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	1, 363, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 363, 177, 177, 177, 177, 
	363, 363, 363, 367, 1, 0, 1, 1, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 1, 363, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 363, 177, 
	177, 177, 177, 363, 363, 363, 367, 73, 
	73, 73, 73, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 387, 
	207, 207, 207, 0, 207, 207, 207, 207, 
	207, 387, 0, 207, 207, 207, 207, 387, 
	387, 387, 186, 0, 0, 0, 0, 204, 
	0, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 0, 383, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 383, 204, 204, 
	204, 204, 383, 383, 383, 186, 1, 1, 
	1, 1, 371, 1, 371, 371, 371, 371, 
	371, 371, 371, 371, 371, 1, 600, 371, 
	371, 371, 371, 371, 371, 371, 371, 371, 
	600, 371, 371, 371, 371, 600, 600, 600, 
	367, 1, 0, 1, 1, 371, 1, 371, 
	371, 371, 371, 371, 371, 371, 371, 371, 
	1, 600, 371, 371, 371, 371, 371, 371, 
	371, 371, 371, 600, 371, 371, 371, 371, 
	600, 600, 600, 367, 75, 75, 75, 75, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 391, 210, 210, 210, 
	0, 210, 210, 210, 210, 210, 391, 210, 
	210, 210, 210, 391, 391, 391, 186, 77, 
	77, 77, 77, 213, 213, 213, 0, 213, 
	213, 213, 213, 213, 213, 213, 213, 395, 
	213, 213, 213, 0, 213, 213, 213, 213, 
	213, 395, 213, 213, 213, 213, 395, 395, 
	395, 186, 167, 167, 167, 167, 348, 348, 
	348, 348, 348, 348, 348, 348, 348, 348, 
	348, 348, 575, 348, 348, 348, 348, 348, 
	348, 348, 348, 348, 575, 348, 348, 348, 
	348, 575, 575, 575, 186, 79, 79, 79, 
	79, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 399, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 399, 
	216, 216, 216, 216, 399, 399, 399, 186, 
	81, 81, 81, 81, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	403, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 403, 219, 219, 219, 219, 403, 
	403, 403, 186, 83, 83, 83, 83, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 407, 222, 222, 222, 0, 
	222, 222, 222, 222, 222, 407, 222, 222, 
	222, 222, 407, 407, 407, 186, 85, 85, 
	85, 85, 225, 225, 225, 225, 225, 225, 
	225, 0, 225, 225, 225, 225, 411, 225, 
	225, 225, 0, 225, 225, 225, 225, 225, 
	411, 225, 225, 225, 225, 411, 411, 411, 
	186, 121, 121, 121, 121, 279, 279, 279, 
	279, 279, 279, 279, 279, 279, 279, 279, 
	279, 483, 279, 279, 279, 279, 279, 279, 
	279, 279, 279, 483, 279, 279, 279, 279, 
	483, 483, 483, 186, 87, 87, 87, 87, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 415, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 415, 228, 
	228, 228, 228, 415, 415, 415, 186, 89, 
	89, 89, 89, 231, 231, 231, 231, 231, 
	231, 231, 231, 231, 0, 231, 231, 419, 
	231, 231, 231, 0, 231, 231, 231, 231, 
	231, 419, 231, 231, 231, 231, 419, 419, 
	419, 186, 123, 123, 123, 123, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 487, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 487, 282, 282, 282, 
	282, 487, 487, 487, 186, 91, 91, 91, 
	91, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 0, 234, 423, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 423, 
	234, 234, 234, 234, 423, 423, 423, 186, 
	175, 175, 175, 175, 360, 360, 360, 360, 
	360, 360, 360, 360, 360, 360, 360, 360, 
	591, 360, 360, 360, 360, 360, 360, 360, 
	360, 360, 591, 360, 360, 360, 360, 591, 
	591, 591, 186, 93, 93, 93, 93, 237, 
	237, 237, 237, 237, 237, 0, 237, 237, 
	237, 237, 0, 427, 237, 237, 237, 0, 
	237, 237, 237, 237, 237, 427, 237, 237, 
	237, 237, 427, 427, 427, 186, 69, 69, 
	69, 69, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 5, 201, 379, 201, 
	201, 201, 201, 201, 201, 5, 201, 201, 
	201, 379, 5, 5, 201, 201, 201, 201, 
	379, 379, 379, 186, 69, 69, 69, 69, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 5, 201, 201, 201, 379, 5, 
	201, 201, 201, 201, 5, 379, 379, 186, 
	95, 95, 95, 95, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	431, 0, 240, 240, 240, 240, 240, 240, 
	240, 240, 431, 240, 240, 240, 240, 431, 
	431, 431, 186, 69, 69, 69, 69, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 5, 201, 201, 201, 201, 201, 201, 
	201, 5, 201, 201, 201, 379, 5, 201, 
	201, 201, 201, 5, 379, 379, 186, 97, 
	97, 97, 97, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 435, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 435, 243, 243, 243, 243, 435, 435, 
	435, 186, 99, 99, 99, 99, 246, 246, 
	246, 246, 246, 246, 246, 246, 246, 246, 
	246, 246, 439, 246, 246, 0, 0, 246, 
	246, 246, 246, 246, 439, 246, 246, 246, 
	246, 439, 439, 439, 186, 125, 125, 125, 
	125, 285, 285, 285, 285, 285, 285, 285, 
	285, 285, 285, 285, 285, 491, 285, 285, 
	285, 0, 285, 285, 285, 285, 285, 491, 
	285, 285, 285, 285, 491, 491, 491, 186, 
	161, 161, 161, 161, 339, 339, 339, 339, 
	339, 339, 339, 339, 339, 339, 339, 339, 
	563, 339, 339, 339, 339, 339, 339, 339, 
	339, 339, 563, 339, 339, 339, 339, 563, 
	563, 563, 186, 101, 101, 101, 101, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 443, 249, 249, 249, 0, 
	249, 249, 249, 249, 249, 443, 249, 249, 
	249, 249, 443, 443, 443, 186, 135, 135, 
	135, 135, 300, 300, 300, 300, 300, 300, 
	300, 300, 300, 300, 300, 300, 511, 300, 
	300, 300, 300, 300, 300, 300, 300, 300, 
	511, 300, 300, 300, 300, 511, 511, 511, 
	186, 103, 103, 103, 103, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 447, 252, 252, 252, 0, 0, 252, 
	252, 252, 252, 447, 252, 252, 252, 252, 
	447, 447, 447, 186, 137, 137, 137, 137, 
	303, 303, 303, 303, 303, 303, 303, 303, 
	303, 303, 303, 303, 515, 303, 303, 303, 
	303, 303, 303, 303, 303, 303, 515, 303, 
	303, 303, 303, 515, 515, 515, 186, 105, 
	105, 105, 105, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 451, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 451, 255, 255, 255, 255, 451, 451, 
	451, 186, 67, 67, 67, 67, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 5, 198, 198, 198, 198, 
	5, 5, 5, 186, 107, 107, 107, 107, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 455, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 455, 258, 
	258, 258, 258, 455, 455, 455, 186, 109, 
	109, 109, 109, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 459, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 459, 261, 261, 261, 261, 459, 459, 
	459, 186, 111, 111, 111, 111, 264, 264, 
	264, 264, 264, 264, 264, 264, 264, 264, 
	264, 264, 463, 264, 264, 264, 0, 264, 
	264, 264, 264, 0, 463, 264, 264, 264, 
	264, 463, 463, 463, 186, 155, 155, 155, 
	155, 330, 330, 330, 330, 330, 330, 330, 
	330, 330, 330, 330, 330, 551, 330, 330, 
	330, 330, 330, 330, 330, 330, 330, 551, 
	330, 330, 330, 330, 551, 551, 551, 186, 
	113, 113, 113, 113, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	467, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 467, 267, 267, 267, 267, 467, 
	467, 467, 186, 115, 115, 115, 115, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 471, 270, 270, 270, 0, 
	270, 270, 270, 270, 270, 471, 270, 0, 
	270, 270, 471, 471, 471, 186, 157, 157, 
	157, 157, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 555, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	555, 333, 333, 333, 333, 555, 555, 555, 
	186, 117, 117, 117, 117, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 475, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 475, 273, 273, 273, 273, 
	475, 475, 475, 186, 119, 119, 119, 119, 
	276, 276, 276, 276, 276, 276, 276, 276, 
	276, 276, 276, 276, 479, 276, 276, 276, 
	0, 276, 276, 276, 276, 276, 479, 276, 
	276, 276, 276, 479, 479, 479, 186, 159, 
	159, 159, 159, 336, 336, 336, 336, 336, 
	336, 336, 336, 336, 336, 336, 336, 559, 
	336, 336, 336, 336, 336, 336, 336, 336, 
	336, 559, 336, 336, 336, 336, 559, 559, 
	559, 186, 171, 171, 171, 171, 354, 354, 
	354, 354, 354, 354, 354, 354, 354, 354, 
	354, 354, 583, 354, 354, 354, 354, 354, 
	354, 354, 354, 354, 583, 354, 354, 354, 
	354, 583, 583, 583, 186, 169, 169, 169, 
	169, 351, 351, 351, 351, 351, 351, 351, 
	351, 351, 351, 351, 351, 579, 351, 351, 
	351, 351, 351, 351, 351, 351, 351, 579, 
	351, 351, 351, 351, 579, 579, 579, 186, 
	127, 127, 127, 127, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	495, 288, 288, 288, 0, 0, 288, 288, 
	288, 288, 495, 288, 288, 288, 288, 495, 
	495, 495, 186, 163, 163, 163, 163, 342, 
	342, 342, 342, 342, 342, 342, 342, 342, 
	342, 342, 342, 567, 342, 342, 342, 342, 
	342, 342, 342, 342, 342, 567, 342, 342, 
	342, 342, 567, 567, 567, 186, 129, 129, 
	129, 129, 291, 291, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 499, 291, 
	291, 291, 0, 291, 291, 291, 291, 291, 
	499, 291, 291, 291, 291, 499, 499, 499, 
	186, 165, 165, 165, 165, 345, 345, 345, 
	345, 345, 345, 345, 345, 345, 345, 345, 
	345, 571, 345, 345, 345, 345, 345, 345, 
	345, 345, 345, 571, 345, 345, 345, 345, 
	571, 571, 571, 186, 133, 133, 133, 133, 
	297, 297, 297, 297, 297, 297, 297, 297, 
	297, 297, 297, 297, 507, 297, 297, 297, 
	297, 297, 297, 297, 297, 297, 507, 297, 
	297, 297, 297, 507, 507, 507, 186, 69, 
	69, 69, 69, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	379, 201, 201, 201, 201, 5, 379, 379, 
	186, 173, 173, 173, 173, 357, 357, 357, 
	357, 357, 357, 357, 357, 357, 357, 357, 
	357, 587, 357, 357, 357, 357, 357, 357, 
	357, 357, 357, 587, 357, 357, 357, 357, 
	587, 587, 587, 186, 69, 69, 69, 69, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 5, 201, 201, 201, 201, 201, 
	201, 201, 5, 201, 201, 201, 379, 5, 
	201, 201, 201, 201, 5, 5, 379, 5, 
	379, 186, 69, 69, 69, 69, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	5, 201, 201, 201, 379, 5, 201, 201, 
	201, 201, 5, 5, 379, 5, 379, 186, 
	153, 153, 153, 153, 327, 327, 327, 327, 
	327, 327, 327, 327, 327, 327, 327, 327, 
	547, 327, 327, 327, 327, 327, 327, 327, 
	327, 327, 547, 327, 327, 327, 327, 547, 
	547, 547, 186, 151, 151, 151, 151, 324, 
	324, 324, 324, 324, 324, 324, 324, 324, 
	324, 324, 324, 543, 324, 324, 324, 324, 
	324, 324, 324, 324, 324, 543, 324, 324, 
	324, 324, 543, 543, 543, 186, 149, 149, 
	149, 149, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 539, 321, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	539, 321, 321, 321, 321, 539, 539, 539, 
	186, 147, 147, 147, 147, 318, 318, 318, 
	318, 318, 318, 318, 318, 318, 318, 318, 
	318, 535, 318, 318, 318, 318, 318, 318, 
	318, 318, 318, 535, 318, 318, 318, 318, 
	535, 535, 535, 186, 145, 145, 145, 145, 
	315, 315, 315, 315, 315, 315, 315, 315, 
	315, 315, 315, 315, 531, 315, 315, 315, 
	315, 315, 315, 315, 315, 315, 531, 315, 
	315, 315, 315, 531, 531, 531, 186, 143, 
	143, 143, 143, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 527, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 527, 312, 312, 312, 312, 527, 527, 
	527, 186, 131, 131, 131, 131, 294, 294, 
	294, 294, 294, 294, 294, 294, 294, 294, 
	294, 294, 503, 294, 294, 294, 294, 294, 
	294, 294, 294, 294, 503, 294, 294, 294, 
	294, 503, 503, 503, 186, 139, 139, 139, 
	139, 306, 306, 306, 306, 306, 306, 306, 
	306, 306, 306, 306, 306, 519, 306, 306, 
	306, 306, 306, 306, 306, 306, 306, 519, 
	306, 306, 306, 306, 519, 519, 519, 186, 
	141, 141, 141, 141, 309, 309, 309, 309, 
	309, 309, 309, 309, 309, 309, 309, 309, 
	523, 309, 309, 309, 309, 309, 309, 309, 
	309, 309, 523, 309, 309, 309, 309, 523, 
	523, 523, 186, 0
};

static const short _lexer_eof_actions[] = {
	0, 375, 375, 375, 595, 595, 375, 375, 
	375, 375, 375, 375, 375, 375, 375, 595, 
	595, 375, 375, 375, 375, 375, 375, 375, 
	375, 375, 375, 375, 375, 375, 0, 0, 
	1, 1, 73, 71, 180, 180, 75, 77, 
	167, 79, 81, 83, 85, 121, 87, 89, 
	123, 91, 175, 93, 69, 69, 95, 69, 
	97, 99, 125, 161, 101, 135, 103, 137, 
	105, 67, 107, 109, 111, 155, 113, 115, 
	157, 117, 119, 159, 171, 169, 127, 163, 
	129, 165, 133, 69, 173, 69, 69, 153, 
	151, 149, 147, 145, 143, 131, 139, 141
};

static const int lexer_start = 30;
static const int lexer_first_final = 30;
static const int lexer_error = 0;

static const int lexer_en_main = 30;


#line 249 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"





template < typename ... arguments_t >
xec_token* xec_parser::make_token( arguments_t ... arguments )
{
    if ( recycle_tokens.size() )
    {
        void* p = recycle_tokens.back();
        recycle_tokens.pop_back();
        return new ( p ) xec_token( arguments ... );
    }
    else
    {
        return new ( alloc ) xec_token( arguments ... );
    }
}



struct xec_keywords
    :   public std::unordered_map< symkey, xec_token_kind >
{
    
    xec_keywords()
    {
        emplace( symkey( "break" ),    XEC_KEYWORD_BREAK );
        emplace( symkey( "case" ),     XEC_KEYWORD_CASE );
        emplace( symkey( "catch" ),    XEC_KEYWORD_CATCH );
        emplace( symkey( "continue" ), XEC_KEYWORD_CONTINUE );
        emplace( symkey( "default" ),  XEC_KEYWORD_DEFAULT );
        emplace( symkey( "delete" ),   XEC_KEYWORD_DELETE );
        emplace( symkey( "do" ),       XEC_KEYWORD_DO );
        emplace( symkey( "else" ),     XEC_KEYWORD_ELSE );
        emplace( symkey( "false" ),    XEC_KEYWORD_FALSE );
        emplace( symkey( "finally" ),  XEC_KEYWORD_FINALLY );
        emplace( symkey( "for" ),      XEC_KEYWORD_FOR );
        emplace( symkey( "if" ),       XEC_KEYWORD_IF );
        emplace( symkey( "new" ),      XEC_KEYWORD_NEW );
        emplace( symkey( "null" ),     XEC_KEYWORD_NULL );
        emplace( symkey( "return" ),   XEC_KEYWORD_RETURN );
        emplace( symkey( "switch" ),   XEC_KEYWORD_SWITCH );
        emplace( symkey( "throw" ),    XEC_KEYWORD_THROW );
        emplace( symkey( "true" ),     XEC_KEYWORD_TRUE );
        emplace( symkey( "try" ),      XEC_KEYWORD_TRY );
        emplace( symkey( "using" ),    XEC_KEYWORD_USING );
        emplace( symkey( "var" ),      XEC_KEYWORD_VAR );
        emplace( symkey( "while" ),    XEC_KEYWORD_WHILE );
        emplace( symkey( "yield" ),    XEC_KEYWORD_YIELD );
        emplace( symkey( "in" ),       XEC_TOKEN_IN );
        emplace( symkey( "is" ),       XEC_TOKEN_IS );
    }
    
};



xec_token* xec_parser::make_identifier( int sloc, region_buffer* data )
{
    static xec_keywords keywords;

    size_t length = data->size();
    const char* identifier = (const char*)data->get();
    symkey key( identifier, length );
    
    // Check for keyword.
    auto i = keywords.find( key );
    if ( i != keywords.end() )
    {
        return make_token( i->second, sloc, i->first.c_str(), i->first.size() );
    }
    
    // Check for existing identifier.
    auto j = identifiers.find( key );
    if ( j != identifiers.end() )
    {
        return make_token( XEC_TOKEN_IDENTIFIER, sloc, j->c_str(), j->size() );
    }

    // New identifier.
    data->append( '\0' );
    identifier = (const char*)data->tearoff();
    identifiers.emplace( key.hash(), identifier, length );
    return make_token( XEC_TOKEN_IDENTIFIER, sloc, identifier, length );

}



static bool encode_utf8( region_buffer* data, uint32_t cp )
{
    if ( cp <= 0x7F )
    {
        data->append( (uint8_t)cp );
        return true;
    }
    else if ( cp <= 0x7FF )
    {
        data->append( (uint8_t)( 0xC0 | ( cp >> 6 & 0x1F ) ) );
        data->append( (uint8_t)( 0x80 | ( cp & 0x3F ) ) );
        return true;
    }
    else if ( cp <= 0xFFFF )
    {
        data->append( (uint8_t)( 0xE0 | ( cp >> 12 & 0x0F ) ) );
        data->append( (uint8_t)( 0x80 | ( cp >> 6 & 0x3F ) ) );
        data->append( (uint8_t)( 0x80 | ( cp & 0x3F ) ) );
        return true;
    }
    else if ( cp <= 0x10FFFF )
    {
        data->append( (uint8_t)( 0xF0 | ( cp >> 18 & 0x07 ) ) );
        data->append( (uint8_t)( 0x80 | ( cp >> 12 & 0x3F ) ) );
        data->append( (uint8_t)( 0x80 | ( cp >> 6 & 0x3F ) ) );
        data->append( (uint8_t)( 0x80 | ( cp & 0x3F ) ) );
        return true;
    }
    else
    {
        return false;
    }
}



bool xec_parser::parse( const char* path )
{
    region_scope rscope( alloc );
    
    
    // Open file.
    this->filename = path;
    FILE* file = fopen( path, "r" );
    if ( ! file )
    {
        diagnostic( 0, "unable to open file" );
        return false;
    }
    
    
    // File state.
    int offset = 0;
    unsigned char* buffer = (unsigned char*)malloc( BUFFER_SIZE );
    
    
    // Token state.
    int sloc = -1;
    int uloc = -1;
    region_buffer data;
    uint32_t temp;


    // Initialize state machine.
    int cs;
    
    
#line 1292 "xec_parser_ragel.cpp"
	{
	cs = lexer_start;
	}

#line 407 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
    
    
    // Perform lexing.
#define TOKEN( token ) \
    token->debug_print();
#define MTOKEN( ... ) \
    TOKEN( make_token( __VA_ARGS__ ) );

    bool iseof = false;
    while ( ! iseof )
    {
        size_t read = fread( buffer, 1, BUFFER_SIZE, file );
        iseof = read < BUFFER_SIZE;
        
        if ( iseof && ferror( file ) )
        {
            data.shrink();
            diagnostic( offset, "error reading file" );
            goto error;
        }

        const unsigned char* p      = buffer;
        const unsigned char* pe     = buffer + read;
        const unsigned char* eof    = iseof ? pe : NULL;

        
#line 1324 "xec_parser_ragel.cpp"
	{
	int _klen;
	unsigned int _trans;
	const char *_acts;
	unsigned int _nacts;
	const unsigned char *_keys;

	if ( p == pe )
		goto _test_eof;
	if ( cs == 0 )
		goto _out;
_resume:
	_keys = _lexer_trans_keys + _lexer_key_offsets[cs];
	_trans = _lexer_index_offsets[cs];

	_klen = _lexer_single_lengths[cs];
	if ( _klen > 0 ) {
		const unsigned char *_lower = _keys;
		const unsigned char *_mid;
		const unsigned char *_upper = _keys + _klen - 1;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( (*p) < *_mid )
				_upper = _mid - 1;
			else if ( (*p) > *_mid )
				_lower = _mid + 1;
			else {
				_trans += (unsigned int)(_mid - _keys);
				goto _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _lexer_range_lengths[cs];
	if ( _klen > 0 ) {
		const unsigned char *_lower = _keys;
		const unsigned char *_mid;
		const unsigned char *_upper = _keys + (_klen<<1) - 2;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( (*p) < _mid[0] )
				_upper = _mid - 2;
			else if ( (*p) > _mid[1] )
				_lower = _mid + 2;
			else {
				_trans += (unsigned int)((_mid - _keys)>>1);
				goto _match;
			}
		}
		_trans += _klen;
	}

_match:
	cs = _lexer_trans_targs[_trans];

	if ( _lexer_trans_actions[_trans] == 0 )
		goto _again;

	_acts = _lexer_actions + _lexer_trans_actions[_trans];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 )
	{
		switch ( *_acts++ )
		{
	case 0:
#line 28 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ newlines.push_back( (int)( offset + ( p - buffer ) - 1 ) ); }
	break;
	case 1:
#line 29 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ sloc = (int)( offset + ( p - buffer ) ); data.clear(); }
	break;
	case 2:
#line 30 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ data.append( (char)(*p) ); }
	break;
	case 4:
#line 41 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{
        data.shrink();
        int sloc = (int)( offset + ( p - buffer ) );
        if ( (*p) >= 0x20 && (*p) <= 0x7E )
            diagnostic( sloc, "unexpected character '%c'", (*p) );
        else
            diagnostic( sloc, "unexpected character '\\x%02X'", (*p) );
        if ( diagnostics.size() >= ERROR_LIMIT )
            goto error;
    }
	break;
	case 5:
#line 77 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ data.append( '\"' ); }
	break;
	case 6:
#line 78 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ data.append( '\\' ); }
	break;
	case 7:
#line 79 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ data.append( '/' ); }
	break;
	case 8:
#line 80 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ data.append( '\b' ); }
	break;
	case 9:
#line 81 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ data.append( '\f' ); }
	break;
	case 10:
#line 82 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ data.append( '\n' ); }
	break;
	case 11:
#line 83 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ data.append( '\r' ); }
	break;
	case 12:
#line 84 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ data.append( '\t' ); }
	break;
	case 13:
#line 86 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ temp = ( (*p) - '0' ) << 4; }
	break;
	case 14:
#line 87 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ temp = ( (*p) - 'a' + 0x0A ) << 4; }
	break;
	case 15:
#line 88 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ temp = ( (*p) - 'A' + 0x0A ) << 4; }
	break;
	case 16:
#line 90 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ data.append( (char)( temp | (*p) - '0' ) ); }
	break;
	case 17:
#line 91 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ data.append( (char)( temp | (*p) - 'a' + 0x0A ) ); }
	break;
	case 18:
#line 92 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ data.append( (char)( temp | (*p) - 'A' + 0x0A ) ); }
	break;
	case 19:
#line 96 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{
                    uloc = (int)( offset + ( p - buffer ) );
                }
	break;
	case 20:
#line 99 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ temp = ( (*p) - '0' ) << 20; }
	break;
	case 21:
#line 100 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ temp = ( (*p) - 'a' + 0x0A ) << 20; }
	break;
	case 22:
#line 101 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ temp = ( (*p) - 'A' + 0x0A ) << 20; }
	break;
	case 23:
#line 103 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ temp |= ( (*p) - '0' ) << 16; }
	break;
	case 24:
#line 104 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ temp |= ( (*p) - 'a' + 0x0A ) << 16; }
	break;
	case 25:
#line 105 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ temp |= ( (*p) - 'A' + 0x0A ) << 16; }
	break;
	case 26:
#line 107 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ temp |= ( (*p) - '0' ) << 12; }
	break;
	case 27:
#line 108 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ temp |= ( (*p) - 'a' + 0x0A ) << 12; }
	break;
	case 28:
#line 109 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ temp |= ( (*p) - 'A' + 0x0A ) << 12; }
	break;
	case 29:
#line 111 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ temp |= ( (*p) - '0' ) << 8; }
	break;
	case 30:
#line 112 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ temp |= ( (*p) - 'a' + 0x0A ) << 8; }
	break;
	case 31:
#line 113 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ temp |= ( (*p) - 'A' + 0x0A ) << 8; }
	break;
	case 32:
#line 115 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ temp |= ( (*p) - '0' ) << 4; }
	break;
	case 33:
#line 116 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ temp |= ( (*p) - 'a' + 0x0A ) << 4; }
	break;
	case 34:
#line 117 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ temp |= ( (*p) - 'A' + 0x0A ) << 4; }
	break;
	case 35:
#line 119 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ temp |= (*p) - '0'; }
	break;
	case 36:
#line 120 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ temp |= (*p) - 'a' + 0x0A; }
	break;
	case 37:
#line 121 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ temp |= (*p) - 'A' + 0x0A; }
	break;
	case 38:
#line 124 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{
                    if ( ! encode_utf8( &data, temp ) )
                    {
                        diagnostic(
                                sloc, "invalid codepoint U+%04" PRIX32, temp );
                        if ( diagnostics.size() >= ERROR_LIMIT )
                            goto error;
                    }
                }
	break;
	case 39:
#line 157 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{
                    xec_token* token = make_identifier( sloc, &data );
                    TOKEN( token );
                }
	break;
	case 40:
#line 164 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{
                    size_t length = data.size();
                    data.append( '\0' );
                    const char* number = (const char*)data.tearoff();
                    MTOKEN( XEC_TOKEN_NUMBER, sloc, number, length );
                }
	break;
	case 41:
#line 173 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{
                    size_t length = data.size();
                    data.append( '\0' );
                    const char* string = (const char*)data.tearoff();
                    MTOKEN( XEC_TOKEN_STRING, sloc, string, length );
                }
	break;
	case 42:
#line 180 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_XMARK, sloc, "!", 1 ); }
	break;
	case 43:
#line 181 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_PERCENT, sloc, "%", 1 ); }
	break;
	case 44:
#line 182 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_AMPERSAND, sloc, "&", 1 ); }
	break;
	case 45:
#line 183 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_LPN, sloc, "(", 1 ); }
	break;
	case 46:
#line 184 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_RPN, sloc, ")", 1 ); }
	break;
	case 47:
#line 185 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_ASTERISK, sloc, "*", 1 ); }
	break;
	case 48:
#line 186 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_PLUS, sloc, "+", 1 ); }
	break;
	case 49:
#line 187 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_COMMA, sloc, ",", 1 ); }
	break;
	case 50:
#line 188 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_MINUS, sloc, "-", 1 ); }
	break;
	case 51:
#line 189 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_PERIOD, sloc, ".", 1 ); }
	break;
	case 52:
#line 190 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_SOLIDUS, sloc, "/", 1 ); }
	break;
	case 53:
#line 191 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_COLON, sloc, ":", 1 ); }
	break;
	case 54:
#line 192 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_SEMICOLON, sloc, ";", 1 ); }
	break;
	case 55:
#line 193 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_LESS, sloc, "<", 1 ); }
	break;
	case 56:
#line 194 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_ASSIGN, sloc, "=", 1 ); }
	break;
	case 57:
#line 195 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_GREATER, sloc, ">", 1 ); }
	break;
	case 58:
#line 196 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_QMARK, sloc, "?", 1 ); }
	break;
	case 59:
#line 197 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_LSQ, sloc, "[", 1 ); }
	break;
	case 60:
#line 198 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_RSQ, sloc, "]", 1 ); }
	break;
	case 61:
#line 199 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_CARET, sloc, "^", 1 ); }
	break;
	case 62:
#line 200 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_LBR, sloc, "{", 1 ); }
	break;
	case 63:
#line 201 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_VBAR, sloc, "|", 1 ); }
	break;
	case 64:
#line 202 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_RBR, sloc, "}", 1 ); }
	break;
	case 65:
#line 203 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_TILDE, sloc, "~", 1 ); }
	break;
	case 66:
#line 205 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_INCREMENT, sloc, "++", 2 ); }
	break;
	case 67:
#line 206 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_DECREMENT, sloc, "--", 2 ); }
	break;
	case 68:
#line 208 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_LSHIFT, sloc, "<<", 2 ); }
	break;
	case 69:
#line 209 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_RSHIFT, sloc, ">>", 2 ); }
	break;
	case 70:
#line 210 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_URSHIFT, sloc, ">>>", 3 ); }
	break;
	case 71:
#line 212 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_NOTEQUAL, sloc, "!=", 2 ); }
	break;
	case 72:
#line 213 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_LESSEQUAL, sloc, "<=", 2 ); }
	break;
	case 73:
#line 214 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_EQUAL, sloc, "==", 2 ); }
	break;
	case 74:
#line 215 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_GREATEREQUAL, sloc, ">=", 2 ); }
	break;
	case 75:
#line 216 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_NOTIN, sloc, "!in", 3 ); }
	break;
	case 76:
#line 217 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_NOTIS, sloc, "!is", 3 ); }
	break;
	case 77:
#line 219 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_MODASSIGN, sloc, "%=", 2 ); }
	break;
	case 78:
#line 220 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_BITANDASSIGN, sloc, "&=", 2 ); }
	break;
	case 79:
#line 221 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_MULASSIGN, sloc, "*=", 2 ); }
	break;
	case 80:
#line 222 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_ADDASSIGN, sloc, "+=", 2 ); }
	break;
	case 81:
#line 223 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_SUBASSIGN, sloc, "-=", 2 ); }
	break;
	case 82:
#line 224 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_DIVASSIGN, sloc, "/=", 2 ); }
	break;
	case 83:
#line 225 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_BITXORASSIGN, sloc, "^=", 2 ); }
	break;
	case 84:
#line 226 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_BITORASSIGN, sloc, "|=", 2 ); }
	break;
	case 85:
#line 227 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_INTDIVASSIGN, sloc, "~=", 2 ); }
	break;
	case 86:
#line 228 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_LSHIFTASSIGN, sloc, "<<=", 3 ); }
	break;
	case 87:
#line 229 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_RSHIFTASSIGN, sloc, ">>=", 3 ); }
	break;
	case 88:
#line 230 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_URSHIFTASSIGN, sloc, ">>>=", 4 ); }
	break;
	case 89:
#line 232 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_LOGICAND, sloc, "&&", 2 ); }
	break;
	case 90:
#line 233 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_LOGICXOR, sloc, "^^", 2 ); }
	break;
	case 91:
#line 234 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_LOGICOR, sloc, "||", 2 ); }
	break;
	case 92:
#line 236 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_EACHKEY, sloc, "::", 2 ); }
	break;
	case 93:
#line 237 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_ELLIPSIS, sloc, "...", 3 ); }
	break;
	case 94:
#line 243 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ {cs = 30; goto _again;} }
	break;
#line 1805 "xec_parser_ragel.cpp"
		}
	}

_again:
	if ( cs == 0 )
		goto _out;
	if ( ++p != pe )
		goto _resume;
	_test_eof: {}
	if ( p == eof )
	{
	const char *__acts = _lexer_actions + _lexer_eof_actions[cs];
	unsigned int __nacts = (unsigned int) *__acts++;
	while ( __nacts-- > 0 ) {
		switch ( *__acts++ ) {
	case 0:
#line 28 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ newlines.push_back( (int)( offset + ( p - buffer ) - 1 ) ); }
	break;
	case 3:
#line 33 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{
        data.shrink();
        int sloc = (int)( offset + ( p - buffer ) );
        diagnostic( sloc, "unexpected end of file" );
        {p++; goto _out; }
    }
	break;
	case 4:
#line 41 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{
        data.shrink();
        int sloc = (int)( offset + ( p - buffer ) );
        if ( (*p) >= 0x20 && (*p) <= 0x7E )
            diagnostic( sloc, "unexpected character '%c'", (*p) );
        else
            diagnostic( sloc, "unexpected character '\\x%02X'", (*p) );
        if ( diagnostics.size() >= ERROR_LIMIT )
            goto error;
    }
	break;
	case 39:
#line 157 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{
                    xec_token* token = make_identifier( sloc, &data );
                    TOKEN( token );
                }
	break;
	case 40:
#line 164 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{
                    size_t length = data.size();
                    data.append( '\0' );
                    const char* number = (const char*)data.tearoff();
                    MTOKEN( XEC_TOKEN_NUMBER, sloc, number, length );
                }
	break;
	case 41:
#line 173 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{
                    size_t length = data.size();
                    data.append( '\0' );
                    const char* string = (const char*)data.tearoff();
                    MTOKEN( XEC_TOKEN_STRING, sloc, string, length );
                }
	break;
	case 42:
#line 180 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_XMARK, sloc, "!", 1 ); }
	break;
	case 43:
#line 181 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_PERCENT, sloc, "%", 1 ); }
	break;
	case 44:
#line 182 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_AMPERSAND, sloc, "&", 1 ); }
	break;
	case 45:
#line 183 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_LPN, sloc, "(", 1 ); }
	break;
	case 46:
#line 184 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_RPN, sloc, ")", 1 ); }
	break;
	case 47:
#line 185 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_ASTERISK, sloc, "*", 1 ); }
	break;
	case 48:
#line 186 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_PLUS, sloc, "+", 1 ); }
	break;
	case 49:
#line 187 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_COMMA, sloc, ",", 1 ); }
	break;
	case 50:
#line 188 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_MINUS, sloc, "-", 1 ); }
	break;
	case 51:
#line 189 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_PERIOD, sloc, ".", 1 ); }
	break;
	case 52:
#line 190 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_SOLIDUS, sloc, "/", 1 ); }
	break;
	case 53:
#line 191 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_COLON, sloc, ":", 1 ); }
	break;
	case 54:
#line 192 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_SEMICOLON, sloc, ";", 1 ); }
	break;
	case 55:
#line 193 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_LESS, sloc, "<", 1 ); }
	break;
	case 56:
#line 194 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_ASSIGN, sloc, "=", 1 ); }
	break;
	case 57:
#line 195 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_GREATER, sloc, ">", 1 ); }
	break;
	case 58:
#line 196 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_QMARK, sloc, "?", 1 ); }
	break;
	case 59:
#line 197 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_LSQ, sloc, "[", 1 ); }
	break;
	case 60:
#line 198 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_RSQ, sloc, "]", 1 ); }
	break;
	case 61:
#line 199 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_CARET, sloc, "^", 1 ); }
	break;
	case 62:
#line 200 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_LBR, sloc, "{", 1 ); }
	break;
	case 63:
#line 201 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_VBAR, sloc, "|", 1 ); }
	break;
	case 64:
#line 202 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_RBR, sloc, "}", 1 ); }
	break;
	case 65:
#line 203 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_TILDE, sloc, "~", 1 ); }
	break;
	case 66:
#line 205 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_INCREMENT, sloc, "++", 2 ); }
	break;
	case 67:
#line 206 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_DECREMENT, sloc, "--", 2 ); }
	break;
	case 68:
#line 208 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_LSHIFT, sloc, "<<", 2 ); }
	break;
	case 69:
#line 209 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_RSHIFT, sloc, ">>", 2 ); }
	break;
	case 70:
#line 210 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_URSHIFT, sloc, ">>>", 3 ); }
	break;
	case 71:
#line 212 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_NOTEQUAL, sloc, "!=", 2 ); }
	break;
	case 72:
#line 213 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_LESSEQUAL, sloc, "<=", 2 ); }
	break;
	case 73:
#line 214 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_EQUAL, sloc, "==", 2 ); }
	break;
	case 74:
#line 215 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_GREATEREQUAL, sloc, ">=", 2 ); }
	break;
	case 75:
#line 216 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_NOTIN, sloc, "!in", 3 ); }
	break;
	case 76:
#line 217 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_NOTIS, sloc, "!is", 3 ); }
	break;
	case 77:
#line 219 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_MODASSIGN, sloc, "%=", 2 ); }
	break;
	case 78:
#line 220 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_BITANDASSIGN, sloc, "&=", 2 ); }
	break;
	case 79:
#line 221 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_MULASSIGN, sloc, "*=", 2 ); }
	break;
	case 80:
#line 222 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_ADDASSIGN, sloc, "+=", 2 ); }
	break;
	case 81:
#line 223 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_SUBASSIGN, sloc, "-=", 2 ); }
	break;
	case 82:
#line 224 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_DIVASSIGN, sloc, "/=", 2 ); }
	break;
	case 83:
#line 225 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_BITXORASSIGN, sloc, "^=", 2 ); }
	break;
	case 84:
#line 226 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_BITORASSIGN, sloc, "|=", 2 ); }
	break;
	case 85:
#line 227 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_INTDIVASSIGN, sloc, "~=", 2 ); }
	break;
	case 86:
#line 228 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_LSHIFTASSIGN, sloc, "<<=", 3 ); }
	break;
	case 87:
#line 229 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_RSHIFTASSIGN, sloc, ">>=", 3 ); }
	break;
	case 88:
#line 230 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_URSHIFTASSIGN, sloc, ">>>=", 4 ); }
	break;
	case 89:
#line 232 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_LOGICAND, sloc, "&&", 2 ); }
	break;
	case 90:
#line 233 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_LOGICXOR, sloc, "^^", 2 ); }
	break;
	case 91:
#line 234 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_LOGICOR, sloc, "||", 2 ); }
	break;
	case 92:
#line 236 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_EACHKEY, sloc, "::", 2 ); }
	break;
	case 93:
#line 237 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_ELLIPSIS, sloc, "...", 3 ); }
	break;
	case 94:
#line 243 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
	{ {cs = 30; goto _again;} }
	break;
#line 2084 "xec_parser_ragel.cpp"
		}
	}
	}

	_out: {}
	}

#line 433 "../../toolbox/source/xec/lib/xec_parser_ragel.rl"
        
        offset += read;
    }

    if ( ! ferror( file ) )
    {
        MTOKEN( XEC_TOKEN_EOF, offset, "", 0 );
    }

#undef MTOKEN
#undef TOKEN

error:

    // Close file.
    free( buffer );
    fclose( file );


    return diagnostics.size() == 0;
}



#pragma unused( lexer_first_final )
#pragma unused( lexer_error )
#pragma unused( lexer_en_main )






