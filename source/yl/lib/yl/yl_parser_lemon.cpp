/* Driver template for the LEMON parser generator.
** The author disclaims copyright to this source code.
*/
/* First off, code is included that follows the "include" declaration
** in the input grammar file. */
#include <stdio.h>
#line 19 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"


#include <assert.h>
#include "xec_parser.h"
#include "xec_token.h"
#include "xec_ast.h"



struct xec_token_scope
{
    xec_token*          token;
    xec_ast_scope*      scope;
};

inline xec_token_scope make_token_scope(
                xec_token* token, xec_ast_scope* scope )
{
    xec_token_scope result;
    result.token = token;
    result.scope = scope;
    return result;
}


struct xec_token_op
{
    xec_token*          token;
    xec_ast_opkind   op;
};

inline xec_token_op make_token_op(
                xec_token* token, xec_ast_opkind op )
{
    xec_token_op result;
    result.token = token;
    result.op = op;
    return result;
}


#line 105 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"



void xec_parser::destroy( xec_token* token )
{
    token->~xec_token();
    recycle_tokens.push_back( token );
}


#line 61 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
/* Next is all token values, in a form suitable for use by makeheaders.
** This section will be null unless lemon is run with the -m switch.
*/
/* 
** These constants (all generated automatically by the parser generator)
** specify the various kinds of tokens (terminals) that the parser
** understands. 
**
** Each symbol here is a terminal symbol in the grammar.
*/
/* Make sure the INTERFACE macro is defined.
*/
#ifndef INTERFACE
# define INTERFACE 1
#endif
/* The next thing included is series of defines which control
** various aspects of the generated parser.
**    YYCODETYPE         is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 terminals
**                       and nonterminals.  "int" is used otherwise.
**    YYNOCODE           is a number of type YYCODETYPE which corresponds
**                       to no legal terminal or nonterminal number.  This
**                       number is used to fill in empty slots of the hash 
**                       table.
**    YYFALLBACK         If defined, this indicates that one or more tokens
**                       have fall-back values which should be used if the
**                       original value of the token will not parse.
**    YYACTIONTYPE       is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 rules and
**                       states combined.  "int" is used otherwise.
**    XecParseTOKENTYPE     is the data type used for minor tokens given 
**                       directly to the parser from the tokenizer.
**    YYMINORTYPE        is the data type used for all minor tokens.
**                       This is typically a union of many types, one of
**                       which is XecParseTOKENTYPE.  The entry in the union
**                       for base tokens is called "yy0".
**    YYSTACKDEPTH       is the maximum depth of the parser's stack.  If
**                       zero the stack is dynamically sized using realloc()
**    XecParseARG_SDECL     A static variable declaration for the %extra_argument
**    XecParseARG_PDECL     A parameter declaration for the %extra_argument
**    XecParseARG_STORE     Code to store %extra_argument into yypParser
**    XecParseARG_FETCH     Code to extract %extra_argument from yypParser
**    YYNSTATE           the combined number of states.
**    YYNRULE            the number of rules in the grammar
**    YYERRORSYMBOL      is the code number of the error symbol.  If not
**                       defined, then do no error processing.
*/
#define YYCODETYPE unsigned char
#define YYNOCODE 159
#define YYACTIONTYPE unsigned short int
#define XecParseTOKENTYPE  xec_token* 
typedef union {
  int yyinit;
  XecParseTOKENTYPE yy0;
  xec_stmt_for* yy16;
  xec_token* yy19;
  xec_ast_func* yy45;
  xec_name_name* yy75;
  xec_name_list* yy118;
  xec_new_array* yy134;
  xec_new_object* yy182;
  xec_stmt_if* yy188;
  xec_new_table* yy191;
  xec_expr_list* yy208;
  xec_stmt_do* yy209;
  xec_token_scope yy218;
  xec_stmt_try* yy224;
  xec_stmt_using* yy227;
  xec_token_op yy235;
  xec_stmt_foreach* yy237;
  xec_stmt_catch* yy256;
  xec_ast_node* yy259;
  xec_stmt_switch* yy267;
  xec_stmt_block* yy268;
  xec_stmt_while* yy278;
} YYMINORTYPE;
#ifndef YYSTACKDEPTH
#define YYSTACKDEPTH 100
#endif
#define XecParseARG_SDECL  xec_parser* p ;
#define XecParseARG_PDECL , xec_parser* p 
#define XecParseARG_FETCH  xec_parser* p  = yypParser->p 
#define XecParseARG_STORE yypParser->p  = p 
#define YYNSTATE 406
#define YYNRULE 222
#define YY_NO_ACTION      (YYNSTATE+YYNRULE+2)
#define YY_ACCEPT_ACTION  (YYNSTATE+YYNRULE+1)
#define YY_ERROR_ACTION   (YYNSTATE+YYNRULE)

/* The yyzerominor constant is used to initialize instances of
** YYMINORTYPE objects to zero. */
static const YYMINORTYPE yyzerominor = { 0 };

/* Define the yytestcase() macro to be a no-op if is not already defined
** otherwise.
**
** Applications can choose to define yytestcase() in the %include section
** to a macro that can assist in verifying code coverage.  For production
** code the yytestcase() macro should be turned off.  But it is useful
** for testing.
*/
#ifndef yytestcase
# define yytestcase(X)
#endif


/* Next are the tables used to determine what action to take based on the
** current state and lookahead token.  These tables are used to implement
** functions that take a state number and lookahead value and return an
** action integer.  
**
** Suppose the action integer is N.  Then the action is determined as
** follows
**
**   0 <= N < YYNSTATE                  Shift N.  That is, push the lookahead
**                                      token onto the stack and goto state N.
**
**   YYNSTATE <= N < YYNSTATE+YYNRULE   Reduce by rule N-YYNSTATE.
**
**   N == YYNSTATE+YYNRULE              A syntax error has occurred.
**
**   N == YYNSTATE+YYNRULE+1            The parser accepts its input.
**
**   N == YYNSTATE+YYNRULE+2            No such action.  Denotes unused
**                                      slots in the yy_action[] table.
**
** The action table is constructed as a single large table named yy_action[].
** Given state S and lookahead X, the action is computed as
**
**      yy_action[ yy_shift_ofst[S] + X ]
**
** If the index value yy_shift_ofst[S]+X is out of range or if the value
** yy_lookahead[yy_shift_ofst[S]+X] is not equal to X or if yy_shift_ofst[S]
** is equal to YY_SHIFT_USE_DFLT, it means that the action is not in the table
** and that yy_default[S] should be used instead.  
**
** The formula above is for computing the action when the lookahead is
** a terminal symbol.  If the lookahead is a non-terminal (as occurs after
** a reduce action) then the yy_reduce_ofst[] array is used in place of
** the yy_shift_ofst[] array and YY_REDUCE_USE_DFLT is used in place of
** YY_SHIFT_USE_DFLT.
**
** The following are the tables generated in this section:
**
**  yy_action[]        A single table containing all actions.
**  yy_lookahead[]     A table containing the lookahead for each entry in
**                     yy_action.  Used to detect hash collisions.
**  yy_shift_ofst[]    For each state, the offset into yy_action for
**                     shifting terminals.
**  yy_reduce_ofst[]   For each state, the offset into yy_action for
**                     shifting non-terminals after a reduce.
**  yy_default[]       Default action for each state.
*/
static const YYACTIONTYPE yy_action[] = {
 /*     0 */   149,  171,  172,  177,  271,  101,    2,  258,  248,  102,
 /*    10 */   119,  355,  192,  195,  197,    7,  199,  212,   16,   15,
 /*    20 */   203,   98,   97,   51,   33,   35,    6,  330,  143,  352,
 /*    30 */   400,  242,  353,   63,   61,  401,  402,   44,  121,  137,
 /*    40 */   134,  373,  357,  126,  341,  135,  317,  125,  136,  130,
 /*    50 */   157,  158,  160,  162,  108,  165,  166,  141,  376,   66,
 /*    60 */   396,  105,  397,  191,  221,  399,  405,  171,  283,  177,
 /*    70 */   132,  248,  174,  373,  357,  128,   31,  114,  192,  195,
 /*    80 */   197,    7,  199,  212,   16,   15,  203,   98,   97,   27,
 /*    90 */   327,   35,   76,   78,   80,   83,  132,  352,  353,  373,
 /*   100 */   357,  128,  173,  356,  121,   74,   75,  373,  357,  126,
 /*   110 */   341,  135,  317,  125,  136,  130,  157,  158,  160,  162,
 /*   120 */   108,  165,  166,  141,  376,  336,  396,  105,  397,  191,
 /*   130 */   387,   59,  274,  267,  283,  171,  132,  177,  287,  373,
 /*   140 */   357,  128,  248,  233,  119,  116,  192,  195,  197,    7,
 /*   150 */   199,  212,   16,   15,  203,   98,   97,   28,  222,   35,
 /*   160 */   334,  138,  248,  181,  132,  295,  353,  373,  357,  128,
 /*   170 */    46,   32,  121,  173,  245,  373,  357,  126,  341,  135,
 /*   180 */   317,  125,  136,  130,  157,  158,  160,  162,  108,  165,
 /*   190 */   166,  141,  376,  173,  396,  105,  397,  191,  148,  251,
 /*   200 */   405,  171,  283,  177,  132,  248,  185,  373,  357,  128,
 /*   210 */   239,  114,  192,  195,  197,    7,  199,  212,   16,   15,
 /*   220 */   203,   98,   97,  268,  101,   35,  258,  113,  102,   29,
 /*   230 */   278,   96,  353,   54,  237,  150,  173,   37,  121,   90,
 /*   240 */   354,  373,  357,  126,  341,  135,  317,  125,  136,  130,
 /*   250 */   157,  158,  160,  162,  108,  165,  166,  141,  376,   67,
 /*   260 */   396,  105,  397,  191,  335,  333,  274,  262,  283,  171,
 /*   270 */    70,  177,  351,   17,   69,  153,   29,  278,  119,   68,
 /*   280 */   192,  195,  197,    7,  199,  212,   16,   15,  203,   98,
 /*   290 */    97,  109,   33,   35,   28,   65,  143,   64,  138,   53,
 /*   300 */   353,   73,   71,   72,   62,   47,  121,   52,  118,  373,
 /*   310 */   357,  126,  341,  135,  317,  125,  136,  130,  157,  158,
 /*   320 */   160,  162,  108,  165,  166,  141,  376,  263,  396,  105,
 /*   330 */   397,  191,  113,  249,  405,  171,  283,  177,  248,  403,
 /*   340 */   115,   92,   38,  380,  119,  110,  192,  195,  197,    7,
 /*   350 */   199,  212,   16,   15,  203,   98,   97,   95,   26,   35,
 /*   360 */   234,  150,  143,  220,   14,   90,  353,  351,    9,  133,
 /*   370 */   303,   47,  121,  220,   18,  373,  357,  126,  341,  135,
 /*   380 */   317,  125,  136,  130,  157,  158,  160,  162,  108,  165,
 /*   390 */   166,  141,  376,  175,  396,  105,  397,  191,  113,  343,
 /*   400 */   405,  171,  283,  177,  352,  299,  243,   89,   37,  254,
 /*   410 */   119,  240,  192,  195,  197,    7,  199,  212,   16,   15,
 /*   420 */   203,   98,   97,  629,    1,   35,  391,  260,  248,  120,
 /*   430 */    91,   94,  353,  182,  385,  184,   93,  129,  121,   60,
 /*   440 */   299,  373,  357,  126,  341,  135,  317,  125,  136,  130,
 /*   450 */   157,  158,  160,  162,  108,  165,  166,  141,  376,  122,
 /*   460 */   396,  105,  397,  191,  381,  346,  405,  171,  283,  177,
 /*   470 */   186,   50,  127,  374,   49,  238,   48,  114,  192,  195,
 /*   480 */   197,    7,  199,  212,   16,   15,  203,   98,   97,   21,
 /*   490 */    42,   35,    8,   22,  111,   20,   12,  200,  353,   30,
 /*   500 */   144,  202,   23,  272,  121,  290,   10,  373,  357,  126,
 /*   510 */   341,  135,  317,  125,  136,  130,  157,  158,  160,  162,
 /*   520 */   108,  165,  166,  141,  376,  292,  396,  105,  397,  191,
 /*   530 */   353,  306,  274,  275,  283,  171,  132,  177,  294,  373,
 /*   540 */   357,  128,  341,  135,  316,  114,  192,  195,  197,    7,
 /*   550 */   199,  212,   16,   15,  203,   98,   97,  296,  300,   35,
 /*   560 */   304,  307,   19,  320,  322,  323,  353,  328,  291,  332,
 /*   570 */   331,  337,  121,   25,  375,  373,  357,  126,  341,  135,
 /*   580 */   317,  125,  136,  130,  157,  158,  160,  162,  108,  165,
 /*   590 */   166,  141,  376,   24,  396,  105,  397,  191,   45,  230,
 /*   600 */   274,  282,  283,  171,  378,  177,  319,  252,   40,  247,
 /*   610 */   293,  226,  119,  244,  192,  195,  197,    7,  199,  212,
 /*   620 */    16,   15,  203,   98,   97,    5,    4,   35,    3,  117,
 /*   630 */   256,   86,  630,  139,  353,   87,  630,  630,  630,  630,
 /*   640 */   121,  630,  630,  373,  357,  126,  341,  135,  317,  125,
 /*   650 */   136,  130,  157,  158,  160,  162,  108,  165,  166,  141,
 /*   660 */   376,  630,  396,  105,  397,  191,  630,  348,  405,  171,
 /*   670 */   283,  177,  630,  630,  630,  630,  630,  630,  630,  114,
 /*   680 */   192,  195,  197,    7,  199,  212,   16,   15,  203,   98,
 /*   690 */    97,  630,  630,   35,  630,  630,  630,  630,  630,  630,
 /*   700 */   353,  630,  630,  630,  630,  630,  121,  630,  630,  373,
 /*   710 */   357,  126,  341,  135,  317,  125,  136,  130,  157,  158,
 /*   720 */   160,  162,  108,  165,  166,  141,  376,  630,  396,  105,
 /*   730 */   397,  191,  353,  630,  274,  350,  283,  171,  132,  177,
 /*   740 */   630,  373,  357,  128,  341,  135,  318,  114,  192,  195,
 /*   750 */   197,    7,  199,  212,   16,   15,  203,   98,   97,  630,
 /*   760 */   630,   35,  630,  630,  630,  630,  630,  630,  353,  630,
 /*   770 */   630,  630,  630,  630,  121,  630,  630,  373,  357,  126,
 /*   780 */   341,  135,  317,  125,  136,  130,  157,  158,  160,  162,
 /*   790 */   108,  165,  166,  141,  376,  630,  396,  105,  397,  191,
 /*   800 */   353,  630,  274,  313,  283,  171,  132,  177,  630,  373,
 /*   810 */   357,  128,  341,  135,  312,  114,  192,  195,  197,    7,
 /*   820 */   199,  212,   16,   15,  203,   98,   97,  630,  630,   35,
 /*   830 */   630,  630,  630,  630,  630,  630,  353,  630,  630,  630,
 /*   840 */   630,  630,  121,  630,  630,  373,  357,  126,  341,  135,
 /*   850 */   317,  125,  136,  130,  157,  158,  160,  162,  108,  165,
 /*   860 */   166,  141,  376,  630,  396,  105,  397,  191,  630,  630,
 /*   870 */   274,  277,  283,  308,  630,   11,  630,  630,  178,   29,
 /*   880 */   278,  630,  379,  183,  236,  266,   99,  179,  398,  630,
 /*   890 */   102,  630,   36,  630,  109,  349,  347,  345,  344,  342,
 /*   900 */    84,   82,   77,   85,   79,   81,  353,  630,  630,  630,
 /*   910 */   630,  630,  132,  630,  630,  373,  357,  128,  341,  135,
 /*   920 */   317,  125,  136,  130,  157,  158,  160,  162,  107,  180,
 /*   930 */   297,  288,  286,  285,  284,  281,  279,  276,  273,  269,
 /*   940 */   630,  630,  310,   43,   58,  206,  207,  208,   34,   57,
 /*   950 */   309,  311,  314,  308,  340,   11,  630,  630,  178,   29,
 /*   960 */   278,  630,  379,  183,  236,  388,   99,  179,  398,  630,
 /*   970 */   102,  630,   36,  630,  109,  349,  347,  345,  344,  342,
 /*   980 */    84,   82,   77,   85,   79,   81,  353,  630,  630,  630,
 /*   990 */   630,  630,  132,  630,  630,  373,  357,  128,  341,  135,
 /*  1000 */   317,  125,  136,  130,  157,  158,  160,  164,  630,  180,
 /*  1010 */   630,  630,  630,  630,  630,  630,  630,  630,  630,  630,
 /*  1020 */   630,  630,  310,   43,   58,  206,  207,  208,   34,   57,
 /*  1030 */   309,  311,  314,  630,  340,  406,  308,  630,   11,  630,
 /*  1040 */   630,  178,   29,  278,  630,  379,  183,  236,  630,   99,
 /*  1050 */   179,  398,  630,  102,  630,   36,  630,  109,  349,  347,
 /*  1060 */   345,  344,  342,   84,   82,   77,   85,   79,   81,  353,
 /*  1070 */   630,  630,  630,  630,  630,  132,  630,  630,  373,  357,
 /*  1080 */   128,  341,  135,  317,  125,  136,  130,  157,  158,  163,
 /*  1090 */   353,  630,  180,  630,  630,  630,  132,  630,  630,  373,
 /*  1100 */   357,  128,  341,  135,  324,  310,   43,   58,  206,  207,
 /*  1110 */   208,   34,   57,  309,  311,  314,  308,  340,   11,  630,
 /*  1120 */   630,  178,   29,  278,  630,  379,  183,  236,  404,   99,
 /*  1130 */   179,  398,  630,  102,  630,   36,  630,  109,  349,  347,
 /*  1140 */   345,  344,  342,   84,   82,   77,   85,   79,   81,  353,
 /*  1150 */   630,  630,  630,  630,  630,  132,  630,  630,  373,  357,
 /*  1160 */   128,  341,  135,  317,  125,  136,  130,  157,  161,  353,
 /*  1170 */   630,  630,  180,  630,  630,  132,  630,  630,  373,  357,
 /*  1180 */   128,  341,  135,  317,  124,  310,   43,   58,  206,  207,
 /*  1190 */   208,   34,   57,  309,  311,  314,  308,  340,   11,  630,
 /*  1200 */   630,  178,   29,  278,  630,  379,  183,  236,  235,   99,
 /*  1210 */   179,  398,  630,  102,  630,   36,  630,  109,  349,  347,
 /*  1220 */   345,  344,  342,   84,   82,   77,   85,   79,   81,  353,
 /*  1230 */   630,  630,  630,  630,  630,  132,  630,  630,  373,  357,
 /*  1240 */   128,  341,  135,  317,  125,  136,  130,  159,  353,  630,
 /*  1250 */   630,  630,  180,  630,  132,  630,  630,  373,  357,  128,
 /*  1260 */   341,  135,  317,  125,  142,  310,   43,   58,  206,  207,
 /*  1270 */   208,   34,   57,  309,  311,  314,  308,  340,   11,  630,
 /*  1280 */   630,  178,   29,  278,  630,  379,  183,  236,  630,   99,
 /*  1290 */   179,  398,  259,  102,  630,   36,  630,  109,  349,  347,
 /*  1300 */   345,  344,  342,   84,   82,   77,   85,   79,   81,  353,
 /*  1310 */   630,  630,  630,  630,  630,  132,  630,  630,  373,  357,
 /*  1320 */   128,  341,  135,  317,  125,  136,  131,  353,  630,  630,
 /*  1330 */   630,  630,  180,  132,  630,  630,  373,  357,  128,  341,
 /*  1340 */   135,  317,  125,  145,  630,  310,   43,   58,  206,  207,
 /*  1350 */   208,   34,   57,  309,  311,  314,  308,  340,   11,  630,
 /*  1360 */   630,  178,   29,  278,  630,  379,  183,  236,  630,  630,
 /*  1370 */   179,  630,  630,  630,  630,   36,  630,  109,  349,  347,
 /*  1380 */   345,  344,  342,   84,   82,   77,   85,   79,   81,  353,
 /*  1390 */   630,  630,  630,  630,  630,  132,  630,  630,  373,  357,
 /*  1400 */   128,  341,  135,  317,  125,  140,  630,  353,  630,  630,
 /*  1410 */   630,  630,  180,  132,  630,  630,  373,  357,  128,  341,
 /*  1420 */   135,  317,  123,  630,  630,  310,   43,   58,  206,  207,
 /*  1430 */   208,   34,   57,  309,  311,  314,  308,  340,   11,  630,
 /*  1440 */   630,  178,   29,  278,  630,  379,  183,  256,  630,  630,
 /*  1450 */   179,  630,  630,  630,  630,   36,  630,  109,  349,  347,
 /*  1460 */   345,  344,  342,   84,   82,   77,   85,   79,   81,   41,
 /*  1470 */   630,  353,  630,  630,  630,  630,  630,  132,  630,  371,
 /*  1480 */   373,  357,  128,  341,  135,  305,  153,   29,  278,  630,
 /*  1490 */   630,  630,  180,  630,  630,   91,  630,  630,  630,  630,
 /*  1500 */   630,  171,  109,  177,  630,  310,   43,   58,  206,  207,
 /*  1510 */   208,   34,   57,  309,  311,  314,  630,  340,  369,  358,
 /*  1520 */   359,  360,  361,  362,  363,  364,  365,  366,  367,  368,
 /*  1530 */   630,  630,  353,  630,  171,  630,  177,  393,  121,  241,
 /*  1540 */   386,  373,  357,  126,  341,  135,  317,  125,  136,  130,
 /*  1550 */   157,  158,  160,  162,  108,  165,  166,  141,  370,  104,
 /*  1560 */   392,  630,  630,  630,  339,  353,  630,  630,  630,  217,
 /*  1570 */   393,  121,  338,  386,  373,  357,  126,  341,  135,  317,
 /*  1580 */   125,  136,  130,  157,  158,  160,  162,  108,  165,  166,
 /*  1590 */   141,  370,  106,  392,  171,  630,  177,  153,   29,  278,
 /*  1600 */   630,  630,  630,  218,  630,  630,  630,  630,  630,  630,
 /*  1610 */   630,  630,  630,  109,  349,  347,  345,  344,  342,   84,
 /*  1620 */    82,   77,   85,   79,   81,  353,  630,  171,  630,  177,
 /*  1630 */   393,  121,  241,  386,  373,  357,  126,  341,  135,  317,
 /*  1640 */   125,  136,  130,  157,  158,  160,  162,  108,  165,  166,
 /*  1650 */   141,  370,  106,  392,  630,  630,  630,  196,  353,  630,
 /*  1660 */   171,  630,  177,  393,  121,  241,  386,  373,  357,  126,
 /*  1670 */   341,  135,  317,  125,  136,  130,  157,  158,  160,  162,
 /*  1680 */   108,  165,  166,  141,  370,  106,  392,  630,  630,  630,
 /*  1690 */   204,  353,  630,  630,  630,  630,  393,  121,  338,  386,
 /*  1700 */   373,  357,  126,  341,  135,  317,  125,  136,  130,  157,
 /*  1710 */   158,  160,  162,  108,  165,  166,  141,  370,  106,  392,
 /*  1720 */   171,  630,  177,  630,  630,  630,  630,  630,  630,  219,
 /*  1730 */   630,  630,  630,  353,  630,  630,  630,  630,  630,  132,
 /*  1740 */   630,  630,  373,  357,  128,  341,  135,  325,  630,  630,
 /*  1750 */   630,  353,  630,  171,  630,  177,  393,  121,  241,  386,
 /*  1760 */   373,  357,  126,  341,  135,  317,  125,  136,  130,  157,
 /*  1770 */   158,  160,  162,  108,  165,  166,  141,  370,  106,  392,
 /*  1780 */   630,  630,  630,  198,  353,  630,  630,  630,  630,  393,
 /*  1790 */   121,  241,  386,  373,  357,  126,  341,  135,  317,  125,
 /*  1800 */   136,  130,  157,  158,  160,  162,  108,  165,  166,  141,
 /*  1810 */   370,  106,  392,  630,  630,  630,  194,  353,  630,  630,
 /*  1820 */   630,  630,  630,  132,  630,  630,  373,  357,  128,  341,
 /*  1830 */   135,  321,  149,  630,  172,  353,  630,  630,  155,  630,
 /*  1840 */   171,  132,  177,  630,  373,  357,  128,  341,  135,  317,
 /*  1850 */   125,  136,  130,  157,  158,  160,  162,  108,  165,  168,
 /*  1860 */   630,  630,  257,  630,  630,  261,  255,  253,  250,  630,
 /*  1870 */   630,  353,  171,  630,  177,  630,  315,  121,  630,  386,
 /*  1880 */   373,  357,  126,  341,  135,  317,  125,  136,  130,  157,
 /*  1890 */   158,  160,  162,  108,  165,  166,  141,  370,  193,  392,
 /*  1900 */   630,  630,  630,  353,  630,  630,  630,  630,  393,  121,
 /*  1910 */   151,  386,  373,  357,  126,  341,  135,  317,  125,  136,
 /*  1920 */   130,  157,  158,  160,  162,  108,  165,  166,  141,  370,
 /*  1930 */   106,  392,  353,  630,  630,  630,  630,  630,  132,  630,
 /*  1940 */   630,  373,  357,  128,  341,  135,  317,  125,  136,  130,
 /*  1950 */   157,  158,  160,  162,  108,  167,  630,  630,  229,  630,
 /*  1960 */   171,  353,  177,  630,  630,  630,  630,  132,  630,  630,
 /*  1970 */   373,  357,  128,  341,  135,  326,  630,  630,  630,  630,
 /*  1980 */   630,  630,  630,  630,  630,  630,  630,  630,  630,  630,
 /*  1990 */   154,  353,  171,  630,  177,  630,  315,  121,  630,  386,
 /*  2000 */   373,  357,  126,  341,  135,  317,  125,  136,  130,  157,
 /*  2010 */   158,  160,  162,  108,  165,  166,  141,  370,  193,  392,
 /*  2020 */   630,  630,  630,  353,  630,  630,  630,  630,  315,  121,
 /*  2030 */   630,  386,  373,  357,  126,  341,  135,  317,  125,  136,
 /*  2040 */   130,  157,  158,  160,  162,  108,  165,  166,  141,  370,
 /*  2050 */   193,  392,  353,  630,  630,  630,  630,  630,  132,  630,
 /*  2060 */   630,  373,  357,  128,  341,  135,  329,  630,  630,  630,
 /*  2070 */   630,  630,  630,  630,  353,  630,  630,  630,  630,  171,
 /*  2080 */   132,  177,  630,  373,  357,  128,  341,  135,  301,  630,
 /*  2090 */   630,  630,  630,  630,  630,  630,  630,  630,  630,  630,
 /*  2100 */   630,  630,  630,  630,  630,  630,  630,  630,  630,  630,
 /*  2110 */   353,  630,  171,  630,  177,  393,  121,  394,  386,  373,
 /*  2120 */   357,  126,  341,  135,  317,  125,  136,  130,  157,  158,
 /*  2130 */   160,  162,  108,  165,  166,  141,  370,  106,  392,  630,
 /*  2140 */   630,  630,  630,  353,  630,  630,  630,  630,  393,  121,
 /*  2150 */   395,  386,  373,  357,  126,  341,  135,  317,  125,  136,
 /*  2160 */   130,  157,  158,  160,  162,  108,  165,  166,  141,  370,
 /*  2170 */   106,  392,  630,  630,  630,  630,  630,  630,  630,  630,
 /*  2180 */   630,  630,  630,  630,  630,  630,  630,  630,  630,  630,
 /*  2190 */   630,  630,  630,  630,  630,  630,  630,  630,  630,  171,
 /*  2200 */   630,  177,  630,  630,  630,  630,  630,  630,  630,  630,
 /*  2210 */   630,  630,  630,  630,  630,  630,  630,  630,  630,  630,
 /*  2220 */   630,  630,  630,  630,  630,  630,  630,  630,  630,  630,
 /*  2230 */   353,  630,  630,  630,  630,  393,  121,  201,  386,  373,
 /*  2240 */   357,  126,  341,  135,  317,  125,  136,  130,  157,  158,
 /*  2250 */   160,  162,  108,  165,  166,  141,  370,  106,  392,  630,
 /*  2260 */   171,  630,  177,  630,  630,  630,  630,  189,  187,  630,
 /*  2270 */   630,  630,  630,  630,  630,  630,  630,  630,  630,  630,
 /*  2280 */   630,  630,  630,  630,  630,  630,  225,  630,  171,  630,
 /*  2290 */   177,  353,  630,  630,  630,  630,  630,  132,  630,  188,
 /*  2300 */   373,  357,  128,  341,  135,  317,  125,  136,  130,  157,
 /*  2310 */   158,  160,  162,  108,  165,  166,  141,  370,  630,  353,
 /*  2320 */   630,  630,  630,  630,  315,  121,  630,  386,  373,  357,
 /*  2330 */   126,  341,  135,  317,  125,  136,  130,  157,  158,  160,
 /*  2340 */   162,  108,  165,  166,  141,  370,  193,  392,  630,  630,
 /*  2350 */   630,  630,  630,  630,  630,  630,  630,  630,  630,  630,
 /*  2360 */   630,  630,  630,  630,  630,  630,  630,  630,  630,  630,
 /*  2370 */   630,  630,  630,  630,  630,  171,  630,  177,  630,  630,
 /*  2380 */   630,  630,  630,  630,  630,  630,  630,  630,  630,  630,
 /*  2390 */   630,  630,  630,  630,  630,  630,  630,  630,  630,  630,
 /*  2400 */   630,  630,  630,  630,  630,  630,  353,  630,  171,  630,
 /*  2410 */   177,  210,  121,  630,  386,  373,  357,  126,  341,  135,
 /*  2420 */   317,  125,  136,  130,  157,  158,  160,  162,  108,  165,
 /*  2430 */   166,  141,  370,  193,  392,  630,  630,  630,  630,  353,
 /*  2440 */   630,  630,  630,  630,  176,  121,  630,  386,  373,  357,
 /*  2450 */   126,  341,  135,  317,  125,  136,  130,  157,  158,  160,
 /*  2460 */   162,  108,  165,  166,  141,  370,  193,  392,  630,  630,
 /*  2470 */   630,  630,  630,  630,  630,  630,  630,  630,  630,  630,
 /*  2480 */   630,  630,  630,  630,  630,  630,  630,  630,  630,  630,
 /*  2490 */   630,  630,  630,  630,  630,  171,  630,  177,  630,  630,
 /*  2500 */   630,  630,  630,  630,  630,  630,  630,  630,  630,  630,
 /*  2510 */   630,  630,  630,  630,  630,  630,  630,  630,  630,  630,
 /*  2520 */   630,  630,  630,  630,  630,  630,  353,  630,  171,  630,
 /*  2530 */   177,  246,  121,  630,  386,  373,  357,  126,  341,  135,
 /*  2540 */   317,  125,  136,  130,  157,  158,  160,  162,  108,  165,
 /*  2550 */   166,  141,  370,  193,  392,  171,  630,  177,  630,  353,
 /*  2560 */   223,  170,  630,  630,  630,  121,  630,  389,  373,  357,
 /*  2570 */   126,  341,  135,  317,  125,  136,  130,  157,  158,  160,
 /*  2580 */   162,  108,  165,  166,  141,  370,  353,  390,  630,  630,
 /*  2590 */   630,  630,  121,  630,  270,  373,  357,  126,  341,  135,
 /*  2600 */   317,  125,  136,  130,  157,  158,  160,  162,  108,  165,
 /*  2610 */   166,  141,  370,  630,  224,  171,  630,  177,  630,  630,
 /*  2620 */   630,  630,  630,  630,  630,  630,  630,  630,  630,  630,
 /*  2630 */   630,  630,  630,  630,  630,  630,  630,  630,  630,  630,
 /*  2640 */   630,  630,  630,  630,  630,  630,  353,  630,  171,  630,
 /*  2650 */   177,  209,  121,  630,  386,  373,  357,  126,  341,  135,
 /*  2660 */   317,  125,  136,  130,  157,  158,  160,  162,  108,  165,
 /*  2670 */   166,  141,  370,  193,  392,  171,  630,  177,  630,  353,
 /*  2680 */   630,  630,  630,  630,  630,  121,  630,  383,  373,  357,
 /*  2690 */   126,  341,  135,  317,  125,  136,  130,  157,  158,  160,
 /*  2700 */   162,  108,  165,  166,  141,  370,  353,  384,  630,  630,
 /*  2710 */   630,  630,  132,  630,  386,  373,  357,  128,  341,  135,
 /*  2720 */   317,  125,  136,  130,  157,  158,  160,  162,  108,  165,
 /*  2730 */   166,  141,  370,  146,  630,  171,  630,  177,  630,  630,
 /*  2740 */   630,  630,  630,  630,  630,  630,  630,  630,  630,  630,
 /*  2750 */   630,  630,  630,  630,  630,  630,  630,  630,  630,  630,
 /*  2760 */   630,  630,  171,  630,  177,  630,  353,  630,  630,  630,
 /*  2770 */   630,  630,  121,  630,  280,  373,  357,  126,  341,  135,
 /*  2780 */   317,  125,  136,  130,  157,  158,  160,  162,  108,  165,
 /*  2790 */   166,  141,  370,  353,  289,  171,  630,  177,  630,  132,
 /*  2800 */   630,  147,  373,  357,  128,  341,  135,  317,  125,  136,
 /*  2810 */   130,  157,  158,  160,  162,  108,  165,  166,  141,  370,
 /*  2820 */   630,  630,  171,  630,  177,  630,  353,  630,  630,  630,
 /*  2830 */   630,  630,  132,  630,  213,  373,  357,  128,  341,  135,
 /*  2840 */   317,  125,  136,  130,  157,  158,  160,  162,  108,  165,
 /*  2850 */   166,  141,  370,  353,  630,  171,  630,  177,  630,  132,
 /*  2860 */   630,  265,  373,  357,  128,  341,  135,  317,  125,  136,
 /*  2870 */   130,  157,  158,  160,  162,  108,  165,  166,  141,  370,
 /*  2880 */   630,  630,  171,  630,  177,  630,  353,  630,  630,  630,
 /*  2890 */   630,  630,  132,  630,  389,  373,  357,  128,  341,  135,
 /*  2900 */   317,  125,  136,  130,  157,  158,  160,  162,  108,  165,
 /*  2910 */   166,  141,  370,  353,  630,  171,  630,  177,  630,  132,
 /*  2920 */   630,  169,  373,  357,  128,  341,  135,  317,  125,  136,
 /*  2930 */   130,  157,  158,  160,  162,  108,  165,  166,  141,  370,
 /*  2940 */   630,  630,  171,  630,  177,  630,  353,  630,  630,  630,
 /*  2950 */   630,  630,  132,  630,  205,  373,  357,  128,  341,  135,
 /*  2960 */   317,  125,  136,  130,  157,  158,  160,  162,  108,  165,
 /*  2970 */   166,  141,  370,  353,  630,  171,  630,  177,  630,  132,
 /*  2980 */   630,  231,  373,  357,  128,  341,  135,  317,  125,  136,
 /*  2990 */   130,  157,  158,  160,  162,  108,  165,  166,  141,  370,
 /*  3000 */   630,  630,  171,  630,  177,  630,  353,  630,  630,  630,
 /*  3010 */   630,  630,  132,  630,  211,  373,  357,  128,  341,  135,
 /*  3020 */   317,  125,  136,  130,  157,  158,  160,  162,  108,  165,
 /*  3030 */   166,  141,  370,  353,  630,  171,  630,  177,  630,  132,
 /*  3040 */   630,  152,  373,  357,  128,  341,  135,  317,  125,  136,
 /*  3050 */   130,  157,  158,  160,  162,  108,  165,  166,  141,  370,
 /*  3060 */   630,  630,  171,  630,  177,  630,  353,  630,  630,  630,
 /*  3070 */   630,  630,  132,  630,  156,  373,  357,  128,  341,  135,
 /*  3080 */   317,  125,  136,  130,  157,  158,  160,  162,  108,  165,
 /*  3090 */   166,  141,  370,  353,  630,  171,  630,  177,  630,  132,
 /*  3100 */   630,  382,  373,  357,  128,  341,  135,  317,  125,  136,
 /*  3110 */   130,  157,  158,  160,  162,  108,  165,  166,  141,  370,
 /*  3120 */   630,  630,  171,  630,  177,  630,  353,  630,  630,  630,
 /*  3130 */   630,  630,  132,  630,  190,  373,  357,  128,  341,  135,
 /*  3140 */   317,  125,  136,  130,  157,  158,  160,  162,  108,  165,
 /*  3150 */   166,  141,  370,  353,  630,  171,  630,  177,  630,  132,
 /*  3160 */   630,  377,  373,  357,  128,  341,  135,  317,  125,  136,
 /*  3170 */   130,  157,  158,  160,  162,  108,  165,  166,  141,  370,
 /*  3180 */   630,  630,  171,  630,  177,  630,  353,  630,  630,  630,
 /*  3190 */   630,  630,  132,  630,  227,  373,  357,  128,  341,  135,
 /*  3200 */   317,  125,  136,  130,  157,  158,  160,  162,  108,  165,
 /*  3210 */   166,  141,  370,  353,  630,  171,  630,  177,  630,  132,
 /*  3220 */   630,  216,  373,  357,  128,  341,  135,  317,  125,  136,
 /*  3230 */   130,  157,  158,  160,  162,  108,  165,  166,  141,  370,
 /*  3240 */   630,  630,  171,  630,  177,  630,  353,  630,  630,  630,
 /*  3250 */   630,  630,  132,  630,  215,  373,  357,  128,  341,  135,
 /*  3260 */   317,  125,  136,  130,  157,  158,  160,  162,  108,  165,
 /*  3270 */   166,  141,  370,  353,  630,  630,  630,  630,  630,  132,
 /*  3280 */   630,  214,  373,  357,  128,  341,  135,  317,  125,  136,
 /*  3290 */   130,  157,  158,  160,  162,  108,  165,  166,  141,  370,
 /*  3300 */   153,   29,  278,  630,  379,  183,   39,  630,  630,  179,
 /*  3310 */   630,  630,  100,  630,   36,  630,  109,  349,  347,  345,
 /*  3320 */   344,  342,   84,   82,   77,   85,   79,   81,  630,  630,
 /*  3330 */   630,  630,  630,  630,  630,  630,  630,   42,  630,  630,
 /*  3340 */   630,  630,  630,  630,  630,  630,  630,  371,  630,  630,
 /*  3350 */   630,  180,  630,  630,  630,  630,  630,  630,  153,   29,
 /*  3360 */   278,  630,  379,  183,   39,  630,  630,  179,  298,  630,
 /*  3370 */   630,  630,   36,  630,  109,  349,  347,  345,  344,  342,
 /*  3380 */    84,   82,   77,   85,   79,   81,  369,  358,  359,  360,
 /*  3390 */   361,  362,  363,  364,  365,  366,  367,  368,  630,  630,
 /*  3400 */   630,  630,  630,  630,  630,  630,  630,  630,  630,  180,
 /*  3410 */   630,  630,  630,  630,  630,  630,  153,   29,  278,  630,
 /*  3420 */   379,  183,   39,  630,  630,  179,  302,  630,  630,  630,
 /*  3430 */    36,  630,  109,  349,  347,  345,  344,  342,   84,   82,
 /*  3440 */    77,   85,   79,   81,  630,  630,  630,  630,  630,  630,
 /*  3450 */   630,  630,  630,  630,  630,  630,  630,  630,  630,  630,
 /*  3460 */   630,  630,  630,  630,  630,  630,  630,  180,  630,  630,
 /*  3470 */   630,  630,  630,  630,  153,   29,  278,  630,  379,  183,
 /*  3480 */    39,  630,  630,  179,  630,  630,  630,  630,   36,  264,
 /*  3490 */   109,  349,  347,  345,  344,  342,   84,   82,   77,   85,
 /*  3500 */    79,   81,  630,  630,  630,  630,  630,  630,  630,  630,
 /*  3510 */   630,  630,  630,  630,  630,  630,  630,  630,  630,  630,
 /*  3520 */   630,  630,  630,  630,  630,  180,  630,  630,  630,  630,
 /*  3530 */   630,  630,  153,   29,  278,  630,  379,  183,   39,  630,
 /*  3540 */   630,  179,  630,  630,  103,  630,   36,  630,  109,  349,
 /*  3550 */   347,  345,  344,  342,   84,   82,   77,   85,   79,   81,
 /*  3560 */   630,  630,  630,  630,  630,  630,  630,  630,  630,  630,
 /*  3570 */   630,  630,  630,  630,  630,  630,  630,  630,  630,  630,
 /*  3580 */   630,  630,  630,  180,  630,  630,  630,  630,  630,  630,
 /*  3590 */   153,   29,  278,  630,  630,  183,   39,  630,  630,  179,
 /*  3600 */   630,  630,  630,  630,   36,  228,  109,  349,  347,  345,
 /*  3610 */   344,  342,   84,   82,   77,   85,   79,   81,  630,  630,
 /*  3620 */   630,  630,  630,  630,  630,  630,  630,  630,  630,  630,
 /*  3630 */   630,  630,  630,  630,  630,  630,  630,  630,  630,  630,
 /*  3640 */   630,  180,  630,  630,  630,  630,  630,  630,  153,   29,
 /*  3650 */   278,  630,  379,  183,   39,  630,  630,  179,  630,  630,
 /*  3660 */   630,  630,   36,  630,  109,  349,  347,  345,  344,  342,
 /*  3670 */    84,   82,   77,   85,   79,   81,  630,  630,  630,  630,
 /*  3680 */   630,  630,  630,  630,  630,  630,  630,  630,  630,  630,
 /*  3690 */   630,  630,  630,  630,  630,  630,  630,  630,  630,  180,
 /*  3700 */   630,  630,  630,  630,  630,  630,  153,   29,  278,  630,
 /*  3710 */   630,  183,   39,  372,  630,  179,  630,  630,  630,  630,
 /*  3720 */    36,  630,  109,  349,  347,  345,  344,  342,   84,   82,
 /*  3730 */    77,   85,   79,   81,  630,  630,  630,  630,  630,  630,
 /*  3740 */   630,  630,  630,  630,  630,  630,  630,  630,  630,  630,
 /*  3750 */   630,  630,  630,  630,  630,  630,  630,  180,  630,  630,
 /*  3760 */   630,  630,  630,  630,  153,   29,  278,  630,  630,  183,
 /*  3770 */    39,  630,  630,  179,  630,  630,  630,  630,   36,  232,
 /*  3780 */   109,  349,  347,  345,  344,  342,   84,   82,   77,   85,
 /*  3790 */    79,   81,  630,  630,  630,  630,  630,  630,  630,  630,
 /*  3800 */   630,  630,  630,  630,  630,  630,  630,  630,  630,  630,
 /*  3810 */   630,  630,  630,  630,  630,  180,  630,  630,  630,  630,
 /*  3820 */   630,  630,  153,   29,  278,  630,  630,  183,   39,  630,
 /*  3830 */   630,   88,  630,  630,  112,  630,   36,  630,  109,  349,
 /*  3840 */   347,  345,  344,  342,   84,   82,   77,   85,   79,   81,
 /*  3850 */   630,  630,  630,  630,  630,  630,  630,  630,  630,  630,
 /*  3860 */   630,  630,  630,  630,  630,  630,  630,  630,  630,  630,
 /*  3870 */   630,  630,  630,  180,  630,  630,  630,  630,  630,  630,
 /*  3880 */   153,   29,  278,  630,  630,  183,   39,  630,  630,  179,
 /*  3890 */   630,  630,  630,  630,   36,  630,  109,  349,  347,  345,
 /*  3900 */   344,  342,   84,   82,   77,   85,   79,   81,   42,  630,
 /*  3910 */   630,  630,  630,  630,   56,  630,  630,  630,  371,  630,
 /*  3920 */   630,  630,  630,  630,  630,  630,  630,  630,  630,  630,
 /*  3930 */   630,  180,  630,  630,  630,  630,  630,  630,  630,  630,
 /*  3940 */   630,  630,  630,  630,  630,  630,  630,  630,  630,  630,
 /*  3950 */   630,  630,  630,  630,  630,  630,  630,  369,  358,  359,
 /*  3960 */   360,  361,  362,  363,  364,  365,  366,  367,  368,  630,
 /*  3970 */   630,  630,  630,  630,  630,  630,  630,  630,  630,  630,
 /*  3980 */    55,
};
static const YYCODETYPE yy_lookahead[] = {
 /*     0 */    87,   88,   89,   90,   13,   14,  114,   16,   84,   18,
 /*    10 */    97,    8,   99,  100,  101,  102,  103,  104,  105,  106,
 /*    20 */   107,  108,  109,   20,    7,  112,  114,   10,   11,    8,
 /*    30 */   117,   10,  119,   56,   57,  122,  123,   20,  125,  115,
 /*    40 */   125,  128,  129,  130,  131,  132,  133,  134,  135,  136,
 /*    50 */   137,  138,  139,  140,  141,  142,  143,  144,  145,   91,
 /*    60 */   147,  148,  149,  150,  119,  152,  153,   88,  155,   90,
 /*    70 */   125,   84,   85,  128,  129,  130,   92,   98,   99,  100,
 /*    80 */   101,  102,  103,  104,  105,  106,  107,  108,  109,   92,
 /*    90 */   119,  112,   33,   34,   35,   36,  125,    8,  119,  128,
 /*   100 */   129,  130,  115,   17,  125,   30,   31,  128,  129,  130,
 /*   110 */   131,  132,  133,  134,  135,  136,  137,  138,  139,  140,
 /*   120 */   141,  142,  143,  144,  145,    8,  147,  148,  149,  150,
 /*   130 */   119,    9,  153,  154,  155,   88,  125,   90,   16,  128,
 /*   140 */   129,  130,   84,   85,   97,   12,   99,  100,  101,  102,
 /*   150 */   103,  104,  105,  106,  107,  108,  109,    7,  119,  112,
 /*   160 */    10,   11,   84,   85,  125,   17,  119,  128,  129,  130,
 /*   170 */    20,    7,  125,  115,   21,  128,  129,  130,  131,  132,
 /*   180 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*   190 */   143,  144,  145,  115,  147,  148,  149,  150,  119,  152,
 /*   200 */   153,   88,  155,   90,  125,   84,   85,  128,  129,  130,
 /*   210 */    17,   98,   99,  100,  101,  102,  103,  104,  105,  106,
 /*   220 */   107,  108,  109,   13,   14,  112,   16,    9,   18,    7,
 /*   230 */     8,    7,  119,   15,   17,   11,  115,   19,  125,   15,
 /*   240 */    21,  128,  129,  130,  131,  132,  133,  134,  135,  136,
 /*   250 */   137,  138,  139,  140,  141,  142,  143,  144,  145,   43,
 /*   260 */   147,  148,  149,  150,   28,   29,  153,  154,  155,   88,
 /*   270 */    40,   90,    4,    5,   41,    6,    7,    8,   97,   42,
 /*   280 */    99,  100,  101,  102,  103,  104,  105,  106,  107,  108,
 /*   290 */   109,   22,    7,  112,    7,   54,   11,   55,   11,   81,
 /*   300 */   119,   37,   38,   39,   15,   20,  125,   20,   12,  128,
 /*   310 */   129,  130,  131,  132,  133,  134,  135,  136,  137,  138,
 /*   320 */   139,  140,  141,  142,  143,  144,  145,   21,  147,  148,
 /*   330 */   149,  150,    9,  152,  153,   88,  155,   90,   84,   16,
 /*   340 */    12,   15,   19,   17,   97,    9,   99,  100,  101,  102,
 /*   350 */   103,  104,  105,  106,  107,  108,  109,    7,    7,  112,
 /*   360 */     6,   11,   11,  110,  111,   15,  119,    4,    5,  115,
 /*   370 */    16,   20,  125,  110,  111,  128,  129,  130,  131,  132,
 /*   380 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*   390 */   143,  144,  145,   17,  147,  148,  149,  150,    9,  152,
 /*   400 */   153,   88,  155,   90,    8,   84,   10,   15,   19,   17,
 /*   410 */    97,    6,   99,  100,  101,  102,  103,  104,  105,  106,
 /*   420 */   107,  108,  109,  113,  114,  112,   16,    8,   84,   12,
 /*   430 */    15,    7,  119,   17,    6,   57,    7,  116,  125,   20,
 /*   440 */    84,  128,  129,  130,  131,  132,  133,  134,  135,  136,
 /*   450 */   137,  138,  139,  140,  141,  142,  143,  144,  145,  115,
 /*   460 */   147,  148,  149,  150,    6,  152,  153,   88,  155,   90,
 /*   470 */    17,   15,  116,   13,    9,   16,   15,   98,   99,  100,
 /*   480 */   101,  102,  103,  104,  105,  106,  107,  108,  109,    7,
 /*   490 */     9,  112,   17,    7,   17,    7,   17,   70,  119,    7,
 /*   500 */    17,   17,    7,   16,  125,   15,   17,  128,  129,  130,
 /*   510 */   131,  132,  133,  134,  135,  136,  137,  138,  139,  140,
 /*   520 */   141,  142,  143,  144,  145,   15,  147,  148,  149,  150,
 /*   530 */   119,    6,  153,  154,  155,   88,  125,   90,   16,  128,
 /*   540 */   129,  130,  131,  132,  133,   98,   99,  100,  101,  102,
 /*   550 */   103,  104,  105,  106,  107,  108,  109,   16,   16,  112,
 /*   560 */    16,   16,    7,   17,   21,   17,  119,   17,   21,   10,
 /*   570 */    17,   17,  125,   16,   16,  128,  129,  130,  131,  132,
 /*   580 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*   590 */   143,  144,  145,   16,  147,  148,  149,  150,    7,   17,
 /*   600 */   153,  154,  155,   88,   17,   90,   10,   17,    9,    6,
 /*   610 */     9,   17,   97,   84,   99,  100,  101,  102,  103,  104,
 /*   620 */   105,  106,  107,  108,  109,  114,  114,  112,  114,   98,
 /*   630 */    12,  118,  158,   84,  119,  118,  158,  158,  158,  158,
 /*   640 */   125,  158,  158,  128,  129,  130,  131,  132,  133,  134,
 /*   650 */   135,  136,  137,  138,  139,  140,  141,  142,  143,  144,
 /*   660 */   145,  158,  147,  148,  149,  150,  158,  152,  153,   88,
 /*   670 */   155,   90,  158,  158,  158,  158,  158,  158,  158,   98,
 /*   680 */    99,  100,  101,  102,  103,  104,  105,  106,  107,  108,
 /*   690 */   109,  158,  158,  112,  158,  158,  158,  158,  158,  158,
 /*   700 */   119,  158,  158,  158,  158,  158,  125,  158,  158,  128,
 /*   710 */   129,  130,  131,  132,  133,  134,  135,  136,  137,  138,
 /*   720 */   139,  140,  141,  142,  143,  144,  145,  158,  147,  148,
 /*   730 */   149,  150,  119,  158,  153,  154,  155,   88,  125,   90,
 /*   740 */   158,  128,  129,  130,  131,  132,  133,   98,   99,  100,
 /*   750 */   101,  102,  103,  104,  105,  106,  107,  108,  109,  158,
 /*   760 */   158,  112,  158,  158,  158,  158,  158,  158,  119,  158,
 /*   770 */   158,  158,  158,  158,  125,  158,  158,  128,  129,  130,
 /*   780 */   131,  132,  133,  134,  135,  136,  137,  138,  139,  140,
 /*   790 */   141,  142,  143,  144,  145,  158,  147,  148,  149,  150,
 /*   800 */   119,  158,  153,  154,  155,   88,  125,   90,  158,  128,
 /*   810 */   129,  130,  131,  132,  133,   98,   99,  100,  101,  102,
 /*   820 */   103,  104,  105,  106,  107,  108,  109,  158,  158,  112,
 /*   830 */   158,  158,  158,  158,  158,  158,  119,  158,  158,  158,
 /*   840 */   158,  158,  125,  158,  158,  128,  129,  130,  131,  132,
 /*   850 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*   860 */   143,  144,  145,  158,  147,  148,  149,  150,  158,  158,
 /*   870 */   153,  154,  155,    1,  158,    3,  158,  158,    6,    7,
 /*   880 */     8,  158,   10,   11,   12,   13,   14,   15,   16,  158,
 /*   890 */    18,  158,   20,  158,   22,   23,   24,   25,   26,   27,
 /*   900 */    28,   29,   30,   31,   32,   33,  119,  158,  158,  158,
 /*   910 */   158,  158,  125,  158,  158,  128,  129,  130,  131,  132,
 /*   920 */   133,  134,  135,  136,  137,  138,  139,  140,  141,   57,
 /*   930 */    44,   45,   46,   47,   48,   49,   50,   51,   52,   53,
 /*   940 */   158,  158,   70,   71,   72,   73,   74,   75,   76,   77,
 /*   950 */    78,   79,   80,    1,   82,    3,  158,  158,    6,    7,
 /*   960 */     8,  158,   10,   11,   12,   13,   14,   15,   16,  158,
 /*   970 */    18,  158,   20,  158,   22,   23,   24,   25,   26,   27,
 /*   980 */    28,   29,   30,   31,   32,   33,  119,  158,  158,  158,
 /*   990 */   158,  158,  125,  158,  158,  128,  129,  130,  131,  132,
 /*  1000 */   133,  134,  135,  136,  137,  138,  139,  140,  158,   57,
 /*  1010 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  1020 */   158,  158,   70,   71,   72,   73,   74,   75,   76,   77,
 /*  1030 */    78,   79,   80,  158,   82,    0,    1,  158,    3,  158,
 /*  1040 */   158,    6,    7,    8,  158,   10,   11,   12,  158,   14,
 /*  1050 */    15,   16,  158,   18,  158,   20,  158,   22,   23,   24,
 /*  1060 */    25,   26,   27,   28,   29,   30,   31,   32,   33,  119,
 /*  1070 */   158,  158,  158,  158,  158,  125,  158,  158,  128,  129,
 /*  1080 */   130,  131,  132,  133,  134,  135,  136,  137,  138,  139,
 /*  1090 */   119,  158,   57,  158,  158,  158,  125,  158,  158,  128,
 /*  1100 */   129,  130,  131,  132,  133,   70,   71,   72,   73,   74,
 /*  1110 */    75,   76,   77,   78,   79,   80,    1,   82,    3,  158,
 /*  1120 */   158,    6,    7,    8,  158,   10,   11,   12,   13,   14,
 /*  1130 */    15,   16,  158,   18,  158,   20,  158,   22,   23,   24,
 /*  1140 */    25,   26,   27,   28,   29,   30,   31,   32,   33,  119,
 /*  1150 */   158,  158,  158,  158,  158,  125,  158,  158,  128,  129,
 /*  1160 */   130,  131,  132,  133,  134,  135,  136,  137,  138,  119,
 /*  1170 */   158,  158,   57,  158,  158,  125,  158,  158,  128,  129,
 /*  1180 */   130,  131,  132,  133,  134,   70,   71,   72,   73,   74,
 /*  1190 */    75,   76,   77,   78,   79,   80,    1,   82,    3,  158,
 /*  1200 */   158,    6,    7,    8,  158,   10,   11,   12,   13,   14,
 /*  1210 */    15,   16,  158,   18,  158,   20,  158,   22,   23,   24,
 /*  1220 */    25,   26,   27,   28,   29,   30,   31,   32,   33,  119,
 /*  1230 */   158,  158,  158,  158,  158,  125,  158,  158,  128,  129,
 /*  1240 */   130,  131,  132,  133,  134,  135,  136,  137,  119,  158,
 /*  1250 */   158,  158,   57,  158,  125,  158,  158,  128,  129,  130,
 /*  1260 */   131,  132,  133,  134,  135,   70,   71,   72,   73,   74,
 /*  1270 */    75,   76,   77,   78,   79,   80,    1,   82,    3,  158,
 /*  1280 */   158,    6,    7,    8,  158,   10,   11,   12,  158,   14,
 /*  1290 */    15,   16,   17,   18,  158,   20,  158,   22,   23,   24,
 /*  1300 */    25,   26,   27,   28,   29,   30,   31,   32,   33,  119,
 /*  1310 */   158,  158,  158,  158,  158,  125,  158,  158,  128,  129,
 /*  1320 */   130,  131,  132,  133,  134,  135,  136,  119,  158,  158,
 /*  1330 */   158,  158,   57,  125,  158,  158,  128,  129,  130,  131,
 /*  1340 */   132,  133,  134,  135,  158,   70,   71,   72,   73,   74,
 /*  1350 */    75,   76,   77,   78,   79,   80,    1,   82,    3,  158,
 /*  1360 */   158,    6,    7,    8,  158,   10,   11,   12,  158,  158,
 /*  1370 */    15,  158,  158,  158,  158,   20,  158,   22,   23,   24,
 /*  1380 */    25,   26,   27,   28,   29,   30,   31,   32,   33,  119,
 /*  1390 */   158,  158,  158,  158,  158,  125,  158,  158,  128,  129,
 /*  1400 */   130,  131,  132,  133,  134,  135,  158,  119,  158,  158,
 /*  1410 */   158,  158,   57,  125,  158,  158,  128,  129,  130,  131,
 /*  1420 */   132,  133,  134,  158,  158,   70,   71,   72,   73,   74,
 /*  1430 */    75,   76,   77,   78,   79,   80,    1,   82,    3,  158,
 /*  1440 */   158,    6,    7,    8,  158,   10,   11,   12,  158,  158,
 /*  1450 */    15,  158,  158,  158,  158,   20,  158,   22,   23,   24,
 /*  1460 */    25,   26,   27,   28,   29,   30,   31,   32,   33,    9,
 /*  1470 */   158,  119,  158,  158,  158,  158,  158,  125,  158,   19,
 /*  1480 */   128,  129,  130,  131,  132,  133,    6,    7,    8,  158,
 /*  1490 */   158,  158,   57,  158,  158,   15,  158,  158,  158,  158,
 /*  1500 */   158,   88,   22,   90,  158,   70,   71,   72,   73,   74,
 /*  1510 */    75,   76,   77,   78,   79,   80,  158,   82,   58,   59,
 /*  1520 */    60,   61,   62,   63,   64,   65,   66,   67,   68,   69,
 /*  1530 */   158,  158,  119,  158,   88,  158,   90,  124,  125,  126,
 /*  1540 */   127,  128,  129,  130,  131,  132,  133,  134,  135,  136,
 /*  1550 */   137,  138,  139,  140,  141,  142,  143,  144,  145,  146,
 /*  1560 */   147,  158,  158,  158,  151,  119,  158,  158,  158,  156,
 /*  1570 */   124,  125,  126,  127,  128,  129,  130,  131,  132,  133,
 /*  1580 */   134,  135,  136,  137,  138,  139,  140,  141,  142,  143,
 /*  1590 */   144,  145,  146,  147,   88,  158,   90,    6,    7,    8,
 /*  1600 */   158,  158,  158,  157,  158,  158,  158,  158,  158,  158,
 /*  1610 */   158,  158,  158,   22,   23,   24,   25,   26,   27,   28,
 /*  1620 */    29,   30,   31,   32,   33,  119,  158,   88,  158,   90,
 /*  1630 */   124,  125,  126,  127,  128,  129,  130,  131,  132,  133,
 /*  1640 */   134,  135,  136,  137,  138,  139,  140,  141,  142,  143,
 /*  1650 */   144,  145,  146,  147,  158,  158,  158,  151,  119,  158,
 /*  1660 */    88,  158,   90,  124,  125,  126,  127,  128,  129,  130,
 /*  1670 */   131,  132,  133,  134,  135,  136,  137,  138,  139,  140,
 /*  1680 */   141,  142,  143,  144,  145,  146,  147,  158,  158,  158,
 /*  1690 */   151,  119,  158,  158,  158,  158,  124,  125,  126,  127,
 /*  1700 */   128,  129,  130,  131,  132,  133,  134,  135,  136,  137,
 /*  1710 */   138,  139,  140,  141,  142,  143,  144,  145,  146,  147,
 /*  1720 */    88,  158,   90,  158,  158,  158,  158,  158,  158,  157,
 /*  1730 */   158,  158,  158,  119,  158,  158,  158,  158,  158,  125,
 /*  1740 */   158,  158,  128,  129,  130,  131,  132,  133,  158,  158,
 /*  1750 */   158,  119,  158,   88,  158,   90,  124,  125,  126,  127,
 /*  1760 */   128,  129,  130,  131,  132,  133,  134,  135,  136,  137,
 /*  1770 */   138,  139,  140,  141,  142,  143,  144,  145,  146,  147,
 /*  1780 */   158,  158,  158,  151,  119,  158,  158,  158,  158,  124,
 /*  1790 */   125,  126,  127,  128,  129,  130,  131,  132,  133,  134,
 /*  1800 */   135,  136,  137,  138,  139,  140,  141,  142,  143,  144,
 /*  1810 */   145,  146,  147,  158,  158,  158,  151,  119,  158,  158,
 /*  1820 */   158,  158,  158,  125,  158,  158,  128,  129,  130,  131,
 /*  1830 */   132,  133,   87,  158,   89,  119,  158,  158,   86,  158,
 /*  1840 */    88,  125,   90,  158,  128,  129,  130,  131,  132,  133,
 /*  1850 */   134,  135,  136,  137,  138,  139,  140,  141,  142,  143,
 /*  1860 */   158,  158,  117,  158,  158,  120,  121,  122,  123,  158,
 /*  1870 */   158,  119,   88,  158,   90,  158,  124,  125,  158,  127,
 /*  1880 */   128,  129,  130,  131,  132,  133,  134,  135,  136,  137,
 /*  1890 */   138,  139,  140,  141,  142,  143,  144,  145,  146,  147,
 /*  1900 */   158,  158,  158,  119,  158,  158,  158,  158,  124,  125,
 /*  1910 */   126,  127,  128,  129,  130,  131,  132,  133,  134,  135,
 /*  1920 */   136,  137,  138,  139,  140,  141,  142,  143,  144,  145,
 /*  1930 */   146,  147,  119,  158,  158,  158,  158,  158,  125,  158,
 /*  1940 */   158,  128,  129,  130,  131,  132,  133,  134,  135,  136,
 /*  1950 */   137,  138,  139,  140,  141,  142,  158,  158,   86,  158,
 /*  1960 */    88,  119,   90,  158,  158,  158,  158,  125,  158,  158,
 /*  1970 */   128,  129,  130,  131,  132,  133,  158,  158,  158,  158,
 /*  1980 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  1990 */    86,  119,   88,  158,   90,  158,  124,  125,  158,  127,
 /*  2000 */   128,  129,  130,  131,  132,  133,  134,  135,  136,  137,
 /*  2010 */   138,  139,  140,  141,  142,  143,  144,  145,  146,  147,
 /*  2020 */   158,  158,  158,  119,  158,  158,  158,  158,  124,  125,
 /*  2030 */   158,  127,  128,  129,  130,  131,  132,  133,  134,  135,
 /*  2040 */   136,  137,  138,  139,  140,  141,  142,  143,  144,  145,
 /*  2050 */   146,  147,  119,  158,  158,  158,  158,  158,  125,  158,
 /*  2060 */   158,  128,  129,  130,  131,  132,  133,  158,  158,  158,
 /*  2070 */   158,  158,  158,  158,  119,  158,  158,  158,  158,   88,
 /*  2080 */   125,   90,  158,  128,  129,  130,  131,  132,  133,  158,
 /*  2090 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  2100 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  2110 */   119,  158,   88,  158,   90,  124,  125,  126,  127,  128,
 /*  2120 */   129,  130,  131,  132,  133,  134,  135,  136,  137,  138,
 /*  2130 */   139,  140,  141,  142,  143,  144,  145,  146,  147,  158,
 /*  2140 */   158,  158,  158,  119,  158,  158,  158,  158,  124,  125,
 /*  2150 */   126,  127,  128,  129,  130,  131,  132,  133,  134,  135,
 /*  2160 */   136,  137,  138,  139,  140,  141,  142,  143,  144,  145,
 /*  2170 */   146,  147,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  2180 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  2190 */   158,  158,  158,  158,  158,  158,  158,  158,  158,   88,
 /*  2200 */   158,   90,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  2210 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  2220 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  2230 */   119,  158,  158,  158,  158,  124,  125,  126,  127,  128,
 /*  2240 */   129,  130,  131,  132,  133,  134,  135,  136,  137,  138,
 /*  2250 */   139,  140,  141,  142,  143,  144,  145,  146,  147,  158,
 /*  2260 */    88,  158,   90,  158,  158,  158,  158,   95,   96,  158,
 /*  2270 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  2280 */   158,  158,  158,  158,  158,  158,   86,  158,   88,  158,
 /*  2290 */    90,  119,  158,  158,  158,  158,  158,  125,  158,  127,
 /*  2300 */   128,  129,  130,  131,  132,  133,  134,  135,  136,  137,
 /*  2310 */   138,  139,  140,  141,  142,  143,  144,  145,  158,  119,
 /*  2320 */   158,  158,  158,  158,  124,  125,  158,  127,  128,  129,
 /*  2330 */   130,  131,  132,  133,  134,  135,  136,  137,  138,  139,
 /*  2340 */   140,  141,  142,  143,  144,  145,  146,  147,  158,  158,
 /*  2350 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  2360 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  2370 */   158,  158,  158,  158,  158,   88,  158,   90,  158,  158,
 /*  2380 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  2390 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  2400 */   158,  158,  158,  158,  158,  158,  119,  158,   88,  158,
 /*  2410 */    90,  124,  125,  158,  127,  128,  129,  130,  131,  132,
 /*  2420 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*  2430 */   143,  144,  145,  146,  147,  158,  158,  158,  158,  119,
 /*  2440 */   158,  158,  158,  158,  124,  125,  158,  127,  128,  129,
 /*  2450 */   130,  131,  132,  133,  134,  135,  136,  137,  138,  139,
 /*  2460 */   140,  141,  142,  143,  144,  145,  146,  147,  158,  158,
 /*  2470 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  2480 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  2490 */   158,  158,  158,  158,  158,   88,  158,   90,  158,  158,
 /*  2500 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  2510 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  2520 */   158,  158,  158,  158,  158,  158,  119,  158,   88,  158,
 /*  2530 */    90,  124,  125,  158,  127,  128,  129,  130,  131,  132,
 /*  2540 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*  2550 */   143,  144,  145,  146,  147,   88,  158,   90,  158,  119,
 /*  2560 */    93,   94,  158,  158,  158,  125,  158,  127,  128,  129,
 /*  2570 */   130,  131,  132,  133,  134,  135,  136,  137,  138,  139,
 /*  2580 */   140,  141,  142,  143,  144,  145,  119,  147,  158,  158,
 /*  2590 */   158,  158,  125,  158,  127,  128,  129,  130,  131,  132,
 /*  2600 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*  2610 */   143,  144,  145,  158,  147,   88,  158,   90,  158,  158,
 /*  2620 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  2630 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  2640 */   158,  158,  158,  158,  158,  158,  119,  158,   88,  158,
 /*  2650 */    90,  124,  125,  158,  127,  128,  129,  130,  131,  132,
 /*  2660 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*  2670 */   143,  144,  145,  146,  147,   88,  158,   90,  158,  119,
 /*  2680 */   158,  158,  158,  158,  158,  125,  158,  127,  128,  129,
 /*  2690 */   130,  131,  132,  133,  134,  135,  136,  137,  138,  139,
 /*  2700 */   140,  141,  142,  143,  144,  145,  119,  147,  158,  158,
 /*  2710 */   158,  158,  125,  158,  127,  128,  129,  130,  131,  132,
 /*  2720 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*  2730 */   143,  144,  145,  146,  158,   88,  158,   90,  158,  158,
 /*  2740 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  2750 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  2760 */   158,  158,   88,  158,   90,  158,  119,  158,  158,  158,
 /*  2770 */   158,  158,  125,  158,  127,  128,  129,  130,  131,  132,
 /*  2780 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*  2790 */   143,  144,  145,  119,  147,   88,  158,   90,  158,  125,
 /*  2800 */   158,  127,  128,  129,  130,  131,  132,  133,  134,  135,
 /*  2810 */   136,  137,  138,  139,  140,  141,  142,  143,  144,  145,
 /*  2820 */   158,  158,   88,  158,   90,  158,  119,  158,  158,  158,
 /*  2830 */   158,  158,  125,  158,  127,  128,  129,  130,  131,  132,
 /*  2840 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*  2850 */   143,  144,  145,  119,  158,   88,  158,   90,  158,  125,
 /*  2860 */   158,  127,  128,  129,  130,  131,  132,  133,  134,  135,
 /*  2870 */   136,  137,  138,  139,  140,  141,  142,  143,  144,  145,
 /*  2880 */   158,  158,   88,  158,   90,  158,  119,  158,  158,  158,
 /*  2890 */   158,  158,  125,  158,  127,  128,  129,  130,  131,  132,
 /*  2900 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*  2910 */   143,  144,  145,  119,  158,   88,  158,   90,  158,  125,
 /*  2920 */   158,  127,  128,  129,  130,  131,  132,  133,  134,  135,
 /*  2930 */   136,  137,  138,  139,  140,  141,  142,  143,  144,  145,
 /*  2940 */   158,  158,   88,  158,   90,  158,  119,  158,  158,  158,
 /*  2950 */   158,  158,  125,  158,  127,  128,  129,  130,  131,  132,
 /*  2960 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*  2970 */   143,  144,  145,  119,  158,   88,  158,   90,  158,  125,
 /*  2980 */   158,  127,  128,  129,  130,  131,  132,  133,  134,  135,
 /*  2990 */   136,  137,  138,  139,  140,  141,  142,  143,  144,  145,
 /*  3000 */   158,  158,   88,  158,   90,  158,  119,  158,  158,  158,
 /*  3010 */   158,  158,  125,  158,  127,  128,  129,  130,  131,  132,
 /*  3020 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*  3030 */   143,  144,  145,  119,  158,   88,  158,   90,  158,  125,
 /*  3040 */   158,  127,  128,  129,  130,  131,  132,  133,  134,  135,
 /*  3050 */   136,  137,  138,  139,  140,  141,  142,  143,  144,  145,
 /*  3060 */   158,  158,   88,  158,   90,  158,  119,  158,  158,  158,
 /*  3070 */   158,  158,  125,  158,  127,  128,  129,  130,  131,  132,
 /*  3080 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*  3090 */   143,  144,  145,  119,  158,   88,  158,   90,  158,  125,
 /*  3100 */   158,  127,  128,  129,  130,  131,  132,  133,  134,  135,
 /*  3110 */   136,  137,  138,  139,  140,  141,  142,  143,  144,  145,
 /*  3120 */   158,  158,   88,  158,   90,  158,  119,  158,  158,  158,
 /*  3130 */   158,  158,  125,  158,  127,  128,  129,  130,  131,  132,
 /*  3140 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*  3150 */   143,  144,  145,  119,  158,   88,  158,   90,  158,  125,
 /*  3160 */   158,  127,  128,  129,  130,  131,  132,  133,  134,  135,
 /*  3170 */   136,  137,  138,  139,  140,  141,  142,  143,  144,  145,
 /*  3180 */   158,  158,   88,  158,   90,  158,  119,  158,  158,  158,
 /*  3190 */   158,  158,  125,  158,  127,  128,  129,  130,  131,  132,
 /*  3200 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*  3210 */   143,  144,  145,  119,  158,   88,  158,   90,  158,  125,
 /*  3220 */   158,  127,  128,  129,  130,  131,  132,  133,  134,  135,
 /*  3230 */   136,  137,  138,  139,  140,  141,  142,  143,  144,  145,
 /*  3240 */   158,  158,   88,  158,   90,  158,  119,  158,  158,  158,
 /*  3250 */   158,  158,  125,  158,  127,  128,  129,  130,  131,  132,
 /*  3260 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*  3270 */   143,  144,  145,  119,  158,  158,  158,  158,  158,  125,
 /*  3280 */   158,  127,  128,  129,  130,  131,  132,  133,  134,  135,
 /*  3290 */   136,  137,  138,  139,  140,  141,  142,  143,  144,  145,
 /*  3300 */     6,    7,    8,  158,   10,   11,   12,  158,  158,   15,
 /*  3310 */   158,  158,   18,  158,   20,  158,   22,   23,   24,   25,
 /*  3320 */    26,   27,   28,   29,   30,   31,   32,   33,  158,  158,
 /*  3330 */   158,  158,  158,  158,  158,  158,  158,    9,  158,  158,
 /*  3340 */   158,  158,  158,  158,  158,  158,  158,   19,  158,  158,
 /*  3350 */   158,   57,  158,  158,  158,  158,  158,  158,    6,    7,
 /*  3360 */     8,  158,   10,   11,   12,  158,  158,   15,   16,  158,
 /*  3370 */   158,  158,   20,  158,   22,   23,   24,   25,   26,   27,
 /*  3380 */    28,   29,   30,   31,   32,   33,   58,   59,   60,   61,
 /*  3390 */    62,   63,   64,   65,   66,   67,   68,   69,  158,  158,
 /*  3400 */   158,  158,  158,  158,  158,  158,  158,  158,  158,   57,
 /*  3410 */   158,  158,  158,  158,  158,  158,    6,    7,    8,  158,
 /*  3420 */    10,   11,   12,  158,  158,   15,   16,  158,  158,  158,
 /*  3430 */    20,  158,   22,   23,   24,   25,   26,   27,   28,   29,
 /*  3440 */    30,   31,   32,   33,  158,  158,  158,  158,  158,  158,
 /*  3450 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  3460 */   158,  158,  158,  158,  158,  158,  158,   57,  158,  158,
 /*  3470 */   158,  158,  158,  158,    6,    7,    8,  158,   10,   11,
 /*  3480 */    12,  158,  158,   15,  158,  158,  158,  158,   20,   21,
 /*  3490 */    22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
 /*  3500 */    32,   33,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  3510 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  3520 */   158,  158,  158,  158,  158,   57,  158,  158,  158,  158,
 /*  3530 */   158,  158,    6,    7,    8,  158,   10,   11,   12,  158,
 /*  3540 */   158,   15,  158,  158,   18,  158,   20,  158,   22,   23,
 /*  3550 */    24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
 /*  3560 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  3570 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  3580 */   158,  158,  158,   57,  158,  158,  158,  158,  158,  158,
 /*  3590 */     6,    7,    8,  158,  158,   11,   12,  158,  158,   15,
 /*  3600 */   158,  158,  158,  158,   20,   21,   22,   23,   24,   25,
 /*  3610 */    26,   27,   28,   29,   30,   31,   32,   33,  158,  158,
 /*  3620 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  3630 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  3640 */   158,   57,  158,  158,  158,  158,  158,  158,    6,    7,
 /*  3650 */     8,  158,   10,   11,   12,  158,  158,   15,  158,  158,
 /*  3660 */   158,  158,   20,  158,   22,   23,   24,   25,   26,   27,
 /*  3670 */    28,   29,   30,   31,   32,   33,  158,  158,  158,  158,
 /*  3680 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  3690 */   158,  158,  158,  158,  158,  158,  158,  158,  158,   57,
 /*  3700 */   158,  158,  158,  158,  158,  158,    6,    7,    8,  158,
 /*  3710 */   158,   11,   12,   13,  158,   15,  158,  158,  158,  158,
 /*  3720 */    20,  158,   22,   23,   24,   25,   26,   27,   28,   29,
 /*  3730 */    30,   31,   32,   33,  158,  158,  158,  158,  158,  158,
 /*  3740 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  3750 */   158,  158,  158,  158,  158,  158,  158,   57,  158,  158,
 /*  3760 */   158,  158,  158,  158,    6,    7,    8,  158,  158,   11,
 /*  3770 */    12,  158,  158,   15,  158,  158,  158,  158,   20,   21,
 /*  3780 */    22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
 /*  3790 */    32,   33,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  3800 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  3810 */   158,  158,  158,  158,  158,   57,  158,  158,  158,  158,
 /*  3820 */   158,  158,    6,    7,    8,  158,  158,   11,   12,  158,
 /*  3830 */   158,   15,  158,  158,   18,  158,   20,  158,   22,   23,
 /*  3840 */    24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
 /*  3850 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  3860 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  3870 */   158,  158,  158,   57,  158,  158,  158,  158,  158,  158,
 /*  3880 */     6,    7,    8,  158,  158,   11,   12,  158,  158,   15,
 /*  3890 */   158,  158,  158,  158,   20,  158,   22,   23,   24,   25,
 /*  3900 */    26,   27,   28,   29,   30,   31,   32,   33,    9,  158,
 /*  3910 */   158,  158,  158,  158,   15,  158,  158,  158,   19,  158,
 /*  3920 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  3930 */   158,   57,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  3940 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  3950 */   158,  158,  158,  158,  158,  158,  158,   58,   59,   60,
 /*  3960 */    61,   62,   63,   64,   65,   66,   67,   68,   69,  158,
 /*  3970 */   158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
 /*  3980 */    81,
};
#define YY_SHIFT_USE_DFLT (-24)
#define YY_SHIFT_MAX 234
static const short yy_shift_ofst[] = {
 /*     0 */   -24, 1035, 1195, 1275, 1115,  872,  952, 1435, 1355, 1355,
 /*    10 */  1435, 1355, 1435, 1355, 1435, 1435, 1435, 1355, 1435, 3526,
 /*    20 */  3294, 3294, 3294, 3294, 3642, 3642, 3642, 3642, 3642, 3642,
 /*    30 */  3642, 3642, 3642, 3642, 3352, 3410, 3468, 3642, 3642, 3700,
 /*    40 */  3642, 3642, 3642, 3874, 3758, 3816, 3584, 3874, 3874, 3874,
 /*    50 */  3874, 3874, 3874, 3874, 3874, 3874, 3874, 3874, 3874, 3874,
 /*    60 */  3874, 3874, 3874, 1591, 1591, 1591, 1591, 1591, 1591, 1591,
 /*    70 */  1591, 1591, 1591, 1591, 1591, 1591, 1591, 1591, 1591, 1591,
 /*    80 */  1591, 1591, 1591, 1591, 1591, 1591,   -9,  210, 1480,  269,
 /*    90 */   269,  269,  269,   21,   21,   21,   21,  268,  363,   89,
 /*   100 */    89,   89,   89,   89, 3899, 1460, 3328,  886,  886,  222,
 /*   110 */   396,  618,   89,   89,  -24,  -24,  -24,  -24,  -24,  -24,
 /*   120 */   -24,   17,  218,   59,   59,   59,  150,  224,  287,  350,
 /*   130 */   264,  264,  285,  323,  351,  236,   75,  389,    3,  392,
 /*   140 */    75,  -23,   75,  419,  354,   75,  122,  326,   86,  133,
 /*   150 */   117,  148,  153,  164,  193,  217,  219,  230,  233,  230,
 /*   160 */   237,  233,  216,  237,  216,  241,  242,  241,  242,  289,
 /*   170 */   306,  296,  328,  336,  376,  405,  410,  417,  164,  415,
 /*   180 */   424,  416,  428,  378,  429,  453,  458,  460,  456,  465,
 /*   190 */   461,  459,  482,  481,  475,  486,  477,  488,  479,  427,
 /*   200 */   492,  484,  487,  495,  489,  490,  510,  522,  541,  542,
 /*   210 */   544,  545,  555,  546,  548,  550,  553,  557,  577,  554,
 /*   220 */   591,  587,  590,  599,  601,  594,  525,  543,  559,  582,
 /*   230 */   603,  547,  596,  483,  558,
};
#define YY_REDUCE_USE_DFLT (-109)
#define YY_REDUCE_MAX 120
static const short yy_reduce_ofst[] = {
 /*     0 */   310,  -87,  -87,  -87,  -87,  -87,  -87,  649,  181,  313,
 /*    10 */   447,  515,  -21,   47,  113,  717,  379,  247,  581, 1413,
 /*    20 */  1632, 1665, 1506, 1539, 1572, 1446, 1752, 2024, 2200, 1784,
 /*    30 */  2111, 1991, 1904, 1872, 2527, 2287, 2467, 2407, 2320, 2172,
 /*    40 */  2647, 2560, 2440, 2587, 2914, 2674, 2947, 2914, 2974, 3007,
 /*    50 */  3034, 3067, 2947, 3094, 3127, 3154, 2707, 2887, 2827, 2767,
 /*    60 */  2854, 2794, 2734, 1716, 1813,  787,  867,  950, 1030, 1110,
 /*    70 */  1190, 1129, 1208, 1270, 1050, 1288, 1955, 1933,  411, 1614,
 /*    80 */   681,  971,  613, 1352, 1698, 1842, 1745, 1745,   79,   39,
 /*    90 */   -29,   11,  -55,  121,   78,   58,  -13,  253,  263,  356,
 /*   100 */   -76,  321,  254,  344,  -16,   -3,  -16,  -32,  -32,  -85,
 /*   110 */   529,  531,  549,  529,  511,  512,  513,  514,  517, -108,
 /*   120 */   -88,
};
static const YYACTIONTYPE yy_default[] = {
 /*     0 */   567,  628,  628,  628,  628,  628,  628,  628,  628,  628,
 /*    10 */   628,  628,  628,  628,  628,  628,  628,  628,  628,  610,
 /*    20 */   628,  628,  628,  628,  612,  612,  530,  628,  530,  628,
 /*    30 */   628,  628,  530,  530,  628,  628,  628,  628,  628,  628,
 /*    40 */   552,  628,  628,  628,  628,  628,  628,  628,  628,  557,
 /*    50 */   628,  628,  628,  628,  628,  628,  628,  628,  628,  628,
 /*    60 */   628,  628,  628,  628,  628,  628,  628,  628,  628,  628,
 /*    70 */   628,  628,  628,  628,  628,  628,  628,  628,  628,  628,
 /*    80 */   628,  628,  628,  628,  628,  628,  628,  628,  511,  628,
 /*    90 */   628,  628,  628,  410,  410,  410,  410,  615,  628,  628,
 /*   100 */   628,  628,  628,  628,  528,  561,  528,  500,  499,  628,
 /*   110 */   628,  628,  628,  628,  567,  567,  419,  567,  419,  567,
 /*   120 */   567,  447,  628,  474,  473,  472,  448,  417,  448,  417,
 /*   130 */   479,  480,  447,  628,  628,  460,  475,  628,  628,  628,
 /*   140 */   476,  505,  477,  628,  429,  478,  628,  628,  628,  628,
 /*   150 */   628,  628,  628,  628,  628,  628,  628,  481,  483,  482,
 /*   160 */   485,  484,  487,  486,  488,  501,  503,  502,  504,  628,
 /*   170 */   628,  628,  628,  411,  628,  429,  628,  628,  627,  511,
 /*   180 */   628,  628,  513,  628,  628,  628,  514,  628,  628,  556,
 /*   190 */   628,  628,  628,  528,  628,  628,  628,  628,  628,  628,
 /*   200 */   628,  628,  628,  628,  628,  628,  628,  628,  628,  628,
 /*   210 */   628,  628,  628,  628,  628,  628,  628,  628,  628,  628,
 /*   220 */   628,  628,  628,  551,  549,  628,  446,  628,  628,  628,
 /*   230 */   442,  628,  628,  628,  430,  573,  575,  439,  579,  438,
 /*   240 */   430,  565,  412,  413,  409,  437,  566,  449,  408,  580,
 /*   250 */   425,  581,  624,  424,  626,  423,  578,  422,  421,  582,
 /*   260 */   435,  420,  620,  508,  507,  506,  576,  583,  509,  498,
 /*   270 */   547,  416,  584,  497,  577,  585,  496,  586,  434,  495,
 /*   280 */   548,  494,  587,  588,  493,  492,  491,  589,  490,  553,
 /*   290 */   590,  436,  591,  550,  592,  433,  593,  489,  594,  414,
 /*   300 */   595,  471,  596,  426,  597,  470,  450,  598,  599,  600,
 /*   310 */   601,  602,  469,  603,  604,  531,  468,  467,  466,  524,
 /*   320 */   605,  465,  444,  606,  464,  463,  462,  418,  607,  461,
 /*   330 */   523,  608,  526,  459,  525,  458,  415,  609,  613,  611,
 /*   340 */   614,  457,  456,  616,  455,  454,  617,  453,  618,  452,
 /*   350 */   619,  621,  407,  451,  445,  443,  622,  441,  536,  537,
 /*   360 */   538,  539,  540,  541,  542,  543,  544,  545,  546,  535,
 /*   370 */   517,  534,  518,  440,  519,  427,  558,  554,  623,  522,
 /*   380 */   625,  516,  555,  559,  562,  515,  520,  512,  510,  521,
 /*   390 */   529,  432,  527,  532,  533,  564,  560,  563,  568,  569,
 /*   400 */   570,  571,  572,  431,  428,  574,
};
#define YY_SZ_ACTTAB (int)(sizeof(yy_action)/sizeof(yy_action[0]))

/* The next table maps tokens into fallback tokens.  If a construct
** like the following:
** 
**      %fallback ID X Y Z.
**
** appears in the grammar, then ID becomes a fallback token for X, Y,
** and Z.  Whenever one of the tokens X, Y, or Z is input to the parser
** but it does not parse, the type of the token is changed to ID and
** the parse is retried before an error is thrown.
*/
#ifdef YYFALLBACK
static const YYCODETYPE yyFallback[] = {
};
#endif /* YYFALLBACK */

/* The following structure represents a single element of the
** parser's stack.  Information stored includes:
**
**   +  The state number for the parser at this level of the stack.
**
**   +  The value of the token stored at this level of the stack.
**      (In other words, the "major" token.)
**
**   +  The semantic value stored at this level of the stack.  This is
**      the information used by the action routines in the grammar.
**      It is sometimes called the "minor" token.
*/
struct yyStackEntry {
  YYACTIONTYPE stateno;  /* The state-number */
  YYCODETYPE major;      /* The major token value.  This is the code
                         ** number for the token at this stack level */
  YYMINORTYPE minor;     /* The user-supplied minor token value.  This
                         ** is the value of the token  */
};
typedef struct yyStackEntry yyStackEntry;

/* The state of the parser is completely contained in an instance of
** the following structure */
struct yyParser {
  int yyidx;                    /* Index of top element in stack */
#ifdef YYTRACKMAXSTACKDEPTH
  int yyidxMax;                 /* Maximum value of yyidx */
#endif
  int yyerrcnt;                 /* Shifts left before out of the error */
  XecParseARG_SDECL                /* A place to hold %extra_argument */
#if YYSTACKDEPTH<=0
  int yystksz;                  /* Current side of the stack */
  yyStackEntry *yystack;        /* The parser's stack */
#else
  yyStackEntry yystack[YYSTACKDEPTH];  /* The parser's stack */
#endif
};
typedef struct yyParser yyParser;

#ifndef NDEBUG
#include <stdio.h>
static FILE *yyTraceFILE = 0;
static char *yyTracePrompt = 0;
#endif /* NDEBUG */

#ifndef NDEBUG
/* 
** Turn parser tracing on by giving a stream to which to write the trace
** and a prompt to preface each trace message.  Tracing is turned off
** by making either argument NULL 
**
** Inputs:
** <ul>
** <li> A FILE* to which trace output should be written.
**      If NULL, then tracing is turned off.
** <li> A prefix string written at the beginning of every
**      line of trace output.  If NULL, then tracing is
**      turned off.
** </ul>
**
** Outputs:
** None.
*/
void XecParseTrace(FILE *TraceFILE, char *zTracePrompt){
  yyTraceFILE = TraceFILE;
  yyTracePrompt = zTracePrompt;
  if( yyTraceFILE==0 ) yyTracePrompt = 0;
  else if( yyTracePrompt==0 ) yyTraceFILE = 0;
}
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing shifts, the names of all terminals and nonterminals
** are required.  The following table supplies these names */
static const char *const yyTokenName[] = { 
  "$",             "IF",            "ELSE",          "TRY",         
  "CATCH",         "FINALLY",       "YIELD",         "LPN",         
  "IDENTIFIER",    "COMMA",         "ELLIPSIS",      "PERIOD",      
  "LBR",           "RBR",           "DEF",           "COLON",       
  "SEMICOLON",     "RPN",           "VAR",           "ASSIGN",      
  "LSQ",           "RSQ",           "NEW",           "NULL",        
  "TRUE",          "FALSE",         "NUMBER",        "STRING",      
  "INCREMENT",     "DECREMENT",     "PLUS",          "MINUS",       
  "XMARK",         "TILDE",         "ASTERISK",      "SOLIDUS",     
  "PERCENT",       "LSHIFT",        "LRSHIFT",       "ARSHIFT",     
  "AMPERSAND",     "CARET",         "VBAR",          "CONCATENATE", 
  "EQUAL",         "NOTEQUAL",      "LESS",          "GREATER",     
  "LESSEQUAL",     "GREATEREQUAL",  "IN",            "NOTIN",       
  "IS",            "NOTIS",         "LOGICAND",      "LOGICXOR",    
  "LOGICOR",       "QMARK",         "MULASSIGN",     "DIVASSIGN",   
  "MODASSIGN",     "INTDIVASSIGN",  "ADDASSIGN",     "SUBASSIGN",   
  "LSHIFTASSIGN",  "LRSHIFTASSIGN",  "ARSHIFTASSIGN",  "BITANDASSIGN",
  "BITXORASSIGN",  "BITORASSIGN",   "WHILE",         "DELETE",      
  "CASE",          "DEFAULT",       "CONTINUE",      "BREAK",       
  "RETURN",        "THROW",         "SWITCH",        "DO",          
  "FOR",           "EACHKEY",       "USING",         "error",       
  "name",          "param_list",    "arg_list",      "object_scope",
  "newobj_scope",  "func_scope",    "newf_scope",    "compare_op",  
  "assign_op",     "value_lbody",   "value_list",    "keyval_lbody",
  "keyval_list",   "stmt_block",    "stmt_reblock",  "stmt_if",     
  "stmt_switch",   "stmt_while",    "stmt_do",       "stmt_doblock",
  "scope_for",     "stmt_foreach",  "stmt_for",      "stmt_using",  
  "try_block",     "try_catch",     "scope_catch",   "stmt_catch",  
  "token_yield",   "script",        "stmt_list",     "name_list",   
  "qual_name",     "decl_object",   "object_decls",  "expr_simple", 
  "object_decl",   "decl_proto",    "decl_func",     "decl_var",    
  "expr_list",     "expr_index",    "expr_assign",   "expr_value",  
  "expr_yield",    "expr_new",      "expr_postfix",  "expr_literal",
  "expr_suffix",   "expr_unary",    "expr_mul",      "expr_add",    
  "expr_shift",    "expr_bitand",   "expr_bitxor",   "expr_bitor",  
  "expr_concat",   "expr_compare",  "expr_and",      "expr_xor",    
  "expr_or",       "expr_nolbr",    "expr_lbody",    "expr_final",  
  "sexpr_lbody",   "sexpr_list",    "sexpr_assign",  "condition",   
  "stmt",          "stmt_common",   "stmt_reuse",    "stmt_try",    
  "for_cond",      "for_expr",    
};
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing reduce actions, the names of all rules are required.
*/
static const char *const yyRuleName[] = {
 /*   0 */ "script ::= stmt_list",
 /*   1 */ "name ::= IDENTIFIER",
 /*   2 */ "name_list ::= name",
 /*   3 */ "name_list ::= name_list COMMA name",
 /*   4 */ "param_list ::=",
 /*   5 */ "param_list ::= name_list",
 /*   6 */ "param_list ::= ELLIPSIS",
 /*   7 */ "param_list ::= name_list COMMA ELLIPSIS",
 /*   8 */ "qual_name ::= name",
 /*   9 */ "qual_name ::= qual_name PERIOD IDENTIFIER",
 /*  10 */ "decl_object ::= object_scope LBR object_decls RBR",
 /*  11 */ "object_scope ::= DEF qual_name",
 /*  12 */ "object_scope ::= DEF qual_name COLON expr_simple",
 /*  13 */ "object_decls ::=",
 /*  14 */ "object_decls ::= object_decls object_decl",
 /*  15 */ "object_decl ::= SEMICOLON",
 /*  16 */ "object_decl ::= decl_object",
 /*  17 */ "object_decl ::= decl_proto",
 /*  18 */ "object_decl ::= decl_func",
 /*  19 */ "object_decl ::= decl_var",
 /*  20 */ "decl_proto ::= DEF qual_name LPN param_list RPN SEMICOLON",
 /*  21 */ "decl_proto ::= DEF qual_name LPN param_list RPN YIELD SEMICOLON",
 /*  22 */ "decl_func ::= func_scope LBR stmt_list RBR",
 /*  23 */ "func_scope ::= DEF qual_name LPN param_list RPN",
 /*  24 */ "func_scope ::= DEF qual_name LPN param_list RPN YIELD",
 /*  25 */ "decl_var ::= VAR name_list SEMICOLON",
 /*  26 */ "decl_var ::= VAR name_list ASSIGN expr_list SEMICOLON",
 /*  27 */ "expr_index ::= LPN expr_assign RPN",
 /*  28 */ "expr_index ::= IDENTIFIER",
 /*  29 */ "expr_index ::= expr_index PERIOD IDENTIFIER",
 /*  30 */ "expr_index ::= expr_index PERIOD LSQ expr_value RSQ",
 /*  31 */ "expr_index ::= expr_index LSQ expr_value RSQ",
 /*  32 */ "expr_yield ::= YIELD LPN arg_list RPN",
 /*  33 */ "expr_new ::= NEW expr_index LPN arg_list RPN",
 /*  34 */ "expr_postfix ::= expr_yield",
 /*  35 */ "expr_postfix ::= expr_new",
 /*  36 */ "expr_postfix ::= expr_index LPN arg_list RPN",
 /*  37 */ "expr_postfix ::= expr_postfix PERIOD IDENTIFIER",
 /*  38 */ "expr_postfix ::= expr_postfix PERIOD LSQ expr_value RSQ",
 /*  39 */ "expr_postfix ::= expr_postfix LSQ expr_value RSQ",
 /*  40 */ "expr_postfix ::= expr_postfix LPN arg_list RPN",
 /*  41 */ "expr_simple ::= expr_index",
 /*  42 */ "expr_simple ::= expr_postfix",
 /*  43 */ "expr_simple ::= expr_index LPN arg_list RPN YIELD",
 /*  44 */ "expr_simple ::= expr_postfix LPN arg_list RPN YIELD",
 /*  45 */ "expr_literal ::= expr_simple",
 /*  46 */ "expr_literal ::= NULL",
 /*  47 */ "expr_literal ::= TRUE",
 /*  48 */ "expr_literal ::= FALSE",
 /*  49 */ "expr_literal ::= NUMBER",
 /*  50 */ "expr_literal ::= STRING",
 /*  51 */ "expr_suffix ::= expr_literal",
 /*  52 */ "expr_suffix ::= expr_suffix INCREMENT",
 /*  53 */ "expr_suffix ::= expr_suffix DECREMENT",
 /*  54 */ "expr_unary ::= expr_suffix",
 /*  55 */ "expr_unary ::= PLUS expr_unary",
 /*  56 */ "expr_unary ::= MINUS expr_unary",
 /*  57 */ "expr_unary ::= XMARK expr_unary",
 /*  58 */ "expr_unary ::= TILDE expr_unary",
 /*  59 */ "expr_unary ::= INCREMENT expr_unary",
 /*  60 */ "expr_unary ::= DECREMENT expr_unary",
 /*  61 */ "expr_mul ::= expr_unary",
 /*  62 */ "expr_mul ::= expr_mul ASTERISK expr_unary",
 /*  63 */ "expr_mul ::= expr_mul SOLIDUS expr_unary",
 /*  64 */ "expr_mul ::= expr_mul PERCENT expr_unary",
 /*  65 */ "expr_mul ::= expr_mul TILDE expr_unary",
 /*  66 */ "expr_add ::= expr_mul",
 /*  67 */ "expr_add ::= expr_add PLUS expr_mul",
 /*  68 */ "expr_add ::= expr_add MINUS expr_mul",
 /*  69 */ "expr_shift ::= expr_add",
 /*  70 */ "expr_shift ::= expr_shift LSHIFT expr_add",
 /*  71 */ "expr_shift ::= expr_shift LRSHIFT expr_add",
 /*  72 */ "expr_shift ::= expr_shift ARSHIFT expr_add",
 /*  73 */ "expr_bitand ::= expr_shift",
 /*  74 */ "expr_bitand ::= expr_bitand AMPERSAND expr_shift",
 /*  75 */ "expr_bitxor ::= expr_bitand",
 /*  76 */ "expr_bitxor ::= expr_bitxor CARET expr_bitand",
 /*  77 */ "expr_bitor ::= expr_bitxor",
 /*  78 */ "expr_bitor ::= expr_bitor VBAR expr_bitxor",
 /*  79 */ "expr_concat ::= expr_bitor",
 /*  80 */ "expr_concat ::= expr_concat CONCATENATE expr_bitor",
 /*  81 */ "expr_compare ::= expr_concat",
 /*  82 */ "expr_compare ::= expr_compare compare_op expr_concat",
 /*  83 */ "compare_op ::= EQUAL",
 /*  84 */ "compare_op ::= NOTEQUAL",
 /*  85 */ "compare_op ::= LESS",
 /*  86 */ "compare_op ::= GREATER",
 /*  87 */ "compare_op ::= LESSEQUAL",
 /*  88 */ "compare_op ::= GREATEREQUAL",
 /*  89 */ "compare_op ::= IN",
 /*  90 */ "compare_op ::= NOTIN",
 /*  91 */ "compare_op ::= IS",
 /*  92 */ "compare_op ::= NOTIS",
 /*  93 */ "expr_and ::= expr_compare",
 /*  94 */ "expr_and ::= expr_and LOGICAND expr_compare",
 /*  95 */ "expr_xor ::= expr_and",
 /*  96 */ "expr_xor ::= expr_xor LOGICXOR expr_and",
 /*  97 */ "expr_or ::= expr_xor",
 /*  98 */ "expr_or ::= expr_or LOGICOR expr_xor",
 /*  99 */ "expr_nolbr ::= expr_or",
 /* 100 */ "expr_nolbr ::= expr_or QMARK expr_value COLON expr_value",
 /* 101 */ "expr_nolbr ::= LSQ RSQ",
 /* 102 */ "expr_nolbr ::= LSQ value_list RSQ",
 /* 103 */ "expr_nolbr ::= newobj_scope LBR object_decls RBR",
 /* 104 */ "expr_nolbr ::= newf_scope LBR stmt_list RBR",
 /* 105 */ "newobj_scope ::= COLON",
 /* 106 */ "newobj_scope ::= COLON COLON expr_simple",
 /* 107 */ "newf_scope ::= QMARK LPN param_list RPN",
 /* 108 */ "newf_scope ::= PERIOD QMARK LPN param_list RPN",
 /* 109 */ "newf_scope ::= QMARK LPN param_list RPN YIELD",
 /* 110 */ "newf_scope ::= PERIOD QMARK LPN param_list RPN YIELD",
 /* 111 */ "expr_value ::= expr_nolbr",
 /* 112 */ "expr_value ::= LBR RBR",
 /* 113 */ "expr_value ::= LBR keyval_list RBR",
 /* 114 */ "expr_lbody ::= expr_value",
 /* 115 */ "expr_lbody ::= expr_lbody COMMA expr_value",
 /* 116 */ "expr_final ::= ELLIPSIS",
 /* 117 */ "expr_final ::= expr_index ELLIPSIS",
 /* 118 */ "expr_final ::= expr_index LSQ RSQ ELLIPSIS",
 /* 119 */ "expr_final ::= expr_postfix ELLIPSIS",
 /* 120 */ "expr_final ::= expr_postfix LSQ RSQ ELLIPSIS",
 /* 121 */ "expr_list ::= expr_final",
 /* 122 */ "expr_list ::= expr_lbody",
 /* 123 */ "expr_list ::= expr_lbody COMMA expr_final",
 /* 124 */ "arg_list ::=",
 /* 125 */ "arg_list ::= expr_list",
 /* 126 */ "expr_assign ::= expr_list",
 /* 127 */ "expr_assign ::= expr_lbody assign_op expr_assign",
 /* 128 */ "assign_op ::= ASSIGN",
 /* 129 */ "assign_op ::= MULASSIGN",
 /* 130 */ "assign_op ::= DIVASSIGN",
 /* 131 */ "assign_op ::= MODASSIGN",
 /* 132 */ "assign_op ::= INTDIVASSIGN",
 /* 133 */ "assign_op ::= ADDASSIGN",
 /* 134 */ "assign_op ::= SUBASSIGN",
 /* 135 */ "assign_op ::= LSHIFTASSIGN",
 /* 136 */ "assign_op ::= LRSHIFTASSIGN",
 /* 137 */ "assign_op ::= ARSHIFTASSIGN",
 /* 138 */ "assign_op ::= BITANDASSIGN",
 /* 139 */ "assign_op ::= BITXORASSIGN",
 /* 140 */ "assign_op ::= BITORASSIGN",
 /* 141 */ "value_lbody ::= expr_value",
 /* 142 */ "value_lbody ::= value_lbody COMMA expr_value",
 /* 143 */ "value_list ::= expr_final",
 /* 144 */ "value_list ::= expr_final COMMA",
 /* 145 */ "value_list ::= value_lbody",
 /* 146 */ "value_list ::= value_lbody COMMA",
 /* 147 */ "value_list ::= value_lbody COMMA expr_final",
 /* 148 */ "keyval_lbody ::= expr_value COLON expr_value",
 /* 149 */ "keyval_lbody ::= keyval_lbody COMMA expr_value COLON expr_value",
 /* 150 */ "keyval_list ::= keyval_lbody",
 /* 151 */ "keyval_list ::= keyval_lbody COMMA",
 /* 152 */ "sexpr_lbody ::= expr_nolbr",
 /* 153 */ "sexpr_lbody ::= sexpr_lbody COMMA expr_value",
 /* 154 */ "sexpr_list ::= expr_final",
 /* 155 */ "sexpr_list ::= sexpr_lbody",
 /* 156 */ "sexpr_list ::= sexpr_lbody COMMA expr_final",
 /* 157 */ "sexpr_assign ::= sexpr_list",
 /* 158 */ "sexpr_assign ::= sexpr_lbody assign_op expr_assign",
 /* 159 */ "condition ::= expr_assign",
 /* 160 */ "condition ::= VAR name_list ASSIGN expr_list",
 /* 161 */ "stmt_list ::=",
 /* 162 */ "stmt_list ::= stmt_list SEMICOLON",
 /* 163 */ "stmt_list ::= stmt_list stmt",
 /* 164 */ "stmt_list ::= stmt_list decl_object",
 /* 165 */ "stmt_list ::= stmt_list decl_func",
 /* 166 */ "stmt_list ::= stmt_list decl_var",
 /* 167 */ "stmt ::= stmt_block stmt_list RBR",
 /* 168 */ "stmt ::= stmt_common",
 /* 169 */ "stmt_block ::= LBR",
 /* 170 */ "stmt_reuse ::= stmt_reblock stmt_list RBR",
 /* 171 */ "stmt_reuse ::= stmt_common",
 /* 172 */ "stmt_reblock ::= LBR",
 /* 173 */ "stmt_common ::= sexpr_assign SEMICOLON",
 /* 174 */ "stmt_common ::= stmt_if LPN condition RPN stmt",
 /* 175 */ "stmt_common ::= stmt_if LPN condition RPN stmt ELSE stmt",
 /* 176 */ "stmt_common ::= stmt_switch LPN condition RPN stmt_reblock stmt_list RPN",
 /* 177 */ "stmt_common ::= stmt_while LPN condition RPN stmt_reuse",
 /* 178 */ "stmt_common ::= stmt_doblock WHILE LPN expr_assign RPN SEMICOLON",
 /* 179 */ "stmt_common ::= stmt_foreach stmt_reuse",
 /* 180 */ "stmt_common ::= stmt_for stmt_reuse",
 /* 181 */ "stmt_common ::= stmt_using LPN condition RPN stmt_reuse",
 /* 182 */ "stmt_common ::= stmt_try",
 /* 183 */ "stmt_common ::= DELETE expr_lbody SEMICOLON",
 /* 184 */ "stmt_common ::= CASE expr_value COLON",
 /* 185 */ "stmt_common ::= DEFAULT COLON",
 /* 186 */ "stmt_common ::= CONTINUE SEMICOLON",
 /* 187 */ "stmt_common ::= BREAK SEMICOLON",
 /* 188 */ "stmt_common ::= RETURN SEMICOLON",
 /* 189 */ "stmt_common ::= RETURN expr_list SEMICOLON",
 /* 190 */ "stmt_common ::= token_yield SEMICOLON",
 /* 191 */ "stmt_common ::= token_yield expr_list SEMICOLON",
 /* 192 */ "stmt_common ::= THROW expr_value SEMICOLON",
 /* 193 */ "stmt_if ::= IF",
 /* 194 */ "stmt_switch ::= SWITCH",
 /* 195 */ "stmt_while ::= WHILE",
 /* 196 */ "stmt_do ::= DO",
 /* 197 */ "stmt_doblock ::= stmt_do stmt_reuse",
 /* 198 */ "scope_for ::= FOR",
 /* 199 */ "stmt_foreach ::= scope_for LPN expr_lbody COLON expr_value RPN",
 /* 200 */ "stmt_foreach ::= scope_for LPN expr_lbody EACHKEY expr_value RPN",
 /* 201 */ "stmt_foreach ::= scope_for LPN VAR name_list COLON expr_value RPN",
 /* 202 */ "stmt_foreach ::= scope_for LPN VAR name_list EACHKEY expr_value RPN",
 /* 203 */ "stmt_for ::= scope_for LPN for_cond SEMICOLON for_expr SEMICOLON for_expr RPN",
 /* 204 */ "for_cond ::=",
 /* 205 */ "for_cond ::= condition",
 /* 206 */ "for_expr ::=",
 /* 207 */ "for_expr ::= expr_assign",
 /* 208 */ "stmt_using ::= USING",
 /* 209 */ "stmt_try ::= try_catch",
 /* 210 */ "stmt_try ::= try_catch FINALLY stmt",
 /* 211 */ "stmt_try ::= try_block FINALLY stmt",
 /* 212 */ "try_block ::= TRY stmt",
 /* 213 */ "try_catch ::= try_block stmt_catch stmt_reuse",
 /* 214 */ "try_catch ::= try_catch stmt_catch stmt_reuse",
 /* 215 */ "scope_catch ::= CATCH",
 /* 216 */ "stmt_catch ::= scope_catch LPN COLON expr_simple RPN",
 /* 217 */ "stmt_catch ::= scope_catch LPN expr_value COLON expr_simple RPN",
 /* 218 */ "stmt_catch ::= scope_catch LPN VAR name COLON expr_simple RPN",
 /* 219 */ "stmt_catch ::= scope_catch LPN expr_value RPN",
 /* 220 */ "stmt_catch ::= scope_catch LPN VAR name RPN",
 /* 221 */ "token_yield ::= YIELD",
};
#endif /* NDEBUG */


#if YYSTACKDEPTH<=0
/*
** Try to increase the size of the parser stack.
*/
static void yyGrowStack(yyParser *p){
  int newSize;
  yyStackEntry *pNew;

  newSize = p->yystksz*2 + 100;
  pNew = realloc(p->yystack, newSize*sizeof(pNew[0]));
  if( pNew ){
    p->yystack = pNew;
    p->yystksz = newSize;
#ifndef NDEBUG
    if( yyTraceFILE ){
      fprintf(yyTraceFILE,"%sStack grows to %d entries!\n",
              yyTracePrompt, p->yystksz);
    }
#endif
  }
}
#endif

/* 
** This function allocates a new parser.
** The only argument is a pointer to a function which works like
** malloc.
**
** Inputs:
** A pointer to the function used to allocate memory.
**
** Outputs:
** A pointer to a parser.  This pointer is used in subsequent calls
** to XecParse and XecParseFree.
*/
void *XecParseAlloc(void *(*mallocProc)(size_t)){
  yyParser *pParser;
  pParser = (yyParser*)(*mallocProc)( (size_t)sizeof(yyParser) );
  if( pParser ){
    pParser->yyidx = -1;
#ifdef YYTRACKMAXSTACKDEPTH
    pParser->yyidxMax = 0;
#endif
#if YYSTACKDEPTH<=0
    pParser->yystack = NULL;
    pParser->yystksz = 0;
    yyGrowStack(pParser);
#endif
  }
  return pParser;
}

/* The following function deletes the value associated with a
** symbol.  The symbol can be either a terminal or nonterminal.
** "yymajor" is the symbol code, and "yypminor" is a pointer to
** the value.
*/
static void yy_destructor(
  yyParser *yypParser,    /* The parser */
  YYCODETYPE yymajor,     /* Type code for object to destroy */
  YYMINORTYPE *yypminor   /* The object to be destroyed */
){
  XecParseARG_FETCH;
  switch( yymajor ){
    /* Here is inserted the actions which take place when a
    ** terminal or non-terminal is destroyed.  This can happen
    ** when the symbol is popped from the stack during a
    ** reduce or during error processing or when a parser is 
    ** being destroyed before it is finished parsing.
    **
    ** Note: during a reduce, the only symbols destroyed are those
    ** which appear on the RHS of the rule, but which are not used
    ** inside the C code.
    */
      /* TERMINAL Destructor */
    case 1: /* IF */
    case 2: /* ELSE */
    case 3: /* TRY */
    case 4: /* CATCH */
    case 5: /* FINALLY */
    case 6: /* YIELD */
    case 7: /* LPN */
    case 8: /* IDENTIFIER */
    case 9: /* COMMA */
    case 10: /* ELLIPSIS */
    case 11: /* PERIOD */
    case 12: /* LBR */
    case 13: /* RBR */
    case 14: /* DEF */
    case 15: /* COLON */
    case 16: /* SEMICOLON */
    case 17: /* RPN */
    case 18: /* VAR */
    case 19: /* ASSIGN */
    case 20: /* LSQ */
    case 21: /* RSQ */
    case 22: /* NEW */
    case 23: /* NULL */
    case 24: /* TRUE */
    case 25: /* FALSE */
    case 26: /* NUMBER */
    case 27: /* STRING */
    case 28: /* INCREMENT */
    case 29: /* DECREMENT */
    case 30: /* PLUS */
    case 31: /* MINUS */
    case 32: /* XMARK */
    case 33: /* TILDE */
    case 34: /* ASTERISK */
    case 35: /* SOLIDUS */
    case 36: /* PERCENT */
    case 37: /* LSHIFT */
    case 38: /* LRSHIFT */
    case 39: /* ARSHIFT */
    case 40: /* AMPERSAND */
    case 41: /* CARET */
    case 42: /* VBAR */
    case 43: /* CONCATENATE */
    case 44: /* EQUAL */
    case 45: /* NOTEQUAL */
    case 46: /* LESS */
    case 47: /* GREATER */
    case 48: /* LESSEQUAL */
    case 49: /* GREATEREQUAL */
    case 50: /* IN */
    case 51: /* NOTIN */
    case 52: /* IS */
    case 53: /* NOTIS */
    case 54: /* LOGICAND */
    case 55: /* LOGICXOR */
    case 56: /* LOGICOR */
    case 57: /* QMARK */
    case 58: /* MULASSIGN */
    case 59: /* DIVASSIGN */
    case 60: /* MODASSIGN */
    case 61: /* INTDIVASSIGN */
    case 62: /* ADDASSIGN */
    case 63: /* SUBASSIGN */
    case 64: /* LSHIFTASSIGN */
    case 65: /* LRSHIFTASSIGN */
    case 66: /* ARSHIFTASSIGN */
    case 67: /* BITANDASSIGN */
    case 68: /* BITXORASSIGN */
    case 69: /* BITORASSIGN */
    case 70: /* WHILE */
    case 71: /* DELETE */
    case 72: /* CASE */
    case 73: /* DEFAULT */
    case 74: /* CONTINUE */
    case 75: /* BREAK */
    case 76: /* RETURN */
    case 77: /* THROW */
    case 78: /* SWITCH */
    case 79: /* DO */
    case 80: /* FOR */
    case 81: /* EACHKEY */
    case 82: /* USING */
{
#line 123 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"

    p->destroy( (yypminor->yy0) );

#line 1634 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
}
      break;
      /* Default NON-TERMINAL Destructor */
    case 83: /* error */
    case 84: /* name */
    case 85: /* param_list */
    case 86: /* arg_list */
    case 87: /* object_scope */
    case 88: /* newobj_scope */
    case 89: /* func_scope */
    case 90: /* newf_scope */
    case 91: /* compare_op */
    case 92: /* assign_op */
    case 93: /* value_lbody */
    case 94: /* value_list */
    case 95: /* keyval_lbody */
    case 96: /* keyval_list */
    case 97: /* stmt_block */
    case 98: /* stmt_reblock */
    case 99: /* stmt_if */
    case 100: /* stmt_switch */
    case 101: /* stmt_while */
    case 102: /* stmt_do */
    case 103: /* stmt_doblock */
    case 104: /* scope_for */
    case 105: /* stmt_foreach */
    case 106: /* stmt_for */
    case 107: /* stmt_using */
    case 108: /* try_block */
    case 109: /* try_catch */
    case 110: /* scope_catch */
    case 111: /* stmt_catch */
    case 112: /* token_yield */
    case 113: /* script */
    case 114: /* stmt_list */
    case 115: /* name_list */
    case 116: /* qual_name */
    case 117: /* decl_object */
    case 118: /* object_decls */
    case 119: /* expr_simple */
    case 120: /* object_decl */
    case 121: /* decl_proto */
    case 122: /* decl_func */
    case 123: /* decl_var */
    case 124: /* expr_list */
    case 125: /* expr_index */
    case 126: /* expr_assign */
    case 127: /* expr_value */
    case 128: /* expr_yield */
    case 129: /* expr_new */
    case 130: /* expr_postfix */
    case 131: /* expr_literal */
    case 132: /* expr_suffix */
    case 133: /* expr_unary */
    case 134: /* expr_mul */
    case 135: /* expr_add */
    case 136: /* expr_shift */
    case 137: /* expr_bitand */
    case 138: /* expr_bitxor */
    case 139: /* expr_bitor */
    case 140: /* expr_concat */
    case 141: /* expr_compare */
    case 142: /* expr_and */
    case 143: /* expr_xor */
    case 144: /* expr_or */
    case 145: /* expr_nolbr */
    case 146: /* expr_lbody */
    case 147: /* expr_final */
    case 148: /* sexpr_lbody */
    case 149: /* sexpr_list */
    case 150: /* sexpr_assign */
    case 151: /* condition */
    case 152: /* stmt */
    case 153: /* stmt_common */
    case 154: /* stmt_reuse */
    case 155: /* stmt_try */
    case 156: /* for_cond */
    case 157: /* for_expr */
{
#line 119 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"


#line 1717 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
}
      break;
    default:  break;   /* If no destructor action specified: do nothing */
  }
}

/*
** Pop the parser's stack once.
**
** If there is a destructor routine associated with the token which
** is popped from the stack, then call it.
**
** Return the major token number for the symbol popped.
*/
static int yy_pop_parser_stack(yyParser *pParser){
  YYCODETYPE yymajor;
  yyStackEntry *yytos = &pParser->yystack[pParser->yyidx];

  if( pParser->yyidx<0 ) return 0;
#ifndef NDEBUG
  if( yyTraceFILE && pParser->yyidx>=0 ){
    fprintf(yyTraceFILE,"%sPopping %s\n",
      yyTracePrompt,
      yyTokenName[yytos->major]);
  }
#endif
  yymajor = yytos->major;
  yy_destructor(pParser, yymajor, &yytos->minor);
  pParser->yyidx--;
  return yymajor;
}

/* 
** Deallocate and destroy a parser.  Destructors are all called for
** all stack elements before shutting the parser down.
**
** Inputs:
** <ul>
** <li>  A pointer to the parser.  This should be a pointer
**       obtained from XecParseAlloc.
** <li>  A pointer to a function used to reclaim memory obtained
**       from malloc.
** </ul>
*/
void XecParseFree(
  void *p,                    /* The parser to be deleted */
  void (*freeProc)(void*)     /* Function used to reclaim memory */
){
  yyParser *pParser = (yyParser*)p;
  if( pParser==0 ) return;
  while( pParser->yyidx>=0 ) yy_pop_parser_stack(pParser);
#if YYSTACKDEPTH<=0
  free(pParser->yystack);
#endif
  (*freeProc)((void*)pParser);
}

/*
** Return the peak depth of the stack for a parser.
*/
#ifdef YYTRACKMAXSTACKDEPTH
int XecParseStackPeak(void *p){
  yyParser *pParser = (yyParser*)p;
  return pParser->yyidxMax;
}
#endif

/*
** Find the appropriate action for a parser given the terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
static int yy_find_shift_action(
  yyParser *pParser,        /* The parser */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
  int stateno = pParser->yystack[pParser->yyidx].stateno;
 
  if( stateno>YY_SHIFT_MAX || (i = yy_shift_ofst[stateno])==YY_SHIFT_USE_DFLT ){
    return yy_default[stateno];
  }
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
  if( i<0 || i>=YY_SZ_ACTTAB || yy_lookahead[i]!=iLookAhead ){
    if( iLookAhead>0 ){
#ifdef YYFALLBACK
      YYCODETYPE iFallback;            /* Fallback token */
      if( iLookAhead<sizeof(yyFallback)/sizeof(yyFallback[0])
             && (iFallback = yyFallback[iLookAhead])!=0 ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE, "%sFALLBACK %s => %s\n",
             yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[iFallback]);
        }
#endif
        return yy_find_shift_action(pParser, iFallback);
      }
#endif
#ifdef YYWILDCARD
      {
        int j = i - iLookAhead + YYWILDCARD;
        if( j>=0 && j<YY_SZ_ACTTAB && yy_lookahead[j]==YYWILDCARD ){
#ifndef NDEBUG
          if( yyTraceFILE ){
            fprintf(yyTraceFILE, "%sWILDCARD %s => %s\n",
               yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[YYWILDCARD]);
          }
#endif /* NDEBUG */
          return yy_action[j];
        }
      }
#endif /* YYWILDCARD */
    }
    return yy_default[stateno];
  }else{
    return yy_action[i];
  }
}

/*
** Find the appropriate action for a parser given the non-terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
static int yy_find_reduce_action(
  int stateno,              /* Current state number */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
#ifdef YYERRORSYMBOL
  if( stateno>YY_REDUCE_MAX ){
    return yy_default[stateno];
  }
#else
  assert( stateno<=YY_REDUCE_MAX );
#endif
  i = yy_reduce_ofst[stateno];
  assert( i!=YY_REDUCE_USE_DFLT );
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
#ifdef YYERRORSYMBOL
  if( i<0 || i>=YY_SZ_ACTTAB || yy_lookahead[i]!=iLookAhead ){
    return yy_default[stateno];
  }
#else
  assert( i>=0 && i<YY_SZ_ACTTAB );
  assert( yy_lookahead[i]==iLookAhead );
#endif
  return yy_action[i];
}

/*
** The following routine is called if the stack overflows.
*/
static void yyStackOverflow(yyParser *yypParser, YYMINORTYPE *yypMinor){
   XecParseARG_FETCH;
   yypParser->yyidx--;
#ifndef NDEBUG
   if( yyTraceFILE ){
     fprintf(yyTraceFILE,"%sStack Overflow!\n",yyTracePrompt);
   }
#endif
   while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
   /* Here code is inserted which will execute if the parser
   ** stack every overflows */
   XecParseARG_STORE; /* Suppress warning about unused %extra_argument var */
}

/*
** Perform a shift action.
*/
static void yy_shift(
  yyParser *yypParser,          /* The parser to be shifted */
  int yyNewState,               /* The new state to shift in */
  int yyMajor,                  /* The major token to shift in */
  YYMINORTYPE *yypMinor         /* Pointer to the minor token to shift in */
){
  yyStackEntry *yytos;
  yypParser->yyidx++;
#ifdef YYTRACKMAXSTACKDEPTH
  if( yypParser->yyidx>yypParser->yyidxMax ){
    yypParser->yyidxMax = yypParser->yyidx;
  }
#endif
#if YYSTACKDEPTH>0 
  if( yypParser->yyidx>=YYSTACKDEPTH ){
    yyStackOverflow(yypParser, yypMinor);
    return;
  }
#else
  if( yypParser->yyidx>=yypParser->yystksz ){
    yyGrowStack(yypParser);
    if( yypParser->yyidx>=yypParser->yystksz ){
      yyStackOverflow(yypParser, yypMinor);
      return;
    }
  }
#endif
  yytos = &yypParser->yystack[yypParser->yyidx];
  yytos->stateno = (YYACTIONTYPE)yyNewState;
  yytos->major = (YYCODETYPE)yyMajor;
  yytos->minor = *yypMinor;
#ifndef NDEBUG
  if( yyTraceFILE && yypParser->yyidx>0 ){
    int i;
    fprintf(yyTraceFILE,"%sShift %d\n",yyTracePrompt,yyNewState);
    fprintf(yyTraceFILE,"%sStack:",yyTracePrompt);
    for(i=1; i<=yypParser->yyidx; i++)
      fprintf(yyTraceFILE," %s",yyTokenName[yypParser->yystack[i].major]);
    fprintf(yyTraceFILE,"\n");
  }
#endif
}

/* The following table contains information about every rule that
** is used during the reduce.
*/
static const struct {
  YYCODETYPE lhs;         /* Symbol on the left-hand side of the rule */
  unsigned char nrhs;     /* Number of right-hand side symbols in the rule */
} yyRuleInfo[] = {
  { 113, 1 },
  { 84, 1 },
  { 115, 1 },
  { 115, 3 },
  { 85, 0 },
  { 85, 1 },
  { 85, 1 },
  { 85, 3 },
  { 116, 1 },
  { 116, 3 },
  { 117, 4 },
  { 87, 2 },
  { 87, 4 },
  { 118, 0 },
  { 118, 2 },
  { 120, 1 },
  { 120, 1 },
  { 120, 1 },
  { 120, 1 },
  { 120, 1 },
  { 121, 6 },
  { 121, 7 },
  { 122, 4 },
  { 89, 5 },
  { 89, 6 },
  { 123, 3 },
  { 123, 5 },
  { 125, 3 },
  { 125, 1 },
  { 125, 3 },
  { 125, 5 },
  { 125, 4 },
  { 128, 4 },
  { 129, 5 },
  { 130, 1 },
  { 130, 1 },
  { 130, 4 },
  { 130, 3 },
  { 130, 5 },
  { 130, 4 },
  { 130, 4 },
  { 119, 1 },
  { 119, 1 },
  { 119, 5 },
  { 119, 5 },
  { 131, 1 },
  { 131, 1 },
  { 131, 1 },
  { 131, 1 },
  { 131, 1 },
  { 131, 1 },
  { 132, 1 },
  { 132, 2 },
  { 132, 2 },
  { 133, 1 },
  { 133, 2 },
  { 133, 2 },
  { 133, 2 },
  { 133, 2 },
  { 133, 2 },
  { 133, 2 },
  { 134, 1 },
  { 134, 3 },
  { 134, 3 },
  { 134, 3 },
  { 134, 3 },
  { 135, 1 },
  { 135, 3 },
  { 135, 3 },
  { 136, 1 },
  { 136, 3 },
  { 136, 3 },
  { 136, 3 },
  { 137, 1 },
  { 137, 3 },
  { 138, 1 },
  { 138, 3 },
  { 139, 1 },
  { 139, 3 },
  { 140, 1 },
  { 140, 3 },
  { 141, 1 },
  { 141, 3 },
  { 91, 1 },
  { 91, 1 },
  { 91, 1 },
  { 91, 1 },
  { 91, 1 },
  { 91, 1 },
  { 91, 1 },
  { 91, 1 },
  { 91, 1 },
  { 91, 1 },
  { 142, 1 },
  { 142, 3 },
  { 143, 1 },
  { 143, 3 },
  { 144, 1 },
  { 144, 3 },
  { 145, 1 },
  { 145, 5 },
  { 145, 2 },
  { 145, 3 },
  { 145, 4 },
  { 145, 4 },
  { 88, 1 },
  { 88, 3 },
  { 90, 4 },
  { 90, 5 },
  { 90, 5 },
  { 90, 6 },
  { 127, 1 },
  { 127, 2 },
  { 127, 3 },
  { 146, 1 },
  { 146, 3 },
  { 147, 1 },
  { 147, 2 },
  { 147, 4 },
  { 147, 2 },
  { 147, 4 },
  { 124, 1 },
  { 124, 1 },
  { 124, 3 },
  { 86, 0 },
  { 86, 1 },
  { 126, 1 },
  { 126, 3 },
  { 92, 1 },
  { 92, 1 },
  { 92, 1 },
  { 92, 1 },
  { 92, 1 },
  { 92, 1 },
  { 92, 1 },
  { 92, 1 },
  { 92, 1 },
  { 92, 1 },
  { 92, 1 },
  { 92, 1 },
  { 92, 1 },
  { 93, 1 },
  { 93, 3 },
  { 94, 1 },
  { 94, 2 },
  { 94, 1 },
  { 94, 2 },
  { 94, 3 },
  { 95, 3 },
  { 95, 5 },
  { 96, 1 },
  { 96, 2 },
  { 148, 1 },
  { 148, 3 },
  { 149, 1 },
  { 149, 1 },
  { 149, 3 },
  { 150, 1 },
  { 150, 3 },
  { 151, 1 },
  { 151, 4 },
  { 114, 0 },
  { 114, 2 },
  { 114, 2 },
  { 114, 2 },
  { 114, 2 },
  { 114, 2 },
  { 152, 3 },
  { 152, 1 },
  { 97, 1 },
  { 154, 3 },
  { 154, 1 },
  { 98, 1 },
  { 153, 2 },
  { 153, 5 },
  { 153, 7 },
  { 153, 7 },
  { 153, 5 },
  { 153, 6 },
  { 153, 2 },
  { 153, 2 },
  { 153, 5 },
  { 153, 1 },
  { 153, 3 },
  { 153, 3 },
  { 153, 2 },
  { 153, 2 },
  { 153, 2 },
  { 153, 2 },
  { 153, 3 },
  { 153, 2 },
  { 153, 3 },
  { 153, 3 },
  { 99, 1 },
  { 100, 1 },
  { 101, 1 },
  { 102, 1 },
  { 103, 2 },
  { 104, 1 },
  { 105, 6 },
  { 105, 6 },
  { 105, 7 },
  { 105, 7 },
  { 106, 8 },
  { 156, 0 },
  { 156, 1 },
  { 157, 0 },
  { 157, 1 },
  { 107, 1 },
  { 155, 1 },
  { 155, 3 },
  { 155, 3 },
  { 108, 2 },
  { 109, 3 },
  { 109, 3 },
  { 110, 1 },
  { 111, 5 },
  { 111, 6 },
  { 111, 7 },
  { 111, 4 },
  { 111, 5 },
  { 112, 1 },
};

static void yy_accept(yyParser*);  /* Forward Declaration */

/*
** Perform a reduce action and the shift that must immediately
** follow the reduce.
*/
static void yy_reduce(
  yyParser *yypParser,         /* The parser */
  int yyruleno                 /* Number of the rule by which to reduce */
){
  int yygoto;                     /* The next state */
  int yyact;                      /* The next action */
  YYMINORTYPE yygotominor;        /* The LHS of the rule reduced */
  yyStackEntry *yymsp;            /* The top of the parser's stack */
  int yysize;                     /* Amount to pop the stack */
  XecParseARG_FETCH;
  yymsp = &yypParser->yystack[yypParser->yyidx];
#ifndef NDEBUG
  if( yyTraceFILE && yyruleno>=0 
        && yyruleno<(int)(sizeof(yyRuleName)/sizeof(yyRuleName[0])) ){
    fprintf(yyTraceFILE, "%sReduce [%s].\n", yyTracePrompt,
      yyRuleName[yyruleno]);
  }
#endif /* NDEBUG */

  /* Silence complaints from purify about yygotominor being uninitialized
  ** in some cases when it is copied into the stack after the following
  ** switch.  yygotominor is uninitialized when a rule reduces that does
  ** not set the value of its left-hand side nonterminal.  Leaving the
  ** value of the nonterminal uninitialized is utterly harmless as long
  ** as the value is never used.  So really the only thing this code
  ** accomplishes is to quieten purify.  
  **
  ** 2007-01-16:  The wireshark project (www.wireshark.org) reports that
  ** without this code, their parser segfaults.  I'm not sure what there
  ** parser is doing to make this happen.  This is the second bug report
  ** from wireshark this week.  Clearly they are stressing Lemon in ways
  ** that it has not been previously stressed...  (SQLite ticket #2172)
  */
  /*memset(&yygotominor, 0, sizeof(yygotominor));*/
  yygotominor = yyzerominor;


  switch( yyruleno ){
  /* Beginning here are the reduction cases.  A typical example
  ** follows:
  **   case 0:
  **  #line <lineno> <grammarfile>
  **     { ... }           // User supplied code
  **  #line <lineno> <thisfile>
  **     break;
  */
      case 0: /* script ::= stmt_list */
#line 161 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,114,&yymsp[0].minor);
}
#line 2227 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 1: /* name ::= IDENTIFIER */
#line 172 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy75 = p->alloc< xec_name_name >( yymsp[0].minor.yy0->sloc, yymsp[0].minor.yy0->text );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 2235 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 2: /* name_list ::= name */
      case 8: /* qual_name ::= name */ yytestcase(yyruleno==8);
#line 179 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = yymsp[0].minor.yy75;
                }
#line 2243 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 3: /* name_list ::= name_list COMMA name */
#line 183 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    xec_name_list* l;
                    yygotominor.yy259 = l = p->name_list( yymsp[-2].minor.yy259 );
                    l->names.push_back( yymsp[0].minor.yy75 );
                  yy_destructor(yypParser,9,&yymsp[-1].minor);
}
#line 2253 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 4: /* param_list ::= */
#line 191 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy118 = nullptr;
                }
#line 2260 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 5: /* param_list ::= name_list */
#line 195 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy118 = p->name_list( yymsp[0].minor.yy259 );
                }
#line 2267 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 6: /* param_list ::= ELLIPSIS */
#line 199 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    xec_name_list* l;
                    yygotominor.yy118 = l = p->alloc< xec_name_list >( yymsp[0].minor.yy0->sloc );
                    l->varargs = true;
                }
#line 2276 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 7: /* param_list ::= name_list COMMA ELLIPSIS */
#line 205 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    xec_name_list* l;
                    yygotominor.yy118 = l = p->name_list( yymsp[-2].minor.yy259 );
                    l->varargs = true;
                  yy_destructor(yypParser,9,&yymsp[-1].minor);
  yy_destructor(yypParser,10,&yymsp[0].minor);
}
#line 2287 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 9: /* qual_name ::= qual_name PERIOD IDENTIFIER */
#line 217 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_name_qual >(
                                    yymsp[0].minor.yy0->sloc, yymsp[-2].minor.yy259, yymsp[0].minor.yy0->text );
                    p->destroy( yymsp[0].minor.yy0 );
                  yy_destructor(yypParser,11,&yymsp[-1].minor);
}
#line 2297 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 10: /* decl_object ::= object_scope LBR object_decls RBR */
#line 233 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    p->close_scope( yymsp[-3].minor.yy182->scope );
                  yy_destructor(yypParser,12,&yymsp[-2].minor);
  yy_destructor(yypParser,118,&yymsp[-1].minor);
  yy_destructor(yypParser,13,&yymsp[0].minor);
}
#line 2307 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 11: /* object_scope ::= DEF qual_name */
#line 238 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy182 = p->object( yymsp[0].minor.yy259->sloc, yymsp[0].minor.yy259, nullptr );
                  yy_destructor(yypParser,14,&yymsp[-1].minor);
}
#line 2315 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 12: /* object_scope ::= DEF qual_name COLON expr_simple */
#line 242 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy182 = p->object( yymsp[-2].minor.yy259->sloc, yymsp[-2].minor.yy259, yymsp[0].minor.yy259 );
                  yy_destructor(yypParser,14,&yymsp[-3].minor);
  yy_destructor(yypParser,15,&yymsp[-1].minor);
}
#line 2324 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 13: /* object_decls ::= */
      case 161: /* stmt_list ::= */ yytestcase(yyruleno==161);
#line 248 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                }
#line 2331 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 14: /* object_decls ::= object_decls object_decl */
#line 251 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,118,&yymsp[-1].minor);
  yy_destructor(yypParser,120,&yymsp[0].minor);
}
#line 2339 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 15: /* object_decl ::= SEMICOLON */
#line 255 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,16,&yymsp[0].minor);
}
#line 2346 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 16: /* object_decl ::= decl_object */
#line 258 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,117,&yymsp[0].minor);
}
#line 2353 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 17: /* object_decl ::= decl_proto */
#line 261 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,121,&yymsp[0].minor);
}
#line 2360 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 18: /* object_decl ::= decl_func */
#line 264 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,122,&yymsp[0].minor);
}
#line 2367 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 19: /* object_decl ::= decl_var */
#line 267 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,123,&yymsp[0].minor);
}
#line 2374 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 20: /* decl_proto ::= DEF qual_name LPN param_list RPN SEMICOLON */
#line 273 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    p->prototype( yymsp[-5].minor.yy0->sloc, yymsp[-4].minor.yy259, yymsp[-2].minor.yy118, false );
                    p->destroy( yymsp[-5].minor.yy0 );
                  yy_destructor(yypParser,7,&yymsp[-3].minor);
  yy_destructor(yypParser,17,&yymsp[-1].minor);
  yy_destructor(yypParser,16,&yymsp[0].minor);
}
#line 2385 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 21: /* decl_proto ::= DEF qual_name LPN param_list RPN YIELD SEMICOLON */
#line 279 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    p->prototype( yymsp[-6].minor.yy0->sloc, yymsp[-5].minor.yy259, yymsp[-3].minor.yy118, true );
                    p->destroy( yymsp[-6].minor.yy0 );
                  yy_destructor(yypParser,7,&yymsp[-4].minor);
  yy_destructor(yypParser,17,&yymsp[-2].minor);
  yy_destructor(yypParser,6,&yymsp[-1].minor);
  yy_destructor(yypParser,16,&yymsp[0].minor);
}
#line 2397 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 22: /* decl_func ::= func_scope LBR stmt_list RBR */
#line 286 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    p->close_scope( yymsp[-3].minor.yy45->scope );
                  yy_destructor(yypParser,12,&yymsp[-2].minor);
  yy_destructor(yypParser,114,&yymsp[-1].minor);
  yy_destructor(yypParser,13,&yymsp[0].minor);
}
#line 2407 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 23: /* func_scope ::= DEF qual_name LPN param_list RPN */
#line 292 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy45 = p->function( yymsp[-4].minor.yy0->sloc, yymsp[-3].minor.yy259, yymsp[-1].minor.yy118, false, false );
                    p->destroy( yymsp[-4].minor.yy0 );
                  yy_destructor(yypParser,7,&yymsp[-2].minor);
  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 2417 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 24: /* func_scope ::= DEF qual_name LPN param_list RPN YIELD */
#line 298 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy45 = p->function( yymsp[-5].minor.yy0->sloc, yymsp[-4].minor.yy259, yymsp[-2].minor.yy118, true, false );
                    p->destroy( yymsp[-5].minor.yy0 );
                  yy_destructor(yypParser,7,&yymsp[-3].minor);
  yy_destructor(yypParser,17,&yymsp[-1].minor);
  yy_destructor(yypParser,6,&yymsp[0].minor);
}
#line 2428 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 25: /* decl_var ::= VAR name_list SEMICOLON */
#line 305 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    p->var( yymsp[-2].minor.yy0->sloc, yymsp[-1].minor.yy259, nullptr );
                    p->destroy( yymsp[-2].minor.yy0 );
                  yy_destructor(yypParser,16,&yymsp[0].minor);
}
#line 2437 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 26: /* decl_var ::= VAR name_list ASSIGN expr_list SEMICOLON */
#line 311 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    p->var( yymsp[-4].minor.yy0->sloc, yymsp[-3].minor.yy259, yymsp[-1].minor.yy259 );
                    p->destroy( yymsp[-4].minor.yy0 );
                  yy_destructor(yypParser,19,&yymsp[-2].minor);
  yy_destructor(yypParser,16,&yymsp[0].minor);
}
#line 2447 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 27: /* expr_index ::= LPN expr_assign RPN */
#line 328 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->mono( yymsp[-1].minor.yy259 );
                  yy_destructor(yypParser,7,&yymsp[-2].minor);
  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 2456 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 28: /* expr_index ::= IDENTIFIER */
#line 332 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->lookup( yymsp[0].minor.yy0->sloc, yymsp[0].minor.yy0->text, true );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 2464 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 29: /* expr_index ::= expr_index PERIOD IDENTIFIER */
      case 37: /* expr_postfix ::= expr_postfix PERIOD IDENTIFIER */ yytestcase(yyruleno==37);
#line 337 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->key( yymsp[-2].minor.yy259->sloc, yymsp[-2].minor.yy259, yymsp[0].minor.yy0->text );
                    p->destroy( yymsp[0].minor.yy0 );
                  yy_destructor(yypParser,11,&yymsp[-1].minor);
}
#line 2474 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 30: /* expr_index ::= expr_index PERIOD LSQ expr_value RSQ */
#line 342 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_expr_inkey >( yymsp[-4].minor.yy259->sloc, yymsp[-4].minor.yy259, yymsp[-1].minor.yy259 );
                  yy_destructor(yypParser,11,&yymsp[-3].minor);
  yy_destructor(yypParser,20,&yymsp[-2].minor);
  yy_destructor(yypParser,21,&yymsp[0].minor);
}
#line 2484 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 31: /* expr_index ::= expr_index LSQ expr_value RSQ */
#line 346 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_expr_index >( yymsp[-3].minor.yy259->sloc, yymsp[-3].minor.yy259, yymsp[-1].minor.yy259 );
                  yy_destructor(yypParser,20,&yymsp[-2].minor);
  yy_destructor(yypParser,21,&yymsp[0].minor);
}
#line 2493 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 32: /* expr_yield ::= YIELD LPN arg_list RPN */
#line 351 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    p->check_yield( yymsp[-3].minor.yy0->sloc );
                    yygotominor.yy259 = p->alloc< xec_expr_yield >( yymsp[-3].minor.yy0->sloc, yymsp[-1].minor.yy208 );
                    p->destroy( yymsp[-3].minor.yy0 );
                  yy_destructor(yypParser,7,&yymsp[-2].minor);
  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 2504 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 33: /* expr_new ::= NEW expr_index LPN arg_list RPN */
#line 358 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_new_new >( yymsp[-4].minor.yy0->sloc, yymsp[-3].minor.yy259, yymsp[-1].minor.yy208 );
                    p->destroy( yymsp[-4].minor.yy0 );
                  yy_destructor(yypParser,7,&yymsp[-2].minor);
  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 2514 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 34: /* expr_postfix ::= expr_yield */
      case 35: /* expr_postfix ::= expr_new */ yytestcase(yyruleno==35);
      case 41: /* expr_simple ::= expr_index */ yytestcase(yyruleno==41);
      case 42: /* expr_simple ::= expr_postfix */ yytestcase(yyruleno==42);
      case 45: /* expr_literal ::= expr_simple */ yytestcase(yyruleno==45);
      case 51: /* expr_suffix ::= expr_literal */ yytestcase(yyruleno==51);
      case 54: /* expr_unary ::= expr_suffix */ yytestcase(yyruleno==54);
      case 61: /* expr_mul ::= expr_unary */ yytestcase(yyruleno==61);
      case 66: /* expr_add ::= expr_mul */ yytestcase(yyruleno==66);
      case 69: /* expr_shift ::= expr_add */ yytestcase(yyruleno==69);
      case 73: /* expr_bitand ::= expr_shift */ yytestcase(yyruleno==73);
      case 75: /* expr_bitxor ::= expr_bitand */ yytestcase(yyruleno==75);
      case 77: /* expr_bitor ::= expr_bitxor */ yytestcase(yyruleno==77);
      case 79: /* expr_concat ::= expr_bitor */ yytestcase(yyruleno==79);
      case 81: /* expr_compare ::= expr_concat */ yytestcase(yyruleno==81);
      case 93: /* expr_and ::= expr_compare */ yytestcase(yyruleno==93);
      case 95: /* expr_xor ::= expr_and */ yytestcase(yyruleno==95);
      case 97: /* expr_or ::= expr_xor */ yytestcase(yyruleno==97);
      case 99: /* expr_nolbr ::= expr_or */ yytestcase(yyruleno==99);
      case 111: /* expr_value ::= expr_nolbr */ yytestcase(yyruleno==111);
      case 114: /* expr_lbody ::= expr_value */ yytestcase(yyruleno==114);
      case 122: /* expr_list ::= expr_lbody */ yytestcase(yyruleno==122);
      case 126: /* expr_assign ::= expr_list */ yytestcase(yyruleno==126);
      case 152: /* sexpr_lbody ::= expr_nolbr */ yytestcase(yyruleno==152);
      case 154: /* sexpr_list ::= expr_final */ yytestcase(yyruleno==154);
      case 155: /* sexpr_list ::= sexpr_lbody */ yytestcase(yyruleno==155);
      case 157: /* sexpr_assign ::= sexpr_list */ yytestcase(yyruleno==157);
      case 159: /* condition ::= expr_assign */ yytestcase(yyruleno==159);
      case 168: /* stmt ::= stmt_common */ yytestcase(yyruleno==168);
      case 171: /* stmt_reuse ::= stmt_common */ yytestcase(yyruleno==171);
      case 182: /* stmt_common ::= stmt_try */ yytestcase(yyruleno==182);
      case 205: /* for_cond ::= condition */ yytestcase(yyruleno==205);
      case 207: /* for_expr ::= expr_assign */ yytestcase(yyruleno==207);
#line 365 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = yymsp[0].minor.yy259;
                }
#line 2553 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 36: /* expr_postfix ::= expr_index LPN arg_list RPN */
      case 40: /* expr_postfix ::= expr_postfix LPN arg_list RPN */ yytestcase(yyruleno==40);
#line 373 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_expr_call >(
                                yymsp[-3].minor.yy259->sloc, yymsp[-3].minor.yy259, yymsp[-1].minor.yy208, false );
                  yy_destructor(yypParser,7,&yymsp[-2].minor);
  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 2564 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 38: /* expr_postfix ::= expr_postfix PERIOD LSQ expr_value RSQ */
#line 383 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_expr_inkey >(
                                yymsp[-4].minor.yy259->sloc, yymsp[-4].minor.yy259, yymsp[-1].minor.yy259 );
                  yy_destructor(yypParser,11,&yymsp[-3].minor);
  yy_destructor(yypParser,20,&yymsp[-2].minor);
  yy_destructor(yypParser,21,&yymsp[0].minor);
}
#line 2575 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 39: /* expr_postfix ::= expr_postfix LSQ expr_value RSQ */
#line 388 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_expr_index >(
                                yymsp[-3].minor.yy259->sloc, yymsp[-3].minor.yy259, yymsp[-1].minor.yy259 );
                  yy_destructor(yypParser,20,&yymsp[-2].minor);
  yy_destructor(yypParser,21,&yymsp[0].minor);
}
#line 2585 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 43: /* expr_simple ::= expr_index LPN arg_list RPN YIELD */
      case 44: /* expr_simple ::= expr_postfix LPN arg_list RPN YIELD */ yytestcase(yyruleno==44);
#line 413 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    p->check_yield( yymsp[-4].minor.yy259->sloc );
                    yygotominor.yy259 = p->alloc< xec_expr_call >(
                                yymsp[-4].minor.yy259->sloc, yymsp[-4].minor.yy259, yymsp[-2].minor.yy208, true );
                  yy_destructor(yypParser,7,&yymsp[-3].minor);
  yy_destructor(yypParser,17,&yymsp[-1].minor);
  yy_destructor(yypParser,6,&yymsp[0].minor);
}
#line 2598 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 46: /* expr_literal ::= NULL */
#line 430 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_expr_null >( yymsp[0].minor.yy0->sloc );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 2606 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 47: /* expr_literal ::= TRUE */
#line 435 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_expr_bool >( yymsp[0].minor.yy0->sloc, true );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 2614 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 48: /* expr_literal ::= FALSE */
#line 440 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_expr_bool >( yymsp[0].minor.yy0->sloc, false );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 2622 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 49: /* expr_literal ::= NUMBER */
#line 445 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    double number = p->parse_number( yymsp[0].minor.yy0 );
                    yygotominor.yy259 = p->alloc< xec_expr_number >( yymsp[0].minor.yy0->sloc, number );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 2631 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 50: /* expr_literal ::= STRING */
#line 451 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_expr_string >(
                            yymsp[0].minor.yy0->sloc, yymsp[0].minor.yy0->text, yymsp[0].minor.yy0->size );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 2640 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 52: /* expr_suffix ::= expr_suffix INCREMENT */
#line 462 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy259 = p->lvalue( yymsp[-1].minor.yy259 );
                    yygotominor.yy259 = p->alloc< xec_expr_postop >(
                             yymsp[-1].minor.yy259->sloc, XEC_ASTOP_POSTINC, yymsp[-1].minor.yy259 );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 2650 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 53: /* expr_suffix ::= expr_suffix DECREMENT */
#line 469 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy259 = p->lvalue( yymsp[-1].minor.yy259 );
                    yygotominor.yy259 = p->alloc< xec_expr_postop >(
                             yymsp[-1].minor.yy259->sloc, XEC_ASTOP_POSTDEC, yymsp[-1].minor.yy259 );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 2660 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 55: /* expr_unary ::= PLUS expr_unary */
#line 481 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_expr_unary >(
                             yymsp[-1].minor.yy0->sloc, XEC_ASTOP_POSITIVE, yymsp[0].minor.yy259 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 2669 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 56: /* expr_unary ::= MINUS expr_unary */
#line 487 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_expr_unary >(
                             yymsp[-1].minor.yy0->sloc, XEC_ASTOP_NEGATIVE, yymsp[0].minor.yy259 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 2678 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 57: /* expr_unary ::= XMARK expr_unary */
#line 493 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_expr_unary >(
                             yymsp[-1].minor.yy0->sloc, XEC_ASTOP_LOGICNOT, yymsp[0].minor.yy259 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 2687 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 58: /* expr_unary ::= TILDE expr_unary */
#line 499 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_expr_unary >(
                             yymsp[-1].minor.yy0->sloc, XEC_ASTOP_BITNOT, yymsp[0].minor.yy259 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 2696 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 59: /* expr_unary ::= INCREMENT expr_unary */
#line 505 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[0].minor.yy259 = p->lvalue( yymsp[0].minor.yy259 );
                    yygotominor.yy259 = p->alloc< xec_expr_preop >(
                             yymsp[-1].minor.yy0->sloc, XEC_ASTOP_PREINC, yymsp[0].minor.yy259 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 2706 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 60: /* expr_unary ::= DECREMENT expr_unary */
#line 512 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[0].minor.yy259 = p->lvalue( yymsp[0].minor.yy259 );
                    yygotominor.yy259 = p->alloc< xec_expr_preop >(
                             yymsp[-1].minor.yy0->sloc, XEC_ASTOP_PREDEC, yymsp[0].minor.yy259 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 2716 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 62: /* expr_mul ::= expr_mul ASTERISK expr_unary */
#line 524 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_expr_binary >( yymsp[-2].minor.yy259->sloc,
                                    XEC_ASTOP_MULTIPLY, yymsp[-2].minor.yy259, yymsp[0].minor.yy259 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 2725 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 63: /* expr_mul ::= expr_mul SOLIDUS expr_unary */
#line 530 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_expr_binary >( yymsp[-2].minor.yy259->sloc,
                                    XEC_ASTOP_DIVIDE, yymsp[-2].minor.yy259, yymsp[0].minor.yy259 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 2734 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 64: /* expr_mul ::= expr_mul PERCENT expr_unary */
#line 536 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_expr_binary >( yymsp[-2].minor.yy259->sloc,
                                    XEC_ASTOP_MODULUS, yymsp[-2].minor.yy259, yymsp[0].minor.yy259 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 2743 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 65: /* expr_mul ::= expr_mul TILDE expr_unary */
#line 542 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_expr_binary >( yymsp[-2].minor.yy259->sloc,
                                    XEC_ASTOP_INTDIV, yymsp[-2].minor.yy259, yymsp[0].minor.yy259 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 2752 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 67: /* expr_add ::= expr_add PLUS expr_mul */
#line 553 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_expr_binary >( yymsp[-2].minor.yy259->sloc,
                                    XEC_ASTOP_ADD, yymsp[-2].minor.yy259, yymsp[0].minor.yy259 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 2761 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 68: /* expr_add ::= expr_add MINUS expr_mul */
#line 559 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_expr_binary >( yymsp[-2].minor.yy259->sloc,
                                    XEC_ASTOP_SUBTRACT, yymsp[-2].minor.yy259, yymsp[0].minor.yy259 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 2770 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 70: /* expr_shift ::= expr_shift LSHIFT expr_add */
#line 570 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_expr_binary >( yymsp[-2].minor.yy259->sloc,
                                    XEC_ASTOP_LSHIFT, yymsp[-2].minor.yy259, yymsp[0].minor.yy259 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 2779 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 71: /* expr_shift ::= expr_shift LRSHIFT expr_add */
#line 576 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_expr_binary >( yymsp[-2].minor.yy259->sloc,
                                    XEC_ASTOP_LRSHIFT, yymsp[-2].minor.yy259, yymsp[0].minor.yy259 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 2788 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 72: /* expr_shift ::= expr_shift ARSHIFT expr_add */
#line 582 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_expr_binary >( yymsp[-2].minor.yy259->sloc,
                                    XEC_ASTOP_ARSHIFT, yymsp[-2].minor.yy259, yymsp[0].minor.yy259 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 2797 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 74: /* expr_bitand ::= expr_bitand AMPERSAND expr_shift */
#line 593 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_expr_binary >( yymsp[-2].minor.yy259->sloc,
                                    XEC_ASTOP_BITAND, yymsp[-2].minor.yy259, yymsp[0].minor.yy259 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 2806 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 76: /* expr_bitxor ::= expr_bitxor CARET expr_bitand */
#line 604 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_expr_binary >( yymsp[-2].minor.yy259->sloc,
                                    XEC_ASTOP_BITXOR, yymsp[-2].minor.yy259, yymsp[0].minor.yy259 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 2815 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 78: /* expr_bitor ::= expr_bitor VBAR expr_bitxor */
#line 615 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_expr_binary >( yymsp[-2].minor.yy259->sloc,
                                    XEC_ASTOP_BITOR, yymsp[-2].minor.yy259, yymsp[0].minor.yy259 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 2824 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 80: /* expr_concat ::= expr_concat CONCATENATE expr_bitor */
#line 626 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_expr_binary >( yymsp[-2].minor.yy259->sloc,
                                    XEC_ASTOP_CONCATENATE, yymsp[-2].minor.yy259, yymsp[0].minor.yy259 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 2833 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 82: /* expr_compare ::= expr_compare compare_op expr_concat */
#line 637 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->compare( yymsp[-1].minor.yy235.token->sloc, yymsp[-1].minor.yy235.op, yymsp[-2].minor.yy259, yymsp[0].minor.yy259 );
                    p->destroy( yymsp[-1].minor.yy235.token );
                }
#line 2841 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 83: /* compare_op ::= EQUAL */
#line 643 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy235 = make_token_op( yymsp[0].minor.yy0, XEC_ASTOP_EQUAL );
                }
#line 2848 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 84: /* compare_op ::= NOTEQUAL */
#line 647 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy235 = make_token_op( yymsp[0].minor.yy0, XEC_ASTOP_NOTEQUAL );
                }
#line 2855 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 85: /* compare_op ::= LESS */
#line 651 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy235 = make_token_op( yymsp[0].minor.yy0, XEC_ASTOP_LESS );
                }
#line 2862 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 86: /* compare_op ::= GREATER */
#line 655 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy235 = make_token_op( yymsp[0].minor.yy0, XEC_ASTOP_GREATER );
                }
#line 2869 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 87: /* compare_op ::= LESSEQUAL */
#line 659 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy235 = make_token_op( yymsp[0].minor.yy0, XEC_ASTOP_LESSEQUAL );
                }
#line 2876 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 88: /* compare_op ::= GREATEREQUAL */
#line 663 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy235 = make_token_op( yymsp[0].minor.yy0, XEC_ASTOP_GREATEREQUAL );
                }
#line 2883 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 89: /* compare_op ::= IN */
#line 667 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy235 = make_token_op( yymsp[0].minor.yy0, XEC_ASTOP_IN );
                }
#line 2890 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 90: /* compare_op ::= NOTIN */
#line 671 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy235 = make_token_op( yymsp[0].minor.yy0, XEC_ASTOP_NOTIN );
                }
#line 2897 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 91: /* compare_op ::= IS */
#line 675 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy235 = make_token_op( yymsp[0].minor.yy0, XEC_ASTOP_IS );
                }
#line 2904 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 92: /* compare_op ::= NOTIS */
#line 679 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy235 = make_token_op( yymsp[0].minor.yy0, XEC_ASTOP_NOTIS );
                }
#line 2911 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 94: /* expr_and ::= expr_and LOGICAND expr_compare */
#line 689 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_expr_logical >( yymsp[-2].minor.yy259->sloc,
                                    XEC_ASTOP_LOGICAND, yymsp[-2].minor.yy259, yymsp[0].minor.yy259 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 2920 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 96: /* expr_xor ::= expr_xor LOGICXOR expr_and */
#line 700 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_expr_logical >( yymsp[-2].minor.yy259->sloc,
                                    XEC_ASTOP_LOGICXOR, yymsp[-2].minor.yy259, yymsp[0].minor.yy259 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 2929 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 98: /* expr_or ::= expr_or LOGICOR expr_xor */
#line 711 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_expr_logical >( yymsp[-2].minor.yy259->sloc,
                                    XEC_ASTOP_LOGICOR, yymsp[-2].minor.yy259, yymsp[0].minor.yy259 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 2938 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 100: /* expr_nolbr ::= expr_or QMARK expr_value COLON expr_value */
#line 724 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_expr_qmark >(
                            yymsp[-4].minor.yy259->sloc, yymsp[-4].minor.yy259, yymsp[-2].minor.yy259, yymsp[0].minor.yy259 );
                  yy_destructor(yypParser,57,&yymsp[-3].minor);
  yy_destructor(yypParser,15,&yymsp[-1].minor);
}
#line 2948 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 101: /* expr_nolbr ::= LSQ RSQ */
#line 729 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_new_array >( yymsp[-1].minor.yy0->sloc );
                    p->destroy( yymsp[-1].minor.yy0 );
                  yy_destructor(yypParser,21,&yymsp[0].minor);
}
#line 2957 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 102: /* expr_nolbr ::= LSQ value_list RSQ */
#line 734 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = yymsp[-1].minor.yy134;
                    yygotominor.yy259->sloc = yymsp[-2].minor.yy0->sloc;
                    p->destroy( yymsp[-2].minor.yy0 );
                  yy_destructor(yypParser,21,&yymsp[0].minor);
}
#line 2967 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 103: /* expr_nolbr ::= newobj_scope LBR object_decls RBR */
#line 740 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = yymsp[-3].minor.yy182;
                    p->close_scope( yymsp[-3].minor.yy182->scope );
                  yy_destructor(yypParser,12,&yymsp[-2].minor);
  yy_destructor(yypParser,118,&yymsp[-1].minor);
  yy_destructor(yypParser,13,&yymsp[0].minor);
}
#line 2978 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 104: /* expr_nolbr ::= newf_scope LBR stmt_list RBR */
#line 745 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = yymsp[-3].minor.yy45;
                    p->close_scope( yymsp[-3].minor.yy45->scope );
                  yy_destructor(yypParser,12,&yymsp[-2].minor);
  yy_destructor(yypParser,114,&yymsp[-1].minor);
  yy_destructor(yypParser,13,&yymsp[0].minor);
}
#line 2989 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 105: /* newobj_scope ::= COLON */
#line 751 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy182 = p->object( yymsp[0].minor.yy0->sloc, nullptr, nullptr );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 2997 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 106: /* newobj_scope ::= COLON COLON expr_simple */
#line 756 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy182 = p->object( yymsp[-2].minor.yy0->sloc, nullptr, yymsp[0].minor.yy259 );
                    p->destroy( yymsp[-2].minor.yy0 );
                  yy_destructor(yypParser,15,&yymsp[-1].minor);
}
#line 3006 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 107: /* newf_scope ::= QMARK LPN param_list RPN */
#line 762 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy45 = p->function( yymsp[-3].minor.yy0->sloc,
                                    nullptr, yymsp[-1].minor.yy118, false, false );
                    p->destroy( yymsp[-3].minor.yy0 );
                  yy_destructor(yypParser,7,&yymsp[-2].minor);
  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 3017 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 108: /* newf_scope ::= PERIOD QMARK LPN param_list RPN */
#line 768 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy45 = p->function( yymsp[-4].minor.yy0->sloc,
                                    nullptr, yymsp[-1].minor.yy118, false, true );
                    p->destroy( yymsp[-4].minor.yy0 );
                  yy_destructor(yypParser,57,&yymsp[-3].minor);
  yy_destructor(yypParser,7,&yymsp[-2].minor);
  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 3029 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 109: /* newf_scope ::= QMARK LPN param_list RPN YIELD */
#line 774 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy45 = p->function( yymsp[-4].minor.yy0->sloc,
                                    nullptr, yymsp[-2].minor.yy118, true, false );
                    p->destroy( yymsp[-4].minor.yy0 );
                  yy_destructor(yypParser,7,&yymsp[-3].minor);
  yy_destructor(yypParser,17,&yymsp[-1].minor);
  yy_destructor(yypParser,6,&yymsp[0].minor);
}
#line 3041 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 110: /* newf_scope ::= PERIOD QMARK LPN param_list RPN YIELD */
#line 780 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy45 = p->function( yymsp[-5].minor.yy0->sloc,
                                    nullptr, yymsp[-2].minor.yy118, true, true );
                    p->destroy( yymsp[-5].minor.yy0 );
                  yy_destructor(yypParser,57,&yymsp[-4].minor);
  yy_destructor(yypParser,7,&yymsp[-3].minor);
  yy_destructor(yypParser,17,&yymsp[-1].minor);
  yy_destructor(yypParser,6,&yymsp[0].minor);
}
#line 3054 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 112: /* expr_value ::= LBR RBR */
#line 793 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_new_table >( yymsp[-1].minor.yy0->sloc );
                    p->destroy( yymsp[-1].minor.yy0 );
                  yy_destructor(yypParser,13,&yymsp[0].minor);
}
#line 3063 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 113: /* expr_value ::= LBR keyval_list RBR */
#line 798 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = yymsp[-1].minor.yy191;
                    yygotominor.yy259->sloc = yymsp[-2].minor.yy0->sloc;
                    p->destroy( yymsp[-2].minor.yy0 );
                  yy_destructor(yypParser,13,&yymsp[0].minor);
}
#line 3073 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 115: /* expr_lbody ::= expr_lbody COMMA expr_value */
      case 153: /* sexpr_lbody ::= sexpr_lbody COMMA expr_value */ yytestcase(yyruleno==153);
#line 809 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    xec_expr_list* l;
                    yygotominor.yy259 = l = p->expr_list( yymsp[-2].minor.yy259 );
                    l->values.push_back( yymsp[0].minor.yy259 );
                  yy_destructor(yypParser,9,&yymsp[-1].minor);
}
#line 3084 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 116: /* expr_final ::= ELLIPSIS */
#line 817 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    p->check_vararg( yymsp[0].minor.yy0->sloc );
                    yygotominor.yy259 = p->alloc< xec_expr_vararg >( yymsp[0].minor.yy0->sloc );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3093 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 117: /* expr_final ::= expr_index ELLIPSIS */
      case 119: /* expr_final ::= expr_postfix ELLIPSIS */ yytestcase(yyruleno==119);
#line 823 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->unpack( yymsp[-1].minor.yy259 );
                  yy_destructor(yypParser,10,&yymsp[0].minor);
}
#line 3102 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 118: /* expr_final ::= expr_index LSQ RSQ ELLIPSIS */
      case 120: /* expr_final ::= expr_postfix LSQ RSQ ELLIPSIS */ yytestcase(yyruleno==120);
#line 827 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_expr_unpack >( yymsp[-3].minor.yy259->sloc, yymsp[-3].minor.yy259 );
                  yy_destructor(yypParser,20,&yymsp[-2].minor);
  yy_destructor(yypParser,21,&yymsp[-1].minor);
  yy_destructor(yypParser,10,&yymsp[0].minor);
}
#line 3113 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 121: /* expr_list ::= expr_final */
#line 840 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    xec_expr_list* l;
                    yygotominor.yy259 = l = p->alloc< xec_expr_list >( yymsp[0].minor.yy259->sloc );
                    l->final = yymsp[0].minor.yy259;
                }
#line 3122 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 123: /* expr_list ::= expr_lbody COMMA expr_final */
      case 156: /* sexpr_list ::= sexpr_lbody COMMA expr_final */ yytestcase(yyruleno==156);
#line 850 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    xec_expr_list* l;
                    yygotominor.yy259 = l = p->expr_list( yymsp[-2].minor.yy259 );
                    l->final = yymsp[0].minor.yy259;
                  yy_destructor(yypParser,9,&yymsp[-1].minor);
}
#line 3133 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 124: /* arg_list ::= */
#line 857 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy208 = nullptr;
                }
#line 3140 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 125: /* arg_list ::= expr_list */
#line 861 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy208 = p->expr_list( yymsp[0].minor.yy259 );
                }
#line 3147 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 127: /* expr_assign ::= expr_lbody assign_op expr_assign */
      case 158: /* sexpr_assign ::= sexpr_lbody assign_op expr_assign */ yytestcase(yyruleno==158);
#line 870 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->assign( yymsp[-1].minor.yy235.token->sloc, yymsp[-1].minor.yy235.op, yymsp[-2].minor.yy259, yymsp[0].minor.yy259 );
                    p->destroy( yymsp[-1].minor.yy235.token );
                }
#line 3156 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 128: /* assign_op ::= ASSIGN */
#line 877 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy235 = make_token_op( yymsp[0].minor.yy0, XEC_ASTOP_ASSIGN );
                }
#line 3163 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 129: /* assign_op ::= MULASSIGN */
#line 881 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy235 = make_token_op( yymsp[0].minor.yy0, XEC_ASTOP_MULASSIGN );
                }
#line 3170 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 130: /* assign_op ::= DIVASSIGN */
#line 885 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy235 = make_token_op( yymsp[0].minor.yy0, XEC_ASTOP_DIVASSIGN );
                }
#line 3177 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 131: /* assign_op ::= MODASSIGN */
#line 889 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy235 = make_token_op( yymsp[0].minor.yy0, XEC_ASTOP_MODASSIGN );
                }
#line 3184 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 132: /* assign_op ::= INTDIVASSIGN */
#line 893 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy235 = make_token_op( yymsp[0].minor.yy0, XEC_ASTOP_INTDIVASSIGN );
                }
#line 3191 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 133: /* assign_op ::= ADDASSIGN */
#line 897 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy235 = make_token_op( yymsp[0].minor.yy0, XEC_ASTOP_ADDASSIGN );
                }
#line 3198 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 134: /* assign_op ::= SUBASSIGN */
#line 901 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy235 = make_token_op( yymsp[0].minor.yy0, XEC_ASTOP_SUBASSIGN );
                }
#line 3205 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 135: /* assign_op ::= LSHIFTASSIGN */
#line 905 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy235 = make_token_op( yymsp[0].minor.yy0, XEC_ASTOP_LSHIFTASSIGN );
                }
#line 3212 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 136: /* assign_op ::= LRSHIFTASSIGN */
#line 909 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy235 = make_token_op( yymsp[0].minor.yy0, XEC_ASTOP_LRSHIFTASSIGN );
                }
#line 3219 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 137: /* assign_op ::= ARSHIFTASSIGN */
#line 913 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy235 = make_token_op( yymsp[0].minor.yy0, XEC_ASTOP_ARSHIFTASSIGN );
                }
#line 3226 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 138: /* assign_op ::= BITANDASSIGN */
#line 917 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy235 = make_token_op( yymsp[0].minor.yy0, XEC_ASTOP_BITANDASSIGN );
                }
#line 3233 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 139: /* assign_op ::= BITXORASSIGN */
#line 921 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy235 = make_token_op( yymsp[0].minor.yy0, XEC_ASTOP_BITXORASSIGN );
                }
#line 3240 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 140: /* assign_op ::= BITORASSIGN */
#line 925 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy235 = make_token_op( yymsp[0].minor.yy0, XEC_ASTOP_BITORASSIGN );
                }
#line 3247 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 141: /* value_lbody ::= expr_value */
#line 931 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy134 = p->alloc< xec_new_array >( -1 );
                    yygotominor.yy134->values.push_back( yymsp[0].minor.yy259 );
                }
#line 3255 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 142: /* value_lbody ::= value_lbody COMMA expr_value */
#line 936 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy134 = yymsp[-2].minor.yy134;
                    yygotominor.yy134->values.push_back( yymsp[0].minor.yy259 );
                  yy_destructor(yypParser,9,&yymsp[-1].minor);
}
#line 3264 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 143: /* value_list ::= expr_final */
#line 942 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy134 = p->alloc< xec_new_array >( -1 );
                    yygotominor.yy134->final = yymsp[0].minor.yy259;
                }
#line 3272 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 144: /* value_list ::= expr_final COMMA */
#line 947 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy134 = p->alloc< xec_new_array >( -1 );
                    yygotominor.yy134->final = yymsp[-1].minor.yy259;
                  yy_destructor(yypParser,9,&yymsp[0].minor);
}
#line 3281 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 145: /* value_list ::= value_lbody */
#line 952 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy134 = yymsp[0].minor.yy134;
                }
#line 3288 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 146: /* value_list ::= value_lbody COMMA */
#line 956 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy134 = yymsp[-1].minor.yy134;
                  yy_destructor(yypParser,9,&yymsp[0].minor);
}
#line 3296 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 147: /* value_list ::= value_lbody COMMA expr_final */
#line 960 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy134 = yymsp[-2].minor.yy134;
                    yygotominor.yy134->final = yymsp[0].minor.yy259;
                  yy_destructor(yypParser,9,&yymsp[-1].minor);
}
#line 3305 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 148: /* keyval_lbody ::= expr_value COLON expr_value */
#line 967 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy191 = new xec_new_table( -1 );
                    yygotominor.yy191->elements.emplace_back( yymsp[-2].minor.yy259, yymsp[0].minor.yy259 );
                  yy_destructor(yypParser,15,&yymsp[-1].minor);
}
#line 3314 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 149: /* keyval_lbody ::= keyval_lbody COMMA expr_value COLON expr_value */
#line 973 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy191 = yymsp[-4].minor.yy191;
                    yygotominor.yy191->elements.emplace_back( yymsp[-2].minor.yy259, yymsp[0].minor.yy259 );
                  yy_destructor(yypParser,9,&yymsp[-3].minor);
  yy_destructor(yypParser,15,&yymsp[-1].minor);
}
#line 3324 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 150: /* keyval_list ::= keyval_lbody */
#line 979 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy191 = yymsp[0].minor.yy191;
                }
#line 3331 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 151: /* keyval_list ::= keyval_lbody COMMA */
#line 983 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy191 = yymsp[-1].minor.yy191;
                  yy_destructor(yypParser,9,&yymsp[0].minor);
}
#line 3339 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 160: /* condition ::= VAR name_list ASSIGN expr_list */
#line 1045 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->varstmt( yymsp[-3].minor.yy0->sloc, yymsp[-2].minor.yy259, yymsp[0].minor.yy259 );
                    p->destroy( yymsp[-3].minor.yy0 );
                  yy_destructor(yypParser,19,&yymsp[-1].minor);
}
#line 3348 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 162: /* stmt_list ::= stmt_list SEMICOLON */
#line 1058 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,114,&yymsp[-1].minor);
  yy_destructor(yypParser,16,&yymsp[0].minor);
}
#line 3356 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 163: /* stmt_list ::= stmt_list stmt */
#line 1061 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    p->statement( yymsp[0].minor.yy259 );
                  yy_destructor(yypParser,114,&yymsp[-1].minor);
}
#line 3364 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 164: /* stmt_list ::= stmt_list decl_object */
#line 1065 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,114,&yymsp[-1].minor);
  yy_destructor(yypParser,117,&yymsp[0].minor);
}
#line 3372 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 165: /* stmt_list ::= stmt_list decl_func */
#line 1068 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,114,&yymsp[-1].minor);
  yy_destructor(yypParser,122,&yymsp[0].minor);
}
#line 3380 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 166: /* stmt_list ::= stmt_list decl_var */
#line 1071 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                  yy_destructor(yypParser,114,&yymsp[-1].minor);
  yy_destructor(yypParser,123,&yymsp[0].minor);
}
#line 3388 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 167: /* stmt ::= stmt_block stmt_list RBR */
#line 1077 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = yymsp[-2].minor.yy268;
                    p->close_scope( yymsp[-2].minor.yy268->scope );
                  yy_destructor(yypParser,114,&yymsp[-1].minor);
  yy_destructor(yypParser,13,&yymsp[0].minor);
}
#line 3398 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 169: /* stmt_block ::= LBR */
#line 1087 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy268 = p->alloc< xec_stmt_block >( yymsp[0].minor.yy0->sloc );
                    yygotominor.yy268->scope = p->block_scope( yygotominor.yy268 );
                    yygotominor.yy268->scope->block = yygotominor.yy268;
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3408 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 170: /* stmt_reuse ::= stmt_reblock stmt_list RBR */
#line 1097 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = yymsp[-2].minor.yy268;
                  yy_destructor(yypParser,114,&yymsp[-1].minor);
  yy_destructor(yypParser,13,&yymsp[0].minor);
}
#line 3417 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 172: /* stmt_reblock ::= LBR */
#line 1106 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy268 = p->alloc< xec_stmt_block >( yymsp[0].minor.yy0->sloc );
                    p->get_scope()->block = yygotominor.yy268;
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3426 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 173: /* stmt_common ::= sexpr_assign SEMICOLON */
#line 1116 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = yymsp[-1].minor.yy259;
                  yy_destructor(yypParser,16,&yymsp[0].minor);
}
#line 3434 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 174: /* stmt_common ::= stmt_if LPN condition RPN stmt */
#line 1120 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-4].minor.yy188->condition = yymsp[-2].minor.yy259;
                    yymsp[-4].minor.yy188->iftrue    = yymsp[0].minor.yy259;
                    p->close_scope( yymsp[-4].minor.yy188->scope );
                    yygotominor.yy259 = yymsp[-4].minor.yy188;
                  yy_destructor(yypParser,7,&yymsp[-3].minor);
  yy_destructor(yypParser,17,&yymsp[-1].minor);
}
#line 3446 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 175: /* stmt_common ::= stmt_if LPN condition RPN stmt ELSE stmt */
#line 1128 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-6].minor.yy188->condition = yymsp[-4].minor.yy259;
                    yymsp[-6].minor.yy188->iftrue    = yymsp[-2].minor.yy259;
                    yymsp[-6].minor.yy188->iffalse   = yymsp[0].minor.yy259;
                    p->close_scope( yymsp[-6].minor.yy188->scope );
                    yygotominor.yy259 = yymsp[-6].minor.yy188;
                  yy_destructor(yypParser,7,&yymsp[-5].minor);
  yy_destructor(yypParser,17,&yymsp[-3].minor);
  yy_destructor(yypParser,2,&yymsp[-1].minor);
}
#line 3460 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 176: /* stmt_common ::= stmt_switch LPN condition RPN stmt_reblock stmt_list RPN */
#line 1137 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-6].minor.yy267->value     = yymsp[-4].minor.yy259;
                    yymsp[-6].minor.yy267->body      = yymsp[-2].minor.yy268;
                    p->close_switch( yymsp[-6].minor.yy267->scope );
                    yygotominor.yy259 = yymsp[-6].minor.yy267;
                  yy_destructor(yypParser,7,&yymsp[-5].minor);
  yy_destructor(yypParser,17,&yymsp[-3].minor);
  yy_destructor(yypParser,114,&yymsp[-1].minor);
  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 3474 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 177: /* stmt_common ::= stmt_while LPN condition RPN stmt_reuse */
#line 1145 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-4].minor.yy278->condition = yymsp[-2].minor.yy259;
                    yymsp[-4].minor.yy278->body      = yymsp[0].minor.yy259;
                    p->close_scope( yymsp[-4].minor.yy278->scope );
                    yygotominor.yy259 = yymsp[-4].minor.yy278;
                  yy_destructor(yypParser,7,&yymsp[-3].minor);
  yy_destructor(yypParser,17,&yymsp[-1].minor);
}
#line 3486 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 178: /* stmt_common ::= stmt_doblock WHILE LPN expr_assign RPN SEMICOLON */
#line 1153 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-5].minor.yy209->condition = yymsp[-2].minor.yy259;
                    p->close_scope( yymsp[-5].minor.yy209->scope );
                    yygotominor.yy259 = yymsp[-5].minor.yy209;
                  yy_destructor(yypParser,70,&yymsp[-4].minor);
  yy_destructor(yypParser,7,&yymsp[-3].minor);
  yy_destructor(yypParser,17,&yymsp[-1].minor);
  yy_destructor(yypParser,16,&yymsp[0].minor);
}
#line 3499 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 179: /* stmt_common ::= stmt_foreach stmt_reuse */
#line 1159 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy237->body      = yymsp[0].minor.yy259;
                    p->close_scope( yymsp[-1].minor.yy237->scope );
                    yygotominor.yy259 = yymsp[-1].minor.yy237;
                }
#line 3508 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 180: /* stmt_common ::= stmt_for stmt_reuse */
#line 1165 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy16->body      = yymsp[0].minor.yy259;
                    p->close_scope( yymsp[-1].minor.yy16->scope );
                    yygotominor.yy259 = yymsp[-1].minor.yy16;
                }
#line 3517 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 181: /* stmt_common ::= stmt_using LPN condition RPN stmt_reuse */
#line 1172 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-4].minor.yy227->uvalue    = yymsp[-2].minor.yy259;
                    yymsp[-4].minor.yy227->body      = yymsp[0].minor.yy259;
                    p->close_scope( yymsp[-4].minor.yy227->scope );
                    yygotominor.yy259 = yymsp[-4].minor.yy227;
                  yy_destructor(yypParser,7,&yymsp[-3].minor);
  yy_destructor(yypParser,17,&yymsp[-1].minor);
}
#line 3529 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 183: /* stmt_common ::= DELETE expr_lbody SEMICOLON */
#line 1183 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->delstmt( yymsp[-2].minor.yy0->sloc, yymsp[-1].minor.yy259 );
                    p->destroy( yymsp[-2].minor.yy0 );
                  yy_destructor(yypParser,16,&yymsp[0].minor);
}
#line 3538 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 184: /* stmt_common ::= CASE expr_value COLON */
#line 1188 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_stmt_case >( yymsp[-2].minor.yy0->sloc, yymsp[-1].minor.yy259 );
                    p->destroy( yymsp[-2].minor.yy0 );
                  yy_destructor(yypParser,15,&yymsp[0].minor);
}
#line 3547 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 185: /* stmt_common ::= DEFAULT COLON */
#line 1193 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_stmt_case >( yymsp[-1].minor.yy0->sloc, nullptr );
                    p->destroy( yymsp[-1].minor.yy0 );
                  yy_destructor(yypParser,15,&yymsp[0].minor);
}
#line 3556 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 186: /* stmt_common ::= CONTINUE SEMICOLON */
#line 1198 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    xec_ast_scope* target = p->continue_target( yymsp[-1].minor.yy0->sloc );
                    yygotominor.yy259 = p->alloc< xec_stmt_continue >(
                                yymsp[-1].minor.yy0->sloc, p->get_scope(), target );
                    target->continued = true;
                    p->destroy( yymsp[-1].minor.yy0 );
                  yy_destructor(yypParser,16,&yymsp[0].minor);
}
#line 3568 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 187: /* stmt_common ::= BREAK SEMICOLON */
#line 1206 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    xec_ast_scope* target = p->break_target( yymsp[-1].minor.yy0->sloc );
                    yygotominor.yy259 = p->alloc< xec_stmt_break >(
                                yymsp[-1].minor.yy0->sloc, p->get_scope(), target );
                    p->destroy( yymsp[-1].minor.yy0 );
                  yy_destructor(yypParser,16,&yymsp[0].minor);
}
#line 3579 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 188: /* stmt_common ::= RETURN SEMICOLON */
#line 1213 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_stmt_return >(
                                yymsp[-1].minor.yy0->sloc, p->get_scope(), nullptr );
                    p->destroy( yymsp[-1].minor.yy0 );
                  yy_destructor(yypParser,16,&yymsp[0].minor);
}
#line 3589 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 189: /* stmt_common ::= RETURN expr_list SEMICOLON */
#line 1219 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_stmt_return >(
                                yymsp[-2].minor.yy0->sloc, p->get_scope(), yymsp[-1].minor.yy259 );
                    p->destroy( yymsp[-2].minor.yy0 );
                  yy_destructor(yypParser,16,&yymsp[0].minor);
}
#line 3599 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 190: /* stmt_common ::= token_yield SEMICOLON */
#line 1225 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    p->check_yield( yymsp[-1].minor.yy19->sloc );
                    yygotominor.yy259 = p->alloc< xec_expr_yield >( yymsp[-1].minor.yy19->sloc, nullptr );
                    p->destroy( yymsp[-1].minor.yy19 );
                  yy_destructor(yypParser,16,&yymsp[0].minor);
}
#line 3609 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 191: /* stmt_common ::= token_yield expr_list SEMICOLON */
#line 1231 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_expr_yield >( yymsp[-2].minor.yy19->sloc, yymsp[-1].minor.yy259 );
                    p->destroy( yymsp[-2].minor.yy19 );
                  yy_destructor(yypParser,16,&yymsp[0].minor);
}
#line 3618 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 192: /* stmt_common ::= THROW expr_value SEMICOLON */
#line 1236 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = p->alloc< xec_stmt_throw >( yymsp[-2].minor.yy0->sloc, yymsp[-1].minor.yy259 );
                    p->destroy( yymsp[-2].minor.yy0 );
                  yy_destructor(yypParser,16,&yymsp[0].minor);
}
#line 3627 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 193: /* stmt_if ::= IF */
#line 1245 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy188 = p->alloc< xec_stmt_if >( yymsp[0].minor.yy0->sloc );
                    yygotominor.yy188->scope = p->block_scope( yygotominor.yy188 );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3636 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 194: /* stmt_switch ::= SWITCH */
#line 1252 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy267 = p->alloc< xec_stmt_switch >( yymsp[0].minor.yy0->sloc );
                    yygotominor.yy267->scope = p->block_scope( yygotominor.yy267 );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3645 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 195: /* stmt_while ::= WHILE */
#line 1259 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy278 = p->alloc< xec_stmt_while >( yymsp[0].minor.yy0->sloc );
                    yygotominor.yy278->scope = p->block_scope( yygotominor.yy278 );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3654 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 196: /* stmt_do ::= DO */
#line 1266 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy209 = p->alloc< xec_stmt_do >( yymsp[0].minor.yy0->sloc );
                    yygotominor.yy209->scope = p->block_scope( yygotominor.yy209 );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3663 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 197: /* stmt_doblock ::= stmt_do stmt_reuse */
#line 1273 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy209->body = yymsp[0].minor.yy259;
                    p->dowhile( yymsp[-1].minor.yy209->scope );
                    yygotominor.yy209 = yymsp[-1].minor.yy209;
                }
#line 3672 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 198: /* scope_for ::= FOR */
#line 1280 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    // open scope before we know the kind of statement.
                    yygotominor.yy218 = make_token_scope( yymsp[0].minor.yy0, p->block_scope( nullptr ) );
                }
#line 3680 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 199: /* stmt_foreach ::= scope_for LPN expr_lbody COLON expr_value RPN */
#line 1287 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy237 = p->foreachstmt( yymsp[-5].minor.yy218.token->sloc,
                            yymsp[-5].minor.yy218.scope, yymsp[-3].minor.yy259, yymsp[-1].minor.yy259, false, false );
                    p->destroy( yymsp[-5].minor.yy218.token );
                  yy_destructor(yypParser,7,&yymsp[-4].minor);
  yy_destructor(yypParser,15,&yymsp[-2].minor);
  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 3692 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 200: /* stmt_foreach ::= scope_for LPN expr_lbody EACHKEY expr_value RPN */
#line 1294 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy237 = p->foreachstmt( yymsp[-5].minor.yy218.token->sloc,
                            yymsp[-5].minor.yy218.scope, yymsp[-3].minor.yy259, yymsp[-1].minor.yy259, false, true );
                    p->destroy( yymsp[-5].minor.yy218.token );
                  yy_destructor(yypParser,7,&yymsp[-4].minor);
  yy_destructor(yypParser,81,&yymsp[-2].minor);
  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 3704 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 201: /* stmt_foreach ::= scope_for LPN VAR name_list COLON expr_value RPN */
#line 1301 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy237 = p->foreachstmt( yymsp[-6].minor.yy218.token->sloc,
                            yymsp[-6].minor.yy218.scope, yymsp[-3].minor.yy259, yymsp[-1].minor.yy259, true, false );
                    p->destroy( yymsp[-6].minor.yy218.token );
                  yy_destructor(yypParser,7,&yymsp[-5].minor);
  yy_destructor(yypParser,18,&yymsp[-4].minor);
  yy_destructor(yypParser,15,&yymsp[-2].minor);
  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 3717 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 202: /* stmt_foreach ::= scope_for LPN VAR name_list EACHKEY expr_value RPN */
#line 1308 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy237 = p->foreachstmt( yymsp[-6].minor.yy218.token->sloc,
                            yymsp[-6].minor.yy218.scope, yymsp[-3].minor.yy259, yymsp[-1].minor.yy259, true, true );
                    p->destroy( yymsp[-6].minor.yy218.token );
                  yy_destructor(yypParser,7,&yymsp[-5].minor);
  yy_destructor(yypParser,18,&yymsp[-4].minor);
  yy_destructor(yypParser,81,&yymsp[-2].minor);
  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 3730 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 203: /* stmt_for ::= scope_for LPN for_cond SEMICOLON for_expr SEMICOLON for_expr RPN */
#line 1318 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy16 = p->alloc< xec_stmt_for >( yymsp[-7].minor.yy218.token->sloc );
                    yymsp[-7].minor.yy218.scope->node = yygotominor.yy16;
                    yygotominor.yy16->scope        = yymsp[-7].minor.yy218.scope;
                    yygotominor.yy16->init         = yymsp[-5].minor.yy259;
                    yygotominor.yy16->condition    = yymsp[-3].minor.yy259;
                    yygotominor.yy16->update       = yymsp[-1].minor.yy259;
                    p->destroy( yymsp[-7].minor.yy218.token );
                  yy_destructor(yypParser,7,&yymsp[-6].minor);
  yy_destructor(yypParser,16,&yymsp[-4].minor);
  yy_destructor(yypParser,16,&yymsp[-2].minor);
  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 3747 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 204: /* for_cond ::= */
      case 206: /* for_expr ::= */ yytestcase(yyruleno==206);
#line 1329 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = nullptr;
                }
#line 3755 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 208: /* stmt_using ::= USING */
#line 1347 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy227 = p->alloc< xec_stmt_using >( yymsp[0].minor.yy0->sloc );
                    yygotominor.yy227->scope = p->block_scope( yygotominor.yy227 );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3764 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 209: /* stmt_try ::= try_catch */
#line 1357 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy259 = yymsp[0].minor.yy224;
                }
#line 3771 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 210: /* stmt_try ::= try_catch FINALLY stmt */
      case 211: /* stmt_try ::= try_block FINALLY stmt */ yytestcase(yyruleno==211);
#line 1361 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-2].minor.yy224->fstmt = yymsp[0].minor.yy259;
                    yygotominor.yy259 = yymsp[-2].minor.yy224;
                  yy_destructor(yypParser,5,&yymsp[-1].minor);
}
#line 3781 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 212: /* try_block ::= TRY stmt */
#line 1372 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy224 = p->alloc< xec_stmt_try >( yymsp[-1].minor.yy0->sloc, yymsp[0].minor.yy259 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 3789 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 213: /* try_catch ::= try_block stmt_catch stmt_reuse */
      case 214: /* try_catch ::= try_catch stmt_catch stmt_reuse */ yytestcase(yyruleno==214);
#line 1378 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yymsp[-1].minor.yy256->body = yymsp[0].minor.yy259;
                    p->close_scope( yymsp[-1].minor.yy256->scope );
                    yymsp[-2].minor.yy224->clist.push_back( yymsp[-1].minor.yy256 );
                    yygotominor.yy224 = yymsp[-2].minor.yy224;
                }
#line 3800 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 215: /* scope_catch ::= CATCH */
#line 1393 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    // open scope here ready for declarations.
                    yygotominor.yy218 = make_token_scope( yymsp[0].minor.yy0, p->block_scope( nullptr ) );
                }
#line 3808 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 216: /* stmt_catch ::= scope_catch LPN COLON expr_simple RPN */
#line 1399 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy256 = p->catchstmt( yymsp[-4].minor.yy218.token->sloc,
                            yymsp[-4].minor.yy218.scope, nullptr, yymsp[-1].minor.yy259, false );
                    p->destroy( yymsp[-4].minor.yy218.token );
                  yy_destructor(yypParser,7,&yymsp[-3].minor);
  yy_destructor(yypParser,15,&yymsp[-2].minor);
  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 3820 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 217: /* stmt_catch ::= scope_catch LPN expr_value COLON expr_simple RPN */
#line 1406 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy256 = p->catchstmt( yymsp[-5].minor.yy218.token->sloc,
                            yymsp[-5].minor.yy218.scope, yymsp[-3].minor.yy259, yymsp[-1].minor.yy259, false );
                    p->destroy( yymsp[-5].minor.yy218.token );
                  yy_destructor(yypParser,7,&yymsp[-4].minor);
  yy_destructor(yypParser,15,&yymsp[-2].minor);
  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 3832 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 218: /* stmt_catch ::= scope_catch LPN VAR name COLON expr_simple RPN */
#line 1413 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy256 = p->catchstmt( yymsp[-6].minor.yy218.token->sloc,
                            yymsp[-6].minor.yy218.scope, yymsp[-3].minor.yy75, yymsp[-1].minor.yy259, true );
                    p->destroy( yymsp[-6].minor.yy218.token );
                  yy_destructor(yypParser,7,&yymsp[-5].minor);
  yy_destructor(yypParser,18,&yymsp[-4].minor);
  yy_destructor(yypParser,15,&yymsp[-2].minor);
  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 3845 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 219: /* stmt_catch ::= scope_catch LPN expr_value RPN */
#line 1419 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy256 = p->catchstmt( yymsp[-3].minor.yy218.token->sloc,
                            yymsp[-3].minor.yy218.scope, yymsp[-1].minor.yy259, nullptr, false );
                    p->destroy( yymsp[-3].minor.yy218.token );
                  yy_destructor(yypParser,7,&yymsp[-2].minor);
  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 3856 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 220: /* stmt_catch ::= scope_catch LPN VAR name RPN */
#line 1425 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy256 = p->catchstmt( yymsp[-4].minor.yy218.token->sloc,
                            yymsp[-4].minor.yy218.scope, yymsp[-1].minor.yy75, nullptr, true );
                    p->destroy( yymsp[-4].minor.yy218.token );
                  yy_destructor(yypParser,7,&yymsp[-3].minor);
  yy_destructor(yypParser,18,&yymsp[-2].minor);
  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 3868 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      case 221: /* token_yield ::= YIELD */
#line 1441 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"
{
                    yygotominor.yy19 = yymsp[0].minor.yy0;
                }
#line 3875 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
        break;
      default:
        break;
  };
  yygoto = yyRuleInfo[yyruleno].lhs;
  yysize = yyRuleInfo[yyruleno].nrhs;
  yypParser->yyidx -= yysize;
  yyact = yy_find_reduce_action(yymsp[-yysize].stateno,(YYCODETYPE)yygoto);
  if( yyact < YYNSTATE ){
#ifdef NDEBUG
    /* If we are not debugging and the reduce action popped at least
    ** one element off the stack, then we can push the new element back
    ** onto the stack here, and skip the stack overflow test in yy_shift().
    ** That gives a significant speed improvement. */
    if( yysize ){
      yypParser->yyidx++;
      yymsp -= yysize-1;
      yymsp->stateno = (YYACTIONTYPE)yyact;
      yymsp->major = (YYCODETYPE)yygoto;
      yymsp->minor = yygotominor;
    }else
#endif
    {
      yy_shift(yypParser,yyact,yygoto,&yygotominor);
    }
  }else{
    assert( yyact == YYNSTATE + YYNRULE + 1 );
    yy_accept(yypParser);
  }
}

/*
** The following code executes when the parse fails
*/
#ifndef YYNOERRORRECOVERY
static void yy_parse_failed(
  yyParser *yypParser           /* The parser */
){
  XecParseARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sFail!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser fails */
  XecParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}
#endif /* YYNOERRORRECOVERY */

/*
** The following code executes when a syntax error first occurs.
*/
static void yy_syntax_error(
  yyParser *yypParser,           /* The parser */
  int yymajor,                   /* The major type of the error token */
  YYMINORTYPE yyminor            /* The minor type of the error token */
){
  XecParseARG_FETCH;
#define TOKEN (yyminor.yy0)
#line 1453 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.y"

    p->get_root()->script->error( TOKEN->sloc,
            "unexpected %s", TOKEN->get_spelling().c_str() );
#line 3941 "../../toolbox/source/xec/lib/parser/xec_parser_lemon.cpp"
  XecParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/*
** The following is executed when the parser accepts
*/
static void yy_accept(
  yyParser *yypParser           /* The parser */
){
  XecParseARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sAccept!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser accepts */
  XecParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/* The main parser program.
** The first argument is a pointer to a structure obtained from
** "XecParseAlloc" which describes the current state of the parser.
** The second argument is the major token number.  The third is
** the minor token.  The fourth optional argument is whatever the
** user wants (and specified in the grammar) and is available for
** use by the action routines.
**
** Inputs:
** <ul>
** <li> A pointer to the parser (an opaque structure.)
** <li> The major token number.
** <li> The minor token number.
** <li> An option argument of a grammar-specified type.
** </ul>
**
** Outputs:
** None.
*/
void XecParse(
  void *yyp,                   /* The parser */
  int yymajor,                 /* The major token code number */
  XecParseTOKENTYPE yyminor       /* The value for the token */
  XecParseARG_PDECL               /* Optional %extra_argument parameter */
){
  YYMINORTYPE yyminorunion;
  int yyact;            /* The parser action. */
  int yyendofinput;     /* True if we are at the end of input */
#ifdef YYERRORSYMBOL
  int yyerrorhit = 0;   /* True if yymajor has invoked an error */
#endif
  yyParser *yypParser;  /* The parser */

  /* (re)initialize the parser, if necessary */
  yypParser = (yyParser*)yyp;
  if( yypParser->yyidx<0 ){
#if YYSTACKDEPTH<=0
    if( yypParser->yystksz <=0 ){
      /*memset(&yyminorunion, 0, sizeof(yyminorunion));*/
      yyminorunion = yyzerominor;
      yyStackOverflow(yypParser, &yyminorunion);
      return;
    }
#endif
    yypParser->yyidx = 0;
    yypParser->yyerrcnt = -1;
    yypParser->yystack[0].stateno = 0;
    yypParser->yystack[0].major = 0;
  }
  yyminorunion.yy0 = yyminor;
  yyendofinput = (yymajor==0);
  XecParseARG_STORE;

#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sInput %s\n",yyTracePrompt,yyTokenName[yymajor]);
  }
#endif

  do{
    yyact = yy_find_shift_action(yypParser,(YYCODETYPE)yymajor);
    if( yyact<YYNSTATE ){
      assert( !yyendofinput );  /* Impossible to shift the $ token */
      yy_shift(yypParser,yyact,yymajor,&yyminorunion);
      yypParser->yyerrcnt--;
      yymajor = YYNOCODE;
    }else if( yyact < YYNSTATE + YYNRULE ){
      yy_reduce(yypParser,yyact-YYNSTATE);
    }else{
      assert( yyact == YY_ERROR_ACTION );
#ifdef YYERRORSYMBOL
      int yymx;
#endif
#ifndef NDEBUG
      if( yyTraceFILE ){
        fprintf(yyTraceFILE,"%sSyntax Error!\n",yyTracePrompt);
      }
#endif
#ifdef YYERRORSYMBOL
      /* A syntax error has occurred.
      ** The response to an error depends upon whether or not the
      ** grammar defines an error token "ERROR".  
      **
      ** This is what we do if the grammar does define ERROR:
      **
      **  * Call the %syntax_error function.
      **
      **  * Begin popping the stack until we enter a state where
      **    it is legal to shift the error symbol, then shift
      **    the error symbol.
      **
      **  * Set the error count to three.
      **
      **  * Begin accepting and shifting new tokens.  No new error
      **    processing will occur until three tokens have been
      **    shifted successfully.
      **
      */
      if( yypParser->yyerrcnt<0 ){
        yy_syntax_error(yypParser,yymajor,yyminorunion);
      }
      yymx = yypParser->yystack[yypParser->yyidx].major;
      if( yymx==YYERRORSYMBOL || yyerrorhit ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE,"%sDiscard input token %s\n",
             yyTracePrompt,yyTokenName[yymajor]);
        }
#endif
        yy_destructor(yypParser, (YYCODETYPE)yymajor,&yyminorunion);
        yymajor = YYNOCODE;
      }else{
         while(
          yypParser->yyidx >= 0 &&
          yymx != YYERRORSYMBOL &&
          (yyact = yy_find_reduce_action(
                        yypParser->yystack[yypParser->yyidx].stateno,
                        YYERRORSYMBOL)) >= YYNSTATE
        ){
          yy_pop_parser_stack(yypParser);
        }
        if( yypParser->yyidx < 0 || yymajor==0 ){
          yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
          yy_parse_failed(yypParser);
          yymajor = YYNOCODE;
        }else if( yymx!=YYERRORSYMBOL ){
          YYMINORTYPE u2;
          u2.YYERRSYMDT = 0;
          yy_shift(yypParser,yyact,YYERRORSYMBOL,&u2);
        }
      }
      yypParser->yyerrcnt = 3;
      yyerrorhit = 1;
#elif defined(YYNOERRORRECOVERY)
      /* If the YYNOERRORRECOVERY macro is defined, then do not attempt to
      ** do any kind of error recovery.  Instead, simply invoke the syntax
      ** error routine and continue going as if nothing had happened.
      **
      ** Applications can set this macro (for example inside %include) if
      ** they intend to abandon the parse upon the first syntax error seen.
      */
      yy_syntax_error(yypParser,yymajor,yyminorunion);
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      yymajor = YYNOCODE;
      
#else  /* YYERRORSYMBOL is not defined */
      /* This is what we do if the grammar does not define ERROR:
      **
      **  * Report an error message, and throw away the input token.
      **
      **  * If the input token is $, then fail the parse.
      **
      ** As before, subsequent error messages are suppressed until
      ** three input tokens have been successfully shifted.
      */
      if( yypParser->yyerrcnt<=0 ){
        yy_syntax_error(yypParser,yymajor,yyminorunion);
      }
      yypParser->yyerrcnt = 3;
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      if( yyendofinput ){
        yy_parse_failed(yypParser);
      }
      yymajor = YYNOCODE;
#endif
    }
  }while( yymajor!=YYNOCODE && yypParser->yyidx>=0 );
  return;
}
