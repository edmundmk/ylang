/* Driver template for the LEMON parser generator.
** The author disclaims copyright to this source code.
*/
/* First off, code is included that follows the "include" declaration
** in the input grammar file. */
#include <stdio.h>
#line 19 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"


#include <assert.h>
#include "yl_parser.h"
#include "yl_token.h"
#include "yl_ast.h"



struct yl_token_scope
{
    yl_token*          token;
    yl_ast_scope*      scope;
};

inline yl_token_scope make_token_scope(
                yl_token* token, yl_ast_scope* scope )
{
    yl_token_scope result;
    result.token = token;
    result.scope = scope;
    return result;
}


struct yl_token_op
{
    yl_token*          token;
    yl_ast_opkind   op;
};

inline yl_token_op make_token_op(
                yl_token* token, yl_ast_opkind op )
{
    yl_token_op result;
    result.token = token;
    result.op = op;
    return result;
}


#line 105 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"



void yl_parser::destroy( yl_token* token )
{
    token->~yl_token();
    recycle_tokens.push_back( token );
}


#line 61 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
/* Next is all token values, in a form suitable for use by makeheaders.
** This section will be null unless lemon is run with the -m switch.
*/
/* 
** These constants (all generated automatically by the parser generator)
** specify the various kinds of tokens (terminals) that the parser
** understands. 
**
** Each symbol here is a terminal symbol in the grammar.
*/
/* Make sure the INTERFACE macro is defined.
*/
#ifndef INTERFACE
# define INTERFACE 1
#endif
/* The next thing included is series of defines which control
** various aspects of the generated parser.
**    YYCODETYPE         is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 terminals
**                       and nonterminals.  "int" is used otherwise.
**    YYNOCODE           is a number of type YYCODETYPE which corresponds
**                       to no legal terminal or nonterminal number.  This
**                       number is used to fill in empty slots of the hash 
**                       table.
**    YYFALLBACK         If defined, this indicates that one or more tokens
**                       have fall-back values which should be used if the
**                       original value of the token will not parse.
**    YYACTIONTYPE       is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 rules and
**                       states combined.  "int" is used otherwise.
**    XecParseTOKENTYPE     is the data type used for minor tokens given 
**                       directly to the parser from the tokenizer.
**    YYMINORTYPE        is the data type used for all minor tokens.
**                       This is typically a union of many types, one of
**                       which is XecParseTOKENTYPE.  The entry in the union
**                       for base tokens is called "yy0".
**    YYSTACKDEPTH       is the maximum depth of the parser's stack.  If
**                       zero the stack is dynamically sized using realloc()
**    XecParseARG_SDECL     A static variable declaration for the %extra_argument
**    XecParseARG_PDECL     A parameter declaration for the %extra_argument
**    XecParseARG_STORE     Code to store %extra_argument into yypParser
**    XecParseARG_FETCH     Code to extract %extra_argument from yypParser
**    YYNSTATE           the combined number of states.
**    YYNRULE            the number of rules in the grammar
**    YYERRORSYMBOL      is the code number of the error symbol.  If not
**                       defined, then do no error processing.
*/
#define YYCODETYPE unsigned char
#define YYNOCODE 160
#define YYACTIONTYPE unsigned short int
#define XecParseTOKENTYPE  yl_token* 
typedef union {
  int yyinit;
  XecParseTOKENTYPE yy0;
  yl_stmt_for* yy3;
  yl_stmt_try* yy4;
  yl_ast_node* yy10;
  yl_stmt_do* yy15;
  yl_new_object* yy37;
  yl_stmt_block* yy39;
  yl_stmt_switch* yy48;
  yl_stmt_foreach* yy80;
  yl_token_scope yy83;
  yl_name_name* yy96;
  yl_ast_func* yy116;
  yl_new_array* yy129;
  yl_stmt_catch* yy145;
  yl_name_list* yy149;
  yl_token_op yy184;
  yl_new_table* yy204;
  yl_stmt_if* yy227;
  yl_expr_list* yy229;
  yl_token* yy252;
  yl_stmt_while* yy273;
  yl_stmt_using* yy294;
} YYMINORTYPE;
#ifndef YYSTACKDEPTH
#define YYSTACKDEPTH 100
#endif
#define XecParseARG_SDECL  yl_parser* p ;
#define XecParseARG_PDECL , yl_parser* p 
#define XecParseARG_FETCH  yl_parser* p  = yypParser->p 
#define XecParseARG_STORE yypParser->p  = p 
#define YYNSTATE 410
#define YYNRULE 223
#define YY_NO_ACTION      (YYNSTATE+YYNRULE+2)
#define YY_ACCEPT_ACTION  (YYNSTATE+YYNRULE+1)
#define YY_ERROR_ACTION   (YYNSTATE+YYNRULE)

/* The yyzerominor constant is used to initialize instances of
** YYMINORTYPE objects to zero. */
static const YYMINORTYPE yyzerominor = { 0 };

/* Define the yytestcase() macro to be a no-op if is not already defined
** otherwise.
**
** Applications can choose to define yytestcase() in the %include section
** to a macro that can assist in verifying code coverage.  For production
** code the yytestcase() macro should be turned off.  But it is useful
** for testing.
*/
#ifndef yytestcase
# define yytestcase(X)
#endif


/* Next are the tables used to determine what action to take based on the
** current state and lookahead token.  These tables are used to implement
** functions that take a state number and lookahead value and return an
** action integer.  
**
** Suppose the action integer is N.  Then the action is determined as
** follows
**
**   0 <= N < YYNSTATE                  Shift N.  That is, push the lookahead
**                                      token onto the stack and goto state N.
**
**   YYNSTATE <= N < YYNSTATE+YYNRULE   Reduce by rule N-YYNSTATE.
**
**   N == YYNSTATE+YYNRULE              A syntax error has occurred.
**
**   N == YYNSTATE+YYNRULE+1            The parser accepts its input.
**
**   N == YYNSTATE+YYNRULE+2            No such action.  Denotes unused
**                                      slots in the yy_action[] table.
**
** The action table is constructed as a single large table named yy_action[].
** Given state S and lookahead X, the action is computed as
**
**      yy_action[ yy_shift_ofst[S] + X ]
**
** If the index value yy_shift_ofst[S]+X is out of range or if the value
** yy_lookahead[yy_shift_ofst[S]+X] is not equal to X or if yy_shift_ofst[S]
** is equal to YY_SHIFT_USE_DFLT, it means that the action is not in the table
** and that yy_default[S] should be used instead.  
**
** The formula above is for computing the action when the lookahead is
** a terminal symbol.  If the lookahead is a non-terminal (as occurs after
** a reduce action) then the yy_reduce_ofst[] array is used in place of
** the yy_shift_ofst[] array and YY_REDUCE_USE_DFLT is used in place of
** YY_SHIFT_USE_DFLT.
**
** The following are the tables generated in this section:
**
**  yy_action[]        A single table containing all actions.
**  yy_lookahead[]     A table containing the lookahead for each entry in
**                     yy_action.  Used to detect hash collisions.
**  yy_shift_ofst[]    For each state, the offset into yy_action for
**                     shifting terminals.
**  yy_reduce_ofst[]   For each state, the offset into yy_action for
**                     shifting non-terminals after a reduce.
**  yy_default[]       Default action for each state.
*/
static const YYACTIONTYPE yy_action[] = {
 /*     0 */   150,  174,  175,  180,  272,  102,  359,  261,  244,  103,
 /*    10 */   117,  359,  195,  198,  200,    9,  202,  214,   12,   10,
 /*    20 */   206,   98,   99,   26,  237,   35,  336,  145,  275,  102,
 /*    30 */   405,  261,  351,  103,  310,  406,  407,   46,  123,  222,
 /*    40 */    14,  361,  358,  127,  337,  139,  316,  126,  141,  129,
 /*    50 */   160,  161,  163,  165,  108,  168,  169,  147,  376,   29,
 /*    60 */   401,  107,  402,  194,  225,  404,  239,  174,  287,  180,
 /*    70 */   133,  248,  184,  361,  358,  130,  117,   31,  195,  198,
 /*    80 */   200,    9,  202,  214,   12,   10,  206,   98,   99,   67,
 /*    90 */   224,   35,   84,   81,   82,   83,  133,  131,  351,  361,
 /*   100 */   358,  130,  176,  260,  123,  248,  188,  361,  358,  127,
 /*   110 */   337,  139,  316,  126,  141,  129,  160,  161,  163,  165,
 /*   120 */   108,  168,  169,  147,  376,  247,  401,  107,  402,  194,
 /*   130 */   113,  350,  239,  174,  287,  180,  176,   73,   74,   72,
 /*   140 */    39,  248,  177,  116,  195,  198,  200,    9,  202,  214,
 /*   150 */    12,   10,  206,   98,   99,   32,  334,   35,  340,  138,
 /*   160 */   248,  113,  133,  142,  351,  361,  358,  130,  396,   45,
 /*   170 */   123,   38,  176,  361,  358,  127,  337,  139,  316,  126,
 /*   180 */   141,  129,  160,  161,  163,  165,  108,  168,  169,  147,
 /*   190 */   376,  144,  401,  107,  402,  194,  390,  357,  278,  271,
 /*   200 */   287,  174,  133,  180,  118,  361,  358,  130,  248,  236,
 /*   210 */    55,  116,  195,  198,  200,    9,  202,  214,   12,   10,
 /*   220 */   206,   98,   99,  113,    3,   35,   33,   95,  248,   58,
 /*   230 */   145,  151,  351,   39,  248,   92,  355,    7,  123,  176,
 /*   240 */    49,  361,  358,  127,  337,  139,  316,  126,  141,  129,
 /*   250 */   160,  161,  163,  165,  108,  168,  169,  147,  376,  134,
 /*   260 */   401,  107,  402,  194,  351,  125,  278,  317,  287,  174,
 /*   270 */   133,  180,    1,  361,  358,  130,  337,  139,  322,  116,
 /*   280 */   195,  198,  200,    9,  202,  214,   12,   10,  206,   98,
 /*   290 */    99,   34,  264,   35,   32,   94,   57,    4,  138,  151,
 /*   300 */   351,  355,   15,   92,  153,   90,  123,  258,   56,  361,
 /*   310 */   358,  127,  337,  139,  316,  126,  141,  129,  160,  161,
 /*   320 */   163,  165,  108,  168,  169,  147,  376,   88,  401,  107,
 /*   330 */   402,  194,  223,    5,  278,  279,  287,  174,  133,  180,
 /*   340 */   303,  361,  358,  130,  222,    8,  117,   87,  195,  198,
 /*   350 */   200,    9,  202,  214,   12,   10,  206,   98,   99,   26,
 /*   360 */    91,   35,  385,  145,  634,    2,   76,   75,  351,  359,
 /*   370 */   308,  246,  128,   49,  123,    6,  303,  361,  358,  127,
 /*   380 */   337,  139,  316,  126,  141,  129,  160,  161,  163,  165,
 /*   390 */   108,  168,  169,  147,  376,  120,  401,  107,  402,  194,
 /*   400 */   356,  352,  239,  174,  287,  180,  333,  330,  132,   28,
 /*   410 */    64,   51,  299,  116,  195,  198,  200,    9,  202,  214,
 /*   420 */    12,   10,  206,   98,   99,   61,  249,   35,  282,  243,
 /*   430 */    30,  241,  291,   70,  351,  353,  378,   71,   68,   50,
 /*   440 */   123,   69,   66,  361,  358,  127,  337,  139,  316,  126,
 /*   450 */   141,  129,  160,  161,  163,  165,  108,  168,  169,  147,
 /*   460 */   376,   65,  401,  107,  402,  194,   48,  265,  278,  354,
 /*   470 */   287,  174,  119,  180,  115,  111,  178,  238,  185,  393,
 /*   480 */   121,  116,  195,  198,  200,    9,  202,  214,   12,   10,
 /*   490 */   206,   98,   99,   93,   96,   35,  386,  187,   97,  189,
 /*   500 */   384,  379,  351,   18,   54,   53,   23,   52,  123,  242,
 /*   510 */    43,  361,  358,  127,  337,  139,  316,  126,  141,  129,
 /*   520 */   160,  161,  163,  165,  108,  168,  169,  147,  376,   22,
 /*   530 */   401,  107,  402,  194,  114,   21,  278,  281,  287,  174,
 /*   540 */    17,  180,   27,  203,  205,  276,   20,   11,  117,  294,
 /*   550 */   195,  198,  200,    9,  202,  214,   12,   10,  206,   98,
 /*   560 */    99,  296,   19,   35,  298,  300,  304,  311,  319,  324,
 /*   570 */   351,  327,   47,  332,  335,   25,  123,   24,  338,  361,
 /*   580 */   358,  127,  337,  139,  316,  126,  141,  129,  160,  161,
 /*   590 */   163,  165,  108,  168,  169,  147,  376,  341,  401,  107,
 /*   600 */   402,  194,  360,  253,  239,  174,  287,  180,  383,  256,
 /*   610 */    42,  297,  229,  233,  117,  331,  195,  198,  200,    9,
 /*   620 */   202,  214,   12,   10,  206,   98,   99,  251,  295,   35,
 /*   630 */   326,  143,  380,  635,  635,  635,  351,  635,  635,  635,
 /*   640 */   635,  635,  123,  635,  635,  361,  358,  127,  337,  139,
 /*   650 */   316,  126,  141,  129,  160,  161,  163,  165,  108,  168,
 /*   660 */   169,  147,  376,  635,  401,  107,  402,  194,  635,  255,
 /*   670 */   239,  174,  287,  180,  635,  635,  635,  635,  635,  635,
 /*   680 */   635,  116,  195,  198,  200,    9,  202,  214,   12,   10,
 /*   690 */   206,   98,   99,  635,  635,   35,  635,  635,  635,  635,
 /*   700 */   635,  635,  351,  635,  635,  635,  635,  635,  123,  635,
 /*   710 */   635,  361,  358,  127,  337,  139,  316,  126,  141,  129,
 /*   720 */   160,  161,  163,  165,  108,  168,  169,  147,  376,  635,
 /*   730 */   401,  107,  402,  194,  635,  635,  278,  266,  287,  174,
 /*   740 */   635,  180,  635,  635,  635,  635,  635,  635,  635,  116,
 /*   750 */   195,  198,  200,    9,  202,  214,   12,   10,  206,   98,
 /*   760 */    99,  635,  635,   35,  635,  635,  635,  635,  635,  635,
 /*   770 */   351,  635,  635,  635,  635,  635,  123,  635,  635,  361,
 /*   780 */   358,  127,  337,  139,  316,  126,  141,  129,  160,  161,
 /*   790 */   163,  165,  108,  168,  169,  147,  376,  635,  401,  107,
 /*   800 */   402,  194,  635,  635,  278,  286,  287,  174,  635,  180,
 /*   810 */   635,  635,  635,  635,  635,  635,  117,  635,  195,  198,
 /*   820 */   200,    9,  202,  214,   12,   10,  206,   98,   99,  635,
 /*   830 */   635,   35,  635,  635,  635,  635,  635,  635,  351,  635,
 /*   840 */   635,  635,  635,  635,  123,  635,  635,  361,  358,  127,
 /*   850 */   337,  139,  316,  126,  141,  129,  160,  161,  163,  165,
 /*   860 */   108,  168,  169,  147,  376,  635,  401,  107,  402,  194,
 /*   870 */   635,  347,  239,  312,  287,   13,  635,  635,  181,   34,
 /*   880 */   264,  635,  381,  186,  240,  392,  101,  182,  403,  635,
 /*   890 */   103,  635,  153,   37,  635,  110,  349,  348,  346,  345,
 /*   900 */   339,   79,   80,   85,   86,   77,   78,  351,  635,  635,
 /*   910 */   635,  635,  635,  133,  635,  635,  361,  358,  130,  337,
 /*   920 */   139,  316,  126,  141,  129,  160,  161,  163,  165,  109,
 /*   930 */   183,  292,  290,  289,  288,  285,  283,  280,  277,  273,
 /*   940 */   269,  635,  635,  314,   44,   63,  209,  210,  211,   36,
 /*   950 */    62,  313,  315,  318,  312,  344,   13,  635,  635,  181,
 /*   960 */    34,  264,  635,  381,  186,  240,  270,  101,  182,  403,
 /*   970 */   635,  103,  635,  153,   37,  635,  110,  349,  348,  346,
 /*   980 */   345,  339,   79,   80,   85,   86,   77,   78,  351,  635,
 /*   990 */   635,  635,  635,  635,  133,  635,  635,  361,  358,  130,
 /*  1000 */   337,  139,  316,  126,  141,  129,  160,  161,  163,  167,
 /*  1010 */   635,  183,  635,  635,  635,  635,  635,  635,  635,  635,
 /*  1020 */   635,  635,  635,  635,  314,   44,   63,  209,  210,  211,
 /*  1030 */    36,   62,  313,  315,  318,  312,  344,   13,  635,  635,
 /*  1040 */   181,   34,  264,  635,  381,  186,  240,  409,  101,  182,
 /*  1050 */   403,  635,  103,  635,  153,   37,  635,  110,  349,  348,
 /*  1060 */   346,  345,  339,   79,   80,   85,   86,   77,   78,  351,
 /*  1070 */   635,  635,  635,  635,  635,  133,  635,  635,  361,  358,
 /*  1080 */   130,  337,  139,  316,  126,  141,  129,  160,  161,  166,
 /*  1090 */   351,  635,  183,  635,  635,  635,  133,  635,  635,  361,
 /*  1100 */   358,  130,  337,  139,  325,  314,   44,   63,  209,  210,
 /*  1110 */   211,   36,   62,  313,  315,  318,  312,  344,   13,  635,
 /*  1120 */   635,  181,   34,  264,  635,  381,  186,  240,  408,  101,
 /*  1130 */   182,  403,  635,  103,  635,  153,   37,  635,  110,  349,
 /*  1140 */   348,  346,  345,  339,   79,   80,   85,   86,   77,   78,
 /*  1150 */   351,  635,  635,  635,  635,  635,  133,  635,  635,  361,
 /*  1160 */   358,  130,  337,  139,  316,  126,  141,  129,  160,  164,
 /*  1170 */   351,  635,  635,  183,  635,  635,  133,  635,  635,  361,
 /*  1180 */   358,  130,  337,  139,  316,  124,  314,   44,   63,  209,
 /*  1190 */   210,  211,   36,   62,  313,  315,  318,  635,  344,  410,
 /*  1200 */   312,  635,   13,  635,  635,  181,   34,  264,  635,  381,
 /*  1210 */   186,  240,  635,  101,  182,  403,  635,  103,  635,  153,
 /*  1220 */    37,  635,  110,  349,  348,  346,  345,  339,   79,   80,
 /*  1230 */    85,   86,   77,   78,  351,  635,  635,  635,  635,  635,
 /*  1240 */   133,  635,  635,  361,  358,  130,  337,  139,  316,  126,
 /*  1250 */   141,  129,  162,  635,  351,  635,  635,  183,  635,  635,
 /*  1260 */   133,  635,  635,  361,  358,  130,  337,  139,  316,  122,
 /*  1270 */   314,   44,   63,  209,  210,  211,   36,   62,  313,  315,
 /*  1280 */   318,  312,  344,   13,  635,  635,  181,   34,  264,  635,
 /*  1290 */   381,  186,  240,  635,  101,  182,  403,  263,  103,  635,
 /*  1300 */   153,   37,  635,  110,  349,  348,  346,  345,  339,   79,
 /*  1310 */    80,   85,   86,   77,   78,  351,  635,  635,  635,  635,
 /*  1320 */   635,  133,  635,  635,  361,  358,  130,  337,  139,  316,
 /*  1330 */   126,  141,  135,  635,  351,  635,  635,  635,  183,  635,
 /*  1340 */   133,  635,  635,  361,  358,  130,  337,  139,  316,  126,
 /*  1350 */   136,  314,   44,   63,  209,  210,  211,   36,   62,  313,
 /*  1360 */   315,  318,  312,  344,   13,  635,  635,  181,   34,  264,
 /*  1370 */   635,  381,  186,  240,  635,  635,  182,  635,  635,  635,
 /*  1380 */   635,  153,   37,  635,  110,  349,  348,  346,  345,  339,
 /*  1390 */    79,   80,   85,   86,   77,   78,  351,  635,  635,  156,
 /*  1400 */    34,  264,  133,  635,  635,  361,  358,  130,  337,  139,
 /*  1410 */   316,  126,  146,  153,  635,  351,  110,  635,  635,  183,
 /*  1420 */   635,  133,  635,  635,  361,  358,  130,  337,  139,  316,
 /*  1430 */   126,  137,  314,   44,   63,  209,  210,  211,   36,   62,
 /*  1440 */   313,  315,  318,  312,  344,   13,  635,  635,  181,   34,
 /*  1450 */   264,  635,  381,  186,  260,  635,  635,  182,  635,  635,
 /*  1460 */   635,  635,  153,   37,  635,  110,  349,  348,  346,  345,
 /*  1470 */   339,   79,   80,   85,   86,   77,   78,   41,  635,  351,
 /*  1480 */   635,  635,  635,  635,  635,  133,  635,  374,  361,  358,
 /*  1490 */   130,  337,  139,  321,  635,  635,  635,  635,  635,  635,
 /*  1500 */   183,  635,  635,  635,  635,  635,  635,  635,  635,  174,
 /*  1510 */   635,  180,  635,  314,   44,   63,  209,  210,  211,   36,
 /*  1520 */    62,  313,  315,  318,  635,  344,  635,  362,  363,  364,
 /*  1530 */   365,  366,  367,  368,  369,  370,  371,  372,  373,  635,
 /*  1540 */   351,  635,  174,  635,  180,  398,  123,  245,  391,  361,
 /*  1550 */   358,  127,  337,  139,  316,  126,  141,  129,  160,  161,
 /*  1560 */   163,  165,  108,  168,  169,  147,  375,  105,  397,  635,
 /*  1570 */   635,  635,  343,  351,  635,  635,  635,  219,  398,  123,
 /*  1580 */   245,  391,  361,  358,  127,  337,  139,  316,  126,  141,
 /*  1590 */   129,  160,  161,  163,  165,  108,  168,  169,  147,  375,
 /*  1600 */   106,  397,  635,  635,  174,  207,  180,  635,  351,  635,
 /*  1610 */   635,  635,  635,  635,  133,  635,  635,  361,  358,  130,
 /*  1620 */   337,  139,  320,  635,  635,  635,  635,  635,  635,  635,
 /*  1630 */   635,  635,  635,  635,  174,  351,  180,  635,  635,  635,
 /*  1640 */   398,  123,  245,  391,  361,  358,  127,  337,  139,  316,
 /*  1650 */   126,  141,  129,  160,  161,  163,  165,  108,  168,  169,
 /*  1660 */   147,  375,  106,  397,  635,  351,  635,  199,  635,  635,
 /*  1670 */   398,  123,  342,  391,  361,  358,  127,  337,  139,  316,
 /*  1680 */   126,  141,  129,  160,  161,  163,  165,  108,  168,  169,
 /*  1690 */   147,  375,  106,  397,  174,  635,  180,  635,  351,  635,
 /*  1700 */   635,  635,  635,  221,  133,  635,  635,  361,  358,  130,
 /*  1710 */   337,  139,  316,  126,  141,  129,  160,  161,  163,  165,
 /*  1720 */   108,  168,  171,  635,  174,  351,  180,  635,  635,  635,
 /*  1730 */   398,  123,  245,  391,  361,  358,  127,  337,  139,  316,
 /*  1740 */   126,  141,  129,  160,  161,  163,  165,  108,  168,  169,
 /*  1750 */   147,  375,  106,  397,  635,  351,  635,  197,  635,  635,
 /*  1760 */   398,  123,  342,  391,  361,  358,  127,  337,  139,  316,
 /*  1770 */   126,  141,  129,  160,  161,  163,  165,  108,  168,  169,
 /*  1780 */   147,  375,  106,  397,  174,  635,  180,  635,  351,  635,
 /*  1790 */   635,  635,  635,  220,  133,  635,  635,  361,  358,  130,
 /*  1800 */   337,  139,  316,  126,  141,  129,  160,  161,  163,  165,
 /*  1810 */   108,  170,  157,  635,  174,  351,  180,  635,  635,  635,
 /*  1820 */   398,  123,  245,  391,  361,  358,  127,  337,  139,  316,
 /*  1830 */   126,  141,  129,  160,  161,  163,  165,  108,  168,  169,
 /*  1840 */   147,  375,  106,  397,  635,  351,  635,  201,  635,  635,
 /*  1850 */   323,  123,  635,  391,  361,  358,  127,  337,  139,  316,
 /*  1860 */   126,  141,  129,  160,  161,  163,  165,  108,  168,  169,
 /*  1870 */   147,  375,  196,  397,  174,  635,  180,  635,  351,  635,
 /*  1880 */   635,  635,  635,  635,  133,  635,  635,  361,  358,  130,
 /*  1890 */   337,  139,  309,  635,  635,  635,  635,  635,  635,  635,
 /*  1900 */   635,  635,  228,  635,  174,  351,  180,  635,  635,  635,
 /*  1910 */   398,  123,  400,  391,  361,  358,  127,  337,  139,  316,
 /*  1920 */   126,  141,  129,  160,  161,  163,  165,  108,  168,  169,
 /*  1930 */   147,  375,  106,  397,  635,  351,  635,  635,  635,  635,
 /*  1940 */   323,  123,  635,  391,  361,  358,  127,  337,  139,  316,
 /*  1950 */   126,  141,  129,  160,  161,  163,  165,  108,  168,  169,
 /*  1960 */   147,  375,  196,  397,  158,  635,  174,  635,  180,  635,
 /*  1970 */   635,  351,  635,  635,  635,  635,  635,  133,  635,  635,
 /*  1980 */   361,  358,  130,  337,  139,  307,  635,  635,  635,  635,
 /*  1990 */   635,  635,  635,  635,  635,  635,  174,  351,  180,  635,
 /*  2000 */   635,  635,  323,  123,  635,  391,  361,  358,  127,  337,
 /*  2010 */   139,  316,  126,  141,  129,  160,  161,  163,  165,  108,
 /*  2020 */   168,  169,  147,  375,  196,  397,  635,  351,  635,  635,
 /*  2030 */   635,  635,  398,  123,  154,  391,  361,  358,  127,  337,
 /*  2040 */   139,  316,  126,  141,  129,  160,  161,  163,  165,  108,
 /*  2050 */   168,  169,  147,  375,  106,  397,  174,  635,  180,  635,
 /*  2060 */   635,  351,  635,  635,  635,  635,  635,  133,  635,  635,
 /*  2070 */   361,  358,  130,  337,  139,  305,  635,  635,  635,  635,
 /*  2080 */   635,  635,  635,  635,  635,  635,  174,  351,  180,  635,
 /*  2090 */   635,  635,  398,  123,  204,  391,  361,  358,  127,  337,
 /*  2100 */   139,  316,  126,  141,  129,  160,  161,  163,  165,  108,
 /*  2110 */   168,  169,  147,  375,  106,  397,  635,  351,  635,  635,
 /*  2120 */   635,  635,  398,  123,  152,  391,  361,  358,  127,  337,
 /*  2130 */   139,  316,  126,  141,  129,  160,  161,  163,  165,  108,
 /*  2140 */   168,  169,  147,  375,  106,  397,  232,  635,  174,  635,
 /*  2150 */   180,  635,  635,  351,  635,  635,  635,  635,  635,  133,
 /*  2160 */   635,  635,  361,  358,  130,  337,  139,  301,  635,  635,
 /*  2170 */   635,  635,  635,  635,  635,  635,  635,  635,  174,  351,
 /*  2180 */   180,  635,  635,  635,  323,  123,  635,  391,  361,  358,
 /*  2190 */   127,  337,  139,  316,  126,  141,  129,  160,  161,  163,
 /*  2200 */   165,  108,  168,  169,  147,  375,  196,  397,  635,  351,
 /*  2210 */   635,  635,  635,  635,  398,  123,  399,  391,  361,  358,
 /*  2220 */   127,  337,  139,  316,  126,  141,  129,  160,  161,  163,
 /*  2230 */   165,  108,  168,  169,  147,  375,  106,  397,  174,  635,
 /*  2240 */   180,  635,  635,  351,  635,  635,  635,  635,  635,  133,
 /*  2250 */   635,  635,  361,  358,  130,  337,  139,  329,  635,  635,
 /*  2260 */   635,  635,  635,  635,  635,  635,  635,  635,  174,  351,
 /*  2270 */   180,  635,  635,  635,  179,  123,  635,  391,  361,  358,
 /*  2280 */   127,  337,  139,  316,  126,  141,  129,  160,  161,  163,
 /*  2290 */   165,  108,  168,  169,  147,  375,  196,  397,  635,  351,
 /*  2300 */   635,  635,  635,  635,  149,  123,  635,  391,  361,  358,
 /*  2310 */   127,  337,  139,  316,  126,  141,  129,  160,  161,  163,
 /*  2320 */   165,  108,  168,  169,  147,  375,  196,  397,  174,  635,
 /*  2330 */   180,  635,  635,  635,  635,  351,  635,  635,  635,  635,
 /*  2340 */   635,  133,  635,  635,  361,  358,  130,  337,  139,  328,
 /*  2350 */   635,  635,  635,  635,  635,  635,  635,  635,  635,  351,
 /*  2360 */   635,  635,  635,  635,  212,  123,  635,  391,  361,  358,
 /*  2370 */   127,  337,  139,  316,  126,  141,  129,  160,  161,  163,
 /*  2380 */   165,  108,  168,  169,  147,  375,  196,  397,  635,  174,
 /*  2390 */   635,  180,  635,  635,  226,  173,  156,   34,  264,  635,
 /*  2400 */   635,  635,  635,  635,  635,   93,  635,  635,  635,  635,
 /*  2410 */   153,  635,  635,  110,  635,  635,  174,  635,  180,  635,
 /*  2420 */   351,  635,  635,  635,  635,  635,  123,  635,  274,  361,
 /*  2430 */   358,  127,  337,  139,  316,  126,  141,  129,  160,  161,
 /*  2440 */   163,  165,  108,  168,  169,  147,  375,  351,  227,  174,
 /*  2450 */   635,  180,  250,  123,  635,  391,  361,  358,  127,  337,
 /*  2460 */   139,  316,  126,  141,  129,  160,  161,  163,  165,  108,
 /*  2470 */   168,  169,  147,  375,  196,  397,  174,  635,  180,  635,
 /*  2480 */   351,  635,  635,  192,  190,  635,  123,  635,  284,  361,
 /*  2490 */   358,  127,  337,  139,  316,  126,  141,  129,  160,  161,
 /*  2500 */   163,  165,  108,  168,  169,  147,  375,  351,  293,  635,
 /*  2510 */   174,  635,  180,  133,  635,  191,  361,  358,  130,  337,
 /*  2520 */   139,  316,  126,  141,  129,  160,  161,  163,  165,  108,
 /*  2530 */   168,  169,  147,  375,  635,  635,  635,  635,  174,  635,
 /*  2540 */   180,  351,  635,  635,  635,  635,  635,  133,  635,  391,
 /*  2550 */   361,  358,  130,  337,  139,  316,  126,  141,  129,  160,
 /*  2560 */   161,  163,  165,  108,  168,  169,  147,  375,  140,  351,
 /*  2570 */   174,  635,  180,  635,  635,  123,  635,  394,  361,  358,
 /*  2580 */   127,  337,  139,  316,  126,  141,  129,  160,  161,  163,
 /*  2590 */   165,  108,  168,  169,  147,  375,  635,  395,  635,  635,
 /*  2600 */   174,  351,  180,  635,  635,  635,  635,  123,  635,  388,
 /*  2610 */   361,  358,  127,  337,  139,  316,  126,  141,  129,  160,
 /*  2620 */   161,  163,  165,  108,  168,  169,  147,  375,  174,  389,
 /*  2630 */   180,  351,  635,  635,  635,  635,  635,  133,  635,  387,
 /*  2640 */   361,  358,  130,  337,  139,  316,  126,  141,  129,  160,
 /*  2650 */   161,  163,  165,  108,  168,  169,  147,  375,  174,  351,
 /*  2660 */   180,  635,  635,  635,  635,  133,  635,  159,  361,  358,
 /*  2670 */   130,  337,  139,  316,  126,  141,  129,  160,  161,  163,
 /*  2680 */   165,  108,  168,  169,  147,  375,  635,  635,  635,  351,
 /*  2690 */   174,  635,  180,  635,  635,  133,  635,  172,  361,  358,
 /*  2700 */   130,  337,  139,  316,  126,  141,  129,  160,  161,  163,
 /*  2710 */   165,  108,  168,  169,  147,  375,  635,  174,  635,  180,
 /*  2720 */   635,  351,  635,  635,  635,  635,  635,  133,  635,  218,
 /*  2730 */   361,  358,  130,  337,  139,  316,  126,  141,  129,  160,
 /*  2740 */   161,  163,  165,  108,  168,  169,  147,  375,  351,  174,
 /*  2750 */   635,  180,  635,  635,  133,  635,  234,  361,  358,  130,
 /*  2760 */   337,  139,  316,  126,  141,  129,  160,  161,  163,  165,
 /*  2770 */   108,  168,  169,  147,  375,  635,  635,  635,  635,  174,
 /*  2780 */   351,  180,  635,  635,  635,  635,  133,  635,  217,  361,
 /*  2790 */   358,  130,  337,  139,  316,  126,  141,  129,  160,  161,
 /*  2800 */   163,  165,  108,  168,  169,  147,  375,  174,  635,  180,
 /*  2810 */   351,  635,  635,  635,  635,  635,  133,  635,  155,  361,
 /*  2820 */   358,  130,  337,  139,  316,  126,  141,  129,  160,  161,
 /*  2830 */   163,  165,  108,  168,  169,  147,  375,  635,  351,  635,
 /*  2840 */   635,  635,  635,  635,  133,  635,  216,  361,  358,  130,
 /*  2850 */   337,  139,  316,  126,  141,  129,  160,  161,  163,  165,
 /*  2860 */   108,  168,  169,  147,  375,  156,   34,  264,  635,  381,
 /*  2870 */   186,   40,  635,  635,  182,  306,  635,  635,  635,  153,
 /*  2880 */    37,  635,  110,  349,  348,  346,  345,  339,   79,   80,
 /*  2890 */    85,   86,   77,   78,  635,  635,  635,  635,  635,  635,
 /*  2900 */   635,  635,  635,  635,  635,  635,  635,  635,  635,  635,
 /*  2910 */   635,  635,  635,  635,  635,  635,  635,  183,  635,  635,
 /*  2920 */   635,  635,  635,  635,  156,   34,  264,  635,  381,  186,
 /*  2930 */    40,  635,  635,  182,  302,  150,  635,  175,  153,   37,
 /*  2940 */   635,  110,  349,  348,  346,  345,  339,   79,   80,   85,
 /*  2950 */    86,   77,   78,  174,  635,  180,  635,  635,  635,  635,
 /*  2960 */   635,  635,  635,  635,  635,  259,  635,  635,  262,  257,
 /*  2970 */   254,  252,  635,  635,  635,  635,  183,  635,  635,  635,
 /*  2980 */   635,  635,  635,  635,  351,  635,  635,  635,  635,  635,
 /*  2990 */   133,  635,  394,  361,  358,  130,  337,  139,  316,  126,
 /*  3000 */   141,  129,  160,  161,  163,  165,  108,  168,  169,  147,
 /*  3010 */   375,  156,   34,  264,  635,  381,  186,   40,  635,  635,
 /*  3020 */   182,  635,  635,  635,  635,  153,   37,  267,  110,  349,
 /*  3030 */   348,  346,  345,  339,   79,   80,   85,   86,   77,   78,
 /*  3040 */   174,  635,  180,  635,  635,  635,  635,  635,  635,  635,
 /*  3050 */   635,  635,  635,  635,  635,  635,  635,  635,  635,  635,
 /*  3060 */   635,  635,  635,  183,  635,  635,  635,  635,  635,  635,
 /*  3070 */   635,  351,  635,  635,  174,  635,  180,  133,  635,  268,
 /*  3080 */   361,  358,  130,  337,  139,  316,  126,  141,  129,  160,
 /*  3090 */   161,  163,  165,  108,  168,  169,  147,  375,  635,  635,
 /*  3100 */   635,  174,  635,  180,  635,  351,  635,  635,  635,  635,
 /*  3110 */   635,  133,  635,  215,  361,  358,  130,  337,  139,  316,
 /*  3120 */   126,  141,  129,  160,  161,  163,  165,  108,  168,  169,
 /*  3130 */   147,  375,  351,  635,  635,  635,  635,  635,  133,  635,
 /*  3140 */   213,  361,  358,  130,  337,  139,  316,  126,  141,  129,
 /*  3150 */   160,  161,  163,  165,  108,  168,  169,  147,  375,  635,
 /*  3160 */   635,  174,  635,  180,  635,  635,  635,  635,  635,  635,
 /*  3170 */   635,  635,  635,  635,  635,  635,  635,  635,  635,  635,
 /*  3180 */   635,  635,  635,  635,  635,  635,  635,  635,  635,  635,
 /*  3190 */   635,  635,  351,  635,  635,  635,  635,  635,  133,  635,
 /*  3200 */   148,  361,  358,  130,  337,  139,  316,  126,  141,  129,
 /*  3210 */   160,  161,  163,  165,  108,  168,  169,  147,  375,  156,
 /*  3220 */    34,  264,  635,  381,  186,   40,  635,  635,  182,  635,
 /*  3230 */   635,  100,  635,  153,   37,  635,  110,  349,  348,  346,
 /*  3240 */   345,  339,   79,   80,   85,   86,   77,   78,  635,  635,
 /*  3250 */   635,  635,  635,  635,  635,  635,  635,  635,  635,  635,
 /*  3260 */   635,  635,  635,  635,  635,  635,  635,  635,  635,  635,
 /*  3270 */   635,  183,  635,  635,  635,  635,  635,  635,  156,   34,
 /*  3280 */   264,  635,  381,  186,   40,  635,  635,  182,  635,  635,
 /*  3290 */   104,  635,  153,   37,  635,  110,  349,  348,  346,  345,
 /*  3300 */   339,   79,   80,   85,   86,   77,   78,  174,  635,  180,
 /*  3310 */   635,  635,  635,  635,  635,  635,  635,  635,  635,  635,
 /*  3320 */   635,  635,  635,  635,  635,  635,  635,  635,  635,  635,
 /*  3330 */   183,  635,  635,  635,  174,  635,  180,  635,  351,  635,
 /*  3340 */   635,  635,  635,  635,  133,  635,  208,  361,  358,  130,
 /*  3350 */   337,  139,  316,  126,  141,  129,  160,  161,  163,  165,
 /*  3360 */   108,  168,  169,  147,  375,  351,  635,  635,  174,  635,
 /*  3370 */   180,  133,  635,  382,  361,  358,  130,  337,  139,  316,
 /*  3380 */   126,  141,  129,  160,  161,  163,  165,  108,  168,  169,
 /*  3390 */   147,  375,  635,  635,  635,  174,  635,  180,  635,  351,
 /*  3400 */   635,  635,  635,  635,  635,  133,  635,  193,  361,  358,
 /*  3410 */   130,  337,  139,  316,  126,  141,  129,  160,  161,  163,
 /*  3420 */   165,  108,  168,  169,  147,  375,  351,  635,  635,  635,
 /*  3430 */   635,  635,  133,  635,  230,  361,  358,  130,  337,  139,
 /*  3440 */   316,  126,  141,  129,  160,  161,  163,  165,  108,  168,
 /*  3450 */   169,  147,  375,  156,   34,  264,  635,  635,  186,   40,
 /*  3460 */   635,  635,  182,  635,  635,  635,  635,  153,   37,  231,
 /*  3470 */   110,  349,  348,  346,  345,  339,   79,   80,   85,   86,
 /*  3480 */    77,   78,  635,  635,  635,  635,  635,  635,  635,  635,
 /*  3490 */   635,   43,  635,  635,  635,  635,  635,  635,  635,  635,
 /*  3500 */   635,  374,  635,  635,  635,  183,  635,  635,  635,  635,
 /*  3510 */   635,  635,  156,   34,  264,  635,  381,  186,   40,  635,
 /*  3520 */   635,  182,  635,  635,  635,  635,  153,   37,  635,  110,
 /*  3530 */   349,  348,  346,  345,  339,   79,   80,   85,   86,   77,
 /*  3540 */    78,  362,  363,  364,  365,  366,  367,  368,  369,  370,
 /*  3550 */   371,  372,  373,  635,  635,  635,  635,  635,  635,  635,
 /*  3560 */   635,  635,  635,  635,  183,  635,  635,  635,  635,  635,
 /*  3570 */   635,  156,   34,  264,  635,  635,  186,   40,  377,  635,
 /*  3580 */   182,  635,  635,  635,  635,  153,   37,  635,  110,  349,
 /*  3590 */   348,  346,  345,  339,   79,   80,   85,   86,   77,   78,
 /*  3600 */   635,  635,  635,  635,  635,  635,  635,  635,  635,  635,
 /*  3610 */   635,  635,  635,  635,  635,  635,  635,  635,  635,  635,
 /*  3620 */   635,  635,  635,  183,  635,  635,  635,  635,  635,  635,
 /*  3630 */   156,   34,  264,  635,  635,  186,   40,  635,  635,  182,
 /*  3640 */   635,  635,  635,  635,  153,   37,  235,  110,  349,  348,
 /*  3650 */   346,  345,  339,   79,   80,   85,   86,   77,   78,  635,
 /*  3660 */   635,  635,  635,  635,  635,  635,  635,  635,  635,  635,
 /*  3670 */   635,  635,  635,  635,  635,  635,  635,  635,  635,  635,
 /*  3680 */   635,  635,  183,  635,  635,  635,  635,  635,  635,  156,
 /*  3690 */    34,  264,  635,  635,  186,   40,  635,  635,   89,  635,
 /*  3700 */   635,  112,  635,  153,   37,  635,  110,  349,  348,  346,
 /*  3710 */   345,  339,   79,   80,   85,   86,   77,   78,  635,  635,
 /*  3720 */   635,  635,  635,  635,  635,  635,  635,  635,  635,  635,
 /*  3730 */   635,  635,  635,  635,  635,  635,  635,  635,  635,  635,
 /*  3740 */   635,  183,  635,  635,  635,  635,  635,  635,  156,   34,
 /*  3750 */   264,  635,  635,  186,   40,  635,  635,  182,  635,  635,
 /*  3760 */   635,  635,  153,   37,  635,  110,  349,  348,  346,  345,
 /*  3770 */   339,   79,   80,   85,   86,   77,   78,  635,  635,  635,
 /*  3780 */   635,  635,  635,  635,  635,  635,   43,  635,  635,  635,
 /*  3790 */   635,  635,   60,  635,  635,  635,  374,  635,  635,  635,
 /*  3800 */   183,  635,  635,  635,  635,  635,  635,  156,   34,  264,
 /*  3810 */   635,  635,  635,  635,  635,  635,  635,  635,  635,  635,
 /*  3820 */   635,  153,  635,  635,  110,  349,  348,  346,  345,  339,
 /*  3830 */    79,   80,   85,   86,   77,   78,  362,  363,  364,  365,
 /*  3840 */   366,  367,  368,  369,  370,  371,  372,  373,  635,  635,
 /*  3850 */   635,  635,  635,  635,  635,  635,  635,  635,  635,   59,
};
static const YYCODETYPE yy_lookahead[] = {
 /*     0 */    88,   89,   90,   91,   13,   14,    8,   16,   10,   18,
 /*    10 */    98,    8,  100,  101,  102,  103,  104,  105,  106,  107,
 /*    20 */   108,  109,  110,    7,    6,  113,   10,   11,   13,   14,
 /*    30 */   118,   16,  120,   18,   16,  123,  124,   21,  126,  111,
 /*    40 */   112,  129,  130,  131,  132,  133,  134,  135,  136,  137,
 /*    50 */   138,  139,  140,  141,  142,  143,  144,  145,  146,   93,
 /*    60 */   148,  149,  150,  151,  120,  153,  154,   89,  156,   91,
 /*    70 */   126,   85,   86,  129,  130,  131,   98,   93,  100,  101,
 /*    80 */   102,  103,  104,  105,  106,  107,  108,  109,  110,   92,
 /*    90 */   120,  113,   34,   35,   36,   37,  126,  126,  120,  129,
 /*   100 */   130,  131,  116,   12,  126,   85,   86,  129,  130,  131,
 /*   110 */   132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
 /*   120 */   142,  143,  144,  145,  146,   85,  148,  149,  150,  151,
 /*   130 */     9,  153,  154,   89,  156,   91,  116,   38,   39,   40,
 /*   140 */    19,   85,   86,   99,  100,  101,  102,  103,  104,  105,
 /*   150 */   106,  107,  108,  109,  110,    7,  120,  113,   10,   11,
 /*   160 */    85,    9,  126,   85,  120,  129,  130,  131,   16,   21,
 /*   170 */   126,   19,  116,  129,  130,  131,  132,  133,  134,  135,
 /*   180 */   136,  137,  138,  139,  140,  141,  142,  143,  144,  145,
 /*   190 */   146,  116,  148,  149,  150,  151,  120,    8,  154,  155,
 /*   200 */   156,   89,  126,   91,   99,  129,  130,  131,   85,   86,
 /*   210 */    21,   99,  100,  101,  102,  103,  104,  105,  106,  107,
 /*   220 */   108,  109,  110,    9,  115,  113,    7,    7,   85,   15,
 /*   230 */    11,   11,  120,   19,   85,   15,    4,    5,  126,  116,
 /*   240 */    21,  129,  130,  131,  132,  133,  134,  135,  136,  137,
 /*   250 */   138,  139,  140,  141,  142,  143,  144,  145,  146,  116,
 /*   260 */   148,  149,  150,  151,  120,  116,  154,  155,  156,   89,
 /*   270 */   126,   91,  115,  129,  130,  131,  132,  133,  134,   99,
 /*   280 */   100,  101,  102,  103,  104,  105,  106,  107,  108,  109,
 /*   290 */   110,    7,    8,  113,    7,    7,   82,  115,   11,   11,
 /*   300 */   120,    4,    5,   15,   20,   15,  126,   17,   21,  129,
 /*   310 */   130,  131,  132,  133,  134,  135,  136,  137,  138,  139,
 /*   320 */   140,  141,  142,  143,  144,  145,  146,  119,  148,  149,
 /*   330 */   150,  151,  120,  115,  154,  155,  156,   89,  126,   91,
 /*   340 */    85,  129,  130,  131,  111,  112,   98,  119,  100,  101,
 /*   350 */   102,  103,  104,  105,  106,  107,  108,  109,  110,    7,
 /*   360 */    15,  113,   17,   11,  114,  115,   31,   32,  120,    8,
 /*   370 */    16,   10,  117,   21,  126,  115,   85,  129,  130,  131,
 /*   380 */   132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
 /*   390 */   142,  143,  144,  145,  146,   12,  148,  149,  150,  151,
 /*   400 */     8,  153,  154,   89,  156,   91,   29,   30,  117,    7,
 /*   410 */    57,   58,   17,   99,  100,  101,  102,  103,  104,  105,
 /*   420 */   106,  107,  108,  109,  110,    9,    8,  113,   17,   22,
 /*   430 */     7,   17,   16,   42,  120,   22,   17,   41,   44,   21,
 /*   440 */   126,   43,   55,  129,  130,  131,  132,  133,  134,  135,
 /*   450 */   136,  137,  138,  139,  140,  141,  142,  143,  144,  145,
 /*   460 */   146,   56,  148,  149,  150,  151,   15,   22,  154,  155,
 /*   470 */   156,   89,   12,   91,   12,    9,   17,    6,   17,   16,
 /*   480 */    12,   99,  100,  101,  102,  103,  104,  105,  106,  107,
 /*   490 */   108,  109,  110,   15,    7,  113,    6,   58,    7,   17,
 /*   500 */     6,   13,  120,   17,   15,    9,    7,   15,  126,   16,
 /*   510 */     9,  129,  130,  131,  132,  133,  134,  135,  136,  137,
 /*   520 */   138,  139,  140,  141,  142,  143,  144,  145,  146,    7,
 /*   530 */   148,  149,  150,  151,   17,    7,  154,  155,  156,   89,
 /*   540 */    17,   91,    7,   71,   17,   16,    7,   17,   98,   15,
 /*   550 */   100,  101,  102,  103,  104,  105,  106,  107,  108,  109,
 /*   560 */   110,   15,    7,  113,   16,   16,   16,   16,    6,   17,
 /*   570 */   120,   17,    7,   17,   17,   16,  126,   16,   10,  129,
 /*   580 */   130,  131,  132,  133,  134,  135,  136,  137,  138,  139,
 /*   590 */   140,  141,  142,  143,  144,  145,  146,   17,  148,  149,
 /*   600 */   150,  151,   17,  153,  154,   89,  156,   91,   17,   17,
 /*   610 */     9,    9,   17,   17,   98,   22,  100,  101,  102,  103,
 /*   620 */   104,  105,  106,  107,  108,  109,  110,    6,   22,  113,
 /*   630 */    10,   17,   16,  159,  159,  159,  120,  159,  159,  159,
 /*   640 */   159,  159,  126,  159,  159,  129,  130,  131,  132,  133,
 /*   650 */   134,  135,  136,  137,  138,  139,  140,  141,  142,  143,
 /*   660 */   144,  145,  146,  159,  148,  149,  150,  151,  159,  153,
 /*   670 */   154,   89,  156,   91,  159,  159,  159,  159,  159,  159,
 /*   680 */   159,   99,  100,  101,  102,  103,  104,  105,  106,  107,
 /*   690 */   108,  109,  110,  159,  159,  113,  159,  159,  159,  159,
 /*   700 */   159,  159,  120,  159,  159,  159,  159,  159,  126,  159,
 /*   710 */   159,  129,  130,  131,  132,  133,  134,  135,  136,  137,
 /*   720 */   138,  139,  140,  141,  142,  143,  144,  145,  146,  159,
 /*   730 */   148,  149,  150,  151,  159,  159,  154,  155,  156,   89,
 /*   740 */   159,   91,  159,  159,  159,  159,  159,  159,  159,   99,
 /*   750 */   100,  101,  102,  103,  104,  105,  106,  107,  108,  109,
 /*   760 */   110,  159,  159,  113,  159,  159,  159,  159,  159,  159,
 /*   770 */   120,  159,  159,  159,  159,  159,  126,  159,  159,  129,
 /*   780 */   130,  131,  132,  133,  134,  135,  136,  137,  138,  139,
 /*   790 */   140,  141,  142,  143,  144,  145,  146,  159,  148,  149,
 /*   800 */   150,  151,  159,  159,  154,  155,  156,   89,  159,   91,
 /*   810 */   159,  159,  159,  159,  159,  159,   98,  159,  100,  101,
 /*   820 */   102,  103,  104,  105,  106,  107,  108,  109,  110,  159,
 /*   830 */   159,  113,  159,  159,  159,  159,  159,  159,  120,  159,
 /*   840 */   159,  159,  159,  159,  126,  159,  159,  129,  130,  131,
 /*   850 */   132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
 /*   860 */   142,  143,  144,  145,  146,  159,  148,  149,  150,  151,
 /*   870 */   159,  153,  154,    1,  156,    3,  159,  159,    6,    7,
 /*   880 */     8,  159,   10,   11,   12,   13,   14,   15,   16,  159,
 /*   890 */    18,  159,   20,   21,  159,   23,   24,   25,   26,   27,
 /*   900 */    28,   29,   30,   31,   32,   33,   34,  120,  159,  159,
 /*   910 */   159,  159,  159,  126,  159,  159,  129,  130,  131,  132,
 /*   920 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*   930 */    58,   45,   46,   47,   48,   49,   50,   51,   52,   53,
 /*   940 */    54,  159,  159,   71,   72,   73,   74,   75,   76,   77,
 /*   950 */    78,   79,   80,   81,    1,   83,    3,  159,  159,    6,
 /*   960 */     7,    8,  159,   10,   11,   12,   13,   14,   15,   16,
 /*   970 */   159,   18,  159,   20,   21,  159,   23,   24,   25,   26,
 /*   980 */    27,   28,   29,   30,   31,   32,   33,   34,  120,  159,
 /*   990 */   159,  159,  159,  159,  126,  159,  159,  129,  130,  131,
 /*  1000 */   132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
 /*  1010 */   159,   58,  159,  159,  159,  159,  159,  159,  159,  159,
 /*  1020 */   159,  159,  159,  159,   71,   72,   73,   74,   75,   76,
 /*  1030 */    77,   78,   79,   80,   81,    1,   83,    3,  159,  159,
 /*  1040 */     6,    7,    8,  159,   10,   11,   12,   13,   14,   15,
 /*  1050 */    16,  159,   18,  159,   20,   21,  159,   23,   24,   25,
 /*  1060 */    26,   27,   28,   29,   30,   31,   32,   33,   34,  120,
 /*  1070 */   159,  159,  159,  159,  159,  126,  159,  159,  129,  130,
 /*  1080 */   131,  132,  133,  134,  135,  136,  137,  138,  139,  140,
 /*  1090 */   120,  159,   58,  159,  159,  159,  126,  159,  159,  129,
 /*  1100 */   130,  131,  132,  133,  134,   71,   72,   73,   74,   75,
 /*  1110 */    76,   77,   78,   79,   80,   81,    1,   83,    3,  159,
 /*  1120 */   159,    6,    7,    8,  159,   10,   11,   12,   13,   14,
 /*  1130 */    15,   16,  159,   18,  159,   20,   21,  159,   23,   24,
 /*  1140 */    25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
 /*  1150 */   120,  159,  159,  159,  159,  159,  126,  159,  159,  129,
 /*  1160 */   130,  131,  132,  133,  134,  135,  136,  137,  138,  139,
 /*  1170 */   120,  159,  159,   58,  159,  159,  126,  159,  159,  129,
 /*  1180 */   130,  131,  132,  133,  134,  135,   71,   72,   73,   74,
 /*  1190 */    75,   76,   77,   78,   79,   80,   81,  159,   83,    0,
 /*  1200 */     1,  159,    3,  159,  159,    6,    7,    8,  159,   10,
 /*  1210 */    11,   12,  159,   14,   15,   16,  159,   18,  159,   20,
 /*  1220 */    21,  159,   23,   24,   25,   26,   27,   28,   29,   30,
 /*  1230 */    31,   32,   33,   34,  120,  159,  159,  159,  159,  159,
 /*  1240 */   126,  159,  159,  129,  130,  131,  132,  133,  134,  135,
 /*  1250 */   136,  137,  138,  159,  120,  159,  159,   58,  159,  159,
 /*  1260 */   126,  159,  159,  129,  130,  131,  132,  133,  134,  135,
 /*  1270 */    71,   72,   73,   74,   75,   76,   77,   78,   79,   80,
 /*  1280 */    81,    1,   83,    3,  159,  159,    6,    7,    8,  159,
 /*  1290 */    10,   11,   12,  159,   14,   15,   16,   17,   18,  159,
 /*  1300 */    20,   21,  159,   23,   24,   25,   26,   27,   28,   29,
 /*  1310 */    30,   31,   32,   33,   34,  120,  159,  159,  159,  159,
 /*  1320 */   159,  126,  159,  159,  129,  130,  131,  132,  133,  134,
 /*  1330 */   135,  136,  137,  159,  120,  159,  159,  159,   58,  159,
 /*  1340 */   126,  159,  159,  129,  130,  131,  132,  133,  134,  135,
 /*  1350 */   136,   71,   72,   73,   74,   75,   76,   77,   78,   79,
 /*  1360 */    80,   81,    1,   83,    3,  159,  159,    6,    7,    8,
 /*  1370 */   159,   10,   11,   12,  159,  159,   15,  159,  159,  159,
 /*  1380 */   159,   20,   21,  159,   23,   24,   25,   26,   27,   28,
 /*  1390 */    29,   30,   31,   32,   33,   34,  120,  159,  159,    6,
 /*  1400 */     7,    8,  126,  159,  159,  129,  130,  131,  132,  133,
 /*  1410 */   134,  135,  136,   20,  159,  120,   23,  159,  159,   58,
 /*  1420 */   159,  126,  159,  159,  129,  130,  131,  132,  133,  134,
 /*  1430 */   135,  136,   71,   72,   73,   74,   75,   76,   77,   78,
 /*  1440 */    79,   80,   81,    1,   83,    3,  159,  159,    6,    7,
 /*  1450 */     8,  159,   10,   11,   12,  159,  159,   15,  159,  159,
 /*  1460 */   159,  159,   20,   21,  159,   23,   24,   25,   26,   27,
 /*  1470 */    28,   29,   30,   31,   32,   33,   34,    9,  159,  120,
 /*  1480 */   159,  159,  159,  159,  159,  126,  159,   19,  129,  130,
 /*  1490 */   131,  132,  133,  134,  159,  159,  159,  159,  159,  159,
 /*  1500 */    58,  159,  159,  159,  159,  159,  159,  159,  159,   89,
 /*  1510 */   159,   91,  159,   71,   72,   73,   74,   75,   76,   77,
 /*  1520 */    78,   79,   80,   81,  159,   83,  159,   59,   60,   61,
 /*  1530 */    62,   63,   64,   65,   66,   67,   68,   69,   70,  159,
 /*  1540 */   120,  159,   89,  159,   91,  125,  126,  127,  128,  129,
 /*  1550 */   130,  131,  132,  133,  134,  135,  136,  137,  138,  139,
 /*  1560 */   140,  141,  142,  143,  144,  145,  146,  147,  148,  159,
 /*  1570 */   159,  159,  152,  120,  159,  159,  159,  157,  125,  126,
 /*  1580 */   127,  128,  129,  130,  131,  132,  133,  134,  135,  136,
 /*  1590 */   137,  138,  139,  140,  141,  142,  143,  144,  145,  146,
 /*  1600 */   147,  148,  159,  159,   89,  152,   91,  159,  120,  159,
 /*  1610 */   159,  159,  159,  159,  126,  159,  159,  129,  130,  131,
 /*  1620 */   132,  133,  134,  159,  159,  159,  159,  159,  159,  159,
 /*  1630 */   159,  159,  159,  159,   89,  120,   91,  159,  159,  159,
 /*  1640 */   125,  126,  127,  128,  129,  130,  131,  132,  133,  134,
 /*  1650 */   135,  136,  137,  138,  139,  140,  141,  142,  143,  144,
 /*  1660 */   145,  146,  147,  148,  159,  120,  159,  152,  159,  159,
 /*  1670 */   125,  126,  127,  128,  129,  130,  131,  132,  133,  134,
 /*  1680 */   135,  136,  137,  138,  139,  140,  141,  142,  143,  144,
 /*  1690 */   145,  146,  147,  148,   89,  159,   91,  159,  120,  159,
 /*  1700 */   159,  159,  159,  158,  126,  159,  159,  129,  130,  131,
 /*  1710 */   132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
 /*  1720 */   142,  143,  144,  159,   89,  120,   91,  159,  159,  159,
 /*  1730 */   125,  126,  127,  128,  129,  130,  131,  132,  133,  134,
 /*  1740 */   135,  136,  137,  138,  139,  140,  141,  142,  143,  144,
 /*  1750 */   145,  146,  147,  148,  159,  120,  159,  152,  159,  159,
 /*  1760 */   125,  126,  127,  128,  129,  130,  131,  132,  133,  134,
 /*  1770 */   135,  136,  137,  138,  139,  140,  141,  142,  143,  144,
 /*  1780 */   145,  146,  147,  148,   89,  159,   91,  159,  120,  159,
 /*  1790 */   159,  159,  159,  158,  126,  159,  159,  129,  130,  131,
 /*  1800 */   132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
 /*  1810 */   142,  143,   87,  159,   89,  120,   91,  159,  159,  159,
 /*  1820 */   125,  126,  127,  128,  129,  130,  131,  132,  133,  134,
 /*  1830 */   135,  136,  137,  138,  139,  140,  141,  142,  143,  144,
 /*  1840 */   145,  146,  147,  148,  159,  120,  159,  152,  159,  159,
 /*  1850 */   125,  126,  159,  128,  129,  130,  131,  132,  133,  134,
 /*  1860 */   135,  136,  137,  138,  139,  140,  141,  142,  143,  144,
 /*  1870 */   145,  146,  147,  148,   89,  159,   91,  159,  120,  159,
 /*  1880 */   159,  159,  159,  159,  126,  159,  159,  129,  130,  131,
 /*  1890 */   132,  133,  134,  159,  159,  159,  159,  159,  159,  159,
 /*  1900 */   159,  159,   87,  159,   89,  120,   91,  159,  159,  159,
 /*  1910 */   125,  126,  127,  128,  129,  130,  131,  132,  133,  134,
 /*  1920 */   135,  136,  137,  138,  139,  140,  141,  142,  143,  144,
 /*  1930 */   145,  146,  147,  148,  159,  120,  159,  159,  159,  159,
 /*  1940 */   125,  126,  159,  128,  129,  130,  131,  132,  133,  134,
 /*  1950 */   135,  136,  137,  138,  139,  140,  141,  142,  143,  144,
 /*  1960 */   145,  146,  147,  148,   87,  159,   89,  159,   91,  159,
 /*  1970 */   159,  120,  159,  159,  159,  159,  159,  126,  159,  159,
 /*  1980 */   129,  130,  131,  132,  133,  134,  159,  159,  159,  159,
 /*  1990 */   159,  159,  159,  159,  159,  159,   89,  120,   91,  159,
 /*  2000 */   159,  159,  125,  126,  159,  128,  129,  130,  131,  132,
 /*  2010 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*  2020 */   143,  144,  145,  146,  147,  148,  159,  120,  159,  159,
 /*  2030 */   159,  159,  125,  126,  127,  128,  129,  130,  131,  132,
 /*  2040 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*  2050 */   143,  144,  145,  146,  147,  148,   89,  159,   91,  159,
 /*  2060 */   159,  120,  159,  159,  159,  159,  159,  126,  159,  159,
 /*  2070 */   129,  130,  131,  132,  133,  134,  159,  159,  159,  159,
 /*  2080 */   159,  159,  159,  159,  159,  159,   89,  120,   91,  159,
 /*  2090 */   159,  159,  125,  126,  127,  128,  129,  130,  131,  132,
 /*  2100 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*  2110 */   143,  144,  145,  146,  147,  148,  159,  120,  159,  159,
 /*  2120 */   159,  159,  125,  126,  127,  128,  129,  130,  131,  132,
 /*  2130 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*  2140 */   143,  144,  145,  146,  147,  148,   87,  159,   89,  159,
 /*  2150 */    91,  159,  159,  120,  159,  159,  159,  159,  159,  126,
 /*  2160 */   159,  159,  129,  130,  131,  132,  133,  134,  159,  159,
 /*  2170 */   159,  159,  159,  159,  159,  159,  159,  159,   89,  120,
 /*  2180 */    91,  159,  159,  159,  125,  126,  159,  128,  129,  130,
 /*  2190 */   131,  132,  133,  134,  135,  136,  137,  138,  139,  140,
 /*  2200 */   141,  142,  143,  144,  145,  146,  147,  148,  159,  120,
 /*  2210 */   159,  159,  159,  159,  125,  126,  127,  128,  129,  130,
 /*  2220 */   131,  132,  133,  134,  135,  136,  137,  138,  139,  140,
 /*  2230 */   141,  142,  143,  144,  145,  146,  147,  148,   89,  159,
 /*  2240 */    91,  159,  159,  120,  159,  159,  159,  159,  159,  126,
 /*  2250 */   159,  159,  129,  130,  131,  132,  133,  134,  159,  159,
 /*  2260 */   159,  159,  159,  159,  159,  159,  159,  159,   89,  120,
 /*  2270 */    91,  159,  159,  159,  125,  126,  159,  128,  129,  130,
 /*  2280 */   131,  132,  133,  134,  135,  136,  137,  138,  139,  140,
 /*  2290 */   141,  142,  143,  144,  145,  146,  147,  148,  159,  120,
 /*  2300 */   159,  159,  159,  159,  125,  126,  159,  128,  129,  130,
 /*  2310 */   131,  132,  133,  134,  135,  136,  137,  138,  139,  140,
 /*  2320 */   141,  142,  143,  144,  145,  146,  147,  148,   89,  159,
 /*  2330 */    91,  159,  159,  159,  159,  120,  159,  159,  159,  159,
 /*  2340 */   159,  126,  159,  159,  129,  130,  131,  132,  133,  134,
 /*  2350 */   159,  159,  159,  159,  159,  159,  159,  159,  159,  120,
 /*  2360 */   159,  159,  159,  159,  125,  126,  159,  128,  129,  130,
 /*  2370 */   131,  132,  133,  134,  135,  136,  137,  138,  139,  140,
 /*  2380 */   141,  142,  143,  144,  145,  146,  147,  148,  159,   89,
 /*  2390 */   159,   91,  159,  159,   94,   95,    6,    7,    8,  159,
 /*  2400 */   159,  159,  159,  159,  159,   15,  159,  159,  159,  159,
 /*  2410 */    20,  159,  159,   23,  159,  159,   89,  159,   91,  159,
 /*  2420 */   120,  159,  159,  159,  159,  159,  126,  159,  128,  129,
 /*  2430 */   130,  131,  132,  133,  134,  135,  136,  137,  138,  139,
 /*  2440 */   140,  141,  142,  143,  144,  145,  146,  120,  148,   89,
 /*  2450 */   159,   91,  125,  126,  159,  128,  129,  130,  131,  132,
 /*  2460 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*  2470 */   143,  144,  145,  146,  147,  148,   89,  159,   91,  159,
 /*  2480 */   120,  159,  159,   96,   97,  159,  126,  159,  128,  129,
 /*  2490 */   130,  131,  132,  133,  134,  135,  136,  137,  138,  139,
 /*  2500 */   140,  141,  142,  143,  144,  145,  146,  120,  148,  159,
 /*  2510 */    89,  159,   91,  126,  159,  128,  129,  130,  131,  132,
 /*  2520 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*  2530 */   143,  144,  145,  146,  159,  159,  159,  159,   89,  159,
 /*  2540 */    91,  120,  159,  159,  159,  159,  159,  126,  159,  128,
 /*  2550 */   129,  130,  131,  132,  133,  134,  135,  136,  137,  138,
 /*  2560 */   139,  140,  141,  142,  143,  144,  145,  146,  147,  120,
 /*  2570 */    89,  159,   91,  159,  159,  126,  159,  128,  129,  130,
 /*  2580 */   131,  132,  133,  134,  135,  136,  137,  138,  139,  140,
 /*  2590 */   141,  142,  143,  144,  145,  146,  159,  148,  159,  159,
 /*  2600 */    89,  120,   91,  159,  159,  159,  159,  126,  159,  128,
 /*  2610 */   129,  130,  131,  132,  133,  134,  135,  136,  137,  138,
 /*  2620 */   139,  140,  141,  142,  143,  144,  145,  146,   89,  148,
 /*  2630 */    91,  120,  159,  159,  159,  159,  159,  126,  159,  128,
 /*  2640 */   129,  130,  131,  132,  133,  134,  135,  136,  137,  138,
 /*  2650 */   139,  140,  141,  142,  143,  144,  145,  146,   89,  120,
 /*  2660 */    91,  159,  159,  159,  159,  126,  159,  128,  129,  130,
 /*  2670 */   131,  132,  133,  134,  135,  136,  137,  138,  139,  140,
 /*  2680 */   141,  142,  143,  144,  145,  146,  159,  159,  159,  120,
 /*  2690 */    89,  159,   91,  159,  159,  126,  159,  128,  129,  130,
 /*  2700 */   131,  132,  133,  134,  135,  136,  137,  138,  139,  140,
 /*  2710 */   141,  142,  143,  144,  145,  146,  159,   89,  159,   91,
 /*  2720 */   159,  120,  159,  159,  159,  159,  159,  126,  159,  128,
 /*  2730 */   129,  130,  131,  132,  133,  134,  135,  136,  137,  138,
 /*  2740 */   139,  140,  141,  142,  143,  144,  145,  146,  120,   89,
 /*  2750 */   159,   91,  159,  159,  126,  159,  128,  129,  130,  131,
 /*  2760 */   132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
 /*  2770 */   142,  143,  144,  145,  146,  159,  159,  159,  159,   89,
 /*  2780 */   120,   91,  159,  159,  159,  159,  126,  159,  128,  129,
 /*  2790 */   130,  131,  132,  133,  134,  135,  136,  137,  138,  139,
 /*  2800 */   140,  141,  142,  143,  144,  145,  146,   89,  159,   91,
 /*  2810 */   120,  159,  159,  159,  159,  159,  126,  159,  128,  129,
 /*  2820 */   130,  131,  132,  133,  134,  135,  136,  137,  138,  139,
 /*  2830 */   140,  141,  142,  143,  144,  145,  146,  159,  120,  159,
 /*  2840 */   159,  159,  159,  159,  126,  159,  128,  129,  130,  131,
 /*  2850 */   132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
 /*  2860 */   142,  143,  144,  145,  146,    6,    7,    8,  159,   10,
 /*  2870 */    11,   12,  159,  159,   15,   16,  159,  159,  159,   20,
 /*  2880 */    21,  159,   23,   24,   25,   26,   27,   28,   29,   30,
 /*  2890 */    31,   32,   33,   34,  159,  159,  159,  159,  159,  159,
 /*  2900 */   159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
 /*  2910 */   159,  159,  159,  159,  159,  159,  159,   58,  159,  159,
 /*  2920 */   159,  159,  159,  159,    6,    7,    8,  159,   10,   11,
 /*  2930 */    12,  159,  159,   15,   16,   88,  159,   90,   20,   21,
 /*  2940 */   159,   23,   24,   25,   26,   27,   28,   29,   30,   31,
 /*  2950 */    32,   33,   34,   89,  159,   91,  159,  159,  159,  159,
 /*  2960 */   159,  159,  159,  159,  159,  118,  159,  159,  121,  122,
 /*  2970 */   123,  124,  159,  159,  159,  159,   58,  159,  159,  159,
 /*  2980 */   159,  159,  159,  159,  120,  159,  159,  159,  159,  159,
 /*  2990 */   126,  159,  128,  129,  130,  131,  132,  133,  134,  135,
 /*  3000 */   136,  137,  138,  139,  140,  141,  142,  143,  144,  145,
 /*  3010 */   146,    6,    7,    8,  159,   10,   11,   12,  159,  159,
 /*  3020 */    15,  159,  159,  159,  159,   20,   21,   22,   23,   24,
 /*  3030 */    25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
 /*  3040 */    89,  159,   91,  159,  159,  159,  159,  159,  159,  159,
 /*  3050 */   159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
 /*  3060 */   159,  159,  159,   58,  159,  159,  159,  159,  159,  159,
 /*  3070 */   159,  120,  159,  159,   89,  159,   91,  126,  159,  128,
 /*  3080 */   129,  130,  131,  132,  133,  134,  135,  136,  137,  138,
 /*  3090 */   139,  140,  141,  142,  143,  144,  145,  146,  159,  159,
 /*  3100 */   159,   89,  159,   91,  159,  120,  159,  159,  159,  159,
 /*  3110 */   159,  126,  159,  128,  129,  130,  131,  132,  133,  134,
 /*  3120 */   135,  136,  137,  138,  139,  140,  141,  142,  143,  144,
 /*  3130 */   145,  146,  120,  159,  159,  159,  159,  159,  126,  159,
 /*  3140 */   128,  129,  130,  131,  132,  133,  134,  135,  136,  137,
 /*  3150 */   138,  139,  140,  141,  142,  143,  144,  145,  146,  159,
 /*  3160 */   159,   89,  159,   91,  159,  159,  159,  159,  159,  159,
 /*  3170 */   159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
 /*  3180 */   159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
 /*  3190 */   159,  159,  120,  159,  159,  159,  159,  159,  126,  159,
 /*  3200 */   128,  129,  130,  131,  132,  133,  134,  135,  136,  137,
 /*  3210 */   138,  139,  140,  141,  142,  143,  144,  145,  146,    6,
 /*  3220 */     7,    8,  159,   10,   11,   12,  159,  159,   15,  159,
 /*  3230 */   159,   18,  159,   20,   21,  159,   23,   24,   25,   26,
 /*  3240 */    27,   28,   29,   30,   31,   32,   33,   34,  159,  159,
 /*  3250 */   159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
 /*  3260 */   159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
 /*  3270 */   159,   58,  159,  159,  159,  159,  159,  159,    6,    7,
 /*  3280 */     8,  159,   10,   11,   12,  159,  159,   15,  159,  159,
 /*  3290 */    18,  159,   20,   21,  159,   23,   24,   25,   26,   27,
 /*  3300 */    28,   29,   30,   31,   32,   33,   34,   89,  159,   91,
 /*  3310 */   159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
 /*  3320 */   159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
 /*  3330 */    58,  159,  159,  159,   89,  159,   91,  159,  120,  159,
 /*  3340 */   159,  159,  159,  159,  126,  159,  128,  129,  130,  131,
 /*  3350 */   132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
 /*  3360 */   142,  143,  144,  145,  146,  120,  159,  159,   89,  159,
 /*  3370 */    91,  126,  159,  128,  129,  130,  131,  132,  133,  134,
 /*  3380 */   135,  136,  137,  138,  139,  140,  141,  142,  143,  144,
 /*  3390 */   145,  146,  159,  159,  159,   89,  159,   91,  159,  120,
 /*  3400 */   159,  159,  159,  159,  159,  126,  159,  128,  129,  130,
 /*  3410 */   131,  132,  133,  134,  135,  136,  137,  138,  139,  140,
 /*  3420 */   141,  142,  143,  144,  145,  146,  120,  159,  159,  159,
 /*  3430 */   159,  159,  126,  159,  128,  129,  130,  131,  132,  133,
 /*  3440 */   134,  135,  136,  137,  138,  139,  140,  141,  142,  143,
 /*  3450 */   144,  145,  146,    6,    7,    8,  159,  159,   11,   12,
 /*  3460 */   159,  159,   15,  159,  159,  159,  159,   20,   21,   22,
 /*  3470 */    23,   24,   25,   26,   27,   28,   29,   30,   31,   32,
 /*  3480 */    33,   34,  159,  159,  159,  159,  159,  159,  159,  159,
 /*  3490 */   159,    9,  159,  159,  159,  159,  159,  159,  159,  159,
 /*  3500 */   159,   19,  159,  159,  159,   58,  159,  159,  159,  159,
 /*  3510 */   159,  159,    6,    7,    8,  159,   10,   11,   12,  159,
 /*  3520 */   159,   15,  159,  159,  159,  159,   20,   21,  159,   23,
 /*  3530 */    24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
 /*  3540 */    34,   59,   60,   61,   62,   63,   64,   65,   66,   67,
 /*  3550 */    68,   69,   70,  159,  159,  159,  159,  159,  159,  159,
 /*  3560 */   159,  159,  159,  159,   58,  159,  159,  159,  159,  159,
 /*  3570 */   159,    6,    7,    8,  159,  159,   11,   12,   13,  159,
 /*  3580 */    15,  159,  159,  159,  159,   20,   21,  159,   23,   24,
 /*  3590 */    25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
 /*  3600 */   159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
 /*  3610 */   159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
 /*  3620 */   159,  159,  159,   58,  159,  159,  159,  159,  159,  159,
 /*  3630 */     6,    7,    8,  159,  159,   11,   12,  159,  159,   15,
 /*  3640 */   159,  159,  159,  159,   20,   21,   22,   23,   24,   25,
 /*  3650 */    26,   27,   28,   29,   30,   31,   32,   33,   34,  159,
 /*  3660 */   159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
 /*  3670 */   159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
 /*  3680 */   159,  159,   58,  159,  159,  159,  159,  159,  159,    6,
 /*  3690 */     7,    8,  159,  159,   11,   12,  159,  159,   15,  159,
 /*  3700 */   159,   18,  159,   20,   21,  159,   23,   24,   25,   26,
 /*  3710 */    27,   28,   29,   30,   31,   32,   33,   34,  159,  159,
 /*  3720 */   159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
 /*  3730 */   159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
 /*  3740 */   159,   58,  159,  159,  159,  159,  159,  159,    6,    7,
 /*  3750 */     8,  159,  159,   11,   12,  159,  159,   15,  159,  159,
 /*  3760 */   159,  159,   20,   21,  159,   23,   24,   25,   26,   27,
 /*  3770 */    28,   29,   30,   31,   32,   33,   34,  159,  159,  159,
 /*  3780 */   159,  159,  159,  159,  159,  159,    9,  159,  159,  159,
 /*  3790 */   159,  159,   15,  159,  159,  159,   19,  159,  159,  159,
 /*  3800 */    58,  159,  159,  159,  159,  159,  159,    6,    7,    8,
 /*  3810 */   159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
 /*  3820 */   159,   20,  159,  159,   23,   24,   25,   26,   27,   28,
 /*  3830 */    29,   30,   31,   32,   33,   34,   59,   60,   61,   62,
 /*  3840 */    63,   64,   65,   66,   67,   68,   69,   70,  159,  159,
 /*  3850 */   159,  159,  159,  159,  159,  159,  159,  159,  159,   82,
};
#define YY_SHIFT_USE_DFLT (-10)
#define YY_SHIFT_MAX 237
static const short yy_shift_ofst[] = {
 /*     0 */   -10,  953, 1199, 1115, 1034, 1280,  872, 1361, 1442, 1442,
 /*    10 */  1442, 1442, 1442, 1361, 1442, 1361, 1361, 1442, 1361, 3272,
 /*    20 */  3213, 3213, 3213, 3213, 3506, 3506, 3506, 3506, 3506, 3506,
 /*    30 */  3506, 3506, 3506, 3506, 3506, 2859, 2918, 3005, 3506, 3506,
 /*    40 */  3565, 3506, 3506, 3506, 3742, 3447, 3624, 3683, 3742, 3742,
 /*    50 */  3742, 3742, 3742, 3742, 3742, 3742, 3742, 3742, 3742, 3742,
 /*    60 */  3742, 3742, 3742, 3742, 3801, 3801, 3801, 3801, 3801, 3801,
 /*    70 */  3801, 3801, 3801, 3801, 3801, 3801, 3801, 3801, 3801, 3801,
 /*    80 */  3801, 3801, 3801, 3801, 3801, 3801, 3801,   15,   -9, 2390,
 /*    90 */  1393, 1393, 1393, 1393,   -2,   -2,   -2,   -2,  232,  297,
 /*   100 */     3,    3,    3,    3,    3, 3777, 3482, 1468,  886,  886,
 /*   110 */   284,  361,    3,    3,   91,  -10,  -10,  -10,  -10,  -10,
 /*   120 */   -10,  -10,   58,   16,   58,  214,   58,  148,  288,   99,
 /*   130 */   287,  219,  220,  352,  152,   99,  335,  335,  189,  377,
 /*   140 */   416,  335,  290,   18,  121,  418,  335,  353,  345,  354,
 /*   150 */   383,  392,  395,  402,  411,  407,  423,  414,  419,  413,
 /*   160 */   396,  391,  396,  398,  391,  394,  398,  394,  387,  405,
 /*   170 */   387,  405,  451,  445,  460,  462,  466,  459,  471,  463,
 /*   180 */   468,  423,  478,  487,  461,  490,  439,  491,  482,  494,
 /*   190 */   488,  489,  496,  492,  493,  499,  501,  486,  522,  517,
 /*   200 */   528,  523,  472,  535,  527,  529,  539,  530,  534,  546,
 /*   210 */   548,  549,  550,  551,  555,  552,  554,  556,  557,  559,
 /*   220 */   561,  580,  565,  585,  591,  592,  601,  602,  595,  562,
 /*   230 */   593,  568,  596,  621,  606,  620,  614,  616,
};
#define YY_REDUCE_USE_DFLT (-89)
#define YY_REDUCE_MAX 121
static const short yy_reduce_ofst[] = {
 /*     0 */   250,  -88,  -88,  -88,  -88,  -88,  -88,  -22,  582,  112,
 /*    10 */   382,  650,  180,  248,  314,  718,  516,   44,  450, 1420,
 /*    20 */  1453, 1695, 1515, 1605, 1545, 1635, 2059, 1967, 1907, 2089,
 /*    30 */  1725, 1785, 1815, 1877, 1997, 2179, 2239, 2300, 2149, 2327,
 /*    40 */  2387, 2481, 2360, 2449, 2421, 2539, 2690, 3072, 2951, 2690,
 /*    50 */  2628, 2569, 2511, 3279, 3245, 3306, 2539, 2601, 2660, 2718,
 /*    60 */  2985, 2864, 3012, 3218, 1578, 1668,  787,  868,  949, 1030,
 /*    70 */  1114, 1195, 1295, 1276, 1214, 1134, 1050,  970,  144, 1359,
 /*    80 */  1488, 1758, 1851, 1941, 2033, 2123, 2215, 2847, 2847,  212,
 /*    90 */   -56,  -30,   36,   76,   56,  123,  -14,   20,  -72,  233,
 /*   100 */    75,  255,  291,  143,  149,  -34,  -34,  -16,   -3,   -3,
 /*   110 */   -29,   40,   78,   40,  105,  109,  157,  182,  218,  208,
 /*   120 */   228,  260,
};
static const YYACTIONTYPE yy_default[] = {
 /*     0 */   572,  633,  633,  633,  633,  633,  633,  633,  633,  633,
 /*    10 */   633,  633,  633,  633,  633,  633,  633,  633,  633,  615,
 /*    20 */   633,  633,  633,  633,  617,  617,  535,  633,  633,  633,
 /*    30 */   535,  633,  535,  535,  633,  633,  633,  633,  633,  633,
 /*    40 */   633,  633,  557,  633,  633,  633,  633,  633,  633,  633,
 /*    50 */   633,  633,  633,  562,  633,  633,  633,  633,  633,  633,
 /*    60 */   633,  633,  633,  633,  633,  633,  633,  633,  633,  633,
 /*    70 */   633,  633,  633,  633,  633,  633,  633,  633,  633,  633,
 /*    80 */   633,  633,  633,  633,  633,  633,  633,  633,  633,  516,
 /*    90 */   633,  633,  633,  633,  414,  414,  414,  414,  633,  620,
 /*   100 */   633,  633,  633,  633,  633,  533,  533,  566,  504,  505,
 /*   110 */   633,  633,  633,  633,  633,  572,  572,  572,  572,  423,
 /*   120 */   423,  572,  479,  452,  478,  633,  477,  453,  421,  484,
 /*   130 */   453,  633,  421,  452,  633,  485,  482,  483,  633,  465,
 /*   140 */   633,  480,  633,  433,  633,  633,  481,  510,  633,  633,
 /*   150 */   633,  633,  633,  633,  633,  633,  633,  633,  633,  633,
 /*   160 */   486,  488,  487,  490,  489,  492,  491,  493,  506,  508,
 /*   170 */   507,  509,  633,  633,  633,  633,  415,  633,  433,  633,
 /*   180 */   633,  632,  516,  633,  633,  518,  633,  633,  633,  519,
 /*   190 */   633,  633,  561,  633,  633,  633,  533,  633,  633,  633,
 /*   200 */   633,  633,  633,  633,  633,  633,  633,  633,  633,  633,
 /*   210 */   633,  633,  633,  633,  633,  633,  633,  633,  633,  633,
 /*   220 */   633,  633,  633,  633,  633,  633,  556,  554,  633,  451,
 /*   230 */   633,  633,  633,  447,  633,  633,  633,  434,  434,  579,
 /*   240 */   580,  443,  584,  442,  416,  570,  417,  413,  412,  440,
 /*   250 */   571,  454,  429,  585,  428,  586,  629,  427,  631,  426,
 /*   260 */   583,  425,  424,  587,  439,  513,  625,  512,  511,  503,
 /*   270 */   581,  588,  514,  502,  552,  420,  589,  501,  582,  590,
 /*   280 */   500,  591,  438,  499,  553,  498,  592,  593,  497,  496,
 /*   290 */   495,  594,  494,  558,  595,  441,  596,  555,  597,  437,
 /*   300 */   598,  476,  599,  418,  600,  475,  601,  474,  602,  473,
 /*   310 */   430,  603,  604,  605,  606,  607,  472,  608,  609,  455,
 /*   320 */   471,  470,  469,  536,  610,  468,  529,  611,  467,  466,
 /*   330 */   464,  449,  612,  463,  422,  613,  528,  462,  531,  461,
 /*   340 */   530,  614,  618,  616,  619,  460,  459,  621,  458,  457,
 /*   350 */   622,  456,  623,  450,  624,  626,  419,  448,  446,  411,
 /*   360 */   627,  445,  540,  541,  542,  543,  544,  545,  546,  547,
 /*   370 */   548,  549,  550,  551,  539,  522,  563,  523,  444,  524,
 /*   380 */   431,  527,  559,  628,  521,  630,  520,  560,  564,  567,
 /*   390 */   517,  525,  515,  436,  526,  534,  435,  532,  537,  538,
 /*   400 */   569,  565,  568,  573,  574,  575,  576,  577,  432,  578,
};
#define YY_SZ_ACTTAB (int)(sizeof(yy_action)/sizeof(yy_action[0]))

/* The next table maps tokens into fallback tokens.  If a construct
** like the following:
** 
**      %fallback ID X Y Z.
**
** appears in the grammar, then ID becomes a fallback token for X, Y,
** and Z.  Whenever one of the tokens X, Y, or Z is input to the parser
** but it does not parse, the type of the token is changed to ID and
** the parse is retried before an error is thrown.
*/
#ifdef YYFALLBACK
static const YYCODETYPE yyFallback[] = {
};
#endif /* YYFALLBACK */

/* The following structure represents a single element of the
** parser's stack.  Information stored includes:
**
**   +  The state number for the parser at this level of the stack.
**
**   +  The value of the token stored at this level of the stack.
**      (In other words, the "major" token.)
**
**   +  The semantic value stored at this level of the stack.  This is
**      the information used by the action routines in the grammar.
**      It is sometimes called the "minor" token.
*/
struct yyStackEntry {
  YYACTIONTYPE stateno;  /* The state-number */
  YYCODETYPE major;      /* The major token value.  This is the code
                         ** number for the token at this stack level */
  YYMINORTYPE minor;     /* The user-supplied minor token value.  This
                         ** is the value of the token  */
};
typedef struct yyStackEntry yyStackEntry;

/* The state of the parser is completely contained in an instance of
** the following structure */
struct yyParser {
  int yyidx;                    /* Index of top element in stack */
#ifdef YYTRACKMAXSTACKDEPTH
  int yyidxMax;                 /* Maximum value of yyidx */
#endif
  int yyerrcnt;                 /* Shifts left before out of the error */
  XecParseARG_SDECL                /* A place to hold %extra_argument */
#if YYSTACKDEPTH<=0
  int yystksz;                  /* Current side of the stack */
  yyStackEntry *yystack;        /* The parser's stack */
#else
  yyStackEntry yystack[YYSTACKDEPTH];  /* The parser's stack */
#endif
};
typedef struct yyParser yyParser;

#ifndef NDEBUG
#include <stdio.h>
static FILE *yyTraceFILE = 0;
static char *yyTracePrompt = 0;
#endif /* NDEBUG */

#ifndef NDEBUG
/* 
** Turn parser tracing on by giving a stream to which to write the trace
** and a prompt to preface each trace message.  Tracing is turned off
** by making either argument NULL 
**
** Inputs:
** <ul>
** <li> A FILE* to which trace output should be written.
**      If NULL, then tracing is turned off.
** <li> A prefix string written at the beginning of every
**      line of trace output.  If NULL, then tracing is
**      turned off.
** </ul>
**
** Outputs:
** None.
*/
void XecParseTrace(FILE *TraceFILE, char *zTracePrompt){
  yyTraceFILE = TraceFILE;
  yyTracePrompt = zTracePrompt;
  if( yyTraceFILE==0 ) yyTracePrompt = 0;
  else if( yyTracePrompt==0 ) yyTraceFILE = 0;
}
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing shifts, the names of all terminals and nonterminals
** are required.  The following table supplies these names */
static const char *const yyTokenName[] = { 
  "$",             "IF",            "ELSE",          "TRY",         
  "CATCH",         "FINALLY",       "YIELD",         "LPN",         
  "IDENTIFIER",    "COMMA",         "ELLIPSIS",      "PERIOD",      
  "LBR",           "RBR",           "DEF",           "COLON",       
  "SEMICOLON",     "RPN",           "VAR",           "ASSIGN",      
  "SUPEROF",       "LSQ",           "RSQ",           "NEW",         
  "NULL",          "TRUE",          "FALSE",         "NUMBER",      
  "STRING",        "INCREMENT",     "DECREMENT",     "PLUS",        
  "MINUS",         "XMARK",         "TILDE",         "ASTERISK",    
  "SOLIDUS",       "PERCENT",       "LSHIFT",        "LRSHIFT",     
  "ARSHIFT",       "AMPERSAND",     "CARET",         "VBAR",        
  "CONCATENATE",   "EQUAL",         "NOTEQUAL",      "LESS",        
  "GREATER",       "LESSEQUAL",     "GREATEREQUAL",  "IN",          
  "NOTIN",         "IS",            "NOTIS",         "LOGICAND",    
  "LOGICXOR",      "LOGICOR",       "QMARK",         "MULASSIGN",   
  "DIVASSIGN",     "MODASSIGN",     "INTDIVASSIGN",  "ADDASSIGN",   
  "SUBASSIGN",     "LSHIFTASSIGN",  "LRSHIFTASSIGN",  "ARSHIFTASSIGN",
  "BITANDASSIGN",  "BITXORASSIGN",  "BITORASSIGN",   "WHILE",       
  "DELETE",        "CASE",          "DEFAULT",       "CONTINUE",    
  "BREAK",         "RETURN",        "THROW",         "SWITCH",      
  "DO",            "FOR",           "EACHKEY",       "USING",       
  "error",         "name",          "param_list",    "arg_list",    
  "object_scope",  "newobj_scope",  "func_scope",    "newf_scope",  
  "compare_op",    "assign_op",     "value_lbody",   "value_list",  
  "keyval_lbody",  "keyval_list",   "stmt_block",    "stmt_reblock",
  "stmt_if",       "stmt_switch",   "stmt_while",    "stmt_do",     
  "stmt_doblock",  "scope_for",     "stmt_foreach",  "stmt_for",    
  "stmt_using",    "try_block",     "try_catch",     "scope_catch", 
  "stmt_catch",    "token_yield",   "script",        "stmt_list",   
  "name_list",     "qual_name",     "decl_object",   "object_decls",
  "expr_simple",   "object_decl",   "decl_proto",    "decl_func",   
  "decl_var",      "expr_list",     "expr_index",    "expr_assign", 
  "expr_value",    "expr_yield",    "expr_new",      "expr_postfix",
  "expr_literal",  "expr_suffix",   "expr_unary",    "expr_mul",    
  "expr_add",      "expr_shift",    "expr_bitand",   "expr_bitxor", 
  "expr_bitor",    "expr_concat",   "expr_compare",  "expr_and",    
  "expr_xor",      "expr_or",       "expr_nolbr",    "expr_lbody",  
  "expr_final",    "sexpr_lbody",   "sexpr_list",    "sexpr_assign",
  "condition",     "stmt",          "stmt_common",   "stmt_reuse",  
  "stmt_try",      "for_cond",      "for_expr",    
};
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing reduce actions, the names of all rules are required.
*/
static const char *const yyRuleName[] = {
 /*   0 */ "script ::= stmt_list",
 /*   1 */ "name ::= IDENTIFIER",
 /*   2 */ "name_list ::= name",
 /*   3 */ "name_list ::= name_list COMMA name",
 /*   4 */ "param_list ::=",
 /*   5 */ "param_list ::= name_list",
 /*   6 */ "param_list ::= ELLIPSIS",
 /*   7 */ "param_list ::= name_list COMMA ELLIPSIS",
 /*   8 */ "qual_name ::= name",
 /*   9 */ "qual_name ::= qual_name PERIOD IDENTIFIER",
 /*  10 */ "decl_object ::= object_scope LBR object_decls RBR",
 /*  11 */ "object_scope ::= DEF qual_name",
 /*  12 */ "object_scope ::= DEF qual_name COLON expr_simple",
 /*  13 */ "object_decls ::=",
 /*  14 */ "object_decls ::= object_decls object_decl",
 /*  15 */ "object_decl ::= SEMICOLON",
 /*  16 */ "object_decl ::= decl_object",
 /*  17 */ "object_decl ::= decl_proto",
 /*  18 */ "object_decl ::= decl_func",
 /*  19 */ "object_decl ::= decl_var",
 /*  20 */ "decl_proto ::= DEF qual_name LPN param_list RPN SEMICOLON",
 /*  21 */ "decl_proto ::= DEF qual_name LPN param_list RPN YIELD SEMICOLON",
 /*  22 */ "decl_func ::= func_scope LBR stmt_list RBR",
 /*  23 */ "func_scope ::= DEF qual_name LPN param_list RPN",
 /*  24 */ "func_scope ::= DEF qual_name LPN param_list RPN YIELD",
 /*  25 */ "decl_var ::= VAR name_list SEMICOLON",
 /*  26 */ "decl_var ::= VAR name_list ASSIGN expr_list SEMICOLON",
 /*  27 */ "expr_index ::= LPN expr_assign RPN",
 /*  28 */ "expr_index ::= SUPEROF LPN expr_assign RPN",
 /*  29 */ "expr_index ::= IDENTIFIER",
 /*  30 */ "expr_index ::= expr_index PERIOD IDENTIFIER",
 /*  31 */ "expr_index ::= expr_index PERIOD LSQ expr_value RSQ",
 /*  32 */ "expr_index ::= expr_index LSQ expr_value RSQ",
 /*  33 */ "expr_yield ::= YIELD LPN arg_list RPN",
 /*  34 */ "expr_new ::= NEW expr_index LPN arg_list RPN",
 /*  35 */ "expr_postfix ::= expr_yield",
 /*  36 */ "expr_postfix ::= expr_new",
 /*  37 */ "expr_postfix ::= expr_index LPN arg_list RPN",
 /*  38 */ "expr_postfix ::= expr_postfix PERIOD IDENTIFIER",
 /*  39 */ "expr_postfix ::= expr_postfix PERIOD LSQ expr_value RSQ",
 /*  40 */ "expr_postfix ::= expr_postfix LSQ expr_value RSQ",
 /*  41 */ "expr_postfix ::= expr_postfix LPN arg_list RPN",
 /*  42 */ "expr_simple ::= expr_index",
 /*  43 */ "expr_simple ::= expr_postfix",
 /*  44 */ "expr_simple ::= expr_index LPN arg_list RPN YIELD",
 /*  45 */ "expr_simple ::= expr_postfix LPN arg_list RPN YIELD",
 /*  46 */ "expr_literal ::= expr_simple",
 /*  47 */ "expr_literal ::= NULL",
 /*  48 */ "expr_literal ::= TRUE",
 /*  49 */ "expr_literal ::= FALSE",
 /*  50 */ "expr_literal ::= NUMBER",
 /*  51 */ "expr_literal ::= STRING",
 /*  52 */ "expr_suffix ::= expr_literal",
 /*  53 */ "expr_suffix ::= expr_suffix INCREMENT",
 /*  54 */ "expr_suffix ::= expr_suffix DECREMENT",
 /*  55 */ "expr_unary ::= expr_suffix",
 /*  56 */ "expr_unary ::= PLUS expr_unary",
 /*  57 */ "expr_unary ::= MINUS expr_unary",
 /*  58 */ "expr_unary ::= XMARK expr_unary",
 /*  59 */ "expr_unary ::= TILDE expr_unary",
 /*  60 */ "expr_unary ::= INCREMENT expr_unary",
 /*  61 */ "expr_unary ::= DECREMENT expr_unary",
 /*  62 */ "expr_mul ::= expr_unary",
 /*  63 */ "expr_mul ::= expr_mul ASTERISK expr_unary",
 /*  64 */ "expr_mul ::= expr_mul SOLIDUS expr_unary",
 /*  65 */ "expr_mul ::= expr_mul PERCENT expr_unary",
 /*  66 */ "expr_mul ::= expr_mul TILDE expr_unary",
 /*  67 */ "expr_add ::= expr_mul",
 /*  68 */ "expr_add ::= expr_add PLUS expr_mul",
 /*  69 */ "expr_add ::= expr_add MINUS expr_mul",
 /*  70 */ "expr_shift ::= expr_add",
 /*  71 */ "expr_shift ::= expr_shift LSHIFT expr_add",
 /*  72 */ "expr_shift ::= expr_shift LRSHIFT expr_add",
 /*  73 */ "expr_shift ::= expr_shift ARSHIFT expr_add",
 /*  74 */ "expr_bitand ::= expr_shift",
 /*  75 */ "expr_bitand ::= expr_bitand AMPERSAND expr_shift",
 /*  76 */ "expr_bitxor ::= expr_bitand",
 /*  77 */ "expr_bitxor ::= expr_bitxor CARET expr_bitand",
 /*  78 */ "expr_bitor ::= expr_bitxor",
 /*  79 */ "expr_bitor ::= expr_bitor VBAR expr_bitxor",
 /*  80 */ "expr_concat ::= expr_bitor",
 /*  81 */ "expr_concat ::= expr_concat CONCATENATE expr_bitor",
 /*  82 */ "expr_compare ::= expr_concat",
 /*  83 */ "expr_compare ::= expr_compare compare_op expr_concat",
 /*  84 */ "compare_op ::= EQUAL",
 /*  85 */ "compare_op ::= NOTEQUAL",
 /*  86 */ "compare_op ::= LESS",
 /*  87 */ "compare_op ::= GREATER",
 /*  88 */ "compare_op ::= LESSEQUAL",
 /*  89 */ "compare_op ::= GREATEREQUAL",
 /*  90 */ "compare_op ::= IN",
 /*  91 */ "compare_op ::= NOTIN",
 /*  92 */ "compare_op ::= IS",
 /*  93 */ "compare_op ::= NOTIS",
 /*  94 */ "expr_and ::= expr_compare",
 /*  95 */ "expr_and ::= expr_and LOGICAND expr_compare",
 /*  96 */ "expr_xor ::= expr_and",
 /*  97 */ "expr_xor ::= expr_xor LOGICXOR expr_and",
 /*  98 */ "expr_or ::= expr_xor",
 /*  99 */ "expr_or ::= expr_or LOGICOR expr_xor",
 /* 100 */ "expr_nolbr ::= expr_or",
 /* 101 */ "expr_nolbr ::= expr_or QMARK expr_value COLON expr_value",
 /* 102 */ "expr_nolbr ::= LSQ RSQ",
 /* 103 */ "expr_nolbr ::= LSQ value_list RSQ",
 /* 104 */ "expr_nolbr ::= newobj_scope LBR object_decls RBR",
 /* 105 */ "expr_nolbr ::= newf_scope LBR stmt_list RBR",
 /* 106 */ "newobj_scope ::= COLON",
 /* 107 */ "newobj_scope ::= COLON COLON expr_simple",
 /* 108 */ "newf_scope ::= QMARK LPN param_list RPN",
 /* 109 */ "newf_scope ::= PERIOD QMARK LPN param_list RPN",
 /* 110 */ "newf_scope ::= QMARK LPN param_list RPN YIELD",
 /* 111 */ "newf_scope ::= PERIOD QMARK LPN param_list RPN YIELD",
 /* 112 */ "expr_value ::= expr_nolbr",
 /* 113 */ "expr_value ::= LBR RBR",
 /* 114 */ "expr_value ::= LBR keyval_list RBR",
 /* 115 */ "expr_lbody ::= expr_value",
 /* 116 */ "expr_lbody ::= expr_lbody COMMA expr_value",
 /* 117 */ "expr_final ::= ELLIPSIS",
 /* 118 */ "expr_final ::= expr_index ELLIPSIS",
 /* 119 */ "expr_final ::= expr_index LSQ RSQ ELLIPSIS",
 /* 120 */ "expr_final ::= expr_postfix ELLIPSIS",
 /* 121 */ "expr_final ::= expr_postfix LSQ RSQ ELLIPSIS",
 /* 122 */ "expr_list ::= expr_final",
 /* 123 */ "expr_list ::= expr_lbody",
 /* 124 */ "expr_list ::= expr_lbody COMMA expr_final",
 /* 125 */ "arg_list ::=",
 /* 126 */ "arg_list ::= expr_list",
 /* 127 */ "expr_assign ::= expr_list",
 /* 128 */ "expr_assign ::= expr_lbody assign_op expr_assign",
 /* 129 */ "assign_op ::= ASSIGN",
 /* 130 */ "assign_op ::= MULASSIGN",
 /* 131 */ "assign_op ::= DIVASSIGN",
 /* 132 */ "assign_op ::= MODASSIGN",
 /* 133 */ "assign_op ::= INTDIVASSIGN",
 /* 134 */ "assign_op ::= ADDASSIGN",
 /* 135 */ "assign_op ::= SUBASSIGN",
 /* 136 */ "assign_op ::= LSHIFTASSIGN",
 /* 137 */ "assign_op ::= LRSHIFTASSIGN",
 /* 138 */ "assign_op ::= ARSHIFTASSIGN",
 /* 139 */ "assign_op ::= BITANDASSIGN",
 /* 140 */ "assign_op ::= BITXORASSIGN",
 /* 141 */ "assign_op ::= BITORASSIGN",
 /* 142 */ "value_lbody ::= expr_value",
 /* 143 */ "value_lbody ::= value_lbody COMMA expr_value",
 /* 144 */ "value_list ::= expr_final",
 /* 145 */ "value_list ::= expr_final COMMA",
 /* 146 */ "value_list ::= value_lbody",
 /* 147 */ "value_list ::= value_lbody COMMA",
 /* 148 */ "value_list ::= value_lbody COMMA expr_final",
 /* 149 */ "keyval_lbody ::= expr_value COLON expr_value",
 /* 150 */ "keyval_lbody ::= keyval_lbody COMMA expr_value COLON expr_value",
 /* 151 */ "keyval_list ::= keyval_lbody",
 /* 152 */ "keyval_list ::= keyval_lbody COMMA",
 /* 153 */ "sexpr_lbody ::= expr_nolbr",
 /* 154 */ "sexpr_lbody ::= sexpr_lbody COMMA expr_value",
 /* 155 */ "sexpr_list ::= expr_final",
 /* 156 */ "sexpr_list ::= sexpr_lbody",
 /* 157 */ "sexpr_list ::= sexpr_lbody COMMA expr_final",
 /* 158 */ "sexpr_assign ::= sexpr_list",
 /* 159 */ "sexpr_assign ::= sexpr_lbody assign_op expr_assign",
 /* 160 */ "condition ::= expr_assign",
 /* 161 */ "condition ::= VAR name_list ASSIGN expr_list",
 /* 162 */ "stmt_list ::=",
 /* 163 */ "stmt_list ::= stmt_list SEMICOLON",
 /* 164 */ "stmt_list ::= stmt_list stmt",
 /* 165 */ "stmt_list ::= stmt_list decl_object",
 /* 166 */ "stmt_list ::= stmt_list decl_func",
 /* 167 */ "stmt_list ::= stmt_list decl_var",
 /* 168 */ "stmt ::= stmt_block stmt_list RBR",
 /* 169 */ "stmt ::= stmt_common",
 /* 170 */ "stmt_block ::= LBR",
 /* 171 */ "stmt_reuse ::= stmt_reblock stmt_list RBR",
 /* 172 */ "stmt_reuse ::= stmt_common",
 /* 173 */ "stmt_reblock ::= LBR",
 /* 174 */ "stmt_common ::= sexpr_assign SEMICOLON",
 /* 175 */ "stmt_common ::= stmt_if LPN condition RPN stmt",
 /* 176 */ "stmt_common ::= stmt_if LPN condition RPN stmt ELSE stmt",
 /* 177 */ "stmt_common ::= stmt_switch LPN condition RPN stmt_reblock stmt_list RPN",
 /* 178 */ "stmt_common ::= stmt_while LPN condition RPN stmt_reuse",
 /* 179 */ "stmt_common ::= stmt_doblock WHILE LPN expr_assign RPN SEMICOLON",
 /* 180 */ "stmt_common ::= stmt_foreach stmt_reuse",
 /* 181 */ "stmt_common ::= stmt_for stmt_reuse",
 /* 182 */ "stmt_common ::= stmt_using LPN condition RPN stmt_reuse",
 /* 183 */ "stmt_common ::= stmt_try",
 /* 184 */ "stmt_common ::= DELETE expr_lbody SEMICOLON",
 /* 185 */ "stmt_common ::= CASE expr_value COLON",
 /* 186 */ "stmt_common ::= DEFAULT COLON",
 /* 187 */ "stmt_common ::= CONTINUE SEMICOLON",
 /* 188 */ "stmt_common ::= BREAK SEMICOLON",
 /* 189 */ "stmt_common ::= RETURN SEMICOLON",
 /* 190 */ "stmt_common ::= RETURN expr_list SEMICOLON",
 /* 191 */ "stmt_common ::= token_yield SEMICOLON",
 /* 192 */ "stmt_common ::= token_yield expr_list SEMICOLON",
 /* 193 */ "stmt_common ::= THROW expr_value SEMICOLON",
 /* 194 */ "stmt_if ::= IF",
 /* 195 */ "stmt_switch ::= SWITCH",
 /* 196 */ "stmt_while ::= WHILE",
 /* 197 */ "stmt_do ::= DO",
 /* 198 */ "stmt_doblock ::= stmt_do stmt_reuse",
 /* 199 */ "scope_for ::= FOR",
 /* 200 */ "stmt_foreach ::= scope_for LPN expr_lbody COLON expr_value RPN",
 /* 201 */ "stmt_foreach ::= scope_for LPN expr_lbody EACHKEY expr_value RPN",
 /* 202 */ "stmt_foreach ::= scope_for LPN VAR name_list COLON expr_value RPN",
 /* 203 */ "stmt_foreach ::= scope_for LPN VAR name_list EACHKEY expr_value RPN",
 /* 204 */ "stmt_for ::= scope_for LPN for_cond SEMICOLON for_expr SEMICOLON for_expr RPN",
 /* 205 */ "for_cond ::=",
 /* 206 */ "for_cond ::= condition",
 /* 207 */ "for_expr ::=",
 /* 208 */ "for_expr ::= expr_assign",
 /* 209 */ "stmt_using ::= USING",
 /* 210 */ "stmt_try ::= try_catch",
 /* 211 */ "stmt_try ::= try_catch FINALLY stmt",
 /* 212 */ "stmt_try ::= try_block FINALLY stmt",
 /* 213 */ "try_block ::= TRY stmt",
 /* 214 */ "try_catch ::= try_block stmt_catch stmt_reuse",
 /* 215 */ "try_catch ::= try_catch stmt_catch stmt_reuse",
 /* 216 */ "scope_catch ::= CATCH",
 /* 217 */ "stmt_catch ::= scope_catch LPN COLON expr_simple RPN",
 /* 218 */ "stmt_catch ::= scope_catch LPN expr_value COLON expr_simple RPN",
 /* 219 */ "stmt_catch ::= scope_catch LPN VAR name COLON expr_simple RPN",
 /* 220 */ "stmt_catch ::= scope_catch LPN expr_value RPN",
 /* 221 */ "stmt_catch ::= scope_catch LPN VAR name RPN",
 /* 222 */ "token_yield ::= YIELD",
};
#endif /* NDEBUG */


#if YYSTACKDEPTH<=0
/*
** Try to increase the size of the parser stack.
*/
static void yyGrowStack(yyParser *p){
  int newSize;
  yyStackEntry *pNew;

  newSize = p->yystksz*2 + 100;
  pNew = realloc(p->yystack, newSize*sizeof(pNew[0]));
  if( pNew ){
    p->yystack = pNew;
    p->yystksz = newSize;
#ifndef NDEBUG
    if( yyTraceFILE ){
      fprintf(yyTraceFILE,"%sStack grows to %d entries!\n",
              yyTracePrompt, p->yystksz);
    }
#endif
  }
}
#endif

/* 
** This function allocates a new parser.
** The only argument is a pointer to a function which works like
** malloc.
**
** Inputs:
** A pointer to the function used to allocate memory.
**
** Outputs:
** A pointer to a parser.  This pointer is used in subsequent calls
** to XecParse and XecParseFree.
*/
void *XecParseAlloc(void *(*mallocProc)(size_t)){
  yyParser *pParser;
  pParser = (yyParser*)(*mallocProc)( (size_t)sizeof(yyParser) );
  if( pParser ){
    pParser->yyidx = -1;
#ifdef YYTRACKMAXSTACKDEPTH
    pParser->yyidxMax = 0;
#endif
#if YYSTACKDEPTH<=0
    pParser->yystack = NULL;
    pParser->yystksz = 0;
    yyGrowStack(pParser);
#endif
  }
  return pParser;
}

/* The following function deletes the value associated with a
** symbol.  The symbol can be either a terminal or nonterminal.
** "yymajor" is the symbol code, and "yypminor" is a pointer to
** the value.
*/
static void yy_destructor(
  yyParser *yypParser,    /* The parser */
  YYCODETYPE yymajor,     /* Type code for object to destroy */
  YYMINORTYPE *yypminor   /* The object to be destroyed */
){
  XecParseARG_FETCH;
  switch( yymajor ){
    /* Here is inserted the actions which take place when a
    ** terminal or non-terminal is destroyed.  This can happen
    ** when the symbol is popped from the stack during a
    ** reduce or during error processing or when a parser is 
    ** being destroyed before it is finished parsing.
    **
    ** Note: during a reduce, the only symbols destroyed are those
    ** which appear on the RHS of the rule, but which are not used
    ** inside the C code.
    */
      /* TERMINAL Destructor */
    case 1: /* IF */
    case 2: /* ELSE */
    case 3: /* TRY */
    case 4: /* CATCH */
    case 5: /* FINALLY */
    case 6: /* YIELD */
    case 7: /* LPN */
    case 8: /* IDENTIFIER */
    case 9: /* COMMA */
    case 10: /* ELLIPSIS */
    case 11: /* PERIOD */
    case 12: /* LBR */
    case 13: /* RBR */
    case 14: /* DEF */
    case 15: /* COLON */
    case 16: /* SEMICOLON */
    case 17: /* RPN */
    case 18: /* VAR */
    case 19: /* ASSIGN */
    case 20: /* SUPEROF */
    case 21: /* LSQ */
    case 22: /* RSQ */
    case 23: /* NEW */
    case 24: /* NULL */
    case 25: /* TRUE */
    case 26: /* FALSE */
    case 27: /* NUMBER */
    case 28: /* STRING */
    case 29: /* INCREMENT */
    case 30: /* DECREMENT */
    case 31: /* PLUS */
    case 32: /* MINUS */
    case 33: /* XMARK */
    case 34: /* TILDE */
    case 35: /* ASTERISK */
    case 36: /* SOLIDUS */
    case 37: /* PERCENT */
    case 38: /* LSHIFT */
    case 39: /* LRSHIFT */
    case 40: /* ARSHIFT */
    case 41: /* AMPERSAND */
    case 42: /* CARET */
    case 43: /* VBAR */
    case 44: /* CONCATENATE */
    case 45: /* EQUAL */
    case 46: /* NOTEQUAL */
    case 47: /* LESS */
    case 48: /* GREATER */
    case 49: /* LESSEQUAL */
    case 50: /* GREATEREQUAL */
    case 51: /* IN */
    case 52: /* NOTIN */
    case 53: /* IS */
    case 54: /* NOTIS */
    case 55: /* LOGICAND */
    case 56: /* LOGICXOR */
    case 57: /* LOGICOR */
    case 58: /* QMARK */
    case 59: /* MULASSIGN */
    case 60: /* DIVASSIGN */
    case 61: /* MODASSIGN */
    case 62: /* INTDIVASSIGN */
    case 63: /* ADDASSIGN */
    case 64: /* SUBASSIGN */
    case 65: /* LSHIFTASSIGN */
    case 66: /* LRSHIFTASSIGN */
    case 67: /* ARSHIFTASSIGN */
    case 68: /* BITANDASSIGN */
    case 69: /* BITXORASSIGN */
    case 70: /* BITORASSIGN */
    case 71: /* WHILE */
    case 72: /* DELETE */
    case 73: /* CASE */
    case 74: /* DEFAULT */
    case 75: /* CONTINUE */
    case 76: /* BREAK */
    case 77: /* RETURN */
    case 78: /* THROW */
    case 79: /* SWITCH */
    case 80: /* DO */
    case 81: /* FOR */
    case 82: /* EACHKEY */
    case 83: /* USING */
{
#line 123 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"

    p->destroy( (yypminor->yy0) );

#line 1610 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
}
      break;
      /* Default NON-TERMINAL Destructor */
    case 84: /* error */
    case 85: /* name */
    case 86: /* param_list */
    case 87: /* arg_list */
    case 88: /* object_scope */
    case 89: /* newobj_scope */
    case 90: /* func_scope */
    case 91: /* newf_scope */
    case 92: /* compare_op */
    case 93: /* assign_op */
    case 94: /* value_lbody */
    case 95: /* value_list */
    case 96: /* keyval_lbody */
    case 97: /* keyval_list */
    case 98: /* stmt_block */
    case 99: /* stmt_reblock */
    case 100: /* stmt_if */
    case 101: /* stmt_switch */
    case 102: /* stmt_while */
    case 103: /* stmt_do */
    case 104: /* stmt_doblock */
    case 105: /* scope_for */
    case 106: /* stmt_foreach */
    case 107: /* stmt_for */
    case 108: /* stmt_using */
    case 109: /* try_block */
    case 110: /* try_catch */
    case 111: /* scope_catch */
    case 112: /* stmt_catch */
    case 113: /* token_yield */
    case 114: /* script */
    case 115: /* stmt_list */
    case 116: /* name_list */
    case 117: /* qual_name */
    case 118: /* decl_object */
    case 119: /* object_decls */
    case 120: /* expr_simple */
    case 121: /* object_decl */
    case 122: /* decl_proto */
    case 123: /* decl_func */
    case 124: /* decl_var */
    case 125: /* expr_list */
    case 126: /* expr_index */
    case 127: /* expr_assign */
    case 128: /* expr_value */
    case 129: /* expr_yield */
    case 130: /* expr_new */
    case 131: /* expr_postfix */
    case 132: /* expr_literal */
    case 133: /* expr_suffix */
    case 134: /* expr_unary */
    case 135: /* expr_mul */
    case 136: /* expr_add */
    case 137: /* expr_shift */
    case 138: /* expr_bitand */
    case 139: /* expr_bitxor */
    case 140: /* expr_bitor */
    case 141: /* expr_concat */
    case 142: /* expr_compare */
    case 143: /* expr_and */
    case 144: /* expr_xor */
    case 145: /* expr_or */
    case 146: /* expr_nolbr */
    case 147: /* expr_lbody */
    case 148: /* expr_final */
    case 149: /* sexpr_lbody */
    case 150: /* sexpr_list */
    case 151: /* sexpr_assign */
    case 152: /* condition */
    case 153: /* stmt */
    case 154: /* stmt_common */
    case 155: /* stmt_reuse */
    case 156: /* stmt_try */
    case 157: /* for_cond */
    case 158: /* for_expr */
{
#line 119 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"


#line 1693 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
}
      break;
    default:  break;   /* If no destructor action specified: do nothing */
  }
}

/*
** Pop the parser's stack once.
**
** If there is a destructor routine associated with the token which
** is popped from the stack, then call it.
**
** Return the major token number for the symbol popped.
*/
static int yy_pop_parser_stack(yyParser *pParser){
  YYCODETYPE yymajor;
  yyStackEntry *yytos = &pParser->yystack[pParser->yyidx];

  if( pParser->yyidx<0 ) return 0;
#ifndef NDEBUG
  if( yyTraceFILE && pParser->yyidx>=0 ){
    fprintf(yyTraceFILE,"%sPopping %s\n",
      yyTracePrompt,
      yyTokenName[yytos->major]);
  }
#endif
  yymajor = yytos->major;
  yy_destructor(pParser, yymajor, &yytos->minor);
  pParser->yyidx--;
  return yymajor;
}

/* 
** Deallocate and destroy a parser.  Destructors are all called for
** all stack elements before shutting the parser down.
**
** Inputs:
** <ul>
** <li>  A pointer to the parser.  This should be a pointer
**       obtained from XecParseAlloc.
** <li>  A pointer to a function used to reclaim memory obtained
**       from malloc.
** </ul>
*/
void XecParseFree(
  void *p,                    /* The parser to be deleted */
  void (*freeProc)(void*)     /* Function used to reclaim memory */
){
  yyParser *pParser = (yyParser*)p;
  if( pParser==0 ) return;
  while( pParser->yyidx>=0 ) yy_pop_parser_stack(pParser);
#if YYSTACKDEPTH<=0
  free(pParser->yystack);
#endif
  (*freeProc)((void*)pParser);
}

/*
** Return the peak depth of the stack for a parser.
*/
#ifdef YYTRACKMAXSTACKDEPTH
int XecParseStackPeak(void *p){
  yyParser *pParser = (yyParser*)p;
  return pParser->yyidxMax;
}
#endif

/*
** Find the appropriate action for a parser given the terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
static int yy_find_shift_action(
  yyParser *pParser,        /* The parser */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
  int stateno = pParser->yystack[pParser->yyidx].stateno;
 
  if( stateno>YY_SHIFT_MAX || (i = yy_shift_ofst[stateno])==YY_SHIFT_USE_DFLT ){
    return yy_default[stateno];
  }
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
  if( i<0 || i>=YY_SZ_ACTTAB || yy_lookahead[i]!=iLookAhead ){
    if( iLookAhead>0 ){
#ifdef YYFALLBACK
      YYCODETYPE iFallback;            /* Fallback token */
      if( iLookAhead<sizeof(yyFallback)/sizeof(yyFallback[0])
             && (iFallback = yyFallback[iLookAhead])!=0 ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE, "%sFALLBACK %s => %s\n",
             yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[iFallback]);
        }
#endif
        return yy_find_shift_action(pParser, iFallback);
      }
#endif
#ifdef YYWILDCARD
      {
        int j = i - iLookAhead + YYWILDCARD;
        if( j>=0 && j<YY_SZ_ACTTAB && yy_lookahead[j]==YYWILDCARD ){
#ifndef NDEBUG
          if( yyTraceFILE ){
            fprintf(yyTraceFILE, "%sWILDCARD %s => %s\n",
               yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[YYWILDCARD]);
          }
#endif /* NDEBUG */
          return yy_action[j];
        }
      }
#endif /* YYWILDCARD */
    }
    return yy_default[stateno];
  }else{
    return yy_action[i];
  }
}

/*
** Find the appropriate action for a parser given the non-terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
static int yy_find_reduce_action(
  int stateno,              /* Current state number */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
#ifdef YYERRORSYMBOL
  if( stateno>YY_REDUCE_MAX ){
    return yy_default[stateno];
  }
#else
  assert( stateno<=YY_REDUCE_MAX );
#endif
  i = yy_reduce_ofst[stateno];
  assert( i!=YY_REDUCE_USE_DFLT );
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
#ifdef YYERRORSYMBOL
  if( i<0 || i>=YY_SZ_ACTTAB || yy_lookahead[i]!=iLookAhead ){
    return yy_default[stateno];
  }
#else
  assert( i>=0 && i<YY_SZ_ACTTAB );
  assert( yy_lookahead[i]==iLookAhead );
#endif
  return yy_action[i];
}

/*
** The following routine is called if the stack overflows.
*/
static void yyStackOverflow(yyParser *yypParser, YYMINORTYPE *yypMinor){
   XecParseARG_FETCH;
   yypParser->yyidx--;
#ifndef NDEBUG
   if( yyTraceFILE ){
     fprintf(yyTraceFILE,"%sStack Overflow!\n",yyTracePrompt);
   }
#endif
   while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
   /* Here code is inserted which will execute if the parser
   ** stack every overflows */
   XecParseARG_STORE; /* Suppress warning about unused %extra_argument var */
}

/*
** Perform a shift action.
*/
static void yy_shift(
  yyParser *yypParser,          /* The parser to be shifted */
  int yyNewState,               /* The new state to shift in */
  int yyMajor,                  /* The major token to shift in */
  YYMINORTYPE *yypMinor         /* Pointer to the minor token to shift in */
){
  yyStackEntry *yytos;
  yypParser->yyidx++;
#ifdef YYTRACKMAXSTACKDEPTH
  if( yypParser->yyidx>yypParser->yyidxMax ){
    yypParser->yyidxMax = yypParser->yyidx;
  }
#endif
#if YYSTACKDEPTH>0 
  if( yypParser->yyidx>=YYSTACKDEPTH ){
    yyStackOverflow(yypParser, yypMinor);
    return;
  }
#else
  if( yypParser->yyidx>=yypParser->yystksz ){
    yyGrowStack(yypParser);
    if( yypParser->yyidx>=yypParser->yystksz ){
      yyStackOverflow(yypParser, yypMinor);
      return;
    }
  }
#endif
  yytos = &yypParser->yystack[yypParser->yyidx];
  yytos->stateno = (YYACTIONTYPE)yyNewState;
  yytos->major = (YYCODETYPE)yyMajor;
  yytos->minor = *yypMinor;
#ifndef NDEBUG
  if( yyTraceFILE && yypParser->yyidx>0 ){
    int i;
    fprintf(yyTraceFILE,"%sShift %d\n",yyTracePrompt,yyNewState);
    fprintf(yyTraceFILE,"%sStack:",yyTracePrompt);
    for(i=1; i<=yypParser->yyidx; i++)
      fprintf(yyTraceFILE," %s",yyTokenName[yypParser->yystack[i].major]);
    fprintf(yyTraceFILE,"\n");
  }
#endif
}

/* The following table contains information about every rule that
** is used during the reduce.
*/
static const struct {
  YYCODETYPE lhs;         /* Symbol on the left-hand side of the rule */
  unsigned char nrhs;     /* Number of right-hand side symbols in the rule */
} yyRuleInfo[] = {
  { 114, 1 },
  { 85, 1 },
  { 116, 1 },
  { 116, 3 },
  { 86, 0 },
  { 86, 1 },
  { 86, 1 },
  { 86, 3 },
  { 117, 1 },
  { 117, 3 },
  { 118, 4 },
  { 88, 2 },
  { 88, 4 },
  { 119, 0 },
  { 119, 2 },
  { 121, 1 },
  { 121, 1 },
  { 121, 1 },
  { 121, 1 },
  { 121, 1 },
  { 122, 6 },
  { 122, 7 },
  { 123, 4 },
  { 90, 5 },
  { 90, 6 },
  { 124, 3 },
  { 124, 5 },
  { 126, 3 },
  { 126, 4 },
  { 126, 1 },
  { 126, 3 },
  { 126, 5 },
  { 126, 4 },
  { 129, 4 },
  { 130, 5 },
  { 131, 1 },
  { 131, 1 },
  { 131, 4 },
  { 131, 3 },
  { 131, 5 },
  { 131, 4 },
  { 131, 4 },
  { 120, 1 },
  { 120, 1 },
  { 120, 5 },
  { 120, 5 },
  { 132, 1 },
  { 132, 1 },
  { 132, 1 },
  { 132, 1 },
  { 132, 1 },
  { 132, 1 },
  { 133, 1 },
  { 133, 2 },
  { 133, 2 },
  { 134, 1 },
  { 134, 2 },
  { 134, 2 },
  { 134, 2 },
  { 134, 2 },
  { 134, 2 },
  { 134, 2 },
  { 135, 1 },
  { 135, 3 },
  { 135, 3 },
  { 135, 3 },
  { 135, 3 },
  { 136, 1 },
  { 136, 3 },
  { 136, 3 },
  { 137, 1 },
  { 137, 3 },
  { 137, 3 },
  { 137, 3 },
  { 138, 1 },
  { 138, 3 },
  { 139, 1 },
  { 139, 3 },
  { 140, 1 },
  { 140, 3 },
  { 141, 1 },
  { 141, 3 },
  { 142, 1 },
  { 142, 3 },
  { 92, 1 },
  { 92, 1 },
  { 92, 1 },
  { 92, 1 },
  { 92, 1 },
  { 92, 1 },
  { 92, 1 },
  { 92, 1 },
  { 92, 1 },
  { 92, 1 },
  { 143, 1 },
  { 143, 3 },
  { 144, 1 },
  { 144, 3 },
  { 145, 1 },
  { 145, 3 },
  { 146, 1 },
  { 146, 5 },
  { 146, 2 },
  { 146, 3 },
  { 146, 4 },
  { 146, 4 },
  { 89, 1 },
  { 89, 3 },
  { 91, 4 },
  { 91, 5 },
  { 91, 5 },
  { 91, 6 },
  { 128, 1 },
  { 128, 2 },
  { 128, 3 },
  { 147, 1 },
  { 147, 3 },
  { 148, 1 },
  { 148, 2 },
  { 148, 4 },
  { 148, 2 },
  { 148, 4 },
  { 125, 1 },
  { 125, 1 },
  { 125, 3 },
  { 87, 0 },
  { 87, 1 },
  { 127, 1 },
  { 127, 3 },
  { 93, 1 },
  { 93, 1 },
  { 93, 1 },
  { 93, 1 },
  { 93, 1 },
  { 93, 1 },
  { 93, 1 },
  { 93, 1 },
  { 93, 1 },
  { 93, 1 },
  { 93, 1 },
  { 93, 1 },
  { 93, 1 },
  { 94, 1 },
  { 94, 3 },
  { 95, 1 },
  { 95, 2 },
  { 95, 1 },
  { 95, 2 },
  { 95, 3 },
  { 96, 3 },
  { 96, 5 },
  { 97, 1 },
  { 97, 2 },
  { 149, 1 },
  { 149, 3 },
  { 150, 1 },
  { 150, 1 },
  { 150, 3 },
  { 151, 1 },
  { 151, 3 },
  { 152, 1 },
  { 152, 4 },
  { 115, 0 },
  { 115, 2 },
  { 115, 2 },
  { 115, 2 },
  { 115, 2 },
  { 115, 2 },
  { 153, 3 },
  { 153, 1 },
  { 98, 1 },
  { 155, 3 },
  { 155, 1 },
  { 99, 1 },
  { 154, 2 },
  { 154, 5 },
  { 154, 7 },
  { 154, 7 },
  { 154, 5 },
  { 154, 6 },
  { 154, 2 },
  { 154, 2 },
  { 154, 5 },
  { 154, 1 },
  { 154, 3 },
  { 154, 3 },
  { 154, 2 },
  { 154, 2 },
  { 154, 2 },
  { 154, 2 },
  { 154, 3 },
  { 154, 2 },
  { 154, 3 },
  { 154, 3 },
  { 100, 1 },
  { 101, 1 },
  { 102, 1 },
  { 103, 1 },
  { 104, 2 },
  { 105, 1 },
  { 106, 6 },
  { 106, 6 },
  { 106, 7 },
  { 106, 7 },
  { 107, 8 },
  { 157, 0 },
  { 157, 1 },
  { 158, 0 },
  { 158, 1 },
  { 108, 1 },
  { 156, 1 },
  { 156, 3 },
  { 156, 3 },
  { 109, 2 },
  { 110, 3 },
  { 110, 3 },
  { 111, 1 },
  { 112, 5 },
  { 112, 6 },
  { 112, 7 },
  { 112, 4 },
  { 112, 5 },
  { 113, 1 },
};

static void yy_accept(yyParser*);  /* Forward Declaration */

/*
** Perform a reduce action and the shift that must immediately
** follow the reduce.
*/
static void yy_reduce(
  yyParser *yypParser,         /* The parser */
  int yyruleno                 /* Number of the rule by which to reduce */
){
  int yygoto;                     /* The next state */
  int yyact;                      /* The next action */
  YYMINORTYPE yygotominor;        /* The LHS of the rule reduced */
  yyStackEntry *yymsp;            /* The top of the parser's stack */
  int yysize;                     /* Amount to pop the stack */
  XecParseARG_FETCH;
  yymsp = &yypParser->yystack[yypParser->yyidx];
#ifndef NDEBUG
  if( yyTraceFILE && yyruleno>=0 
        && yyruleno<(int)(sizeof(yyRuleName)/sizeof(yyRuleName[0])) ){
    fprintf(yyTraceFILE, "%sReduce [%s].\n", yyTracePrompt,
      yyRuleName[yyruleno]);
  }
#endif /* NDEBUG */

  /* Silence complaints from purify about yygotominor being uninitialized
  ** in some cases when it is copied into the stack after the following
  ** switch.  yygotominor is uninitialized when a rule reduces that does
  ** not set the value of its left-hand side nonterminal.  Leaving the
  ** value of the nonterminal uninitialized is utterly harmless as long
  ** as the value is never used.  So really the only thing this code
  ** accomplishes is to quieten purify.  
  **
  ** 2007-01-16:  The wireshark project (www.wireshark.org) reports that
  ** without this code, their parser segfaults.  I'm not sure what there
  ** parser is doing to make this happen.  This is the second bug report
  ** from wireshark this week.  Clearly they are stressing Lemon in ways
  ** that it has not been previously stressed...  (SQLite ticket #2172)
  */
  /*memset(&yygotominor, 0, sizeof(yygotominor));*/
  yygotominor = yyzerominor;


  switch( yyruleno ){
  /* Beginning here are the reduction cases.  A typical example
  ** follows:
  **   case 0:
  **  #line <lineno> <grammarfile>
  **     { ... }           // User supplied code
  **  #line <lineno> <thisfile>
  **     break;
  */
      case 0: /* script ::= stmt_list */
#line 161 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                  yy_destructor(yypParser,115,&yymsp[0].minor);
}
#line 2204 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 1: /* name ::= IDENTIFIER */
#line 172 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy96 = p->alloc< yl_name_name >( yymsp[0].minor.yy0->sloc, yymsp[0].minor.yy0->text );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 2212 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 2: /* name_list ::= name */
      case 8: /* qual_name ::= name */ yytestcase(yyruleno==8);
#line 179 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy10 = yymsp[0].minor.yy96;
                }
#line 2220 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 3: /* name_list ::= name_list COMMA name */
#line 183 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yl_name_list* l;
                    yygotominor.yy10 = l = p->name_list( yymsp[-2].minor.yy10 );
                    l->names.push_back( yymsp[0].minor.yy96 );
                  yy_destructor(yypParser,9,&yymsp[-1].minor);
}
#line 2230 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 4: /* param_list ::= */
#line 191 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy149 = nullptr;
                }
#line 2237 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 5: /* param_list ::= name_list */
#line 195 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy149 = p->name_list( yymsp[0].minor.yy10 );
                }
#line 2244 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 6: /* param_list ::= ELLIPSIS */
#line 199 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yl_name_list* l;
                    yygotominor.yy149 = l = p->alloc< yl_name_list >( yymsp[0].minor.yy0->sloc );
                    l->varargs = true;
                }
#line 2253 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 7: /* param_list ::= name_list COMMA ELLIPSIS */
#line 205 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yl_name_list* l;
                    yygotominor.yy149 = l = p->name_list( yymsp[-2].minor.yy10 );
                    l->varargs = true;
                  yy_destructor(yypParser,9,&yymsp[-1].minor);
  yy_destructor(yypParser,10,&yymsp[0].minor);
}
#line 2264 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 9: /* qual_name ::= qual_name PERIOD IDENTIFIER */
#line 217 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy10 = p->alloc< yl_name_qual >(
                                    yymsp[0].minor.yy0->sloc, yymsp[-2].minor.yy10, yymsp[0].minor.yy0->text );
                    p->destroy( yymsp[0].minor.yy0 );
                  yy_destructor(yypParser,11,&yymsp[-1].minor);
}
#line 2274 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 10: /* decl_object ::= object_scope LBR object_decls RBR */
#line 233 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    p->close_scope( yymsp[-3].minor.yy37->scope );
                  yy_destructor(yypParser,12,&yymsp[-2].minor);
  yy_destructor(yypParser,119,&yymsp[-1].minor);
  yy_destructor(yypParser,13,&yymsp[0].minor);
}
#line 2284 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 11: /* object_scope ::= DEF qual_name */
#line 238 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy37 = p->object( yymsp[0].minor.yy10->sloc, yymsp[0].minor.yy10, nullptr );
                  yy_destructor(yypParser,14,&yymsp[-1].minor);
}
#line 2292 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 12: /* object_scope ::= DEF qual_name COLON expr_simple */
#line 242 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy37 = p->object( yymsp[-2].minor.yy10->sloc, yymsp[-2].minor.yy10, yymsp[0].minor.yy10 );
                  yy_destructor(yypParser,14,&yymsp[-3].minor);
  yy_destructor(yypParser,15,&yymsp[-1].minor);
}
#line 2301 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 13: /* object_decls ::= */
      case 162: /* stmt_list ::= */ yytestcase(yyruleno==162);
#line 248 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                }
#line 2308 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 14: /* object_decls ::= object_decls object_decl */
#line 251 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                  yy_destructor(yypParser,119,&yymsp[-1].minor);
  yy_destructor(yypParser,121,&yymsp[0].minor);
}
#line 2316 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 15: /* object_decl ::= SEMICOLON */
#line 255 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                  yy_destructor(yypParser,16,&yymsp[0].minor);
}
#line 2323 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 16: /* object_decl ::= decl_object */
#line 258 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                  yy_destructor(yypParser,118,&yymsp[0].minor);
}
#line 2330 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 17: /* object_decl ::= decl_proto */
#line 261 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                  yy_destructor(yypParser,122,&yymsp[0].minor);
}
#line 2337 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 18: /* object_decl ::= decl_func */
#line 264 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                  yy_destructor(yypParser,123,&yymsp[0].minor);
}
#line 2344 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 19: /* object_decl ::= decl_var */
#line 267 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                  yy_destructor(yypParser,124,&yymsp[0].minor);
}
#line 2351 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 20: /* decl_proto ::= DEF qual_name LPN param_list RPN SEMICOLON */
#line 273 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    p->prototype( yymsp[-5].minor.yy0->sloc, yymsp[-4].minor.yy10, yymsp[-2].minor.yy149, false );
                    p->destroy( yymsp[-5].minor.yy0 );
                  yy_destructor(yypParser,7,&yymsp[-3].minor);
  yy_destructor(yypParser,17,&yymsp[-1].minor);
  yy_destructor(yypParser,16,&yymsp[0].minor);
}
#line 2362 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 21: /* decl_proto ::= DEF qual_name LPN param_list RPN YIELD SEMICOLON */
#line 279 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    p->prototype( yymsp[-6].minor.yy0->sloc, yymsp[-5].minor.yy10, yymsp[-3].minor.yy149, true );
                    p->destroy( yymsp[-6].minor.yy0 );
                  yy_destructor(yypParser,7,&yymsp[-4].minor);
  yy_destructor(yypParser,17,&yymsp[-2].minor);
  yy_destructor(yypParser,6,&yymsp[-1].minor);
  yy_destructor(yypParser,16,&yymsp[0].minor);
}
#line 2374 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 22: /* decl_func ::= func_scope LBR stmt_list RBR */
#line 286 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    p->close_scope( yymsp[-3].minor.yy116->scope );
                  yy_destructor(yypParser,12,&yymsp[-2].minor);
  yy_destructor(yypParser,115,&yymsp[-1].minor);
  yy_destructor(yypParser,13,&yymsp[0].minor);
}
#line 2384 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 23: /* func_scope ::= DEF qual_name LPN param_list RPN */
#line 292 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy116 = p->function( yymsp[-4].minor.yy0->sloc, yymsp[-3].minor.yy10, yymsp[-1].minor.yy149, false, false );
                    p->destroy( yymsp[-4].minor.yy0 );
                  yy_destructor(yypParser,7,&yymsp[-2].minor);
  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 2394 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 24: /* func_scope ::= DEF qual_name LPN param_list RPN YIELD */
#line 298 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy116 = p->function( yymsp[-5].minor.yy0->sloc, yymsp[-4].minor.yy10, yymsp[-2].minor.yy149, true, false );
                    p->destroy( yymsp[-5].minor.yy0 );
                  yy_destructor(yypParser,7,&yymsp[-3].minor);
  yy_destructor(yypParser,17,&yymsp[-1].minor);
  yy_destructor(yypParser,6,&yymsp[0].minor);
}
#line 2405 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 25: /* decl_var ::= VAR name_list SEMICOLON */
#line 305 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    p->var( yymsp[-2].minor.yy0->sloc, yymsp[-1].minor.yy10, nullptr );
                    p->destroy( yymsp[-2].minor.yy0 );
                  yy_destructor(yypParser,16,&yymsp[0].minor);
}
#line 2414 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 26: /* decl_var ::= VAR name_list ASSIGN expr_list SEMICOLON */
#line 311 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    p->var( yymsp[-4].minor.yy0->sloc, yymsp[-3].minor.yy10, yymsp[-1].minor.yy10 );
                    p->destroy( yymsp[-4].minor.yy0 );
                  yy_destructor(yypParser,19,&yymsp[-2].minor);
  yy_destructor(yypParser,16,&yymsp[0].minor);
}
#line 2424 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 27: /* expr_index ::= LPN expr_assign RPN */
#line 328 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy10 = p->mono( yymsp[-1].minor.yy10 );
                  yy_destructor(yypParser,7,&yymsp[-2].minor);
  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 2433 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 28: /* expr_index ::= SUPEROF LPN expr_assign RPN */
#line 332 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy10 = p->alloc< yl_expr_superof >( yymsp[-3].minor.yy0->sloc, yymsp[-1].minor.yy10 );
                    p->destroy( yymsp[-3].minor.yy0 );
                  yy_destructor(yypParser,7,&yymsp[-2].minor);
  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 2443 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 29: /* expr_index ::= IDENTIFIER */
#line 337 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy10 = p->lookup( yymsp[0].minor.yy0->sloc, yymsp[0].minor.yy0->text, true );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 2451 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 30: /* expr_index ::= expr_index PERIOD IDENTIFIER */
      case 38: /* expr_postfix ::= expr_postfix PERIOD IDENTIFIER */ yytestcase(yyruleno==38);
#line 342 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy10 = p->key( yymsp[-2].minor.yy10->sloc, yymsp[-2].minor.yy10, yymsp[0].minor.yy0->text );
                    p->destroy( yymsp[0].minor.yy0 );
                  yy_destructor(yypParser,11,&yymsp[-1].minor);
}
#line 2461 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 31: /* expr_index ::= expr_index PERIOD LSQ expr_value RSQ */
#line 347 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy10 = p->alloc< yl_expr_inkey >( yymsp[-4].minor.yy10->sloc, yymsp[-4].minor.yy10, yymsp[-1].minor.yy10 );
                  yy_destructor(yypParser,11,&yymsp[-3].minor);
  yy_destructor(yypParser,21,&yymsp[-2].minor);
  yy_destructor(yypParser,22,&yymsp[0].minor);
}
#line 2471 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 32: /* expr_index ::= expr_index LSQ expr_value RSQ */
#line 351 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy10 = p->alloc< yl_expr_index >( yymsp[-3].minor.yy10->sloc, yymsp[-3].minor.yy10, yymsp[-1].minor.yy10 );
                  yy_destructor(yypParser,21,&yymsp[-2].minor);
  yy_destructor(yypParser,22,&yymsp[0].minor);
}
#line 2480 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 33: /* expr_yield ::= YIELD LPN arg_list RPN */
#line 356 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    p->check_yield( yymsp[-3].minor.yy0->sloc );
                    yygotominor.yy10 = p->alloc< yl_expr_yield >( yymsp[-3].minor.yy0->sloc, yymsp[-1].minor.yy229 );
                    p->destroy( yymsp[-3].minor.yy0 );
                  yy_destructor(yypParser,7,&yymsp[-2].minor);
  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 2491 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 34: /* expr_new ::= NEW expr_index LPN arg_list RPN */
#line 363 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy10 = p->alloc< yl_new_new >( yymsp[-4].minor.yy0->sloc, yymsp[-3].minor.yy10, yymsp[-1].minor.yy229 );
                    p->destroy( yymsp[-4].minor.yy0 );
                  yy_destructor(yypParser,7,&yymsp[-2].minor);
  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 2501 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 35: /* expr_postfix ::= expr_yield */
      case 36: /* expr_postfix ::= expr_new */ yytestcase(yyruleno==36);
      case 42: /* expr_simple ::= expr_index */ yytestcase(yyruleno==42);
      case 43: /* expr_simple ::= expr_postfix */ yytestcase(yyruleno==43);
      case 46: /* expr_literal ::= expr_simple */ yytestcase(yyruleno==46);
      case 52: /* expr_suffix ::= expr_literal */ yytestcase(yyruleno==52);
      case 55: /* expr_unary ::= expr_suffix */ yytestcase(yyruleno==55);
      case 62: /* expr_mul ::= expr_unary */ yytestcase(yyruleno==62);
      case 67: /* expr_add ::= expr_mul */ yytestcase(yyruleno==67);
      case 70: /* expr_shift ::= expr_add */ yytestcase(yyruleno==70);
      case 74: /* expr_bitand ::= expr_shift */ yytestcase(yyruleno==74);
      case 76: /* expr_bitxor ::= expr_bitand */ yytestcase(yyruleno==76);
      case 78: /* expr_bitor ::= expr_bitxor */ yytestcase(yyruleno==78);
      case 80: /* expr_concat ::= expr_bitor */ yytestcase(yyruleno==80);
      case 82: /* expr_compare ::= expr_concat */ yytestcase(yyruleno==82);
      case 94: /* expr_and ::= expr_compare */ yytestcase(yyruleno==94);
      case 96: /* expr_xor ::= expr_and */ yytestcase(yyruleno==96);
      case 98: /* expr_or ::= expr_xor */ yytestcase(yyruleno==98);
      case 100: /* expr_nolbr ::= expr_or */ yytestcase(yyruleno==100);
      case 112: /* expr_value ::= expr_nolbr */ yytestcase(yyruleno==112);
      case 115: /* expr_lbody ::= expr_value */ yytestcase(yyruleno==115);
      case 123: /* expr_list ::= expr_lbody */ yytestcase(yyruleno==123);
      case 127: /* expr_assign ::= expr_list */ yytestcase(yyruleno==127);
      case 153: /* sexpr_lbody ::= expr_nolbr */ yytestcase(yyruleno==153);
      case 155: /* sexpr_list ::= expr_final */ yytestcase(yyruleno==155);
      case 156: /* sexpr_list ::= sexpr_lbody */ yytestcase(yyruleno==156);
      case 158: /* sexpr_assign ::= sexpr_list */ yytestcase(yyruleno==158);
      case 160: /* condition ::= expr_assign */ yytestcase(yyruleno==160);
      case 169: /* stmt ::= stmt_common */ yytestcase(yyruleno==169);
      case 172: /* stmt_reuse ::= stmt_common */ yytestcase(yyruleno==172);
      case 183: /* stmt_common ::= stmt_try */ yytestcase(yyruleno==183);
      case 206: /* for_cond ::= condition */ yytestcase(yyruleno==206);
      case 208: /* for_expr ::= expr_assign */ yytestcase(yyruleno==208);
#line 370 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy10 = yymsp[0].minor.yy10;
                }
#line 2540 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 37: /* expr_postfix ::= expr_index LPN arg_list RPN */
      case 41: /* expr_postfix ::= expr_postfix LPN arg_list RPN */ yytestcase(yyruleno==41);
#line 378 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy10 = p->alloc< yl_expr_call >(
                                yymsp[-3].minor.yy10->sloc, yymsp[-3].minor.yy10, yymsp[-1].minor.yy229, false );
                  yy_destructor(yypParser,7,&yymsp[-2].minor);
  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 2551 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 39: /* expr_postfix ::= expr_postfix PERIOD LSQ expr_value RSQ */
#line 388 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy10 = p->alloc< yl_expr_inkey >(
                                yymsp[-4].minor.yy10->sloc, yymsp[-4].minor.yy10, yymsp[-1].minor.yy10 );
                  yy_destructor(yypParser,11,&yymsp[-3].minor);
  yy_destructor(yypParser,21,&yymsp[-2].minor);
  yy_destructor(yypParser,22,&yymsp[0].minor);
}
#line 2562 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 40: /* expr_postfix ::= expr_postfix LSQ expr_value RSQ */
#line 393 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy10 = p->alloc< yl_expr_index >(
                                yymsp[-3].minor.yy10->sloc, yymsp[-3].minor.yy10, yymsp[-1].minor.yy10 );
                  yy_destructor(yypParser,21,&yymsp[-2].minor);
  yy_destructor(yypParser,22,&yymsp[0].minor);
}
#line 2572 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 44: /* expr_simple ::= expr_index LPN arg_list RPN YIELD */
      case 45: /* expr_simple ::= expr_postfix LPN arg_list RPN YIELD */ yytestcase(yyruleno==45);
#line 418 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    p->check_yield( yymsp[-4].minor.yy10->sloc );
                    yygotominor.yy10 = p->alloc< yl_expr_call >(
                                yymsp[-4].minor.yy10->sloc, yymsp[-4].minor.yy10, yymsp[-2].minor.yy229, true );
                  yy_destructor(yypParser,7,&yymsp[-3].minor);
  yy_destructor(yypParser,17,&yymsp[-1].minor);
  yy_destructor(yypParser,6,&yymsp[0].minor);
}
#line 2585 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 47: /* expr_literal ::= NULL */
#line 435 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy10 = p->alloc< yl_expr_null >( yymsp[0].minor.yy0->sloc );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 2593 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 48: /* expr_literal ::= TRUE */
#line 440 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy10 = p->alloc< yl_expr_bool >( yymsp[0].minor.yy0->sloc, true );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 2601 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 49: /* expr_literal ::= FALSE */
#line 445 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy10 = p->alloc< yl_expr_bool >( yymsp[0].minor.yy0->sloc, false );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 2609 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 50: /* expr_literal ::= NUMBER */
#line 450 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    double number = p->parse_number( yymsp[0].minor.yy0 );
                    yygotominor.yy10 = p->alloc< yl_expr_number >( yymsp[0].minor.yy0->sloc, number );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 2618 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 51: /* expr_literal ::= STRING */
#line 456 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy10 = p->alloc< yl_expr_string >(
                            yymsp[0].minor.yy0->sloc, yymsp[0].minor.yy0->text, yymsp[0].minor.yy0->size );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 2627 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 53: /* expr_suffix ::= expr_suffix INCREMENT */
#line 467 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yymsp[-1].minor.yy10 = p->lvalue( yymsp[-1].minor.yy10 );
                    yygotominor.yy10 = p->alloc< yl_expr_postop >(
                             yymsp[-1].minor.yy10->sloc, YL_ASTOP_POSTINC, yymsp[-1].minor.yy10 );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 2637 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 54: /* expr_suffix ::= expr_suffix DECREMENT */
#line 474 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yymsp[-1].minor.yy10 = p->lvalue( yymsp[-1].minor.yy10 );
                    yygotominor.yy10 = p->alloc< yl_expr_postop >(
                             yymsp[-1].minor.yy10->sloc, YL_ASTOP_POSTDEC, yymsp[-1].minor.yy10 );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 2647 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 56: /* expr_unary ::= PLUS expr_unary */
#line 486 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy10 = p->alloc< yl_expr_unary >(
                             yymsp[-1].minor.yy0->sloc, YL_ASTOP_POSITIVE, yymsp[0].minor.yy10 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 2656 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 57: /* expr_unary ::= MINUS expr_unary */
#line 492 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy10 = p->alloc< yl_expr_unary >(
                             yymsp[-1].minor.yy0->sloc, YL_ASTOP_NEGATIVE, yymsp[0].minor.yy10 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 2665 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 58: /* expr_unary ::= XMARK expr_unary */
#line 498 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy10 = p->alloc< yl_expr_unary >(
                             yymsp[-1].minor.yy0->sloc, YL_ASTOP_LOGICNOT, yymsp[0].minor.yy10 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 2674 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 59: /* expr_unary ::= TILDE expr_unary */
#line 504 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy10 = p->alloc< yl_expr_unary >(
                             yymsp[-1].minor.yy0->sloc, YL_ASTOP_BITNOT, yymsp[0].minor.yy10 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 2683 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 60: /* expr_unary ::= INCREMENT expr_unary */
#line 510 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yymsp[0].minor.yy10 = p->lvalue( yymsp[0].minor.yy10 );
                    yygotominor.yy10 = p->alloc< yl_expr_preop >(
                             yymsp[-1].minor.yy0->sloc, YL_ASTOP_PREINC, yymsp[0].minor.yy10 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 2693 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 61: /* expr_unary ::= DECREMENT expr_unary */
#line 517 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yymsp[0].minor.yy10 = p->lvalue( yymsp[0].minor.yy10 );
                    yygotominor.yy10 = p->alloc< yl_expr_preop >(
                             yymsp[-1].minor.yy0->sloc, YL_ASTOP_PREDEC, yymsp[0].minor.yy10 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 2703 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 63: /* expr_mul ::= expr_mul ASTERISK expr_unary */
#line 529 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy10 = p->alloc< yl_expr_binary >( yymsp[-2].minor.yy10->sloc,
                                    YL_ASTOP_MULTIPLY, yymsp[-2].minor.yy10, yymsp[0].minor.yy10 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 2712 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 64: /* expr_mul ::= expr_mul SOLIDUS expr_unary */
#line 535 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy10 = p->alloc< yl_expr_binary >( yymsp[-2].minor.yy10->sloc,
                                    YL_ASTOP_DIVIDE, yymsp[-2].minor.yy10, yymsp[0].minor.yy10 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 2721 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 65: /* expr_mul ::= expr_mul PERCENT expr_unary */
#line 541 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy10 = p->alloc< yl_expr_binary >( yymsp[-2].minor.yy10->sloc,
                                    YL_ASTOP_MODULUS, yymsp[-2].minor.yy10, yymsp[0].minor.yy10 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 2730 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 66: /* expr_mul ::= expr_mul TILDE expr_unary */
#line 547 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy10 = p->alloc< yl_expr_binary >( yymsp[-2].minor.yy10->sloc,
                                    YL_ASTOP_INTDIV, yymsp[-2].minor.yy10, yymsp[0].minor.yy10 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 2739 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 68: /* expr_add ::= expr_add PLUS expr_mul */
#line 558 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy10 = p->alloc< yl_expr_binary >( yymsp[-2].minor.yy10->sloc,
                                    YL_ASTOP_ADD, yymsp[-2].minor.yy10, yymsp[0].minor.yy10 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 2748 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 69: /* expr_add ::= expr_add MINUS expr_mul */
#line 564 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy10 = p->alloc< yl_expr_binary >( yymsp[-2].minor.yy10->sloc,
                                    YL_ASTOP_SUBTRACT, yymsp[-2].minor.yy10, yymsp[0].minor.yy10 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 2757 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 71: /* expr_shift ::= expr_shift LSHIFT expr_add */
#line 575 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy10 = p->alloc< yl_expr_binary >( yymsp[-2].minor.yy10->sloc,
                                    YL_ASTOP_LSHIFT, yymsp[-2].minor.yy10, yymsp[0].minor.yy10 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 2766 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 72: /* expr_shift ::= expr_shift LRSHIFT expr_add */
#line 581 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy10 = p->alloc< yl_expr_binary >( yymsp[-2].minor.yy10->sloc,
                                    YL_ASTOP_LRSHIFT, yymsp[-2].minor.yy10, yymsp[0].minor.yy10 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 2775 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 73: /* expr_shift ::= expr_shift ARSHIFT expr_add */
#line 587 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy10 = p->alloc< yl_expr_binary >( yymsp[-2].minor.yy10->sloc,
                                    YL_ASTOP_ARSHIFT, yymsp[-2].minor.yy10, yymsp[0].minor.yy10 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 2784 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 75: /* expr_bitand ::= expr_bitand AMPERSAND expr_shift */
#line 598 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy10 = p->alloc< yl_expr_binary >( yymsp[-2].minor.yy10->sloc,
                                    YL_ASTOP_BITAND, yymsp[-2].minor.yy10, yymsp[0].minor.yy10 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 2793 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 77: /* expr_bitxor ::= expr_bitxor CARET expr_bitand */
#line 609 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy10 = p->alloc< yl_expr_binary >( yymsp[-2].minor.yy10->sloc,
                                    YL_ASTOP_BITXOR, yymsp[-2].minor.yy10, yymsp[0].minor.yy10 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 2802 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 79: /* expr_bitor ::= expr_bitor VBAR expr_bitxor */
#line 620 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy10 = p->alloc< yl_expr_binary >( yymsp[-2].minor.yy10->sloc,
                                    YL_ASTOP_BITOR, yymsp[-2].minor.yy10, yymsp[0].minor.yy10 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 2811 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 81: /* expr_concat ::= expr_concat CONCATENATE expr_bitor */
#line 631 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy10 = p->alloc< yl_expr_binary >( yymsp[-2].minor.yy10->sloc,
                                    YL_ASTOP_CONCATENATE, yymsp[-2].minor.yy10, yymsp[0].minor.yy10 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 2820 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 83: /* expr_compare ::= expr_compare compare_op expr_concat */
#line 642 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy10 = p->compare( yymsp[-1].minor.yy184.token->sloc, yymsp[-1].minor.yy184.op, yymsp[-2].minor.yy10, yymsp[0].minor.yy10 );
                    p->destroy( yymsp[-1].minor.yy184.token );
                }
#line 2828 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 84: /* compare_op ::= EQUAL */
#line 648 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy184 = make_token_op( yymsp[0].minor.yy0, YL_ASTOP_EQUAL );
                }
#line 2835 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 85: /* compare_op ::= NOTEQUAL */
#line 652 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy184 = make_token_op( yymsp[0].minor.yy0, YL_ASTOP_NOTEQUAL );
                }
#line 2842 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 86: /* compare_op ::= LESS */
#line 656 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy184 = make_token_op( yymsp[0].minor.yy0, YL_ASTOP_LESS );
                }
#line 2849 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 87: /* compare_op ::= GREATER */
#line 660 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy184 = make_token_op( yymsp[0].minor.yy0, YL_ASTOP_GREATER );
                }
#line 2856 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 88: /* compare_op ::= LESSEQUAL */
#line 664 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy184 = make_token_op( yymsp[0].minor.yy0, YL_ASTOP_LESSEQUAL );
                }
#line 2863 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 89: /* compare_op ::= GREATEREQUAL */
#line 668 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy184 = make_token_op( yymsp[0].minor.yy0, YL_ASTOP_GREATEREQUAL );
                }
#line 2870 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 90: /* compare_op ::= IN */
#line 672 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy184 = make_token_op( yymsp[0].minor.yy0, YL_ASTOP_IN );
                }
#line 2877 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 91: /* compare_op ::= NOTIN */
#line 676 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy184 = make_token_op( yymsp[0].minor.yy0, YL_ASTOP_NOTIN );
                }
#line 2884 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 92: /* compare_op ::= IS */
#line 680 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy184 = make_token_op( yymsp[0].minor.yy0, YL_ASTOP_IS );
                }
#line 2891 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 93: /* compare_op ::= NOTIS */
#line 684 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy184 = make_token_op( yymsp[0].minor.yy0, YL_ASTOP_NOTIS );
                }
#line 2898 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 95: /* expr_and ::= expr_and LOGICAND expr_compare */
#line 694 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy10 = p->alloc< yl_expr_logical >( yymsp[-2].minor.yy10->sloc,
                                    YL_ASTOP_LOGICAND, yymsp[-2].minor.yy10, yymsp[0].minor.yy10 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 2907 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 97: /* expr_xor ::= expr_xor LOGICXOR expr_and */
#line 705 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy10 = p->alloc< yl_expr_logical >( yymsp[-2].minor.yy10->sloc,
                                    YL_ASTOP_LOGICXOR, yymsp[-2].minor.yy10, yymsp[0].minor.yy10 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 2916 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 99: /* expr_or ::= expr_or LOGICOR expr_xor */
#line 716 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy10 = p->alloc< yl_expr_logical >( yymsp[-2].minor.yy10->sloc,
                                    YL_ASTOP_LOGICOR, yymsp[-2].minor.yy10, yymsp[0].minor.yy10 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 2925 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 101: /* expr_nolbr ::= expr_or QMARK expr_value COLON expr_value */
#line 729 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy10 = p->alloc< yl_expr_qmark >(
                            yymsp[-4].minor.yy10->sloc, yymsp[-4].minor.yy10, yymsp[-2].minor.yy10, yymsp[0].minor.yy10 );
                  yy_destructor(yypParser,58,&yymsp[-3].minor);
  yy_destructor(yypParser,15,&yymsp[-1].minor);
}
#line 2935 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 102: /* expr_nolbr ::= LSQ RSQ */
#line 734 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy10 = p->alloc< yl_new_array >( yymsp[-1].minor.yy0->sloc );
                    p->destroy( yymsp[-1].minor.yy0 );
                  yy_destructor(yypParser,22,&yymsp[0].minor);
}
#line 2944 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 103: /* expr_nolbr ::= LSQ value_list RSQ */
#line 739 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy10 = yymsp[-1].minor.yy129;
                    yygotominor.yy10->sloc = yymsp[-2].minor.yy0->sloc;
                    p->destroy( yymsp[-2].minor.yy0 );
                  yy_destructor(yypParser,22,&yymsp[0].minor);
}
#line 2954 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 104: /* expr_nolbr ::= newobj_scope LBR object_decls RBR */
#line 745 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy10 = yymsp[-3].minor.yy37;
                    p->close_scope( yymsp[-3].minor.yy37->scope );
                  yy_destructor(yypParser,12,&yymsp[-2].minor);
  yy_destructor(yypParser,119,&yymsp[-1].minor);
  yy_destructor(yypParser,13,&yymsp[0].minor);
}
#line 2965 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 105: /* expr_nolbr ::= newf_scope LBR stmt_list RBR */
#line 750 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy10 = yymsp[-3].minor.yy116;
                    p->close_scope( yymsp[-3].minor.yy116->scope );
                  yy_destructor(yypParser,12,&yymsp[-2].minor);
  yy_destructor(yypParser,115,&yymsp[-1].minor);
  yy_destructor(yypParser,13,&yymsp[0].minor);
}
#line 2976 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 106: /* newobj_scope ::= COLON */
#line 756 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy37 = p->object( yymsp[0].minor.yy0->sloc, nullptr, nullptr );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 2984 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 107: /* newobj_scope ::= COLON COLON expr_simple */
#line 761 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy37 = p->object( yymsp[-2].minor.yy0->sloc, nullptr, yymsp[0].minor.yy10 );
                    p->destroy( yymsp[-2].minor.yy0 );
                  yy_destructor(yypParser,15,&yymsp[-1].minor);
}
#line 2993 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 108: /* newf_scope ::= QMARK LPN param_list RPN */
#line 767 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy116 = p->function( yymsp[-3].minor.yy0->sloc,
                                    nullptr, yymsp[-1].minor.yy149, false, false );
                    p->destroy( yymsp[-3].minor.yy0 );
                  yy_destructor(yypParser,7,&yymsp[-2].minor);
  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 3004 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 109: /* newf_scope ::= PERIOD QMARK LPN param_list RPN */
#line 773 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy116 = p->function( yymsp[-4].minor.yy0->sloc,
                                    nullptr, yymsp[-1].minor.yy149, false, true );
                    p->destroy( yymsp[-4].minor.yy0 );
                  yy_destructor(yypParser,58,&yymsp[-3].minor);
  yy_destructor(yypParser,7,&yymsp[-2].minor);
  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 3016 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 110: /* newf_scope ::= QMARK LPN param_list RPN YIELD */
#line 779 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy116 = p->function( yymsp[-4].minor.yy0->sloc,
                                    nullptr, yymsp[-2].minor.yy149, true, false );
                    p->destroy( yymsp[-4].minor.yy0 );
                  yy_destructor(yypParser,7,&yymsp[-3].minor);
  yy_destructor(yypParser,17,&yymsp[-1].minor);
  yy_destructor(yypParser,6,&yymsp[0].minor);
}
#line 3028 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 111: /* newf_scope ::= PERIOD QMARK LPN param_list RPN YIELD */
#line 785 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy116 = p->function( yymsp[-5].minor.yy0->sloc,
                                    nullptr, yymsp[-2].minor.yy149, true, true );
                    p->destroy( yymsp[-5].minor.yy0 );
                  yy_destructor(yypParser,58,&yymsp[-4].minor);
  yy_destructor(yypParser,7,&yymsp[-3].minor);
  yy_destructor(yypParser,17,&yymsp[-1].minor);
  yy_destructor(yypParser,6,&yymsp[0].minor);
}
#line 3041 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 113: /* expr_value ::= LBR RBR */
#line 798 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy10 = p->alloc< yl_new_table >( yymsp[-1].minor.yy0->sloc );
                    p->destroy( yymsp[-1].minor.yy0 );
                  yy_destructor(yypParser,13,&yymsp[0].minor);
}
#line 3050 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 114: /* expr_value ::= LBR keyval_list RBR */
#line 803 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy10 = yymsp[-1].minor.yy204;
                    yygotominor.yy10->sloc = yymsp[-2].minor.yy0->sloc;
                    p->destroy( yymsp[-2].minor.yy0 );
                  yy_destructor(yypParser,13,&yymsp[0].minor);
}
#line 3060 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 116: /* expr_lbody ::= expr_lbody COMMA expr_value */
      case 154: /* sexpr_lbody ::= sexpr_lbody COMMA expr_value */ yytestcase(yyruleno==154);
#line 814 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yl_expr_list* l;
                    yygotominor.yy10 = l = p->expr_list( yymsp[-2].minor.yy10 );
                    l->values.push_back( yymsp[0].minor.yy10 );
                  yy_destructor(yypParser,9,&yymsp[-1].minor);
}
#line 3071 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 117: /* expr_final ::= ELLIPSIS */
#line 822 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    p->check_vararg( yymsp[0].minor.yy0->sloc );
                    yygotominor.yy10 = p->alloc< yl_expr_vararg >( yymsp[0].minor.yy0->sloc );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3080 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 118: /* expr_final ::= expr_index ELLIPSIS */
      case 120: /* expr_final ::= expr_postfix ELLIPSIS */ yytestcase(yyruleno==120);
#line 828 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy10 = p->unpack( yymsp[-1].minor.yy10 );
                  yy_destructor(yypParser,10,&yymsp[0].minor);
}
#line 3089 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 119: /* expr_final ::= expr_index LSQ RSQ ELLIPSIS */
      case 121: /* expr_final ::= expr_postfix LSQ RSQ ELLIPSIS */ yytestcase(yyruleno==121);
#line 832 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy10 = p->alloc< yl_expr_unpack >( yymsp[-3].minor.yy10->sloc, yymsp[-3].minor.yy10 );
                  yy_destructor(yypParser,21,&yymsp[-2].minor);
  yy_destructor(yypParser,22,&yymsp[-1].minor);
  yy_destructor(yypParser,10,&yymsp[0].minor);
}
#line 3100 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 122: /* expr_list ::= expr_final */
#line 845 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yl_expr_list* l;
                    yygotominor.yy10 = l = p->alloc< yl_expr_list >( yymsp[0].minor.yy10->sloc );
                    l->final = yymsp[0].minor.yy10;
                }
#line 3109 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 124: /* expr_list ::= expr_lbody COMMA expr_final */
      case 157: /* sexpr_list ::= sexpr_lbody COMMA expr_final */ yytestcase(yyruleno==157);
#line 855 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yl_expr_list* l;
                    yygotominor.yy10 = l = p->expr_list( yymsp[-2].minor.yy10 );
                    l->final = yymsp[0].minor.yy10;
                  yy_destructor(yypParser,9,&yymsp[-1].minor);
}
#line 3120 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 125: /* arg_list ::= */
#line 862 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy229 = nullptr;
                }
#line 3127 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 126: /* arg_list ::= expr_list */
#line 866 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy229 = p->expr_list( yymsp[0].minor.yy10 );
                }
#line 3134 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 128: /* expr_assign ::= expr_lbody assign_op expr_assign */
      case 159: /* sexpr_assign ::= sexpr_lbody assign_op expr_assign */ yytestcase(yyruleno==159);
#line 875 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy10 = p->assign( yymsp[-1].minor.yy184.token->sloc, yymsp[-1].minor.yy184.op, yymsp[-2].minor.yy10, yymsp[0].minor.yy10 );
                    p->destroy( yymsp[-1].minor.yy184.token );
                }
#line 3143 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 129: /* assign_op ::= ASSIGN */
#line 882 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy184 = make_token_op( yymsp[0].minor.yy0, YL_ASTOP_ASSIGN );
                }
#line 3150 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 130: /* assign_op ::= MULASSIGN */
#line 886 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy184 = make_token_op( yymsp[0].minor.yy0, YL_ASTOP_MULASSIGN );
                }
#line 3157 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 131: /* assign_op ::= DIVASSIGN */
#line 890 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy184 = make_token_op( yymsp[0].minor.yy0, YL_ASTOP_DIVASSIGN );
                }
#line 3164 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 132: /* assign_op ::= MODASSIGN */
#line 894 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy184 = make_token_op( yymsp[0].minor.yy0, YL_ASTOP_MODASSIGN );
                }
#line 3171 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 133: /* assign_op ::= INTDIVASSIGN */
#line 898 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy184 = make_token_op( yymsp[0].minor.yy0, YL_ASTOP_INTDIVASSIGN );
                }
#line 3178 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 134: /* assign_op ::= ADDASSIGN */
#line 902 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy184 = make_token_op( yymsp[0].minor.yy0, YL_ASTOP_ADDASSIGN );
                }
#line 3185 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 135: /* assign_op ::= SUBASSIGN */
#line 906 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy184 = make_token_op( yymsp[0].minor.yy0, YL_ASTOP_SUBASSIGN );
                }
#line 3192 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 136: /* assign_op ::= LSHIFTASSIGN */
#line 910 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy184 = make_token_op( yymsp[0].minor.yy0, YL_ASTOP_LSHIFTASSIGN );
                }
#line 3199 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 137: /* assign_op ::= LRSHIFTASSIGN */
#line 914 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy184 = make_token_op( yymsp[0].minor.yy0, YL_ASTOP_LRSHIFTASSIGN );
                }
#line 3206 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 138: /* assign_op ::= ARSHIFTASSIGN */
#line 918 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy184 = make_token_op( yymsp[0].minor.yy0, YL_ASTOP_ARSHIFTASSIGN );
                }
#line 3213 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 139: /* assign_op ::= BITANDASSIGN */
#line 922 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy184 = make_token_op( yymsp[0].minor.yy0, YL_ASTOP_BITANDASSIGN );
                }
#line 3220 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 140: /* assign_op ::= BITXORASSIGN */
#line 926 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy184 = make_token_op( yymsp[0].minor.yy0, YL_ASTOP_BITXORASSIGN );
                }
#line 3227 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 141: /* assign_op ::= BITORASSIGN */
#line 930 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy184 = make_token_op( yymsp[0].minor.yy0, YL_ASTOP_BITORASSIGN );
                }
#line 3234 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 142: /* value_lbody ::= expr_value */
#line 936 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy129 = p->alloc< yl_new_array >( -1 );
                    yygotominor.yy129->values.push_back( yymsp[0].minor.yy10 );
                }
#line 3242 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 143: /* value_lbody ::= value_lbody COMMA expr_value */
#line 941 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy129 = yymsp[-2].minor.yy129;
                    yygotominor.yy129->values.push_back( yymsp[0].minor.yy10 );
                  yy_destructor(yypParser,9,&yymsp[-1].minor);
}
#line 3251 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 144: /* value_list ::= expr_final */
#line 947 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy129 = p->alloc< yl_new_array >( -1 );
                    yygotominor.yy129->final = yymsp[0].minor.yy10;
                }
#line 3259 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 145: /* value_list ::= expr_final COMMA */
#line 952 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy129 = p->alloc< yl_new_array >( -1 );
                    yygotominor.yy129->final = yymsp[-1].minor.yy10;
                  yy_destructor(yypParser,9,&yymsp[0].minor);
}
#line 3268 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 146: /* value_list ::= value_lbody */
#line 957 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy129 = yymsp[0].minor.yy129;
                }
#line 3275 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 147: /* value_list ::= value_lbody COMMA */
#line 961 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy129 = yymsp[-1].minor.yy129;
                  yy_destructor(yypParser,9,&yymsp[0].minor);
}
#line 3283 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 148: /* value_list ::= value_lbody COMMA expr_final */
#line 965 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy129 = yymsp[-2].minor.yy129;
                    yygotominor.yy129->final = yymsp[0].minor.yy10;
                  yy_destructor(yypParser,9,&yymsp[-1].minor);
}
#line 3292 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 149: /* keyval_lbody ::= expr_value COLON expr_value */
#line 972 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy204 = new yl_new_table( -1 );
                    yygotominor.yy204->elements.emplace_back( yymsp[-2].minor.yy10, yymsp[0].minor.yy10 );
                  yy_destructor(yypParser,15,&yymsp[-1].minor);
}
#line 3301 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 150: /* keyval_lbody ::= keyval_lbody COMMA expr_value COLON expr_value */
#line 978 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy204 = yymsp[-4].minor.yy204;
                    yygotominor.yy204->elements.emplace_back( yymsp[-2].minor.yy10, yymsp[0].minor.yy10 );
                  yy_destructor(yypParser,9,&yymsp[-3].minor);
  yy_destructor(yypParser,15,&yymsp[-1].minor);
}
#line 3311 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 151: /* keyval_list ::= keyval_lbody */
#line 984 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy204 = yymsp[0].minor.yy204;
                }
#line 3318 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 152: /* keyval_list ::= keyval_lbody COMMA */
#line 988 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy204 = yymsp[-1].minor.yy204;
                  yy_destructor(yypParser,9,&yymsp[0].minor);
}
#line 3326 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 161: /* condition ::= VAR name_list ASSIGN expr_list */
#line 1050 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy10 = p->varstmt( yymsp[-3].minor.yy0->sloc, yymsp[-2].minor.yy10, yymsp[0].minor.yy10 );
                    p->destroy( yymsp[-3].minor.yy0 );
                  yy_destructor(yypParser,19,&yymsp[-1].minor);
}
#line 3335 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 163: /* stmt_list ::= stmt_list SEMICOLON */
#line 1063 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                  yy_destructor(yypParser,115,&yymsp[-1].minor);
  yy_destructor(yypParser,16,&yymsp[0].minor);
}
#line 3343 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 164: /* stmt_list ::= stmt_list stmt */
#line 1066 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    p->statement( yymsp[0].minor.yy10 );
                  yy_destructor(yypParser,115,&yymsp[-1].minor);
}
#line 3351 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 165: /* stmt_list ::= stmt_list decl_object */
#line 1070 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                  yy_destructor(yypParser,115,&yymsp[-1].minor);
  yy_destructor(yypParser,118,&yymsp[0].minor);
}
#line 3359 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 166: /* stmt_list ::= stmt_list decl_func */
#line 1073 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                  yy_destructor(yypParser,115,&yymsp[-1].minor);
  yy_destructor(yypParser,123,&yymsp[0].minor);
}
#line 3367 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 167: /* stmt_list ::= stmt_list decl_var */
#line 1076 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                  yy_destructor(yypParser,115,&yymsp[-1].minor);
  yy_destructor(yypParser,124,&yymsp[0].minor);
}
#line 3375 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 168: /* stmt ::= stmt_block stmt_list RBR */
#line 1082 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy10 = yymsp[-2].minor.yy39;
                    p->close_scope( yymsp[-2].minor.yy39->scope );
                  yy_destructor(yypParser,115,&yymsp[-1].minor);
  yy_destructor(yypParser,13,&yymsp[0].minor);
}
#line 3385 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 170: /* stmt_block ::= LBR */
#line 1092 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy39 = p->alloc< yl_stmt_block >( yymsp[0].minor.yy0->sloc );
                    yygotominor.yy39->scope = p->block_scope( yygotominor.yy39 );
                    yygotominor.yy39->scope->block = yygotominor.yy39;
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3395 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 171: /* stmt_reuse ::= stmt_reblock stmt_list RBR */
#line 1102 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy10 = yymsp[-2].minor.yy39;
                  yy_destructor(yypParser,115,&yymsp[-1].minor);
  yy_destructor(yypParser,13,&yymsp[0].minor);
}
#line 3404 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 173: /* stmt_reblock ::= LBR */
#line 1111 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy39 = p->alloc< yl_stmt_block >( yymsp[0].minor.yy0->sloc );
                    p->get_scope()->block = yygotominor.yy39;
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3413 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 174: /* stmt_common ::= sexpr_assign SEMICOLON */
#line 1121 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy10 = yymsp[-1].minor.yy10;
                  yy_destructor(yypParser,16,&yymsp[0].minor);
}
#line 3421 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 175: /* stmt_common ::= stmt_if LPN condition RPN stmt */
#line 1125 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yymsp[-4].minor.yy227->condition = yymsp[-2].minor.yy10;
                    yymsp[-4].minor.yy227->iftrue    = yymsp[0].minor.yy10;
                    p->close_scope( yymsp[-4].minor.yy227->scope );
                    yygotominor.yy10 = yymsp[-4].minor.yy227;
                  yy_destructor(yypParser,7,&yymsp[-3].minor);
  yy_destructor(yypParser,17,&yymsp[-1].minor);
}
#line 3433 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 176: /* stmt_common ::= stmt_if LPN condition RPN stmt ELSE stmt */
#line 1133 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yymsp[-6].minor.yy227->condition = yymsp[-4].minor.yy10;
                    yymsp[-6].minor.yy227->iftrue    = yymsp[-2].minor.yy10;
                    yymsp[-6].minor.yy227->iffalse   = yymsp[0].minor.yy10;
                    p->close_scope( yymsp[-6].minor.yy227->scope );
                    yygotominor.yy10 = yymsp[-6].minor.yy227;
                  yy_destructor(yypParser,7,&yymsp[-5].minor);
  yy_destructor(yypParser,17,&yymsp[-3].minor);
  yy_destructor(yypParser,2,&yymsp[-1].minor);
}
#line 3447 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 177: /* stmt_common ::= stmt_switch LPN condition RPN stmt_reblock stmt_list RPN */
#line 1142 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yymsp[-6].minor.yy48->value     = yymsp[-4].minor.yy10;
                    yymsp[-6].minor.yy48->body      = yymsp[-2].minor.yy39;
                    p->close_switch( yymsp[-6].minor.yy48->scope );
                    yygotominor.yy10 = yymsp[-6].minor.yy48;
                  yy_destructor(yypParser,7,&yymsp[-5].minor);
  yy_destructor(yypParser,17,&yymsp[-3].minor);
  yy_destructor(yypParser,115,&yymsp[-1].minor);
  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 3461 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 178: /* stmt_common ::= stmt_while LPN condition RPN stmt_reuse */
#line 1150 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yymsp[-4].minor.yy273->condition = yymsp[-2].minor.yy10;
                    yymsp[-4].minor.yy273->body      = yymsp[0].minor.yy10;
                    p->close_scope( yymsp[-4].minor.yy273->scope );
                    yygotominor.yy10 = yymsp[-4].minor.yy273;
                  yy_destructor(yypParser,7,&yymsp[-3].minor);
  yy_destructor(yypParser,17,&yymsp[-1].minor);
}
#line 3473 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 179: /* stmt_common ::= stmt_doblock WHILE LPN expr_assign RPN SEMICOLON */
#line 1158 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yymsp[-5].minor.yy15->condition = yymsp[-2].minor.yy10;
                    p->close_scope( yymsp[-5].minor.yy15->scope );
                    yygotominor.yy10 = yymsp[-5].minor.yy15;
                  yy_destructor(yypParser,71,&yymsp[-4].minor);
  yy_destructor(yypParser,7,&yymsp[-3].minor);
  yy_destructor(yypParser,17,&yymsp[-1].minor);
  yy_destructor(yypParser,16,&yymsp[0].minor);
}
#line 3486 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 180: /* stmt_common ::= stmt_foreach stmt_reuse */
#line 1164 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yymsp[-1].minor.yy80->body      = yymsp[0].minor.yy10;
                    p->close_scope( yymsp[-1].minor.yy80->scope );
                    yygotominor.yy10 = yymsp[-1].minor.yy80;
                }
#line 3495 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 181: /* stmt_common ::= stmt_for stmt_reuse */
#line 1170 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yymsp[-1].minor.yy3->body      = yymsp[0].minor.yy10;
                    p->close_scope( yymsp[-1].minor.yy3->scope );
                    yygotominor.yy10 = yymsp[-1].minor.yy3;
                }
#line 3504 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 182: /* stmt_common ::= stmt_using LPN condition RPN stmt_reuse */
#line 1177 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yymsp[-4].minor.yy294->uvalue    = yymsp[-2].minor.yy10;
                    yymsp[-4].minor.yy294->body      = yymsp[0].minor.yy10;
                    p->close_scope( yymsp[-4].minor.yy294->scope );
                    yygotominor.yy10 = yymsp[-4].minor.yy294;
                  yy_destructor(yypParser,7,&yymsp[-3].minor);
  yy_destructor(yypParser,17,&yymsp[-1].minor);
}
#line 3516 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 184: /* stmt_common ::= DELETE expr_lbody SEMICOLON */
#line 1188 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy10 = p->delstmt( yymsp[-2].minor.yy0->sloc, yymsp[-1].minor.yy10 );
                    p->destroy( yymsp[-2].minor.yy0 );
                  yy_destructor(yypParser,16,&yymsp[0].minor);
}
#line 3525 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 185: /* stmt_common ::= CASE expr_value COLON */
#line 1193 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy10 = p->alloc< yl_stmt_case >( yymsp[-2].minor.yy0->sloc, yymsp[-1].minor.yy10 );
                    p->destroy( yymsp[-2].minor.yy0 );
                  yy_destructor(yypParser,15,&yymsp[0].minor);
}
#line 3534 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 186: /* stmt_common ::= DEFAULT COLON */
#line 1198 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy10 = p->alloc< yl_stmt_case >( yymsp[-1].minor.yy0->sloc, nullptr );
                    p->destroy( yymsp[-1].minor.yy0 );
                  yy_destructor(yypParser,15,&yymsp[0].minor);
}
#line 3543 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 187: /* stmt_common ::= CONTINUE SEMICOLON */
#line 1203 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yl_ast_scope* target = p->continue_target( yymsp[-1].minor.yy0->sloc );
                    yygotominor.yy10 = p->alloc< yl_stmt_continue >(
                                yymsp[-1].minor.yy0->sloc, p->get_scope(), target );
                    target->continued = true;
                    p->destroy( yymsp[-1].minor.yy0 );
                  yy_destructor(yypParser,16,&yymsp[0].minor);
}
#line 3555 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 188: /* stmt_common ::= BREAK SEMICOLON */
#line 1211 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yl_ast_scope* target = p->break_target( yymsp[-1].minor.yy0->sloc );
                    yygotominor.yy10 = p->alloc< yl_stmt_break >(
                                yymsp[-1].minor.yy0->sloc, p->get_scope(), target );
                    p->destroy( yymsp[-1].minor.yy0 );
                  yy_destructor(yypParser,16,&yymsp[0].minor);
}
#line 3566 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 189: /* stmt_common ::= RETURN SEMICOLON */
#line 1218 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy10 = p->alloc< yl_stmt_return >(
                                yymsp[-1].minor.yy0->sloc, p->get_scope(), nullptr );
                    p->destroy( yymsp[-1].minor.yy0 );
                  yy_destructor(yypParser,16,&yymsp[0].minor);
}
#line 3576 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 190: /* stmt_common ::= RETURN expr_list SEMICOLON */
#line 1224 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy10 = p->alloc< yl_stmt_return >(
                                yymsp[-2].minor.yy0->sloc, p->get_scope(), yymsp[-1].minor.yy10 );
                    p->destroy( yymsp[-2].minor.yy0 );
                  yy_destructor(yypParser,16,&yymsp[0].minor);
}
#line 3586 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 191: /* stmt_common ::= token_yield SEMICOLON */
#line 1230 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    p->check_yield( yymsp[-1].minor.yy252->sloc );
                    yygotominor.yy10 = p->alloc< yl_expr_yield >( yymsp[-1].minor.yy252->sloc, nullptr );
                    p->destroy( yymsp[-1].minor.yy252 );
                  yy_destructor(yypParser,16,&yymsp[0].minor);
}
#line 3596 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 192: /* stmt_common ::= token_yield expr_list SEMICOLON */
#line 1236 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy10 = p->alloc< yl_expr_yield >( yymsp[-2].minor.yy252->sloc, yymsp[-1].minor.yy10 );
                    p->destroy( yymsp[-2].minor.yy252 );
                  yy_destructor(yypParser,16,&yymsp[0].minor);
}
#line 3605 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 193: /* stmt_common ::= THROW expr_value SEMICOLON */
#line 1241 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy10 = p->alloc< yl_stmt_throw >( yymsp[-2].minor.yy0->sloc, yymsp[-1].minor.yy10 );
                    p->destroy( yymsp[-2].minor.yy0 );
                  yy_destructor(yypParser,16,&yymsp[0].minor);
}
#line 3614 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 194: /* stmt_if ::= IF */
#line 1250 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy227 = p->alloc< yl_stmt_if >( yymsp[0].minor.yy0->sloc );
                    yygotominor.yy227->scope = p->block_scope( yygotominor.yy227 );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3623 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 195: /* stmt_switch ::= SWITCH */
#line 1257 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy48 = p->alloc< yl_stmt_switch >( yymsp[0].minor.yy0->sloc );
                    yygotominor.yy48->scope = p->block_scope( yygotominor.yy48 );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3632 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 196: /* stmt_while ::= WHILE */
#line 1264 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy273 = p->alloc< yl_stmt_while >( yymsp[0].minor.yy0->sloc );
                    yygotominor.yy273->scope = p->block_scope( yygotominor.yy273 );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3641 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 197: /* stmt_do ::= DO */
#line 1271 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy15 = p->alloc< yl_stmt_do >( yymsp[0].minor.yy0->sloc );
                    yygotominor.yy15->scope = p->block_scope( yygotominor.yy15 );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3650 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 198: /* stmt_doblock ::= stmt_do stmt_reuse */
#line 1278 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yymsp[-1].minor.yy15->body = yymsp[0].minor.yy10;
                    p->dowhile( yymsp[-1].minor.yy15->scope );
                    yygotominor.yy15 = yymsp[-1].minor.yy15;
                }
#line 3659 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 199: /* scope_for ::= FOR */
#line 1285 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    // open scope before we know the kind of statement.
                    yygotominor.yy83 = make_token_scope( yymsp[0].minor.yy0, p->block_scope( nullptr ) );
                }
#line 3667 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 200: /* stmt_foreach ::= scope_for LPN expr_lbody COLON expr_value RPN */
#line 1292 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy80 = p->foreachstmt( yymsp[-5].minor.yy83.token->sloc,
                            yymsp[-5].minor.yy83.scope, yymsp[-3].minor.yy10, yymsp[-1].minor.yy10, false, false );
                    p->destroy( yymsp[-5].minor.yy83.token );
                  yy_destructor(yypParser,7,&yymsp[-4].minor);
  yy_destructor(yypParser,15,&yymsp[-2].minor);
  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 3679 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 201: /* stmt_foreach ::= scope_for LPN expr_lbody EACHKEY expr_value RPN */
#line 1299 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy80 = p->foreachstmt( yymsp[-5].minor.yy83.token->sloc,
                            yymsp[-5].minor.yy83.scope, yymsp[-3].minor.yy10, yymsp[-1].minor.yy10, false, true );
                    p->destroy( yymsp[-5].minor.yy83.token );
                  yy_destructor(yypParser,7,&yymsp[-4].minor);
  yy_destructor(yypParser,82,&yymsp[-2].minor);
  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 3691 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 202: /* stmt_foreach ::= scope_for LPN VAR name_list COLON expr_value RPN */
#line 1306 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy80 = p->foreachstmt( yymsp[-6].minor.yy83.token->sloc,
                            yymsp[-6].minor.yy83.scope, yymsp[-3].minor.yy10, yymsp[-1].minor.yy10, true, false );
                    p->destroy( yymsp[-6].minor.yy83.token );
                  yy_destructor(yypParser,7,&yymsp[-5].minor);
  yy_destructor(yypParser,18,&yymsp[-4].minor);
  yy_destructor(yypParser,15,&yymsp[-2].minor);
  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 3704 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 203: /* stmt_foreach ::= scope_for LPN VAR name_list EACHKEY expr_value RPN */
#line 1313 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy80 = p->foreachstmt( yymsp[-6].minor.yy83.token->sloc,
                            yymsp[-6].minor.yy83.scope, yymsp[-3].minor.yy10, yymsp[-1].minor.yy10, true, true );
                    p->destroy( yymsp[-6].minor.yy83.token );
                  yy_destructor(yypParser,7,&yymsp[-5].minor);
  yy_destructor(yypParser,18,&yymsp[-4].minor);
  yy_destructor(yypParser,82,&yymsp[-2].minor);
  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 3717 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 204: /* stmt_for ::= scope_for LPN for_cond SEMICOLON for_expr SEMICOLON for_expr RPN */
#line 1323 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy3 = p->alloc< yl_stmt_for >( yymsp[-7].minor.yy83.token->sloc );
                    yymsp[-7].minor.yy83.scope->node = yygotominor.yy3;
                    yygotominor.yy3->scope        = yymsp[-7].minor.yy83.scope;
                    yygotominor.yy3->init         = yymsp[-5].minor.yy10;
                    yygotominor.yy3->condition    = yymsp[-3].minor.yy10;
                    yygotominor.yy3->update       = yymsp[-1].minor.yy10;
                    p->destroy( yymsp[-7].minor.yy83.token );
                  yy_destructor(yypParser,7,&yymsp[-6].minor);
  yy_destructor(yypParser,16,&yymsp[-4].minor);
  yy_destructor(yypParser,16,&yymsp[-2].minor);
  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 3734 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 205: /* for_cond ::= */
      case 207: /* for_expr ::= */ yytestcase(yyruleno==207);
#line 1334 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy10 = nullptr;
                }
#line 3742 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 209: /* stmt_using ::= USING */
#line 1352 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy294 = p->alloc< yl_stmt_using >( yymsp[0].minor.yy0->sloc );
                    yygotominor.yy294->scope = p->block_scope( yygotominor.yy294 );
                    p->destroy( yymsp[0].minor.yy0 );
                }
#line 3751 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 210: /* stmt_try ::= try_catch */
#line 1362 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy10 = yymsp[0].minor.yy4;
                }
#line 3758 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 211: /* stmt_try ::= try_catch FINALLY stmt */
      case 212: /* stmt_try ::= try_block FINALLY stmt */ yytestcase(yyruleno==212);
#line 1366 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yymsp[-2].minor.yy4->fstmt = yymsp[0].minor.yy10;
                    yygotominor.yy10 = yymsp[-2].minor.yy4;
                  yy_destructor(yypParser,5,&yymsp[-1].minor);
}
#line 3768 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 213: /* try_block ::= TRY stmt */
#line 1377 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy4 = p->alloc< yl_stmt_try >( yymsp[-1].minor.yy0->sloc, yymsp[0].minor.yy10 );
                    p->destroy( yymsp[-1].minor.yy0 );
                }
#line 3776 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 214: /* try_catch ::= try_block stmt_catch stmt_reuse */
      case 215: /* try_catch ::= try_catch stmt_catch stmt_reuse */ yytestcase(yyruleno==215);
#line 1383 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yymsp[-1].minor.yy145->body = yymsp[0].minor.yy10;
                    p->close_scope( yymsp[-1].minor.yy145->scope );
                    yymsp[-2].minor.yy4->clist.push_back( yymsp[-1].minor.yy145 );
                    yygotominor.yy4 = yymsp[-2].minor.yy4;
                }
#line 3787 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 216: /* scope_catch ::= CATCH */
#line 1398 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    // open scope here ready for declarations.
                    yygotominor.yy83 = make_token_scope( yymsp[0].minor.yy0, p->block_scope( nullptr ) );
                }
#line 3795 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 217: /* stmt_catch ::= scope_catch LPN COLON expr_simple RPN */
#line 1404 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy145 = p->catchstmt( yymsp[-4].minor.yy83.token->sloc,
                            yymsp[-4].minor.yy83.scope, nullptr, yymsp[-1].minor.yy10, false );
                    p->destroy( yymsp[-4].minor.yy83.token );
                  yy_destructor(yypParser,7,&yymsp[-3].minor);
  yy_destructor(yypParser,15,&yymsp[-2].minor);
  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 3807 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 218: /* stmt_catch ::= scope_catch LPN expr_value COLON expr_simple RPN */
#line 1411 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy145 = p->catchstmt( yymsp[-5].minor.yy83.token->sloc,
                            yymsp[-5].minor.yy83.scope, yymsp[-3].minor.yy10, yymsp[-1].minor.yy10, false );
                    p->destroy( yymsp[-5].minor.yy83.token );
                  yy_destructor(yypParser,7,&yymsp[-4].minor);
  yy_destructor(yypParser,15,&yymsp[-2].minor);
  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 3819 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 219: /* stmt_catch ::= scope_catch LPN VAR name COLON expr_simple RPN */
#line 1418 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy145 = p->catchstmt( yymsp[-6].minor.yy83.token->sloc,
                            yymsp[-6].minor.yy83.scope, yymsp[-3].minor.yy96, yymsp[-1].minor.yy10, true );
                    p->destroy( yymsp[-6].minor.yy83.token );
                  yy_destructor(yypParser,7,&yymsp[-5].minor);
  yy_destructor(yypParser,18,&yymsp[-4].minor);
  yy_destructor(yypParser,15,&yymsp[-2].minor);
  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 3832 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 220: /* stmt_catch ::= scope_catch LPN expr_value RPN */
#line 1424 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy145 = p->catchstmt( yymsp[-3].minor.yy83.token->sloc,
                            yymsp[-3].minor.yy83.scope, yymsp[-1].minor.yy10, nullptr, false );
                    p->destroy( yymsp[-3].minor.yy83.token );
                  yy_destructor(yypParser,7,&yymsp[-2].minor);
  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 3843 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 221: /* stmt_catch ::= scope_catch LPN VAR name RPN */
#line 1430 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy145 = p->catchstmt( yymsp[-4].minor.yy83.token->sloc,
                            yymsp[-4].minor.yy83.scope, yymsp[-1].minor.yy96, nullptr, true );
                    p->destroy( yymsp[-4].minor.yy83.token );
                  yy_destructor(yypParser,7,&yymsp[-3].minor);
  yy_destructor(yypParser,18,&yymsp[-2].minor);
  yy_destructor(yypParser,17,&yymsp[0].minor);
}
#line 3855 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      case 222: /* token_yield ::= YIELD */
#line 1446 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"
{
                    yygotominor.yy252 = yymsp[0].minor.yy0;
                }
#line 3862 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
        break;
      default:
        break;
  };
  yygoto = yyRuleInfo[yyruleno].lhs;
  yysize = yyRuleInfo[yyruleno].nrhs;
  yypParser->yyidx -= yysize;
  yyact = yy_find_reduce_action(yymsp[-yysize].stateno,(YYCODETYPE)yygoto);
  if( yyact < YYNSTATE ){
#ifdef NDEBUG
    /* If we are not debugging and the reduce action popped at least
    ** one element off the stack, then we can push the new element back
    ** onto the stack here, and skip the stack overflow test in yy_shift().
    ** That gives a significant speed improvement. */
    if( yysize ){
      yypParser->yyidx++;
      yymsp -= yysize-1;
      yymsp->stateno = (YYACTIONTYPE)yyact;
      yymsp->major = (YYCODETYPE)yygoto;
      yymsp->minor = yygotominor;
    }else
#endif
    {
      yy_shift(yypParser,yyact,yygoto,&yygotominor);
    }
  }else{
    assert( yyact == YYNSTATE + YYNRULE + 1 );
    yy_accept(yypParser);
  }
}

/*
** The following code executes when the parse fails
*/
#ifndef YYNOERRORRECOVERY
static void yy_parse_failed(
  yyParser *yypParser           /* The parser */
){
  XecParseARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sFail!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser fails */
  XecParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}
#endif /* YYNOERRORRECOVERY */

/*
** The following code executes when a syntax error first occurs.
*/
static void yy_syntax_error(
  yyParser *yypParser,           /* The parser */
  int yymajor,                   /* The major type of the error token */
  YYMINORTYPE yyminor            /* The minor type of the error token */
){
  XecParseARG_FETCH;
#define TOKEN (yyminor.yy0)
#line 1458 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.y"

    p->get_root()->script->error( TOKEN->sloc,
            "unexpected %s", TOKEN->get_spelling().c_str() );
#line 3928 "../../toolbox/source/yl/lib/parser/yl_parser_lemon.cpp"
  XecParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/*
** The following is executed when the parser accepts
*/
static void yy_accept(
  yyParser *yypParser           /* The parser */
){
  XecParseARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sAccept!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser accepts */
  XecParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/* The main parser program.
** The first argument is a pointer to a structure obtained from
** "XecParseAlloc" which describes the current state of the parser.
** The second argument is the major token number.  The third is
** the minor token.  The fourth optional argument is whatever the
** user wants (and specified in the grammar) and is available for
** use by the action routines.
**
** Inputs:
** <ul>
** <li> A pointer to the parser (an opaque structure.)
** <li> The major token number.
** <li> The minor token number.
** <li> An option argument of a grammar-specified type.
** </ul>
**
** Outputs:
** None.
*/
void XecParse(
  void *yyp,                   /* The parser */
  int yymajor,                 /* The major token code number */
  XecParseTOKENTYPE yyminor       /* The value for the token */
  XecParseARG_PDECL               /* Optional %extra_argument parameter */
){
  YYMINORTYPE yyminorunion;
  int yyact;            /* The parser action. */
  int yyendofinput;     /* True if we are at the end of input */
#ifdef YYERRORSYMBOL
  int yyerrorhit = 0;   /* True if yymajor has invoked an error */
#endif
  yyParser *yypParser;  /* The parser */

  /* (re)initialize the parser, if necessary */
  yypParser = (yyParser*)yyp;
  if( yypParser->yyidx<0 ){
#if YYSTACKDEPTH<=0
    if( yypParser->yystksz <=0 ){
      /*memset(&yyminorunion, 0, sizeof(yyminorunion));*/
      yyminorunion = yyzerominor;
      yyStackOverflow(yypParser, &yyminorunion);
      return;
    }
#endif
    yypParser->yyidx = 0;
    yypParser->yyerrcnt = -1;
    yypParser->yystack[0].stateno = 0;
    yypParser->yystack[0].major = 0;
  }
  yyminorunion.yy0 = yyminor;
  yyendofinput = (yymajor==0);
  XecParseARG_STORE;

#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sInput %s\n",yyTracePrompt,yyTokenName[yymajor]);
  }
#endif

  do{
    yyact = yy_find_shift_action(yypParser,(YYCODETYPE)yymajor);
    if( yyact<YYNSTATE ){
      assert( !yyendofinput );  /* Impossible to shift the $ token */
      yy_shift(yypParser,yyact,yymajor,&yyminorunion);
      yypParser->yyerrcnt--;
      yymajor = YYNOCODE;
    }else if( yyact < YYNSTATE + YYNRULE ){
      yy_reduce(yypParser,yyact-YYNSTATE);
    }else{
      assert( yyact == YY_ERROR_ACTION );
#ifdef YYERRORSYMBOL
      int yymx;
#endif
#ifndef NDEBUG
      if( yyTraceFILE ){
        fprintf(yyTraceFILE,"%sSyntax Error!\n",yyTracePrompt);
      }
#endif
#ifdef YYERRORSYMBOL
      /* A syntax error has occurred.
      ** The response to an error depends upon whether or not the
      ** grammar defines an error token "ERROR".  
      **
      ** This is what we do if the grammar does define ERROR:
      **
      **  * Call the %syntax_error function.
      **
      **  * Begin popping the stack until we enter a state where
      **    it is legal to shift the error symbol, then shift
      **    the error symbol.
      **
      **  * Set the error count to three.
      **
      **  * Begin accepting and shifting new tokens.  No new error
      **    processing will occur until three tokens have been
      **    shifted successfully.
      **
      */
      if( yypParser->yyerrcnt<0 ){
        yy_syntax_error(yypParser,yymajor,yyminorunion);
      }
      yymx = yypParser->yystack[yypParser->yyidx].major;
      if( yymx==YYERRORSYMBOL || yyerrorhit ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE,"%sDiscard input token %s\n",
             yyTracePrompt,yyTokenName[yymajor]);
        }
#endif
        yy_destructor(yypParser, (YYCODETYPE)yymajor,&yyminorunion);
        yymajor = YYNOCODE;
      }else{
         while(
          yypParser->yyidx >= 0 &&
          yymx != YYERRORSYMBOL &&
          (yyact = yy_find_reduce_action(
                        yypParser->yystack[yypParser->yyidx].stateno,
                        YYERRORSYMBOL)) >= YYNSTATE
        ){
          yy_pop_parser_stack(yypParser);
        }
        if( yypParser->yyidx < 0 || yymajor==0 ){
          yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
          yy_parse_failed(yypParser);
          yymajor = YYNOCODE;
        }else if( yymx!=YYERRORSYMBOL ){
          YYMINORTYPE u2;
          u2.YYERRSYMDT = 0;
          yy_shift(yypParser,yyact,YYERRORSYMBOL,&u2);
        }
      }
      yypParser->yyerrcnt = 3;
      yyerrorhit = 1;
#elif defined(YYNOERRORRECOVERY)
      /* If the YYNOERRORRECOVERY macro is defined, then do not attempt to
      ** do any kind of error recovery.  Instead, simply invoke the syntax
      ** error routine and continue going as if nothing had happened.
      **
      ** Applications can set this macro (for example inside %include) if
      ** they intend to abandon the parse upon the first syntax error seen.
      */
      yy_syntax_error(yypParser,yymajor,yyminorunion);
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      yymajor = YYNOCODE;
      
#else  /* YYERRORSYMBOL is not defined */
      /* This is what we do if the grammar does not define ERROR:
      **
      **  * Report an error message, and throw away the input token.
      **
      **  * If the input token is $, then fail the parse.
      **
      ** As before, subsequent error messages are suppressed until
      ** three input tokens have been successfully shifted.
      */
      if( yypParser->yyerrcnt<=0 ){
        yy_syntax_error(yypParser,yymajor,yyminorunion);
      }
      yypParser->yyerrcnt = 3;
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      if( yyendofinput ){
        yy_parse_failed(yypParser);
      }
      yymajor = YYNOCODE;
#endif
    }
  }while( yymajor!=YYNOCODE && yypParser->yyidx>=0 );
  return;
}
