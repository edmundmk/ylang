
#line 1 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
//
//  ../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl
//
//  Created by Edmund Kapusniak on 14/03/2014.
//  Copyright (c) 2014 Edmund Kapusniak. All rights reserved.
//


/*
    ragel ../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl -o xec_parser_ragel.cpp -G2
*/


#include "xec_parser.h"
#include <stdint.h>
#include <intformat.h>
#include <unordered_map>
#include <region.h>
#include "xec_token.h"


void* XecParseAlloc( void* (*malloc)( size_t ) );
void  XecParse( void* yyp, int yymajor, xec_token* yyminor, xec_parser* p );
void  XecParseFree( void* p, void (*free)( void* ) );




#line 250 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"




#line 37 "xec_parser_ragel.cpp"
static const char _lexer_actions[] = {
	0, 1, 0, 1, 1, 1, 2, 1, 
	5, 1, 6, 1, 7, 1, 8, 1, 
	9, 1, 10, 1, 11, 1, 12, 1, 
	13, 1, 14, 1, 15, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 1, 24, 1, 
	25, 1, 26, 1, 27, 1, 28, 1, 
	29, 1, 30, 1, 31, 1, 32, 1, 
	33, 1, 38, 1, 39, 1, 40, 1, 
	41, 1, 42, 1, 43, 1, 44, 1, 
	45, 1, 46, 1, 47, 1, 48, 1, 
	49, 1, 50, 1, 51, 1, 52, 1, 
	53, 1, 54, 1, 55, 1, 56, 1, 
	57, 1, 58, 1, 59, 1, 60, 1, 
	61, 1, 62, 1, 63, 1, 64, 1, 
	65, 1, 66, 1, 67, 1, 68, 1, 
	69, 1, 70, 1, 71, 1, 72, 1, 
	73, 1, 74, 1, 75, 1, 76, 1, 
	77, 1, 78, 1, 79, 1, 80, 1, 
	81, 1, 82, 1, 83, 1, 84, 1, 
	85, 1, 86, 1, 87, 1, 88, 1, 
	89, 1, 90, 1, 91, 1, 92, 1, 
	93, 2, 0, 1, 2, 0, 40, 2, 
	1, 2, 2, 4, 94, 2, 34, 37, 
	2, 35, 37, 2, 36, 37, 2, 38, 
	1, 2, 39, 1, 2, 40, 1, 2, 
	41, 1, 2, 42, 1, 2, 43, 1, 
	2, 44, 1, 2, 45, 1, 2, 46, 
	1, 2, 47, 1, 2, 48, 1, 2, 
	49, 1, 2, 50, 1, 2, 51, 1, 
	2, 52, 1, 2, 53, 1, 2, 54, 
	1, 2, 55, 1, 2, 56, 1, 2, 
	57, 1, 2, 58, 1, 2, 59, 1, 
	2, 60, 1, 2, 61, 1, 2, 62, 
	1, 2, 63, 1, 2, 64, 1, 2, 
	65, 1, 2, 66, 1, 2, 67, 1, 
	2, 68, 1, 2, 69, 1, 2, 70, 
	1, 2, 71, 1, 2, 72, 1, 2, 
	73, 1, 2, 74, 1, 2, 75, 1, 
	2, 76, 1, 2, 77, 1, 2, 78, 
	1, 2, 79, 1, 2, 80, 1, 2, 
	81, 1, 2, 82, 1, 2, 83, 1, 
	2, 84, 1, 2, 85, 1, 2, 86, 
	1, 2, 87, 1, 2, 88, 1, 2, 
	89, 1, 2, 90, 1, 2, 91, 1, 
	2, 92, 1, 2, 93, 1, 3, 0, 
	1, 2, 3, 0, 4, 94, 3, 0, 
	40, 1, 3, 3, 4, 94, 3, 39, 
	1, 2, 3, 40, 1, 2, 3, 41, 
	1, 2, 3, 42, 1, 2, 3, 43, 
	1, 2, 3, 44, 1, 2, 3, 45, 
	1, 2, 3, 46, 1, 2, 3, 47, 
	1, 2, 3, 48, 1, 2, 3, 49, 
	1, 2, 3, 50, 1, 2, 3, 51, 
	1, 2, 3, 52, 1, 2, 3, 53, 
	1, 2, 3, 54, 1, 2, 3, 55, 
	1, 2, 3, 56, 1, 2, 3, 57, 
	1, 2, 3, 58, 1, 2, 3, 59, 
	1, 2, 3, 60, 1, 2, 3, 61, 
	1, 2, 3, 62, 1, 2, 3, 63, 
	1, 2, 3, 64, 1, 2, 3, 65, 
	1, 2, 3, 66, 1, 2, 3, 67, 
	1, 2, 3, 68, 1, 2, 3, 69, 
	1, 2, 3, 70, 1, 2, 3, 71, 
	1, 2, 3, 72, 1, 2, 3, 73, 
	1, 2, 3, 74, 1, 2, 3, 75, 
	1, 2, 3, 76, 1, 2, 3, 77, 
	1, 2, 3, 78, 1, 2, 3, 79, 
	1, 2, 3, 80, 1, 2, 3, 81, 
	1, 2, 3, 82, 1, 2, 3, 83, 
	1, 2, 3, 84, 1, 2, 3, 85, 
	1, 2, 3, 86, 1, 2, 3, 87, 
	1, 2, 3, 88, 1, 2, 3, 89, 
	1, 2, 3, 90, 1, 2, 3, 91, 
	1, 2, 3, 92, 1, 2, 3, 93, 
	1, 2, 4, 0, 3, 4, 94, 4, 
	0, 40, 1, 2
};

static const short _lexer_key_offsets[] = {
	0, 0, 4, 7, 10, 13, 17, 19, 
	21, 22, 26, 28, 34, 40, 42, 45, 
	48, 51, 55, 57, 67, 73, 79, 85, 
	91, 97, 103, 109, 115, 117, 154, 191, 
	228, 266, 303, 340, 377, 414, 451, 488, 
	525, 562, 599, 636, 673, 710, 747, 784, 
	821, 858, 895, 932, 972, 1010, 1047, 1085, 
	1122, 1159, 1196, 1233, 1270, 1307, 1344, 1381, 
	1418, 1454, 1491, 1528, 1565, 1602, 1639, 1676, 
	1713, 1750, 1787, 1824, 1861, 1898, 1935, 1972, 
	2009, 2046, 2083, 2119, 2156, 2198, 2240, 2277, 
	2314, 2351, 2388, 2425, 2462, 2499, 2536
};

static const unsigned char _lexer_trans_keys[] = {
	10u, 13u, 34u, 92u, 10u, 13u, 42u, 10u, 
	13u, 42u, 10u, 13u, 42u, 10u, 13u, 42u, 
	47u, 10u, 13u, 48u, 57u, 62u, 43u, 45u, 
	48u, 57u, 48u, 57u, 48u, 57u, 65u, 70u, 
	97u, 102u, 48u, 57u, 65u, 70u, 97u, 102u, 
	42u, 47u, 10u, 13u, 42u, 10u, 13u, 42u, 
	10u, 13u, 42u, 10u, 13u, 42u, 47u, 10u, 
	13u, 34u, 47u, 92u, 98u, 102u, 110u, 114u, 
	116u, 117u, 120u, 48u, 57u, 65u, 70u, 97u, 
	102u, 48u, 57u, 65u, 70u, 97u, 102u, 48u, 
	57u, 65u, 70u, 97u, 102u, 48u, 57u, 65u, 
	70u, 97u, 102u, 48u, 57u, 65u, 70u, 97u, 
	102u, 48u, 57u, 65u, 70u, 97u, 102u, 48u, 
	57u, 65u, 70u, 97u, 102u, 48u, 57u, 65u, 
	70u, 97u, 102u, 110u, 115u, 9u, 10u, 13u, 
	32u, 33u, 34u, 37u, 38u, 40u, 41u, 42u, 
	43u, 44u, 45u, 46u, 47u, 48u, 58u, 59u, 
	60u, 61u, 62u, 63u, 91u, 93u, 94u, 95u, 
	123u, 124u, 125u, 126u, 49u, 57u, 65u, 90u, 
	97u, 122u, 9u, 10u, 13u, 32u, 33u, 34u, 
	37u, 38u, 40u, 41u, 42u, 43u, 44u, 45u, 
	46u, 47u, 48u, 58u, 59u, 60u, 61u, 62u, 
	63u, 91u, 93u, 94u, 95u, 123u, 124u, 125u, 
	126u, 49u, 57u, 65u, 90u, 97u, 122u, 9u, 
	10u, 13u, 32u, 33u, 34u, 37u, 38u, 40u, 
	41u, 42u, 43u, 44u, 45u, 46u, 47u, 48u, 
	58u, 59u, 60u, 61u, 62u, 63u, 91u, 93u, 
	94u, 95u, 123u, 124u, 125u, 126u, 49u, 57u, 
	65u, 90u, 97u, 122u, 9u, 10u, 13u, 32u, 
	33u, 34u, 37u, 38u, 40u, 41u, 42u, 43u, 
	44u, 45u, 46u, 47u, 48u, 58u, 59u, 60u, 
	61u, 62u, 63u, 91u, 93u, 94u, 95u, 105u, 
	123u, 124u, 125u, 126u, 49u, 57u, 65u, 90u, 
	97u, 122u, 9u, 10u, 13u, 32u, 33u, 34u, 
	37u, 38u, 40u, 41u, 42u, 43u, 44u, 45u, 
	46u, 47u, 48u, 58u, 59u, 60u, 61u, 62u, 
	63u, 91u, 93u, 94u, 95u, 123u, 124u, 125u, 
	126u, 49u, 57u, 65u, 90u, 97u, 122u, 9u, 
	10u, 13u, 32u, 33u, 34u, 37u, 38u, 40u, 
	41u, 42u, 43u, 44u, 45u, 46u, 47u, 48u, 
	58u, 59u, 60u, 61u, 62u, 63u, 91u, 93u, 
	94u, 95u, 123u, 124u, 125u, 126u, 49u, 57u, 
	65u, 90u, 97u, 122u, 9u, 10u, 13u, 32u, 
	33u, 34u, 37u, 38u, 40u, 41u, 42u, 43u, 
	44u, 45u, 46u, 47u, 48u, 58u, 59u, 60u, 
	61u, 62u, 63u, 91u, 93u, 94u, 95u, 123u, 
	124u, 125u, 126u, 49u, 57u, 65u, 90u, 97u, 
	122u, 9u, 10u, 13u, 32u, 33u, 34u, 37u, 
	38u, 40u, 41u, 42u, 43u, 44u, 45u, 46u, 
	47u, 48u, 58u, 59u, 60u, 61u, 62u, 63u, 
	91u, 93u, 94u, 95u, 123u, 124u, 125u, 126u, 
	49u, 57u, 65u, 90u, 97u, 122u, 9u, 10u, 
	13u, 32u, 33u, 34u, 37u, 38u, 40u, 41u, 
	42u, 43u, 44u, 45u, 46u, 47u, 48u, 58u, 
	59u, 60u, 61u, 62u, 63u, 91u, 93u, 94u, 
	95u, 123u, 124u, 125u, 126u, 49u, 57u, 65u, 
	90u, 97u, 122u, 9u, 10u, 13u, 32u, 33u, 
	34u, 37u, 38u, 40u, 41u, 42u, 43u, 44u, 
	45u, 46u, 47u, 48u, 58u, 59u, 60u, 61u, 
	62u, 63u, 91u, 93u, 94u, 95u, 123u, 124u, 
	125u, 126u, 49u, 57u, 65u, 90u, 97u, 122u, 
	9u, 10u, 13u, 32u, 33u, 34u, 37u, 38u, 
	40u, 41u, 42u, 43u, 44u, 45u, 46u, 47u, 
	48u, 58u, 59u, 60u, 61u, 62u, 63u, 91u, 
	93u, 94u, 95u, 123u, 124u, 125u, 126u, 49u, 
	57u, 65u, 90u, 97u, 122u, 9u, 10u, 13u, 
	32u, 33u, 34u, 37u, 38u, 40u, 41u, 42u, 
	43u, 44u, 45u, 46u, 47u, 48u, 58u, 59u, 
	60u, 61u, 62u, 63u, 91u, 93u, 94u, 95u, 
	123u, 124u, 125u, 126u, 49u, 57u, 65u, 90u, 
	97u, 122u, 9u, 10u, 13u, 32u, 33u, 34u, 
	37u, 38u, 40u, 41u, 42u, 43u, 44u, 45u, 
	46u, 47u, 48u, 58u, 59u, 60u, 61u, 62u, 
	63u, 91u, 93u, 94u, 95u, 123u, 124u, 125u, 
	126u, 49u, 57u, 65u, 90u, 97u, 122u, 9u, 
	10u, 13u, 32u, 33u, 34u, 37u, 38u, 40u, 
	41u, 42u, 43u, 44u, 45u, 46u, 47u, 48u, 
	58u, 59u, 60u, 61u, 62u, 63u, 91u, 93u, 
	94u, 95u, 123u, 124u, 125u, 126u, 49u, 57u, 
	65u, 90u, 97u, 122u, 9u, 10u, 13u, 32u, 
	33u, 34u, 37u, 38u, 40u, 41u, 42u, 43u, 
	44u, 45u, 46u, 47u, 48u, 58u, 59u, 60u, 
	61u, 62u, 63u, 91u, 93u, 94u, 95u, 123u, 
	124u, 125u, 126u, 49u, 57u, 65u, 90u, 97u, 
	122u, 9u, 10u, 13u, 32u, 33u, 34u, 37u, 
	38u, 40u, 41u, 42u, 43u, 44u, 45u, 46u, 
	47u, 48u, 58u, 59u, 60u, 61u, 62u, 63u, 
	91u, 93u, 94u, 95u, 123u, 124u, 125u, 126u, 
	49u, 57u, 65u, 90u, 97u, 122u, 9u, 10u, 
	13u, 32u, 33u, 34u, 37u, 38u, 40u, 41u, 
	42u, 43u, 44u, 45u, 46u, 47u, 48u, 58u, 
	59u, 60u, 61u, 62u, 63u, 91u, 93u, 94u, 
	95u, 123u, 124u, 125u, 126u, 49u, 57u, 65u, 
	90u, 97u, 122u, 9u, 10u, 13u, 32u, 33u, 
	34u, 37u, 38u, 40u, 41u, 42u, 43u, 44u, 
	45u, 46u, 47u, 48u, 58u, 59u, 60u, 61u, 
	62u, 63u, 91u, 93u, 94u, 95u, 123u, 124u, 
	125u, 126u, 49u, 57u, 65u, 90u, 97u, 122u, 
	9u, 10u, 13u, 32u, 33u, 34u, 37u, 38u, 
	40u, 41u, 42u, 43u, 44u, 45u, 46u, 47u, 
	48u, 58u, 59u, 60u, 61u, 62u, 63u, 91u, 
	93u, 94u, 95u, 123u, 124u, 125u, 126u, 49u, 
	57u, 65u, 90u, 97u, 122u, 9u, 10u, 13u, 
	32u, 33u, 34u, 37u, 38u, 40u, 41u, 42u, 
	43u, 44u, 45u, 46u, 47u, 48u, 58u, 59u, 
	60u, 61u, 62u, 63u, 91u, 93u, 94u, 95u, 
	123u, 124u, 125u, 126u, 49u, 57u, 65u, 90u, 
	97u, 122u, 9u, 10u, 13u, 32u, 33u, 34u, 
	37u, 38u, 40u, 41u, 42u, 43u, 44u, 45u, 
	46u, 47u, 48u, 58u, 59u, 60u, 61u, 62u, 
	63u, 91u, 93u, 94u, 95u, 123u, 124u, 125u, 
	126u, 49u, 57u, 65u, 90u, 97u, 122u, 9u, 
	10u, 13u, 32u, 33u, 34u, 37u, 38u, 40u, 
	41u, 42u, 43u, 44u, 45u, 46u, 47u, 48u, 
	58u, 59u, 60u, 61u, 62u, 63u, 91u, 93u, 
	94u, 95u, 123u, 124u, 125u, 126u, 49u, 57u, 
	65u, 90u, 97u, 122u, 9u, 10u, 13u, 32u, 
	33u, 34u, 37u, 38u, 40u, 41u, 42u, 43u, 
	44u, 45u, 46u, 47u, 48u, 58u, 59u, 60u, 
	61u, 62u, 63u, 69u, 91u, 93u, 94u, 95u, 
	101u, 120u, 123u, 124u, 125u, 126u, 49u, 57u, 
	65u, 90u, 97u, 122u, 9u, 10u, 13u, 32u, 
	33u, 34u, 37u, 38u, 40u, 41u, 42u, 43u, 
	44u, 45u, 46u, 47u, 58u, 59u, 60u, 61u, 
	62u, 63u, 69u, 91u, 93u, 94u, 95u, 101u, 
	123u, 124u, 125u, 126u, 48u, 57u, 65u, 90u, 
	97u, 122u, 9u, 10u, 13u, 32u, 33u, 34u, 
	37u, 38u, 40u, 41u, 42u, 43u, 44u, 45u, 
	46u, 47u, 48u, 58u, 59u, 60u, 61u, 62u, 
	63u, 91u, 93u, 94u, 95u, 123u, 124u, 125u, 
	126u, 49u, 57u, 65u, 90u, 97u, 122u, 9u, 
	10u, 13u, 32u, 33u, 34u, 37u, 38u, 40u, 
	41u, 42u, 43u, 44u, 45u, 46u, 47u, 58u, 
	59u, 60u, 61u, 62u, 63u, 69u, 91u, 93u, 
	94u, 95u, 101u, 123u, 124u, 125u, 126u, 48u, 
	57u, 65u, 90u, 97u, 122u, 9u, 10u, 13u, 
	32u, 33u, 34u, 37u, 38u, 40u, 41u, 42u, 
	43u, 44u, 45u, 46u, 47u, 48u, 58u, 59u, 
	60u, 61u, 62u, 63u, 91u, 93u, 94u, 95u, 
	123u, 124u, 125u, 126u, 49u, 57u, 65u, 90u, 
	97u, 122u, 9u, 10u, 13u, 32u, 33u, 34u, 
	37u, 38u, 40u, 41u, 42u, 43u, 44u, 45u, 
	46u, 47u, 48u, 58u, 59u, 60u, 61u, 62u, 
	63u, 91u, 93u, 94u, 95u, 123u, 124u, 125u, 
	126u, 49u, 57u, 65u, 90u, 97u, 122u, 9u, 
	10u, 13u, 32u, 33u, 34u, 37u, 38u, 40u, 
	41u, 42u, 43u, 44u, 45u, 46u, 47u, 48u, 
	58u, 59u, 60u, 61u, 62u, 63u, 91u, 93u, 
	94u, 95u, 123u, 124u, 125u, 126u, 49u, 57u, 
	65u, 90u, 97u, 122u, 9u, 10u, 13u, 32u, 
	33u, 34u, 37u, 38u, 40u, 41u, 42u, 43u, 
	44u, 45u, 46u, 47u, 48u, 58u, 59u, 60u, 
	61u, 62u, 63u, 91u, 93u, 94u, 95u, 123u, 
	124u, 125u, 126u, 49u, 57u, 65u, 90u, 97u, 
	122u, 9u, 10u, 13u, 32u, 33u, 34u, 37u, 
	38u, 40u, 41u, 42u, 43u, 44u, 45u, 46u, 
	47u, 48u, 58u, 59u, 60u, 61u, 62u, 63u, 
	91u, 93u, 94u, 95u, 123u, 124u, 125u, 126u, 
	49u, 57u, 65u, 90u, 97u, 122u, 9u, 10u, 
	13u, 32u, 33u, 34u, 37u, 38u, 40u, 41u, 
	42u, 43u, 44u, 45u, 46u, 47u, 48u, 58u, 
	59u, 60u, 61u, 62u, 63u, 91u, 93u, 94u, 
	95u, 123u, 124u, 125u, 126u, 49u, 57u, 65u, 
	90u, 97u, 122u, 9u, 10u, 13u, 32u, 33u, 
	34u, 37u, 38u, 40u, 41u, 42u, 43u, 44u, 
	45u, 46u, 47u, 48u, 58u, 59u, 60u, 61u, 
	62u, 63u, 91u, 93u, 94u, 95u, 123u, 124u, 
	125u, 126u, 49u, 57u, 65u, 90u, 97u, 122u, 
	9u, 10u, 13u, 32u, 33u, 34u, 37u, 38u, 
	40u, 41u, 42u, 43u, 44u, 45u, 46u, 47u, 
	48u, 58u, 59u, 60u, 61u, 62u, 63u, 91u, 
	93u, 94u, 95u, 123u, 124u, 125u, 126u, 49u, 
	57u, 65u, 90u, 97u, 122u, 9u, 10u, 13u, 
	32u, 33u, 34u, 37u, 38u, 40u, 41u, 42u, 
	43u, 44u, 45u, 46u, 47u, 48u, 58u, 59u, 
	60u, 61u, 62u, 63u, 91u, 93u, 94u, 95u, 
	123u, 124u, 125u, 126u, 49u, 57u, 65u, 90u, 
	97u, 122u, 9u, 10u, 13u, 32u, 33u, 34u, 
	37u, 38u, 40u, 41u, 42u, 43u, 44u, 45u, 
	46u, 47u, 58u, 59u, 60u, 61u, 62u, 63u, 
	91u, 93u, 94u, 95u, 123u, 124u, 125u, 126u, 
	48u, 57u, 65u, 90u, 97u, 122u, 9u, 10u, 
	13u, 32u, 33u, 34u, 37u, 38u, 40u, 41u, 
	42u, 43u, 44u, 45u, 46u, 47u, 48u, 58u, 
	59u, 60u, 61u, 62u, 63u, 91u, 93u, 94u, 
	95u, 123u, 124u, 125u, 126u, 49u, 57u, 65u, 
	90u, 97u, 122u, 9u, 10u, 13u, 32u, 33u, 
	34u, 37u, 38u, 40u, 41u, 42u, 43u, 44u, 
	45u, 46u, 47u, 48u, 58u, 59u, 60u, 61u, 
	62u, 63u, 91u, 93u, 94u, 95u, 123u, 124u, 
	125u, 126u, 49u, 57u, 65u, 90u, 97u, 122u, 
	9u, 10u, 13u, 32u, 33u, 34u, 37u, 38u, 
	40u, 41u, 42u, 43u, 44u, 45u, 46u, 47u, 
	48u, 58u, 59u, 60u, 61u, 62u, 63u, 91u, 
	93u, 94u, 95u, 123u, 124u, 125u, 126u, 49u, 
	57u, 65u, 90u, 97u, 122u, 9u, 10u, 13u, 
	32u, 33u, 34u, 37u, 38u, 40u, 41u, 42u, 
	43u, 44u, 45u, 46u, 47u, 48u, 58u, 59u, 
	60u, 61u, 62u, 63u, 91u, 93u, 94u, 95u, 
	123u, 124u, 125u, 126u, 49u, 57u, 65u, 90u, 
	97u, 122u, 9u, 10u, 13u, 32u, 33u, 34u, 
	37u, 38u, 40u, 41u, 42u, 43u, 44u, 45u, 
	46u, 47u, 48u, 58u, 59u, 60u, 61u, 62u, 
	63u, 91u, 93u, 94u, 95u, 123u, 124u, 125u, 
	126u, 49u, 57u, 65u, 90u, 97u, 122u, 9u, 
	10u, 13u, 32u, 33u, 34u, 37u, 38u, 40u, 
	41u, 42u, 43u, 44u, 45u, 46u, 47u, 48u, 
	58u, 59u, 60u, 61u, 62u, 63u, 91u, 93u, 
	94u, 95u, 123u, 124u, 125u, 126u, 49u, 57u, 
	65u, 90u, 97u, 122u, 9u, 10u, 13u, 32u, 
	33u, 34u, 37u, 38u, 40u, 41u, 42u, 43u, 
	44u, 45u, 46u, 47u, 48u, 58u, 59u, 60u, 
	61u, 62u, 63u, 91u, 93u, 94u, 95u, 123u, 
	124u, 125u, 126u, 49u, 57u, 65u, 90u, 97u, 
	122u, 9u, 10u, 13u, 32u, 33u, 34u, 37u, 
	38u, 40u, 41u, 42u, 43u, 44u, 45u, 46u, 
	47u, 48u, 58u, 59u, 60u, 61u, 62u, 63u, 
	91u, 93u, 94u, 95u, 123u, 124u, 125u, 126u, 
	49u, 57u, 65u, 90u, 97u, 122u, 9u, 10u, 
	13u, 32u, 33u, 34u, 37u, 38u, 40u, 41u, 
	42u, 43u, 44u, 45u, 46u, 47u, 48u, 58u, 
	59u, 60u, 61u, 62u, 63u, 91u, 93u, 94u, 
	95u, 123u, 124u, 125u, 126u, 49u, 57u, 65u, 
	90u, 97u, 122u, 9u, 10u, 13u, 32u, 33u, 
	34u, 37u, 38u, 40u, 41u, 42u, 43u, 44u, 
	45u, 46u, 47u, 48u, 58u, 59u, 60u, 61u, 
	62u, 63u, 91u, 93u, 94u, 95u, 123u, 124u, 
	125u, 126u, 49u, 57u, 65u, 90u, 97u, 122u, 
	9u, 10u, 13u, 32u, 33u, 34u, 37u, 38u, 
	40u, 41u, 42u, 43u, 44u, 45u, 46u, 47u, 
	48u, 58u, 59u, 60u, 61u, 62u, 63u, 91u, 
	93u, 94u, 95u, 123u, 124u, 125u, 126u, 49u, 
	57u, 65u, 90u, 97u, 122u, 9u, 10u, 13u, 
	32u, 33u, 34u, 37u, 38u, 40u, 41u, 42u, 
	43u, 44u, 45u, 46u, 47u, 48u, 58u, 59u, 
	60u, 61u, 62u, 63u, 91u, 93u, 94u, 95u, 
	123u, 124u, 125u, 126u, 49u, 57u, 65u, 90u, 
	97u, 122u, 9u, 10u, 13u, 32u, 33u, 34u, 
	37u, 38u, 40u, 41u, 42u, 43u, 44u, 45u, 
	46u, 47u, 48u, 58u, 59u, 60u, 61u, 62u, 
	63u, 91u, 93u, 94u, 95u, 123u, 124u, 125u, 
	126u, 49u, 57u, 65u, 90u, 97u, 122u, 9u, 
	10u, 13u, 32u, 33u, 34u, 37u, 38u, 40u, 
	41u, 42u, 43u, 44u, 45u, 46u, 47u, 48u, 
	58u, 59u, 60u, 61u, 62u, 63u, 91u, 93u, 
	94u, 95u, 123u, 124u, 125u, 126u, 49u, 57u, 
	65u, 90u, 97u, 122u, 9u, 10u, 13u, 32u, 
	33u, 34u, 37u, 38u, 40u, 41u, 42u, 43u, 
	44u, 45u, 46u, 47u, 48u, 58u, 59u, 60u, 
	61u, 62u, 63u, 91u, 93u, 94u, 95u, 123u, 
	124u, 125u, 126u, 49u, 57u, 65u, 90u, 97u, 
	122u, 9u, 10u, 13u, 32u, 33u, 34u, 37u, 
	38u, 40u, 41u, 42u, 43u, 44u, 45u, 46u, 
	47u, 48u, 58u, 59u, 60u, 61u, 62u, 63u, 
	91u, 93u, 94u, 95u, 123u, 124u, 125u, 126u, 
	49u, 57u, 65u, 90u, 97u, 122u, 9u, 10u, 
	13u, 32u, 33u, 34u, 37u, 38u, 40u, 41u, 
	42u, 43u, 44u, 45u, 46u, 47u, 48u, 58u, 
	59u, 60u, 61u, 62u, 63u, 91u, 93u, 94u, 
	95u, 123u, 124u, 125u, 126u, 49u, 57u, 65u, 
	90u, 97u, 122u, 9u, 10u, 13u, 32u, 33u, 
	34u, 37u, 38u, 40u, 41u, 42u, 43u, 44u, 
	45u, 46u, 47u, 58u, 59u, 60u, 61u, 62u, 
	63u, 91u, 93u, 94u, 95u, 123u, 124u, 125u, 
	126u, 48u, 57u, 65u, 90u, 97u, 122u, 9u, 
	10u, 13u, 32u, 33u, 34u, 37u, 38u, 40u, 
	41u, 42u, 43u, 44u, 45u, 46u, 47u, 48u, 
	58u, 59u, 60u, 61u, 62u, 63u, 91u, 93u, 
	94u, 95u, 123u, 124u, 125u, 126u, 49u, 57u, 
	65u, 90u, 97u, 122u, 9u, 10u, 13u, 32u, 
	33u, 34u, 37u, 38u, 40u, 41u, 42u, 43u, 
	44u, 45u, 46u, 47u, 58u, 59u, 60u, 61u, 
	62u, 63u, 80u, 91u, 93u, 94u, 95u, 112u, 
	123u, 124u, 125u, 126u, 48u, 57u, 65u, 70u, 
	71u, 90u, 97u, 102u, 103u, 122u, 9u, 10u, 
	13u, 32u, 33u, 34u, 37u, 38u, 40u, 41u, 
	42u, 43u, 44u, 45u, 46u, 47u, 58u, 59u, 
	60u, 61u, 62u, 63u, 80u, 91u, 93u, 94u, 
	95u, 112u, 123u, 124u, 125u, 126u, 48u, 57u, 
	65u, 70u, 71u, 90u, 97u, 102u, 103u, 122u, 
	9u, 10u, 13u, 32u, 33u, 34u, 37u, 38u, 
	40u, 41u, 42u, 43u, 44u, 45u, 46u, 47u, 
	48u, 58u, 59u, 60u, 61u, 62u, 63u, 91u, 
	93u, 94u, 95u, 123u, 124u, 125u, 126u, 49u, 
	57u, 65u, 90u, 97u, 122u, 9u, 10u, 13u, 
	32u, 33u, 34u, 37u, 38u, 40u, 41u, 42u, 
	43u, 44u, 45u, 46u, 47u, 48u, 58u, 59u, 
	60u, 61u, 62u, 63u, 91u, 93u, 94u, 95u, 
	123u, 124u, 125u, 126u, 49u, 57u, 65u, 90u, 
	97u, 122u, 9u, 10u, 13u, 32u, 33u, 34u, 
	37u, 38u, 40u, 41u, 42u, 43u, 44u, 45u, 
	46u, 47u, 48u, 58u, 59u, 60u, 61u, 62u, 
	63u, 91u, 93u, 94u, 95u, 123u, 124u, 125u, 
	126u, 49u, 57u, 65u, 90u, 97u, 122u, 9u, 
	10u, 13u, 32u, 33u, 34u, 37u, 38u, 40u, 
	41u, 42u, 43u, 44u, 45u, 46u, 47u, 48u, 
	58u, 59u, 60u, 61u, 62u, 63u, 91u, 93u, 
	94u, 95u, 123u, 124u, 125u, 126u, 49u, 57u, 
	65u, 90u, 97u, 122u, 9u, 10u, 13u, 32u, 
	33u, 34u, 37u, 38u, 40u, 41u, 42u, 43u, 
	44u, 45u, 46u, 47u, 48u, 58u, 59u, 60u, 
	61u, 62u, 63u, 91u, 93u, 94u, 95u, 123u, 
	124u, 125u, 126u, 49u, 57u, 65u, 90u, 97u, 
	122u, 9u, 10u, 13u, 32u, 33u, 34u, 37u, 
	38u, 40u, 41u, 42u, 43u, 44u, 45u, 46u, 
	47u, 48u, 58u, 59u, 60u, 61u, 62u, 63u, 
	91u, 93u, 94u, 95u, 123u, 124u, 125u, 126u, 
	49u, 57u, 65u, 90u, 97u, 122u, 9u, 10u, 
	13u, 32u, 33u, 34u, 37u, 38u, 40u, 41u, 
	42u, 43u, 44u, 45u, 46u, 47u, 48u, 58u, 
	59u, 60u, 61u, 62u, 63u, 91u, 93u, 94u, 
	95u, 123u, 124u, 125u, 126u, 49u, 57u, 65u, 
	90u, 97u, 122u, 9u, 10u, 13u, 32u, 33u, 
	34u, 37u, 38u, 40u, 41u, 42u, 43u, 44u, 
	45u, 46u, 47u, 48u, 58u, 59u, 60u, 61u, 
	62u, 63u, 91u, 93u, 94u, 95u, 123u, 124u, 
	125u, 126u, 49u, 57u, 65u, 90u, 97u, 122u, 
	9u, 10u, 13u, 32u, 33u, 34u, 37u, 38u, 
	40u, 41u, 42u, 43u, 44u, 45u, 46u, 47u, 
	48u, 58u, 59u, 60u, 61u, 62u, 63u, 91u, 
	93u, 94u, 95u, 123u, 124u, 125u, 126u, 49u, 
	57u, 65u, 90u, 97u, 122u, 0
};

static const char _lexer_single_lengths[] = {
	0, 4, 3, 3, 3, 4, 2, 0, 
	1, 2, 0, 0, 0, 2, 3, 3, 
	3, 4, 2, 10, 0, 0, 0, 0, 
	0, 0, 0, 0, 2, 31, 31, 31, 
	32, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 34, 32, 31, 32, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	30, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 30, 31, 32, 32, 31, 31, 
	31, 31, 31, 31, 31, 31, 31
};

static const char _lexer_range_lengths[] = {
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 1, 1, 3, 3, 0, 0, 0, 
	0, 0, 0, 0, 3, 3, 3, 3, 
	3, 3, 3, 3, 0, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 5, 5, 3, 3, 
	3, 3, 3, 3, 3, 3, 3
};

static const short _lexer_index_offsets[] = {
	0, 0, 5, 9, 13, 17, 22, 25, 
	27, 29, 33, 35, 39, 43, 46, 50, 
	54, 58, 63, 66, 77, 81, 85, 89, 
	93, 97, 101, 105, 109, 112, 147, 182, 
	217, 253, 288, 323, 358, 393, 428, 463, 
	498, 533, 568, 603, 638, 673, 708, 743, 
	778, 813, 848, 883, 921, 957, 992, 1028, 
	1063, 1098, 1133, 1168, 1203, 1238, 1273, 1308, 
	1343, 1377, 1412, 1447, 1482, 1517, 1552, 1587, 
	1622, 1657, 1692, 1727, 1762, 1797, 1832, 1867, 
	1902, 1937, 1972, 2006, 2041, 2079, 2117, 2152, 
	2187, 2222, 2257, 2292, 2327, 2362, 2397
};

static const char _lexer_trans_targs[] = {
	0, 0, 33, 19, 1, 3, 4, 5, 
	2, 3, 4, 5, 2, 3, 4, 5, 
	2, 3, 4, 5, 29, 2, 30, 31, 
	6, 52, 0, 75, 0, 10, 10, 82, 
	0, 82, 0, 84, 84, 84, 0, 85, 
	85, 85, 0, 14, 18, 0, 15, 16, 
	17, 14, 15, 16, 17, 14, 15, 16, 
	17, 14, 15, 16, 17, 33, 14, 34, 
	35, 18, 1, 1, 1, 1, 1, 1, 
	1, 1, 20, 26, 0, 21, 21, 21, 
	0, 22, 22, 22, 0, 23, 23, 23, 
	0, 24, 24, 24, 0, 25, 25, 25, 
	0, 1, 1, 1, 0, 27, 27, 27, 
	0, 1, 1, 1, 0, 93, 94, 0, 
	29, 30, 31, 29, 32, 1, 36, 37, 
	39, 40, 41, 42, 44, 45, 47, 50, 
	51, 53, 55, 56, 59, 61, 63, 65, 
	66, 67, 64, 69, 70, 72, 73, 54, 
	64, 64, 0, 29, 30, 31, 29, 32, 
	1, 36, 37, 39, 40, 41, 42, 44, 
	45, 47, 50, 51, 53, 55, 56, 59, 
	61, 63, 65, 66, 67, 64, 69, 70, 
	72, 73, 54, 64, 64, 0, 29, 30, 
	31, 29, 32, 1, 36, 37, 39, 40, 
	41, 42, 44, 45, 47, 50, 51, 53, 
	55, 56, 59, 61, 63, 65, 66, 67, 
	64, 69, 70, 72, 73, 54, 64, 64, 
	0, 29, 30, 31, 29, 32, 1, 36, 
	37, 39, 40, 41, 42, 44, 45, 47, 
	50, 51, 53, 55, 56, 92, 61, 63, 
	65, 66, 67, 64, 28, 69, 70, 72, 
	73, 54, 64, 64, 0, 33, 34, 35, 
	33, 32, 1, 36, 37, 39, 40, 41, 
	42, 44, 45, 47, 13, 51, 53, 55, 
	56, 59, 61, 63, 65, 66, 67, 64, 
	69, 70, 72, 73, 54, 64, 64, 0, 
	33, 34, 35, 33, 32, 1, 36, 37, 
	39, 40, 41, 42, 44, 45, 47, 13, 
	51, 53, 55, 56, 59, 61, 63, 65, 
	66, 67, 64, 69, 70, 72, 73, 54, 
	64, 64, 0, 33, 34, 35, 33, 32, 
	1, 36, 37, 39, 40, 41, 42, 44, 
	45, 47, 13, 51, 53, 55, 56, 59, 
	61, 63, 65, 66, 67, 64, 69, 70, 
	72, 73, 54, 64, 64, 0, 29, 30, 
	31, 29, 32, 1, 36, 37, 39, 40, 
	41, 42, 44, 45, 47, 50, 51, 53, 
	55, 56, 91, 61, 63, 65, 66, 67, 
	64, 69, 70, 72, 73, 54, 64, 64, 
	0, 29, 30, 31, 29, 32, 1, 36, 
	38, 39, 40, 41, 42, 44, 45, 47, 
	50, 51, 53, 55, 56, 90, 61, 63, 
	65, 66, 67, 64, 69, 70, 72, 73, 
	54, 64, 64, 0, 29, 30, 31, 29, 
	32, 1, 36, 37, 39, 40, 41, 42, 
	44, 45, 47, 50, 51, 53, 55, 56, 
	59, 61, 63, 65, 66, 67, 64, 69, 
	70, 72, 73, 54, 64, 64, 0, 29, 
	30, 31, 29, 32, 1, 36, 37, 39, 
	40, 41, 42, 44, 45, 47, 50, 51, 
	53, 55, 56, 59, 61, 63, 65, 66, 
	67, 64, 69, 70, 72, 73, 54, 64, 
	64, 0, 29, 30, 31, 29, 32, 1, 
	36, 37, 39, 40, 41, 42, 44, 45, 
	47, 50, 51, 53, 55, 56, 59, 61, 
	63, 65, 66, 67, 64, 69, 70, 72, 
	73, 54, 64, 64, 0, 29, 30, 31, 
	29, 32, 1, 36, 37, 39, 40, 41, 
	42, 44, 45, 47, 50, 51, 53, 55, 
	56, 89, 61, 63, 65, 66, 67, 64, 
	69, 70, 72, 73, 54, 64, 64, 0, 
	29, 30, 31, 29, 32, 1, 36, 37, 
	39, 40, 41, 43, 44, 45, 47, 50, 
	51, 53, 55, 56, 88, 61, 63, 65, 
	66, 67, 64, 69, 70, 72, 73, 54, 
	64, 64, 0, 29, 30, 31, 29, 32, 
	1, 36, 37, 39, 40, 41, 42, 44, 
	45, 47, 50, 51, 53, 55, 56, 59, 
	61, 63, 65, 66, 67, 64, 69, 70, 
	72, 73, 54, 64, 64, 0, 29, 30, 
	31, 29, 32, 1, 36, 37, 39, 40, 
	41, 42, 44, 45, 47, 50, 51, 53, 
	55, 56, 59, 61, 63, 65, 66, 67, 
	64, 69, 70, 72, 73, 54, 64, 64, 
	0, 29, 30, 31, 29, 32, 1, 36, 
	37, 39, 40, 41, 42, 44, 46, 47, 
	50, 51, 53, 55, 56, 87, 61, 63, 
	65, 66, 67, 64, 69, 70, 72, 73, 
	54, 64, 64, 0, 29, 30, 31, 29, 
	32, 1, 36, 37, 39, 40, 41, 42, 
	44, 45, 47, 50, 51, 53, 55, 56, 
	59, 61, 63, 65, 66, 67, 64, 69, 
	70, 72, 73, 54, 64, 64, 0, 29, 
	30, 31, 29, 32, 1, 36, 37, 39, 
	40, 41, 42, 44, 45, 48, 50, 51, 
	53, 55, 56, 59, 61, 63, 65, 66, 
	67, 64, 69, 70, 72, 73, 54, 64, 
	64, 0, 29, 30, 31, 29, 32, 1, 
	36, 37, 39, 40, 41, 42, 44, 45, 
	49, 50, 51, 53, 55, 56, 59, 61, 
	63, 65, 66, 67, 64, 69, 70, 72, 
	73, 54, 64, 64, 0, 29, 30, 31, 
	29, 32, 1, 36, 37, 39, 40, 41, 
	42, 44, 45, 47, 50, 51, 53, 55, 
	56, 59, 61, 63, 65, 66, 67, 64, 
	69, 70, 72, 73, 54, 64, 64, 0, 
	29, 30, 31, 29, 32, 1, 36, 37, 
	39, 40, 2, 42, 44, 45, 47, 6, 
	51, 53, 55, 56, 86, 61, 63, 65, 
	66, 67, 64, 69, 70, 72, 73, 54, 
	64, 64, 0, 29, 30, 31, 29, 32, 
	1, 36, 37, 39, 40, 41, 42, 44, 
	45, 7, 50, 51, 53, 55, 56, 59, 
	61, 63, 9, 65, 66, 67, 64, 9, 
	11, 69, 70, 72, 73, 54, 64, 64, 
	0, 29, 30, 31, 29, 32, 1, 36, 
	37, 39, 40, 41, 42, 44, 45, 47, 
	50, 53, 55, 56, 59, 61, 63, 9, 
	65, 66, 67, 64, 9, 69, 70, 72, 
	73, 52, 64, 64, 0, 29, 30, 31, 
	29, 32, 1, 36, 37, 39, 40, 41, 
	42, 44, 45, 47, 50, 51, 83, 55, 
	56, 59, 61, 63, 65, 66, 67, 64, 
	69, 70, 72, 73, 54, 64, 64, 0, 
	29, 30, 31, 29, 32, 1, 36, 37, 
	39, 40, 41, 42, 44, 45, 7, 50, 
	53, 55, 56, 59, 61, 63, 9, 65, 
	66, 67, 64, 9, 69, 70, 72, 73, 
	54, 64, 64, 0, 29, 30, 31, 29, 
	32, 1, 36, 37, 39, 40, 41, 42, 
	44, 45, 47, 50, 51, 53, 55, 56, 
	59, 61, 63, 65, 66, 67, 64, 69, 
	70, 72, 73, 54, 64, 64, 0, 29, 
	30, 31, 29, 32, 1, 36, 37, 39, 
	40, 41, 42, 44, 45, 47, 50, 51, 
	53, 55, 57, 81, 61, 63, 65, 66, 
	67, 64, 69, 70, 72, 73, 54, 64, 
	64, 0, 29, 30, 31, 29, 32, 1, 
	36, 37, 39, 40, 41, 42, 44, 45, 
	47, 50, 51, 53, 55, 56, 58, 61, 
	63, 65, 66, 67, 64, 69, 70, 72, 
	73, 54, 64, 64, 0, 29, 30, 31, 
	29, 32, 1, 36, 37, 39, 40, 41, 
	42, 44, 45, 47, 50, 51, 53, 55, 
	56, 59, 61, 63, 65, 66, 67, 64, 
	69, 70, 72, 73, 54, 64, 64, 0, 
	29, 30, 31, 29, 32, 1, 36, 37, 
	39, 40, 41, 42, 44, 45, 47, 50, 
	51, 53, 55, 56, 60, 61, 63, 65, 
	66, 67, 64, 69, 70, 72, 73, 54, 
	64, 64, 0, 29, 30, 31, 29, 32, 
	1, 36, 37, 39, 40, 41, 42, 44, 
	45, 47, 50, 51, 53, 55, 56, 59, 
	61, 63, 65, 66, 67, 64, 69, 70, 
	72, 73, 54, 64, 64, 0, 29, 30, 
	31, 29, 32, 1, 36, 37, 39, 40, 
	41, 42, 44, 45, 47, 50, 51, 53, 
	55, 56, 62, 79, 63, 65, 66, 67, 
	64, 69, 70, 72, 73, 54, 64, 64, 
	0, 29, 30, 31, 29, 32, 1, 36, 
	37, 39, 40, 41, 42, 44, 45, 47, 
	50, 51, 53, 55, 56, 59, 61, 63, 
	65, 66, 67, 64, 69, 70, 72, 73, 
	54, 64, 64, 0, 29, 30, 31, 29, 
	32, 1, 36, 37, 39, 40, 41, 42, 
	44, 45, 47, 50, 51, 53, 55, 56, 
	59, 61, 63, 65, 66, 67, 64, 69, 
	70, 72, 73, 54, 64, 64, 0, 29, 
	30, 31, 29, 32, 1, 36, 37, 39, 
	40, 41, 42, 44, 45, 47, 50, 53, 
	55, 56, 59, 61, 63, 65, 66, 67, 
	64, 69, 70, 72, 73, 64, 64, 64, 
	0, 29, 30, 31, 29, 32, 1, 36, 
	37, 39, 40, 41, 42, 44, 45, 47, 
	50, 51, 53, 55, 56, 59, 61, 63, 
	65, 66, 67, 64, 69, 70, 72, 73, 
	54, 64, 64, 0, 29, 30, 31, 29, 
	32, 1, 36, 37, 39, 40, 41, 42, 
	44, 45, 47, 50, 51, 53, 55, 56, 
	59, 61, 63, 65, 66, 67, 64, 69, 
	70, 72, 73, 54, 64, 64, 0, 29, 
	30, 31, 29, 32, 1, 36, 37, 39, 
	40, 41, 42, 44, 45, 47, 50, 51, 
	53, 55, 56, 68, 61, 63, 65, 66, 
	78, 64, 69, 70, 72, 73, 54, 64, 
	64, 0, 29, 30, 31, 29, 32, 1, 
	36, 37, 39, 40, 41, 42, 44, 45, 
	47, 50, 51, 53, 55, 56, 59, 61, 
	63, 65, 66, 67, 64, 69, 70, 72, 
	73, 54, 64, 64, 0, 29, 30, 31, 
	29, 32, 1, 36, 37, 39, 40, 41, 
	42, 44, 45, 47, 50, 51, 53, 55, 
	56, 59, 61, 63, 65, 66, 67, 64, 
	69, 70, 72, 73, 54, 64, 64, 0, 
	29, 30, 31, 29, 32, 1, 36, 37, 
	39, 40, 41, 42, 44, 45, 47, 50, 
	51, 53, 55, 56, 71, 61, 63, 65, 
	66, 67, 64, 69, 77, 72, 73, 54, 
	64, 64, 0, 29, 30, 31, 29, 32, 
	1, 36, 37, 39, 40, 41, 42, 44, 
	45, 47, 50, 51, 53, 55, 56, 59, 
	61, 63, 65, 66, 67, 64, 69, 70, 
	72, 73, 54, 64, 64, 0, 29, 30, 
	31, 29, 32, 1, 36, 37, 39, 40, 
	41, 42, 44, 45, 47, 50, 51, 53, 
	55, 56, 59, 61, 63, 65, 66, 67, 
	64, 69, 70, 72, 73, 54, 64, 64, 
	0, 29, 30, 31, 29, 32, 1, 36, 
	37, 39, 40, 41, 42, 44, 45, 47, 
	50, 51, 53, 55, 56, 74, 8, 63, 
	65, 66, 67, 64, 69, 70, 72, 73, 
	54, 64, 64, 0, 29, 30, 31, 29, 
	32, 1, 36, 37, 39, 40, 41, 42, 
	44, 45, 47, 50, 51, 53, 55, 56, 
	59, 61, 63, 65, 66, 67, 64, 69, 
	70, 72, 73, 54, 64, 64, 0, 29, 
	30, 31, 29, 32, 1, 36, 37, 39, 
	40, 41, 42, 44, 45, 47, 50, 51, 
	53, 55, 56, 76, 61, 63, 65, 66, 
	67, 64, 69, 70, 72, 73, 54, 64, 
	64, 0, 29, 30, 31, 29, 32, 1, 
	36, 37, 39, 40, 41, 42, 44, 45, 
	47, 50, 51, 53, 55, 56, 59, 61, 
	63, 65, 66, 67, 64, 69, 70, 72, 
	73, 54, 64, 64, 0, 29, 30, 31, 
	29, 32, 1, 36, 37, 39, 40, 41, 
	42, 44, 45, 47, 50, 51, 53, 55, 
	56, 59, 61, 63, 65, 66, 67, 64, 
	69, 70, 72, 73, 54, 64, 64, 0, 
	29, 30, 31, 29, 32, 1, 36, 37, 
	39, 40, 41, 42, 44, 45, 47, 50, 
	51, 53, 55, 56, 59, 61, 63, 65, 
	66, 67, 64, 69, 70, 72, 73, 54, 
	64, 64, 0, 29, 30, 31, 29, 32, 
	1, 36, 37, 39, 40, 41, 42, 44, 
	45, 47, 50, 51, 53, 55, 56, 80, 
	61, 63, 65, 66, 67, 64, 69, 70, 
	72, 73, 54, 64, 64, 0, 29, 30, 
	31, 29, 32, 1, 36, 37, 39, 40, 
	41, 42, 44, 45, 47, 50, 51, 53, 
	55, 56, 59, 61, 63, 65, 66, 67, 
	64, 69, 70, 72, 73, 54, 64, 64, 
	0, 29, 30, 31, 29, 32, 1, 36, 
	37, 39, 40, 41, 42, 44, 45, 47, 
	50, 51, 53, 55, 56, 59, 61, 63, 
	65, 66, 67, 64, 69, 70, 72, 73, 
	54, 64, 64, 0, 29, 30, 31, 29, 
	32, 1, 36, 37, 39, 40, 41, 42, 
	44, 45, 47, 50, 53, 55, 56, 59, 
	61, 63, 65, 66, 67, 64, 69, 70, 
	72, 73, 82, 64, 64, 0, 29, 30, 
	31, 29, 32, 1, 36, 37, 39, 40, 
	41, 42, 44, 45, 47, 50, 51, 53, 
	55, 56, 59, 61, 63, 65, 66, 67, 
	64, 69, 70, 72, 73, 54, 64, 64, 
	0, 29, 30, 31, 29, 32, 1, 36, 
	37, 39, 40, 41, 42, 44, 45, 12, 
	50, 53, 55, 56, 59, 61, 63, 9, 
	65, 66, 67, 64, 9, 69, 70, 72, 
	73, 84, 84, 64, 84, 64, 0, 29, 
	30, 31, 29, 32, 1, 36, 37, 39, 
	40, 41, 42, 44, 45, 47, 50, 53, 
	55, 56, 59, 61, 63, 9, 65, 66, 
	67, 64, 9, 69, 70, 72, 73, 85, 
	85, 64, 85, 64, 0, 29, 30, 31, 
	29, 32, 1, 36, 37, 39, 40, 41, 
	42, 44, 45, 47, 50, 51, 53, 55, 
	56, 59, 61, 63, 65, 66, 67, 64, 
	69, 70, 72, 73, 54, 64, 64, 0, 
	29, 30, 31, 29, 32, 1, 36, 37, 
	39, 40, 41, 42, 44, 45, 47, 50, 
	51, 53, 55, 56, 59, 61, 63, 65, 
	66, 67, 64, 69, 70, 72, 73, 54, 
	64, 64, 0, 29, 30, 31, 29, 32, 
	1, 36, 37, 39, 40, 41, 42, 44, 
	45, 47, 50, 51, 53, 55, 56, 59, 
	61, 63, 65, 66, 67, 64, 69, 70, 
	72, 73, 54, 64, 64, 0, 29, 30, 
	31, 29, 32, 1, 36, 37, 39, 40, 
	41, 42, 44, 45, 47, 50, 51, 53, 
	55, 56, 59, 61, 63, 65, 66, 67, 
	64, 69, 70, 72, 73, 54, 64, 64, 
	0, 29, 30, 31, 29, 32, 1, 36, 
	37, 39, 40, 41, 42, 44, 45, 47, 
	50, 51, 53, 55, 56, 59, 61, 63, 
	65, 66, 67, 64, 69, 70, 72, 73, 
	54, 64, 64, 0, 29, 30, 31, 29, 
	32, 1, 36, 37, 39, 40, 41, 42, 
	44, 45, 47, 50, 51, 53, 55, 56, 
	59, 61, 63, 65, 66, 67, 64, 69, 
	70, 72, 73, 54, 64, 64, 0, 29, 
	30, 31, 29, 32, 1, 36, 37, 39, 
	40, 41, 42, 44, 45, 47, 50, 51, 
	53, 55, 56, 59, 61, 63, 65, 66, 
	67, 64, 69, 70, 72, 73, 54, 64, 
	64, 0, 29, 30, 31, 29, 32, 1, 
	36, 37, 39, 40, 41, 42, 44, 45, 
	47, 50, 51, 53, 55, 56, 59, 61, 
	63, 65, 66, 67, 64, 69, 70, 72, 
	73, 54, 64, 64, 0, 29, 30, 31, 
	29, 32, 1, 36, 37, 39, 40, 41, 
	42, 44, 45, 47, 50, 51, 53, 55, 
	56, 59, 61, 63, 65, 66, 67, 64, 
	69, 70, 72, 73, 54, 64, 64, 0, 
	0
};

static const short _lexer_trans_actions[] = {
	186, 186, 0, 0, 5, 0, 0, 0, 
	0, 1, 1, 1, 1, 0, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 5, 186, 0, 186, 5, 5, 5, 
	186, 5, 186, 5, 5, 5, 186, 5, 
	5, 5, 186, 0, 0, 186, 0, 0, 
	0, 0, 1, 1, 1, 1, 0, 1, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 7, 11, 9, 13, 15, 17, 
	19, 21, 0, 0, 186, 35, 39, 37, 
	186, 41, 45, 43, 186, 47, 51, 49, 
	186, 53, 57, 55, 186, 59, 63, 61, 
	186, 189, 195, 192, 186, 23, 27, 25, 
	186, 29, 33, 31, 186, 0, 0, 186, 
	0, 0, 0, 0, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	183, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 183, 3, 3, 3, 3, 183, 
	183, 183, 186, 1, 1, 1, 1, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 366, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 366, 177, 177, 
	177, 177, 366, 366, 366, 370, 1, 0, 
	1, 1, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 366, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	366, 177, 177, 177, 177, 366, 366, 366, 
	370, 71, 71, 71, 71, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 390, 207, 207, 207, 0, 207, 207, 
	207, 207, 207, 390, 0, 207, 207, 207, 
	207, 390, 390, 390, 186, 0, 0, 0, 
	0, 204, 0, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 0, 386, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 386, 
	204, 204, 204, 204, 386, 386, 386, 186, 
	1, 1, 1, 1, 374, 1, 374, 374, 
	374, 374, 374, 374, 374, 374, 374, 1, 
	607, 374, 374, 374, 374, 374, 374, 374, 
	374, 374, 607, 374, 374, 374, 374, 607, 
	607, 607, 370, 1, 0, 1, 1, 374, 
	1, 374, 374, 374, 374, 374, 374, 374, 
	374, 374, 1, 607, 374, 374, 374, 374, 
	374, 374, 374, 374, 374, 607, 374, 374, 
	374, 374, 607, 607, 607, 370, 73, 73, 
	73, 73, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 394, 210, 
	210, 210, 0, 210, 210, 210, 210, 210, 
	394, 210, 210, 210, 210, 394, 394, 394, 
	186, 75, 75, 75, 75, 213, 213, 213, 
	0, 213, 213, 213, 213, 213, 213, 213, 
	213, 398, 213, 213, 213, 0, 213, 213, 
	213, 213, 213, 398, 213, 213, 213, 213, 
	398, 398, 398, 186, 167, 167, 167, 167, 
	351, 351, 351, 351, 351, 351, 351, 351, 
	351, 351, 351, 351, 582, 351, 351, 351, 
	351, 351, 351, 351, 351, 351, 582, 351, 
	351, 351, 351, 582, 582, 582, 186, 77, 
	77, 77, 77, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 402, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 402, 216, 216, 216, 216, 402, 402, 
	402, 186, 79, 79, 79, 79, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 406, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 406, 219, 219, 219, 
	219, 406, 406, 406, 186, 81, 81, 81, 
	81, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 410, 222, 222, 
	222, 0, 222, 222, 222, 222, 222, 410, 
	222, 222, 222, 222, 410, 410, 410, 186, 
	83, 83, 83, 83, 225, 225, 225, 225, 
	225, 225, 225, 0, 225, 225, 225, 225, 
	414, 225, 225, 225, 0, 225, 225, 225, 
	225, 225, 414, 225, 225, 225, 225, 414, 
	414, 414, 186, 119, 119, 119, 119, 279, 
	279, 279, 279, 279, 279, 279, 279, 279, 
	279, 279, 279, 486, 279, 279, 279, 279, 
	279, 279, 279, 279, 279, 486, 279, 279, 
	279, 279, 486, 486, 486, 186, 85, 85, 
	85, 85, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 418, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	418, 228, 228, 228, 228, 418, 418, 418, 
	186, 87, 87, 87, 87, 231, 231, 231, 
	231, 231, 231, 231, 231, 231, 0, 231, 
	231, 422, 231, 231, 231, 0, 231, 231, 
	231, 231, 231, 422, 231, 231, 231, 231, 
	422, 422, 422, 186, 121, 121, 121, 121, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 490, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 490, 282, 
	282, 282, 282, 490, 490, 490, 186, 89, 
	89, 89, 89, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 0, 234, 426, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 426, 234, 234, 234, 234, 426, 426, 
	426, 186, 123, 123, 123, 123, 285, 285, 
	285, 285, 285, 285, 285, 285, 285, 285, 
	0, 285, 494, 285, 285, 285, 285, 285, 
	285, 285, 285, 285, 494, 285, 285, 285, 
	285, 494, 494, 494, 186, 175, 175, 175, 
	175, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 598, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 598, 
	363, 363, 363, 363, 598, 598, 598, 186, 
	91, 91, 91, 91, 237, 237, 237, 237, 
	237, 237, 0, 237, 237, 237, 237, 0, 
	430, 237, 237, 237, 0, 237, 237, 237, 
	237, 237, 430, 237, 237, 237, 237, 430, 
	430, 430, 186, 67, 67, 67, 67, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 5, 201, 382, 201, 201, 201, 201, 
	201, 201, 5, 201, 201, 201, 382, 5, 
	5, 201, 201, 201, 201, 382, 382, 382, 
	186, 67, 67, 67, 67, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 5, 
	201, 201, 201, 382, 5, 201, 201, 201, 
	201, 5, 382, 382, 186, 93, 93, 93, 
	93, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 434, 0, 240, 
	240, 240, 240, 240, 240, 240, 240, 434, 
	240, 240, 240, 240, 434, 434, 434, 186, 
	67, 67, 67, 67, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 5, 201, 
	201, 201, 201, 201, 201, 201, 5, 201, 
	201, 201, 382, 5, 201, 201, 201, 201, 
	5, 382, 382, 186, 95, 95, 95, 95, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 438, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 438, 243, 
	243, 243, 243, 438, 438, 438, 186, 97, 
	97, 97, 97, 246, 246, 246, 246, 246, 
	246, 246, 246, 246, 246, 246, 246, 442, 
	246, 246, 0, 0, 246, 246, 246, 246, 
	246, 442, 246, 246, 246, 246, 442, 442, 
	442, 186, 125, 125, 125, 125, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 498, 288, 288, 288, 0, 288, 
	288, 288, 288, 288, 498, 288, 288, 288, 
	288, 498, 498, 498, 186, 161, 161, 161, 
	161, 342, 342, 342, 342, 342, 342, 342, 
	342, 342, 342, 342, 342, 570, 342, 342, 
	342, 342, 342, 342, 342, 342, 342, 570, 
	342, 342, 342, 342, 570, 570, 570, 186, 
	99, 99, 99, 99, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	446, 249, 249, 249, 0, 249, 249, 249, 
	249, 249, 446, 249, 249, 249, 249, 446, 
	446, 446, 186, 135, 135, 135, 135, 303, 
	303, 303, 303, 303, 303, 303, 303, 303, 
	303, 303, 303, 518, 303, 303, 303, 303, 
	303, 303, 303, 303, 303, 518, 303, 303, 
	303, 303, 518, 518, 518, 186, 101, 101, 
	101, 101, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 450, 252, 
	252, 252, 0, 0, 252, 252, 252, 252, 
	450, 252, 252, 252, 252, 450, 450, 450, 
	186, 137, 137, 137, 137, 306, 306, 306, 
	306, 306, 306, 306, 306, 306, 306, 306, 
	306, 522, 306, 306, 306, 306, 306, 306, 
	306, 306, 306, 522, 306, 306, 306, 306, 
	522, 522, 522, 186, 103, 103, 103, 103, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 454, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 454, 255, 
	255, 255, 255, 454, 454, 454, 186, 65, 
	65, 65, 65, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	5, 198, 198, 198, 198, 5, 5, 5, 
	186, 105, 105, 105, 105, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 458, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 458, 258, 258, 258, 258, 
	458, 458, 458, 186, 107, 107, 107, 107, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 462, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 462, 261, 
	261, 261, 261, 462, 462, 462, 186, 109, 
	109, 109, 109, 264, 264, 264, 264, 264, 
	264, 264, 264, 264, 264, 264, 264, 466, 
	264, 264, 264, 0, 264, 264, 264, 264, 
	0, 466, 264, 264, 264, 264, 466, 466, 
	466, 186, 155, 155, 155, 155, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 558, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 558, 333, 333, 333, 
	333, 558, 558, 558, 186, 111, 111, 111, 
	111, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 470, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 470, 
	267, 267, 267, 267, 470, 470, 470, 186, 
	113, 113, 113, 113, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	474, 270, 270, 270, 0, 270, 270, 270, 
	270, 270, 474, 270, 0, 270, 270, 474, 
	474, 474, 186, 157, 157, 157, 157, 336, 
	336, 336, 336, 336, 336, 336, 336, 336, 
	336, 336, 336, 562, 336, 336, 336, 336, 
	336, 336, 336, 336, 336, 562, 336, 336, 
	336, 336, 562, 562, 562, 186, 115, 115, 
	115, 115, 273, 273, 273, 273, 273, 273, 
	273, 273, 273, 273, 273, 273, 478, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	478, 273, 273, 273, 273, 478, 478, 478, 
	186, 117, 117, 117, 117, 276, 276, 276, 
	276, 276, 276, 276, 276, 276, 276, 276, 
	276, 482, 276, 276, 276, 0, 0, 276, 
	276, 276, 276, 482, 276, 276, 276, 276, 
	482, 482, 482, 186, 159, 159, 159, 159, 
	339, 339, 339, 339, 339, 339, 339, 339, 
	339, 339, 339, 339, 566, 339, 339, 339, 
	339, 339, 339, 339, 339, 339, 566, 339, 
	339, 339, 339, 566, 566, 566, 186, 129, 
	129, 129, 129, 294, 294, 294, 294, 294, 
	294, 294, 294, 294, 294, 294, 294, 506, 
	294, 294, 294, 0, 294, 294, 294, 294, 
	294, 506, 294, 294, 294, 294, 506, 506, 
	506, 186, 165, 165, 165, 165, 348, 348, 
	348, 348, 348, 348, 348, 348, 348, 348, 
	348, 348, 578, 348, 348, 348, 348, 348, 
	348, 348, 348, 348, 578, 348, 348, 348, 
	348, 578, 578, 578, 186, 171, 171, 171, 
	171, 357, 357, 357, 357, 357, 357, 357, 
	357, 357, 357, 357, 357, 590, 357, 357, 
	357, 357, 357, 357, 357, 357, 357, 590, 
	357, 357, 357, 357, 590, 590, 590, 186, 
	169, 169, 169, 169, 354, 354, 354, 354, 
	354, 354, 354, 354, 354, 354, 354, 354, 
	586, 354, 354, 354, 354, 354, 354, 354, 
	354, 354, 586, 354, 354, 354, 354, 586, 
	586, 586, 186, 127, 127, 127, 127, 291, 
	291, 291, 291, 291, 291, 291, 291, 291, 
	291, 291, 291, 502, 291, 291, 291, 0, 
	291, 291, 291, 291, 291, 502, 291, 291, 
	291, 291, 502, 502, 502, 186, 163, 163, 
	163, 163, 345, 345, 345, 345, 345, 345, 
	345, 345, 345, 345, 345, 345, 574, 345, 
	345, 345, 345, 345, 345, 345, 345, 345, 
	574, 345, 345, 345, 345, 574, 574, 574, 
	186, 133, 133, 133, 133, 300, 300, 300, 
	300, 300, 300, 300, 300, 300, 300, 300, 
	300, 514, 300, 300, 300, 300, 300, 300, 
	300, 300, 300, 514, 300, 300, 300, 300, 
	514, 514, 514, 186, 67, 67, 67, 67, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 382, 201, 201, 
	201, 201, 5, 382, 382, 186, 173, 173, 
	173, 173, 360, 360, 360, 360, 360, 360, 
	360, 360, 360, 360, 360, 360, 594, 360, 
	360, 360, 360, 360, 360, 360, 360, 360, 
	594, 360, 360, 360, 360, 594, 594, 594, 
	186, 67, 67, 67, 67, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 5, 
	201, 201, 201, 201, 201, 201, 201, 5, 
	201, 201, 201, 382, 5, 201, 201, 201, 
	201, 5, 5, 382, 5, 382, 186, 67, 
	67, 67, 67, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 5, 201, 201, 
	201, 382, 5, 201, 201, 201, 201, 5, 
	5, 382, 5, 382, 186, 153, 153, 153, 
	153, 330, 330, 330, 330, 330, 330, 330, 
	330, 330, 330, 330, 330, 554, 330, 330, 
	330, 330, 330, 330, 330, 330, 330, 554, 
	330, 330, 330, 330, 554, 554, 554, 186, 
	151, 151, 151, 151, 327, 327, 327, 327, 
	327, 327, 327, 327, 327, 327, 327, 327, 
	550, 327, 327, 327, 327, 327, 327, 327, 
	327, 327, 550, 327, 327, 327, 327, 550, 
	550, 550, 186, 149, 149, 149, 149, 324, 
	324, 324, 324, 324, 324, 324, 324, 324, 
	324, 324, 324, 546, 324, 324, 324, 324, 
	324, 324, 324, 324, 324, 546, 324, 324, 
	324, 324, 546, 546, 546, 186, 147, 147, 
	147, 147, 321, 321, 321, 321, 321, 321, 
	321, 321, 321, 321, 321, 321, 542, 321, 
	321, 321, 321, 321, 321, 321, 321, 321, 
	542, 321, 321, 321, 321, 542, 542, 542, 
	186, 145, 145, 145, 145, 318, 318, 318, 
	318, 318, 318, 318, 318, 318, 318, 318, 
	318, 538, 318, 318, 318, 318, 318, 318, 
	318, 318, 318, 538, 318, 318, 318, 318, 
	538, 538, 538, 186, 143, 143, 143, 143, 
	315, 315, 315, 315, 315, 315, 315, 315, 
	315, 315, 315, 315, 534, 315, 315, 315, 
	315, 315, 315, 315, 315, 315, 534, 315, 
	315, 315, 315, 534, 534, 534, 186, 131, 
	131, 131, 131, 297, 297, 297, 297, 297, 
	297, 297, 297, 297, 297, 297, 297, 510, 
	297, 297, 297, 297, 297, 297, 297, 297, 
	297, 510, 297, 297, 297, 297, 510, 510, 
	510, 186, 139, 139, 139, 139, 309, 309, 
	309, 309, 309, 309, 309, 309, 309, 309, 
	309, 309, 526, 309, 309, 309, 309, 309, 
	309, 309, 309, 309, 526, 309, 309, 309, 
	309, 526, 526, 526, 186, 141, 141, 141, 
	141, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 530, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 530, 
	312, 312, 312, 312, 530, 530, 530, 186, 
	0
};

static const short _lexer_eof_actions[] = {
	0, 378, 378, 602, 602, 378, 378, 378, 
	378, 378, 378, 378, 378, 378, 378, 602, 
	602, 378, 378, 378, 378, 378, 378, 378, 
	378, 378, 378, 378, 378, 0, 1, 1, 
	71, 69, 180, 180, 73, 75, 167, 77, 
	79, 81, 83, 119, 85, 87, 121, 89, 
	123, 175, 91, 67, 67, 93, 67, 95, 
	97, 125, 161, 99, 135, 101, 137, 103, 
	65, 105, 107, 109, 155, 111, 113, 157, 
	115, 117, 159, 129, 165, 171, 169, 127, 
	163, 133, 67, 173, 67, 67, 153, 151, 
	149, 147, 145, 143, 131, 139, 141
};

static const int lexer_start = 29;
static const int lexer_first_final = 29;
static const int lexer_error = 0;

static const int lexer_en_main = 29;


#line 254 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"



void xec_parser::newline( int sloc )
{
    root->script->newlines.push_back( sloc );
}



template < typename ... arguments_t >
xec_token* xec_parser::make_token( arguments_t ... arguments )
{
    void* p = NULL;
    if ( recycle_tokens.size() )
    {
        p = recycle_tokens.back();
        recycle_tokens.pop_back();
    }
    else
    {
        p = malloc( sizeof( xec_token ) );
    }
    return new ( p ) xec_token( arguments ... );
}



struct xec_keywords
    :   public std::unordered_map< symkey, xec_token_kind >
{
    
    xec_keywords()
    {
        emplace( symkey( "break" ),     XEC_KEYWORD_BREAK );
        emplace( symkey( "case" ),      XEC_KEYWORD_CASE );
        emplace( symkey( "catch" ),     XEC_KEYWORD_CATCH );
        emplace( symkey( "continue" ),  XEC_KEYWORD_CONTINUE );
        emplace( symkey( "def" ),       XEC_KEYWORD_DEF );
        emplace( symkey( "default" ),   XEC_KEYWORD_DEFAULT );
        emplace( symkey( "delete" ),    XEC_KEYWORD_DELETE );
        emplace( symkey( "do" ),        XEC_KEYWORD_DO );
        emplace( symkey( "else" ),      XEC_KEYWORD_ELSE );
        emplace( symkey( "false" ),     XEC_KEYWORD_FALSE );
        emplace( symkey( "finally" ),   XEC_KEYWORD_FINALLY );
        emplace( symkey( "for" ),       XEC_KEYWORD_FOR );
        emplace( symkey( "if" ),        XEC_KEYWORD_IF );
        emplace( symkey( "new" ),       XEC_KEYWORD_NEW );
        emplace( symkey( "null" ),      XEC_KEYWORD_NULL );
        emplace( symkey( "return" ),    XEC_KEYWORD_RETURN );
        emplace( symkey( "switch" ),    XEC_KEYWORD_SWITCH );
        emplace( symkey( "throw" ),     XEC_KEYWORD_THROW );
        emplace( symkey( "true" ),      XEC_KEYWORD_TRUE );
        emplace( symkey( "try" ),       XEC_KEYWORD_TRY );
        emplace( symkey( "using" ),     XEC_KEYWORD_USING );
        emplace( symkey( "var" ),       XEC_KEYWORD_VAR );
        emplace( symkey( "while" ),     XEC_KEYWORD_WHILE );
        emplace( symkey( "yield" ),     XEC_KEYWORD_YIELD );
        emplace( symkey( "in" ),        XEC_TOKEN_IN );
        emplace( symkey( "is" ),        XEC_TOKEN_IS );
    }
    
};



xec_token* xec_parser::make_identifier( int sloc, region_buffer* data )
{
    static xec_keywords keywords;

    size_t length = data->size();
    const char* identifier = (const char*)data->get();
    symkey key( identifier, length );
    
    // Check for keyword.
    auto i = keywords.find( key );
    if ( i != keywords.end() )
    {
        return make_token( i->second, sloc, i->first.c_str(), i->first.size() );
    }
    
    // Check for existing identifier.
    auto j = root->script->identifiers.find( key );
    if ( j != root->script->identifiers.end() )
    {
        return make_token( XEC_TOKEN_IDENTIFIER, sloc, j->c_str(), j->size() );
    }

    // New identifier.
    data->append( '\0' );
    identifier = (const char*)data->tearoff();
    root->script->identifiers.emplace( key.hash(), identifier, length );
    return make_token( XEC_TOKEN_IDENTIFIER, sloc, identifier, length );

}



static bool encode_utf8( region_buffer* data, uint32_t cp )
{
    if ( cp <= 0x7F )
    {
        data->append( (uint8_t)cp );
        return true;
    }
    else if ( cp <= 0x7FF )
    {
        data->append( (uint8_t)( 0xC0 | ( cp >> 6 & 0x1F ) ) );
        data->append( (uint8_t)( 0x80 | ( cp & 0x3F ) ) );
        return true;
    }
    else if ( cp <= 0xFFFF )
    {
        data->append( (uint8_t)( 0xE0 | ( cp >> 12 & 0x0F ) ) );
        data->append( (uint8_t)( 0x80 | ( cp >> 6 & 0x3F ) ) );
        data->append( (uint8_t)( 0x80 | ( cp & 0x3F ) ) );
        return true;
    }
    else if ( cp <= 0x10FFFF )
    {
        data->append( (uint8_t)( 0xF0 | ( cp >> 18 & 0x07 ) ) );
        data->append( (uint8_t)( 0x80 | ( cp >> 12 & 0x3F ) ) );
        data->append( (uint8_t)( 0x80 | ( cp >> 6 & 0x3F ) ) );
        data->append( (uint8_t)( 0x80 | ( cp & 0x3F ) ) );
        return true;
    }
    else
    {
        return false;
    }
}



bool xec_parser::parse( const char* path )
{
    // Implicit allocations (for std::deque) from AST region.
    region_scope rscope( root->alloc );

    // Allocate strings and identifiers in the script's region.
    region_buffer data( root->script->alloc );



    // Push function scope.
    scopes.push_back( root->function->scope );

    
    // Open file.
    root->script->filename = path;
    FILE* file = fopen( path, "r" );
    if ( ! file )
    {
        root->script->error( 0, "unable to open file" );
        return false;
    }
    
    
    // File state.
    int offset = 0;
    unsigned char* buffer = (unsigned char*)malloc( BUFFER_SIZE );
    
    
    // Token state.
    int sloc = -1;
    uint32_t temp;


    // Parser state.
    void* parser = XecParseAlloc( malloc );


    // Initialize state machine.
    int cs;
    
    
#line 1318 "xec_parser_ragel.cpp"
	{
	cs = lexer_start;
	}

#line 430 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
    
    
    // Perform lexing.
#define TOKEN( token ) \
    { \
        XecParse( parser, token->kind, token, this ); \
        if ( root->script->error_count() >= ERROR_LIMIT ) \
            goto error; \
    }
#define MTOKEN( ... ) \
    { \
        xec_token* token = make_token( __VA_ARGS__ ); \
        XecParse( parser, token->kind, token, this ); \
        if ( root->script->error_count() >= ERROR_LIMIT ) \
            goto error; \
    }

    bool iseof = false;
    while ( ! iseof )
    {
        size_t read = fread( buffer, 1, BUFFER_SIZE, file );
        iseof = read < BUFFER_SIZE;
        
        if ( iseof && ferror( file ) )
        {
            data.shrink();
            root->script->error( offset, "error reading file" );
            goto error;
        }

        const unsigned char* p      = buffer;
        const unsigned char* pe     = buffer + read;
        const unsigned char* eof    = iseof ? pe : NULL;

        
#line 1359 "xec_parser_ragel.cpp"
	{
	int _klen;
	unsigned int _trans;
	const char *_acts;
	unsigned int _nacts;
	const unsigned char *_keys;

	if ( p == pe )
		goto _test_eof;
	if ( cs == 0 )
		goto _out;
_resume:
	_keys = _lexer_trans_keys + _lexer_key_offsets[cs];
	_trans = _lexer_index_offsets[cs];

	_klen = _lexer_single_lengths[cs];
	if ( _klen > 0 ) {
		const unsigned char *_lower = _keys;
		const unsigned char *_mid;
		const unsigned char *_upper = _keys + _klen - 1;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( (*p) < *_mid )
				_upper = _mid - 1;
			else if ( (*p) > *_mid )
				_lower = _mid + 1;
			else {
				_trans += (unsigned int)(_mid - _keys);
				goto _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _lexer_range_lengths[cs];
	if ( _klen > 0 ) {
		const unsigned char *_lower = _keys;
		const unsigned char *_mid;
		const unsigned char *_upper = _keys + (_klen<<1) - 2;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( (*p) < _mid[0] )
				_upper = _mid - 2;
			else if ( (*p) > _mid[1] )
				_lower = _mid + 2;
			else {
				_trans += (unsigned int)((_mid - _keys)>>1);
				goto _match;
			}
		}
		_trans += _klen;
	}

_match:
	cs = _lexer_trans_targs[_trans];

	if ( _lexer_trans_actions[_trans] == 0 )
		goto _again;

	_acts = _lexer_actions + _lexer_trans_actions[_trans];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 )
	{
		switch ( *_acts++ )
		{
	case 0:
#line 35 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ newline( (int)( offset + ( p - buffer ) - 1 ) ); }
	break;
	case 1:
#line 36 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ sloc = (int)( offset + ( p - buffer ) ); data.clear(); }
	break;
	case 2:
#line 37 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ data.append( (char)(*p) ); }
	break;
	case 4:
#line 48 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{
        data.shrink();
        int sloc = (int)( offset + ( p - buffer ) );
        if ( (*p) >= 0x20 && (*p) <= 0x7E )
            root->script->error( sloc, "unexpected character '%c'", (*p) );
        else
            root->script->error( sloc, "unexpected character '\\x%02X'", (*p) );
        if ( root->script->error_count() >= ERROR_LIMIT )
            goto error;
    }
	break;
	case 5:
#line 84 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ data.append( '\"' ); }
	break;
	case 6:
#line 85 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ data.append( '\\' ); }
	break;
	case 7:
#line 86 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ data.append( '/' ); }
	break;
	case 8:
#line 87 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ data.append( '\b' ); }
	break;
	case 9:
#line 88 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ data.append( '\f' ); }
	break;
	case 10:
#line 89 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ data.append( '\n' ); }
	break;
	case 11:
#line 90 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ data.append( '\r' ); }
	break;
	case 12:
#line 91 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ data.append( '\t' ); }
	break;
	case 13:
#line 93 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ temp = ( (*p) - '0' ) << 4; }
	break;
	case 14:
#line 94 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ temp = ( (*p) - 'a' + 0x0A ) << 4; }
	break;
	case 15:
#line 95 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ temp = ( (*p) - 'A' + 0x0A ) << 4; }
	break;
	case 16:
#line 97 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ data.append( (char)( temp | (*p) - '0' ) ); }
	break;
	case 17:
#line 98 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ data.append( (char)( temp | (*p) - 'a' + 0x0A ) ); }
	break;
	case 18:
#line 99 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ data.append( (char)( temp | (*p) - 'A' + 0x0A ) ); }
	break;
	case 19:
#line 102 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ temp = ( (*p) - '0' ) << 20; }
	break;
	case 20:
#line 103 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ temp = ( (*p) - 'a' + 0x0A ) << 20; }
	break;
	case 21:
#line 104 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ temp = ( (*p) - 'A' + 0x0A ) << 20; }
	break;
	case 22:
#line 106 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ temp |= ( (*p) - '0' ) << 16; }
	break;
	case 23:
#line 107 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ temp |= ( (*p) - 'a' + 0x0A ) << 16; }
	break;
	case 24:
#line 108 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ temp |= ( (*p) - 'A' + 0x0A ) << 16; }
	break;
	case 25:
#line 110 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ temp |= ( (*p) - '0' ) << 12; }
	break;
	case 26:
#line 111 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ temp |= ( (*p) - 'a' + 0x0A ) << 12; }
	break;
	case 27:
#line 112 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ temp |= ( (*p) - 'A' + 0x0A ) << 12; }
	break;
	case 28:
#line 114 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ temp |= ( (*p) - '0' ) << 8; }
	break;
	case 29:
#line 115 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ temp |= ( (*p) - 'a' + 0x0A ) << 8; }
	break;
	case 30:
#line 116 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ temp |= ( (*p) - 'A' + 0x0A ) << 8; }
	break;
	case 31:
#line 118 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ temp |= ( (*p) - '0' ) << 4; }
	break;
	case 32:
#line 119 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ temp |= ( (*p) - 'a' + 0x0A ) << 4; }
	break;
	case 33:
#line 120 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ temp |= ( (*p) - 'A' + 0x0A ) << 4; }
	break;
	case 34:
#line 122 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ temp |= (*p) - '0'; }
	break;
	case 35:
#line 123 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ temp |= (*p) - 'a' + 0x0A; }
	break;
	case 36:
#line 124 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ temp |= (*p) - 'A' + 0x0A; }
	break;
	case 37:
#line 127 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{
                    if ( ! encode_utf8( &data, temp ) )
                    {
                        root->script->error(
                                sloc, "invalid codepoint U+%04" PRIX32, temp );
                        if ( root->script->error_count() >= ERROR_LIMIT )
                            goto error;
                    }
                }
	break;
	case 38:
#line 160 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{
                    xec_token* token = make_identifier( sloc, &data );
                    TOKEN( token );
                }
	break;
	case 39:
#line 167 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{
                    size_t length = data.size();
                    data.append( '\0' );
                    const char* number = (const char*)data.tearoff();
                    MTOKEN( XEC_TOKEN_NUMBER, sloc, number, length );
                }
	break;
	case 40:
#line 176 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{
                    size_t length = data.size();
                    data.append( '\0' );
                    const char* string = (const char*)data.tearoff();
                    MTOKEN( XEC_TOKEN_STRING, sloc, string, length );
                }
	break;
	case 41:
#line 183 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_XMARK, sloc, "!", 1 ); }
	break;
	case 42:
#line 184 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_PERCENT, sloc, "%", 1 ); }
	break;
	case 43:
#line 185 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_AMPERSAND, sloc, "&", 1 ); }
	break;
	case 44:
#line 186 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_LPN, sloc, "(", 1 ); }
	break;
	case 45:
#line 187 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_RPN, sloc, ")", 1 ); }
	break;
	case 46:
#line 188 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_ASTERISK, sloc, "*", 1 ); }
	break;
	case 47:
#line 189 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_PLUS, sloc, "+", 1 ); }
	break;
	case 48:
#line 190 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_COMMA, sloc, ",", 1 ); }
	break;
	case 49:
#line 191 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_MINUS, sloc, "-", 1 ); }
	break;
	case 50:
#line 192 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_PERIOD, sloc, ".", 1 ); }
	break;
	case 51:
#line 193 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_SOLIDUS, sloc, "/", 1 ); }
	break;
	case 52:
#line 194 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_COLON, sloc, ":", 1 ); }
	break;
	case 53:
#line 195 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_SEMICOLON, sloc, ";", 1 ); }
	break;
	case 54:
#line 196 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_LESS, sloc, "<", 1 ); }
	break;
	case 55:
#line 197 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_ASSIGN, sloc, "=", 1 ); }
	break;
	case 56:
#line 198 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_GREATER, sloc, ">", 1 ); }
	break;
	case 57:
#line 199 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_QMARK, sloc, "?", 1 ); }
	break;
	case 58:
#line 200 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_LSQ, sloc, "[", 1 ); }
	break;
	case 59:
#line 201 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_RSQ, sloc, "]", 1 ); }
	break;
	case 60:
#line 202 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_CARET, sloc, "^", 1 ); }
	break;
	case 61:
#line 203 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_LBR, sloc, "{", 1 ); }
	break;
	case 62:
#line 204 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_VBAR, sloc, "|", 1 ); }
	break;
	case 63:
#line 205 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_RBR, sloc, "}", 1 ); }
	break;
	case 64:
#line 206 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_TILDE, sloc, "~", 1 ); }
	break;
	case 65:
#line 208 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_INCREMENT, sloc, "++", 2 ); }
	break;
	case 66:
#line 209 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_DECREMENT, sloc, "--", 2 ); }
	break;
	case 67:
#line 211 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_CONCATENATE, sloc, "..", 2 ); }
	break;
	case 68:
#line 213 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_LSHIFT, sloc, "<<", 2 ); }
	break;
	case 69:
#line 214 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_LRSHIFT, sloc, ">>", 2 ); }
	break;
	case 70:
#line 215 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_ARSHIFT, sloc, "~>>", 3 ); }
	break;
	case 71:
#line 217 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_NOTEQUAL, sloc, "!=", 2 ); }
	break;
	case 72:
#line 218 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_LESSEQUAL, sloc, "<=", 2 ); }
	break;
	case 73:
#line 219 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_EQUAL, sloc, "==", 2 ); }
	break;
	case 74:
#line 220 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_GREATEREQUAL, sloc, ">=", 2 ); }
	break;
	case 75:
#line 221 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_NOTIN, sloc, "!in", 3 ); }
	break;
	case 76:
#line 222 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_NOTIS, sloc, "!is", 3 ); }
	break;
	case 77:
#line 224 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_MODASSIGN, sloc, "%=", 2 ); }
	break;
	case 78:
#line 225 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_BITANDASSIGN, sloc, "&=", 2 ); }
	break;
	case 79:
#line 226 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_MULASSIGN, sloc, "*=", 2 ); }
	break;
	case 80:
#line 227 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_ADDASSIGN, sloc, "+=", 2 ); }
	break;
	case 81:
#line 228 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_SUBASSIGN, sloc, "-=", 2 ); }
	break;
	case 82:
#line 229 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_DIVASSIGN, sloc, "/=", 2 ); }
	break;
	case 83:
#line 230 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_BITXORASSIGN, sloc, "^=", 2 ); }
	break;
	case 84:
#line 231 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_BITORASSIGN, sloc, "|=", 2 ); }
	break;
	case 85:
#line 232 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_INTDIVASSIGN, sloc, "~=", 2 ); }
	break;
	case 86:
#line 233 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_LSHIFTASSIGN, sloc, "<<=", 3 ); }
	break;
	case 87:
#line 234 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_LRSHIFTASSIGN, sloc, ">>=", 3 ); }
	break;
	case 88:
#line 235 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_ARSHIFTASSIGN, sloc, "~>>=", 4 ); }
	break;
	case 89:
#line 237 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_LOGICAND, sloc, "&&", 2 ); }
	break;
	case 90:
#line 238 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_LOGICXOR, sloc, "^^", 2 ); }
	break;
	case 91:
#line 239 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_LOGICOR, sloc, "||", 2 ); }
	break;
	case 92:
#line 241 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_EACHKEY, sloc, "::", 2 ); }
	break;
	case 93:
#line 242 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_ELLIPSIS, sloc, "...", 3 ); }
	break;
	case 94:
#line 248 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ {cs = 29; goto _again;} }
	break;
#line 1838 "xec_parser_ragel.cpp"
		}
	}

_again:
	if ( cs == 0 )
		goto _out;
	if ( ++p != pe )
		goto _resume;
	_test_eof: {}
	if ( p == eof )
	{
	const char *__acts = _lexer_actions + _lexer_eof_actions[cs];
	unsigned int __nacts = (unsigned int) *__acts++;
	while ( __nacts-- > 0 ) {
		switch ( *__acts++ ) {
	case 0:
#line 35 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ newline( (int)( offset + ( p - buffer ) - 1 ) ); }
	break;
	case 3:
#line 40 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{
        data.shrink();
        int sloc = (int)( offset + ( p - buffer ) );
        root->script->error( sloc, "unexpected end of file" );
        {p++; goto _out; }
    }
	break;
	case 4:
#line 48 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{
        data.shrink();
        int sloc = (int)( offset + ( p - buffer ) );
        if ( (*p) >= 0x20 && (*p) <= 0x7E )
            root->script->error( sloc, "unexpected character '%c'", (*p) );
        else
            root->script->error( sloc, "unexpected character '\\x%02X'", (*p) );
        if ( root->script->error_count() >= ERROR_LIMIT )
            goto error;
    }
	break;
	case 38:
#line 160 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{
                    xec_token* token = make_identifier( sloc, &data );
                    TOKEN( token );
                }
	break;
	case 39:
#line 167 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{
                    size_t length = data.size();
                    data.append( '\0' );
                    const char* number = (const char*)data.tearoff();
                    MTOKEN( XEC_TOKEN_NUMBER, sloc, number, length );
                }
	break;
	case 40:
#line 176 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{
                    size_t length = data.size();
                    data.append( '\0' );
                    const char* string = (const char*)data.tearoff();
                    MTOKEN( XEC_TOKEN_STRING, sloc, string, length );
                }
	break;
	case 41:
#line 183 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_XMARK, sloc, "!", 1 ); }
	break;
	case 42:
#line 184 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_PERCENT, sloc, "%", 1 ); }
	break;
	case 43:
#line 185 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_AMPERSAND, sloc, "&", 1 ); }
	break;
	case 44:
#line 186 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_LPN, sloc, "(", 1 ); }
	break;
	case 45:
#line 187 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_RPN, sloc, ")", 1 ); }
	break;
	case 46:
#line 188 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_ASTERISK, sloc, "*", 1 ); }
	break;
	case 47:
#line 189 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_PLUS, sloc, "+", 1 ); }
	break;
	case 48:
#line 190 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_COMMA, sloc, ",", 1 ); }
	break;
	case 49:
#line 191 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_MINUS, sloc, "-", 1 ); }
	break;
	case 50:
#line 192 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_PERIOD, sloc, ".", 1 ); }
	break;
	case 51:
#line 193 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_SOLIDUS, sloc, "/", 1 ); }
	break;
	case 52:
#line 194 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_COLON, sloc, ":", 1 ); }
	break;
	case 53:
#line 195 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_SEMICOLON, sloc, ";", 1 ); }
	break;
	case 54:
#line 196 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_LESS, sloc, "<", 1 ); }
	break;
	case 55:
#line 197 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_ASSIGN, sloc, "=", 1 ); }
	break;
	case 56:
#line 198 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_GREATER, sloc, ">", 1 ); }
	break;
	case 57:
#line 199 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_QMARK, sloc, "?", 1 ); }
	break;
	case 58:
#line 200 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_LSQ, sloc, "[", 1 ); }
	break;
	case 59:
#line 201 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_RSQ, sloc, "]", 1 ); }
	break;
	case 60:
#line 202 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_CARET, sloc, "^", 1 ); }
	break;
	case 61:
#line 203 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_LBR, sloc, "{", 1 ); }
	break;
	case 62:
#line 204 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_VBAR, sloc, "|", 1 ); }
	break;
	case 63:
#line 205 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_RBR, sloc, "}", 1 ); }
	break;
	case 64:
#line 206 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_TILDE, sloc, "~", 1 ); }
	break;
	case 65:
#line 208 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_INCREMENT, sloc, "++", 2 ); }
	break;
	case 66:
#line 209 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_DECREMENT, sloc, "--", 2 ); }
	break;
	case 67:
#line 211 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_CONCATENATE, sloc, "..", 2 ); }
	break;
	case 68:
#line 213 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_LSHIFT, sloc, "<<", 2 ); }
	break;
	case 69:
#line 214 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_LRSHIFT, sloc, ">>", 2 ); }
	break;
	case 70:
#line 215 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_ARSHIFT, sloc, "~>>", 3 ); }
	break;
	case 71:
#line 217 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_NOTEQUAL, sloc, "!=", 2 ); }
	break;
	case 72:
#line 218 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_LESSEQUAL, sloc, "<=", 2 ); }
	break;
	case 73:
#line 219 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_EQUAL, sloc, "==", 2 ); }
	break;
	case 74:
#line 220 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_GREATEREQUAL, sloc, ">=", 2 ); }
	break;
	case 75:
#line 221 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_NOTIN, sloc, "!in", 3 ); }
	break;
	case 76:
#line 222 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_NOTIS, sloc, "!is", 3 ); }
	break;
	case 77:
#line 224 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_MODASSIGN, sloc, "%=", 2 ); }
	break;
	case 78:
#line 225 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_BITANDASSIGN, sloc, "&=", 2 ); }
	break;
	case 79:
#line 226 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_MULASSIGN, sloc, "*=", 2 ); }
	break;
	case 80:
#line 227 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_ADDASSIGN, sloc, "+=", 2 ); }
	break;
	case 81:
#line 228 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_SUBASSIGN, sloc, "-=", 2 ); }
	break;
	case 82:
#line 229 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_DIVASSIGN, sloc, "/=", 2 ); }
	break;
	case 83:
#line 230 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_BITXORASSIGN, sloc, "^=", 2 ); }
	break;
	case 84:
#line 231 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_BITORASSIGN, sloc, "|=", 2 ); }
	break;
	case 85:
#line 232 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_INTDIVASSIGN, sloc, "~=", 2 ); }
	break;
	case 86:
#line 233 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_LSHIFTASSIGN, sloc, "<<=", 3 ); }
	break;
	case 87:
#line 234 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_LRSHIFTASSIGN, sloc, ">>=", 3 ); }
	break;
	case 88:
#line 235 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_ARSHIFTASSIGN, sloc, "~>>=", 4 ); }
	break;
	case 89:
#line 237 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_LOGICAND, sloc, "&&", 2 ); }
	break;
	case 90:
#line 238 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_LOGICXOR, sloc, "^^", 2 ); }
	break;
	case 91:
#line 239 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_LOGICOR, sloc, "||", 2 ); }
	break;
	case 92:
#line 241 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_EACHKEY, sloc, "::", 2 ); }
	break;
	case 93:
#line 242 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ MTOKEN( XEC_TOKEN_ELLIPSIS, sloc, "...", 3 ); }
	break;
	case 94:
#line 248 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
	{ {cs = 29; goto _again;} }
	break;
#line 2121 "xec_parser_ragel.cpp"
		}
	}
	}

	_out: {}
	}

#line 465 "../../toolbox/source/xec/lib/parser/xec_parser_ragel.rl"
        
        offset += read;
    }

    if ( ! ferror( file ) )
    {
        MTOKEN( XEC_TOKEN_EOF, offset, "", 0 );
    }

#undef MTOKEN
#undef TOKEN

error:

    // Free parser.
    XecParseFree( parser, free );

        
    // Close file.
    free( buffer );
    fclose( file );


    // Check if there were errors.
    return root->script->error_count() == 0;
}



#pragma unused( lexer_first_final )
#pragma unused( lexer_error )
#pragma unused( lexer_en_main )






